{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTkxNTEw", "number": 327, "title": "Service multi-instance support", "bodyText": "Issue #, if available:\nDescription of changes:\nMakes changes to EvergreenService to support multiple instances of the same service running. This PR does not implement the logic of running multiple instances (that is in aws-greengrass/aws-greengrass-lambda-manager#11), it only makes that change possible to do.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README\n New unit tests\n New integration tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-23T22:56:27Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327", "merged": true, "mergeCommit": {"oid": "b2226a07171ab12d10e4d123f6a45bd9afffa9aa"}, "closed": true, "closedAt": "2020-07-27T21:22:12Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc33s8PgBqjM1ODIwMjIwMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5JLX4AFqTQ1NjE2MTMzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa00fbe233d3399146fdfc8e6d42fc04fccae20e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fa00fbe233d3399146fdfc8e6d42fc04fccae20e", "committedDate": "2020-07-23T22:55:23Z", "message": "Initial multi instance support"}, "afterCommit": {"oid": "b2d6eb69098045c87a5277a9024d37321c385d58", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2d6eb69098045c87a5277a9024d37321c385d58", "committedDate": "2020-07-23T23:05:40Z", "message": "Initial multi instance support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2d6eb69098045c87a5277a9024d37321c385d58", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2d6eb69098045c87a5277a9024d37321c385d58", "committedDate": "2020-07-23T23:05:40Z", "message": "Initial multi instance support"}, "afterCommit": {"oid": "e81befa30d7ab46479f4828741c316d18475d7a7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e81befa30d7ab46479f4828741c316d18475d7a7", "committedDate": "2020-07-23T23:19:35Z", "message": "Initial multi instance support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e81befa30d7ab46479f4828741c316d18475d7a7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e81befa30d7ab46479f4828741c316d18475d7a7", "committedDate": "2020-07-23T23:19:35Z", "message": "Initial multi instance support"}, "afterCommit": {"oid": "a337f6efe81b6f2cb0fc650796124fdbffef24ba", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a337f6efe81b6f2cb0fc650796124fdbffef24ba", "committedDate": "2020-07-23T23:21:49Z", "message": "Initial multi instance support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a337f6efe81b6f2cb0fc650796124fdbffef24ba", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a337f6efe81b6f2cb0fc650796124fdbffef24ba", "committedDate": "2020-07-23T23:21:49Z", "message": "Initial multi instance support"}, "afterCommit": {"oid": "b5521e7b3b19fd6219275ea1b7d47a00e93ca4f2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b5521e7b3b19fd6219275ea1b7d47a00e93ca4f2", "committedDate": "2020-07-23T23:28:00Z", "message": "Initial multi instance support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbafc75462bcb29a6402a00a23e98ddfd4c40b47", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbafc75462bcb29a6402a00a23e98ddfd4c40b47", "committedDate": "2020-07-23T23:45:51Z", "message": "Fix existing tests"}, "afterCommit": {"oid": "37e56f2623ae13e2f13204af2c7c8552af75817b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/37e56f2623ae13e2f13204af2c7c8552af75817b", "committedDate": "2020-07-23T23:54:13Z", "message": "Fix existing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37e56f2623ae13e2f13204af2c7c8552af75817b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/37e56f2623ae13e2f13204af2c7c8552af75817b", "committedDate": "2020-07-23T23:54:13Z", "message": "Fix existing tests"}, "afterCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a682f9c5ec1146f8ad9526db57ac11e5205e20a5", "committedDate": "2020-07-24T00:09:52Z", "message": "Fix existing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTA2Mjc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455106274", "createdAt": "2020-07-24T18:39:11Z", "commit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozOToxMVrOG255VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo1MDo1NFrOG26OGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDg1Mw==", "bodyText": "update the map instances?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460224853", "createdAt": "2020-07-24T18:39:11Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTU4NA==", "bodyText": "When to call MultiInstanceEvergreenService or createNewInstance? should this constructor be protected?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460225584", "createdAt": "2020-07-24T18:40:39Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzY2OA==", "bodyText": "If the keys are incremental integers, why not using list?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460227668", "createdAt": "2020-07-24T18:45:23Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMDE2OA==", "bodyText": "Should check BASE_INSTANCE_ID here as well as in removeInstance/putDependenciesIntoSet?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460230168", "createdAt": "2020-07-24T18:50:54Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            return getClass().getConstructor(Topics.class, int.class)\n+                    .newInstance(config, lastInstanceId.incrementAndGet());\n+        } catch (NoSuchMethodException | InstantiationException\n+                | IllegalAccessException | InvocationTargetException e) {\n+            throw new ServiceLoadException(\"Unable to create new instance of \" + getClass().getName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Get an instance by ID.\n+     *\n+     * @param instanceId ID to lookup\n+     * @return instance or null if not found\n+     */\n+    @Nullable\n+    public MultiInstanceEvergreenService getInstance(int instanceId) {\n+        if (instances == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5033056f1a250d8db97d4f53e4d6a3f1120f0ba0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5033056f1a250d8db97d4f53e4d6a3f1120f0ba0", "committedDate": "2020-07-24T18:51:33Z", "message": "Fix multiinstance construction, add tests"}, "afterCommit": {"oid": "c9bba7e9e3cad7c02bd7a46b59c5af718bf31cbb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c9bba7e9e3cad7c02bd7a46b59c5af718bf31cbb", "committedDate": "2020-07-24T18:59:35Z", "message": "Fix multiinstance construction, add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTUyMzY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455152366", "createdAt": "2020-07-24T20:00:54Z", "commit": {"oid": "1a662117f9a16d0bb05c534eeae299924ee186b2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQ0OTIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455244921", "createdAt": "2020-07-25T00:42:43Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0Mjo0M1rOG3BB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0Mjo0M1rOG3BB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTc0Mg==", "bodyText": "Are there side effects of keeping state topic(and the rest of the private topics) in the runtime namespace? If Service A is listening to runtime config changes for Service B (serving the shared config requirement), it will get notified when state topic changes when it shouldn't, there is a way to filter those notifications in the IPC agent layer, but scattering this logic upto there doesn't sound like a good idea to me", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460341742", "createdAt": "2020-07-25T00:42:43Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -123,10 +123,11 @@\n      *\n      * @param evergreenService service that this is the lifecycle for\n      * @param logger           service's logger\n+     * @param topics           config namespace for storing the state topic\n      */\n-    public Lifecycle(EvergreenService evergreenService, Logger logger) {\n+    public Lifecycle(EvergreenService evergreenService, Logger logger, Topics topics) {\n         this.evergreenService = evergreenService;\n-        this.stateTopic = initStateTopic(evergreenService.getConfig());\n+        this.stateTopic = initStateTopic(topics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQ2NTI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455246527", "createdAt": "2020-07-25T00:55:27Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo1NToyN1rOG3BJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo1NToyN1rOG3BJFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MzU3Mw==", "bodyText": "This logic really doesn't belong here, it should logically be inside the context get() and injectField() methods", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460343573", "createdAt": "2020-07-25T00:55:27Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            int id = lastInstanceId.incrementAndGet();\n+            Constructor<? extends MultiInstanceEvergreenService> constructor =\n+                    getClass().getDeclaredConstructor(Topics.class, int.class);\n+            constructor.setAccessible(true);\n+            MultiInstanceEvergreenService newService = constructor.newInstance(config, id);\n+            context.injectFields(newService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQ3MDY0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455247064", "createdAt": "2020-07-25T01:00:38Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTowMDozOFrOG3BLqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTowMDozOFrOG3BLqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NDIzMg==", "bodyText": "Do you need a utility method to return a list/set of all instances of an object of this class, currently the lambda manager will need to keep track of instances on its own when calling createNewInstance()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460344232", "createdAt": "2020-07-25T01:00:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjQ4ODAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455248803", "createdAt": "2020-07-25T01:17:45Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTA3NDkw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455907490", "createdAt": "2020-07-27T15:45:40Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NTo0MFrOG3ocYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowNToxOVrOG3pPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NzQ5MQ==", "bodyText": "Do you need to add a test case for remove instances as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460987491", "createdAt": "2020-07-27T15:45:40Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -248,4 +249,34 @@ void GIVEN_running_service_WHEN_setenv_config_changes_THEN_service_restarts() th\n \n         assertTrue(serviceRestarted.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_running_service_WHEN_createNewInstance_THEN_service_has_new_instance() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_dynamic_config.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        GenericExternalService service = (GenericExternalService) kernel.locate(\"service_with_dynamic_config\");\n+        assertEquals(State.RUNNING, service.getState());\n+\n+        CountDownLatch clonedServiceRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((serviceToListenTo, oldState, newState) -> {\n+            if (\"service_with_dynamic_config-1\".equals(serviceToListenTo.getName()) && State.RUNNING.equals(newState)) {\n+                clonedServiceRunning.countDown();\n+            }\n+        });\n+\n+        MultiInstanceEvergreenService clonedService = service.createNewInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA==", "bodyText": "What needs to be revisited?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460988090", "createdAt": "2020-07-27T15:46:36Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDYyMg==", "bodyText": "Does this mean, for non-pinned lambdas, there will be always at least one service instance running? How would the base instance get started? Similar to other components?\nAlso, it's a bit wasteful if at least one instance of the non-pinned lambdas are always running. It kinda defeats the purpose of having non-pinned lambdas.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461000622", "createdAt": "2020-07-27T16:05:19Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTk1NTEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-455995511", "createdAt": "2020-07-27T17:36:59Z", "commit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNjo1OVrOG3ssPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozODoyMVrOG3svGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA4NQ==", "bodyText": "Curious how does lifecycle work for the child instances?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461057085", "createdAt": "2020-07-27T17:36:59Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzgxNw==", "bodyText": "Is it that all service instances share the same root topics ( and state topic) ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461057817", "createdAt": "2020-07-27T17:38:21Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/049198e507791f7f0c9ddfb79e196b7c1568b6c7", "committedDate": "2020-07-24T23:16:22Z", "message": "Merge branch 'master' into multi-instance"}, "afterCommit": {"oid": "f67c5c1ebe9c08113f80baca006b091ab0de11c0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f67c5c1ebe9c08113f80baca006b091ab0de11c0", "committedDate": "2020-07-27T18:12:37Z", "message": "Change runtime to private, move multi-instance out of kernel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1548172bd213adaf9cc4a64e9dda0a2efb27fa7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e1548172bd213adaf9cc4a64e9dda0a2efb27fa7", "committedDate": "2020-07-27T19:19:42Z", "message": "Initial multi instance support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af7c90bd31545bad04638712d088f471beae9fe4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af7c90bd31545bad04638712d088f471beae9fe4", "committedDate": "2020-07-27T19:19:42Z", "message": "Fix existing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ea6f9ad04d145b2ee6b04f8368e77ec55bce6b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/19ea6f9ad04d145b2ee6b04f8368e77ec55bce6b", "committedDate": "2020-07-27T19:19:42Z", "message": "Fix multiinstance construction, add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/070054fd001c5b7c5c5630bda13bc1a3bd0556f9", "committedDate": "2020-07-27T19:19:42Z", "message": "Change runtime to private, move multi-instance out of kernel"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67c5c1ebe9c08113f80baca006b091ab0de11c0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f67c5c1ebe9c08113f80baca006b091ab0de11c0", "committedDate": "2020-07-27T18:12:37Z", "message": "Change runtime to private, move multi-instance out of kernel"}, "afterCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/070054fd001c5b7c5c5630bda13bc1a3bd0556f9", "committedDate": "2020-07-27T19:19:42Z", "message": "Change runtime to private, move multi-instance out of kernel"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTAwNjA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-456100605", "createdAt": "2020-07-27T20:13:13Z", "commit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxMzoxNFrOG3x3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyMTowOFrOG3yH9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0MTk0Mg==", "bodyText": "lifecycle can get privateConfig from EvergreenService.getPrivateConfig(), probably no need to pass everything around", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461141942", "createdAt": "2020-07-27T20:13:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {\n         this.config = topics;\n+        this.privateConfig = privateConfig;\n         this.context = topics.getContext();\n \n         // TODO: Validate syntax for lifecycle keywords and fail early\n         // skipif will require validation for onpath/exists etc. keywords\n \n-        this.logger = LogManager.getLogger(getName());\n-        logger.dfltKv(SERVICE_NAME_KEY, getName());\n+        this.logger = LogManager.getLogger(getServiceName()).createChild();\n+        logger.dfltKv(SERVICE_NAME_KEY, getServiceName());\n         logger.dfltKv(CURRENT_STATE_METRIC_NAME, (Supplier<State>) this::getState);\n \n         this.externalDependenciesTopic =\n                 topics.createLeafChild(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC).dflt(new ArrayList<String>());\n         this.externalDependenciesTopic.withParentNeedsToKnow(false);\n-        this.lifecycle = new Lifecycle(this, logger);\n+        this.lifecycle = new Lifecycle(this, logger, privateConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTE3OA==", "bodyText": "shouldn't this be private store topic?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461145178", "createdAt": "2020-07-27T20:19:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -41,7 +41,7 @@ void GIVEN_a_config_WHEN_constructor_is_called_THEN_service_is_initialized() {\n         // THEN\n         // verify config\n         Assertions.assertSame(config, evergreenService.config);\n-        Mockito.verify(config).createLeafChild(STATE_TOPIC_NAME);\n+        Mockito.verify(runtimeStoreTopic).createLeafChild(STATE_TOPIC_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NjEwMw==", "bodyText": "In  EvergreenService you initialize this.lifecycle = new Lifecycle(this, logger, privateConfig);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461146103", "createdAt": "2020-07-27T20:21:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/LifecycleTest.java", "diffHunk": "@@ -111,7 +113,7 @@ void stop() throws IOException {\n \n     @Test\n     public void GIVEN_state_new_WHEN_requestStart_called_THEN_install_invoked() throws InterruptedException {\n-        lifecycle = new Lifecycle(evergreenService, logger);\n+        lifecycle = new Lifecycle(evergreenService, logger, evergreenService.getRuntimeConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e67bc8aa66c6159bfa410a4fbc9d55b1b3ec1441", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e67bc8aa66c6159bfa410a4fbc9d55b1b3ec1441", "committedDate": "2020-07-27T20:30:53Z", "message": "Update merge behavior for private to be merged"}, "afterCommit": {"oid": "ba8b5b172f3957478427c1f2f8cf1a85e8bbae45", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba8b5b172f3957478427c1f2f8cf1a85e8bbae45", "committedDate": "2020-07-27T20:34:12Z", "message": "Update merge behavior for private to be merged"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba8b5b172f3957478427c1f2f8cf1a85e8bbae45", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba8b5b172f3957478427c1f2f8cf1a85e8bbae45", "committedDate": "2020-07-27T20:34:12Z", "message": "Update merge behavior for private to be merged"}, "afterCommit": {"oid": "56bf227e33e5fd44b1d28eddf16627810a5c94bd", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56bf227e33e5fd44b1d28eddf16627810a5c94bd", "committedDate": "2020-07-27T20:36:07Z", "message": "Update merge behavior for private to be merged"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTIwMTM3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-456120137", "createdAt": "2020-07-27T20:43:06Z", "commit": {"oid": "56bf227e33e5fd44b1d28eddf16627810a5c94bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MzowNlrOG3y1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MzowNlrOG3y1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1Nzc4OA==", "bodyText": "NIT: i know tests can pass, but it'll be confusing later. Can you update this to privateConfigTopics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461157788", "createdAt": "2020-07-27T20:43:06Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -41,9 +43,15 @@\n     void beforeEach() {\n         Topics config = initializeMockedConfig();\n         Topics serviceRuntimeTopics = mock(Topics.class);\n+        Topic mockTopic = mock(Topic.class);\n \n-        when(config.lookupTopics(EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC)).thenReturn(serviceRuntimeTopics);\n+        when(config.lookupTopics(EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC)).thenReturn(serviceRuntimeTopics);\n         when(serviceRuntimeTopics.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bf227e33e5fd44b1d28eddf16627810a5c94bd"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2803f39be07bea18c4d9b65526ac12e84c7d0a51", "committedDate": "2020-07-27T20:47:40Z", "message": "Update merge behavior for private to be merged"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56bf227e33e5fd44b1d28eddf16627810a5c94bd", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/56bf227e33e5fd44b1d28eddf16627810a5c94bd", "committedDate": "2020-07-27T20:36:07Z", "message": "Update merge behavior for private to be merged"}, "afterCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2803f39be07bea18c4d9b65526ac12e84c7d0a51", "committedDate": "2020-07-27T20:47:40Z", "message": "Update merge behavior for private to be merged"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTI3OTc5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-456127979", "createdAt": "2020-07-27T20:55:25Z", "commit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQ0Mjcy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-456144272", "createdAt": "2020-07-27T21:21:05Z", "commit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTYxMzMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#pullrequestreview-456161330", "createdAt": "2020-07-27T21:51:36Z", "commit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MTozN1rOG305zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMToxNFrOG31KQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTYzMA==", "bodyText": "For lack of documentation elsewhere, update the comment at the top of this method to reflect the changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461191630", "createdAt": "2020-07-27T21:51:37Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -289,13 +289,17 @@ private static UpdateBehaviorTree createDeploymentMergeBehavior() {\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.REPLACE);\n         UpdateBehaviorTree serviceRuntimeMergeBehavior =\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n+        UpdateBehaviorTree servicePrivateMergeBehavior =\n+                new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n \n         rootMergeBehavior.getChildOverride().put(SERVICES_NAMESPACE_TOPIC, servicesMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(UpdateBehaviorTree.WILDCARD, insideServiceMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(AUTH_TOKEN_LOOKUP_KEY,\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE));\n         insideServiceMergeBehavior.getChildOverride().put(\n                 EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC, serviceRuntimeMergeBehavior);\n+        insideServiceMergeBehavior.getChildOverride().put(\n+                EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC, servicePrivateMergeBehavior);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTUwOQ==", "bodyText": "I believe this will be used for creating the 'main' instance of the service. Update the comments to highlight the same if it makes sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461195509", "createdAt": "2020-07-27T22:00:28Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA==", "bodyText": "Would it be better to call it instanceConfig?\nThat's what I understand this is being used to facilitate.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461195840", "createdAt": "2020-07-27T22:01:14Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2926, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}