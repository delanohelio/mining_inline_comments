{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzIyMDg0", "number": 140, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowNTo0N1rODrxPyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1Mzo0NlrODsK62Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjIyMjE4OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.0.0/recipe.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowNTo0N1rOF8Ty1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1NDo1NlrOF8X-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MzE4OQ==", "bodyText": "It will be good to demonstrate platform specific artifacts as well as part of the tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398783189", "createdAt": "2020-03-26T18:05:47Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.0.0/recipe.yaml", "diffHunk": "@@ -9,20 +9,26 @@ Parameters:\n     value: TestVal\n     type: String\n Lifecycle:\n-  install:\n-    all:\n+  all:\n+    install:\n       skipif: onpath git\n       script: sudo apt-get install git\n-    debian:\n+  debian:\n+    install:\n       skipif: onpath git\n       script: sudo apt-get install git\n-    macos:\n+  macos:\n+    install:\n       skipif: onpath git\n       script: brew install git\n+    run: git status\n Artifacts:\n   - %s/MonitoringService-1.0.0/monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTcyNw==", "bodyText": "Since the task is to support platform in lifecycle, we can do artifact section later when we work on artifact download. In addition, parsing artifact section will be slightly different because it's a list.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398851727", "createdAt": "2020-03-26T19:54:56Z", "author": {"login": "wikimonkey"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.0.0/recipe.yaml", "diffHunk": "@@ -9,20 +9,26 @@ Parameters:\n     value: TestVal\n     type: String\n Lifecycle:\n-  install:\n-    all:\n+  all:\n+    install:\n       skipif: onpath git\n       script: sudo apt-get install git\n-    debian:\n+  debian:\n+    install:\n       skipif: onpath git\n       script: sudo apt-get install git\n-    macos:\n+  macos:\n+    install:\n       skipif: onpath git\n       script: brew install git\n+    run: git status\n Artifacts:\n   - %s/MonitoringService-1.0.0/monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4MzE4OQ=="}, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI1NTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxMjo0MlrOF8UIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1NTowM1rOF8X-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4ODcyMQ==", "bodyText": "Nit -Serializer feels like too broad a name, when the scope of this is limited to YAML/Json. Also currently this class seems to be functioning more as a factory than a serializer/deserializer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398788721", "createdAt": "2020-03-26T18:12:42Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class Serializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTc4OA==", "bodyText": "Good call. It's intent to be a factory. Updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398851788", "createdAt": "2020-03-26T19:55:03Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class Serializer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4ODcyMQ=="}, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI3MDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxNjozNFrOF8UR8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTo1NToxMFrOF8X_Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MTE1NQ==", "bodyText": "Since we've put this class as a common, is the intention so that any EG code can use it? In that case anyone trying to use this will be blocked until acquiring a lock, is that acceptable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398791155", "createdAt": "2020-03-26T18:16:34Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class Serializer {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper(new YAMLFactory());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg1MTg0Ng==", "bodyText": "The serializer factory can provide serializers including recipe serializer.\nI didn't do lazy initialization, it's initialization on demand, so there is no lock for using it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398851846", "createdAt": "2020-03-26T19:55:10Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/util/Serializer.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class Serializer {\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper(new YAMLFactory());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MTE1NQ=="}, "originalCommit": {"oid": "dec23e7d1348de3166ce8060ee526cc4d0fdb6c8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzU0ODEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMTo0OToxN1rOF8gejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMzoxMVrOF8-_Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5MDk4OQ==", "bodyText": "It's very neat but I'm concerned that we are hiding the PlatformResolver.resolve logic in a Deserializer.\nI would prefer separating the deserialization vs resolve platform.\n\nString -> RecipeDoc via deserialization.\nRecipeDoc -> Recipe via resolving platform.\n\nBut this would create one more layer of conversion and seems an overkill for now. We can see what others think.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r398990989", "createdAt": "2020-03-27T01:49:17Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "diffHunk": "@@ -98,4 +106,16 @@ public Package(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion reci\n     public Semver getVersion() {\n         return version;\n     }\n+\n+    private static class MapFieldDeserializer extends JsonDeserializer<Map<String, Object>> {\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Map<String, Object> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n+                throws IOException {\n+            Map<Object, Object> map =\n+                    SerializerFactory.getRecipeSerializer().convertValue(jsonParser.readValueAsTree(), Map.class);\n+\n+            return (Map<String, Object>) PlatformResolver.resolvePlatform(map);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac5eeaf3b0a96f37e54a4018bae944479bd8999"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDg0Mw==", "bodyText": "Discussed offline, we are aligned that although additional layer of model will add good separation, we don't want to add additional memory usage.\nOur mental model is deserializer could be smart to contain the conversion logic.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r399490843", "createdAt": "2020-03-27T19:23:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "diffHunk": "@@ -98,4 +106,16 @@ public Package(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion reci\n     public Semver getVersion() {\n         return version;\n     }\n+\n+    private static class MapFieldDeserializer extends JsonDeserializer<Map<String, Object>> {\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public Map<String, Object> deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)\n+                throws IOException {\n+            Map<Object, Object> map =\n+                    SerializerFactory.getRecipeSerializer().convertValue(jsonParser.readValueAsTree(), Map.class);\n+\n+            return (Map<String, Object>) PlatformResolver.resolvePlatform(map);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk5MDk4OQ=="}, "originalCommit": {"oid": "1ac5eeaf3b0a96f37e54a4018bae944479bd8999"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjQyODQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/SerializerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1Mzo0NlrOF88CYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo0ODowOFrOF8_uxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MjUyOQ==", "bodyText": "this doesn't need to be a static block, you can set features when you create the mapper. I think it is \".with\" or \".configure\" or something like that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r399442529", "createdAt": "2020-03-27T17:53:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/SerializerFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class SerializerFactory {\n+    private static final ObjectMapper RECIPE_SERIALIZER = new ObjectMapper(new YAMLFactory());\n+\n+    static {\n+        RECIPE_SERIALIZER.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac5eeaf3b0a96f37e54a4018bae944479bd8999"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwMzA0NQ==", "bodyText": "Yep, updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/140#discussion_r399503045", "createdAt": "2020-03-27T19:48:08Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/util/SerializerFactory.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.aws.iot.evergreen.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+public final class SerializerFactory {\n+    private static final ObjectMapper RECIPE_SERIALIZER = new ObjectMapper(new YAMLFactory());\n+\n+    static {\n+        RECIPE_SERIALIZER.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MjUyOQ=="}, "originalCommit": {"oid": "1ac5eeaf3b0a96f37e54a4018bae944479bd8999"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4960, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}