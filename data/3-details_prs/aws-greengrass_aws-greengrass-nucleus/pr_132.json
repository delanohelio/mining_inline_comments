{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjQ4MzQ4", "number": 132, "title": "Updated dependency resolver to handle pakage removes scenario.", "bodyText": "Description of changes:\nUpdated dependency resolver to handle package removed scenario.\nAdded unit test and integration test\nWhy is this change necessary:\nThis change removed packages (and corresponding services) form the device when a package is removed from the deployment document.\nHow was this change tested:\nUnit test and integration tests.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-24T20:49:09Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132", "merged": true, "mergeCommit": {"oid": "96123884d0b851136dd4a8c8c59b0a623935339e"}, "closed": true, "closedAt": "2020-03-25T21:16:18Z", "author": {"login": "fahadmohammed01"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ4TFcAH2gAyMzkzMjQ4MzQ4OjAwOTVmMTk3ZGZkYmNmNDFjNDFmYzk2YjFiYTY1OTZkODU2NWViODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcROCw0gFqTM4MTUzNTIxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0095f197dfdbcf41c41fc96b1ba6596d8565eb89", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0095f197dfdbcf41c41fc96b1ba6596d8565eb89", "committedDate": "2020-03-24T19:44:24Z", "message": "changes to resolve dependecy when when packages are removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15416cae7e0fc63883b2b2785a14c8454d07d6aa", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/15416cae7e0fc63883b2b2785a14c8454d07d6aa", "committedDate": "2020-03-24T20:40:24Z", "message": "removed commented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa495ad20b03f228b7b65dda95c68cb8fdd3876d", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/aa495ad20b03f228b7b65dda95c68cb8fdd3876d", "committedDate": "2020-03-24T20:48:17Z", "message": "updated comments for the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259", "committedDate": "2020-03-24T21:12:24Z", "message": "added back the InterruptedException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzE2OTAw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-380716900", "createdAt": "2020-03-24T21:39:46Z", "commit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTozOTo0NlrOF7EH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo0NjoyM1rOF7EUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg==", "bodyText": "Why don't you just compile newRootPackages once and pass to both dependency resolver and config resolver? Or use rootPackagesToRemove consistently?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397477852", "createdAt": "2020-03-24T21:39:46Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw==", "bodyText": "Doesn't this drop the original Service state value in the map?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397479757", "createdAt": "2020-03-24T21:43:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTE0OQ==", "bodyText": "Why is this test case removed? Is the scenario tested elsewhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397481149", "createdAt": "2020-03-24T21:46:23Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzM1MTU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-380735155", "createdAt": "2020-03-24T22:13:48Z", "commit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzo0OFrOF7FGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzo0OFrOF7FGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzgyOQ==", "bodyText": "These assertions won't work well when they fail. Use the hamcrest matchers, like equals or contains to make these work better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397493829", "createdAt": "2020-03-24T22:13:48Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -160,6 +165,49 @@ void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated\n         Log4jLogEventBuilder.removeGlobalListener(listener);\n     }\n \n+    /**\n+     * First deployment contains packages yellow and customerApp\n+     * Second deployment updates the root packages to yellow and red. Red is added, customerApp is removed\n+     * and no update for yellow\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(3)\n+    void GIVEN_services_running_WHEN_service_added_and_deleted_THEN_add_remove_service_accordingly()\n+            throws Exception {\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"CustomerAppAndYellowSignal.json\").toURI(), System.currentTimeMillis());\n+        result.get();\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        assertThat(\"Only contain main, YellowSignal, CustomerApp, Mosquitto and GreenSignal\", services.size() == 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzA3NjMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-380707631", "createdAt": "2020-03-24T21:24:09Z", "commit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNDowOVrOF7DpZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNzo1N1rOF7Dw7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA1NQ==", "bodyText": "Nit you could combine these two, if not then move the TODO from line 48 to line 53", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397470055", "createdAt": "2020-03-24T21:24:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MTk4MA==", "bodyText": "You've moved the business logic that this test tests to DependencyResolver class, shouldn't there be a corresponding test added to DependencyResolverTest as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397471980", "createdAt": "2020-03-24T21:27:57Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()\n-            throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b17333ca2d3328157b5378f97be9f77641efc1c9", "committedDate": "2020-03-25T01:59:51Z", "message": "addressed minor comments in PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c7d36471a3a7247b491e72ebba96e161443fc7", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d6c7d36471a3a7247b491e72ebba96e161443fc7", "committedDate": "2020-03-25T02:08:50Z", "message": "addressed pr comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODE2NjQw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-380816640", "createdAt": "2020-03-25T02:11:02Z", "commit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxMTowMlrOF7JvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoyMzozNVrOF7J8Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2OTg2MQ==", "bodyText": "Is there a better name for this than newRootPackages? with you latest change, newRootPackages sounds a little ambiguous, for instance the first thing that comes to my mind is 'this must be any new top level packages the deployment is trying to add'", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397569861", "createdAt": "2020-03-25T02:11:02Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +45,18 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            List<String> newRootPackages = new ArrayList<>(document.getRootPackages());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTY3MQ==", "bodyText": "Nit- With your latest change, maybe getServiceVersion method doesn't need to return optional anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397571671", "createdAt": "2020-03-25T02:17:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -301,28 +303,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MzE1OQ==", "bodyText": "I think what Hui is trying to point out is that since service dependencies actually are maintained in as a list of DependencyServiceName::RequiredDependencyState, you end up losing information about the required state for main service dependencies. That would apply to the earlier implementation as well but earlier it was easy to retain that information than it would be now if we were to make an incremental change to pass state information for dependencies", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397573159", "createdAt": "2020-03-25T02:23:35Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535de3660d216dab8a83ac15688c8cf91ec6242e", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/535de3660d216dab8a83ac15688c8cf91ec6242e", "committedDate": "2020-03-25T04:31:28Z", "message": "updated variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1679cb823d36807356e55d9b81b6c5580fd45b76", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1679cb823d36807356e55d9b81b6c5580fd45b76", "committedDate": "2020-03-25T05:37:12Z", "message": "changes to resolve dependecy when when packages are removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd79cab2c2d061f4e61dce4f44ab005b5a0abe1", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9fd79cab2c2d061f4e61dce4f44ab005b5a0abe1", "committedDate": "2020-03-25T05:37:12Z", "message": "removed commented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e6b50fb57714c82557e5110246f7adb5822a0a", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/37e6b50fb57714c82557e5110246f7adb5822a0a", "committedDate": "2020-03-25T05:37:12Z", "message": "updated comments for the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba1076e155ed7b4ae94a34756eca582fb713715", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cba1076e155ed7b4ae94a34756eca582fb713715", "committedDate": "2020-03-25T05:37:12Z", "message": "added back the InterruptedException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44a78327fdea96f42beda1c2d0b910f7673fd95", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f44a78327fdea96f42beda1c2d0b910f7673fd95", "committedDate": "2020-03-25T05:37:12Z", "message": "addressed minor comments in PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415f955e21757b60d845505642f9965fd79eead8", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/415f955e21757b60d845505642f9965fd79eead8", "committedDate": "2020-03-25T05:37:12Z", "message": "addressed pr comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe2536bbb01af20d1dbbddf5cf31732fe05971e", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4fe2536bbb01af20d1dbbddf5cf31732fe05971e", "committedDate": "2020-03-25T05:37:12Z", "message": "updated variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d079da8fa10a6a622a7cfb7ae415886cb568b9", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/79d079da8fa10a6a622a7cfb7ae415886cb568b9", "committedDate": "2020-03-25T17:02:01Z", "message": "updated  benchmark tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a05d8eb20b8c47eb5de6f538c69cc63ee084bf0", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5a05d8eb20b8c47eb5de6f538c69cc63ee084bf0", "committedDate": "2020-03-25T17:02:19Z", "message": "Merge branch 'remove-services-in-da' of github.com:aws/aws-greengrass-kernel into remove-services-in-da"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/02925cd591c60588908e4ba64f5c829d6e6fb439", "committedDate": "2020-03-25T17:36:43Z", "message": "Merge branch 'master' into remove-services-in-da"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDE5Njg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-381419685", "createdAt": "2020-03-25T18:21:31Z", "commit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyMTozMVrOF7og0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyNjozOVrOF7otXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NDA2Ng==", "bodyText": "Is this a future that you are geting? If so, we need to be careful about blocking calls like this with no timeout.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398074066", "createdAt": "2020-03-25T18:21:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTE0Ng==", "bodyText": "Why list vs set? If we don't need anything specific, how about just a Collection or even Iterable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398075146", "createdAt": "2020-03-25T18:23:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -44,20 +45,19 @@\n      * transform it to a kernel config key-value pair.\n      *\n      * @param packagesToDeploy     package identifiers for resolved packages that are to be deployed\n-     * @param document             deployment document\n-     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @param document      deployment document\n+     * @param rootPackages  root level packages\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n     public Map<Object, Object> resolve(List<PackageIdentifier> packagesToDeploy, DeploymentDocument document,\n-                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+                                       List<String> rootPackages) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjQzMw==", "bodyText": "If you wait for Shirley's change then you can have access to richer information about the dependency (like if it is a default dependency) which is what you really need in this case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398076433", "createdAt": "2020-03-25T18:25:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzI3OQ==", "bodyText": "For all these, if there are no root packages, why is it resolving anything? That seems incorrect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398077279", "createdAt": "2020-03-25T18:26:39Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -107,24 +113,24 @@ public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deplo\n         t.interrupt();\n         Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n         assertThat(thrown.getCause(), isA(RetryableDeploymentTaskFailureException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);\n         verify(mockPackageCache).preparePackages(anyList());\n-        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anySet());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anyList());\n         verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n     }\n \n     @Test\n     public void GIVEN_deploymentDocument_WHEN_resolve_kernel_config_interrupted_THEN_deploymentTask_aborted()\n             throws Exception {\n         when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n-        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anySet()))\n+        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anyList()))\n                 .thenThrow(new InterruptedException());\n \n         Exception thrown = assertThrows(RetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n         assertThat(thrown.getCause(), isA(InterruptedException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a91e1f69730e429f9378592271efd16170e90342", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a91e1f69730e429f9378592271efd16170e90342", "committedDate": "2020-03-25T19:31:11Z", "message": "addressing minor PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDY4NzQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-381468746", "createdAt": "2020-03-25T19:27:40Z", "commit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOToyNzo0MFrOF7q9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTozNDo1MVrOF7rM9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNDA1OA==", "bodyText": "nit: you don't have to add Mosquitto and GreenSignal here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398114058", "createdAt": "2020-03-25T19:27:40Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/CustomerAppAndYellowSignal.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"DeploymentId\": \"f7fe5b16-574a-11ea-82b4-0242ac130004\",\n+  \"RootPackages\": [\n+    \"CustomerApp\", \"YellowSignal\"\n+  ],\n+  \"Packages\": [\n+    {\n+      \"Name\": \"CustomerApp\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"Mosquitto\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"Mosquitto\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"GreenSignal\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"GreenSignal\",\n+      \"ResolvedVersion\": \"1.0.0\"\n+    },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODEzMw==", "bodyText": "Instead of scanning all the active services in kernel, why don't we just check what package in rootPackagesToResolve doesn't have a pinned version in packageNameToVersionConstraints, and directly find out the package version?\nWe don't need document here at all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398118133", "createdAt": "2020-03-25T19:34:51Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91e1f69730e429f9378592271efd16170e90342"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d0d2a87333627a292e755d63fa13f34778f622", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d9d0d2a87333627a292e755d63fa13f34778f622", "committedDate": "2020-03-25T20:36:02Z", "message": "minor comments from PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTIwMjQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-381520246", "createdAt": "2020-03-25T20:42:39Z", "commit": {"oid": "d9d0d2a87333627a292e755d63fa13f34778f622"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0Mjo0MFrOF7tguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0Mjo0MFrOF7tguQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1NTk2MQ==", "bodyText": "nit: .containsKey()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398155961", "createdAt": "2020-03-25T20:42:40Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -304,14 +304,15 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve,\n                                          Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n         Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n         for (EvergreenService evergreenService : activeServices) {\n             String serviceName = evergreenService.getName();\n             // add version constraints for package not in deployment document but is active in device\n-            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+            if (rootPackagesToResolve.contains(serviceName)\n+                    && !packageNameToVersionConstraints.keySet().contains(serviceName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d0d2a87333627a292e755d63fa13f34778f622"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTM1MjEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#pullrequestreview-381535212", "createdAt": "2020-03-25T21:04:29Z", "commit": {"oid": "d9d0d2a87333627a292e755d63fa13f34778f622"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2370, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}