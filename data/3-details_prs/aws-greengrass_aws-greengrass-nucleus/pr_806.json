{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Njg2NzMy", "number": 806, "title": "fix(provision): load Nucleus recipe from build file to component store and config store", "bodyText": "Issue #, if available:\nDescription of changes:\nProblems:\n\nGIVEN nucleus and CLI provisioned on the device, WHEN use CLI to create local deployment to change Nucleus config while device is offline, THEN deployment fails because Nucleus recipe is missing in component store\n\nIf Nucleus recipe does exist and references an artifact, deployment still fails because artifact is also missing\n\n\nGIVEN nucleus provisioned on the device, WHEN create a first deployment (local or cloud) to change any Nucleus config, THEN deployment succeeds but Nucleus always restarts, because Nucleus bootstrap lifecycle step is not initialized and any changes in bootstrap step leads to the restart workflow.\n\nThe solution to both problems is to properly initialize Nucleus service config and component store during the initial provision.\n\nInitialize JVM options from current setting\nCopy Nucleus recipe from {release_zip_unpack_dir}/conf/recipe.yaml to local component store\n\nCopy unpacked artifacts to local component store (as it's referenced in lifecyle.bootstrap in the recipe)\n\n\nLoad dependencies and lifecycle definitions from the recipe to config store\n\nWhy is this change necessary:\nTo enable Nucleus deployments when device is offline.\nTo prevent unnecessary restarts in Nucleus config deployments.\nHow was this change tested:\nEnd-to-end scenarios:\n\nGIVEN nucleus and CLI provisioned on the device, WHEN device goes offline, AND use CLI to create a deployment to change Nucleus config logging.level=DEBUG, THEN deployment succeeds (and Nucleus doesn't restart)\nGIVEN nucleus and CLI provisioned on the device, WHEN device goes offline, AND use CLI to create a deployment to change Nucleus config jvmOptions=-Xmx64m, THEN Nucleus restarts and deployment succeeds\nGIVEN nucleus v2.0.0 and CLI provisioned on the device, WHEN create a cloud deployment of nucleus v2.0.1, THEN Nucleus restarts into the new version and deployment succeeds. WHEN device goes offline, AND use CLI to create a deployment of Nucleus v2.0.0, THEN Nucleus restarts into the old version (using the local recipe) and deployment succeeds\n\nAny additional information or context required to review the change:\nWhen device is online, deployments will always download latest recipe from Cloud and overwrite the local copy (if the content doesn't match).\nIn this PR, the changes focus on common scenarios of local deployments when offline. As a result, the local recipe and artifacts don't have to be exact matches as in Cloud component service.\n\nLocal recipe doesn't have artifacts section\nUnpacked artifacts are copied to component store instead of the original artifact zip file\n\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-30T00:56:19Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806", "merged": true, "mergeCommit": {"oid": "003f19ee79627f5a0e281beee285c26aaa311ef6"}, "closed": true, "closedAt": "2021-02-09T21:49:53Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdrUnfigFqTU2MDE3NDU2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4jBz7gFqTU4NzA0MDE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMTc0NTY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-560174567", "createdAt": "2020-12-30T19:28:31Z", "commit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOToyODozMVrOIMz1sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxOTozNzowM1rOIMz-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwMzE1NA==", "bodyText": "So we're moving this line in nucleus bootstrap script: echo \"{configuration:/jvmOptions}\" > \"$KERNEL_ROOT/alts/current/launch.params\"\nto here. Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550303154", "createdAt": "2020-12-30T19:28:31Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,\n+                                                          DeviceConfiguration deviceConfiguration) {\n+        Topics nucleusLifecycle = getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                deviceConfiguration.getNucleusComponentName(), SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        // Persist initial Nucleus launch parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDMwNTUwMA==", "bodyText": "Hmm why exclude -Droot?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r550305500", "createdAt": "2020-12-30T19:37:03Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -349,6 +354,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d615938828a83bddf69e05f8304b97932cee2ef", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2d615938828a83bddf69e05f8304b97932cee2ef", "committedDate": "2020-12-30T00:54:09Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}, "afterCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba2f814600da797cb2c5b2f5dac040e6ecf69f9c", "committedDate": "2021-01-20T16:14:54Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTg5OTA0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-573589904", "createdAt": "2021-01-21T17:53:53Z", "commit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Mzo1M1rOIYCyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Mzo1M1rOIYCyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4MjMzNA==", "bodyText": "After adding getting the recipe from the build file, will we still keep the properties file as well for version? or should the version now come from the recipe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562082334", "createdAt": "2021-01-21T17:53:53Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);\n+\n         setupProxy();\n+\n         return this;\n     }\n \n     private void setupProxy() {\n         ProxyUtils.setProxyProperties(context.get(DeviceConfiguration.class));\n     }\n \n+    private void initializeNucleusServiceConfigIfNotExist(KernelAlternatives kernelAlternatives,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTkyNTI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-573592524", "createdAt": "2021-01-21T17:56:52Z", "commit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Njo1MlrOIYC6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1Njo1MlrOIYC6WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NDQ0MQ==", "bodyText": "There's some initialization logic in DeviceConfiguration.initializeNucleusComponentConfig() for initializing version and a few more things for the Nucleus component config, is there a way we can consolidate that with this here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562084441", "createdAt": "2021-01-21T17:56:52Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -603,15 +612,64 @@ public Kernel parseArgs(String... args) {\n         }\n \n         // Update device configuration from commandline arguments after loading config files\n-        kernelCommandLine.updateDeviceConfiguration(getContext().get(DeviceConfiguration.class));\n+        DeviceConfiguration deviceConfiguration = getContext().get(DeviceConfiguration.class);\n+        kernelCommandLine.updateDeviceConfiguration(deviceConfiguration);\n+        // After configuration is fully loaded, initialize Nucleus service config\n+        initializeNucleusServiceConfigIfNotExist(kernelAlts, deviceConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTk0NTUy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-573594552", "createdAt": "2021-01-21T17:59:15Z", "commit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1OToxNVrOIYDBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzo1OToxNVrOIYDBCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA4NjE1NA==", "bodyText": "Should we remove the default for the jvmOptions config from the Nucleus recipe now that the default it evaluated here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r562086154", "createdAt": "2021-01-21T17:59:15Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -355,6 +360,17 @@ public Topic getRootCAFilePath() {\n                 .addValidator(deTildeValidator);\n     }\n \n+    /**\n+     * Get JVM options. Default to current JVM options input.\n+     *\n+     * @return JVM options config topic\n+     */\n+    public Topic getJvmOptions() {\n+        String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+        return getTopic(DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba2f814600da797cb2c5b2f5dac040e6ecf69f9c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ba2f814600da797cb2c5b2f5dac040e6ecf69f9c", "committedDate": "2021-01-20T16:14:54Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}, "afterCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f42a991067a57dafb37d73aec30b75f86ce6a449", "committedDate": "2021-01-25T04:50:13Z", "message": "Add recipe template"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjcyMjY5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-575672269", "createdAt": "2021-01-25T18:08:43Z", "commit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODowODo0M1rOIZz4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxODoyMToyNVrOIZ0Xlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzNTMyMw==", "bodyText": "remove.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563935323", "createdAt": "2021-01-25T18:08:43Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/lifecyclemanager/LogManagerHelperTest.java", "diffHunk": "@@ -168,7 +167,7 @@ void GIVEN_null_logger_config_WHEN_subscribe_THEN_correctly_reconfigures_all_log\n         NucleusPaths nucleusPaths = mock(NucleusPaths.class);\n         Topics rootConfigTopics = mock(Topics.class);\n         when(rootConfigTopics.findOrDefault(any(), anyString(), anyString(), anyString())).thenReturn(new ArrayList<>());\n-        when(configuration.lookup(anyString(), anyString())).thenReturn(mock(Topic.class));\n+        //lenient().when(configuration.lookup(anyString(), anyString())).thenReturn(mock(Topic.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzNjU0MQ==", "bodyText": "We need to modify the pipeline to write the version number into the recipe now instead of properties?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563936541", "createdAt": "2021-01-25T18:10:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -506,22 +604,19 @@ public String getNucleusVersion() {\n      *\n      * @return version from the zip file, or a default if the version can't be determined\n      */\n-    public static String getVersionFromBuildMetadataFile() {\n+    public static String getVersionFromBuildRecipeFile() {\n         try {\n-            try (InputStream is = Files\n-                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n-                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n-                NUCLEUS_BUILD_PROPERTIES.load(is);\n-            }\n-\n-            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n-            if (version != null) {\n-                return version;\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe recipe = getRecipeSerializer()\n+                    .readValue(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                                    .resolve(NUCLEUS_RECIPE_FILENAME).toFile(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzkzODI2Ng==", "bodyText": "double check that this recipe matches exactly what is in the CDK.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563938266", "createdAt": "2021-01-25T18:13:36Z", "author": {"login": "MikeDombo"}, "path": "conf/recipe.yaml", "diffHunk": "@@ -1,3 +1,8 @@\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk0MTA1OA==", "bodyText": "Can you add a skip for directories? We currently get a false error that some directory is not a recipe, which we can safely ignore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563941058", "createdAt": "2021-01-25T18:17:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -510,57 +511,72 @@ private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidReques\n         }\n     }\n \n-    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n     private void copyRecipesToComponentStore(Path from) throws IOException {\n         try (Stream<Path> files = Files.walk(from)) {\n             for (Path r : files.collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzk0MzMxOA==", "bodyText": "you can't put this here since in most cases this code will never execute. Put this somewhere that always executes so that we always pass the version in.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r563943318", "createdAt": "2021-01-25T18:21:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +235,95 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+            // Copy artifact to component store\n+            // TODO\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            String componentVersion = componentRecipe.getVersion().toString();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).dflt(componentVersion);\n+\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42a991067a57dafb37d73aec30b75f86ce6a449"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NzI2MDU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-577726059", "createdAt": "2021-01-27T20:22:10Z", "commit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjoxMFrOIbZ-cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjoxMFrOIbZ-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODA0OQ==", "bodyText": "Should this be replaceAndWait() or dflt() ? What happens when Nucleus restarts and already has lifecycle config from the tlog?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565608049", "createdAt": "2021-01-27T20:22:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,\n+                    COPY_ATTRIBUTES);\n+            Permissions.setArtifactPermission(unpackArtifactPath, FileSystemPermission.builder()\n+                    .ownerRead(true).ownerExecute(true).groupRead(true).groupExecute(true)\n+                    .otherRead(true).otherExecute(true).build());\n+\n+            KernelConfigResolver kernelConfigResolver = kernel.getContext().get(KernelConfigResolver.class);\n+            // Add Nucleus dependencies\n+            Map<String, DependencyProperties> nucleusDependencies = componentRecipe.getDependencies();\n+            if (nucleusDependencies == null) {\n+                nucleusDependencies = Collections.emptyMap();\n+            }\n+            kernel.getConfig().lookup(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                    nucleusComponentName, SERVICE_DEPENDENCIES_NAMESPACE_TOPIC)\n+                    .dflt(kernelConfigResolver.generateServiceDependencies(nucleusDependencies));\n+\n+            // Add Nucleus lifecycle (after config interpolation)\n+            Object interpolatedLifecycle = kernelConfigResolver.interpolate(componentRecipe.getLifecycle(),\n+                    new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getVersion()),\n+                    nucleusDependencies.keySet(),\n+                    kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).toPOJO());\n+            nucleusLifecycle.replaceAndWait((Map<String, Object>) interpolatedLifecycle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NzI2NjI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-577726625", "createdAt": "2021-01-27T20:22:58Z", "commit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjo1OFrOIbaAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yN1QyMDoyMjo1OFrOIbaAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTYwODQ5MQ==", "bodyText": "This is being done in initializeNucleusComponentConfig as well, is this duplicate?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565608491", "createdAt": "2021-01-27T20:22:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +246,97 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+            kernel.getConfig().lookup(SETENV_CONFIG_NAMESPACE, GGC_VERSION_ENV).withValue(componentVersion.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b497ecff63d8fdcc1771c88d586700ab512160"}, "originalPosition": 187}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db8b6db955fb5697a55ebc6e50e9706e750b421f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/db8b6db955fb5697a55ebc6e50e9706e750b421f", "committedDate": "2021-01-28T00:14:49Z", "message": "Address comments"}, "afterCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5475557adf28e410df2661faae0eefdda487282c", "committedDate": "2021-01-28T00:24:02Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3ODkxMzIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-577891321", "createdAt": "2021-01-28T00:29:30Z", "commit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3ODk0MTMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-577894130", "createdAt": "2021-01-28T00:36:30Z", "commit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDozNjozMFrOIbh_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMDo1NDoyNVrOIbiYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTczOTI2Ng==", "bodyText": "remove the properties file?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565739266", "createdAt": "2021-01-28T00:36:30Z", "author": {"login": "MikeDombo"}, "path": "assembly.xml", "diffHunk": "@@ -27,6 +27,7 @@\n             <outputDirectory>/conf</outputDirectory>\n             <includes>\n                 <include>nucleus-build.properties</include>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTAyNg==", "bodyText": "use isEmpty?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565741026", "createdAt": "2021-01-28T00:41:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTQyNg==", "bodyText": "validate that the path actually exists before attempting to copy it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565741426", "createdAt": "2021-01-28T00:42:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTE1MQ==", "bodyText": "Is this hardcoded name correct/the only way to do it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565745151", "createdAt": "2021-01-28T00:52:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0NTc4NA==", "bodyText": "this might be copying too much, if I don't unpack into a directory which contains only the zip stuff, like if I unzip into my home directory.\nWe may want to restrict the copying more. Just something to consider anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r565745784", "createdAt": "2021-01-28T00:54:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -226,6 +245,96 @@ private void initializeNucleusComponentConfig() {\n                 .dflt(mainDependencies);\n     }\n \n+    /**\n+     * Persist initial launch parameters of JVM options.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    private void persistInitialLaunchParams(KernelAlternatives kernelAlts) {\n+        // Persist initial Nucleus launch parameters\n+        try {\n+            String jvmOptions = ManagementFactory.getRuntimeMXBean().getInputArguments().stream().sorted()\n+                    .filter(s -> !s.startsWith(JVM_OPTION_ROOT_PATH)).collect(Collectors.joining(\" \"));\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, getNucleusComponentName(), CONFIGURATION_CONFIG_KEY,\n+                    DEVICE_PARAM_JVM_OPTIONS).dflt(jvmOptions);\n+\n+            kernelAlts.writeLaunchParamsToFile(jvmOptions);\n+            logger.atInfo().log(\"Successfully setup Nucleus launch parameters\");\n+        } catch (IOException e) {\n+            logger.atError().log(\"Unable to setup Nucleus launch parameters\", e);\n+        }\n+    }\n+\n+    /**\n+     * Load Nucleus component information from build recipe.\n+     *\n+     * @param kernelAlts KernelAlternatives instance\n+     */\n+    public void initializedNucleusFromRecipe(KernelAlternatives kernelAlts) {\n+        String nucleusComponentName = getNucleusComponentName();\n+        Topics nucleusLifecycle = kernel.getConfig().lookupTopics(DEFAULT_VALUE_TIMESTAMP, SERVICES_NAMESPACE_TOPIC,\n+                nucleusComponentName, SERVICE_LIFECYCLE_NAMESPACE_TOPIC);\n+        if (nucleusLifecycle.children.size() != 0) {\n+            logger.atDebug().log(\"Nucleus lifecycle has already been initialized\");\n+            return;\n+        }\n+\n+        persistInitialLaunchParams(kernelAlts);\n+        try {\n+            Path unpackDir = locateCurrentKernelUnpackDir();\n+            Path recipePath = unpackDir.resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                    .resolve(NUCLEUS_RECIPE_FILENAME);\n+\n+            // Copy recipe to component store\n+            ComponentStore componentStore = kernel.getContext().get(ComponentStore.class);\n+            DeploymentService.copyRecipeFileToComponentStore(componentStore, recipePath, logger);\n+\n+            // Update Nucleus in config store\n+            Optional<ComponentRecipe> resolvedRecipe = kernel.getContext().get(RecipeLoader.class)\n+                    .loadFromFile(new String(Files.readAllBytes(recipePath.toAbsolutePath()), StandardCharsets.UTF_8));\n+            if (!resolvedRecipe.isPresent()) {\n+                throw new PackageLoadingException(\"Failed to resolve Nucleus recipe\");\n+            }\n+            ComponentRecipe componentRecipe = resolvedRecipe.get();\n+            nucleusComponentName = componentRecipe.getComponentName();\n+\n+            // Add Nucleus version\n+            Semver componentVersion = componentRecipe.getVersion();\n+            kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, nucleusComponentName,\n+                    VERSION_CONFIG_KEY).withValue(componentVersion.toString());\n+\n+            // Copy unpacked artifacts to component store\n+            Path unpackArtifactPath = kernel.getContext().get(NucleusPaths.class).unarchiveArtifactPath(\n+                    new ComponentIdentifier(nucleusComponentName, componentVersion), \"aws.greengrass.nucleus\");\n+            Utils.copyFolderRecursively(unpackDir, unpackArtifactPath, REPLACE_EXISTING, NOFOLLOW_LINKS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c"}, "originalPosition": 190}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5475557adf28e410df2661faae0eefdda487282c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5475557adf28e410df2661faae0eefdda487282c", "committedDate": "2021-01-28T00:24:02Z", "message": "Address comments"}, "afterCommit": {"oid": "c8e48fbe8eb57cab7736ee6cb28fd47b8cabec30", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8e48fbe8eb57cab7736ee6cb28fd47b8cabec30", "committedDate": "2021-01-28T20:26:25Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzQxNjU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-578741659", "createdAt": "2021-01-28T21:08:26Z", "commit": {"oid": "c8e48fbe8eb57cab7736ee6cb28fd47b8cabec30"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NzYxNTU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-578761554", "createdAt": "2021-01-28T21:37:43Z", "commit": {"oid": "c8e48fbe8eb57cab7736ee6cb28fd47b8cabec30"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1fbe7ad843e10fbd1f3b56a6b248604a5fad670", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e1fbe7ad843e10fbd1f3b56a6b248604a5fad670", "committedDate": "2021-02-02T18:42:12Z", "message": "Merge branch 'main' into fix-nucleus-lifecycle"}, "afterCommit": {"oid": "6a4d1e3f56f21e1d2c9d7962e9ce2498a2ab6801", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6a4d1e3f56f21e1d2c9d7962e9ce2498a2ab6801", "committedDate": "2021-02-02T18:46:26Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a4d1e3f56f21e1d2c9d7962e9ce2498a2ab6801", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6a4d1e3f56f21e1d2c9d7962e9ce2498a2ab6801", "committedDate": "2021-02-02T18:46:26Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}, "afterCommit": {"oid": "a1bc93b7f549bf3782492e62cd51d64be425dd77", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a1bc93b7f549bf3782492e62cd51d64be425dd77", "committedDate": "2021-02-02T23:19:28Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1bc93b7f549bf3782492e62cd51d64be425dd77", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a1bc93b7f549bf3782492e62cd51d64be425dd77", "committedDate": "2021-02-02T23:19:28Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}, "afterCommit": {"oid": "4082851b88636490485a2801a41a7cde9d885c08", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4082851b88636490485a2801a41a7cde9d885c08", "committedDate": "2021-02-09T03:24:45Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2MjE2NzI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-586216726", "createdAt": "2021-02-09T06:30:56Z", "commit": {"oid": "4082851b88636490485a2801a41a7cde9d885c08"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg2OTYwNTcy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-586960572", "createdAt": "2021-02-09T20:10:52Z", "commit": {"oid": "44175a5e78f135e96887138a0d6045a4e57d013f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQyMDoxMDo1MlrOIipiHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQyMDoxMDo1MlrOIipiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzIwMjk3Mg==", "bodyText": "Why did you do this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#discussion_r573202972", "createdAt": "2021-02-09T20:10:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/http/apache/internal/conn/SdkTlsSocketFactory.java", "diffHunk": "@@ -52,7 +52,7 @@ protected final void prepareSocket(final SSLSocket socket) {\n         // BEGIN GG MODIFICATIONS\n         try {\n             SSLParameters params = new SSLParameters();\n-            params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});\n+            //params.setApplicationProtocols(new String[]{\"x-amzn-http-ca\", \"http/1.1\"});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44175a5e78f135e96887138a0d6045a4e57d013f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5480fddcfb3d9ac6c44c864b5da7ef233efc6eec", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5480fddcfb3d9ac6c44c864b5da7ef233efc6eec", "committedDate": "2021-02-09T20:20:37Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44175a5e78f135e96887138a0d6045a4e57d013f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/44175a5e78f135e96887138a0d6045a4e57d013f", "committedDate": "2021-02-09T18:01:16Z", "message": "Merge branch 'main' into fix-nucleus-lifecycle"}, "afterCommit": {"oid": "5480fddcfb3d9ac6c44c864b5da7ef233efc6eec", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5480fddcfb3d9ac6c44c864b5da7ef233efc6eec", "committedDate": "2021-02-09T20:20:37Z", "message": "fix(provision): load Nucleus recipe from build file to component store and config store"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3MDEzNDU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-587013455", "createdAt": "2021-02-09T21:12:18Z", "commit": {"oid": "5480fddcfb3d9ac6c44c864b5da7ef233efc6eec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3MDQwMTkz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/806#pullrequestreview-587040193", "createdAt": "2021-02-09T21:45:39Z", "commit": {"oid": "5480fddcfb3d9ac6c44c864b5da7ef233efc6eec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2601, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}