{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODc2MzQx", "number": 228, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyMTozNFrOD6cQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNDoyMFrOD7GExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA3MDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyMTozNFrOGSSW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjoxMDoyMFrOGS1K4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODM0Mw==", "bodyText": "This needs a better name. Perhaps ERROR_RESET_TIME?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r421828343", "createdAt": "2020-05-07T22:21:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -96,7 +98,9 @@\n     private static final Map<State, Collection<State>> ALLOWED_STATE_TRANSITION_FOR_REPORTING = new HashMap<>();\n     // The number of continual occurrences from a state to ERRORED.\n     // This is not thread safe and should only be used inside reportState().\n-    private final Map<State, Integer> stateToErroredCount = new HashMap<>();\n+    private final Map<State, List<Long>> stateToErroredCount = new HashMap<>();\n+    private static final long THRESHOLD = Duration.ofHours(1).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyOTM0NQ==", "bodyText": "Also, should probably be configurable from the service's config.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r421829345", "createdAt": "2020-05-07T22:24:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -96,7 +98,9 @@\n     private static final Map<State, Collection<State>> ALLOWED_STATE_TRANSITION_FOR_REPORTING = new HashMap<>();\n     // The number of continual occurrences from a state to ERRORED.\n     // This is not thread safe and should only be used inside reportState().\n-    private final Map<State, Integer> stateToErroredCount = new HashMap<>();\n+    private final Map<State, List<Long>> stateToErroredCount = new HashMap<>();\n+    private static final long THRESHOLD = Duration.ofHours(1).toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODM0Mw=="}, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NDUzMw==", "bodyText": "Do you have a suggestion of where in the config this should go? Would under \"custom\" be a good candidate?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422394533", "createdAt": "2020-05-08T21:56:53Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -96,7 +98,9 @@\n     private static final Map<State, Collection<State>> ALLOWED_STATE_TRANSITION_FOR_REPORTING = new HashMap<>();\n     // The number of continual occurrences from a state to ERRORED.\n     // This is not thread safe and should only be used inside reportState().\n-    private final Map<State, Integer> stateToErroredCount = new HashMap<>();\n+    private final Map<State, List<Long>> stateToErroredCount = new HashMap<>();\n+    private static final long THRESHOLD = Duration.ofHours(1).toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODM0Mw=="}, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5ODY5MQ==", "bodyText": "No, it should be under lifecycle.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422398691", "createdAt": "2020-05-08T22:10:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -96,7 +98,9 @@\n     private static final Map<State, Collection<State>> ALLOWED_STATE_TRANSITION_FOR_REPORTING = new HashMap<>();\n     // The number of continual occurrences from a state to ERRORED.\n     // This is not thread safe and should only be used inside reportState().\n-    private final Map<State, Integer> stateToErroredCount = new HashMap<>();\n+    private final Map<State, List<Long>> stateToErroredCount = new HashMap<>();\n+    private static final long THRESHOLD = Duration.ofHours(1).toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODM0Mw=="}, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA3MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyMjowMlrOGSSXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo1ODo1NVrOGSuSWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODUyMA==", "bodyText": "you can replace this with an injectable Clock from the Context.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r421828520", "createdAt": "2020-05-07T22:22:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -158,13 +162,26 @@ private synchronized void internalReportState(State newState) {\n \n         if (State.ERRORED.equals(newState) && STATES_TO_ERRORED.contains(currentState)) {\n             // If the reported state is ERRORED, we'll increase the ERROR counter for the current state.\n-            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+            stateToErroredCount.compute(currentState, (k, v) -> {\n+                if (v == null) {\n+                    v = new ArrayList<>();\n+                }\n+\n+                final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NDQwMQ==", "bodyText": "The context would be the context from an EvergreenService, which is different from the Kernel context, right? I see where we put stuff into the Kernel context. Is there a place we put stuff into an EvergreenService context?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422284401", "createdAt": "2020-05-08T17:56:08Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -158,13 +162,26 @@ private synchronized void internalReportState(State newState) {\n \n         if (State.ERRORED.equals(newState) && STATES_TO_ERRORED.contains(currentState)) {\n             // If the reported state is ERRORED, we'll increase the ERROR counter for the current state.\n-            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+            stateToErroredCount.compute(currentState, (k, v) -> {\n+                if (v == null) {\n+                    v = new ArrayList<>();\n+                }\n+\n+                final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODUyMA=="}, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4NTkxNQ==", "bodyText": "No, there's only 1 context which is initialized in the Kernel. You can do something like: https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java#L41-L45\nWhere you can add a constructor to inject a Clock which will come from the Context automatically.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422285915", "createdAt": "2020-05-08T17:58:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -158,13 +162,26 @@ private synchronized void internalReportState(State newState) {\n \n         if (State.ERRORED.equals(newState) && STATES_TO_ERRORED.contains(currentState)) {\n             // If the reported state is ERRORED, we'll increase the ERROR counter for the current state.\n-            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+            stateToErroredCount.compute(currentState, (k, v) -> {\n+                if (v == null) {\n+                    v = new ArrayList<>();\n+                }\n+\n+                final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyODUyMA=="}, "originalCommit": {"oid": "78bc81b3194609a6292fa560c31a20fc22d21e35"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjkxMzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxMToyNlrOGTN1Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxMToyNlrOGTN1Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMjcyNw==", "bodyText": "I don't think that errorResetTime should be under run, it should be a top level value like run is because run is actually optional.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422802727", "createdAt": "2020-05-11T06:11:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -730,9 +750,13 @@ final void requestStop() {\n     }\n \n     private Integer getTimeoutConfigValue(String nameSpace, Integer defaultValue) {\n-        Topic timeoutTopic = evergreenService.getConfig()\n-                .find(EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, nameSpace,\n-                        TIMEOUT_NAMESPACE_TOPIC);\n-        return timeoutTopic == null ? defaultValue : (Integer) timeoutTopic.getOnce();\n+        return Coerce.toInt(evergreenService.getConfig().findOrDefault(defaultValue,\n+                EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, nameSpace, TIMEOUT_NAMESPACE_TOPIC));\n+    }\n+\n+    private int getErrorResetTime() {\n+        return Coerce.toInt(evergreenService.getConfig().findOrDefault(DEFAULT_ERROR_RESET_TIME_IN_SEC,\n+                EvergreenService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_RUN_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bd80103a15086eedd269dcd3ca73938234c504"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjkyMTAzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/LifecycleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNDoyMFrOGTN5gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNjoxNDoyMFrOGTN5gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgwMzg0MQ==", "bodyText": "Pretty sure we already have a test for this, but this is ok too.\nPlease, never sleep in tests. If the countdownlatch unlocks, then your state should be done. If it isn't then you can use the hamcrest eventually matcher to validate that the state is what you expect eventually.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/228#discussion_r422803841", "createdAt": "2020-05-11T06:14:20Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/LifecycleTest.java", "diffHunk": "@@ -325,6 +330,109 @@ void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() thro\n         assertEquals(1, errorReported.get());\n     }\n \n+    @Test\n+    void GIVEN_state_running_WHEN_errored_3_times_THEN_broken() throws InterruptedException {\n+        lifecycle = new Lifecycle(evergreenService, logger);\n+        initLifecycleState(lifecycle, State.NEW);\n+\n+        CountDownLatch reachedRunning1 = new CountDownLatch(1);\n+        CountDownLatch reachedRunning2 = new CountDownLatch(1);\n+        CountDownLatch reachedRunning3 = new CountDownLatch(1);\n+        Mockito.doAnswer(mock -> {\n+            lifecycle.reportState(State.RUNNING);\n+            reachedRunning1.countDown();\n+            return null;\n+        }).doAnswer(mock -> {\n+            lifecycle.reportState(State.RUNNING);\n+            reachedRunning2.countDown();\n+            return null;\n+        }).doAnswer(mock -> {\n+            lifecycle.reportState(State.RUNNING);\n+            reachedRunning3.countDown();\n+            return null;\n+        }).when(evergreenService).startup();\n+\n+        lifecycle.initLifecycleThread();\n+        lifecycle.requestStart();\n+        assertTrue(reachedRunning1.await(5, TimeUnit.SECONDS));\n+        Thread.sleep(1000); // Lifecycle thread needs some time to process the state transition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82bd80103a15086eedd269dcd3ca73938234c504"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}