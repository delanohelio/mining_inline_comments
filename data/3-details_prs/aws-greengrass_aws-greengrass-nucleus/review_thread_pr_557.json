{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTEzMjM4", "number": 557, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyMzozNVrOEw7i2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyMzozNVrOEw7i2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQyNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/cli/CLIEventStreamAgent.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoyMzozNVrOHmydIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozNDoxNFrOHmyy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNDU5Mw==", "bodyText": "Do you need to also change file permissions at this point?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/557#discussion_r510434593", "createdAt": "2020-10-22T20:23:35Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/builtin/services/cli/CLIEventStreamAgent.java", "diffHunk": "@@ -395,6 +395,43 @@ private void validateUpdateRecipesAndArtifactsRequest(UpdateRecipesAndArtifactsR\n                 throw new InvalidArgumentsError(\"Need to provide at least one of the directory paths to update\");\n             }\n         }\n+\n+        private void copyRecipes(Path from, Path to) throws IOException {\n+            for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+                String ext = Utils.extension(r.toString());\n+                ComponentRecipe recipe = null;\n+                if (r.toFile().length() == 0) {\n+                    logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                    continue;\n+                }\n+                try {\n+                    switch (ext.toLowerCase()) {\n+                        case \"yaml\":\n+                        case \"yml\":\n+                            recipe = SerializerFactory.getRecipeSerializer().readValue(r.toFile(),\n+                                    ComponentRecipe.class);\n+                            break;\n+                        case \"json\":\n+                            recipe = SerializerFactory.getRecipeSerializerJson()\n+                                    .readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (IOException e) {\n+                    logger.atError().log(\"Error reading recipe file from {}\", r, e);\n+                }\n+\n+                if (recipe == null) {\n+                    continue;\n+                }\n+\n+                // Write the recipe as YAML with the proper filename into the store\n+                Path copyTo = to.resolve(String.format(RECIPE_FILE_NAME_FORMAT, recipe.getComponentName(),\n+                        recipe.getComponentVersion().getValue()));\n+                Files.write(copyTo, SerializerFactory.getRecipeSerializer().writeValueAsBytes(recipe));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33a718a85a936f390cdd487e7ee8d2b0506bdd94"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNTY4MQ==", "bodyText": "No, the kernel is the thing doing the writing and permissions are set on the directory, so it is fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/557#discussion_r510435681", "createdAt": "2020-10-22T20:25:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/cli/CLIEventStreamAgent.java", "diffHunk": "@@ -395,6 +395,43 @@ private void validateUpdateRecipesAndArtifactsRequest(UpdateRecipesAndArtifactsR\n                 throw new InvalidArgumentsError(\"Need to provide at least one of the directory paths to update\");\n             }\n         }\n+\n+        private void copyRecipes(Path from, Path to) throws IOException {\n+            for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+                String ext = Utils.extension(r.toString());\n+                ComponentRecipe recipe = null;\n+                if (r.toFile().length() == 0) {\n+                    logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                    continue;\n+                }\n+                try {\n+                    switch (ext.toLowerCase()) {\n+                        case \"yaml\":\n+                        case \"yml\":\n+                            recipe = SerializerFactory.getRecipeSerializer().readValue(r.toFile(),\n+                                    ComponentRecipe.class);\n+                            break;\n+                        case \"json\":\n+                            recipe = SerializerFactory.getRecipeSerializerJson()\n+                                    .readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (IOException e) {\n+                    logger.atError().log(\"Error reading recipe file from {}\", r, e);\n+                }\n+\n+                if (recipe == null) {\n+                    continue;\n+                }\n+\n+                // Write the recipe as YAML with the proper filename into the store\n+                Path copyTo = to.resolve(String.format(RECIPE_FILE_NAME_FORMAT, recipe.getComponentName(),\n+                        recipe.getComponentVersion().getValue()));\n+                Files.write(copyTo, SerializerFactory.getRecipeSerializer().writeValueAsBytes(recipe));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNDU5Mw=="}, "originalCommit": {"oid": "33a718a85a936f390cdd487e7ee8d2b0506bdd94"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTI4Ng==", "bodyText": "what if the source file has 777. Destination will end up having the same? Also, what is the behavior if the file already exists with different permissions?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/557#discussion_r510439286", "createdAt": "2020-10-22T20:32:35Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/builtin/services/cli/CLIEventStreamAgent.java", "diffHunk": "@@ -395,6 +395,43 @@ private void validateUpdateRecipesAndArtifactsRequest(UpdateRecipesAndArtifactsR\n                 throw new InvalidArgumentsError(\"Need to provide at least one of the directory paths to update\");\n             }\n         }\n+\n+        private void copyRecipes(Path from, Path to) throws IOException {\n+            for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+                String ext = Utils.extension(r.toString());\n+                ComponentRecipe recipe = null;\n+                if (r.toFile().length() == 0) {\n+                    logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                    continue;\n+                }\n+                try {\n+                    switch (ext.toLowerCase()) {\n+                        case \"yaml\":\n+                        case \"yml\":\n+                            recipe = SerializerFactory.getRecipeSerializer().readValue(r.toFile(),\n+                                    ComponentRecipe.class);\n+                            break;\n+                        case \"json\":\n+                            recipe = SerializerFactory.getRecipeSerializerJson()\n+                                    .readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (IOException e) {\n+                    logger.atError().log(\"Error reading recipe file from {}\", r, e);\n+                }\n+\n+                if (recipe == null) {\n+                    continue;\n+                }\n+\n+                // Write the recipe as YAML with the proper filename into the store\n+                Path copyTo = to.resolve(String.format(RECIPE_FILE_NAME_FORMAT, recipe.getComponentName(),\n+                        recipe.getComponentVersion().getValue()));\n+                Files.write(copyTo, SerializerFactory.getRecipeSerializer().writeValueAsBytes(recipe));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNDU5Mw=="}, "originalCommit": {"oid": "33a718a85a936f390cdd487e7ee8d2b0506bdd94"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDE1OA==", "bodyText": "nvm, I missed that we are reading in memory first.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/557#discussion_r510440158", "createdAt": "2020-10-22T20:34:14Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/builtin/services/cli/CLIEventStreamAgent.java", "diffHunk": "@@ -395,6 +395,43 @@ private void validateUpdateRecipesAndArtifactsRequest(UpdateRecipesAndArtifactsR\n                 throw new InvalidArgumentsError(\"Need to provide at least one of the directory paths to update\");\n             }\n         }\n+\n+        private void copyRecipes(Path from, Path to) throws IOException {\n+            for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+                String ext = Utils.extension(r.toString());\n+                ComponentRecipe recipe = null;\n+                if (r.toFile().length() == 0) {\n+                    logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                    continue;\n+                }\n+                try {\n+                    switch (ext.toLowerCase()) {\n+                        case \"yaml\":\n+                        case \"yml\":\n+                            recipe = SerializerFactory.getRecipeSerializer().readValue(r.toFile(),\n+                                    ComponentRecipe.class);\n+                            break;\n+                        case \"json\":\n+                            recipe = SerializerFactory.getRecipeSerializerJson()\n+                                    .readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (IOException e) {\n+                    logger.atError().log(\"Error reading recipe file from {}\", r, e);\n+                }\n+\n+                if (recipe == null) {\n+                    continue;\n+                }\n+\n+                // Write the recipe as YAML with the proper filename into the store\n+                Path copyTo = to.resolve(String.format(RECIPE_FILE_NAME_FORMAT, recipe.getComponentName(),\n+                        recipe.getComponentVersion().getValue()));\n+                Files.write(copyTo, SerializerFactory.getRecipeSerializer().writeValueAsBytes(recipe));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNDU5Mw=="}, "originalCommit": {"oid": "33a718a85a936f390cdd487e7ee8d2b0506bdd94"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 380, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}