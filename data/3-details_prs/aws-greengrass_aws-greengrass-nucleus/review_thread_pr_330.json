{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mjg4MDgy", "number": 330, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNTowNlrOESelUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDozMjowOVrOESmzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODEwODk3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzowNTowNlrOG3rjSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxMTo1OVrOG3ryZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzODQxMQ==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nThe result of deleting a file on this line should be checked and failure should be logged. java.io.File.delete() will simply return false if it fails to delete the file, for example, when the file does not exist. It will not throw unless there is a security exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461038411", "createdAt": "2020-07-27T17:05:06Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -228,6 +274,11 @@ protected void cleanup() {\n         createdThingGroups.clear();\n         createdIotJobIds.forEach(jobId -> IotJobsUtils.cleanJob(iotClient, jobId));\n         createdIotJobIds.clear();\n+        if (kernel != null && kernel.getConfigPath() != null) {\n+            for (File subFile : kernel.getConfigPath().toFile().listFiles()) {\n+                subFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd196d5c9bfede10768e8cb5597ecc4d513d687"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjI3OA==", "bodyText": "Great job CodeGuru \ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461042278", "createdAt": "2020-07-27T17:11:59Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -228,6 +274,11 @@ protected void cleanup() {\n         createdThingGroups.clear();\n         createdIotJobIds.forEach(jobId -> IotJobsUtils.cleanJob(iotClient, jobId));\n         createdIotJobIds.clear();\n+        if (kernel != null && kernel.getConfigPath() != null) {\n+            for (File subFile : kernel.getConfigPath().toFile().listFiles()) {\n+                subFile.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAzODQxMQ=="}, "originalCommit": {"oid": "bfd196d5c9bfede10768e8cb5597ecc4d513d687"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODc3MjY1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxNDo1NlrOG3x66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMzowNlrOG32yxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0Mjc2Mw==", "bodyText": "Why do we copy the content in a private method, every invoker will repeat copying?\nAlso is it a good idea to instantiate an instance variable in private method? Do we have better choice?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461142763", "createdAt": "2020-07-27T20:14:56Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -146,6 +164,13 @@ protected void initKernel() throws IOException {\n      */\n     private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier... pkgIds)\n             throws IOException, PackagingException {\n+        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1MjUzMg==", "bodyText": "uploadTestComponentsToCms() is a one time call in @BeforeAll , and removed in @afterall\nI can check if it's possible to initialize once in global class initialization, the cleanup might be a little hard", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461152532", "createdAt": "2020-07-27T20:33:15Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -146,6 +164,13 @@ protected void initKernel() throws IOException {\n      */\n     private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier... pkgIds)\n             throws IOException, PackagingException {\n+        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0Mjc2Mw=="}, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjU5Ng==", "bodyText": "It would be good if the field can use final modifier. But at least it's a static method that indicates it should be invokes @BeforeAll. Got it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461222596", "createdAt": "2020-07-27T23:13:06Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -146,6 +164,13 @@ protected void initKernel() throws IOException {\n      */\n     private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier... pkgIds)\n             throws IOException, PackagingException {\n+        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0Mjc2Mw=="}, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODc4NjY4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxOToyMVrOG3yD2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNzozMVrOG32rrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTA0OQ==", "bodyText": "Understand what you are trying to do here, but doing a text replacement in recipe seems hacky to me.\nI'd like to probe if randomizing is the best option. Can independent cloud service stage help? such as device development using their gamma stage. Can the test cases manage the deletion of uploaded components? Can the test cases increment component version for every test run?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461145049", "createdAt": "2020-07-27T20:19:21Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,26 +195,41 @@ private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier.\n         }\n     }\n \n-    private static void draftComponent(PackageIdentifier pkgId) throws PackagingException, IOException {\n-        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());\n-        PackageStore e2eTestPackageStore = new PackageStore(localStoreContentPath);\n+    private static void draftComponent(PackageIdentifier pkgIdCloud) throws IOException {\n+\n+        PackageIdentifier pkgIdLocal = new PackageIdentifier(removeTestComponentNameCloudSuffix(pkgIdCloud.getName()),\n+                pkgIdCloud.getVersion(), pkgIdCloud.getScope());\n+\n+        Path testRecipePath = e2eTestPackageStore.resolveRecipePath(pkgIdLocal);\n+\n+        // update recipe\n+        String content = new String(Files.readAllBytes(testRecipePath), StandardCharsets.UTF_8);\n+        Set<String> componentNameSet = Arrays.stream(testComponents)\n+                .map(component -> component.getName()).collect(Collectors.toSet());\n+\n+        for (String cloudPkgName: componentNameSet) {\n+            String localPkgName = removeTestComponentNameCloudSuffix(cloudPkgName);\n+            content = content.replaceAll(localPkgName + \"\\n\", cloudPkgName + \"\\n\");\n+            content = content.replaceAll(localPkgName + \":\", cloudPkgName + \":\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Mjk3Nw==", "bodyText": "I feel the other options will have the same problem. We want the same code to run on different cloud stages, and Our test cases hard code version in recipe as well, so the string replacement is needed anyways. I think package name String replacement is easier than others. I can add placeholder mark like {{}} so the replacement is more obvious.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461162977", "createdAt": "2020-07-27T20:53:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,26 +195,41 @@ private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier.\n         }\n     }\n \n-    private static void draftComponent(PackageIdentifier pkgId) throws PackagingException, IOException {\n-        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());\n-        PackageStore e2eTestPackageStore = new PackageStore(localStoreContentPath);\n+    private static void draftComponent(PackageIdentifier pkgIdCloud) throws IOException {\n+\n+        PackageIdentifier pkgIdLocal = new PackageIdentifier(removeTestComponentNameCloudSuffix(pkgIdCloud.getName()),\n+                pkgIdCloud.getVersion(), pkgIdCloud.getScope());\n+\n+        Path testRecipePath = e2eTestPackageStore.resolveRecipePath(pkgIdLocal);\n+\n+        // update recipe\n+        String content = new String(Files.readAllBytes(testRecipePath), StandardCharsets.UTF_8);\n+        Set<String> componentNameSet = Arrays.stream(testComponents)\n+                .map(component -> component.getName()).collect(Collectors.toSet());\n+\n+        for (String cloudPkgName: componentNameSet) {\n+            String localPkgName = removeTestComponentNameCloudSuffix(cloudPkgName);\n+            content = content.replaceAll(localPkgName + \"\\n\", cloudPkgName + \"\\n\");\n+            content = content.replaceAll(localPkgName + \":\", cloudPkgName + \":\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTA0OQ=="}, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDc4Mg==", "bodyText": "It makes sense. Then it needs to make sure replacement consistently without side effects. Either can be deserialized to model then reset the name or using special placeholder marks.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461220782", "createdAt": "2020-07-27T23:07:31Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,26 +195,41 @@ private static void uploadTestComponentsToCms(boolean commit, PackageIdentifier.\n         }\n     }\n \n-    private static void draftComponent(PackageIdentifier pkgId) throws PackagingException, IOException {\n-        Path localStoreContentPath = Paths.get(BaseE2ETestCase.class.getResource(\"local_store_content\").getPath());\n-        PackageStore e2eTestPackageStore = new PackageStore(localStoreContentPath);\n+    private static void draftComponent(PackageIdentifier pkgIdCloud) throws IOException {\n+\n+        PackageIdentifier pkgIdLocal = new PackageIdentifier(removeTestComponentNameCloudSuffix(pkgIdCloud.getName()),\n+                pkgIdCloud.getVersion(), pkgIdCloud.getScope());\n+\n+        Path testRecipePath = e2eTestPackageStore.resolveRecipePath(pkgIdLocal);\n+\n+        // update recipe\n+        String content = new String(Files.readAllBytes(testRecipePath), StandardCharsets.UTF_8);\n+        Set<String> componentNameSet = Arrays.stream(testComponents)\n+                .map(component -> component.getName()).collect(Collectors.toSet());\n+\n+        for (String cloudPkgName: componentNameSet) {\n+            String localPkgName = removeTestComponentNameCloudSuffix(cloudPkgName);\n+            content = content.replaceAll(localPkgName + \"\\n\", cloudPkgName + \"\\n\");\n+            content = content.replaceAll(localPkgName + \":\", cloudPkgName + \":\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTA0OQ=="}, "originalCommit": {"oid": "103cc27bc6bfc27cf6d2a6e860a4f5703e19c940"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTQ1NTgwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/e2e/local_store_content/recipes/Log-2.0.0.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDozMjowOVrOG34U_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDozMjowOVrOG34U_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0Nzc0MA==", "bodyText": "Nit- It would be nice to have 1 set of braces to keep consistent with general templating patterns, similar to the feedback we got on component parameter placeholders that we should be fixing soon", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/330#discussion_r461247740", "createdAt": "2020-07-28T00:32:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/e2e/local_store_content/recipes/Log-2.0.0.yaml", "diffHunk": "@@ -1,6 +1,6 @@\n ---\n RecipeTemplateVersion: '2020-01-25'\n-ComponentName: Log\n+ComponentName: {{Log}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d5a2fe3c2587741a6039b12bdfc68ecc41033e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4447, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}