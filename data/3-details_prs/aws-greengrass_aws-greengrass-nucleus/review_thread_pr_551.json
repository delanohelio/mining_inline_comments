{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTQwNzg1", "number": 551, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTozODo1NlrOE4AU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTozMTo1OFrOE4Ucow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTYxMDczOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/telemetry/TelemetryAgentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTozODo1NlrOHxrSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTozODo1NlrOHxrSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1MTUzNQ==", "bodyText": "seems unnecessary", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r521851535", "createdAt": "2020-11-12T05:38:56Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/telemetry/TelemetryAgentTest.java", "diffHunk": "@@ -77,34 +98,36 @@ void GIVEN_kernel_running_with_telemetry_config_WHEN_launch_THEN_metrics_are_pub\n         //WHEN\n         CountDownLatch telemetryRunning = new CountDownLatch(1);\n         kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(TELEMETRY_AGENT_SERVICE_TOPICS) &&\n-                    service.getState().equals(State.RUNNING)) {\n-                telemetryRunning.countDown();\n-                ta = (TelemetryAgent) service;\n+            if (service.getName().equals(TELEMETRY_AGENT_SERVICE_TOPICS)) {\n+                if (service.getState().equals(State.RUNNING)) {\n+                    ta = (TelemetryAgent) service;\n+                    ta.setPeriodicPublishMetricsIntervalSec(publishInterval);\n+                    ta.setPeriodicAggregateMetricsIntervalSec(aggregateInterval);\n+                    ta.schedulePeriodicAggregateMetrics(true);\n+                    ta.schedulePeriodicPublishMetrics(true);\n+                    telemetryRunning.countDown();\n+                }\n             }\n-\n         });\n         kernel.launch();\n         assertTrue(telemetryRunning.await(10, TimeUnit.SECONDS), \"TelemetryAgent is not in RUNNING state.\");\n         Topics telTopics = kernel.findServiceTopic(TELEMETRY_AGENT_SERVICE_TOPICS);\n         assertNotNull(telTopics);\n-        int aggregateInterval = Coerce.toInt(telTopics.find(PARAMETERS_CONFIG_KEY,\n-                TELEMETRY_PERIODIC_AGGREGATE_INTERVAL_SEC));\n-        int periodicInterval = Coerce.toInt(telTopics.find(PARAMETERS_CONFIG_KEY,\n-                TELEMETRY_PERIODIC_PUBLISH_INTERVAL_SEC));\n-        //telemetry configurations are set correctly\n-        assertEquals(2, aggregateInterval);\n-        assertEquals(4, periodicInterval);\n         long lastAgg = Coerce.toLong(telTopics.find(RUNTIME_STORE_NAMESPACE_TOPIC,\n                 TELEMETRY_LAST_PERIODIC_AGGREGATION_TIME_TOPIC));\n \n         //wait till the first publish\n-        TimeUnit.SECONDS.sleep(periodicInterval + 1);\n+        TimeUnit.SECONDS.sleep(publishInterval + 1);\n         assertTrue(Coerce.toLong(telTopics.find(RUNTIME_STORE_NAMESPACE_TOPIC,\n                 TELEMETRY_LAST_PERIODIC_AGGREGATION_TIME_TOPIC)) > lastAgg);\n         assertNotNull(ta.getPeriodicPublishMetricsFuture(), \"periodic publish future is not scheduled.\");\n         long delay = ta.getPeriodicPublishMetricsFuture().getDelay(TimeUnit.SECONDS);\n-        assertTrue(delay <= periodicInterval);\n+        if (delay > publishInterval) {\n+            logger.atInfo().log(\"****************\");\n+            logger.atInfo().log(delay);\n+            logger.atInfo().log(\"****************\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5225f70d29aa1c9e471b0aed0be98e940a674d2"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTYxNDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTo0MDozOVrOHxrUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNTo0MDozOVrOHxrUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg1MjA5OA==", "bodyText": "why is all this stuff public now? Keep things private or package-private.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r521852098", "createdAt": "2020-11-12T05:40:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -111,7 +142,7 @@ public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration\n      *\n      * @param isReconfigured will be true if aggregation interval is reconfigured\n      */\n-    private void schedulePeriodicAggregateMetrics(boolean isReconfigured) {\n+    public void schedulePeriodicAggregateMetrics(boolean isReconfigured) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5225f70d29aa1c9e471b0aed0be98e940a674d2"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTY4Nzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjoxNzo0M1rOHxr_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNjo0ODozNFrOHxsnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2MzAwNw==", "bodyText": "if you're pulling the intvalue, why are you using Double? Why not just Integer?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r521863007", "createdAt": "2020-11-12T06:17:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -89,13 +96,37 @@ public void onConnectionResumed(boolean sessionPresent) {\n     public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n                           MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n                           ScheduledExecutorService ses) {\n+        this(topics, mqttClient, deviceConfiguration, ma, sme, kme, ses,\n+                DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC, DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC);\n+    }\n+\n+    /**\n+     * Constructor for the class.\n+     *\n+     * @param topics                                root configuration topic for this service\n+     * @param mqttClient                            {@link MqttClient}\n+     * @param deviceConfiguration                   {@link DeviceConfiguration}\n+     * @param ma                                    {@link MetricsAggregator}\n+     * @param sme                                   {@link SystemMetricsEmitter}\n+     * @param kme                                   {@link KernelMetricsEmitter}\n+     * @param ses                                   {@link ScheduledExecutorService}\n+     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n+     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n+    public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n+                          MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n+                          ScheduledExecutorService ses, int periodicPublishMetricsIntervalSec,\n+                          int periodicAggregateMetricsIntervalSec) {\n         super(topics);\n         this.mqttClient = mqttClient;\n         this.publisher = new MqttChunkedPayloadPublisher<>(this.mqttClient);\n         this.publisher.setMaxPayloadLengthBytes(MAX_PAYLOAD_LENGTH_BYTES);\n         this.ses = ses;\n         this.metricsAggregator = ma;\n         this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.periodicAggregateMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e4bbfec5f629b55dff8b70b288e208be3373510"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2NDE2NA==", "bodyText": "cause when I am sending the config in the UAT like\n            | aws.greengrass.TestFeatureParameters | LATEST | telemetryPeriodicAggregateMetricsIntervalSec  | 3 |\n\nThe value is 3.0 So it is a double/float.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r521864164", "createdAt": "2020-11-12T06:21:30Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -89,13 +96,37 @@ public void onConnectionResumed(boolean sessionPresent) {\n     public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n                           MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n                           ScheduledExecutorService ses) {\n+        this(topics, mqttClient, deviceConfiguration, ma, sme, kme, ses,\n+                DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC, DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC);\n+    }\n+\n+    /**\n+     * Constructor for the class.\n+     *\n+     * @param topics                                root configuration topic for this service\n+     * @param mqttClient                            {@link MqttClient}\n+     * @param deviceConfiguration                   {@link DeviceConfiguration}\n+     * @param ma                                    {@link MetricsAggregator}\n+     * @param sme                                   {@link SystemMetricsEmitter}\n+     * @param kme                                   {@link KernelMetricsEmitter}\n+     * @param ses                                   {@link ScheduledExecutorService}\n+     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n+     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n+    public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n+                          MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n+                          ScheduledExecutorService ses, int periodicPublishMetricsIntervalSec,\n+                          int periodicAggregateMetricsIntervalSec) {\n         super(topics);\n         this.mqttClient = mqttClient;\n         this.publisher = new MqttChunkedPayloadPublisher<>(this.mqttClient);\n         this.publisher.setMaxPayloadLengthBytes(MAX_PAYLOAD_LENGTH_BYTES);\n         this.ses = ses;\n         this.metricsAggregator = ma;\n         this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.periodicAggregateMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2MzAwNw=="}, "originalCommit": {"oid": "6e4bbfec5f629b55dff8b70b288e208be3373510"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg3MzI1NQ==", "bodyText": "That's a bug with how our SDK is using GSON", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r521873255", "createdAt": "2020-11-12T06:48:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -89,13 +96,37 @@ public void onConnectionResumed(boolean sessionPresent) {\n     public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n                           MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n                           ScheduledExecutorService ses) {\n+        this(topics, mqttClient, deviceConfiguration, ma, sme, kme, ses,\n+                DEFAULT_PERIODIC_PUBLISH_INTERVAL_SEC, DEFAULT_PERIODIC_AGGREGATE_INTERVAL_SEC);\n+    }\n+\n+    /**\n+     * Constructor for the class.\n+     *\n+     * @param topics                                root configuration topic for this service\n+     * @param mqttClient                            {@link MqttClient}\n+     * @param deviceConfiguration                   {@link DeviceConfiguration}\n+     * @param ma                                    {@link MetricsAggregator}\n+     * @param sme                                   {@link SystemMetricsEmitter}\n+     * @param kme                                   {@link KernelMetricsEmitter}\n+     * @param ses                                   {@link ScheduledExecutorService}\n+     * @param periodicPublishMetricsIntervalSec     interval for cadence based telemetry publish.\n+     * @param periodicAggregateMetricsIntervalSec   interval for cadence based telemetry metrics aggregation.*/\n+    public TelemetryAgent(Topics topics, MqttClient mqttClient, DeviceConfiguration deviceConfiguration,\n+                          MetricsAggregator ma, SystemMetricsEmitter sme, KernelMetricsEmitter kme,\n+                          ScheduledExecutorService ses, int periodicPublishMetricsIntervalSec,\n+                          int periodicAggregateMetricsIntervalSec) {\n         super(topics);\n         this.mqttClient = mqttClient;\n         this.publisher = new MqttChunkedPayloadPublisher<>(this.mqttClient);\n         this.publisher.setMaxPayloadLengthBytes(MAX_PAYLOAD_LENGTH_BYTES);\n         this.ses = ses;\n         this.metricsAggregator = ma;\n         this.thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        this.periodicAggregateMetricsIntervalSec = TestFeatureParameters.retrieveWithDefault(Double.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTg2MzAwNw=="}, "originalCommit": {"oid": "6e4bbfec5f629b55dff8b70b288e208be3373510"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDkwNzIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTozMTo1OFrOHyK3ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTo0NjozN1rOHyLY9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2ODg2OQ==", "bodyText": "Do we need to log here? Also if the current value is larger than DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC, should we reduce it to DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r522368869", "createdAt": "2020-11-12T19:31:58Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -127,16 +150,18 @@ public FleetStatusService(Topics topics, MqttClient mqttClient, DeploymentStatus\n         topics.lookup(PARAMETERS_CONFIG_KEY, FLEET_STATUS_PERIODIC_UPDATE_INTERVAL_SEC)\n                 .dflt(DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC)\n                 .subscribe((why, newv) -> {\n-                    periodicUpdateIntervalSec = Coerce.toInt(newv);\n+                    int newPeriodicUpdateIntervalSec = Coerce.toInt(newv);\n+                    // Do not update the scheduled interval if it is less than the default.\n+                    if (newPeriodicUpdateIntervalSec < DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC) {\n+                        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd544bd96c3b9e0e56f402a26ed89a3bf04f11f"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NzQ2Mg==", "bodyText": "I don't think we should change the value if the new value is lesser than the default and current value is greater than. default.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/551#discussion_r522377462", "createdAt": "2020-11-12T19:46:37Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -127,16 +150,18 @@ public FleetStatusService(Topics topics, MqttClient mqttClient, DeploymentStatus\n         topics.lookup(PARAMETERS_CONFIG_KEY, FLEET_STATUS_PERIODIC_UPDATE_INTERVAL_SEC)\n                 .dflt(DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC)\n                 .subscribe((why, newv) -> {\n-                    periodicUpdateIntervalSec = Coerce.toInt(newv);\n+                    int newPeriodicUpdateIntervalSec = Coerce.toInt(newv);\n+                    // Do not update the scheduled interval if it is less than the default.\n+                    if (newPeriodicUpdateIntervalSec < DEFAULT_PERIODIC_UPDATE_INTERVAL_SEC) {\n+                        return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2ODg2OQ=="}, "originalCommit": {"oid": "0dd544bd96c3b9e0e56f402a26ed89a3bf04f11f"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 349, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}