{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNDkyNzY4", "number": 597, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozMTozMlrOE0FPAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozODo1N1rOE0FRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQ3MTcwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozMTozMlrOHrqL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTo0MTo0OFrOHrqPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjAxNQ==", "bodyText": "does the countdown latch ever get reset? It's initialized in a field but used countdown happens in before each", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542015", "createdAt": "2020-10-31T21:31:32Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {\n+                    allComponentsInFssUpdate.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0Mjk1OA==", "bodyText": "The countdown happens in the mocked MQTT client. so that will only get counted down when FSS updates with all the components.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542958", "createdAt": "2020-10-31T21:41:48Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {\n+                    allComponentsInFssUpdate.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjAxNQ=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQ3MjUxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozMjozOFrOHrqMZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTo0MzoyMlrOHrqQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjExNg==", "bodyText": "when would this not be the case that the fleet status details isn't reporting all of the ordered dependencies?\nshould this check more than just size?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542116", "createdAt": "2020-10-31T21:32:38Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MzA4NQ==", "bodyText": "Theoretically it should always send all the components when FSS updates periodically. This just ensures that all the components that the kernel is aware of, is in the update.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515543085", "createdAt": "2020-10-31T21:43:22Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjExNg=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQ3MzU2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozNDoxNlrOHrqM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTo0NDoxM1rOHrqQoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjI2MQ==", "bodyText": "should you also assert on the size, or that it at least isn't empty?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542261", "createdAt": "2020-10-31T21:34:16Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MzIwMA==", "bodyText": "Since we are awaiting on the latch, the latch will only return true (count down happens) if all the components are in the FSS update. So we don't need to assert on the size again.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515543200", "createdAt": "2020-10-31T21:44:13Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjI2MQ=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQ3NjkxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozODo1N1rOHrqOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTo1OTo1MlrOHrqWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjY3OA==", "bodyText": "does it check anywhere that the components that are reported are actually the ones that you expect?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542678", "createdAt": "2020-10-31T21:38:57Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());\n+        for (ComponentStatusDetails componentStatusDetail : fleetStatusDetails.get().getComponentStatusDetails()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MzMyMg==", "bodyText": "When FSS updates periodically, it report status on all components. That is guaranteed by the latch count down. So if the latch await has returned true, we are sure that we have all the components information in the status update.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515543322", "createdAt": "2020-10-31T21:45:20Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());\n+        for (ComponentStatusDetails componentStatusDetail : fleetStatusDetails.get().getComponentStatusDetails()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjY3OA=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0NDA2Mw==", "bodyText": "It's guaranteed that you have some number of components - the previous test actually checked the component names to guarantee that they were present. We've lost that in this test now.\nAs an integration test, I'd really like it to check that what is supposed to be reported is actually being reported.\nIt could be as simple as looping through the dependencies in the kernel and checking that they exist in the status details. It is really easy for tests to fail because they have the right count of things, but the content is incorrect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515544063", "createdAt": "2020-10-31T21:53:02Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());\n+        for (ComponentStatusDetails componentStatusDetail : fleetStatusDetails.get().getComponentStatusDetails()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjY3OA=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0NDcxMw==", "bodyText": "Makes sense. Made the change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515544713", "createdAt": "2020-10-31T21:59:52Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());\n+        for (ComponentStatusDetails componentStatusDetail : fleetStatusDetails.get().getComponentStatusDetails()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjY3OA=="}, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 440, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}