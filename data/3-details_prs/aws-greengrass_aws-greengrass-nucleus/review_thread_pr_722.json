{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTY0MTYx", "number": 722, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MjozOFrOE802xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxMDozM1rOE9a6-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE2MDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0MjozOFrOH5LmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0MjowM1rOH5OE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDk0NQ==", "bodyText": "why change this? the id looks more correct from signature perspective.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r529720945", "createdAt": "2020-11-24T16:42:38Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -204,24 +204,39 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                             + \"satisfying requirement '%s'.\", componentName, versionRequirements), e);\n         }\n \n-        ComponentIdentifier resolvedComponentId =\n-                new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n-                        new Semver(resolvedComponentVersion.getComponentVersion()));\n+        ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n+                new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        try {\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+        } catch (PackageLoadingException e) {\n+            // TODO remove this backoff operation once cloud switch to send JSON recipe\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+        }\n \n         // Save the recipe digest for plugin in a secure place, before persisting recipe\n-        storeRecipeDigestSecurelyForPlugin(resolvedComponentId, downloadedRecipeContent);\n+        storeRecipeDigestSecurelyForPlugin(downloadedRecipe, downloadedRecipeContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f58f3e0f3a6b746555fbcc3ffe14051a93a097"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MTUxNA==", "bodyText": "It parses the recipe inside the function previously. Now the parsing is moved outside the function,  model is passed to the function. With component recipe, it doesn't need id I think.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r529761514", "createdAt": "2020-11-24T17:42:03Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -204,24 +204,39 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                             + \"satisfying requirement '%s'.\", componentName, versionRequirements), e);\n         }\n \n-        ComponentIdentifier resolvedComponentId =\n-                new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n-                        new Semver(resolvedComponentVersion.getComponentVersion()));\n+        ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n+                new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        try {\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+        } catch (PackageLoadingException e) {\n+            // TODO remove this backoff operation once cloud switch to send JSON recipe\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+        }\n \n         // Save the recipe digest for plugin in a secure place, before persisting recipe\n-        storeRecipeDigestSecurelyForPlugin(resolvedComponentId, downloadedRecipeContent);\n+        storeRecipeDigestSecurelyForPlugin(downloadedRecipe, downloadedRecipeContent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMDk0NQ=="}, "originalCommit": {"oid": "51f58f3e0f3a6b746555fbcc3ffe14051a93a097"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjE3MTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjo0NTowNVrOH5LtNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNzo0MDo0MlrOH5OBug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjY3OQ==", "bodyText": "Ah! Could you do me favor and not change the signature now? Otherwise rebasing #697 is going to be very painful!!!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r529722679", "createdAt": "2020-11-24T16:45:05Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -76,13 +76,17 @@ public ComponentStore(NucleusPaths nucleusPaths, PlatformResolver platformResolv\n     /**\n      * Creates or updates a package recipe in the package store on the disk.\n      *\n-     * @param pkgId         the id for the component\n-     * @param recipeContent recipe content to save\n+     * @param componentRecipe raw component recipe\n      * @throws PackageLoadingException if fails to write the package recipe to disk.\n      */\n-    void savePackageRecipe(@NonNull ComponentIdentifier pkgId, String recipeContent) throws PackageLoadingException {\n+    void saveComponentRecipe(@NonNull com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe)\n+            throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f58f3e0f3a6b746555fbcc3ffe14051a93a097"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MDY5OA==", "bodyText": "got it back.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r529760698", "createdAt": "2020-11-24T17:40:42Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -76,13 +76,17 @@ public ComponentStore(NucleusPaths nucleusPaths, PlatformResolver platformResolv\n     /**\n      * Creates or updates a package recipe in the package store on the disk.\n      *\n-     * @param pkgId         the id for the component\n-     * @param recipeContent recipe content to save\n+     * @param componentRecipe raw component recipe\n      * @throws PackageLoadingException if fails to write the package recipe to disk.\n      */\n-    void savePackageRecipe(@NonNull ComponentIdentifier pkgId, String recipeContent) throws PackageLoadingException {\n+    void saveComponentRecipe(@NonNull com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe)\n+            throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcyMjY3OQ=="}, "originalCommit": {"oid": "51f58f3e0f3a6b746555fbcc3ffe14051a93a097"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM4ODk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzowNjoxOFrOH6GhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxMjoyNVrOH6GncA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjIxMw==", "bodyText": "Maybe check file suffix is better :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r530686213", "createdAt": "2020-11-25T23:06:18Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -76,7 +94,8 @@ public RecipeLoader(PlatformResolver platformResolver) {\n      */\n     public Optional<ComponentRecipe> loadFromFile(String recipeFileContent) throws PackageLoadingException {\n \n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe = parseRecipe(recipeFileContent);\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe =\n+                parseRecipe(recipeFileContent, RecipeFormat.YAML);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5647a214943746105d93a35ea3a46fc40ba70430"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzg1Ng==", "bodyText": "Maybe, but JSON is valid YAML.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r530687856", "createdAt": "2020-11-25T23:12:25Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -76,7 +94,8 @@ public RecipeLoader(PlatformResolver platformResolver) {\n      */\n     public Optional<ComponentRecipe> loadFromFile(String recipeFileContent) throws PackageLoadingException {\n \n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe = parseRecipe(recipeFileContent);\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe =\n+                parseRecipe(recipeFileContent, RecipeFormat.YAML);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjIxMw=="}, "originalCommit": {"oid": "5647a214943746105d93a35ea3a46fc40ba70430"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM5Njc1OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxMDozM1rOH6GlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxMjoxMFrOH6GnNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NzM2NQ==", "bodyText": "Can we remove this method?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r530687365", "createdAt": "2020-11-25T23:10:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -204,24 +204,39 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                             + \"satisfying requirement '%s'.\", componentName, versionRequirements), e);\n         }\n \n-        ComponentIdentifier resolvedComponentId =\n-                new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n-                        new Semver(resolvedComponentVersion.getComponentVersion()));\n+        ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n+                new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        try {\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+        } catch (PackageLoadingException e) {\n+            // TODO remove this backoff operation once cloud switch to send JSON recipe\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+        }\n \n         // Save the recipe digest for plugin in a secure place, before persisting recipe\n-        storeRecipeDigestSecurelyForPlugin(resolvedComponentId, downloadedRecipeContent);\n+        storeRecipeDigestSecurelyForPlugin(downloadedRecipe, downloadedRecipeContent);\n \n         // Save the recipe\n         boolean saveContent = true;\n         Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n \n-        if (recipeContentOnDevice.filter(recipe -> recipe.equals(downloadedRecipeContent)).isPresent()) {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = downloadedRecipe;\n+        if (recipeContentOnDevice.map(recipeContent -> {\n+            try {\n+                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n+            } catch (PackageLoadingException e) {\n+                // if fail to parse local recipe, treat it as not presented\n+                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n+                return null;\n+            }\n+        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n             saveContent = false;\n         }\n \n         if (saveContent) {\n-            componentStore.savePackageRecipe(resolvedComponentId, downloadedRecipeContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5647a214943746105d93a35ea3a46fc40ba70430"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzc5OA==", "bodyText": "Heard from Ethan, CLI is calling the method. Will remove it once CLI uses new method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/722#discussion_r530687798", "createdAt": "2020-11-25T23:12:10Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -204,24 +204,39 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                             + \"satisfying requirement '%s'.\", componentName, versionRequirements), e);\n         }\n \n-        ComponentIdentifier resolvedComponentId =\n-                new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n-                        new Semver(resolvedComponentVersion.getComponentVersion()));\n+        ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n+                new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        try {\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+        } catch (PackageLoadingException e) {\n+            // TODO remove this backoff operation once cloud switch to send JSON recipe\n+            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+        }\n \n         // Save the recipe digest for plugin in a secure place, before persisting recipe\n-        storeRecipeDigestSecurelyForPlugin(resolvedComponentId, downloadedRecipeContent);\n+        storeRecipeDigestSecurelyForPlugin(downloadedRecipe, downloadedRecipeContent);\n \n         // Save the recipe\n         boolean saveContent = true;\n         Optional<String> recipeContentOnDevice = componentStore.findComponentRecipeContent(resolvedComponentId);\n \n-        if (recipeContentOnDevice.filter(recipe -> recipe.equals(downloadedRecipeContent)).isPresent()) {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe finalDownloadedRecipe = downloadedRecipe;\n+        if (recipeContentOnDevice.map(recipeContent -> {\n+            try {\n+                return RecipeLoader.parseRecipe(recipeContent, RecipeLoader.RecipeFormat.YAML);\n+            } catch (PackageLoadingException e) {\n+                // if fail to parse local recipe, treat it as not presented\n+                logger.atDebug().setCause(e).kv(\"componentId\", resolvedComponentId).log(\"Failed to parse local recipe\");\n+                return null;\n+            }\n+        }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n             saveContent = false;\n         }\n \n         if (saveContent) {\n-            componentStore.savePackageRecipe(resolvedComponentId, downloadedRecipeContent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NzM2NQ=="}, "originalCommit": {"oid": "5647a214943746105d93a35ea3a46fc40ba70430"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 300, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}