{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNzQyMzY2", "number": 681, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo0NzowM1rOE43EBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNzo1N1rOE6R0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDU3ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjo0NzowM1rOHzB_Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowNzoxNVrOH1Cdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MTk2Ng==", "bodyText": "I think we will fix this case before reinvent, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r523271966", "createdAt": "2020-11-13T22:47:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }\n+        if (resolvedNucleusComponents.isEmpty()) {\n+            return false;\n+        }\n+        Optional<GreengrassService> activeNucleusOption = kernel.orderedDependencies().stream()\n+                .filter(s -> ComponentType.NUCLEUS.name().equals(s.getServiceType())).findFirst();\n+        if (!activeNucleusOption.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39a14fb3f3fc20ea50af723ba7cf77f255895c8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM0NzQ2NQ==", "bodyText": "This condition shouldn't happen because we always make sure we always add nucleus component, this is just here from the perspective of this piece of code, but could you elaborate a bit more what you mean?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525347465", "createdAt": "2020-11-17T17:26:44Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }\n+        if (resolvedNucleusComponents.isEmpty()) {\n+            return false;\n+        }\n+        Optional<GreengrassService> activeNucleusOption = kernel.orderedDependencies().stream()\n+                .filter(s -> ComponentType.NUCLEUS.name().equals(s.getServiceType())).findFirst();\n+        if (!activeNucleusOption.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MTk2Ng=="}, "originalCommit": {"oid": "a39a14fb3f3fc20ea50af723ba7cf77f255895c8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3Njg5NQ==", "bodyText": "yes. I just wanted to check this condition shouldn't happen", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525376895", "createdAt": "2020-11-17T18:07:15Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }\n+        if (resolvedNucleusComponents.isEmpty()) {\n+            return false;\n+        }\n+        Optional<GreengrassService> activeNucleusOption = kernel.orderedDependencies().stream()\n+                .filter(s -> ComponentType.NUCLEUS.name().equals(s.getServiceType())).findFirst();\n+        if (!activeNucleusOption.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI3MTk2Ng=="}, "originalCommit": {"oid": "a39a14fb3f3fc20ea50af723ba7cf77f255895c8"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTM5MDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowNjo0OVrOH1PKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNjoxMFrOH1PpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NTA1OA==", "bodyText": "Can this actually happen here? Would the dependency resolution already detect it and fail the deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525585058", "createdAt": "2020-11-17T23:06:49Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5Mjg0Mw==", "bodyText": "This is taking into account that there can be a custom implementation of Nucleus with a different component name, we use the type to identify them. It's possible that a deployment has our default aws.greengrass.Nucleus component and a custom nucleus component which the dependency resolution will not detect", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525592843", "createdAt": "2020-11-17T23:26:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NTA1OA=="}, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ0NDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNjozN1rOH1Ppsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1OToxNFrOH1S1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MzAxMQ==", "bodyText": "hmmm...I found this a bit difficult to read. Would it be more clear if combining these two conditions?\nreturn !resolvedNucleus.equals(new ComponentIdentifier(activeNucleus.getServiceName(), activeNucleusVersion)) && !targetComponents.contains(resolvedNucleus.getName())", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525593011", "createdAt": "2020-11-17T23:26:37Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }\n+        if (resolvedNucleusComponents.isEmpty()) {\n+            return false;\n+        }\n+        Optional<GreengrassService> activeNucleusOption = kernel.orderedDependencies().stream()\n+                .filter(s -> ComponentType.NUCLEUS.name().equals(s.getServiceType())).findFirst();\n+        if (!activeNucleusOption.isPresent()) {\n+            return false;\n+        }\n+        GreengrassService activeNucleus = activeNucleusOption.get();\n+        Semver activeNucleusVersion = new Semver(Coerce.toString(activeNucleus.getServiceConfig().find(VERSION_KEY)));\n+        ComponentIdentifier resolvedNucleus = resolvedNucleusComponents.get(0);\n+        if (resolvedNucleus.equals(new ComponentIdentifier(activeNucleus.getServiceName(), activeNucleusVersion))) {\n+            return false;\n+        }\n+        return !targetComponents.contains(resolvedNucleus.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NTIzNA==", "bodyText": "Changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525645234", "createdAt": "2020-11-18T01:59:14Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");\n+        }\n+\n         logger.atInfo().setEventType(\"resolve-group-dependencies-finish\").kv(\"resolvedComponents\", resolvedComponents)\n                 .kv(COMPONENT_VERSION_REQUIREMENT_KEY, componentNameToVersionConstraints)\n                 .log(\"Finish resolving group dependencies\");\n         return new ArrayList<>(resolvedComponents.values());\n     }\n \n+    boolean nonExplicitNucleusUpdate(List<String> targetComponents,\n+                                     List<ComponentIdentifier> resolvedComponents) throws PackagingException {\n+        List<ComponentIdentifier> resolvedNucleusComponents = new ArrayList<>();\n+        for (ComponentIdentifier componentIdentifier : resolvedComponents) {\n+            if (ComponentType.NUCLEUS.equals(componentStore.getPackageRecipe(componentIdentifier).getComponentType())) {\n+                resolvedNucleusComponents.add(componentIdentifier);\n+            }\n+        }\n+        if (resolvedNucleusComponents.size() > 1) {\n+            throw new PackagingException(String.format(\"Deployment cannot have more than 1 component of type Nucleus \"\n+                    + \"%s\", Arrays.toString(resolvedNucleusComponents.toArray())));\n+        }\n+        if (resolvedNucleusComponents.isEmpty()) {\n+            return false;\n+        }\n+        Optional<GreengrassService> activeNucleusOption = kernel.orderedDependencies().stream()\n+                .filter(s -> ComponentType.NUCLEUS.name().equals(s.getServiceType())).findFirst();\n+        if (!activeNucleusOption.isPresent()) {\n+            return false;\n+        }\n+        GreengrassService activeNucleus = activeNucleusOption.get();\n+        Semver activeNucleusVersion = new Semver(Coerce.toString(activeNucleus.getServiceConfig().find(VERSION_KEY)));\n+        ComponentIdentifier resolvedNucleus = resolvedNucleusComponents.get(0);\n+        if (resolvedNucleus.equals(new ComponentIdentifier(activeNucleus.getServiceName(), activeNucleusVersion))) {\n+            return false;\n+        }\n+        return !targetComponents.contains(resolvedNucleus.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MzAxMQ=="}, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ0NzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNzo1N1rOH1Prkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1OTo1MFrOH1S2pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MzQ5MA==", "bodyText": "It would be nice to include the existing nucleus version and resolved nucleus version in the exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525593490", "createdAt": "2020-11-17T23:27:57Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NTQ3Ng==", "bodyText": "Done, had to refactor the method a little", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/681#discussion_r525645476", "createdAt": "2020-11-18T01:59:50Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/componentmanager/DependencyResolver.java", "diffHunk": "@@ -91,12 +105,47 @@\n                             document.getDeploymentId())));\n         }\n \n+        if (nonExplicitNucleusUpdate(targetComponentsToResolve,\n+                resolvedComponents.entrySet().stream().map(Map.Entry::getValue).collect(Collectors.toList()))) {\n+            throw new PackagingException(\"The deployment attempts to update the nucleus version but no target \"\n+                    + \"component of type nucleus included as target component, please add the desired nucleus version\"\n+                    + \" as top level component if you wish to update the nucleus\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MzQ5MA=="}, "originalCommit": {"oid": "f7dc67508dbf90c4f81920e6803f92c486f874be"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 249, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}