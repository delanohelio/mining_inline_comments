{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDg2MDYw", "number": 238, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowNjoyMFrOD8KGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowMTo0OFrOD8LWDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDA2NTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowNjoyMFrOGU7SYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowOTo0NFrOGU7Zzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NjA2Ng==", "bodyText": "What's the reason Subscriber doesn't work?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424596066", "createdAt": "2020-05-13T17:06:20Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -21,7 +21,7 @@\n import static com.aws.iot.evergreen.util.Utils.appendLong;\n import static com.aws.iot.evergreen.util.Utils.flush;\n \n-public class ConfigurationWriter implements Closeable, Subscriber {\n+public class ConfigurationWriter implements Closeable, ChildChanged {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c7348d1c9214bb1637aa42bf80255e49bbbac9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5Nzk2Ng==", "bodyText": "Subscriber is used for Topic, but ChildChanged is used for Topics. Since we are subscribing to the root of the config which is a Topics we need to do ChildChanged. Using the wrong interface caused the previous publish function to never be called.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424597966", "createdAt": "2020-05-13T17:09:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -21,7 +21,7 @@\n import static com.aws.iot.evergreen.util.Utils.appendLong;\n import static com.aws.iot.evergreen.util.Utils.flush;\n \n-public class ConfigurationWriter implements Closeable, Subscriber {\n+public class ConfigurationWriter implements Closeable, ChildChanged {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NjA2Ng=="}, "originalCommit": {"oid": "d8c7348d1c9214bb1637aa42bf80255e49bbbac9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE3MjI2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationWriterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNDo1N1rOGU8Vqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo0MzowMFrOGU8oIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMzI5MQ==", "bodyText": "Are these the same as line 47, 48, 49? Why do you need these twice?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424613291", "createdAt": "2020-05-13T17:34:57Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class ConfigurationWriterTest {\n+    @TempDir\n+    protected Path tempDir;\n+\n+    private Context context;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        if (context != null) {\n+            context.close();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_config_changes_made_THEN_written_to_tlog() throws IOException {\n+        Path tlog = tempDir.resolve(\"c.tlog\");\n+        Configuration config = new Configuration(context);\n+\n+        try (ConfigurationWriter writer = ConfigurationWriter.logTransactionsTo(config, tlog)) {\n+            writer.flushImmediately(true);\n+\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"Some Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e2\").withValue(2);\n+            context.runOnPublishQueueAndWait(() -> {\n+            }); // Block until publish queue is empty to ensure all changes have\n+            // been processed\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"New Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e3\").withValue(Arrays.asList(\"1\", \"2\", \"3\"));\n+            context.runOnPublishQueueAndWait(() -> {\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c7348d1c9214bb1637aa42bf80255e49bbbac9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNDU4NQ==", "bodyText": "This is different. It creates a tlog that doesn't just contain 1 node or 1 version of a node, but versions of a node over time. It also shows that we can serialize and deserialize various data types including lists, strings, and numbers.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424614585", "createdAt": "2020-05-13T17:37:08Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class ConfigurationWriterTest {\n+    @TempDir\n+    protected Path tempDir;\n+\n+    private Context context;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        if (context != null) {\n+            context.close();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_config_changes_made_THEN_written_to_tlog() throws IOException {\n+        Path tlog = tempDir.resolve(\"c.tlog\");\n+        Configuration config = new Configuration(context);\n+\n+        try (ConfigurationWriter writer = ConfigurationWriter.logTransactionsTo(config, tlog)) {\n+            writer.flushImmediately(true);\n+\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"Some Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e2\").withValue(2);\n+            context.runOnPublishQueueAndWait(() -> {\n+            }); // Block until publish queue is empty to ensure all changes have\n+            // been processed\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"New Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e3\").withValue(Arrays.asList(\"1\", \"2\", \"3\"));\n+            context.runOnPublishQueueAndWait(() -> {\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMzI5MQ=="}, "originalCommit": {"oid": "d8c7348d1c9214bb1637aa42bf80255e49bbbac9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxODAxNg==", "bodyText": "Maybe add a comment to explain that. It's not obvious from the code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424618016", "createdAt": "2020-05-13T17:43:00Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationWriterTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+class ConfigurationWriterTest {\n+    @TempDir\n+    protected Path tempDir;\n+\n+    private Context context;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        if (context != null) {\n+            context.close();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_config_changes_made_THEN_written_to_tlog() throws IOException {\n+        Path tlog = tempDir.resolve(\"c.tlog\");\n+        Configuration config = new Configuration(context);\n+\n+        try (ConfigurationWriter writer = ConfigurationWriter.logTransactionsTo(config, tlog)) {\n+            writer.flushImmediately(true);\n+\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"Some Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e2\").withValue(2);\n+            context.runOnPublishQueueAndWait(() -> {\n+            }); // Block until publish queue is empty to ensure all changes have\n+            // been processed\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e\").withValue(\"New Val\");\n+            config.lookup(\"a\", \"b\", \"c\", \"d\", \"e3\").withValue(Arrays.asList(\"1\", \"2\", \"3\"));\n+            context.runOnPublishQueueAndWait(() -> {\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMzI5MQ=="}, "originalCommit": {"oid": "d8c7348d1c9214bb1637aa42bf80255e49bbbac9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDI0NjQ3OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo1NToxMVrOGU9FDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowNjo0NlrOGU9f_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNTQyMw==", "bodyText": "How do we know if customers actually want to load config.yaml with local dev changes? Do they have to delete the transaction logs in this case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424625423", "createdAt": "2020-05-13T17:55:11Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -89,12 +89,13 @@ public void launch() {\n                 kernel.writeEffectiveConfig(configurationFile);\n                 Files.deleteIfExists(transactionLogPath);\n             } else {\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n-                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272b5a9159c27a2b87818507cec837de4e739d64"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjMxOQ==", "bodyText": "If they want to do that, then they will do what we do in our tests by using the command line to pass -i <config path>. Doing this will override this whole section of code because haveRead will be true.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424632319", "createdAt": "2020-05-13T18:06:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -89,12 +89,13 @@ public void launch() {\n                 kernel.writeEffectiveConfig(configurationFile);\n                 Files.deleteIfExists(transactionLogPath);\n             } else {\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n-                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNTQyMw=="}, "originalCommit": {"oid": "272b5a9159c27a2b87818507cec837de4e739d64"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDI3MDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowMTo0OFrOGU9Upw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDoyN1rOGU9otw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTQxNQ==", "bodyText": "I still don't get it why it didn't work earlier. Isn't deepForEachTopic going to add subscriber to leaf nodes?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424629415", "createdAt": "2020-05-13T18:01:48Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -116,6 +117,6 @@ public synchronized void published(WhatHappened what, Topic n) {\n     }\n \n     public void writeAll() { //TODO double check this\n-        conf.deepForEachTopic(n -> published(WhatHappened.childChanged, n));\n+        conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272b5a9159c27a2b87818507cec837de4e739d64"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjcyNg==", "bodyText": "No, it doesn't add a subscriber; it simply calls the childChanged callback on each Topic in the config store.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424632726", "createdAt": "2020-05-13T18:07:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -116,6 +117,6 @@ public synchronized void published(WhatHappened what, Topic n) {\n     }\n \n     public void writeAll() { //TODO double check this\n-        conf.deepForEachTopic(n -> published(WhatHappened.childChanged, n));\n+        conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTQxNQ=="}, "originalCommit": {"oid": "272b5a9159c27a2b87818507cec837de4e739d64"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDU1MQ==", "bodyText": "But this writeAll isn't the method which had the problem. The problem was with using Subscriber instead of ChildChanged.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/238#discussion_r424634551", "createdAt": "2020-05-13T18:10:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -116,6 +117,6 @@ public synchronized void published(WhatHappened what, Topic n) {\n     }\n \n     public void writeAll() { //TODO double check this\n-        conf.deepForEachTopic(n -> published(WhatHappened.childChanged, n));\n+        conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTQxNQ=="}, "originalCommit": {"oid": "272b5a9159c27a2b87818507cec837de4e739d64"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4692, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}