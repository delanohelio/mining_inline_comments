{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NzY1MDQ3", "number": 725, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MDo1NFrOE86ehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0MjowM1rOE9XnVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4MTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MDo1NFrOH5UXEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToxMTozM1rOH5VU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDQ2Ng==", "bodyText": "why use getNow what if it isn't complete, or what if it completes with an error 1 millisecond later?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864466", "createdAt": "2020-11-24T20:40:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +98,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MDI4Nw==", "bodyText": "MqttProxy should not wait for the future to complete. It only needs to know if the message was unable to be spooled, and if this happens it will be completed exceptionally before returning.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529880287", "createdAt": "2020-11-24T21:11:33Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +98,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDQ2Ng=="}, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4MjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MToxNFrOH5UXwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MToxNFrOH5UXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDY0MA==", "bodyText": "include the exception in the log?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864640", "createdAt": "2020-11-24T20:41:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +98,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(null);\n+                } catch (Exception e) {\n+                    LOGGER.atWarn().kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MTozOVrOH5UYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToxMzo0NlrOH5VZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDg2OA==", "bodyText": "inflight or in flight? If 2 words, then capitalize it as InFlight", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529864868", "createdAt": "2020-11-24T20:41:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MTM3MQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529881371", "createdAt": "2020-11-24T21:13:46Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NDg2OA=="}, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4NDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MTo1OVrOH5UZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozMzowNVrOH8bTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ==", "bodyText": "default can probably be a handful, maybe 4 or so?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529865021", "createdAt": "2020-11-24T20:41:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjEzMA==", "bodyText": "Thoughts on this @fengwa-aws ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529882130", "createdAt": "2020-11-24T21:15:08Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwMTM5OA==", "bodyText": "I don't have a strong opinion on this. If there is little down side, we can make the default to 4 or 5.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530601398", "createdAt": "2020-11-25T19:32:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyMzk2OA==", "bodyText": "Bumped to 5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r533123968", "createdAt": "2020-12-01T07:33:05Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -75,6 +76,8 @@\n     private static final int DEFAULT_MQTT_SOCKET_TIMEOUT = (int) Duration.ofSeconds(3).toMillis();\n     static final String MQTT_OPERATION_TIMEOUT_KEY = \"operationTimeoutMs\";\n     static final int DEFAULT_MQTT_OPERATION_TIMEOUT = (int) Duration.ofSeconds(30).toMillis();\n+    static final String MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY = \"maxInflightPublishes\";\n+    static final int DEFAULT_MAX_IN_FLIGHT_PUBLISHES = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTAyMQ=="}, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzA4NjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MjoyM1rOH5UaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo0MjoyM1rOH5UaGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg2NTI0Mg==", "bodyText": "node might be null", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r529865242", "createdAt": "2020-11-24T20:42:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -197,6 +201,12 @@ protected MqttClient(DeviceConfiguration deviceConfiguration,\n         mqttTopics = this.deviceConfiguration.getMQTTNamespace();\n         this.builderProvider = builderProvider;\n \n+        mqttTopics.lookup(MQTT_MAX_IN_FLIGHT_PUBLISHES_KEY)\n+                .dflt(DEFAULT_MAX_IN_FLIGHT_PUBLISHES)\n+                .subscribe((what, node) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8fb7579f8f6273481e548958c7b1446c48176cb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzQ0NDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo1NlrOH59pIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozMTo1NlrOH59pIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MDgzMg==", "bodyText": "Is it possible to add a DEBUG level of log with Qos and Topic if the message has been set out successful? It may be helpful for debugging,.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530540832", "createdAt": "2020-11-25T17:31:56Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -432,17 +448,22 @@ protected void spoolTask() {\n \n                 long finalId = id;\n \n-                // TODO: Revisit later: currently only 1 message got sent each time.\n-                // Should make the sending in more efficient way.\n-                getConnection(false).publish(new MqttMessage(request.getTopic(),request.getPayload()),\n-                        request.getQos(), request.isRetain()).whenComplete((packetId, throwable) -> {\n+                MqttMessage m = new MqttMessage(request.getTopic(), request.getPayload());\n+                publishRequests.add(getConnection(false).publish(m, request.getQos(), request.isRetain())\n+                                .whenComplete((packetId, throwable) -> {\n                     if (throwable == null) {\n                         spool.removeMessageById(finalId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcdf1c562505726738a956a7d6ce1dee86acc7a3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzg1NDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOTo0MjowM1rOH6BmJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNzozNjo1OFrOH8baMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTYwNA==", "bodyText": "In the publish method, we need distinguish whether the future is completed exceptionally due to the message being drop because of offline or a real issue in the spooler. If the former, then we should log at DEBUG; if the latter, then we should logger at ERROR. Treating them the same as WARN will create too many logs for the message drop due to offline case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r530605604", "createdAt": "2020-11-25T19:42:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +99,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(0);\n+                } catch (CompletionException e) {\n+                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcdf1c562505726738a956a7d6ce1dee86acc7a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEyNTY4MA==", "bodyText": "Currently there aren't really error scenarios. Either the spool is full or Greengrass is shutting down. But I agree, we'll need this distinction.\nFor now, I'm removing logging here and just throwing the exception back to the caller. The publish method logs a couple different debug level logs, depending on what happened (spool full vs device offline and qos 0 publish). We can clean this up further after on disk spool support is added and there are more error scenarios.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/725#discussion_r533125680", "createdAt": "2020-12-01T07:36:58Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -99,13 +99,11 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                         .qos(getQualityOfServiceFromQOS(request.getQos())).build();\n                 CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n+                // If the future is completed exceptionally then the MqttClient was unable to spool the request\n                 try {\n-                    future.get(2, TimeUnit.SECONDS);\n-                } catch (TimeoutException | InterruptedException ignored) {\n-                    // If it times out or we're interrupted, then just return the positive response\n-                    // it is most likely in the spooler since it didn't fail immediately.\n-                } catch (ExecutionException e) {\n-                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)\n+                    future.getNow(0);\n+                } catch (CompletionException e) {\n+                    LOGGER.atWarn().cause(e.getCause()).kv(TOPIC_KEY, topic).kv(COMPONENT_NAME, serviceName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNTYwNA=="}, "originalCommit": {"oid": "fcdf1c562505726738a956a7d6ce1dee86acc7a3"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 307, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}