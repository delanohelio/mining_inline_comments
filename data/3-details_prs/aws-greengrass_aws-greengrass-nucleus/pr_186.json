{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDMzNTk3", "number": 186, "title": "Add tests for KernelCommandLine", "bodyText": "Issue #, if available:\nDescription of changes:\nRequires #185. Adds tests for KernelCommandLine and makes Kernel more mockable by adding getters instead of public fields. Fixed the installCliTool function which was completely broken as it did not actually copy the file to the new location.\nTest coverage for KernelCommandLine is now 92%+.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-15T23:12:16Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186", "merged": true, "mergeCommit": {"oid": "35cc5bdfaf4d3ccd2bc4d3b3253ccba88cc9a119"}, "closed": true, "closedAt": "2020-04-16T20:22:16Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYPzegABqjMyNDA5MDg4NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYSbxAgFqTM5NDk2MjU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7d0005046b3cabfe3b76c8ea924a53bdcbcda09", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e7d0005046b3cabfe3b76c8ea924a53bdcbcda09", "committedDate": "2020-04-15T23:09:20Z", "message": "Add tests for KernelCommandLine"}, "afterCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b84d7070f06d98b44164c66698779f7edaa2404c", "committedDate": "2020-04-16T17:04:41Z", "message": "Add tests for KernelCommandLine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODQyOTU4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#pullrequestreview-394842958", "createdAt": "2020-04-16T17:19:43Z", "commit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzoxOTo0M1rOGGvc6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo0NzowMVrOGGwevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyMjA5MQ==", "bodyText": "Thanks for converting the public fields to getters... I wanted to change these for a while...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409722091", "createdAt": "2020-04-16T17:19:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -42,14 +45,26 @@\n  */\n public class Kernel {\n     private static final Logger logger = LogManager.getLogger(Kernel.class);\n-    public final Context context;\n-    public final Configuration config;\n+    @Getter\n+    private final Context context;\n+    @Getter\n+    private final Configuration config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcyOTIyMg==", "bodyText": "Separate question - what does \"i\" stand for as \"config\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409729222", "createdAt": "2020-04-16T17:30:52Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTMzOA==", "bodyText": "[Optional] This confused me a little. Why does installCliTool installed the config.yaml - maybe switching to actually install evergreen-launch would be better.\nAlso maybe now we don't even need the installCliTool to take the resource path as param... Constant should be fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409735338", "createdAt": "2020-04-16T17:41:05Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_command_line_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kernel = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException thrown = assertThrows(RuntimeException.class,\n+                () -> kernel.parseArgs(\"-xyznonsense\", \"nonsense\"));\n+        assertTrue(thrown.getMessage().contains(\"Undefined command line argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_create_path_fail_WHEN_parseArgs_THEN_throw_RuntimeException() throws Exception {\n+        // Make the root path not writeable so the create path method will fail\n+        Files.setPosixFilePermissions(tempRootDir, PosixFilePermissions.fromString(\"r-x------\"));\n+\n+        Kernel kernel = new Kernel();\n+        RuntimeException thrown = assertThrows(RuntimeException.class, kernel::parseArgs);\n+        assertTrue(thrown.getMessage().contains(\"Cannot create all required directories\"));\n+    }\n+\n+    @Test\n+    void GIVEN_unable_to_read_config_WHEN_parseArgs_THEN_throw_RuntimeException() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        Configuration mockConfig = mock(Configuration.class);\n+        when(mockKernel.getConfig()).thenReturn(mockConfig);\n+        when(mockConfig.read(anyString())).thenThrow(IOException.class);\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\", \"test.yaml\"));\n+        assertThat(ex.getMessage(), is(\"Can't read the config file test.yaml\"));\n+    }\n+\n+    @Test\n+    void GIVEN_root_argument_THEN_default_root_is_overridden() {\n+        Kernel kernel = new Kernel();\n+\n+        Path newDir = tempRootDir.resolve(\"new/under/dir\");\n+        kernel.parseArgs(\"-r\", newDir.toString());\n+        assertEquals(newDir.toString(), kernel.getConfig().find(\"system\", \"rootpath\").getOnce());\n+    }\n+\n+    @Test\n+    void GIVEN_kernel_WHEN_deTilde_THEN_proper_path_is_returned() {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+        when(mockKernel.getConfigPath()).thenReturn(tempRootDir.resolve(\"config\"));\n+        when(mockKernel.getPackageStorePath()).thenReturn(tempRootDir.resolve(\"packages\"));\n+        when(mockKernel.getRootPath()).thenReturn(tempRootDir.resolve(\"root\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+\n+        assertThat(kcl.deTilde(\"~/test\"), containsString(System.getProperty(\"user.name\")+ \"/test\"));\n+        assertThat(kcl.deTilde(\"~bin/test\"), is(tempRootDir.toString()+ \"/bin/test\"));\n+        assertThat(kcl.deTilde(\"~config/test\"), is(tempRootDir.toString()+ \"/config/test\"));\n+        assertThat(kcl.deTilde(\"~packages/test\"), is(tempRootDir.toString()+ \"/packages/test\"));\n+        assertThat(kcl.deTilde(\"~root/test\"), is(tempRootDir.toString()+ \"/root/test\"));\n+    }\n+\n+    @Test\n+    void GIVEN_resource_to_install_WHEN_installCliTool_THEN_resource_is_copied_to_bin() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        Utils.createPaths(tempRootDir.resolve(\"bin\"));\n+        File f = tempRootDir.resolve(\"bin/config.yaml\").toFile();\n+        assertThat(f, not(anExistingFile()));\n+\n+        kcl.installCliTool(getClass().getResource(\"config.yaml\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczNTYyNQ==", "bodyText": "Didn't know this. Really like this way of asserting files!!!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409735625", "createdAt": "2020-04-16T17:41:31Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {\n+    public static final String TMP_NEW_ROOT = \"/tmp/new_root\";\n+    @TempDir\n+    protected Path tempRootDir;\n+\n+    @BeforeEach\n+    void setRootDir() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @Test\n+    void GIVEN_missing_parameter_to_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kcl = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\"));\n+        assertThat(ex.getMessage(), is(\"-i or -config requires an argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_command_line_argument_WHEN_parseArgs_THEN_throw_RuntimeException() {\n+        KernelCommandLine kernel = new KernelCommandLine(mock(Kernel.class));\n+        RuntimeException thrown = assertThrows(RuntimeException.class,\n+                () -> kernel.parseArgs(\"-xyznonsense\", \"nonsense\"));\n+        assertTrue(thrown.getMessage().contains(\"Undefined command line argument\"));\n+    }\n+\n+    @Test\n+    void GIVEN_create_path_fail_WHEN_parseArgs_THEN_throw_RuntimeException() throws Exception {\n+        // Make the root path not writeable so the create path method will fail\n+        Files.setPosixFilePermissions(tempRootDir, PosixFilePermissions.fromString(\"r-x------\"));\n+\n+        Kernel kernel = new Kernel();\n+        RuntimeException thrown = assertThrows(RuntimeException.class, kernel::parseArgs);\n+        assertTrue(thrown.getMessage().contains(\"Cannot create all required directories\"));\n+    }\n+\n+    @Test\n+    void GIVEN_unable_to_read_config_WHEN_parseArgs_THEN_throw_RuntimeException() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        Configuration mockConfig = mock(Configuration.class);\n+        when(mockKernel.getConfig()).thenReturn(mockConfig);\n+        when(mockConfig.read(anyString())).thenThrow(IOException.class);\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        RuntimeException ex = assertThrows(RuntimeException.class, () -> kcl.parseArgs(\"-i\", \"test.yaml\"));\n+        assertThat(ex.getMessage(), is(\"Can't read the config file test.yaml\"));\n+    }\n+\n+    @Test\n+    void GIVEN_root_argument_THEN_default_root_is_overridden() {\n+        Kernel kernel = new Kernel();\n+\n+        Path newDir = tempRootDir.resolve(\"new/under/dir\");\n+        kernel.parseArgs(\"-r\", newDir.toString());\n+        assertEquals(newDir.toString(), kernel.getConfig().find(\"system\", \"rootpath\").getOnce());\n+    }\n+\n+    @Test\n+    void GIVEN_kernel_WHEN_deTilde_THEN_proper_path_is_returned() {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+        when(mockKernel.getConfigPath()).thenReturn(tempRootDir.resolve(\"config\"));\n+        when(mockKernel.getPackageStorePath()).thenReturn(tempRootDir.resolve(\"packages\"));\n+        when(mockKernel.getRootPath()).thenReturn(tempRootDir.resolve(\"root\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+\n+        assertThat(kcl.deTilde(\"~/test\"), containsString(System.getProperty(\"user.name\")+ \"/test\"));\n+        assertThat(kcl.deTilde(\"~bin/test\"), is(tempRootDir.toString()+ \"/bin/test\"));\n+        assertThat(kcl.deTilde(\"~config/test\"), is(tempRootDir.toString()+ \"/config/test\"));\n+        assertThat(kcl.deTilde(\"~packages/test\"), is(tempRootDir.toString()+ \"/packages/test\"));\n+        assertThat(kcl.deTilde(\"~root/test\"), is(tempRootDir.toString()+ \"/root/test\"));\n+    }\n+\n+    @Test\n+    void GIVEN_resource_to_install_WHEN_installCliTool_THEN_resource_is_copied_to_bin() throws IOException {\n+        Kernel mockKernel = mock(Kernel.class);\n+        when(mockKernel.getClitoolPath()).thenReturn(tempRootDir.resolve(\"bin\"));\n+\n+        KernelCommandLine kcl = new KernelCommandLine(mockKernel);\n+        Utils.createPaths(tempRootDir.resolve(\"bin\"));\n+        File f = tempRootDir.resolve(\"bin/config.yaml\").toFile();\n+        assertThat(f, not(anExistingFile()));\n+\n+        kcl.installCliTool(getClass().getResource(\"config.yaml\"));\n+        assertThat(f, anExistingFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTczODk0Mg==", "bodyText": "I like this test a lot. Reading through test cases give me a good understanding for what the source code is trying to achieve. Tests themselves are very easy to read.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409738942", "createdAt": "2020-04-16T17:47:01Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelCommandLineTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.util.Utils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.attribute.PosixFilePermissions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class KernelCommandLineTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0ODY4OTIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#pullrequestreview-394868920", "createdAt": "2020-04-16T17:53:52Z", "commit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1Mzo1MlrOGGwv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNzo1Mzo1MlrOGGwv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0MzMzMw==", "bodyText": "maybe not use magical number?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#discussion_r409743333", "createdAt": "2020-04-16T17:53:52Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -144,19 +152,23 @@ public String deTilde(String s) {\n         if (s.startsWith(\"~/\")) {\n             s = HOME_PATH.resolve(s.substring(2)).toString();\n         }\n-        if (kernel.rootPath != null && s.startsWith(\"~root/\")) {\n-            s = kernel.rootPath.resolve(s.substring(6)).toString();\n+        if (kernel.getRootPath() != null && s.startsWith(\"~root/\")) {\n+            s = kernel.getRootPath().resolve(s.substring(6)).toString();\n+        }\n+        if (kernel.getConfigPath() != null && s.startsWith(\"~config/\")) {\n+            s = kernel.getConfigPath().resolve(s.substring(8)).toString();\n         }\n-        if (kernel.configPath != null && s.startsWith(\"~config/\")) {\n-            s = kernel.configPath.resolve(s.substring(8)).toString();\n+        if (kernel.getClitoolPath() != null && s.startsWith(\"~bin/\")) {\n+            s = kernel.getClitoolPath().resolve(s.substring(5)).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4671b5dca3df2b027d606a42282f9eee38a5314", "committedDate": "2020-04-16T18:04:10Z", "message": "Add tests for KernelCommandLine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b84d7070f06d98b44164c66698779f7edaa2404c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b84d7070f06d98b44164c66698779f7edaa2404c", "committedDate": "2020-04-16T17:04:41Z", "message": "Add tests for KernelCommandLine"}, "afterCommit": {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4671b5dca3df2b027d606a42282f9eee38a5314", "committedDate": "2020-04-16T18:04:10Z", "message": "Add tests for KernelCommandLine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTQ4NDMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#pullrequestreview-394948430", "createdAt": "2020-04-16T19:47:34Z", "commit": {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTYyNTQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/186#pullrequestreview-394962549", "createdAt": "2020-04-16T20:08:53Z", "commit": {"oid": "f4671b5dca3df2b027d606a42282f9eee38a5314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2124, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}