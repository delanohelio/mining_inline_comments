{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjQxNDM0", "number": 80, "title": "package manager load packages", "bodyText": "Issue #, if available:\nDescription of changes:\nLoad resolve packages from package store based on package registry\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-02-27T05:11:25Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80", "merged": true, "mergeCommit": {"oid": "4a674882155ab84db471fcbec709e005136cfa1f"}, "closed": true, "closedAt": "2020-02-27T18:16:43Z", "author": {"login": "wikimonkey"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIVYEFAFqTM2NTQzODgzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIfWHCgFqTM2NTg4MzI1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDM4ODM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#pullrequestreview-365438838", "createdAt": "2020-02-27T06:26:30Z", "commit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNjozMFrOFvGgNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyOTozNFrOFvGjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMzk0Mg==", "bodyText": "What's in proposedPackages? Isn't it the full list of resolved packages that need to be downloaded? If that's the case, why do you need recursion here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384933942", "createdAt": "2020-02-27T06:26:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {\n+            pkg.getDependencyPackages().add(loadPackage(dependOn.getName(), activePackages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDQ5MQ==", "bodyText": "The conventional way is to use assertThrows for asserting exceptions in Junit5.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384934491", "createdAt": "2020-02-27T06:28:50Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        entryA.getDependsOn().put(\"B\", new PackageRegistryEntry.Reference(\"B\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryA.getDependsOn().put(\"C\", new PackageRegistryEntry.Reference(\"C\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+        entryB.getDependsOn().put(\"D\", new PackageRegistryEntry.Reference(\"D\", new Semver(\"1.0.0\"), \">=1.0.0\"));\n+\n+        Map<String, PackageRegistryEntry> activePackages = new HashMap<>();\n+        activePackages.put(\"A\", entryA);\n+        activePackages.put(\"B\", entryB);\n+        activePackages.put(\"C\", entryC);\n+        activePackages.put(\"D\", entryD);\n+\n+        Package pkgA = new Package(null, \"A\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"A\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgA));\n+        Package pkgB = new Package(null, \"B\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"B\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgB));\n+        Package pkgC = new Package(null, \"C\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"C\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgC));\n+        Package pkgD = new Package(null, \"D\", new Semver(\"1.0.0\"), null, null, null, null, null, null, null);\n+        when(packageStore.getPackage(\"D\", new Semver(\"1.0.0\"))).thenReturn(Optional.of(pkgD));\n+        Package pkg = packageManager.loadPackage(\"A\", activePackages);\n+\n+        assertThat(pkg.getPackageName(), is(\"A\"));\n+        assertThat(pkg.getDependencyPackages().size(), is(2));\n+        assertThat(pkg.getDependencyPackages().contains(pkgB), is(true));\n+        assertThat(pkg.getDependencyPackages().contains(pkgC), is(true));\n+        pkg = pkg.getDependencyPackages().stream().filter(p -> p.getPackageName().equals(\"B\")).findAny().orElse(null);\n+        assertThat(pkg, notNullValue());\n+        assertThat(pkg.getDependencyPackages().size(), is(1));\n+        assertThat(pkg.getDependencyPackages().contains(pkgD), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_from_store_THEN_store_throw_exception()\n+            throws IOException, PackagingException {\n+        when(packageStore.getPackage(anyString(), any())).thenThrow(new IOException());\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+\n+        try {\n+            packageManager.loadPackage(\"A\", Collections.singletonMap(\"A\", entryA));\n+            fail();\n+        } catch (PackageLoadingException e) {\n+            assertThat(e.getMessage(), is(\"failed to load package A from package store\"));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDY2Nw==", "bodyText": "throws Exception is fine. In unit tests, you don't need to put all the detail exceptions in the method signature.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384934667", "createdAt": "2020-02-27T06:29:34Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQxNDE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#pullrequestreview-365441419", "createdAt": "2020-02-27T06:34:43Z", "commit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozNDo0M1rOFvGogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo0NDoyMFrOFvGytQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjA2NA==", "bodyText": "[nit]\nMake this javadoc with 2 asterisks. /**.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384936064", "createdAt": "2020-02-27T06:34:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODMwMg==", "bodyText": "This method will constantly re-run right if a package appears multiple times? Should you maybe check at the beginning to see if the package even needs to be loaded?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938302", "createdAt": "2020-02-27T06:42:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -164,8 +175,33 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     /*\n      * Given a set of target package names, return their resolved dependency trees with recipe data initialized\n      */\n-    private Set<Package> loadPackages(Set<String> packageNames) {\n-        return Collections.emptySet();\n+    private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n+            throws PackageLoadingException {\n+        Set<Package> packages = new HashSet<>();\n+        for (String packageName : packageNames) {\n+            packages.add(loadPackage(packageName, activePackages));\n+        }\n+        return packages;\n     }\n \n+    Package loadPackage(String name, Map<String, PackageRegistryEntry> activePackages) throws PackageLoadingException {\n+        PackageRegistryEntry packageEntry = activePackages.get(name);\n+        if (packageEntry == null) {\n+            throw new PackageLoadingException(String.format(\"package %s not found in registry\", name));\n+        }\n+        Optional<Package> packageOptional;\n+        try {\n+            packageOptional = packageStore.getPackage(packageEntry.getName(), packageEntry.getVersion());\n+        } catch (Exception e) {\n+            throw new PackageLoadingException(String.format(\"failed to load package %s from package store\", name), e);\n+        }\n+\n+        Package pkg = packageOptional\n+                .orElseThrow(() -> new PackageLoadingException(String.format(\"package %s not found\", name)));\n+\n+        for (PackageRegistryEntry.Reference dependOn : packageEntry.getDependsOn().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzODY3Nw==", "bodyText": "Can you add comments to these test to describe the scenario that you're testing, specifically what conflicts exist and how you're expecting that they should resolve. Since I know you thought about it for a while, it would be very helpful to us readers to have the insights you had.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384938677", "createdAt": "2020-02-27T06:44:20Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageManagerTest.java", "diffHunk": "@@ -68,4 +92,81 @@ void GIVEN_proposed_tree_WHEN_new_device_THEN_decide_package_version() throws Pa\n \n     // To be add more unit tests\n \n+    @Test\n+    void GIVEN_packages_in_registry_WHEN_load_package_by_target_name_THEN_decide_package_tree()\n+            throws PackagingException, IOException {\n+        PackageRegistryEntry entryA = new PackageRegistryEntry(\"A\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryB = new PackageRegistryEntry(\"B\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryC = new PackageRegistryEntry(\"C\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+        PackageRegistryEntry entryD = new PackageRegistryEntry(\"D\", new Semver(\"1.0.0\"), Collections.emptyMap());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c33ab84694baba8b90c2d11864763c6b1e5c41e"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDU4Nzc5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#pullrequestreview-365458779", "createdAt": "2020-02-27T07:23:30Z", "commit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyMzozMFrOFvHfrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyMzozMFrOFvHfrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MDE4OA==", "bodyText": "Shouldn't this be a class field so that the cache always applies?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#discussion_r384950188", "createdAt": "2020-02-27T07:23:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -167,14 +167,20 @@ void resolveDependencies(PackageMetadata packageMetadata, Map<String, PackageReg\n     private Set<Package> loadPackages(Set<String> packageNames, Map<String, PackageRegistryEntry> activePackages)\n             throws PackageLoadingException {\n         Set<Package> packages = new HashSet<>();\n+        Map<PackageRegistryEntry, Package> packageCache = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODE2NzY1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#pullrequestreview-365816765", "createdAt": "2020-02-27T16:41:20Z", "commit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f8cf66c6c56776bccf9ffc01aa357c8e6eca61", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/26f8cf66c6c56776bccf9ffc01aa357c8e6eca61", "committedDate": "2020-02-27T17:23:19Z", "message": "package manager load packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ddf5c3a200eeccd7f5fa1e4786398ef6ae164c", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/22ddf5c3a200eeccd7f5fa1e4786398ef6ae164c", "committedDate": "2020-02-27T17:23:19Z", "message": "change exception assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31deb9902c49a494e30888762d460ea9d9a7c37a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/31deb9902c49a494e30888762d460ea9d9a7c37a", "committedDate": "2020-02-27T17:23:19Z", "message": "Try fixing coverage report from \"missing line-rate\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b46f94b1def9255ea599aacb2bdc4767239f3fb", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7b46f94b1def9255ea599aacb2bdc4767239f3fb", "committedDate": "2020-02-27T17:24:33Z", "message": "add more explanations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acb681e62f325f3dcb754f7ed632b830b09fc98", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6acb681e62f325f3dcb754f7ed632b830b09fc98", "committedDate": "2020-02-27T17:24:45Z", "message": "cache loaded package so not to load again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0015da98d3453b8193a830bcd2078cf8b613faaa", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0015da98d3453b8193a830bcd2078cf8b613faaa", "committedDate": "2020-02-27T17:27:02Z", "message": "fix conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6b0d575adaa6b202faac959938093b9755db19d", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e6b0d575adaa6b202faac959938093b9755db19d", "committedDate": "2020-02-27T07:21:07Z", "message": "cache loaded package so not to load again"}, "afterCommit": {"oid": "0015da98d3453b8193a830bcd2078cf8b613faaa", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0015da98d3453b8193a830bcd2078cf8b613faaa", "committedDate": "2020-02-27T17:27:02Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9d56e05deefacb7a15cf81e6e8572f01c7daad", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bd9d56e05deefacb7a15cf81e6e8572f01c7daad", "committedDate": "2020-02-27T17:58:07Z", "message": "mock package store, but not mock repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "854b7f4e0db59485e89822fd506d62138879cc4b", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/854b7f4e0db59485e89822fd506d62138879cc4b", "committedDate": "2020-02-27T18:01:49Z", "message": "explicitly invoke constructor in unit test to work around multiple instances of same type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODgzMjU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/80#pullrequestreview-365883257", "createdAt": "2020-02-27T18:08:41Z", "commit": {"oid": "854b7f4e0db59485e89822fd506d62138879cc4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2281, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}