{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjkyNjQ4", "number": 577, "title": "Always cleanup EventLoopGroup even if an exception occurs during construction", "bodyText": "Issue #, if available:\nDescription of changes:\nEventLoopGroup wasn't cleaned in the IotConnectionManager if initializing the connection failed, so this change ensures that we definitely do close it to close any stray file descriptors.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-28T16:48:53Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577", "merged": true, "mergeCommit": {"oid": "98ceb2b68f13e77ef731f390a09840d75f946caf"}, "closed": true, "closedAt": "2020-10-28T20:36:57Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXAjSNABqjM5MzIzNjYxMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXDjZIAFqTUxOTA1NDgyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e48f497b00ac56e2f0864c505f66d8d922a10a1f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e48f497b00ac56e2f0864c505f66d8d922a10a1f", "committedDate": "2020-10-28T16:48:32Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "e5bd4411c31491fce5a88495be0a2076dc55ed08", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5bd4411c31491fce5a88495be0a2076dc55ed08", "committedDate": "2020-10-28T16:55:54Z", "message": "use lsof in benchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODkwNDg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-518890485", "createdAt": "2020-10-28T17:01:31Z", "commit": {"oid": "e5bd4411c31491fce5a88495be0a2076dc55ed08"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5bd4411c31491fce5a88495be0a2076dc55ed08", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5bd4411c31491fce5a88495be0a2076dc55ed08", "committedDate": "2020-10-28T16:55:54Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "29a004ca80857f531648971d260e051304293269", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29a004ca80857f531648971d260e051304293269", "committedDate": "2020-10-28T18:46:32Z", "message": "use lsof in benchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29a004ca80857f531648971d260e051304293269", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29a004ca80857f531648971d260e051304293269", "committedDate": "2020-10-28T18:46:32Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "3345bbf872951ba47acd7a61ef987d52692816e8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3345bbf872951ba47acd7a61ef987d52692816e8", "committedDate": "2020-10-28T18:58:15Z", "message": "use lsof in benchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3345bbf872951ba47acd7a61ef987d52692816e8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3345bbf872951ba47acd7a61ef987d52692816e8", "committedDate": "2020-10-28T18:58:15Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "f9f14a505132c83d1ca9d2fc78702f844aaef538", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f9f14a505132c83d1ca9d2fc78702f844aaef538", "committedDate": "2020-10-28T19:08:18Z", "message": "use lsof in benchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9f14a505132c83d1ca9d2fc78702f844aaef538", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f9f14a505132c83d1ca9d2fc78702f844aaef538", "committedDate": "2020-10-28T19:08:18Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "681300f96389bfaff71d05d22d57d917ec071b83", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/681300f96389bfaff71d05d22d57d917ec071b83", "committedDate": "2020-10-28T19:17:44Z", "message": "use lsof in benchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "681300f96389bfaff71d05d22d57d917ec071b83", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/681300f96389bfaff71d05d22d57d917ec071b83", "committedDate": "2020-10-28T19:17:44Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "102af657d6e00d61a587c06840936a68bb7d6681", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/102af657d6e00d61a587c06840936a68bb7d6681", "committedDate": "2020-10-28T19:24:11Z", "message": "use lsof in benchmark"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "102af657d6e00d61a587c06840936a68bb7d6681", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/102af657d6e00d61a587c06840936a68bb7d6681", "committedDate": "2020-10-28T19:24:11Z", "message": "use lsof in benchmark"}, "afterCommit": {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c33872a6b43d71b81fd002d1865e3d1885b34039", "committedDate": "2020-10-28T19:36:41Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDIyMTQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519022145", "createdAt": "2020-10-28T19:40:29Z", "commit": {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo0MDoyOVrOHp6iqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo0MDoyOVrOHp6iqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxMjgxMA==", "bodyText": "More specific exception we can use?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513712810", "createdAt": "2020-10-28T19:40:29Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -87,65 +87,71 @@\n         this.config = config;\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     @Override\n     public void startup() {\n-        greengrassCoreIPCService.getAllOperations().forEach(operation -> {\n-            greengrassCoreIPCService.setOperationHandler(operation,\n+        try {\n+            greengrassCoreIPCService.getAllOperations().forEach(operation ->\n+                    greengrassCoreIPCService.setOperationHandler(operation,\n                     (context) -> new DebugLoggingOperationHandler(GreengrassCoreIPCServiceModel.getInstance()\n-                            .getOperationModelContext(operation), context));\n-        });\n-        greengrassCoreIPCService.setAuthenticationHandler(\n-                (List<Header> headers, byte[] bytes) -> ipcAuthenticationHandler(bytes));\n-        greengrassCoreIPCService.setAuthorizationHandler(\n-                authenticationData -> ipcAuthorizationHandler(authenticationData));\n-\n-        socketOptions = new SocketOptions();\n-        socketOptions.connectTimeoutMs = 3000;\n-        socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n-        socketOptions.type = SocketOptions.SocketType.STREAM;\n-        eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n-                .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-\n-        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n-            try {\n-                logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n-            } catch (IOException e) {\n-                logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n+                            .getOperationModelContext(operation), context)));\n+            greengrassCoreIPCService.setAuthenticationHandler((List<Header> headers, byte[] bytes) ->\n+                    ipcAuthenticationHandler(bytes));\n+            greengrassCoreIPCService.setAuthorizationHandler(authenticationData ->\n+                    ipcAuthorizationHandler(authenticationData));\n+\n+            socketOptions = new SocketOptions();\n+            socketOptions.connectTimeoutMs = 3000;\n+            socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n+            socketOptions.type = SocketOptions.SocketType.STREAM;\n+            eventLoopGroup = new EventLoopGroup(1);\n+            ipcServerSocketAbsolutePath =\n+                    kernel.getNucleusPaths().rootPath().resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n+\n+            if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n+                try {\n+                    logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n+                    Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n+                } catch (IOException e) {\n+                    logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n+                }\n             }\n-        }\n \n-        Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n-        kernelUri.withValue(ipcServerSocketAbsolutePath);\n-        Topic kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n-                NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n-        kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n+            Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n+            kernelUri.withValue(ipcServerSocketAbsolutePath);\n+            Topic kernelRelativeUri =\n+                    config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+            kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n \n-        boolean symLinkCreated = false;\n+            boolean symLinkCreated = false;\n \n-        try {\n-            // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n-            // will create a symlink only if needed\n-            if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n-                Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n-                kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n-                        NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n-                kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n-                symLinkCreated = true;\n+            try {\n+                // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n+                // will create a symlink only if needed\n+                if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n+                    Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n+                    kernelRelativeUri = config.getRoot()\n+                            .lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+                    kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n+                    symLinkCreated = true;\n+                }\n+\n+            } catch (IOException e) {\n+                logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");\n             }\n \n-        } catch (IOException e) {\n-            logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");\n+            // For domain sockets:\n+            // 1. Port number is ignored. IpcServer does not accept a null value so we are using a default value.\n+            // 2. The hostname parameter expects the socket filepath\n+            ipcServer = new IpcServer(eventLoopGroup, socketOptions, null,\n+                    symLinkCreated ? IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK : ipcServerSocketAbsolutePath,\n+                    DEFAULT_PORT_NUMBER, greengrassCoreIPCService);\n+            ipcServer.runServer();\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDIyNzI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519022725", "createdAt": "2020-10-28T19:41:17Z", "commit": {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c33872a6b43d71b81fd002d1865e3d1885b34039", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c33872a6b43d71b81fd002d1865e3d1885b34039", "committedDate": "2020-10-28T19:36:41Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}, "afterCommit": {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/282f3f261d010c9af63cc903a067d3fa2b53b2b8", "committedDate": "2020-10-28T19:49:17Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDMyMTcw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519032170", "createdAt": "2020-10-28T19:54:20Z", "commit": {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo1NDoyMVrOHp7BOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo1NDoyMVrOHp7BOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyMDYzNQ==", "bodyText": "Shouldn't the order of closure be reverse?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513720635", "createdAt": "2020-10-28T19:54:21Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -49,11 +49,21 @@\n      * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n      */\n     @Inject\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public IotConnectionManager(final DeviceConfiguration deviceConfiguration) {\n         eventLoopGroup = new EventLoopGroup(1);\n         resolver = new HostResolver(eventLoopGroup);\n         clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n-        this.connManager = initConnectionManager(deviceConfiguration);\n+        try {\n+            this.connManager = initConnectionManager(deviceConfiguration);\n+        } catch (RuntimeException e) {\n+            // If we couldn't initialize the connection manager, then make sure to shutdown\n+            // everything which was started up\n+            eventLoopGroup.close();\n+            resolver.close();\n+            clientBootstrap.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/282f3f261d010c9af63cc903a067d3fa2b53b2b8", "committedDate": "2020-10-28T19:49:17Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}, "afterCommit": {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "committedDate": "2020-10-28T19:54:59Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDQzNDcw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519043470", "createdAt": "2020-10-28T20:09:56Z", "commit": {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e207aad7db6891778c419da492f6a93e5d7dcd58", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e207aad7db6891778c419da492f6a93e5d7dcd58", "committedDate": "2020-10-28T20:15:59Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0", "committedDate": "2020-10-28T19:54:59Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}, "afterCommit": {"oid": "e207aad7db6891778c419da492f6a93e5d7dcd58", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e207aad7db6891778c419da492f6a93e5d7dcd58", "committedDate": "2020-10-28T20:15:59Z", "message": "Ensure that EventLoopGroup is always closed if some exception occurs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDUxMjEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519051210", "createdAt": "2020-10-28T20:20:53Z", "commit": {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMTowOVrOHp77OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMTowOVrOHp77OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTQ4MA==", "bodyText": "try-with-resources on these three Autocloseable objects will cleanly close everything", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#discussion_r513735480", "createdAt": "2020-10-28T20:21:09Z", "author": {"login": "DavidOgunsAWS"}, "path": "src/main/java/com/aws/greengrass/iot/IotConnectionManager.java", "diffHunk": "@@ -49,11 +49,21 @@\n      * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n      */\n     @Inject\n+    @SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n     public IotConnectionManager(final DeviceConfiguration deviceConfiguration) {\n         eventLoopGroup = new EventLoopGroup(1);\n         resolver = new HostResolver(eventLoopGroup);\n         clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n-        this.connManager = initConnectionManager(deviceConfiguration);\n+        try {\n+            this.connManager = initConnectionManager(deviceConfiguration);\n+        } catch (RuntimeException e) {\n+            // If we couldn't initialize the connection manager, then make sure to shutdown\n+            // everything which was started up\n+            clientBootstrap.close();\n+            resolver.close();\n+            eventLoopGroup.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e207aad7db6891778c419da492f6a93e5d7dcd58"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDMzMTIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519033121", "createdAt": "2020-10-28T19:55:36Z", "commit": {"oid": "282f3f261d010c9af63cc903a067d3fa2b53b2b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDU0ODI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/577#pullrequestreview-519054824", "createdAt": "2020-10-28T20:25:52Z", "commit": {"oid": "0de94431055b8f4f7e0c60f14dd9ec4b8230f2d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2839, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}