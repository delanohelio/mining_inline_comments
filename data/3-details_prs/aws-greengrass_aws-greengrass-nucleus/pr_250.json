{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTg1MjI3", "number": 250, "title": "Adding a script for easy install", "bodyText": "Issue #, if available:\nhttps://quip-amazon.com/vgThABh2HVYO/Install-script\nDescription of changes:\nA script for provisioning EG device as IoT thing and setting up EG kernel\nWhy is this change necessary:\nM1 milestone to demo that customers can get started with EG kernel easily\nHow was this change tested:\nAny additional information or context required to review the change:\nStill refactoring, a lot of enhancements needed in terms of code structure, marked as Draft to get feedback on the functional aspect.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-20T19:51:25Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250", "merged": true, "mergeCommit": {"oid": "0c3320ee55ee9d6bc8d3b2effe79c534d6f5747d"}, "closed": true, "closedAt": "2020-05-28T22:13:59Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjOm5HgBqjMzNTgwODM4OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl1TysAFqTQyMDUwNDMxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d37a265070bf06eabecc988f1fc2ee461ee82a3", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d37a265070bf06eabecc988f1fc2ee461ee82a3", "committedDate": "2020-05-20T19:48:01Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7615696fb342fde9144f2474f66cd0f116e644a0", "committedDate": "2020-05-20T19:54:24Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjcxNjE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415671618", "createdAt": "2020-05-20T20:01:22Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDowMToyMlrOGYbyRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoxMzoxNlrOGYcLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NDI0Ng==", "bodyText": "consider renaming to createThingForE2ETest since the names it creates are specific to tests. Same with the one above.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428274246", "createdAt": "2020-05-20T20:01:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NDk5MA==", "bodyText": "does this need to be public?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428274990", "createdAt": "2020-05-20T20:02:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NTU0Ng==", "bodyText": "instead of converting to string, should we keep it as Path and then use toFile where needed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428275546", "createdAt": "2020-05-20T20:03:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NjEzNQ==", "bodyText": "Since the role alias doesn't exist at this point, I don't know that I'd create the topic and give it a value.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428276135", "createdAt": "2020-05-20T20:04:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NzMyMQ==", "bodyText": "instead of this, you can use kernel.findServiceTopic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428277321", "createdAt": "2020-05-20T20:06:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": {\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\"\n+                                + \"      \\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\" + \"    }\\n\" + \"}\").build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createPolicy(createPolicyRequest));\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\")\n+                        .target(thingInfo.certificateArn) // TODO : Verify if this is correct\n+                        .build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().attachPolicy(attachPolicyRequest));\n+    }\n+\n+    /**\n+     * Update the kernel config with TES role alias.\n+     *\n+     * @param kernel        Kernel instance\n+     * @param roleAliasName name of the role alias\n+     */\n+    public void updateKernelConfigWithTesRoleInfo(Kernel kernel, String roleAliasName) {\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NzU4NA==", "bodyText": "SM should not be created. It will be a real component which is not running in the kernel JVM.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428277584", "createdAt": "2020-05-20T20:07:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": {\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\"\n+                                + \"      \\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\" + \"    }\\n\" + \"}\").build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createPolicy(createPolicyRequest));\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\")\n+                        .target(thingInfo.certificateArn) // TODO : Verify if this is correct\n+                        .build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().attachPolicy(attachPolicyRequest));\n+    }\n+\n+    /**\n+     * Update the kernel config with TES role alias.\n+     *\n+     * @param kernel        Kernel instance\n+     * @param roleAliasName name of the role alias\n+     */\n+    public void updateKernelConfigWithTesRoleInfo(Kernel kernel, String roleAliasName) {\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(roleAliasName);\n+    }\n+\n+    // TODO : Remove once global packages are supported\n+\n+    /**\n+     * Create empty packages in customer's account for first party services.\n+     *\n+     * @throws IOException        Error in reading recipe template\n+     * @throws URISyntaxException Error in reading recipe template\n+     */\n+    public void setUpEmptyPackagesForFirstPartyServices() throws IOException, URISyntaxException {\n+        AWSGreengrassComponentManagementClientBuilder clientBuilder =\n+                AWSGreengrassComponentManagementClientBuilder.standard();\n+        // TODO : What should be the values for greengrassServiceEndpoint and greengrassServiceRegion?\n+        clientBuilder.withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(\"greengrassServiceEndpoint\", \"greengrassServiceRegion\"));\n+        AWSGreengrassComponentManagement cmsClient = clientBuilder.build();\n+        createEmptyComponent(cmsClient, \"TokenExchangeService\");\n+        createEmptyComponent(cmsClient, \"StreamManager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3ODk5Nw==", "bodyText": "actually log the problem.\nAlso, catch throwable, log, then exit. Otherwise we won't be logging fatal errors; they'll just go to stderr and disappear.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428278997", "createdAt": "2020-05-20T20:09:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";\n+    private static final String ROLE_NAME_ARG_SHORT = \"-rn\";\n+    private static final String ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n+\n+    private static final String ROLE_ALIAS_NAME_ARG = \"--role-alias-name\";\n+    private static final String ROLE_ALIAS_NAME_ARG_SHORT = \"-ra\";\n+    private static final String ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+\n+    private static final String PROVISION_THING_ARG = \"--provision\";\n+    private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n+    private static final boolean NEED_PROVISIONING_DEFAULT = true;\n+\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+    private final String[] setupArgs;\n+    private final List<String> kernelArgs = new ArrayList<>();\n+    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    private int argpos = 0;\n+    private String arg;\n+    private String thingName = THING_NAME_DEFAULT;\n+    private String policyName = POLICY_NAME_DEFAULT;\n+    private String roleName = ROLE_NAME_DEFAULT;\n+    private String roleAliasName = ROLE_ALIAS_NAME_DEFAULT;\n+    private boolean needProvisioning = NEED_PROVISIONING_DEFAULT;\n+\n+    /**\n+     * Constructor to create an instance using CLI args.\n+     *\n+     * @param setupArgs CLI args for setup script\n+     */\n+    public EvergreenSetup(String... setupArgs) {\n+        this.setupArgs = setupArgs;\n+        this.deviceProvisioningHelper =\n+                new DeviceProvisioningHelper(new IotSdkAccessor(IotClient.builder().build()), new IamSdkAccessor());\n+    }\n+\n+    /**\n+     * Entry point for setup script.\n+     *\n+     * @param args CLI args for setup script\n+     * @throws Exception error in setup\n+     */\n+    public static void main(String[] args) {\n+        try {\n+            EvergreenSetup setup = new EvergreenSetup(args);\n+\n+            setup.parseArgs();\n+\n+            Kernel kernel = new Kernel().parseArgs(setup.kernelArgs.toArray(new String[]{}));\n+\n+            if (setup.needProvisioning) {\n+                setup.provision(kernel);\n+            }\n+\n+            kernel.launch();\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3OTY3Mg==", "bodyText": "use this as the name in the annotation.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428279672", "createdAt": "2020-05-20T20:11:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -15,6 +15,8 @@\n \n @ImplementsService(name = \"TokenExchangeService\")\n public class TokenExchangeService extends EvergreenService {\n+    public static final String TOKEN_EXCHANGE_SERVICE_TOPICS = \"TokenExchangeService\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MDE3MA==", "bodyText": "We need to inject the region into this and all of our AWS clients. We can't rely on the region existing in the environment variables.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428280170", "createdAt": "2020-05-20T20:12:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/IamSdkAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.IamException;\n+import software.amazon.awssdk.services.iam.model.LimitExceededException;\n+import software.amazon.awssdk.services.iam.model.ServiceFailureException;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Accessor for AWS IAM SDK.\n+ */\n+public class IamSdkAccessor extends BaseAwsSdkAccessor {\n+    public static final Set<Class<? extends Throwable>> retryableIoTExceptions =\n+            new HashSet<>(Arrays.asList(LimitExceededException.class, ServiceFailureException.class));\n+    private static final int DEFAULT_RETRIES = 5;\n+    private static final int DEFAULT_INITIAL_BACKOFF_MS = 100;\n+    @Getter\n+    private final IamClient iamClient = IamClient.builder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4MDY2Mg==", "bodyText": "why does the iam one have a default value, but this one doesn't?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428280662", "createdAt": "2020-05-20T20:13:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/IotSdkAccessor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.InternalException;\n+import software.amazon.awssdk.services.iot.model.InternalFailureException;\n+import software.amazon.awssdk.services.iot.model.IotException;\n+import software.amazon.awssdk.services.iot.model.LimitExceededException;\n+import software.amazon.awssdk.services.iot.model.ThrottlingException;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Accessor for AWS IoT SDK.\n+ */\n+@AllArgsConstructor\n+public class IotSdkAccessor extends BaseAwsSdkAccessor {\n+    public static final Set<Class<? extends Throwable>> retryableIoTExceptions = new HashSet<>(\n+            Arrays.asList(ThrottlingException.class, InternalException.class, InternalFailureException.class,\n+                    LimitExceededException.class));\n+    private static final int DEFAULT_RETRIES = 5;\n+    private static final int DEFAULT_INITIAL_BACKOFF_MS = 100;\n+    @Getter\n+    private final IotClient iotClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Njg4OTEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415688913", "createdAt": "2020-05-20T20:27:13Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzoxM1rOGYcmpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzoxM1rOGYcmpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4NzY1NA==", "bodyText": "Action\": \"iot:AssumeRoleWithCertificate\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428287654", "createdAt": "2020-05-20T20:27:13Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": {\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 257}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Njg5Mzcy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415689372", "createdAt": "2020-05-20T20:27:54Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzo1NFrOGYcoLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyNzo1NFrOGYcoLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4ODA0NA==", "bodyText": "You would also have to handle cases when these roles/policies already exist?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428288044", "createdAt": "2020-05-20T20:27:54Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 234}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjkwNTA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415690506", "createdAt": "2020-05-20T20:29:40Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyOTo0MFrOGYcroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDoyOTo0MFrOGYcroA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4ODkyOA==", "bodyText": "nit: There is nothing specific to AWS in this class. Should rename?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428288928", "createdAt": "2020-05-20T20:29:40Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/util/BaseAwsSdkAccessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.util;\n+\n+/**\n+ * Base accessor for AWS services SDKs.\n+ */\n+public class BaseAwsSdkAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjkxNzUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415691751", "createdAt": "2020-05-20T20:31:38Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozMTozOFrOGYcvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozMTozOFrOGYcvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI4OTkzOA==", "bodyText": "nit: could have default values in base?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428289938", "createdAt": "2020-05-20T20:31:38Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/util/IamSdkAccessor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.IamException;\n+import software.amazon.awssdk.services.iam.model.LimitExceededException;\n+import software.amazon.awssdk.services.iam.model.ServiceFailureException;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Accessor for AWS IAM SDK.\n+ */\n+public class IamSdkAccessor extends BaseAwsSdkAccessor {\n+    public static final Set<Class<? extends Throwable>> retryableIoTExceptions =\n+            new HashSet<>(Arrays.asList(LimitExceededException.class, ServiceFailureException.class));\n+    private static final int DEFAULT_RETRIES = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjkyODI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415692827", "createdAt": "2020-05-20T20:33:14Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozMzoxNFrOGYcyvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozMzoxNFrOGYcyvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MDc1MA==", "bodyText": "nit: Move policy name to a constant", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428290750", "createdAt": "2020-05-20T20:33:14Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 255}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjkzNzU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415693759", "createdAt": "2020-05-20T20:34:42Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNDo0MlrOGYc1oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNDo0MlrOGYc1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MTQ4OA==", "bodyText": "nit: you could just pass certArn, thats all TES cares about.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428291488", "createdAt": "2020-05-20T20:34:42Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Njk0NTg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-415694584", "createdAt": "2020-05-20T20:35:53Z", "commit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNTo1M1rOGYc4Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNTo1M1rOGYc4Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MjE3MQ==", "bodyText": "Thanks for making this change. I was planning to add integration test for TES and these util methods would help me save some effort. Overall this should work after you fix Action in cert policy.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428292171", "createdAt": "2020-05-20T20:35:53Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": {\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\"\n+                                + \"      \\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\" + \"    }\\n\" + \"}\").build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createPolicy(createPolicyRequest));\n+\n+        AttachPolicyRequest attachPolicyRequest =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 261}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7615696fb342fde9144f2474f66cd0f116e644a0", "committedDate": "2020-05-20T19:54:24Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/301bae60624e6c06f9a2c75371b8aa197a6a824f", "committedDate": "2020-05-21T16:22:02Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NDc4NDk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-416478498", "createdAt": "2020-05-21T20:44:42Z", "commit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0NDo0MlrOGZCOKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMTowMToxNFrOGZCuow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwMzk3OA==", "bodyText": "What do you think about keeping it false by default? If I just want to run the kernel then I don't want to provision by default and just run the kernel with kernel args. I think the times at which you want to provision a device is limited and special (for example booting up), but a kernel restart/rerun can happen in different situations like device reboot, service restarts, etc. where you probably do not want to provision again. Explicitly specifying provisioning makes more sense to me.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428903978", "createdAt": "2020-05-21T20:44:42Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";\n+    private static final String ROLE_NAME_ARG_SHORT = \"-rn\";\n+    private static final String ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n+\n+    private static final String ROLE_ALIAS_NAME_ARG = \"--role-alias-name\";\n+    private static final String ROLE_ALIAS_NAME_ARG_SHORT = \"-ra\";\n+    private static final String ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+\n+    private static final String PROVISION_THING_ARG = \"--provision\";\n+    private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n+    private static final boolean NEED_PROVISIONING_DEFAULT = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDI3OA==", "bodyText": "It would be good to have a README to explain the usage of this script. Add details of assumptions for using this script, for example the credentials and what a user needs to do to ensure that.\nHow does a customer get details on usage of every parameter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428904278", "createdAt": "2020-05-21T20:45:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwODI3OQ==", "bodyText": "I think this name should indicate that this role is for TES", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428908279", "createdAt": "2020-05-21T20:53:07Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxMDMzNA==", "bodyText": "Can I provide credentials as well as part of the arguments?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428910334", "createdAt": "2020-05-21T20:57:16Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";\n+    private static final String ROLE_NAME_ARG_SHORT = \"-rn\";\n+    private static final String ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n+\n+    private static final String ROLE_ALIAS_NAME_ARG = \"--role-alias-name\";\n+    private static final String ROLE_ALIAS_NAME_ARG_SHORT = \"-ra\";\n+    private static final String ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+\n+    private static final String PROVISION_THING_ARG = \"--provision\";\n+    private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n+    private static final boolean NEED_PROVISIONING_DEFAULT = true;\n+\n+    private static final String AWS_REGION_ARG = \"--aws-region\";\n+    private static final String AWS_REGION_ARG_SHORT = \"-ar\";\n+    private static final String AWS_REGION_DEFAULT = \"us-east-1\";\n+\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+    private final String[] setupArgs;\n+    private final List<String> kernelArgs = new ArrayList<>();\n+    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    private int argpos = 0;\n+    private String arg;\n+    private String thingName = THING_NAME_DEFAULT;\n+    private String policyName = POLICY_NAME_DEFAULT;\n+    private String roleName = ROLE_NAME_DEFAULT;\n+    private String roleAliasName = ROLE_ALIAS_NAME_DEFAULT;\n+    private boolean needProvisioning = NEED_PROVISIONING_DEFAULT;\n+    private String awsRegion = AWS_REGION_DEFAULT;\n+\n+    /**\n+     * Constructor to create an instance using CLI args.\n+     *\n+     * @param setupArgs CLI args for setup script\n+     */\n+    public EvergreenSetup(String... setupArgs) {\n+        this.setupArgs = setupArgs;\n+        parseArgs();\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(awsRegion);\n+    }\n+\n+    /**\n+     * Entry point for setup script.\n+     *\n+     * @param args CLI args for setup script\n+     * @throws Exception error in setup\n+     */\n+    @SuppressWarnings({\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\"})\n+    public static void main(String[] args) {\n+        try {\n+            EvergreenSetup setup = new EvergreenSetup(args);\n+\n+            setup.parseArgs();\n+\n+            Kernel kernel = new Kernel().parseArgs(setup.kernelArgs.toArray(new String[]{}));\n+\n+            if (setup.needProvisioning) {\n+                setup.provision(kernel);\n+            }\n+\n+            kernel.launch();\n+        } catch (Throwable t) {\n+            logger.atError().setCause(t).log(\"Error while trying to setup Evergreen kernel\");\n+            System.exit(1);\n+        }\n+    }\n+\n+    private void parseArgs() {\n+        while (getArg() != null) {\n+            switch (arg.toLowerCase()) {\n+                case KERNEL_CONFIG_ARG:\n+                case KERNEL_CONFIG_ARG_SHORT:\n+                case KERNEL_ROOT_ARG:\n+                case KERNEL_ROOT_ARG_SHORT:\n+                    kernelArgs.add(arg);\n+                    kernelArgs.add(getArg());\n+                    break;\n+                case THING_NAME_ARG:\n+                case THING_NAME_ARG_SHORT:\n+                    this.thingName = getArg();\n+                    break;\n+                case POLICY_NAME_ARG:\n+                case POLICY_NAME_ARG_SHORT:\n+                    this.policyName = getArg();\n+                    break;\n+                case ROLE_NAME_ARG:\n+                case ROLE_NAME_ARG_SHORT:\n+                    this.roleName = getArg();\n+                    break;\n+                case ROLE_ALIAS_NAME_ARG:\n+                case ROLE_ALIAS_NAME_ARG_SHORT:\n+                    this.roleAliasName = getArg();\n+                    break;\n+                case PROVISION_THING_ARG:\n+                case PROVISION_THING_ARG_SHORT:\n+                    this.needProvisioning = Coerce.toBoolean(getArg());\n+                    break;\n+                case AWS_REGION_ARG:\n+                case AWS_REGION_ARG_SHORT:\n+                    this.awsRegion = getArg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkxMjI5MQ==", "bodyText": "Right now if a parameter to script is not specified, it is assumed to use the default values. There is no flag to say I want to use default values or just want partial updates to provisioning.\nAs I understand only IotThing creation is going to stay here in long term and other things are temp. So its ok not to support partial provisioning updates.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r428912291", "createdAt": "2020-05-21T21:01:14Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";\n+    private static final String ROLE_NAME_ARG_SHORT = \"-rn\";\n+    private static final String ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n+\n+    private static final String ROLE_ALIAS_NAME_ARG = \"--role-alias-name\";\n+    private static final String ROLE_ALIAS_NAME_ARG_SHORT = \"-ra\";\n+    private static final String ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+\n+    private static final String PROVISION_THING_ARG = \"--provision\";\n+    private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n+    private static final boolean NEED_PROVISIONING_DEFAULT = true;\n+\n+    private static final String AWS_REGION_ARG = \"--aws-region\";\n+    private static final String AWS_REGION_ARG_SHORT = \"-ar\";\n+    private static final String AWS_REGION_DEFAULT = \"us-east-1\";\n+\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+    private final String[] setupArgs;\n+    private final List<String> kernelArgs = new ArrayList<>();\n+    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    private int argpos = 0;\n+    private String arg;\n+    private String thingName = THING_NAME_DEFAULT;\n+    private String policyName = POLICY_NAME_DEFAULT;\n+    private String roleName = ROLE_NAME_DEFAULT;\n+    private String roleAliasName = ROLE_ALIAS_NAME_DEFAULT;\n+    private boolean needProvisioning = NEED_PROVISIONING_DEFAULT;\n+    private String awsRegion = AWS_REGION_DEFAULT;\n+\n+    /**\n+     * Constructor to create an instance using CLI args.\n+     *\n+     * @param setupArgs CLI args for setup script\n+     */\n+    public EvergreenSetup(String... setupArgs) {\n+        this.setupArgs = setupArgs;\n+        parseArgs();\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(awsRegion);\n+    }\n+\n+    /**\n+     * Entry point for setup script.\n+     *\n+     * @param args CLI args for setup script\n+     * @throws Exception error in setup\n+     */\n+    @SuppressWarnings({\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\"})\n+    public static void main(String[] args) {\n+        try {\n+            EvergreenSetup setup = new EvergreenSetup(args);\n+\n+            setup.parseArgs();\n+\n+            Kernel kernel = new Kernel().parseArgs(setup.kernelArgs.toArray(new String[]{}));\n+\n+            if (setup.needProvisioning) {\n+                setup.provision(kernel);\n+            }\n+\n+            kernel.launch();\n+        } catch (Throwable t) {\n+            logger.atError().setCause(t).log(\"Error while trying to setup Evergreen kernel\");\n+            System.exit(1);\n+        }\n+    }\n+\n+    private void parseArgs() {\n+        while (getArg() != null) {\n+            switch (arg.toLowerCase()) {\n+                case KERNEL_CONFIG_ARG:\n+                case KERNEL_CONFIG_ARG_SHORT:\n+                case KERNEL_ROOT_ARG:\n+                case KERNEL_ROOT_ARG_SHORT:\n+                    kernelArgs.add(arg);\n+                    kernelArgs.add(getArg());\n+                    break;\n+                case THING_NAME_ARG:\n+                case THING_NAME_ARG_SHORT:\n+                    this.thingName = getArg();\n+                    break;\n+                case POLICY_NAME_ARG:\n+                case POLICY_NAME_ARG_SHORT:\n+                    this.policyName = getArg();\n+                    break;\n+                case ROLE_NAME_ARG:\n+                case ROLE_NAME_ARG_SHORT:\n+                    this.roleName = getArg();\n+                    break;\n+                case ROLE_ALIAS_NAME_ARG:\n+                case ROLE_ALIAS_NAME_ARG_SHORT:\n+                    this.roleAliasName = getArg();\n+                    break;\n+                case PROVISION_THING_ARG:\n+                case PROVISION_THING_ARG_SHORT:\n+                    this.needProvisioning = Coerce.toBoolean(getArg());\n+                    break;\n+                case AWS_REGION_ARG:\n+                case AWS_REGION_ARG_SHORT:\n+                    this.awsRegion = getArg();\n+                    break;\n+                default:\n+                    RuntimeException rte =\n+                            new RuntimeException(String.format(\"Undefined command line argument: %s\", arg));\n+                    logger.atError().setEventType(\"parse-args-error\").setCause(rte).log();\n+                    throw rte;\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    private String getArg() {\n+        return arg = setupArgs == null || argpos >= setupArgs.length ? null : setupArgs[argpos++];\n+    }\n+\n+    private void provision(Kernel kernel) throws IOException, URISyntaxException {\n+        ThingInfo thingInfo = deviceProvisioningHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDgyNzQz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-417082743", "createdAt": "2020-05-22T17:41:36Z", "commit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MTozNlrOGZfAmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MTozNlrOGZfAmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTY0MA==", "bodyText": "Why is this needed? Doesn't AWS SDK already provide retry?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r429375640", "createdAt": "2020-05-22T17:41:36Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/util/BaseAwsSdkAccessor.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.util;\n+\n+/**\n+ * Base accessor for AWS services SDKs.\n+ */\n+public class BaseAwsSdkAccessor {\n+\n+    /**\n+     * Execute with retries.\n+     *\n+     * @param tries                no of retries\n+     * @param initialBackoffMillis backoff in milliseconds\n+     * @param func                 executable action\n+     * @param retryableExceptions  exceptions to retry on\n+     * @param <T>                  response\n+     * @param <E>                  exception\n+     * @return response/exception\n+     * @throws E exception while talking via AWS SDK\n+     */\n+    @SuppressWarnings({\"PMD.AssignmentInOperand\", \"PMD.AvoidCatchingThrowable\"})\n+    public <T, E extends Throwable> T retry(int tries, int initialBackoffMillis, CrashableSupplier<T, E> func,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTc3MjQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-418577246", "createdAt": "2020-05-26T18:43:22Z", "commit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0MzoyMlrOGarg1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo0MzoyMlrOGarg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyOTA3Nw==", "bodyText": "Hasn't the constructor of EvergreenSetup already invokes parseArgs() ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r430629077", "createdAt": "2020-05-26T18:43:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    private static final String ROLE_NAME_ARG = \"--role-name\";\n+    private static final String ROLE_NAME_ARG_SHORT = \"-rn\";\n+    private static final String ROLE_NAME_DEFAULT = \"MyIotRoleForTes\";\n+\n+    private static final String ROLE_ALIAS_NAME_ARG = \"--role-alias-name\";\n+    private static final String ROLE_ALIAS_NAME_ARG_SHORT = \"-ra\";\n+    private static final String ROLE_ALIAS_NAME_DEFAULT = \"MyIotRoleAliasForTes\";\n+\n+    private static final String PROVISION_THING_ARG = \"--provision\";\n+    private static final String PROVISION_THING_ARG_SHORT = \"-p\";\n+    private static final boolean NEED_PROVISIONING_DEFAULT = true;\n+\n+    private static final String AWS_REGION_ARG = \"--aws-region\";\n+    private static final String AWS_REGION_ARG_SHORT = \"-ar\";\n+    private static final String AWS_REGION_DEFAULT = \"us-east-1\";\n+\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+    private final String[] setupArgs;\n+    private final List<String> kernelArgs = new ArrayList<>();\n+    private final DeviceProvisioningHelper deviceProvisioningHelper;\n+    private int argpos = 0;\n+    private String arg;\n+    private String thingName = THING_NAME_DEFAULT;\n+    private String policyName = POLICY_NAME_DEFAULT;\n+    private String roleName = ROLE_NAME_DEFAULT;\n+    private String roleAliasName = ROLE_ALIAS_NAME_DEFAULT;\n+    private boolean needProvisioning = NEED_PROVISIONING_DEFAULT;\n+    private String awsRegion = AWS_REGION_DEFAULT;\n+\n+    /**\n+     * Constructor to create an instance using CLI args.\n+     *\n+     * @param setupArgs CLI args for setup script\n+     */\n+    public EvergreenSetup(String... setupArgs) {\n+        this.setupArgs = setupArgs;\n+        parseArgs();\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(awsRegion);\n+    }\n+\n+    /**\n+     * Entry point for setup script.\n+     *\n+     * @param args CLI args for setup script\n+     * @throws Exception error in setup\n+     */\n+    @SuppressWarnings({\"PMD.NullAssignment\", \"PMD.AvoidCatchingThrowable\", \"PMD.DoNotCallSystemExit\"})\n+    public static void main(String[] args) {\n+        try {\n+            EvergreenSetup setup = new EvergreenSetup(args);\n+\n+            setup.parseArgs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e7db5e26218b2a75eb1b1dae0369150c6f67382", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3e7db5e26218b2a75eb1b1dae0369150c6f67382", "committedDate": "2020-05-26T23:04:32Z", "message": "Clean up retry logic"}, "afterCommit": {"oid": "12f7fd7dc8ed15352307a644f90e58ac9361c8f3", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/12f7fd7dc8ed15352307a644f90e58ac9361c8f3", "committedDate": "2020-05-26T23:10:08Z", "message": "Clean up retry logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12f7fd7dc8ed15352307a644f90e58ac9361c8f3", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/12f7fd7dc8ed15352307a644f90e58ac9361c8f3", "committedDate": "2020-05-26T23:10:08Z", "message": "Clean up retry logic"}, "afterCommit": {"oid": "5691251ae20377d819396cddb58e956c1b84afed", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5691251ae20377d819396cddb58e956c1b84afed", "committedDate": "2020-05-27T17:32:06Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5691251ae20377d819396cddb58e956c1b84afed", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5691251ae20377d819396cddb58e956c1b84afed", "committedDate": "2020-05-27T17:32:06Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b678ce051555f4b240e2fff1c57eaed3535dc8fc", "committedDate": "2020-05-27T18:06:48Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDg5NjY1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-419489665", "createdAt": "2020-05-27T18:15:29Z", "commit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxNToyOVrOGbXaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxOToxMVrOGbXh4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0ODI0NA==", "bodyText": "add todo to support different partitions?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431348244", "createdAt": "2020-05-27T18:15:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/IamSdkClientFactory.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.aws.iot.evergreen.util;\n+\n+import software.amazon.awssdk.core.client.config.ClientOverrideConfiguration;\n+import software.amazon.awssdk.core.retry.RetryPolicy;\n+import software.amazon.awssdk.core.retry.backoff.BackoffStrategy;\n+import software.amazon.awssdk.core.retry.conditions.OrRetryCondition;\n+import software.amazon.awssdk.core.retry.conditions.RetryCondition;\n+import software.amazon.awssdk.core.retry.conditions.RetryOnExceptionsCondition;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.LimitExceededException;\n+import software.amazon.awssdk.services.iam.model.ServiceFailureException;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Accessor for AWS IAM SDK.\n+ */\n+public final class IamSdkClientFactory {\n+    private static final Set<Class<? extends Exception>> retryableIamExceptions =\n+            new HashSet<>(Arrays.asList(LimitExceededException.class, ServiceFailureException.class));\n+\n+    private static final RetryCondition retryCondition = OrRetryCondition\n+            .create(RetryCondition.defaultRetryCondition(), RetryOnExceptionsCondition.create(retryableIamExceptions));\n+\n+    private static final RetryPolicy retryPolicy =\n+            RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultStrategy())\n+                    .retryCondition(retryCondition).build();\n+\n+    private IamSdkClientFactory() {\n+    }\n+\n+    /**\n+     * Build IamClient.\n+     *\n+     * @return IamClient instance\n+     */\n+    public static IamClient getIamClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0OTkzMA==", "bodyText": "please make this change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431349930", "createdAt": "2020-05-27T18:18:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,330 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkAccessor;\n+import com.aws.iot.evergreen.util.IotSdkAccessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_CRED_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_IOT_DATA_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeviceConfigurationHelper.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@AllArgsConstructor\n+public class DeviceProvisioningHelper {\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    @Getter\n+    private IotSdkAccessor iotSdkAccessor;\n+    private IamSdkAccessor iamSdkAccessor;\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing() {\n+        return createThing(iotSdkAccessor.getIotClient(), \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    // Used by E2E tests\n+\n+    /**\n+     * Create a thing with test configuration and provided iotClient instance.\n+     *\n+     * @param client iotClient to use\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client) {\n+        return createThing(client, \"E2ETestsIotPolicy\", \"E2ETestsIotThing\");\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client          iotClient to use\n+     * @param policyName      policyName\n+     * @param thingNamePrefix thingName prefix\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingNamePrefix) {\n+        // Find or create IoT policy\n+        try {\n+            iotSdkAccessor.retryIot(() -> client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build()));\n+        } catch (ResourceNotFoundException e) {\n+            iotSdkAccessor.retryIot(() -> client.createPolicy(CreatePolicyRequest.builder().policyName(policyName)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = iotSdkAccessor.retryIot(() -> client\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        iotSdkAccessor.retryIot(() -> client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = thingNamePrefix + UUID.randomUUID().toString();\n+        String thingArn = iotSdkAccessor\n+                .retryIot(() -> client.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        iotSdkAccessor.retryIot(() -> client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), iotSdkAccessor.retryIot(\n+                () -> client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress(), iotSdkAccessor.retryIot(() -> client\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()))\n+                .endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotSdkAccessor.getIotClient(), thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        iotSdkAccessor.retryIot(() -> client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        iotSdkAccessor\n+                .retryIot(() -> client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        iotSdkAccessor.retryIot(() -> client.updateCertificate(\n+                UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                        .newStatus(CertificateStatus.INACTIVE).build()));\n+        iotSdkAccessor.retryIot(() -> client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /**\n+     * Download content from a URL to a local file.\n+     *\n+     * @param url source url\n+     * @param f   destination file\n+     * @throws IOException exception thrown while writing to file\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    public void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        String caFilePath = rootDir.resolve(\"rootCA.pem\").toString();\n+        String privKeyFilePath = rootDir.resolve(\"privKey.key\").toString();\n+        String certFilePath = rootDir.resolve(\"thingCert.crt\").toString();\n+\n+        downloadRootCAToFile(new File(caFilePath));\n+        try (CommitableFile cf = CommitableFile.of(new File(privKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        Topics deploymentServiceTopics =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, DEPLOYMENT_SERVICE_TOPICS);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).withValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_DATA_ENDPOINT).withValue(thing.dataEndpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).withValue(privKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).withValue(certFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(caFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_IOT_CRED_ENDPOINT).withValue(thing.credEndpoint);\n+\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(\"\");//Should be roleAlias\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleNamePrefix rolaName prefix\n+     * @param roleAliasName  roleAlias name\n+     * @param thingInfo      thing info\n+     */\n+    public void setupIoTRoleForTes(String roleNamePrefix, String roleAliasName, ThingInfo thingInfo) {\n+        // Create IAM role\n+        CreateRoleRequest createRoleRequest =\n+                CreateRoleRequest.builder().roleName(roleNamePrefix + UUID.randomUUID().toString()).description(\n+                        \"Role for Evergreen IoT things to interact with other AWS services using token exchange \"\n+                                + \"service\").assumeRolePolicyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": [\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Principal\\\": {\\n\"\n+                                + \"        \\\"Service\\\": [\\n\" + \"          \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"        ]\\n\" + \"      },\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\" + \"    }\\n\"\n+                                + \"  ]\\n\" + \"}\").build();\n+        String roleArn =\n+                iamSdkAccessor.retryIam(() -> iamSdkAccessor.getIamClient().createRole(createRoleRequest)).role().arn();\n+\n+        // Create RoleAlias\n+        CreateRoleAliasRequest createRoleAliasRequest =\n+                CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+        String roleAliasArn =\n+                iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createRoleAlias(createRoleAliasRequest))\n+                        .roleAliasArn();\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest =\n+                CreatePolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").policyDocument(\n+                        \"{\\n\" + \"  \\\"Version\\\": \\\"2012-10-17\\\",\\n\" + \"  \\\"Statement\\\": {\\n\" + \"    {\\n\"\n+                                + \"      \\\"Effect\\\": \\\"Allow\\\",\\n\" + \"      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n\"\n+                                + \"      \\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\" + \"    }\\n\" + \"}\").build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().createPolicy(createPolicyRequest));\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\")\n+                        .target(thingInfo.certificateArn) // TODO : Verify if this is correct\n+                        .build();\n+        iotSdkAccessor.retryIot(() -> iotSdkAccessor.getIotClient().attachPolicy(attachPolicyRequest));\n+    }\n+\n+    /**\n+     * Update the kernel config with TES role alias.\n+     *\n+     * @param kernel        Kernel instance\n+     * @param roleAliasName name of the role alias\n+     */\n+    public void updateKernelConfigWithTesRoleInfo(Kernel kernel, String roleAliasName) {\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI3NzMyMQ=="}, "originalCommit": {"oid": "7615696fb342fde9144f2474f66cd0f116e644a0"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MDI0MA==", "bodyText": "this should be injected once Rahul's change is merged.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431350240", "createdAt": "2020-05-27T18:19:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,346 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Constructor for a desired region and credentials.\n+     *\n+     * @param awsRegion           aws region\n+     * @param credentialsProvider credentials provider\n+     */\n+    public DeviceProvisioningHelper(Region awsRegion, AwsCredentialsProvider credentialsProvider) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, credentialsProvider);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME, E2E_TESTS_THING_NAME);\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotClient, thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleName       rolaName\n+     * @param roleAliasName  roleAlias name\n+     * @param certificateArn certificate arn for the IoT thing\n+     */\n+    public void setupIoTRoleForTes(String roleName, String roleAliasName, String certificateArn) {\n+        String roleAliasArn;\n+        try {\n+            // Get Role Alias arn\n+            DescribeRoleAliasRequest describeRoleAliasRequest =\n+                    DescribeRoleAliasRequest.builder().roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.describeRoleAlias(describeRoleAliasRequest).roleAliasDescription().roleAliasArn();\n+        } catch (ResourceNotFoundException ranfe) {\n+            logger.atInfo().log(\"TES role alias with the provided name does not exist, creating new alias\");\n+\n+            // Get IAM role arn in order to attach an alias to it\n+            String roleArn;\n+            try {\n+                GetRoleRequest getRoleRequest = GetRoleRequest.builder().roleName(roleName).build();\n+                roleArn = iamClient.getRole(getRoleRequest).role().arn();\n+            } catch (ResourceNotFoundException rnfe) {\n+                logger.atInfo().log(\"TES role with the provided name does not exist, creating role\");\n+                CreateRoleRequest createRoleRequest = CreateRoleRequest.builder().roleName(roleName).description(\n+                        \"Role for Evergreen IoT things to interact with AWS services using token exchange service\")\n+                        .assumeRolePolicyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                                + \"  \\\"Statement\\\": [\\n    {\\n      \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                                + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n+                roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+            }\n+\n+            CreateRoleAliasRequest createRoleAliasRequest =\n+                    CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.createRoleAlias(createRoleAliasRequest).roleAliasArn();\n+        }\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest = CreatePolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME)\n+                .policyDocument(\"{\\n\\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\\t\\\"Statement\\\": {\\n\"\n+                        + \"\\t\\t\\\"Effect\\\": \\\"Allow\\\",\\n\\t\\t\\\"Action\\\": \\\"iot:AssumeRoleWithCertificate\\\",\\n\"\n+                        + \"\\t\\t\\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\\t}\\n}\").build();\n+        iotClient.createPolicy(createPolicyRequest);\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").target(certificateArn)\n+                        .build();\n+        iotClient.attachPolicy(attachPolicyRequest);\n+    }\n+\n+    /**\n+     * Update the kernel config with TES role alias.\n+     *\n+     * @param kernel        Kernel instance\n+     * @param roleAliasName name of the role alias\n+     */\n+    public void updateKernelConfigWithTesRoleInfo(Kernel kernel, String roleAliasName) {\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(roleAliasName);\n+    }\n+\n+    // TODO : Remove once global packages are supported\n+\n+    /**\n+     * Create empty packages in customer's account for first party services.\n+     *\n+     * @param awsRegion aws region\n+     * @throws IOException        Error in reading recipe template\n+     * @throws URISyntaxException Error in reading recipe template\n+     */\n+    public void setUpEmptyPackagesForFirstPartyServices(String awsRegion) {\n+        AWSGreengrassComponentManagementClientBuilder clientBuilder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 304}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDk1Nzgz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-419495783", "createdAt": "2020-05-27T18:24:12Z", "commit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoyNDoxMlrOGbXsuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NzoxM1rOGbY0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1MzAxNw==", "bodyText": "It is going to be open source so they will have access to the script. help works too. We will need AWS documentation anyways.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431353017", "createdAt": "2020-05-27T18:24:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDI3OA=="}, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1NzI5Mw==", "bodyText": "I am not sure if 'TES' is understood publicly. I think customers understand STS (Security token service). More context will need to be given in AWS docs but we should use the term that we advertise publicly? Applies for description below as well", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431357293", "createdAt": "2020-05-27T18:31:45Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String SHOW_HELP_RESPONSE = \"\\n\" + \"DESCRIPTION\\n\"\n+            + \"\\tInstall Evergreen kernel on your device, register the device as IoT thing, create certificates and \"\n+            + \"attach role for TES to them, install the Evergreen device CLI. Please set the AWS credentials\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjYwOQ==", "bodyText": "Use the constant IOT_ROLE_POLICY_NAME", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431362609", "createdAt": "2020-05-27T18:41:22Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,346 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Constructor for a desired region and credentials.\n+     *\n+     * @param awsRegion           aws region\n+     * @param credentialsProvider credentials provider\n+     */\n+    public DeviceProvisioningHelper(Region awsRegion, AwsCredentialsProvider credentialsProvider) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, credentialsProvider);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME, E2E_TESTS_THING_NAME);\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotClient, thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleName       rolaName\n+     * @param roleAliasName  roleAlias name\n+     * @param certificateArn certificate arn for the IoT thing\n+     */\n+    public void setupIoTRoleForTes(String roleName, String roleAliasName, String certificateArn) {\n+        String roleAliasArn;\n+        try {\n+            // Get Role Alias arn\n+            DescribeRoleAliasRequest describeRoleAliasRequest =\n+                    DescribeRoleAliasRequest.builder().roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.describeRoleAlias(describeRoleAliasRequest).roleAliasDescription().roleAliasArn();\n+        } catch (ResourceNotFoundException ranfe) {\n+            logger.atInfo().log(\"TES role alias with the provided name does not exist, creating new alias\");\n+\n+            // Get IAM role arn in order to attach an alias to it\n+            String roleArn;\n+            try {\n+                GetRoleRequest getRoleRequest = GetRoleRequest.builder().roleName(roleName).build();\n+                roleArn = iamClient.getRole(getRoleRequest).role().arn();\n+            } catch (ResourceNotFoundException rnfe) {\n+                logger.atInfo().log(\"TES role with the provided name does not exist, creating role\");\n+                CreateRoleRequest createRoleRequest = CreateRoleRequest.builder().roleName(roleName).description(\n+                        \"Role for Evergreen IoT things to interact with AWS services using token exchange service\")\n+                        .assumeRolePolicyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                                + \"  \\\"Statement\\\": [\\n    {\\n      \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                                + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n+                roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+            }\n+\n+            CreateRoleAliasRequest createRoleAliasRequest =\n+                    CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.createRoleAlias(createRoleAliasRequest).roleAliasArn();\n+        }\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest = CreatePolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME)\n+                .policyDocument(\"{\\n\\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\\t\\\"Statement\\\": {\\n\"\n+                        + \"\\t\\t\\\"Effect\\\": \\\"Allow\\\",\\n\\t\\t\\\"Action\\\": \\\"iot:AssumeRoleWithCertificate\\\",\\n\"\n+                        + \"\\t\\t\\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\\t}\\n}\").build();\n+        iotClient.createPolicy(createPolicyRequest);\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(\"EvergreenTESCertificatePolicy\").target(certificateArn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NzE0NQ==", "bodyText": "If the policy already exists, will this return error or update the policy?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431367145", "createdAt": "2020-05-27T18:49:44Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,346 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Constructor for a desired region and credentials.\n+     *\n+     * @param awsRegion           aws region\n+     * @param credentialsProvider credentials provider\n+     */\n+    public DeviceProvisioningHelper(Region awsRegion, AwsCredentialsProvider credentialsProvider) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, credentialsProvider);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME, E2E_TESTS_THING_NAME);\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account.\n+     *\n+     * @param thing thing info\n+     */\n+    public void cleanThing(ThingInfo thing) {\n+        cleanThing(iotClient, thing);\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /**\n+     * Download root CA to a local file.\n+     *\n+     * @param f root CA file\n+     * @throws IOException error in writing to file\n+     */\n+    public void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleName       rolaName\n+     * @param roleAliasName  roleAlias name\n+     * @param certificateArn certificate arn for the IoT thing\n+     */\n+    public void setupIoTRoleForTes(String roleName, String roleAliasName, String certificateArn) {\n+        String roleAliasArn;\n+        try {\n+            // Get Role Alias arn\n+            DescribeRoleAliasRequest describeRoleAliasRequest =\n+                    DescribeRoleAliasRequest.builder().roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.describeRoleAlias(describeRoleAliasRequest).roleAliasDescription().roleAliasArn();\n+        } catch (ResourceNotFoundException ranfe) {\n+            logger.atInfo().log(\"TES role alias with the provided name does not exist, creating new alias\");\n+\n+            // Get IAM role arn in order to attach an alias to it\n+            String roleArn;\n+            try {\n+                GetRoleRequest getRoleRequest = GetRoleRequest.builder().roleName(roleName).build();\n+                roleArn = iamClient.getRole(getRoleRequest).role().arn();\n+            } catch (ResourceNotFoundException rnfe) {\n+                logger.atInfo().log(\"TES role with the provided name does not exist, creating role\");\n+                CreateRoleRequest createRoleRequest = CreateRoleRequest.builder().roleName(roleName).description(\n+                        \"Role for Evergreen IoT things to interact with AWS services using token exchange service\")\n+                        .assumeRolePolicyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                                + \"  \\\"Statement\\\": [\\n    {\\n      \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                                + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n+                roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+            }\n+\n+            CreateRoleAliasRequest createRoleAliasRequest =\n+                    CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.createRoleAlias(createRoleAliasRequest).roleAliasArn();\n+        }\n+\n+        // Create and attach policy role alias to cert\n+        CreatePolicyRequest createPolicyRequest = CreatePolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME)\n+                .policyDocument(\"{\\n\\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\\t\\\"Statement\\\": {\\n\"\n+                        + \"\\t\\t\\\"Effect\\\": \\\"Allow\\\",\\n\\t\\t\\\"Action\\\": \\\"iot:AssumeRoleWithCertificate\\\",\\n\"\n+                        + \"\\t\\t\\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\\t}\\n}\").build();\n+        iotClient.createPolicy(createPolicyRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2OTc0NQ==", "bodyText": "I believe you mean tes-role-alias-name here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431369745", "createdAt": "2020-05-27T18:54:15Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String SHOW_HELP_RESPONSE = \"\\n\" + \"DESCRIPTION\\n\"\n+            + \"\\tInstall Evergreen kernel on your device, register the device as IoT thing, create certificates and \"\n+            + \"attach role for TES to them, install the Evergreen device CLI. Please set the AWS credentials\"\n+            + \" in the environment variables\\n\\n\"\n+            + \"\\n\" + \"OPTIONS\\n\" + \"\\t--config, -i\\t\\t\\tPath to the configuration file to start Evergreen kernel with\\n\"\n+            + \"\\t--root, -r\\t\\t\\t\\tPath to the directory to use as the root for Evergreen\\n\"\n+            + \"\\t--thing-name, -tn\\t\\tDesired thing name to register the device with in AWS IoT cloud\\n\"\n+            + \"\\t--policy-name, -pn \\t\\tDesired name for IoT thing policy\\n\"\n+            + \"\\t\u2014test-role-name, -trn \\tName of the IAM role to use for TokenExchangeService for the device to talk\"\n+            + \" to AWS services, if the role\\n\"\n+            + \"\\t\\t\\t\\t\\t\\tdoes not exist then it will be created in your AWS account \\n\"\n+            + \"\\t--root, -r\\t\\t\\t\\tName of the RoleAlias to attach to the IAM role for TES in the AWS IoT cloud,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MDEzNA==", "bodyText": "typo in 'test...' -> 'tes-role-name'", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431370134", "createdAt": "2020-05-27T18:54:54Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String SHOW_HELP_RESPONSE = \"\\n\" + \"DESCRIPTION\\n\"\n+            + \"\\tInstall Evergreen kernel on your device, register the device as IoT thing, create certificates and \"\n+            + \"attach role for TES to them, install the Evergreen device CLI. Please set the AWS credentials\"\n+            + \" in the environment variables\\n\\n\"\n+            + \"\\n\" + \"OPTIONS\\n\" + \"\\t--config, -i\\t\\t\\tPath to the configuration file to start Evergreen kernel with\\n\"\n+            + \"\\t--root, -r\\t\\t\\t\\tPath to the directory to use as the root for Evergreen\\n\"\n+            + \"\\t--thing-name, -tn\\t\\tDesired thing name to register the device with in AWS IoT cloud\\n\"\n+            + \"\\t--policy-name, -pn \\t\\tDesired name for IoT thing policy\\n\"\n+            + \"\\t\u2014test-role-name, -trn \\tName of the IAM role to use for TokenExchangeService for the device to talk\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTQzMw==", "bodyText": "We should also mention that there will be no access policies attached to this role (as I understand). Makes me wonder what is the use of it then. Should we just take the role name/alias and do next steps (policy creation and attaching to cert) if it exists. If it does not exist we do not do anything", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431371433", "createdAt": "2020-05-27T18:57:13Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String SHOW_HELP_RESPONSE = \"\\n\" + \"DESCRIPTION\\n\"\n+            + \"\\tInstall Evergreen kernel on your device, register the device as IoT thing, create certificates and \"\n+            + \"attach role for TES to them, install the Evergreen device CLI. Please set the AWS credentials\"\n+            + \" in the environment variables\\n\\n\"\n+            + \"\\n\" + \"OPTIONS\\n\" + \"\\t--config, -i\\t\\t\\tPath to the configuration file to start Evergreen kernel with\\n\"\n+            + \"\\t--root, -r\\t\\t\\t\\tPath to the directory to use as the root for Evergreen\\n\"\n+            + \"\\t--thing-name, -tn\\t\\tDesired thing name to register the device with in AWS IoT cloud\\n\"\n+            + \"\\t--policy-name, -pn \\t\\tDesired name for IoT thing policy\\n\"\n+            + \"\\t\u2014test-role-name, -trn \\tName of the IAM role to use for TokenExchangeService for the device to talk\"\n+            + \" to AWS services, if the role\\n\"\n+            + \"\\t\\t\\t\\t\\t\\tdoes not exist then it will be created in your AWS account \\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b678ce051555f4b240e2fff1c57eaed3535dc8fc", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b678ce051555f4b240e2fff1c57eaed3535dc8fc", "committedDate": "2020-05-27T18:06:48Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "88bee462b0d64d1254f569ea03efdea598213664", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/88bee462b0d64d1254f569ea03efdea598213664", "committedDate": "2020-05-27T23:27:02Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88bee462b0d64d1254f569ea03efdea598213664", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/88bee462b0d64d1254f569ea03efdea598213664", "committedDate": "2020-05-27T23:27:02Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "41f290cecd534c4e6ce458b8c768061d2da63198", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/41f290cecd534c4e6ce458b8c768061d2da63198", "committedDate": "2020-05-27T23:30:46Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41f290cecd534c4e6ce458b8c768061d2da63198", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/41f290cecd534c4e6ce458b8c768061d2da63198", "committedDate": "2020-05-27T23:30:46Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "9788f3af9d52683ff96d9541b63c2f7a3286deef", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9788f3af9d52683ff96d9541b63c2f7a3286deef", "committedDate": "2020-05-27T23:32:18Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9788f3af9d52683ff96d9541b63c2f7a3286deef", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9788f3af9d52683ff96d9541b63c2f7a3286deef", "committedDate": "2020-05-27T23:32:18Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "00e2c6c784d7f45fe98002cde0240fc7c0ba3de7", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/00e2c6c784d7f45fe98002cde0240fc7c0ba3de7", "committedDate": "2020-05-28T00:09:44Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00e2c6c784d7f45fe98002cde0240fc7c0ba3de7", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/00e2c6c784d7f45fe98002cde0240fc7c0ba3de7", "committedDate": "2020-05-28T00:09:44Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "5149eb2975b587141043734de98be588b84b5a7c", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5149eb2975b587141043734de98be588b84b5a7c", "committedDate": "2020-05-28T00:14:27Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5149eb2975b587141043734de98be588b84b5a7c", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5149eb2975b587141043734de98be588b84b5a7c", "committedDate": "2020-05-28T00:14:27Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "c730fde25f60187803ab5d00c318ef53c67a3828", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c730fde25f60187803ab5d00c318ef53c67a3828", "committedDate": "2020-05-28T00:16:19Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Njk3Njc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-419697678", "createdAt": "2020-05-28T00:23:19Z", "commit": {"oid": "c730fde25f60187803ab5d00c318ef53c67a3828"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NzE0MTEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-419714113", "createdAt": "2020-05-28T01:16:41Z", "commit": {"oid": "c730fde25f60187803ab5d00c318ef53c67a3828"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMToxNjo0MVrOGbid9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMToxNjo0MVrOGbid9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUyOTQ2MQ==", "bodyText": "nit:TODO applies to next line?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r431529461", "createdAt": "2020-05-28T01:16:41Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,357 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c730fde25f60187803ab5d00c318ef53c67a3828"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c730fde25f60187803ab5d00c318ef53c67a3828", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c730fde25f60187803ab5d00c318ef53c67a3828", "committedDate": "2020-05-28T00:16:19Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "47871e1a9aa42a6262ea7a072a14038e0aa2e47f", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/47871e1a9aa42a6262ea7a072a14038e0aa2e47f", "committedDate": "2020-05-28T19:17:59Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDMzMjkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420433291", "createdAt": "2020-05-28T19:41:09Z", "commit": {"oid": "47871e1a9aa42a6262ea7a072a14038e0aa2e47f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e32035b5135589d4d24d7bf7c2181287b5d4af0", "committedDate": "2020-05-28T19:43:49Z", "message": "Adding a script for easy install"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47871e1a9aa42a6262ea7a072a14038e0aa2e47f", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/47871e1a9aa42a6262ea7a072a14038e0aa2e47f", "committedDate": "2020-05-28T19:17:59Z", "message": "Adding a script for easy install"}, "afterCommit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e32035b5135589d4d24d7bf7c2181287b5d4af0", "committedDate": "2020-05-28T19:43:49Z", "message": "Adding a script for easy install"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDc5MTY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420479166", "createdAt": "2020-05-28T20:46:57Z", "commit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo0Njo1N1rOGcGIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDo1MToxNlrOGcGQdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMzcyOQ==", "bodyText": "This test was removed on purpose and consolidated to the happy case in DeploymentE2ETest.java", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432113729", "createdAt": "2020-05-28T20:46:57Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNDcxMg==", "bodyText": "Is this used? We should remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432114712", "createdAt": "2020-05-28T20:49:03Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/IotJobsUtils.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.amazonaws.arn.Arn;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AddThingToThingGroupRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingGroupRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingGroupResponse;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingGroupRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Predicate;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+public final class IotJobsUtils {\n+    private static IotClient iotClient = IotSdkClientFactory.getIotClient(\"us-east-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExNTgzMQ==", "bodyText": "Is region going to be set here as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432115831", "createdAt": "2020-05-28T20:51:16Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,350 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+    private AWSGreengrassComponentManagement cmsClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+        this.cmsClient = AWSGreengrassComponentManagementClientBuilder.standard().withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(GREENGRASS_SERVICE_ENDPOINT, awsRegion)).build();\n+    }\n+\n+    /**\n+     * Constructor for a desired region and credentials.\n+     *\n+     * @param awsRegion           aws region\n+     * @param credentialsProvider credentials provider\n+     */\n+    public DeviceProvisioningHelper(Region awsRegion, AwsCredentialsProvider credentialsProvider) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, credentialsProvider);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+        this.cmsClient = AWSGreengrassComponentManagementClientBuilder.standard().withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(GREENGRASS_SERVICE_ENDPOINT, awsRegion.toString())).build();\n+    }\n+\n+    /**\n+     * Constructor for unit tests.\n+     *\n+     * @param iotClient prebuilt IotClient instance\n+     * @param iamClient prebuilt IamClient instance\n+     * @param cmsClient prebuilt CmsClient instance\n+     */\n+    DeviceProvisioningHelper(IotClient iotClient, IamClient iamClient,\n+                             AWSGreengrassComponentManagement cmsClient) {\n+        this.iotClient = iotClient;\n+        this.iamClient = iamClient;\n+        this.cmsClient = cmsClient;\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME_PREFIX + UUID.randomUUID().toString(),\n+                E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /*\n+     * Download root CA to a local file.\n+     */\n+    private void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing) throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0"}, "originalPosition": 238}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDg0NTUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420484553", "createdAt": "2020-05-28T20:55:01Z", "commit": {"oid": "5e32035b5135589d4d24d7bf7c2181287b5d4af0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45", "author": {"user": null}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/67ab3ea298172d998f12dffe403350e811057e45", "committedDate": "2020-05-28T21:14:45Z", "message": "Fix issues due to rebasing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTAwNDU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420500459", "createdAt": "2020-05-28T21:19:49Z", "commit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f7ae959f79fc627ddf6022a72b82ac5711129ed", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7f7ae959f79fc627ddf6022a72b82ac5711129ed", "committedDate": "2020-05-28T21:28:38Z", "message": "Merge branch 'master' into easy-setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTA3NzY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420507766", "createdAt": "2020-05-28T21:31:52Z", "commit": {"oid": "7f7ae959f79fc627ddf6022a72b82ac5711129ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4908212e9ec8a8dcb3511978e9ec3a79941cf6", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb4908212e9ec8a8dcb3511978e9ec3a79941cf6", "committedDate": "2020-05-28T21:47:59Z", "message": "Merge branch 'master' into easy-setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTA0MzE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#pullrequestreview-420504318", "createdAt": "2020-05-28T21:26:08Z", "commit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToyNjowOVrOGcHUTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowNjo1NFrOGcIaKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMzE5Ng==", "bodyText": "Sweet", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432133196", "createdAt": "2020-05-28T21:26:09Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -58,8 +54,8 @@\n     // TODO: add CMS client\n \n     protected BaseE2ETestCase() {\n-        thingInfo = Utils.createThing(iotClient);\n-        thingGroupResp = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n+        thingInfo = deviceProvisioningHelper.createThingForE2ETests();\n+        thingGroupResp = IotJobsUtils.createThingGroupAndAddThing(iotClient, thingInfo);\n         thingGroupName = thingGroupResp.thingGroupName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MTIzMA==", "bodyText": "nit: without times(1) is the same effect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432141230", "createdAt": "2020-05-28T21:43:37Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class EvergreenSetupTest {\n+    @Mock\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    @Mock\n+    private Kernel kernel;\n+\n+    @Mock\n+    private DeviceProvisioningHelper.ThingInfo thingInfo;\n+\n+    private EvergreenSetup evergreenSetup;\n+\n+    @Test\n+    void GIVEN_setup_script_WHEN_script_is_used_THEN_setup_actions_are_performed() throws Exception {\n+        when(deviceProvisioningHelper.createThing(any(), any(), any())).thenReturn(thingInfo);\n+        evergreenSetup = new EvergreenSetup(deviceProvisioningHelper,\n+                new String[]{\"--config\", \"mock_config_path\", \"--root\", \"mock_root\", \"--thing-name\", \"mock_thing_name\",\n+                        \"--policy-name\", \"mock_policy_name\", \"--tes-role-name\", \"mock_tes_role_name\",\n+                        \"--tes-role-alias-name\", \"mock_tes_role_alias_name\", \"--provision\", \"y\", \"--setup-tes\", \"y\",\n+                        \"--install-cli\", \"y\", \"--aws-region\", \"us-east-1\"});\n+        evergreenSetup.provision(kernel);\n+        verify(deviceProvisioningHelper, times(1)).createThing(any(), any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjA5Mg==", "bodyText": "I understand we don't have much time... But since we already have the tests... may be we should just verify they are called with expected arguments? At least leave a TODO...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432142092", "createdAt": "2020-05-28T21:45:41Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/EvergreenSetupTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class EvergreenSetupTest {\n+    @Mock\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    @Mock\n+    private Kernel kernel;\n+\n+    @Mock\n+    private DeviceProvisioningHelper.ThingInfo thingInfo;\n+\n+    private EvergreenSetup evergreenSetup;\n+\n+    @Test\n+    void GIVEN_setup_script_WHEN_script_is_used_THEN_setup_actions_are_performed() throws Exception {\n+        when(deviceProvisioningHelper.createThing(any(), any(), any())).thenReturn(thingInfo);\n+        evergreenSetup = new EvergreenSetup(deviceProvisioningHelper,\n+                new String[]{\"--config\", \"mock_config_path\", \"--root\", \"mock_root\", \"--thing-name\", \"mock_thing_name\",\n+                        \"--policy-name\", \"mock_policy_name\", \"--tes-role-name\", \"mock_tes_role_name\",\n+                        \"--tes-role-alias-name\", \"mock_tes_role_alias_name\", \"--provision\", \"y\", \"--setup-tes\", \"y\",\n+                        \"--install-cli\", \"y\", \"--aws-region\", \"us-east-1\"});\n+        evergreenSetup.provision(kernel);\n+        verify(deviceProvisioningHelper, times(1)).createThing(any(), any(), any());\n+        verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithIotConfiguration(any(), any(), any());\n+        verify(deviceProvisioningHelper, times(1)).setupIoTRoleForTes(any(), any(), any());\n+        verify(deviceProvisioningHelper, times(1)).updateKernelConfigWithTesRoleInfo(any(), any());\n+        verify(deviceProvisioningHelper, times(1)).setUpEmptyPackagesForFirstPartyServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MzI1OA==", "bodyText": "What are we verifying here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432143258", "createdAt": "2020-05-28T21:48:26Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelperTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.CreateRoleResponse;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleResponse;\n+import software.amazon.awssdk.services.iam.model.Role;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasResponse;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingResponse;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointResponse;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasResponse;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyResponse;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.RoleAliasDescription;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.nio.file.Path;\n+import java.util.Collections;\n+\n+import static com.aws.iot.evergreen.deployment.DeviceConfiguration.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.deployment.DeviceConfiguration.SYSTEM_NAMESPACE_KEY;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+public class DeviceProvisioningHelperTest {\n+    private static final String TEST_REGION = \"us-east-1\";\n+\n+    @TempDir\n+    Path tempRootDir;\n+    @Mock\n+    private IotClient iotClient;\n+    @Mock\n+    private IamClient iamClient;\n+    @Mock\n+    private AWSGreengrassComponentManagement cmsClient;\n+    @Mock\n+    private GetPolicyResponse getPolicyResponse;\n+    @Mock\n+    private CreateThingResponse createThingResponse;\n+    @Mock\n+    private DescribeEndpointResponse describeEndpointResponse;\n+    @Mock\n+    private DescribeRoleAliasResponse describeRoleAliasResponse;\n+    @Mock\n+    private CreateRoleAliasResponse createRoleAliasResponse;\n+    @Mock\n+    private CreateKeysAndCertificateResponse createKeysAndCertificateResponse;\n+    @Mock\n+    private GetRoleResponse getRoleResponse;\n+    @Mock\n+    private CreateRoleResponse createRoleResponse;\n+    @Mock\n+    private CreateComponentResult createComponentResult;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+\n+    @BeforeEach\n+    public void setup() {\n+        deviceProvisioningHelper = new DeviceProvisioningHelper(iotClient, iamClient, cmsClient);\n+    }\n+\n+    @Test\n+    public void GIVEN_test_create_thing_WHEN_thing_policy_exists_THEN_use_existing_thing_policy() {\n+        when(iotClient.getPolicy(any(GetPolicyRequest.class))).thenReturn(getPolicyResponse);\n+        when(iotClient.createKeysAndCertificate(any(CreateKeysAndCertificateRequest.class)))\n+                .thenReturn(createKeysAndCertificateResponse);\n+        when(iotClient.createThing(any(CreateThingRequest.class))).thenReturn(createThingResponse);\n+        when(iotClient.describeEndpoint(any(DescribeEndpointRequest.class))).thenReturn(describeEndpointResponse);\n+        deviceProvisioningHelper.createThing(iotClient, \"TestThingPolicy\", \"TestThing\");\n+        verify(iotClient, times(0)).createPolicy(any(CreatePolicyRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_create_thing_WHEN_thing_policy_doesnt_exist_THEN_create_thing_policy() {\n+        when(iotClient.getPolicy(any(GetPolicyRequest.class))).thenThrow(ResourceNotFoundException.class);\n+        when(iotClient.createKeysAndCertificate(any(CreateKeysAndCertificateRequest.class)))\n+                .thenReturn(createKeysAndCertificateResponse);\n+        when(iotClient.createThing(any(CreateThingRequest.class))).thenReturn(createThingResponse);\n+        when(iotClient.describeEndpoint(any(DescribeEndpointRequest.class))).thenReturn(describeEndpointResponse);\n+        deviceProvisioningHelper.createThing(iotClient, \"TestThingPolicy\", \"TestThing\");\n+        verify(iotClient, times(1)).createPolicy(any(CreatePolicyRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_setup_tes_role_WHEN_role_alias_exists_THEN_use_existing_role_alias() {\n+        when(iotClient.describeRoleAlias(any(DescribeRoleAliasRequest.class))).thenReturn(describeRoleAliasResponse);\n+        when(describeRoleAliasResponse.roleAliasDescription()).thenReturn(RoleAliasDescription.builder().build());\n+        deviceProvisioningHelper.setupIoTRoleForTes(\"TestRoleName\", \"TestRoleAliasName\", \"TestCertArn\");\n+        verify(iotClient, times(0)).createRoleAlias(any(CreateRoleAliasRequest.class));\n+        verify(iamClient, times(0)).getRole(any(GetRoleRequest.class));\n+        verify(iamClient, times(0)).createRole(any(CreateRoleRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_setup_tes_role_WHEN_role_alias_doesnt_exist_and_role_exists_THEN_use_existing_role() {\n+        when(iotClient.describeRoleAlias(any(DescribeRoleAliasRequest.class)))\n+                .thenThrow(ResourceNotFoundException.class);\n+        when(iamClient.getRole(any(GetRoleRequest.class))).thenReturn(getRoleResponse);\n+        when(getRoleResponse.role()).thenReturn(Role.builder().build());\n+        when(iotClient.createRoleAlias(any(CreateRoleAliasRequest.class))).thenReturn(createRoleAliasResponse);\n+        deviceProvisioningHelper.setupIoTRoleForTes(\"TestRoleName\", \"TestRoleAliasName\", \"TestCertArn\");\n+        verify(iotClient, times(1)).createRoleAlias(any(CreateRoleAliasRequest.class));\n+        verify(iamClient, times(1)).getRole(any(GetRoleRequest.class));\n+        verify(iamClient, times(0)).createRole(any(CreateRoleRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_setup_tes_role_WHEN_role_alias_doesnt_exist_and_role_doesnt_exist_THEN_create_role_and_alias() {\n+        when(iotClient.describeRoleAlias(any(DescribeRoleAliasRequest.class)))\n+                .thenThrow(ResourceNotFoundException.class);\n+        when(iamClient.getRole(any(GetRoleRequest.class))).thenThrow(ResourceNotFoundException.class);\n+        when(iamClient.createRole(any(CreateRoleRequest.class))).thenReturn(createRoleResponse);\n+        when(createRoleResponse.role()).thenReturn(Role.builder().build());\n+        when(iotClient.createRoleAlias(any(CreateRoleAliasRequest.class))).thenReturn(createRoleAliasResponse);\n+        deviceProvisioningHelper.setupIoTRoleForTes(\"TestRoleName\", \"TestRoleAliasName\", \"TestCertArn\");\n+        verify(iotClient, times(1)).createRoleAlias(any(CreateRoleAliasRequest.class));\n+        verify(iamClient, times(1)).getRole(any(GetRoleRequest.class));\n+        verify(iamClient, times(1)).createRole(any(CreateRoleRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_update_device_config_WHEN_thing_info_provided_THEN_add_config_to_config_store()\n+            throws Exception {\n+        Kernel kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n+\n+        deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel,\n+                new DeviceProvisioningHelper.ThingInfo(\"thingarn\", \"thingname\", \"certarn\", \"certid\", \"certpem\",\n+                        KeyPair.builder().privateKey(\"privateKey\").publicKey(\"publicKey\").build(), \"dataEndpoint\",\n+                        \"credEndpoint\"), TEST_REGION);\n+        assertEquals(\"thingname\", kernel.getConfig().lookup(SYSTEM_NAMESPACE_KEY, DEVICE_PARAM_THING_NAME).getOnce());\n+    }\n+\n+    @Test\n+    public void GIVEN_test_tes_role_config_WHEN_role_info_provided_THEN_add_config_to_config_store() throws Exception {\n+        Kernel kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n+\n+        deviceProvisioningHelper.updateKernelConfigWithTesRoleInfo(kernel, \"roleAliasName\");\n+        assertEquals(\"roleAliasName\",\n+                kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS, IOT_ROLE_ALIAS_TOPIC)\n+                        .getOnce());\n+    }\n+\n+    @Test\n+    public void GIVEN_test_clean_thing_WHEN_thing_info_and_cert_and_things_deleted() {\n+        deviceProvisioningHelper.cleanThing(iotClient,\n+                new DeviceProvisioningHelper.ThingInfo(\"thingarn\", \"thingname\", \"certarn\", \"certid\", \"certpem\",\n+                        KeyPair.builder().privateKey(\"privateKey\").publicKey(\"publicKey\").build(), \"dataEndpoint\",\n+                        \"credEndpoint\"));\n+        verify(iotClient, times(1)).detachThingPrincipal(any(DetachThingPrincipalRequest.class));\n+        verify(iotClient, times(1)).updateCertificate(any(UpdateCertificateRequest.class));\n+        verify(iotClient, times(1)).deleteCertificate(any(DeleteCertificateRequest.class));\n+        verify(iotClient, times(1)).deleteThing(any(DeleteThingRequest.class));\n+    }\n+\n+    @Test\n+    public void GIVEN_test_create_empty_components_WHEN_component_exists_THEN_skip_create() {\n+        when(cmsClient.createComponent(any())).thenThrow(ResourceAlreadyExistException.class);\n+        deviceProvisioningHelper.setUpEmptyPackagesForFirstPartyServices();\n+    }\n+\n+    @Test\n+    public void GIVEN_test_create_empty_components_WHEN_component_doesnt_exist_THEN_create_component() {\n+        when(cmsClient.createComponent(any())).thenReturn(createComponentResult);\n+        deviceProvisioningHelper.setUpEmptyPackagesForFirstPartyServices();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NjI4NA==", "bodyText": "I still don't like the way to have constructor for unit test - - because this means our tests are not exercising the real constructor. In fact, I think you can actually use the real constructor if you inject a CmsClientFactory and other Factories as well, just like here.\nWe can have a TODO if we don't have enough time to change it for now...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432146284", "createdAt": "2020-05-28T21:55:38Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,338 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+    private AWSGreengrassComponentManagement cmsClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+        this.cmsClient = AWSGreengrassComponentManagementClientBuilder.standard().withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(GREENGRASS_SERVICE_ENDPOINT, awsRegion)).build();\n+    }\n+\n+    /**\n+     * Constructor for unit tests.\n+     *\n+     * @param iotClient prebuilt IotClient instance\n+     * @param iamClient prebuilt IamClient instance\n+     * @param cmsClient prebuilt CmsClient instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NjgyMQ==", "bodyText": "There is no check if policy exists function?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432146821", "createdAt": "2020-05-28T21:57:04Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,338 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+    private AWSGreengrassComponentManagement cmsClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+        this.cmsClient = AWSGreengrassComponentManagementClientBuilder.standard().withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(GREENGRASS_SERVICE_ENDPOINT, awsRegion)).build();\n+    }\n+\n+    /**\n+     * Constructor for unit tests.\n+     *\n+     * @param iotClient prebuilt IotClient instance\n+     * @param iamClient prebuilt IamClient instance\n+     * @param cmsClient prebuilt CmsClient instance\n+     */\n+    DeviceProvisioningHelper(IotClient iotClient, IamClient iamClient,\n+                             AWSGreengrassComponentManagement cmsClient) {\n+        this.iotClient = iotClient;\n+        this.iamClient = iamClient;\n+        this.cmsClient = cmsClient;\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME_PREFIX + UUID.randomUUID().toString(),\n+                E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /*\n+     * Download root CA to a local file.\n+     */\n+    private void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @param awsRegion aws region\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing, String awsRegion)\n+            throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+        config.getAWSRegion().withValue(awsRegion);\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleName       rolaName\n+     * @param roleAliasName  roleAlias name\n+     * @param certificateArn certificate arn for the IoT thing\n+     */\n+    public void setupIoTRoleForTes(String roleName, String roleAliasName, String certificateArn) {\n+        String roleAliasArn;\n+        try {\n+            // Get Role Alias arn\n+            DescribeRoleAliasRequest describeRoleAliasRequest =\n+                    DescribeRoleAliasRequest.builder().roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.describeRoleAlias(describeRoleAliasRequest).roleAliasDescription().roleAliasArn();\n+        } catch (ResourceNotFoundException ranfe) {\n+            logger.atInfo().log(\"TES role alias with the provided name does not exist, creating new alias\");\n+\n+            // Get IAM role arn in order to attach an alias to it\n+            String roleArn;\n+            try {\n+                GetRoleRequest getRoleRequest = GetRoleRequest.builder().roleName(roleName).build();\n+                roleArn = iamClient.getRole(getRoleRequest).role().arn();\n+            } catch (ResourceNotFoundException rnfe) {\n+                logger.atInfo().log(\"TES role with the provided name does not exist, creating role\");\n+                CreateRoleRequest createRoleRequest = CreateRoleRequest.builder().roleName(roleName).description(\n+                        \"Role for Evergreen IoT things to interact with AWS services using token exchange service\")\n+                        .assumeRolePolicyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                                + \"  \\\"Statement\\\": [\\n    {\\n      \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                                + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n+                roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+            }\n+\n+            CreateRoleAliasRequest createRoleAliasRequest =\n+                    CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.createRoleAlias(createRoleAliasRequest).roleAliasArn();\n+        }\n+\n+        // Attach policy role alias to cert\n+        try {\n+            iotClient.getPolicy(GetPolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME).build());\n+        } catch (ResourceNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODk3NA==", "bodyText": "+1. Even for ourself it is useful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432148974", "createdAt": "2020-05-28T22:01:54Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDI3OA=="}, "originalCommit": {"oid": "301bae60624e6c06f9a2c75371b8aa197a6a824f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTI4OA==", "bodyText": "Do we need both method? Maybe just consolidate them?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432149288", "createdAt": "2020-05-28T22:02:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -0,0 +1,338 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagementClientBuilder;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CommitComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.CreateComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResourceAlreadyExistException;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.aws.iot.evergreen.util.IamSdkClientFactory;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import software.amazon.awssdk.services.iam.IamClient;\n+import software.amazon.awssdk.services.iam.model.CreateRoleRequest;\n+import software.amazon.awssdk.services.iam.model.GetRoleRequest;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeRoleAliasRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+\n+/**\n+ * Provision a device by registering as an IoT thing, creating roles and template first party components.\n+ */\n+@Getter\n+public class DeviceProvisioningHelper {\n+    private static final Logger logger = LogManager.getLogger(EvergreenSetup.class);\n+\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final String IOT_ROLE_POLICY_NAME = \"EvergreenTESCertificatePolicy\";\n+    private static final String E2E_TESTS_POLICY_NAME_PREFIX = \"E2ETestsIotPolicy\";\n+    private static final String E2E_TESTS_THING_NAME_PREFIX = \"E2ETestsIotThing\";\n+    // TODO : Remove once global components are implemented\n+    private static final String GREENGRASS_SERVICE_ENDPOINT =\n+            \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\";\n+    private static final Map<String, String> FIRST_PARTY_COMPONENT_RECIPES = Collections\n+            .singletonMap(TOKEN_EXCHANGE_SERVICE_TOPICS, \"{\\n\" + \"\\t\\\"RecipeTemplateVersion\\\": \\\"2020-01-25\\\",\\n\"\n+                    + \"\\t\\\"PackageName\\\": \\\"TokenExchangeService\\\",\\n\"\n+                    + \"\\t\\\"Description\\\": \\\"Enable Evergreen devices to interact with AWS services using certs\\\",\\n\"\n+                    + \"\\t\\\"Publisher\\\": \\\"Evergreen\\\",\\n\\t\\\"Version\\\": \\\"1.0.0\\\"\\n}\");\n+\n+    private IotClient iotClient;\n+    private IamClient iamClient;\n+    private AWSGreengrassComponentManagement cmsClient;\n+\n+    /**\n+     * Constructor for a desired region.\n+     *\n+     * @param awsRegion aws region\n+     */\n+    public DeviceProvisioningHelper(String awsRegion) {\n+        this.iotClient = IotSdkClientFactory.getIotClient(awsRegion);\n+        this.iamClient = IamSdkClientFactory.getIamClient();\n+        this.cmsClient = AWSGreengrassComponentManagementClientBuilder.standard().withEndpointConfiguration(\n+                new AwsClientBuilder.EndpointConfiguration(GREENGRASS_SERVICE_ENDPOINT, awsRegion)).build();\n+    }\n+\n+    /**\n+     * Constructor for unit tests.\n+     *\n+     * @param iotClient prebuilt IotClient instance\n+     * @param iamClient prebuilt IamClient instance\n+     * @param cmsClient prebuilt CmsClient instance\n+     */\n+    DeviceProvisioningHelper(IotClient iotClient, IamClient iamClient,\n+                             AWSGreengrassComponentManagement cmsClient) {\n+        this.iotClient = iotClient;\n+        this.iamClient = iamClient;\n+        this.cmsClient = cmsClient;\n+    }\n+\n+    /**\n+     * Create a thing with test configuration.\n+     *\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForE2ETests() {\n+        return createThing(iotClient, E2E_TESTS_POLICY_NAME_PREFIX + UUID.randomUUID().toString(),\n+                E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n+    }\n+\n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param client     iotClient to use\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThing(IotClient client, String policyName, String thingName) {\n+        // Find or create IoT policy\n+        try {\n+            client.getPolicy(GetPolicyRequest.builder().policyName(policyName).build());\n+        } catch (ResourceNotFoundException e) {\n+            client.createPolicy(CreatePolicyRequest.builder().policyName(policyName).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse =\n+                client.createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build());\n+\n+        // Attach policy to cert\n+        client.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(policyName).target(keyResponse.certificateArn()).build());\n+\n+        // Create the thing and attach the cert to it\n+        String thingArn = client.createThing(CreateThingRequest.builder().thingName(thingName).build()).thingArn();\n+        client.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build());\n+\n+        return new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(),\n+                client.describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build())\n+                        .endpointAddress(), client.describeEndpoint(\n+                DescribeEndpointRequest.builder().endpointType(\"iot:CredentialProvider\").build()).endpointAddress());\n+    }\n+\n+    /**\n+     * Clean up an existing thing from AWS account using the provided client.\n+     *\n+     * @param client iotClient to use\n+     * @param thing  thing info\n+     */\n+    public void cleanThing(IotClient client, ThingInfo thing) {\n+        client.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build());\n+        client.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build());\n+        client.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build());\n+        client.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build());\n+    }\n+\n+    /*\n+     * Download root CA to a local file.\n+     */\n+    private void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    /*\n+     * Download content from a URL to a local file.\n+     */\n+    @SuppressWarnings(\"PMD.AvoidFileStream\")\n+    private void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    /**\n+     * Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+     *\n+     * @param kernel Kernel instance\n+     * @param thing  thing info\n+     * @param awsRegion aws region\n+     * @throws IOException Exception while reading root CA from file\n+     */\n+    public void updateKernelConfigWithIotConfiguration(Kernel kernel, ThingInfo thing, String awsRegion)\n+            throws IOException {\n+        Path rootDir = kernel.getRootPath();\n+        Path caFilePath = rootDir.resolve(\"rootCA.pem\");\n+        Path privKeyFilePath = rootDir.resolve(\"privKey.key\");\n+        Path certFilePath = rootDir.resolve(\"thingCert.crt\");\n+\n+        downloadRootCAToFile(caFilePath.toFile());\n+        try (CommitableFile cf = CommitableFile.of(privKeyFilePath, true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(certFilePath, true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        DeviceConfiguration config = kernel.getContext().get(DeviceConfiguration.class);\n+        config.getThingName().withValue(thing.thingName);\n+        config.getIotDataEndpoint().withValue(thing.dataEndpoint);\n+        config.getPrivateKeyFilePath().withValue(privKeyFilePath);\n+        config.getCertificateFilePath().withValue(certFilePath);\n+        config.getRootCAFilePath().withValue(caFilePath);\n+        config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n+        config.getAWSRegion().withValue(awsRegion);\n+    }\n+\n+    /**\n+     * Create IoT role for using TES.\n+     *\n+     * @param roleName       rolaName\n+     * @param roleAliasName  roleAlias name\n+     * @param certificateArn certificate arn for the IoT thing\n+     */\n+    public void setupIoTRoleForTes(String roleName, String roleAliasName, String certificateArn) {\n+        String roleAliasArn;\n+        try {\n+            // Get Role Alias arn\n+            DescribeRoleAliasRequest describeRoleAliasRequest =\n+                    DescribeRoleAliasRequest.builder().roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.describeRoleAlias(describeRoleAliasRequest).roleAliasDescription().roleAliasArn();\n+        } catch (ResourceNotFoundException ranfe) {\n+            logger.atInfo().log(\"TES role alias with the provided name does not exist, creating new alias\");\n+\n+            // Get IAM role arn in order to attach an alias to it\n+            String roleArn;\n+            try {\n+                GetRoleRequest getRoleRequest = GetRoleRequest.builder().roleName(roleName).build();\n+                roleArn = iamClient.getRole(getRoleRequest).role().arn();\n+            } catch (ResourceNotFoundException rnfe) {\n+                logger.atInfo().log(\"TES role with the provided name does not exist, creating role\");\n+                CreateRoleRequest createRoleRequest = CreateRoleRequest.builder().roleName(roleName).description(\n+                        \"Role for Evergreen IoT things to interact with AWS services using token exchange service\")\n+                        .assumeRolePolicyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n\"\n+                                + \"  \\\"Statement\\\": [\\n    {\\n      \\\"Effect\\\": \\\"Allow\\\",\\n\"\n+                                + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n+                                + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n+                roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+            }\n+\n+            CreateRoleAliasRequest createRoleAliasRequest =\n+                    CreateRoleAliasRequest.builder().roleArn(roleArn).roleAlias(roleAliasName).build();\n+            roleAliasArn = iotClient.createRoleAlias(createRoleAliasRequest).roleAliasArn();\n+        }\n+\n+        // Attach policy role alias to cert\n+        try {\n+            iotClient.getPolicy(GetPolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME).build());\n+        } catch (ResourceNotFoundException e) {\n+            logger.atInfo().log(\"IoT role policy with the provided name does not exist, creating policy\");\n+            CreatePolicyRequest createPolicyRequest = CreatePolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME)\n+                    .policyDocument(\"{\\n\\t\\\"Version\\\": \\\"2012-10-17\\\",\\n\\t\\\"Statement\\\": {\\n\"\n+                            + \"\\t\\t\\\"Effect\\\": \\\"Allow\\\",\\n\\t\\t\\\"Action\\\": \\\"iot:AssumeRoleWithCertificate\\\",\\n\"\n+                            + \"\\t\\t\\\"Resource\\\": \\\"\" + roleAliasArn + \"\\\"\\n\\t}\\n}\").build();\n+            iotClient.createPolicy(createPolicyRequest);\n+        }\n+\n+        AttachPolicyRequest attachPolicyRequest =\n+                AttachPolicyRequest.builder().policyName(IOT_ROLE_POLICY_NAME).target(certificateArn)\n+                        .build();\n+        iotClient.attachPolicy(attachPolicyRequest);\n+    }\n+\n+    /**\n+     * Update the kernel config with TES role alias.\n+     *\n+     * @param kernel        Kernel instance\n+     * @param roleAliasName name of the role alias\n+     */\n+    public void updateKernelConfigWithTesRoleInfo(Kernel kernel, String roleAliasName) {\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        tesTopics.createLeafChild(IOT_ROLE_ALIAS_TOPIC).withValue(roleAliasName);\n+    }\n+\n+    // TODO : Remove once global packages are supported\n+\n+    /**\n+     * Create empty packages in customer's account for first party services.\n+     */\n+    public void setUpEmptyPackagesForFirstPartyServices() {\n+        createEmptyComponent(cmsClient, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+    }\n+\n+    // TODO : Remove once global packages are supported\n+\n+    /*\n+     * Create and commit an empty component.\n+     */\n+    private void createEmptyComponent(AWSGreengrassComponentManagement cmsClient, String componentName) {\n+        ByteBuffer recipe =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTA4MA==", "bodyText": "Thanks for doing all of this... Seems we probably want to leverage picocli lib, which we are using for local CLI, to dramatically simplify this in next revision.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/250#discussion_r432151080", "createdAt": "2020-05-28T22:06:54Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/EvergreenSetup.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.aws.iot.evergreen.easysetup;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+\n+/**\n+ * Easy setup for getting started with Evergreen kernel on a device.\n+ */\n+public class EvergreenSetup {\n+    private static final String SHOW_HELP_RESPONSE = \"\\n\" + \"DESCRIPTION\\n\"\n+            + \"\\tInstall Evergreen kernel on your device, register the device as IoT thing, create certificates and \"\n+            + \"attach role for TES to them, install the Evergreen device CLI. Please set the AWS credentials\"\n+            + \" in the environment variables\\n\\n\"\n+            + \"\\n\" + \"OPTIONS\\n\" + \"\\t--config, -i\\t\\t\\tPath to the configuration file to start Evergreen kernel with\\n\"\n+            + \"\\t--root, -r\\t\\t\\t\\tPath to the directory to use as the root for Evergreen\\n\"\n+            + \"\\t--thing-name, -tn\\t\\tDesired thing name to register the device with in AWS IoT cloud\\n\"\n+            + \"\\t--policy-name, -pn \\t\\tDesired name for IoT thing policy\\n\"\n+            + \"\\t\u2014tes-role-name, -trn \\tName of the IAM role to use for TokenExchangeService for the device to talk\"\n+            + \" to AWS services, if the role\\n\"\n+            + \"\\t\\t\\t\\t\\t\\tdoes not exist then it will be created in your AWS account \\n\"\n+            + \"\\t--tes-role-alias-name, -r\\t\\t\\t\\tName of the RoleAlias to attach to the IAM role for TES in the AWS \"\n+            + \"IoT cloud,\"\n+            + \" if the role alias does not exist \\t\\t\\t\\t\\t\\tthen it will be created in your AWS account\\n\"\n+            + \"\\t--provision, -p \\t\\t\\tY/N Indicate if you want to register the device as an AWS IoT thing\\n\"\n+            + \"\\t--aws-region, -ar\\t\\tAWS region where the resources should be looked for/created\\n\"\n+            + \"\\t--setup-tes, -t \\t\\t\\tY/N Indicate if you want to use Token Exchange Service to talk to\"\n+            + \"AWS services using the device certificate\\n\"\n+            + \"\\t--install-cli, -ic \\t\\t\\tY/N Indicate if you want to install Evergreen device CLI\";\n+    private static final String HELP_ARG = \"--help\";\n+    private static final String HELP_ARG_SHORT = \"-h\";\n+\n+    private static final String KERNEL_CONFIG_ARG = \"--config\";\n+    private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";\n+    private static final String KERNEL_ROOT_ARG = \"--root\";\n+    private static final String KERNEL_ROOT_ARG_SHORT = \"-r\";\n+\n+    private static final String THING_NAME_ARG = \"--thing-name\";\n+    private static final String THING_NAME_ARG_SHORT = \"-tn\";\n+    private static final String THING_NAME_DEFAULT = \"MyIotThing\";\n+\n+    private static final String POLICY_NAME_ARG = \"--policy-name\";\n+    private static final String POLICY_NAME_ARG_SHORT = \"-pn\";\n+    private static final String POLICY_NAME_DEFAULT = \"MyIotThingPolicy\";\n+\n+    // TODO : Customers don't understand TES, when we decide the name for TES to expose\n+    //  to customers in the context of Evergreen, rename TES related things here and change description", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ab3ea298172d998f12dffe403350e811057e45"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2217, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}