{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDY3Nzky", "number": 629, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzozNDoyMFrOE17tAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTowMzo1NFrOE18j4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg4MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/DebugLoggingOperationHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzozNDoyMFrOHue_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNDo0NzoyOFrOHugBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDM5MQ==", "bodyText": "use SLF4J?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518504391", "createdAt": "2020-11-06T03:34:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/DebugLoggingOperationHandler.java", "diffHunk": "@@ -6,18 +6,17 @@\n package software.amazon.awssdk.eventstreamrpc;\n \n import com.google.gson.Gson;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import software.amazon.awssdk.eventstreamrpc.model.EventStreamJsonMessage;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.logging.Logger;\n \n /**\n  * Useful to set as a handler for an operation with no implementation yet.\n  */\n public class DebugLoggingOperationHandler extends OperationContinuationHandler\n         <EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DebugLoggingOperationHandler.class);\n+    private static final Logger LOGGER = Logger.getLogger(DebugLoggingOperationHandler.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDg5MA==", "bodyText": "and if there is a reason to  not use SLF4J, it should be commented here. I saw some reference to logging in the SDK conversations yesterday..but I haven't followed up on the whole thread", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518504890", "createdAt": "2020-11-06T03:36:29Z", "author": {"login": "rbattle"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/DebugLoggingOperationHandler.java", "diffHunk": "@@ -6,18 +6,17 @@\n package software.amazon.awssdk.eventstreamrpc;\n \n import com.google.gson.Gson;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import software.amazon.awssdk.eventstreamrpc.model.EventStreamJsonMessage;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.logging.Logger;\n \n /**\n  * Useful to set as a handler for an operation with no implementation yet.\n  */\n public class DebugLoggingOperationHandler extends OperationContinuationHandler\n         <EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DebugLoggingOperationHandler.class);\n+    private static final Logger LOGGER = Logger.getLogger(DebugLoggingOperationHandler.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDM5MQ=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMTE2MA==", "bodyText": "We are not making that change in SDK code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518521160", "createdAt": "2020-11-06T04:47:28Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/DebugLoggingOperationHandler.java", "diffHunk": "@@ -6,18 +6,17 @@\n package software.amazon.awssdk.eventstreamrpc;\n \n import com.google.gson.Gson;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import software.amazon.awssdk.eventstreamrpc.model.EventStreamJsonMessage;\n \n import java.nio.charset.StandardCharsets;\n+import java.util.logging.Logger;\n \n /**\n  * Useful to set as a handler for an operation with no implementation yet.\n  */\n public class DebugLoggingOperationHandler extends OperationContinuationHandler\n         <EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage, EventStreamJsonMessage> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(DebugLoggingOperationHandler.class);\n+    private static final Logger LOGGER = Logger.getLogger(DebugLoggingOperationHandler.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDM5MQ=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg4MTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzozNDozMFrOHue_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNDo0OToxNVrOHugC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDQzNA==", "bodyText": "use SLF4J?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518504434", "createdAt": "2020-11-06T03:34:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "diffHunk": "@@ -18,13 +23,8 @@\n import software.amazon.awssdk.crt.io.SocketOptions;\n import software.amazon.awssdk.crt.io.TlsContextOptions;\n \n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.stream.Collectors;\n-\n public class IpcServer implements AutoCloseable {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IpcServer.class);\n+    private static final Logger LOGGER = Logger.getLogger(IpcServer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMTEzNw==", "bodyText": "We are not making that change in SDK code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518521137", "createdAt": "2020-11-06T04:47:18Z", "author": {"login": "abanthiy"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "diffHunk": "@@ -18,13 +23,8 @@\n import software.amazon.awssdk.crt.io.SocketOptions;\n import software.amazon.awssdk.crt.io.TlsContextOptions;\n \n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.stream.Collectors;\n-\n public class IpcServer implements AutoCloseable {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IpcServer.class);\n+    private static final Logger LOGGER = Logger.getLogger(IpcServer.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDQzNA=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMTU5OQ==", "bodyText": "This was switched to slf to avoid the logger deadlock. Why not switch it back to slf?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518521599", "createdAt": "2020-11-06T04:49:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "diffHunk": "@@ -18,13 +23,8 @@\n import software.amazon.awssdk.crt.io.SocketOptions;\n import software.amazon.awssdk.crt.io.TlsContextOptions;\n \n-import java.util.Set;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.stream.Collectors;\n-\n public class IpcServer implements AutoCloseable {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(IpcServer.class);\n+    private static final Logger LOGGER = Logger.getLogger(IpcServer.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDQzNA=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg4MjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzozNDo1N1rOHufAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzozNDo1N1rOHufAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNDUzNQ==", "bodyText": "remove system out", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518504535", "createdAt": "2020-11-06T03:34:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "diffHunk": "@@ -58,6 +58,7 @@ public void runServer() {\n         }\n         serverBootstrap = new ServerBootstrap(eventLoopGroup);\n         tlsContext = tlsContextOptions != null ? new ServerTlsContext(tlsContextOptions) : null;\n+        System.out.println(\"Hostname: \" + hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg5MjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzo0MTowNFrOHufFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzo0MTowNFrOHufFwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNTkyMg==", "bodyText": "A better log might be: \"Error while waiting for IPC shutdown to finish\"\nThere's no reason to introduce \"ELG\" here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518505922", "createdAt": "2020-11-06T03:41:04Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(10, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+                logger.atError().setCause(e).log(\"Error stopping IPC server\");\n+            }\n         }\n         if (eventLoopGroup != null) {\n             eventLoopGroup.close();\n-            // GG_NEEDS_REVIEW: TODO: Wait for ELG to close. Right now the future does not complete, thus timing out.\n+            try {\n+                eventLoopGroup.getShutdownCompleteFuture().get(10, TimeUnit.SECONDS);\n+            } catch (Exception e) {\n+                logger.atError().setCause(e).log(\"Error waiting for ELG to close\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTg5NDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwMzo0Mjo0OFrOHufHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTowNzo1MFrOHugUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNjI5NA==", "bodyText": "where does 10s come from?\nIs this going to be a problem on slow devices?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518506294", "createdAt": "2020-11-06T03:42:48Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyMTUyNw==", "bodyText": "I thought 10 will be generous for devices. What do you think is a good value?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518521527", "createdAt": "2020-11-06T04:48:57Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNjI5NA=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNjA1MQ==", "bodyText": "I don't know :-) 10s seems like a long time - how long does it normally take?\nIs it something that needs to be adjustable?\nWe've had issues in v1 of timeouts that have seemed \"reasonable\" that were too small on slow single core devices.\nWhat happens after the 10s is done if the server isn't stopped?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518526051", "createdAt": "2020-11-06T05:07:50Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwNjI5NA=="}, "originalCommit": {"oid": "c626c73d6d8b742d0ad3a16d2ae3037318fd9a80"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDAyMjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNTowMzo1NFrOHugQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNToyMDo0NlrOHugghA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTEwMQ==", "bodyText": "close() is called when greengrass is shutting down, waiting 2 minutes is unreasonable IMO", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518525101", "createdAt": "2020-11-06T05:03:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6ca7f689ff615c6f99cfb12d5e52658aaa43d6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTE2Nw==", "bodyText": "The server should be able to shutdown basically immediately.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518525167", "createdAt": "2020-11-06T05:04:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTEwMQ=="}, "originalCommit": {"oid": "c6ca7f689ff615c6f99cfb12d5e52658aaa43d6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNzYzOQ==", "bodyText": "I am getting a timeout with 10 seconds. I need to verify that a value works. Can find a sweet spot later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518527639", "createdAt": "2020-11-06T05:14:31Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTEwMQ=="}, "originalCommit": {"oid": "c6ca7f689ff615c6f99cfb12d5e52658aaa43d6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyODEzMw==", "bodyText": "E2E test has been running 20 minutes now. It normally completes in 12. So I don't think it is closing in less than 2 minutes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518528133", "createdAt": "2020-11-06T05:16:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTEwMQ=="}, "originalCommit": {"oid": "c6ca7f689ff615c6f99cfb12d5e52658aaa43d6d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyOTE1Ng==", "bodyText": "yes its not. I probably need to remove this change and unblock builds. I will add the wait later", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/629#discussion_r518529156", "createdAt": "2020-11-06T05:20:46Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -225,15 +226,22 @@ private AuthenticationData ipcAuthenticationHandler(byte[] payload) {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidCatchingGenericException\"})\n     public void close() {\n-        // GG_NEEDS_REVIEW: TODO: Future does not complete, wait on them when fixed.\n         if (ipcServer != null) {\n-            ipcServer.stopServer();\n+            try {\n+                ipcServer.stopServer().get(2, TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNTEwMQ=="}, "originalCommit": {"oid": "c6ca7f689ff615c6f99cfb12d5e52658aaa43d6d"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 492, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}