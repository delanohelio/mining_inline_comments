{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMzkwMTYw", "number": 425, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowMzo1N1rOEiNhkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowMzo1N1rOEiNhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzA4NjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowMzo1N1rOHP9ibA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzowNTowM1rOHP9lDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5ODkyNA==", "bodyText": "Nit: is there a better way of doing this instead of having to list them all out here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/425#discussion_r486498924", "createdAt": "2020-09-10T17:03:57Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -48,6 +58,11 @@\n     private final Kernel kernel;\n     private final KernelCommandLine kernelCommandLine;\n     private final Map<String, Class<?>> serviceImplementors = new HashMap<>();\n+    // setter for unit testing\n+    @Setter(AccessLevel.PACKAGE)\n+    private List<Class<? extends Startable>> startables = Arrays.asList(IPCService.class, AuthorizationService.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a43e6d85f59aec4d8c3d13047fd2e202e618e5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5OTU5Ng==", "bodyText": "Not really. Any classpath scanning that we do actually needs to be removed and hardcoded like this to support android and QNX", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/425#discussion_r486499596", "createdAt": "2020-09-10T17:05:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -48,6 +58,11 @@\n     private final Kernel kernel;\n     private final KernelCommandLine kernelCommandLine;\n     private final Map<String, Class<?>> serviceImplementors = new HashMap<>();\n+    // setter for unit testing\n+    @Setter(AccessLevel.PACKAGE)\n+    private List<Class<? extends Startable>> startables = Arrays.asList(IPCService.class, AuthorizationService.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ5ODkyNA=="}, "originalCommit": {"oid": "70a43e6d85f59aec4d8c3d13047fd2e202e618e5"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 776, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}