{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODkwNTY1", "number": 288, "title": "Use x509CredentialsProvider to fetch credentials", "bodyText": "Issue #, if available:\nDescription of changes:\nImplements x509CredentialsProvider to fetch credentials\nWhy is this change necessary:\nHow was this change tested:\nCeredentialRequestHandler tests updated\nAny additional information or context required to review the change:\nNeed to update getCredentialsExpiration() method after device sdk api implements getting expiration for credentials, currently hardcoded with a date\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-06-24T00:23:25Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288", "merged": true, "mergeCommit": {"oid": "10077b22440337a99a3f08157ff4b49faed7dea5"}, "closed": true, "closedAt": "2020-06-30T00:51:04Z", "author": {"login": "youtuyy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuOPTVgH2gAyNDM4ODkwNTY1OmYxMjEzMmVjYjg4ZDM1MDhiMWQ4NmJhMzA4N2IzYzEzMjQ0MjNkNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwJqNnAFqTQzOTU2OTE3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f12132ecb88d3508b1d86ba3087b3c1324423d47", "committedDate": "2020-06-23T23:41:59Z", "message": "Use x509CredentialsProvider to fetch credentials"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MjY0MDM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436264038", "createdAt": "2020-06-24T01:28:49Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMToyODo1MFrOGn_3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMToyODo1MFrOGn_3mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NDA3NQ==", "bodyText": "Instead of passing a wrong date, can we just skip sending expiration at all?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r444594075", "createdAt": "2020-06-24T01:28:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialsProviderBuilder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import software.amazon.awssdk.crt.auth.credentials.Credentials;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider.X509CredentialsProviderBuilder;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.ClientTlsContext;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.util.Date;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import javax.inject.Inject;\n+\n+public class CredentialsProviderBuilder {\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    private X509CredentialsProviderBuilder x509builder;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    @Inject\n+    CredentialsProviderBuilder(final DeviceConfiguration deviceConfiguration) throws DeviceConfigurationException {\n+        this.x509builder = initCredentialsProviderBuilder(deviceConfiguration);\n+    }\n+\n+    private X509CredentialsProviderBuilder initCredentialsProviderBuilder(DeviceConfiguration deviceConfiguration)\n+            throws DeviceConfigurationException {\n+        final String certPath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        final String keyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        final String caPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        final String thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        final String credEndpoint = Coerce.toString(deviceConfiguration.getIotCredentialEndpoint());\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);\n+            HostResolver resolver = new HostResolver(eventLoopGroup);\n+            ClientBootstrap clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n+            TlsContextOptions tlsCtxOptions = TlsContextOptions.createWithMtlsFromPath(certPath, keyPath)) {\n+            // TODO: Proxy support\n+            tlsCtxOptions.overrideDefaultTrustStoreFromPath(null, caPath);\n+            try (ClientTlsContext tlsContext = new ClientTlsContext(tlsCtxOptions)) {\n+                x509builder = new X509CredentialsProvider.X509CredentialsProviderBuilder()\n+                        .withClientBootstrap(clientBootstrap)\n+                        .withTlsContext(tlsContext)\n+                        .withEndpoint(credEndpoint)\n+                        .withThingName(thingName);\n+                return x509builder;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sets the role alias to fetch credentials through.\n+     * @param roleAlias name of the role alias to use\n+     */\n+    public void withRoleAlias(String roleAlias) {\n+        x509builder.withRoleAlias(roleAlias);\n+    }\n+\n+    /**\n+     * To fetch credential.\n+     * @return AWS IoT credential\n+     * @throws AWSIotException when fetching credentials fails\n+     */\n+    public Credentials getCredentials() throws AWSIotException {\n+        Credentials credentials;\n+        try (X509CredentialsProvider provider = x509builder.build()) {\n+            CompletableFuture<Credentials> future = provider.getCredentials();\n+            credentials = future.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            LOGGER.error(\"Getting AWS IOT credentials failed with error {} \", e);\n+            throw new AWSIotException(e);\n+        }\n+        return credentials;\n+    }\n+\n+    /**\n+     * To fetch expiry.\n+     * @return Expiration date of the credential\n+     * @throws AWSIotException when fetching expiration fails\n+     */\n+    public Date getCredentialsExpiration() throws AWSIotException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODYzMDU4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436863058", "createdAt": "2020-06-24T17:34:34Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNDozNFrOGocRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNDozNFrOGocRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1OTM0MQ==", "bodyText": "this also needs to be reconfigurable if the device configuration changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r445059341", "createdAt": "2020-06-24T17:34:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialsProviderBuilder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import software.amazon.awssdk.crt.auth.credentials.Credentials;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider.X509CredentialsProviderBuilder;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.ClientTlsContext;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.util.Date;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import javax.inject.Inject;\n+\n+public class CredentialsProviderBuilder {\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    private X509CredentialsProviderBuilder x509builder;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    @Inject\n+    CredentialsProviderBuilder(final DeviceConfiguration deviceConfiguration) throws DeviceConfigurationException {\n+        this.x509builder = initCredentialsProviderBuilder(deviceConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODYzNzAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436863703", "createdAt": "2020-06-24T17:35:28Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNToyOFrOGocS_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzozNToyOFrOGocS_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1OTgzOA==", "bodyText": "Please change the DEFAULT_PORT above to be 0 so that it randomly chooses a port. This will allow us to run more than 1 evergreen on a device.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r445059838", "createdAt": "2020-06-24T17:35:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -27,16 +27,16 @@\n     private String iotRoleAlias;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTkxMzE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436991319", "createdAt": "2020-06-24T20:42:07Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0MjowN1rOGoiYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0MjowN1rOGoiYVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE1OTUwOQ==", "bodyText": "Nit: Lets just strip DOWNSTREAM from variables now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r445159509", "createdAt": "2020-06-24T20:42:07Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -6,50 +6,42 @@\n import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.sun.net.httpserver.HttpExchange;\n import com.sun.net.httpserver.HttpHandler;\n+import software.amazon.awssdk.crt.auth.credentials.Credentials;\n \n import java.io.IOException;\n import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n import java.util.HashMap;\n+import java.util.Locale;\n import java.util.Map;\n \n public class CredentialRequestHandler implements HttpHandler {\n     private static final Logger LOGGER = LogManager.getLogger(CredentialRequestHandler.class);\n     public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n-    private static final String CREDENTIALS_UPSTREAM_STR = \"credentials\";\n-    private static final String ACCESS_KEY_UPSTREAM_STR = \"accessKeyId\";\n     private static final String ACCESS_KEY_DOWNSTREAM_STR = \"AccessKeyId\";\n-    private static final String SECRET_ACCESS_UPSTREAM_STR = \"secretAccessKey\";\n     private static final String SECRET_ACCESS_DOWNSTREAM_STR = \"SecretAccessKey\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTkyNjk3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436992697", "createdAt": "2020-06-24T20:44:20Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NDoyMFrOGoidDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NDoyMFrOGoidDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MDcxNw==", "bodyText": "You need to update the logger class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r445160717", "createdAt": "2020-06-24T20:44:20Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialsProviderBuilder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import software.amazon.awssdk.crt.auth.credentials.Credentials;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider.X509CredentialsProviderBuilder;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.ClientTlsContext;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.util.Date;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import javax.inject.Inject;\n+\n+public class CredentialsProviderBuilder {\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTkzNDEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-436993410", "createdAt": "2020-06-24T20:45:28Z", "commit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NToyOVrOGoifZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDo0NToyOVrOGoifZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE2MTMxOA==", "bodyText": "Do you also need to validate if credentials is not null before returning?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#discussion_r445161318", "createdAt": "2020-06-24T20:45:29Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialsProviderBuilder.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.DeviceConfiguration;\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import software.amazon.awssdk.crt.auth.credentials.Credentials;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider;\n+import software.amazon.awssdk.crt.auth.credentials.X509CredentialsProvider.X509CredentialsProviderBuilder;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.ClientTlsContext;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.util.Date;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import javax.inject.Inject;\n+\n+public class CredentialsProviderBuilder {\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    private X509CredentialsProviderBuilder x509builder;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param deviceConfiguration Device configuration helper getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    @Inject\n+    CredentialsProviderBuilder(final DeviceConfiguration deviceConfiguration) throws DeviceConfigurationException {\n+        this.x509builder = initCredentialsProviderBuilder(deviceConfiguration);\n+    }\n+\n+    private X509CredentialsProviderBuilder initCredentialsProviderBuilder(DeviceConfiguration deviceConfiguration)\n+            throws DeviceConfigurationException {\n+        final String certPath = Coerce.toString(deviceConfiguration.getCertificateFilePath());\n+        final String keyPath = Coerce.toString(deviceConfiguration.getPrivateKeyFilePath());\n+        final String caPath = Coerce.toString(deviceConfiguration.getRootCAFilePath());\n+        final String thingName = Coerce.toString(deviceConfiguration.getThingName());\n+        final String credEndpoint = Coerce.toString(deviceConfiguration.getIotCredentialEndpoint());\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);\n+            HostResolver resolver = new HostResolver(eventLoopGroup);\n+            ClientBootstrap clientBootstrap = new ClientBootstrap(eventLoopGroup, resolver);\n+            TlsContextOptions tlsCtxOptions = TlsContextOptions.createWithMtlsFromPath(certPath, keyPath)) {\n+            // TODO: Proxy support\n+            tlsCtxOptions.overrideDefaultTrustStoreFromPath(null, caPath);\n+            try (ClientTlsContext tlsContext = new ClientTlsContext(tlsCtxOptions)) {\n+                x509builder = new X509CredentialsProvider.X509CredentialsProviderBuilder()\n+                        .withClientBootstrap(clientBootstrap)\n+                        .withTlsContext(tlsContext)\n+                        .withEndpoint(credEndpoint)\n+                        .withThingName(thingName);\n+                return x509builder;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Sets the role alias to fetch credentials through.\n+     * @param roleAlias name of the role alias to use\n+     */\n+    public void withRoleAlias(String roleAlias) {\n+        x509builder.withRoleAlias(roleAlias);\n+    }\n+\n+    /**\n+     * To fetch credential.\n+     * @return AWS IoT credential\n+     * @throws AWSIotException when fetching credentials fails\n+     */\n+    public Credentials getCredentials() throws AWSIotException {\n+        Credentials credentials;\n+        try (X509CredentialsProvider provider = x509builder.build()) {\n+            CompletableFuture<Credentials> future = provider.getCredentials();\n+            credentials = future.get();\n+        } catch (InterruptedException | ExecutionException e) {\n+            LOGGER.error(\"Getting AWS IOT credentials failed with error {} \", e);\n+            throw new AWSIotException(e);\n+        }\n+        return credentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12132ecb88d3508b1d86ba3087b3c1324423d47"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0740f298896d023407c1e6238d70d8b9c54f74d0", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0740f298896d023407c1e6238d70d8b9c54f74d0", "committedDate": "2020-06-25T17:05:25Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzAzMDk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-437703094", "createdAt": "2020-06-25T17:21:19Z", "commit": {"oid": "0740f298896d023407c1e6238d70d8b9c54f74d0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzM2Nzcx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-437736771", "createdAt": "2020-06-25T18:06:20Z", "commit": {"oid": "0740f298896d023407c1e6238d70d8b9c54f74d0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "533f0d28d02e47e6b38621dc51602f97017cf9ee", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/533f0d28d02e47e6b38621dc51602f97017cf9ee", "committedDate": "2020-06-28T22:05:17Z", "message": "Add unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzU2MzE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-439356318", "createdAt": "2020-06-29T17:29:58Z", "commit": {"oid": "533f0d28d02e47e6b38621dc51602f97017cf9ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19014fe73ade432b9885dc3b8ccfcd94b0e84e4b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/19014fe73ade432b9885dc3b8ccfcd94b0e84e4b", "committedDate": "2020-06-29T17:30:08Z", "message": "Merge branch 'master' into tes-credsprovider"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTY5MTc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/288#pullrequestreview-439569175", "createdAt": "2020-06-29T23:29:42Z", "commit": {"oid": "19014fe73ade432b9885dc3b8ccfcd94b0e84e4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2833, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}