{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzk2MzA5", "number": 344, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyMToyN1rOEUtfpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyODoyN1rOEUtomg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTUyMzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyMToyN1rOG7EDEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0MjozNlrOG7Eqpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTQ4OA==", "bodyText": "Can we have these in postInject?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464585488", "createdAt": "2020-08-03T18:21:27Z", "author": {"login": "youtuyy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -55,15 +55,16 @@ public TokenExchangeService(Topics topics,\n                                 CredentialRequestHandler credentialRequestHandler,\n                                 AuthorizationHandler authZHandler) {\n         super(topics);\n-        // TODO: Add support for other params like role Aliases\n         topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n                 .dflt(DEFAULT_PORT)\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n         topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTk0Mg==", "bodyText": "I think it could be, but why move it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464585942", "createdAt": "2020-08-03T18:22:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -55,15 +55,16 @@ public TokenExchangeService(Topics topics,\n                                 CredentialRequestHandler credentialRequestHandler,\n                                 AuthorizationHandler authZHandler) {\n         super(topics);\n-        // TODO: Add support for other params like role Aliases\n         topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n                 .dflt(DEFAULT_PORT)\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n         topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTQ4OA=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTQ0Nw==", "bodyText": "It doesn't seem make a difference. Actually I was thinking we might want validateConfig() here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464591447", "createdAt": "2020-08-03T18:33:46Z", "author": {"login": "youtuyy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -55,15 +55,16 @@ public TokenExchangeService(Topics topics,\n                                 CredentialRequestHandler credentialRequestHandler,\n                                 AuthorizationHandler authZHandler) {\n         super(topics);\n-        // TODO: Add support for other params like role Aliases\n         topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n                 .dflt(DEFAULT_PORT)\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n         topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTQ4OA=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MzE2Mw==", "bodyText": "We can't validate in the constructor because that may cause the construction to fail which we really don't want. It will still validate when TES is actually started.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464593163", "createdAt": "2020-08-03T18:37:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -55,15 +55,16 @@ public TokenExchangeService(Topics topics,\n                                 CredentialRequestHandler credentialRequestHandler,\n                                 AuthorizationHandler authZHandler) {\n         super(topics);\n-        // TODO: Add support for other params like role Aliases\n         topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n                 .dflt(DEFAULT_PORT)\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n         topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTQ4OA=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NTYyMw==", "bodyText": "ok i see", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464595623", "createdAt": "2020-08-03T18:42:36Z", "author": {"login": "youtuyy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -55,15 +55,16 @@ public TokenExchangeService(Topics topics,\n                                 CredentialRequestHandler credentialRequestHandler,\n                                 AuthorizationHandler authZHandler) {\n         super(topics);\n-        // TODO: Add support for other params like role Aliases\n         topics.lookup(PARAMETERS_CONFIG_KEY, PORT_TOPIC)\n                 .dflt(DEFAULT_PORT)\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n         topics.lookup(PARAMETERS_CONFIG_KEY, IOT_ROLE_ALIAS_TOPIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NTQ4OA=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTUzMDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyMzozOFrOG7EHHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMDoxOVrOG7EUIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NjUyNg==", "bodyText": "Who is calling this method? Why do we need to implement com.amazonaws.auth.AWSCredentialsProvider?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464586526", "createdAt": "2020-08-03T18:23:38Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.aws.iot.evergreen.dependency.Context;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+\n+import javax.inject.Inject;\n+\n+public class LazyCredentialProvider implements AWSCredentialsProvider, AwsCredentialsProvider {\n+\n+    private final Context context;\n+\n+    @Inject\n+    public LazyCredentialProvider(Context context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return context.get(TokenExchangeService.class).resolveCredentials();\n+    }\n+\n+    @Override\n+    public AWSCredentials getCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4OTg1OQ==", "bodyText": "The SDK calls it. We implement the interface so that the SDK can get credentials using TES", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464589859", "createdAt": "2020-08-03T18:30:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.aws.iot.evergreen.dependency.Context;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+\n+import javax.inject.Inject;\n+\n+public class LazyCredentialProvider implements AWSCredentialsProvider, AwsCredentialsProvider {\n+\n+    private final Context context;\n+\n+    @Inject\n+    public LazyCredentialProvider(Context context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return context.get(TokenExchangeService.class).resolveCredentials();\n+    }\n+\n+    @Override\n+    public AWSCredentials getCredentials() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NjUyNg=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTUzNzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyNTozN1rOG7ELMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMDo1NlrOG7EVSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NzU3MA==", "bodyText": "not implemented? Should it throw an exception if it's not intended to be called.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464587570", "createdAt": "2020-08-03T18:25:37Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.aws.iot.evergreen.dependency.Context;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+\n+import javax.inject.Inject;\n+\n+public class LazyCredentialProvider implements AWSCredentialsProvider, AwsCredentialsProvider {\n+\n+    private final Context context;\n+\n+    @Inject\n+    public LazyCredentialProvider(Context context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return context.get(TokenExchangeService.class).resolveCredentials();\n+    }\n+\n+    @Override\n+    public AWSCredentials getCredentials() {\n+        AwsSessionCredentials credentials = (AwsSessionCredentials) resolveCredentials();\n+        return new BasicSessionCredentials(credentials.accessKeyId(), credentials.secretAccessKey(),\n+                credentials.sessionToken());\n+    }\n+\n+    @Override\n+    public void refresh() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDE1Mg==", "bodyText": "The SDK might call it, so I don't want to throw. But it doesn't need to be called; there's no need to force any refreshes, so I don't think it needs an implementation.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464590152", "createdAt": "2020-08-03T18:30:56Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/LazyCredentialProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicSessionCredentials;\n+import com.aws.iot.evergreen.dependency.Context;\n+import software.amazon.awssdk.auth.credentials.AwsCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.auth.credentials.AwsSessionCredentials;\n+\n+import javax.inject.Inject;\n+\n+public class LazyCredentialProvider implements AWSCredentialsProvider, AwsCredentialsProvider {\n+\n+    private final Context context;\n+\n+    @Inject\n+    public LazyCredentialProvider(Context context) {\n+        this.context = context;\n+    }\n+\n+    @Override\n+    public AwsCredentials resolveCredentials() {\n+        return context.get(TokenExchangeService.class).resolveCredentials();\n+    }\n+\n+    @Override\n+    public AWSCredentials getCredentials() {\n+        AwsSessionCredentials credentials = (AwsSessionCredentials) resolveCredentials();\n+        return new BasicSessionCredentials(credentials.accessKeyId(), credentials.secretAccessKey(),\n+                credentials.sessionToken());\n+    }\n+\n+    @Override\n+    public void refresh() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4NzU3MA=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTU0NjUwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/IotJobsUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyODoyN1rOG7EQug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODozMjo1NVrOG7EY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4ODk4Ng==", "bodyText": "Why throw an AssertionError?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464588986", "createdAt": "2020-08-03T18:28:27Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/IotJobsUtils.java", "diffHunk": "@@ -59,8 +58,14 @@ public static void waitForJobExecutionStatusToSatisfy(IotClient client, String j\n                 status = client.describeJobExecution(\n                         DescribeJobExecutionRequest.builder().jobId(jobId).thingName(thingName).build()).execution()\n                         .status();\n-                if (condition.test(status)) {\n-                    return;\n+                // All statuses after and including SUCCEEDED are terminal, so they won't ever change\n+                // which means we can stop querying\n+                if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal() || condition.test(status)) {\n+                    if (condition.test(status)) {\n+                        return;\n+                    }\n+                } else if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal()) {\n+                    throw new AssertionError(\"Job ended in state: \" + status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MDU0MA==", "bodyText": "Because this is a test utility and the condition wasn't met. Originally it would throw a timeout exception, but that isn't really clear IMO.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464590540", "createdAt": "2020-08-03T18:31:44Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/IotJobsUtils.java", "diffHunk": "@@ -59,8 +58,14 @@ public static void waitForJobExecutionStatusToSatisfy(IotClient client, String j\n                 status = client.describeJobExecution(\n                         DescribeJobExecutionRequest.builder().jobId(jobId).thingName(thingName).build()).execution()\n                         .status();\n-                if (condition.test(status)) {\n-                    return;\n+                // All statuses after and including SUCCEEDED are terminal, so they won't ever change\n+                // which means we can stop querying\n+                if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal() || condition.test(status)) {\n+                    if (condition.test(status)) {\n+                        return;\n+                    }\n+                } else if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal()) {\n+                    throw new AssertionError(\"Job ended in state: \" + status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4ODk4Ng=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5MTA4NA==", "bodyText": "Basically this change means that if the test will fail, it can fail up to 20 minutes faster which is much better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/344#discussion_r464591084", "createdAt": "2020-08-03T18:32:55Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/IotJobsUtils.java", "diffHunk": "@@ -59,8 +58,14 @@ public static void waitForJobExecutionStatusToSatisfy(IotClient client, String j\n                 status = client.describeJobExecution(\n                         DescribeJobExecutionRequest.builder().jobId(jobId).thingName(thingName).build()).execution()\n                         .status();\n-                if (condition.test(status)) {\n-                    return;\n+                // All statuses after and including SUCCEEDED are terminal, so they won't ever change\n+                // which means we can stop querying\n+                if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal() || condition.test(status)) {\n+                    if (condition.test(status)) {\n+                        return;\n+                    }\n+                } else if (JobExecutionStatus.SUCCEEDED.ordinal() <= status.ordinal()) {\n+                    throw new AssertionError(\"Job ended in state: \" + status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4ODk4Ng=="}, "originalCommit": {"oid": "6d5c9fa0728c59283c5f2c35622ccc1de237717e"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4495, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}