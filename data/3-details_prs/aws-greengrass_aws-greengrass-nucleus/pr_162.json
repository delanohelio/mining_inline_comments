{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzczMTc0", "number": 162, "title": "Package store dependency resolver", "bodyText": "Issue #, if available:\nDescription of changes:\nThis is a draft pull request without unit tests.\n\n\nRe-purposed PackageMetadata and make it use PackageIdentifier.\n\n\nImplemented PackageStore::listAvailablePackageMetadata.\n\n\nSwitch the DependencyResolver::resolveDependencyTree to use iterator to iterate through the available packages.\n\nNote that this is to enable lazy package iteration as the next step.\n\n\n\nMoved package store related methods in the DependencyResolver and refactored them.\n\n\nWhy is this change necessary:\nHow was this change tested:\nmvn verify fails only at the testing stage.\nAny additional information or context required to review the change:\nPlease see the diagram and readme added: link.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-07T16:24:50Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162", "merged": true, "mergeCommit": {"oid": "dad1569347be75dfb03aafd25fb1ba8b79fb19b2"}, "closed": true, "closedAt": "2020-04-13T20:44:45Z", "author": {"login": "leaf94"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVV6aZAFqTM4OTI5MDA1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXU3mHAFqTM5MjQxMzM3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjkwMDU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-389290059", "createdAt": "2020-04-07T16:30:17Z", "commit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMDoxN1rOGCMCXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMDoxN1rOGCMCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0NzU1MQ==", "bodyText": "Do we really want an Iterator, or just an Iterable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r404947551", "createdAt": "2020-04-07T16:30:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -137,22 +135,20 @@\n         logger.atDebug().setEventType(\"resolve-package-start\").addKeyValue(PACKAGE_NAME_KEY, pkgName).log();\n \n         // Compile a list of versions to explore for this package in order\n-        //TODO return iterator\n-        List<Semver> versionsToExplore = getVersionsToExplore(pkgName, packageNameToVersionConstraints.get(pkgName));\n-        if (versionsToExplore.isEmpty()) {\n+        Iterator<PackageMetadata> versionsToExplore =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzUwNTY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-389350567", "createdAt": "2020-04-07T17:46:34Z", "commit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NjozNFrOGCPF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowMjo0MFrOGCPt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NzYwMA==", "bodyText": "Isn't this log wrong? Can you actually print just the version instead of whatever else is in the metadata?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r404997600", "createdAt": "2020-04-07T17:46:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -137,22 +135,20 @@\n         logger.atDebug().setEventType(\"resolve-package-start\").addKeyValue(PACKAGE_NAME_KEY, pkgName).log();\n \n         // Compile a list of versions to explore for this package in order\n-        //TODO return iterator\n-        List<Semver> versionsToExplore = getVersionsToExplore(pkgName, packageNameToVersionConstraints.get(pkgName));\n-        if (versionsToExplore.isEmpty()) {\n+        Iterator<PackageMetadata> versionsToExplore =\n+                listPackageMetadataToExplore(pkgName, packageNameToVersionConstraints.get(pkgName));\n+        if (!versionsToExplore.hasNext()) {\n             errorMessage = Optional.of(buildErrorMessage(pkgName, resolvedPackageNameToVersion,\n                     packageNameToVersionConstraints.get(pkgName)));\n         }\n \n-        for (Semver version : versionsToExplore) {\n+        while (versionsToExplore.hasNext()) {\n+            PackageMetadata packageMetadata = versionsToExplore.next();\n             logger.atTrace().setEventType(\"resolve-package-attempt\").addKeyValue(PACKAGE_NAME_KEY, pkgName)\n-                    .addKeyValue(VERSION_KEY, version).log();\n-\n-            // Get package recipe\n-            Package pkgRecipe = getPackage(pkgName, version);\n+                    .addKeyValue(VERSION_KEY, packageMetadata).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NzkwMA==", "bodyText": "Use your VERSION key, and then same comment as above.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r404997900", "createdAt": "2020-04-07T17:47:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -191,7 +187,7 @@\n                 continue;\n             }\n             packagesToResolve.addAll(newDependencyPackagesToResolve);\n-            logger.atTrace().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(\"packageVersion\", version)\n+            logger.atTrace().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(\"packageVersion\", packageMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5ODM3Nw==", "bodyText": "typo: map from depending...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r404998377", "createdAt": "2020-04-07T17:47:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -238,22 +234,21 @@\n     }\n \n     /**\n-     * // TODO move to local package store\n-     * Get a ordered list of possible versions to explore for the given package.\n+     * Returns a iterator of ordered available PackageMetadata to explore for the given package.\n      *\n      * @param pkgName                     name of the package to be explored\n-     * @param packageToVersionConstraints list of version constraints for the package\n-     * @return list of versions as Semver instances\n+     * @param packageToVersionConstraints map from of depending package's name, to it's version constraint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5ODUwMA==", "bodyText": "typo: an iterator.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r404998500", "createdAt": "2020-04-07T17:48:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -238,22 +234,21 @@\n     }\n \n     /**\n-     * // TODO move to local package store\n-     * Get a ordered list of possible versions to explore for the given package.\n+     * Returns a iterator of ordered available PackageMetadata to explore for the given package.\n      *\n      * @param pkgName                     name of the package to be explored\n-     * @param packageToVersionConstraints list of version constraints for the package\n-     * @return list of versions as Semver instances\n+     * @param packageToVersionConstraints map from of depending package's name, to it's version constraint\n+     * @return a iterator of ordered available PackageMetadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMTMwMA==", "bodyText": "Why are you adding to the beginning and then removing the same thing?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405001300", "createdAt": "2020-04-07T17:52:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -49,14 +68,46 @@ public PackageStore(Path packageStorePath) {\n     }\n \n     /**\n-     * Get package versions with the most preferred version first.\n-     * @param pkgName the package name\n-     * @param versionConstraint a version range\n-     * @return a iterator for package metadata with the most preferred one first\n+     * List the package metadata for available package versions that satisfy the requirement.\n+     * It is ordered by the active version first if found, followed by available versions locally.\n+     *\n+     * @param packageName        the package name\n+     * @param versionRequirement the version requirement for this package\n+     * @return a iterator of PackageMetadata, with the active version first if found, followed by available versions\n+     *     locally.\n      */\n-    Iterator<PackageMetadata> getPackageMetadata(String pkgName, String versionConstraint) {\n-        // TODO to be implemented\n-        return null;\n+    Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackagingException, IOException {\n+        // TODO Switch to customized Iterator to enable lazy iteration\n+\n+        // 1. Find the version if this package is currently active with some version and it is satisfied by requirement\n+        Optional<PackageMetadata> optionalActivePackageMetadata =\n+                findActiveAndSatisfiedPackageMetadata(packageName, versionRequirement);\n+\n+        // 2. list available packages locally\n+        List<PackageMetadata> packageMetadataList = listAvailablePackageMetadataFromLocal(packageName, versionRequirement);\n+\n+        // 3. If the active satisfied version presents, set it as the head of list.\n+        if (optionalActivePackageMetadata.isPresent()) {\n+            PackageMetadata activePackageMetadata = optionalActivePackageMetadata.get();\n+\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .addKeyValue(VERSION_KEY, activePackageMetadata.getPackageIdentifier().getVersion())\n+                    .log(\"Found active version for dependency package and it is satisfied by the version requirement.\"\n+                            + \" Setting it as the head of the available package list.\");\n+\n+            packageMetadataList.add(0, activePackageMetadata);\n+            packageMetadataList.remove(activePackageMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNDI1NQ==", "bodyText": "combine these strings since they're on the same line now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405004255", "createdAt": "2020-04-07T17:57:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -66,8 +117,8 @@ public PackageStore(Path packageStorePath) {\n      * @param pkgs a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n+    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\",\n+            justification = \"Waiting for package cache \" + \"implementation to be completed\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNDkzNw==", "bodyText": "You need to check for null and handle the case that the version is missing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405004937", "createdAt": "2020-04-07T17:58:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +146,117 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n+     *\n+     * @param packageName   the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().setCause(e).addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Failed to get active package in Kernel\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(getPackageVersionFromService(service));\n+    }\n+\n+    /**\n+     *  Get the package version from the active Evergreen service.\n+     *\n+     * @param service the active evergreen service\n+     * @return  the package version from the active Evergreen service\n+     */\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNjcwMQ==", "bodyText": "use e.getLocalizedMessage() instead of toString().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405006701", "createdAt": "2020-04-07T18:00:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +146,117 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n+     *\n+     * @param packageName   the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().setCause(e).addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Failed to get active package in Kernel\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(getPackageVersionFromService(service));\n+    }\n+\n+    /**\n+     *  Get the package version from the active Evergreen service.\n+     *\n+     * @param service the active evergreen service\n+     * @return  the package version from the active Evergreen service\n+     */\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n+        return new Semver(Coerce.toString(versionNode));\n+    }\n+\n+    /**\n+     * Find the package metadata for a package if it's active version satisfies the requirement\n      *\n+     * @param packageName the package name\n+     * @param requirement the version requirement\n+     * @return Optional of the package metadata for the package; empty if this package doesn't have active version or\n+     * the active version doesn't satisfy the requirement.\n+     * @throws IOException  if fails to read from disk\n+     * @throws PackagingException   if fails to find the target recipe or parse the recipe\n+     */\n+    private Optional<PackageMetadata> findActiveAndSatisfiedPackageMetadata(String packageName, Requirement requirement)\n+            throws IOException, PackagingException {\n+        Optional<Semver> activeVersionOptional = findActiveVersion(packageName);\n+\n+        if (!activeVersionOptional.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Semver activeVersion = activeVersionOptional.get();\n+\n+        if (!requirement.isSatisfiedBy(activeVersion)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(getPackageMetadata(packageName, activeVersion));\n+    }\n+\n+    /**\n+     * list PackageMetadata for available packages that satisfies the requirement.\n      *\n+     * @param packageName the target package\n+     * @param requirement version requirement\n+     * @return a list of PackageMetadata that satisfies the requirement.\n+     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * @throws IOException                  if fails to read from disk\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n+    private List<PackageMetadata> listAvailablePackageMetadataFromLocal(final String packageName, Requirement requirement)\n+            throws PackagingException, IOException {\n         Path srcPkgRoot = getPackageStorageRoot(packageName, packageStorePath);\n-        List<Semver> versions = new ArrayList<>();\n \n         if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n         File[] versionDirs = srcPkgRoot.toFile().listFiles(File::isDirectory);\n         if (versionDirs == null || versionDirs.length == 0) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n-        try {\n-            for (File versionDir : versionDirs) {\n-                // TODO: Depending on platform, this may need to avoid failures on other things\n-                versions.add(new Semver(versionDir.getName(), Semver.SemverType.NPM));\n+        List<PackageMetadata> packageMetadataList = new ArrayList<>();\n+\n+        for (File versionDir : versionDirs) {\n+            Semver version;\n+            try {\n+                version = new Semver(versionDir.getName(), Semver.SemverType.NPM);\n+            } catch (SemverException e) {\n+                throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzI2Ng==", "bodyText": "use constructors instead of builders.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405007266", "createdAt": "2020-04-07T18:01:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +146,117 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n+     *\n+     * @param packageName   the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().setCause(e).addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Failed to get active package in Kernel\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(getPackageVersionFromService(service));\n+    }\n+\n+    /**\n+     *  Get the package version from the active Evergreen service.\n+     *\n+     * @param service the active evergreen service\n+     * @return  the package version from the active Evergreen service\n+     */\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n+        return new Semver(Coerce.toString(versionNode));\n+    }\n+\n+    /**\n+     * Find the package metadata for a package if it's active version satisfies the requirement\n      *\n+     * @param packageName the package name\n+     * @param requirement the version requirement\n+     * @return Optional of the package metadata for the package; empty if this package doesn't have active version or\n+     * the active version doesn't satisfy the requirement.\n+     * @throws IOException  if fails to read from disk\n+     * @throws PackagingException   if fails to find the target recipe or parse the recipe\n+     */\n+    private Optional<PackageMetadata> findActiveAndSatisfiedPackageMetadata(String packageName, Requirement requirement)\n+            throws IOException, PackagingException {\n+        Optional<Semver> activeVersionOptional = findActiveVersion(packageName);\n+\n+        if (!activeVersionOptional.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Semver activeVersion = activeVersionOptional.get();\n+\n+        if (!requirement.isSatisfiedBy(activeVersion)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(getPackageMetadata(packageName, activeVersion));\n+    }\n+\n+    /**\n+     * list PackageMetadata for available packages that satisfies the requirement.\n      *\n+     * @param packageName the target package\n+     * @param requirement version requirement\n+     * @return a list of PackageMetadata that satisfies the requirement.\n+     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * @throws IOException                  if fails to read from disk\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n+    private List<PackageMetadata> listAvailablePackageMetadataFromLocal(final String packageName, Requirement requirement)\n+            throws PackagingException, IOException {\n         Path srcPkgRoot = getPackageStorageRoot(packageName, packageStorePath);\n-        List<Semver> versions = new ArrayList<>();\n \n         if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n         File[] versionDirs = srcPkgRoot.toFile().listFiles(File::isDirectory);\n         if (versionDirs == null || versionDirs.length == 0) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n-        try {\n-            for (File versionDir : versionDirs) {\n-                // TODO: Depending on platform, this may need to avoid failures on other things\n-                versions.add(new Semver(versionDir.getName(), Semver.SemverType.NPM));\n+        List<PackageMetadata> packageMetadataList = new ArrayList<>();\n+\n+        for (File versionDir : versionDirs) {\n+            Semver version;\n+            try {\n+                version = new Semver(versionDir.getName(), Semver.SemverType.NPM);\n+            } catch (SemverException e) {\n+                throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);\n+            }\n+            if (requirement.isSatisfiedBy(version)) {\n+                packageMetadataList.add(getPackageMetadata(packageName, version));\n             }\n-        } catch (SemverException e) {\n-            throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);\n+\n         }\n \n-        return versions;\n+        return packageMetadataList;\n+    }\n+\n+    /**\n+     * Get package metadata for given package name and version.\n+     *\n+     * @param packageName package name\n+     * @param version     version\n+     * @return PackageMetadata; non-null\n+     * @throws IOException        if fails to read from disk\n+     * @throws PackagingException if fails to find or parse the recipe\n+     */\n+    PackageMetadata getPackageMetadata(String packageName, Semver version) throws IOException, PackagingException {\n+        Package retrievedPackage = getPackage(packageName, version).get();\n+\n+        return PackageMetadata.builder().packageIdentifier(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzYwMQ==", "bodyText": "I don't think we need the builder.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405007601", "createdAt": "2020-04-07T18:02:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -15,6 +16,7 @@\n @EqualsAndHashCode\n @AllArgsConstructor\n @NoArgsConstructor\n+@Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzg1Nw==", "bodyText": "Again, don't think we need the builder.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405007857", "createdAt": "2020-04-07T18:02:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageMetadata.java", "diffHunk": "@@ -1,64 +1,17 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.aws.iot.evergreen.util.Utils;\n-import com.vdurmont.semver4j.Semver;\n-import lombok.EqualsAndHashCode;\n+import lombok.Builder;\n import lombok.Value;\n \n-import java.util.Collections;\n-import java.util.Set;\n+import java.util.Map;\n \n @Value\n+@Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTA5MzQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-389509344", "createdAt": "2020-04-07T21:38:10Z", "commit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozODoxMVrOGCXGdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1Mzo1M1rOGCXjMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyODgyMw==", "bodyText": "Nit- When you don't find the active version for a package, a valid reason would be when the package is brand new so the service in it isn't yet running. But this log may suggest that package manager failed to load it for some reason, can we rephrase this message to say that no active version found, so the package is new?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405128823", "createdAt": "2020-04-07T21:38:11Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +146,117 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n+     *\n+     * @param packageName   the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().setCause(e).addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Failed to get active package in Kernel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTczMQ==", "bodyText": "You should probably remove first then add at index 0, remove operation removes the first occurrence of the element", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405131731", "createdAt": "2020-04-07T21:44:14Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -49,14 +68,46 @@ public PackageStore(Path packageStorePath) {\n     }\n \n     /**\n-     * Get package versions with the most preferred version first.\n-     * @param pkgName the package name\n-     * @param versionConstraint a version range\n-     * @return a iterator for package metadata with the most preferred one first\n+     * List the package metadata for available package versions that satisfy the requirement.\n+     * It is ordered by the active version first if found, followed by available versions locally.\n+     *\n+     * @param packageName        the package name\n+     * @param versionRequirement the version requirement for this package\n+     * @return a iterator of PackageMetadata, with the active version first if found, followed by available versions\n+     *     locally.\n      */\n-    Iterator<PackageMetadata> getPackageMetadata(String pkgName, String versionConstraint) {\n-        // TODO to be implemented\n-        return null;\n+    Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackagingException, IOException {\n+        // TODO Switch to customized Iterator to enable lazy iteration\n+\n+        // 1. Find the version if this package is currently active with some version and it is satisfied by requirement\n+        Optional<PackageMetadata> optionalActivePackageMetadata =\n+                findActiveAndSatisfiedPackageMetadata(packageName, versionRequirement);\n+\n+        // 2. list available packages locally\n+        List<PackageMetadata> packageMetadataList = listAvailablePackageMetadataFromLocal(packageName, versionRequirement);\n+\n+        // 3. If the active satisfied version presents, set it as the head of list.\n+        if (optionalActivePackageMetadata.isPresent()) {\n+            PackageMetadata activePackageMetadata = optionalActivePackageMetadata.get();\n+\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .addKeyValue(VERSION_KEY, activePackageMetadata.getPackageIdentifier().getVersion())\n+                    .log(\"Found active version for dependency package and it is satisfied by the version requirement.\"\n+                            + \" Setting it as the head of the available package list.\");\n+\n+            packageMetadataList.add(0, activePackageMetadata);\n+            packageMetadataList.remove(activePackageMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwMTMwMA=="}, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNDQxMQ==", "bodyText": "+1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405134411", "createdAt": "2020-04-07T21:49:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -15,6 +16,7 @@\n @EqualsAndHashCode\n @AllArgsConstructor\n @NoArgsConstructor\n+@Builder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNzYwMQ=="}, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjE3Ng==", "bodyText": "Do we really need another POJO for packages when we already have the package identifier and the package class that represents the whole parsed recipe, the only thing this class has in addition to the identifier class is the dependencies which should be easily accessible from the Package.java object? I do understand the benefit of organization within the dependency resolution code it's brining but a couple of sprint ago we simplified the POJOs and that's how PackageIdentifier was created, and now we will have another model class. I maybe missing something though", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405136176", "createdAt": "2020-04-07T21:53:53Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageMetadata.java", "diffHunk": "@@ -1,64 +1,17 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.aws.iot.evergreen.util.Utils;\n-import com.vdurmont.semver4j.Semver;\n-import lombok.EqualsAndHashCode;\n+import lombok.Builder;\n import lombok.Value;\n \n-import java.util.Collections;\n-import java.util.Set;\n+import java.util.Map;\n \n @Value\n+@Builder\n public class PackageMetadata {\n \n-    String name;\n+    PackageIdentifier packageIdentifier;\n \n-    Semver version;\n+    Map<String, String> dependencies;   // from dependency package name to version requirement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjI3NzM5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-389627739", "createdAt": "2020-04-08T03:20:58Z", "commit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyMDo1OFrOGCdoMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyOTo1NVrOGCdwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNTc2MA==", "bodyText": "I would catch the exceptions and handle them here instead of populating them up. We don't want to fail the listAvailablePackageMetadata() call because we cannot read active package metadata for some reason. In this case, we can just log an warn and move to step 2.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405235760", "createdAt": "2020-04-08T03:20:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -49,14 +68,47 @@ public PackageStore(Path packageStorePath) {\n     }\n \n     /**\n-     * Get package versions with the most preferred version first.\n-     * @param pkgName the package name\n-     * @param versionConstraint a version range\n-     * @return a iterator for package metadata with the most preferred one first\n+     * List the package metadata for available package versions that satisfy the requirement.\n+     * It is ordered by the active version first if found, followed by available versions locally.\n+     *\n+     * @param packageName        the package name\n+     * @param versionRequirement the version requirement for this package\n+     * @return an iterator of PackageMetadata, with the active version first if found, followed by available versions\n+     * locally.\n      */\n-    Iterator<PackageMetadata> getPackageMetadata(String pkgName, String versionConstraint) {\n-        // TODO to be implemented\n-        return null;\n+    Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackagingException, IOException {\n+        // TODO Switch to customized Iterator to enable lazy iteration\n+\n+        // 1. Find the version if this package is currently active with some version and it is satisfied by requirement\n+        Optional<PackageMetadata> optionalActivePackageMetadata =\n+                findActiveAndSatisfiedPackageMetadata(packageName, versionRequirement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNTg2Mg==", "bodyText": "Same here. I would handle the exceptions from listAvailablePackageMetadataFromLocal().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405235862", "createdAt": "2020-04-08T03:21:26Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -49,14 +68,47 @@ public PackageStore(Path packageStorePath) {\n     }\n \n     /**\n-     * Get package versions with the most preferred version first.\n-     * @param pkgName the package name\n-     * @param versionConstraint a version range\n-     * @return a iterator for package metadata with the most preferred one first\n+     * List the package metadata for available package versions that satisfy the requirement.\n+     * It is ordered by the active version first if found, followed by available versions locally.\n+     *\n+     * @param packageName        the package name\n+     * @param versionRequirement the version requirement for this package\n+     * @return an iterator of PackageMetadata, with the active version first if found, followed by available versions\n+     * locally.\n      */\n-    Iterator<PackageMetadata> getPackageMetadata(String pkgName, String versionConstraint) {\n-        // TODO to be implemented\n-        return null;\n+    Iterator<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackagingException, IOException {\n+        // TODO Switch to customized Iterator to enable lazy iteration\n+\n+        // 1. Find the version if this package is currently active with some version and it is satisfied by requirement\n+        Optional<PackageMetadata> optionalActivePackageMetadata =\n+                findActiveAndSatisfiedPackageMetadata(packageName, versionRequirement);\n+\n+        // 2. list available packages locally\n+        List<PackageMetadata> packageMetadataList =\n+                listAvailablePackageMetadataFromLocal(packageName, versionRequirement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNzA4Nw==", "bodyText": "Package is the in memory representation of the recipe file. Since we'll need at least one copy of the recipe file in memory anyway (for dependency resolution, parameter resolution, and config generation), I'm fine just using Package.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405237087", "createdAt": "2020-04-08T03:26:23Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageMetadata.java", "diffHunk": "@@ -1,64 +1,17 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.aws.iot.evergreen.util.Utils;\n-import com.vdurmont.semver4j.Semver;\n-import lombok.EqualsAndHashCode;\n+import lombok.Builder;\n import lombok.Value;\n \n-import java.util.Collections;\n-import java.util.Set;\n+import java.util.Map;\n \n @Value\n+@Builder\n public class PackageMetadata {\n \n-    String name;\n+    PackageIdentifier packageIdentifier;\n \n-    Semver version;\n+    Map<String, String> dependencies;   // from dependency package name to version requirement", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjE3Ng=="}, "originalCommit": {"oid": "c185bb32d304d7cc5713e3bc0aab6ace0f203ccf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNzk2NQ==", "bodyText": "This method doesn't do much. I would merge it back into listAvailablePackageMetadata().", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405237965", "createdAt": "2020-04-08T03:29:55Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +147,116 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n      *\n+     * @param packageName the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Didn't find a active service for this package running in the kernel.\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(getPackageVersionFromService(service));\n+    }\n+\n+    /**\n+     * Get the package version from the active Evergreen service.\n      *\n+     * @param service the active evergreen service\n+     * @return the package version from the active Evergreen service\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n+        return new Semver(Coerce.toString(versionNode));\n+    }\n+\n+    /**\n+     * Find the package metadata for a package if it's active version satisfies the requirement\n+     *\n+     * @param packageName the package name\n+     * @param requirement the version requirement\n+     * @return Optional of the package metadata for the package; empty if this package doesn't have active version or\n+     * the active version doesn't satisfy the requirement.\n+     * @throws IOException        if fails to read from disk\n+     * @throws PackagingException if fails to find the target recipe or parse the recipe\n+     */\n+    private Optional<PackageMetadata> findActiveAndSatisfiedPackageMetadata(String packageName, Requirement requirement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTkzOTQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-390193949", "createdAt": "2020-04-08T17:43:36Z", "commit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0MzozNlrOGC6D8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0MzozNlrOGC6D8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMTYxOA==", "bodyText": "nit: this kv is more than \"version\". Same elsewhere", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405701618", "createdAt": "2020-04-08T17:43:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -191,7 +187,7 @@\n                 continue;\n             }\n             packagesToResolve.addAll(newDependencyPackagesToResolve);\n-            logger.atTrace().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(\"packageVersion\", version)\n+            logger.atTrace().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(VERSION_KEY, packageMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjA4MDcx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-390208071", "createdAt": "2020-04-08T18:03:14Z", "commit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMzoxNFrOGC6w2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMzoxNFrOGC6w2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzExMw==", "bodyText": "I thought there would be a cloud API to get package metadata. Is it not true?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405713113", "createdAt": "2020-04-08T18:03:14Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -95,33 +147,116 @@ public Package getRecipe(PackageIdentifier pkg) {\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the active version for a package.\n      *\n+     * @param packageName the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n+     */\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n+        try {\n+            service = EvergreenService.locate(kernel.context, packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Didn't find a active service for this package running in the kernel.\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(getPackageVersionFromService(service));\n+    }\n+\n+    /**\n+     * Get the package version from the active Evergreen service.\n      *\n+     * @param service the active evergreen service\n+     * @return the package version from the active Evergreen service\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.config.getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n+        return new Semver(Coerce.toString(versionNode));\n+    }\n+\n+    /**\n+     * Find the package metadata for a package if it's active version satisfies the requirement\n+     *\n+     * @param packageName the package name\n+     * @param requirement the version requirement\n+     * @return Optional of the package metadata for the package; empty if this package doesn't have active version or\n+     * the active version doesn't satisfy the requirement.\n+     * @throws IOException        if fails to read from disk\n+     * @throws PackagingException if fails to find the target recipe or parse the recipe\n+     */\n+    private Optional<PackageMetadata> findActiveAndSatisfiedPackageMetadata(String packageName, Requirement requirement)\n+            throws IOException, PackagingException {\n+        Optional<Semver> activeVersionOptional = findActiveVersion(packageName);\n+\n+        if (!activeVersionOptional.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Semver activeVersion = activeVersionOptional.get();\n+\n+        if (!requirement.isSatisfiedBy(activeVersion)) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(getPackageMetadata(packageName, activeVersion));\n+    }\n+\n+    /**\n+     * list PackageMetadata for available packages that satisfies the requirement.\n+     *\n+     * @param packageName the target package\n+     * @param requirement version requirement\n+     * @return a list of PackageMetadata that satisfies the requirement.\n+     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n+     * @throws IOException                  if fails to read from disk\n+     */\n+    private List<PackageMetadata> listAvailablePackageMetadataFromLocal(final String packageName,\n+                                                                        Requirement requirement)\n+            throws PackagingException, IOException {\n         Path srcPkgRoot = getPackageStorageRoot(packageName, packageStorePath);\n-        List<Semver> versions = new ArrayList<>();\n \n         if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n         File[] versionDirs = srcPkgRoot.toFile().listFiles(File::isDirectory);\n         if (versionDirs == null || versionDirs.length == 0) {\n-            return versions;\n+            return Collections.emptyList();\n         }\n \n-        try {\n-            for (File versionDir : versionDirs) {\n-                // TODO: Depending on platform, this may need to avoid failures on other things\n-                versions.add(new Semver(versionDir.getName(), Semver.SemverType.NPM));\n+        List<PackageMetadata> packageMetadataList = new ArrayList<>();\n+\n+        for (File versionDir : versionDirs) {\n+            Semver version;\n+            try {\n+                version = new Semver(versionDir.getName(), Semver.SemverType.NPM);\n+            } catch (SemverException e) {\n+                throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.getLocalizedMessage(), e);\n+            }\n+            if (requirement.isSatisfiedBy(version)) {\n+                packageMetadataList.add(getPackageMetadata(packageName, version));\n             }\n-        } catch (SemverException e) {\n-            throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);\n+\n         }\n \n-        return versions;\n+        return packageMetadataList;\n+    }\n+\n+    /**\n+     * Get package metadata for given package name and version.\n+     *\n+     * @param packageName package name\n+     * @param version     version\n+     * @return PackageMetadata; non-null\n+     * @throws IOException        if fails to read from disk\n+     * @throws PackagingException if fails to find or parse the recipe\n+     */\n+    PackageMetadata getPackageMetadata(String packageName, Semver version) throws IOException, PackagingException {\n+        Package retrievedPackage = getPackage(packageName, version).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 247}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjA4NzM3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-390208737", "createdAt": "2020-04-08T18:04:09Z", "commit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowNDoxMFrOGC6zEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowNDoxMFrOGC6zEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMzY4MQ==", "bodyText": "Unused import?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r405713681", "createdAt": "2020-04-08T18:04:10Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -5,6 +5,7 @@\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.vdurmont.semver4j.Semver;\n import lombok.AllArgsConstructor;\n+import lombok.Builder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf257dcf0bc5fe1d932ee0ceac33d0c49ed3c699"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ebe2ab70b5bb7900460797b56462bfbdf43caa5", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8ebe2ab70b5bb7900460797b56462bfbdf43caa5", "committedDate": "2020-04-09T05:34:16Z", "message": "working on tests"}, "afterCommit": {"oid": "9eb270d977e42894245cc353210c790af49185b3", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9eb270d977e42894245cc353210c790af49185b3", "committedDate": "2020-04-09T06:21:39Z", "message": "Implement PackageStore::listAvailablePackages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eee3d1e65072a01a651227d1202b25861f6f45c", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6eee3d1e65072a01a651227d1202b25861f6f45c", "committedDate": "2020-04-10T08:19:16Z", "message": "Implement packageStore::listAvailablePackages with new structure; Refactor DependencyResolver with new store API; Migrate both integration and E2E test to use proper dynamic package path with content preloaded from test resource."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9eb270d977e42894245cc353210c790af49185b3", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9eb270d977e42894245cc353210c790af49185b3", "committedDate": "2020-04-09T06:21:39Z", "message": "Implement PackageStore::listAvailablePackages"}, "afterCommit": {"oid": "6eee3d1e65072a01a651227d1202b25861f6f45c", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6eee3d1e65072a01a651227d1202b25861f6f45c", "committedDate": "2020-04-10T08:19:16Z", "message": "Implement packageStore::listAvailablePackages with new structure; Refactor DependencyResolver with new store API; Migrate both integration and E2E test to use proper dynamic package path with content preloaded from test resource."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/154ea732a053ddabe1597b7a4327d6535ff33ac3", "committedDate": "2020-04-10T08:47:43Z", "message": "Fix E2E test source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTc5NjUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391579653", "createdAt": "2020-04-10T18:01:13Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowMToxM1rOGEBlnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowMToxM1rOGEBlnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MzUwMA==", "bodyText": "Should we find some place to define this method only once?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406873500", "createdAt": "2020-04-10T18:01:13Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -219,10 +221,21 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n         deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(rootCaFilePath);\n     }\n \n-    private void injectKernelPackageManagementDependencies() {\n-        //TODO use DI for creating package store instance, the package store path is defined in context\n-        //currently this is to use a pre-loaded folder in working directory as package store cache\n-        kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(), kernel));\n+    private static void copyFolderRecursively(Path src, Path des) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTgzMzcz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391583373", "createdAt": "2020-04-10T18:08:52Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowODo1MlrOGEBx6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowODo1MlrOGEBx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NjY1MA==", "bodyText": "Isn't service config tracking its version? Are we trying to encapsulate the info in the package store? If so, should package store/manager access kernel for service info instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406876650", "createdAt": "2020-04-10T18:08:52Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -236,126 +240,31 @@\n         return errorMessage;\n     }\n \n-    /**\n-     * // TODO move to local package store\n-     * Get a ordered list of possible versions to explore for the given package.\n-     *\n-     * @param pkgName                     name of the package to be explored\n-     * @param packageToVersionConstraints list of version constraints for the package\n-     * @return list of versions as Semver instances\n-     * @throws UnexpectedPackagingException when a package cannot be retrieved from the package store\n-     */\n-    protected List<Semver> getVersionsToExplore(final String pkgName,\n-                                                final Map<String, String> packageToVersionConstraints)\n-            throws UnexpectedPackagingException, PackageVersionConflictException {\n-\n-        List<Semver> versionList = new ArrayList<>();\n-        logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, pkgName)\n-                .addKeyValue(\"versionConstraints\", packageToVersionConstraints)\n-                .log(\"Parsing version constraints for dependency package\");\n-        Requirement req = Requirement.buildNPM(mergeSemverRequirements(packageToVersionConstraints.values()));\n-\n-        if (packageToVersionConstraints.containsKey(ROOT_REQUIREMENT_KEY)) {\n-            // Assume all root packages should use the pinned version.\n-            Semver pinnedVersion = new Semver(packageToVersionConstraints.get(ROOT_REQUIREMENT_KEY));\n-            if (!req.isSatisfiedBy(pinnedVersion)) {\n-                throw new PackageVersionConflictException(String.format(\n-                        \"Conflicts in root package version constraints. Package: %s, version constraints: %s\", pkgName,\n-                        req));\n-            }\n-            versionList.add(pinnedVersion);\n-            return versionList;\n-        }\n-\n-        // Add active package version running on the device\n-        Optional<String> version = getPackageVersionIfActive(pkgName);\n-        Semver activeVersion = null;\n-        if (version.isPresent() && req.isSatisfiedBy(version.get())) {\n-            activeVersion = new Semver(version.get());\n-            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(VERSION_KEY, activeVersion)\n-                    .log(\"Found current active version for dependency package\");\n-            versionList.add(activeVersion);\n-        }\n-\n-        // Find out all available versions in package store\n-        // TODO: shuyeh Update priorities to be \"version available on disk > latest version on the cloud > other\n-        //  versions on the cloud\n-        // TODO clarify with Feng\n-        List<Semver> allVersions = packageStore.getPackageVersionsIfExists(pkgName);\n-        for (Semver v : allVersions) {\n-            if (req.isSatisfiedBy(v) && !v.equals(activeVersion)) {\n-                versionList.add(v);\n-            }\n-        }\n-        logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, pkgName).addKeyValue(\"versionList\", versionList)\n-                .log(\"Found possible versions for dependency package\");\n-        return versionList;\n-    }\n-\n-    protected String mergeSemverRequirements(final Collection<String> packageVersionConstraintList) {\n+    String mergeSemverRequirements(final Collection<String> packageVersionConstraintList) {\n         // TODO: See if there's a better way to get the union of version constraints\n         return packageVersionConstraintList.stream().map(Requirement::buildNPM).map(Requirement::toString)\n                 .collect(Collectors.joining(\" \"));\n     }\n \n-    protected Optional<String> getPackageVersionIfActive(final String packageName) {\n-        EvergreenService service;\n-        try {\n-            service = kernel.locate(packageName);\n-        } catch (ServiceLoadException e) {\n-            logger.atDebug().setCause(e).addKeyValue(PACKAGE_NAME_KEY, packageName)\n-                    .log(\"Failed to get active package in Kernel\");\n-            return Optional.empty();\n-        }\n-        return getServiceVersion(service);\n-    }\n-\n     private void mergeActiveRootPackages(Set<String> rootPackagesToResolve,\n                                          Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n         Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n         for (EvergreenService evergreenService : activeServices) {\n             String serviceName = evergreenService.getName();\n-            // add version constraints for package not in deployment document but is active in device\n+            // Multi-group deployment support\n+            // add active service in device but the version constraints not in the deployment document\n             if (rootPackagesToResolve.contains(serviceName) && !packageNameToVersionConstraints.keySet()\n                     .contains(serviceName)) {\n-                String version = getServiceVersion(evergreenService).get();\n+                Semver version = packageStore.getPackageVersionFromService(evergreenService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTgzOTE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391583918", "createdAt": "2020-04-10T18:10:03Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMDowNFrOGEBzrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMDowNFrOGEBzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NzEwMg==", "bodyText": "Good catch on this. Package id may or may not have ARN. For package retrieving from EG cloud, it needs ARN.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406877102", "createdAt": "2020-04-10T18:10:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -27,7 +27,6 @@\n      * @param name package name\n      * @param version package version in semver\n      */\n-    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTg0MjAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391584203", "createdAt": "2020-04-10T18:10:38Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMDozOFrOGEB0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODoxMDozOFrOGEB0lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NzMzNQ==", "bodyText": "Great simplification.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406877335", "createdAt": "2020-04-10T18:10:38Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageMetadata.java", "diffHunk": "@@ -1,64 +1,14 @@\n package com.aws.iot.evergreen.packagemanager.models;\n \n-import com.aws.iot.evergreen.util.Utils;\n-import com.vdurmont.semver4j.Semver;\n-import lombok.EqualsAndHashCode;\n+import lombok.AllArgsConstructor;\n import lombok.Value;\n \n-import java.util.Collections;\n-import java.util.Set;\n+import java.util.Map;\n \n @Value\n+@AllArgsConstructor\n public class PackageMetadata {\n+    PackageIdentifier packageIdentifier;\n \n-    String name;\n-\n-    Semver version;\n-\n-    String versionConstraint;\n-\n-    @EqualsAndHashCode.Exclude\n-    Set<PackageMetadata> dependsOn;\n-\n-    Set<PackageParameter> parameters;\n-\n-    /**\n-     * Constructor for PackageMetadata.\n-     *\n-     * @param name              package name\n-     * @param version           package version\n-     * @param versionConstraint package version constraint\n-     * @param dependsOn         dependency package information\n-     * @param parameters        parameters for the package\n-     * @throws IllegalArgumentException if any of the inputs is improper\n-     */\n-    public PackageMetadata(String name, String version, String versionConstraint, Set<PackageMetadata> dependsOn,\n-                           Set<PackageParameter> parameters) {\n-        if (Utils.isEmpty(name)) {\n-            throw new IllegalArgumentException(\"package name can't be empty\");\n-        }\n-        if (Utils.isEmpty(version)) {\n-            throw new IllegalArgumentException(\"package version can't be empty\");\n-        }\n-        if (Utils.isEmpty(versionConstraint)) {\n-            throw new IllegalArgumentException(\"package version constraint can't be empty\");\n-        }\n-        this.name = name;\n-        this.version = new Semver(version, Semver.SemverType.NPM);\n-        this.versionConstraint = versionConstraint;\n-        this.dependsOn = dependsOn == null ? Collections.emptySet() : dependsOn;\n-        this.parameters = parameters == null ? Collections.emptySet() : Collections.unmodifiableSet(parameters);\n-    }\n-\n-    /**\n-     * Constructor for PackageMetadata when no dependency information is known.\n-     *\n-     * @param name       package name\n-     * @param version    package version\n-     * @param constraint package version constraint\n-     */\n-    public PackageMetadata(String name, String version, String constraint) {\n-        this(name, version, constraint, null, null);\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTg1NTQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391585546", "createdAt": "2020-04-10T18:13:34Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjMzMjY5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391633269", "createdAt": "2020-04-10T20:00:50Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDo1MFrOGEEXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMDo1MFrOGEEXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODk4Mg==", "bodyText": "catch exception or copy with overwrite.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406918982", "createdAt": "2020-04-10T20:00:50Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -219,10 +221,21 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n         deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).withValue(rootCaFilePath);\n     }\n \n-    private void injectKernelPackageManagementDependencies() {\n-        //TODO use DI for creating package store instance, the package store path is defined in context\n-        //currently this is to use a pre-loaded folder in working directory as package store cache\n-        kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(), kernel));\n+    private static void copyFolderRecursively(Path src, Path des) throws IOException {\n+        Files.walkFileTree(src, new SimpleFileVisitor<Path>() {\n+\n+            @Override\n+            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+                Files.createDirectories(des.resolve(src.relativize(dir)));\n+                return FileVisitResult.CONTINUE;\n+            }\n+\n+            @Override\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                Files.copy(file, des.resolve(src.relativize(file)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjMzNTg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391633584", "createdAt": "2020-04-10T20:01:33Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMTozM1rOGEEYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMTozM1rOGEEYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxOTIyNQ==", "bodyText": "Make sure to remove the old files in the local cache as well as adding these new ones.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406919225", "createdAt": "2020-04-10T20:01:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/e2e/deployment/local_store_content/recipe/YellowSignal-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjM0NTIy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391634522", "createdAt": "2020-04-10T20:03:57Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMzo1N1rOGEEboQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowMzo1N1rOGEEboQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDA5Nw==", "bodyText": "Why are you making this sneaky? This should use checked exceptions if possible", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406920097", "createdAt": "2020-04-10T20:03:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -68,9 +69,10 @@\n     /*\n      * Processes lifecycle section of each package and add it to the config.\n      */\n+    @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjM0ODc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391634876", "createdAt": "2020-04-10T20:04:52Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNDo1MlrOGEEcvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNDo1MlrOGEEcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDM4Mw==", "bodyText": "missing\nthis.packageStoreDirectory = packageStoreDirectory;", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406920383", "createdAt": "2020-04-10T20:04:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -70,27 +69,33 @@\n     @Inject\n     private ExecutorService executorService;\n \n-    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n     @Inject\n     @Named(\"packageStoreDirectory\")\n     private Path packageStoreDirectory;\n \n+    @Inject\n+    private Kernel kernel;\n+\n     /**\n      * PackageStore constructor.\n      *\n      * @param packageStoreDirectory directory for caching package recipes and artifacts\n      * @param packageServiceHelper  greengrass package service client helper\n      * @param artifactDownloader    artifact downloader\n      * @param executorService       executor service\n+     * @param kernel                kernel\n      */\n     public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n-                        GreengrassRepositoryDownloader artifactDownloader, ExecutorService executorService) {\n+                        GreengrassRepositoryDownloader artifactDownloader, ExecutorService executorService,\n+                        Kernel kernel) {\n         initializeSubDirectories(packageStoreDirectory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjM1NTg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391635588", "createdAt": "2020-04-10T20:06:33Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNjozM1rOGEEe0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowNjozM1rOGEEe0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMDkxMw==", "bodyText": "use findLeafChild so that you're assured to get a Topic.\nThen also check for null.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406920913", "createdAt": "2020-04-10T20:06:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -266,103 +324,125 @@ private ArtifactDownloader selectArtifactDownloader(URI artifactUri) throws Pack\n         throw new PackageLoadingException(String.format(\"artifact URI scheme %s is not supported yet\", scheme));\n     }\n \n+\n     /**\n-     * Retrieve the recipe of a package.\n+     * Find the active version for a package.\n      *\n-     * @param pkg package identifier\n-     * @return package recipe\n+     * @param packageName the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n      */\n-    public Package getRecipe(PackageIdentifier pkg) {\n-        // TODO: to be implemented.\n-        LocalPackageStoreDeprecated localPackageStore = new LocalPackageStoreDeprecated(LOCAL_CACHE_PATH);\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n         try {\n-            return localPackageStore.getPackage(pkg.getName(), pkg.getVersion()).get();\n-        } catch (PackagingException e) {\n-            e.printStackTrace();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+            service = kernel.locate(packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Didn't find a active service for this package running in the kernel.\");\n+            return Optional.empty();\n         }\n-        return null;\n+        return Optional.of(getPackageVersionFromService(service));\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Get the package version from the active Evergreen service.\n+     *\n+     * @param service the active evergreen service\n+     * @return the package version from the active Evergreen service\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n-        Path srcPkgRoot = getPackageStorageRoot(packageName, LOCAL_CACHE_PATH);\n-        List<Semver> versions = new ArrayList<>();\n-\n-        if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return versions;\n-        }\n-\n-        File[] versionDirs = srcPkgRoot.toFile().listFiles(File::isDirectory);\n-        if (versionDirs == null || versionDirs.length == 0) {\n-            return versions;\n-        }\n-\n-        try {\n-            for (File versionDir : versionDirs) {\n-                // TODO: Depending on platform, this may need to avoid failures on other things\n-                versions.add(new Semver(versionDir.getName(), Semver.SemverType.NPM));\n-            }\n-        } catch (SemverException e) {\n-            throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);\n-        }\n-\n-        return versions;\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.getServiceConfig().getChild(KernelConfigResolver.VERSION_CONFIG_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjM2Mjg2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391636286", "createdAt": "2020-04-10T20:08:24Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowODoyNVrOGEEhGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDowODoyNVrOGEEhGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMTQ5Nw==", "bodyText": "this won't be correct if the package name has -. Use [length -1] instead to be assured that you got the version which is always after the package name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406921497", "createdAt": "2020-04-10T20:08:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -266,103 +324,125 @@ private ArtifactDownloader selectArtifactDownloader(URI artifactUri) throws Pack\n         throw new PackageLoadingException(String.format(\"artifact URI scheme %s is not supported yet\", scheme));\n     }\n \n+\n     /**\n-     * Retrieve the recipe of a package.\n+     * Find the active version for a package.\n      *\n-     * @param pkg package identifier\n-     * @return package recipe\n+     * @param packageName the package name\n+     * @return Optional of version; Empty if no active version for this package found.\n      */\n-    public Package getRecipe(PackageIdentifier pkg) {\n-        // TODO: to be implemented.\n-        LocalPackageStoreDeprecated localPackageStore = new LocalPackageStoreDeprecated(LOCAL_CACHE_PATH);\n+    private Optional<Semver> findActiveVersion(final String packageName) {\n+        EvergreenService service;\n         try {\n-            return localPackageStore.getPackage(pkg.getName(), pkg.getVersion()).get();\n-        } catch (PackagingException e) {\n-            e.printStackTrace();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+            service = kernel.locate(packageName);\n+        } catch (ServiceLoadException e) {\n+            logger.atDebug().addKeyValue(PACKAGE_NAME_KEY, packageName)\n+                    .log(\"Didn't find a active service for this package running in the kernel.\");\n+            return Optional.empty();\n         }\n-        return null;\n+        return Optional.of(getPackageVersionFromService(service));\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Get the package version from the active Evergreen service.\n+     *\n+     * @param service the active evergreen service\n+     * @return the package version from the active Evergreen service\n      */\n-    List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n-        Path srcPkgRoot = getPackageStorageRoot(packageName, LOCAL_CACHE_PATH);\n-        List<Semver> versions = new ArrayList<>();\n-\n-        if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return versions;\n-        }\n-\n-        File[] versionDirs = srcPkgRoot.toFile().listFiles(File::isDirectory);\n-        if (versionDirs == null || versionDirs.length == 0) {\n-            return versions;\n-        }\n-\n-        try {\n-            for (File versionDir : versionDirs) {\n-                // TODO: Depending on platform, this may need to avoid failures on other things\n-                versions.add(new Semver(versionDir.getName(), Semver.SemverType.NPM));\n-            }\n-        } catch (SemverException e) {\n-            throw new UnexpectedPackagingException(\"Package Cache is corrupted! \" + e.toString(), e);\n-        }\n-\n-        return versions;\n+    Semver getPackageVersionFromService(final EvergreenService service) {\n+        Node versionNode = service.getServiceConfig().getChild(KernelConfigResolver.VERSION_CONFIG_KEY);\n+        //TODO handle null case\n+        return new Semver(Coerce.toString(versionNode));\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * Find the package metadata for a package if it's active version satisfies the requirement.\n      *\n-     * @return Optional containing package recipe as a String\n+     * @param packageName the package name\n+     * @param requirement the version requirement\n+     * @return Optional of the package metadata for the package; empty if this package doesn't have active version or\n+     *     the active version doesn't satisfy the requirement.\n+     * @throws PackagingException if fails to find the target recipe or parse the recipe\n      */\n-    Optional<Package> getPackage(final String packageName, final Semver packageVersion)\n-            throws PackagingException, IOException {\n-        Optional<String> packageRecipeContent = getPackageRecipe(packageName, packageVersion);\n-        if (!packageRecipeContent.isPresent()) {\n+    private Optional<PackageMetadata> findActiveAndSatisfiedPackageMetadata(String packageName, Requirement requirement)\n+            throws PackagingException {\n+        Optional<Semver> activeVersionOptional = findActiveVersion(packageName);\n+\n+        if (!activeVersionOptional.isPresent()) {\n             return Optional.empty();\n         }\n-        try {\n-            Package pkgRecipe = OBJECT_MAPPER.readValue(packageRecipeContent.get(), Package.class);\n-            return Optional.ofNullable(pkgRecipe);\n-        } catch (IOException e) {\n-            throw new UnsupportedRecipeFormatException(Constants.UNABLE_TO_PARSE_RECIPE_EXCEPTION_MSG, e);\n+\n+        Semver activeVersion = activeVersionOptional.get();\n+\n+        if (!requirement.isSatisfiedBy(activeVersion)) {\n+            return Optional.empty();\n         }\n+\n+        return Optional.of(getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n     }\n \n     /**\n-     * Get package from cache if it exists.\n+     * list PackageMetadata for available packages that satisfies the requirement.\n      *\n-     * @return Optional containing package recipe as a String\n+     * @param packageName the target package\n+     * @param requirement version requirement\n+     * @return a list of PackageMetadata that satisfies the requirement.\n+     * @throws UnexpectedPackagingException if fails to parse version directory to Semver\n      */\n-    private Optional<String> getPackageRecipe(final String packageName, final Semver packageVersion)\n-            throws PackagingException, IOException {\n-        Path srcPkgRoot = getPackageVersionStorageRoot(packageName, packageVersion.toString(), LOCAL_CACHE_PATH);\n+    private List<PackageMetadata> listAvailablePackageMetadataFromLocal(final String packageName,\n+                                                                        Requirement requirement)\n+            throws PackagingException {\n+        File[] recipeFiles = recipeDirectory.toFile().listFiles();\n \n-        if (!Files.exists(srcPkgRoot) || !Files.isDirectory(srcPkgRoot)) {\n-            return Optional.empty();\n+        if (recipeFiles == null || recipeFiles.length == 0) {\n+            return Collections.emptyList();\n         }\n-        // TODO: Move to a Common list of Constants\n-        Path recipePath = srcPkgRoot.resolve(Constants.RECIPE_FILE_NAME);\n \n-        if (!Files.exists(recipePath) && Files.isRegularFile(recipePath)) {\n-            throw new PackagingException(\"Package manager cache is corrupt\");\n-            // TODO Take some corrective actions before throwing\n+        Arrays.sort(recipeFiles);\n+\n+        List<PackageMetadata> packageMetadataList = new ArrayList<>();\n+\n+        for (File recipeFile : recipeFiles) {\n+\n+            Semver version = parseVersionFromFileName(recipeFile.getName());\n+\n+            if (requirement.isSatisfiedBy(version)) {\n+                packageMetadataList.add(getPackageMetadata(new PackageIdentifier(packageName, version)));\n+            }\n+\n         }\n \n-        return Optional.of(new String(Files.readAllBytes(recipePath), StandardCharsets.UTF_8));\n+        return packageMetadataList;\n     }\n \n+    /**\n+     * Get package metadata for given package name and version.\n+     *\n+     * @param pkgId package id\n+     * @return PackageMetadata; non-null\n+     * @throws PackagingException if fails to find or parse the recipe\n+     */\n+    PackageMetadata getPackageMetadata(PackageIdentifier pkgId) throws PackagingException {\n+        Package retrievedPackage = getPackageRecipe(pkgId);\n \n-    private static Path getPackageStorageRoot(final String packageName, final Path cacheFolder) {\n-        return cacheFolder.resolve(packageName);\n+        return new PackageMetadata(\n+                new PackageIdentifier(retrievedPackage.getPackageName(), retrievedPackage.getVersion()),\n+                retrievedPackage.getDependencies());\n     }\n \n-    private static Path getPackageVersionStorageRoot(final String packageName, final String packageVersion,\n-                                                     final Path cacheFolder) {\n-        return getPackageStorageRoot(packageName, cacheFolder).resolve(packageVersion);\n+\n+    private static Semver parseVersionFromFileName(String filename) throws UnexpectedPackagingException {\n+        // TODO validate filename\n+\n+        // MonitoringService-1.0.0.yaml\n+        String suffix = \".yaml\";\n+        String versionStr = filename.split(suffix)[0].split(\"-\")[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 374}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjM3NTQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391637544", "createdAt": "2020-04-10T20:11:34Z", "commit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxMTozNFrOGEElSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDoxMTozNFrOGEElSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyMjU3MA==", "bodyText": "do we need trace? Extra logging slows down our tests, so unless we need it I'd want to remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406922570", "createdAt": "2020-04-10T20:11:34Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/DependencyResolverTest.java", "diffHunk": "@@ -57,20 +59,16 @@\n \n     @Mock\n     private EvergreenService mainService;\n+\n     @BeforeAll\n-    public static void setup() {\n-        System.setProperty(\"log.fmt\", \"TEXT\");\n-        System.setProperty(\"log.store\", \"CONSOLE\");\n+    static void setup() {\n         System.setProperty(\"log.level\", \"TRACE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ea732a053ddabe1597b7a4327d6535ff33ac3"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8001034d6492944184dbf7af2f357ba13cff7655", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8001034d6492944184dbf7af2f357ba13cff7655", "committedDate": "2020-04-10T21:47:07Z", "message": "fix E2E test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373a48800b1eff4c286a715619c3bfa4ffcd1c29", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/373a48800b1eff4c286a715619c3bfa4ffcd1c29", "committedDate": "2020-04-10T21:48:32Z", "message": "fix E2E test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f6da58a7a0e2b5ff2ec929292b8007f05047da8", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6f6da58a7a0e2b5ff2ec929292b8007f05047da8", "committedDate": "2020-04-10T23:47:30Z", "message": "fix Benchmark and merge Michael's change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369c7c778e64299c872b592753012bb8feb3f729", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/369c7c778e64299c872b592753012bb8feb3f729", "committedDate": "2020-04-10T23:53:41Z", "message": "github action"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzEzNDE2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-391713416", "createdAt": "2020-04-11T00:06:15Z", "commit": {"oid": "6f6da58a7a0e2b5ff2ec929292b8007f05047da8"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDowNjoxNVrOGEIpSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMDowNjoxNVrOGEIpSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4OTEyOQ==", "bodyText": "this cannot throw interrupted exception, so you can remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#discussion_r406989129", "createdAt": "2020-04-11T00:06:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -52,13 +52,16 @@\n      * @param document         deployment document\n      * @param rootPackages     root level packages\n      * @return a kernel config map\n+     * @throws PackageLoadingException if any service package was unable to be loaded\n      * @throws InterruptedException when the running thread is interrupted\n      */\n     public Map<Object, Object> resolve(List<PackageIdentifier> packagesToDeploy, DeploymentDocument document,\n-                                       List<String> rootPackages) throws InterruptedException {\n+                                       List<String> rootPackages) throws PackageLoadingException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f6da58a7a0e2b5ff2ec929292b8007f05047da8"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35ba35026cd3d056ede16652c79c49e80c954bb3", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35ba35026cd3d056ede16652c79c49e80c954bb3", "committedDate": "2020-04-11T00:52:54Z", "message": "install kernel for benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bafe39d12aea9f85c4fe9f09a4d891f8a49b05fe", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bafe39d12aea9f85c4fe9f09a4d891f8a49b05fe", "committedDate": "2020-04-11T00:55:13Z", "message": "set packageStoreDirectory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3e0679633297583de051fcf429564a03e2bd298", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3e0679633297583de051fcf429564a03e2bd298", "committedDate": "2020-04-11T02:30:08Z", "message": "Merge branch 'master' into package_store_dependency_resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc11ecdb1d37cb1045fdd04ea445b27fe713d29d", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc11ecdb1d37cb1045fdd04ea445b27fe713d29d", "committedDate": "2020-04-13T18:42:29Z", "message": "More refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMzU3Njg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-392357685", "createdAt": "2020-04-13T18:58:01Z", "commit": {"oid": "fc11ecdb1d37cb1045fdd04ea445b27fe713d29d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57e1be4a6e283d80e00da769abe8485a4a5f55b", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f57e1be4a6e283d80e00da769abe8485a4a5f55b", "committedDate": "2020-04-13T19:34:27Z", "message": "Move new CustomerApp 0.9.0 and 0.9.1 to new recipe folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bd5754c61cbd9e025e99d9a3d54ef70ac6b1529", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6bd5754c61cbd9e025e99d9a3d54ef70ac6b1529", "committedDate": "2020-04-13T20:02:18Z", "message": "Merge branch 'master' into package_store_dependency_resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee33643819f9931070fcf9864da43ebd527ae600", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee33643819f9931070fcf9864da43ebd527ae600", "committedDate": "2020-04-13T20:06:37Z", "message": "Update DEVELOPING.md with E2E test instruction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7025983528e420929b5a28acf486ca9378fdba9", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a7025983528e420929b5a28acf486ca9378fdba9", "committedDate": "2020-04-13T20:08:08Z", "message": "remove unused Node in PackageStore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDAzNjIy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-392403622", "createdAt": "2020-04-13T20:09:59Z", "commit": {"oid": "a7025983528e420929b5a28acf486ca9378fdba9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83d09d1dde4aa1f1ead9c90461076150a2fd483", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c83d09d1dde4aa1f1ead9c90461076150a2fd483", "committedDate": "2020-04-13T20:10:09Z", "message": "Merge branch 'master' into package_store_dependency_resolver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDEzMzc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/162#pullrequestreview-392413377", "createdAt": "2020-04-13T20:25:10Z", "commit": {"oid": "c83d09d1dde4aa1f1ead9c90461076150a2fd483"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2421, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}