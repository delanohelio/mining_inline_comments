{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTIyNDI5", "number": 656, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0MlrOE3kGMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0MlrOE3kGMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk4NTQ0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0MlrOHw_Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1NTozOVrOHw_L5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODM1MA==", "bodyText": "Should the code instead handle TimeoutException thrown from get? remove the request from the subscriptions map. If CompletableFuture.get() times out, the whenComplete action is not run.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#discussion_r521128350", "createdAt": "2020-11-11T05:53:42Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -273,42 +273,36 @@ protected MqttClient(DeviceConfiguration deviceConfiguration, Spool spool, Sched\n     @SuppressWarnings(\"PMD.CloseResource\")\n     public synchronized void subscribe(SubscribeRequest request)\n             throws ExecutionException, InterruptedException, TimeoutException {\n-        try {\n-            AwsIotMqttClient connection = null;\n-            // Use the write scope when identifying the subscriptionTopics that exist\n-            try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n-                // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n-\n-                // If none of our existing subscriptions include (through wildcards) the new topic, then\n-                // go ahead and subscribe to it\n-                Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n-                        findExistingSubscriberForTopic(request.getTopic());\n-                if (existingConnection.isPresent()) {\n-                    subscriptions.put(request, existingConnection.get().getValue());\n-                } else {\n-                    connection = getConnection(true);\n-                    subscriptions.put(request, connection);\n-                }\n+        AwsIotMqttClient connection = null;\n+        // Use the write scope when identifying the subscriptionTopics that exist\n+        try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n+            // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n+\n+            // If none of our existing subscriptions include (through wildcards) the new topic, then\n+            // go ahead and subscribe to it\n+            Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n+                    findExistingSubscriberForTopic(request.getTopic());\n+            if (existingConnection.isPresent()) {\n+                subscriptions.put(request, existingConnection.get().getValue());\n+            } else {\n+                connection = getConnection(true);\n+                subscriptions.put(request, connection);\n             }\n+        }\n \n-            try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n-                // Connection isn't null, so we should subscribe to the topic\n-                if (connection != null) {\n-                    AwsIotMqttClient finalConnection = connection;\n-                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n-                        if (t == null) {\n-                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n-                        } else {\n-                            subscriptions.remove(request);\n-                            logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n-                        }\n-                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n-                }\n+        try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n+            // Connection isn't null, so we should subscribe to the topic\n+            if (connection != null) {\n+                AwsIotMqttClient finalConnection = connection;\n+                connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                    if (t == null) {\n+                        subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                    } else {\n+                        subscriptions.remove(request);\n+                        logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n+                    }\n+                }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n             }\n-        } catch (ExecutionException e) {\n-            // If subscribing failed, then clean up the failed subscription callback\n-            subscriptions.remove(request);\n-            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODYwMQ==", "bodyText": "No, not necessarily. If it times out, then the whenComplete will still run in the event that it does finish at some later point.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#discussion_r521128601", "createdAt": "2020-11-11T05:54:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -273,42 +273,36 @@ protected MqttClient(DeviceConfiguration deviceConfiguration, Spool spool, Sched\n     @SuppressWarnings(\"PMD.CloseResource\")\n     public synchronized void subscribe(SubscribeRequest request)\n             throws ExecutionException, InterruptedException, TimeoutException {\n-        try {\n-            AwsIotMqttClient connection = null;\n-            // Use the write scope when identifying the subscriptionTopics that exist\n-            try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n-                // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n-\n-                // If none of our existing subscriptions include (through wildcards) the new topic, then\n-                // go ahead and subscribe to it\n-                Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n-                        findExistingSubscriberForTopic(request.getTopic());\n-                if (existingConnection.isPresent()) {\n-                    subscriptions.put(request, existingConnection.get().getValue());\n-                } else {\n-                    connection = getConnection(true);\n-                    subscriptions.put(request, connection);\n-                }\n+        AwsIotMqttClient connection = null;\n+        // Use the write scope when identifying the subscriptionTopics that exist\n+        try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n+            // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n+\n+            // If none of our existing subscriptions include (through wildcards) the new topic, then\n+            // go ahead and subscribe to it\n+            Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n+                    findExistingSubscriberForTopic(request.getTopic());\n+            if (existingConnection.isPresent()) {\n+                subscriptions.put(request, existingConnection.get().getValue());\n+            } else {\n+                connection = getConnection(true);\n+                subscriptions.put(request, connection);\n             }\n+        }\n \n-            try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n-                // Connection isn't null, so we should subscribe to the topic\n-                if (connection != null) {\n-                    AwsIotMqttClient finalConnection = connection;\n-                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n-                        if (t == null) {\n-                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n-                        } else {\n-                            subscriptions.remove(request);\n-                            logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n-                        }\n-                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n-                }\n+        try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n+            // Connection isn't null, so we should subscribe to the topic\n+            if (connection != null) {\n+                AwsIotMqttClient finalConnection = connection;\n+                connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                    if (t == null) {\n+                        subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                    } else {\n+                        subscriptions.remove(request);\n+                        logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n+                    }\n+                }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n             }\n-        } catch (ExecutionException e) {\n-            // If subscribing failed, then clean up the failed subscription callback\n-            subscriptions.remove(request);\n-            throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODM1MA=="}, "originalCommit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODkzMw==", "bodyText": "If subscribe is retried, then it will still retry because the subscription hasn't been added to subscriptionTopics yet (even though it is in subscriptions, subscriptionTopics is what is used to prevent further subscribe requests).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#discussion_r521128933", "createdAt": "2020-11-11T05:55:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -273,42 +273,36 @@ protected MqttClient(DeviceConfiguration deviceConfiguration, Spool spool, Sched\n     @SuppressWarnings(\"PMD.CloseResource\")\n     public synchronized void subscribe(SubscribeRequest request)\n             throws ExecutionException, InterruptedException, TimeoutException {\n-        try {\n-            AwsIotMqttClient connection = null;\n-            // Use the write scope when identifying the subscriptionTopics that exist\n-            try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n-                // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n-\n-                // If none of our existing subscriptions include (through wildcards) the new topic, then\n-                // go ahead and subscribe to it\n-                Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n-                        findExistingSubscriberForTopic(request.getTopic());\n-                if (existingConnection.isPresent()) {\n-                    subscriptions.put(request, existingConnection.get().getValue());\n-                } else {\n-                    connection = getConnection(true);\n-                    subscriptions.put(request, connection);\n-                }\n+        AwsIotMqttClient connection = null;\n+        // Use the write scope when identifying the subscriptionTopics that exist\n+        try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n+            // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n+\n+            // If none of our existing subscriptions include (through wildcards) the new topic, then\n+            // go ahead and subscribe to it\n+            Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n+                    findExistingSubscriberForTopic(request.getTopic());\n+            if (existingConnection.isPresent()) {\n+                subscriptions.put(request, existingConnection.get().getValue());\n+            } else {\n+                connection = getConnection(true);\n+                subscriptions.put(request, connection);\n             }\n+        }\n \n-            try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n-                // Connection isn't null, so we should subscribe to the topic\n-                if (connection != null) {\n-                    AwsIotMqttClient finalConnection = connection;\n-                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n-                        if (t == null) {\n-                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n-                        } else {\n-                            subscriptions.remove(request);\n-                            logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n-                        }\n-                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n-                }\n+        try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n+            // Connection isn't null, so we should subscribe to the topic\n+            if (connection != null) {\n+                AwsIotMqttClient finalConnection = connection;\n+                connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                    if (t == null) {\n+                        subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                    } else {\n+                        subscriptions.remove(request);\n+                        logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n+                    }\n+                }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n             }\n-        } catch (ExecutionException e) {\n-            // If subscribing failed, then clean up the failed subscription callback\n-            subscriptions.remove(request);\n-            throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODM1MA=="}, "originalCommit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 206, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}