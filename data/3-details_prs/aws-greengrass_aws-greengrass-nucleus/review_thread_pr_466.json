{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjQ1ODY1", "number": 466, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDowMzowM1rOEmTkag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxMDo1MlrOEmTqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjAxOTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDowMzowM1rOHWQZVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMjowODozMlrOHWTgKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5OTM1MA==", "bodyText": "Why do you need .get() on this one?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/466#discussion_r493099350", "createdAt": "2020-09-23T00:03:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -155,15 +165,15 @@ void reconnect() throws TimeoutException, ExecutionException, InterruptedExcepti\n         }\n     }\n \n-    private int getTimeout() {\n+    int getTimeout() {\n         return Coerce.toInt(mqttTopics.findOrDefault(\n                 MqttClient.DEFAULT_MQTT_OPERATION_TIMEOUT, MqttClient.MQTT_OPERATION_TIMEOUT_KEY));\n     }\n \n     private void resubscribe() {\n         subscriptionTopics.forEach((key, value) -> {\n             try {\n-                subscribe(key, value);\n+                subscribe(key, value).get(getTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81d55c51e90a8599071adf560410fe5a9794205"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE1MDI0OQ==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/466#discussion_r493150249", "createdAt": "2020-09-23T02:08:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/AwsIotMqttClient.java", "diffHunk": "@@ -155,15 +165,15 @@ void reconnect() throws TimeoutException, ExecutionException, InterruptedExcepti\n         }\n     }\n \n-    private int getTimeout() {\n+    int getTimeout() {\n         return Coerce.toInt(mqttTopics.findOrDefault(\n                 MqttClient.DEFAULT_MQTT_OPERATION_TIMEOUT, MqttClient.MQTT_OPERATION_TIMEOUT_KEY));\n     }\n \n     private void resubscribe() {\n         subscriptionTopics.forEach((key, value) -> {\n             try {\n-                subscribe(key, value);\n+                subscribe(key, value).get(getTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5OTM1MA=="}, "originalCommit": {"oid": "f81d55c51e90a8599071adf560410fe5a9794205"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjAzNDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxMDo1MlrOHWQiCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0MjowNVrOHWRCuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMTU3Nw==", "bodyText": "same here. Is timeout needed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/466#discussion_r493101577", "createdAt": "2020-09-23T00:10:52Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -194,11 +195,17 @@ public synchronized void subscribe(SubscribeRequest request)\n             try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n                 // Connection isn't null, so we should subscribe to the topic\n                 if (connection != null) {\n-                    connection.subscribe(request.getTopic(), request.getQos());\n-                    subscriptionTopics.put(new MqttTopic(request.getTopic()), connection);\n+                    AwsIotMqttClient finalConnection = connection;\n+                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                        if (t == null) {\n+                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                        } else {\n+                            subscriptions.remove(request);\n+                        }\n+                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81d55c51e90a8599071adf560410fe5a9794205"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTk0NQ==", "bodyText": "The get is called so it can throw an error if there is one. The timeout is there so we don't block forever", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/466#discussion_r493109945", "createdAt": "2020-09-23T00:42:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -194,11 +195,17 @@ public synchronized void subscribe(SubscribeRequest request)\n             try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n                 // Connection isn't null, so we should subscribe to the topic\n                 if (connection != null) {\n-                    connection.subscribe(request.getTopic(), request.getQos());\n-                    subscriptionTopics.put(new MqttTopic(request.getTopic()), connection);\n+                    AwsIotMqttClient finalConnection = connection;\n+                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                        if (t == null) {\n+                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                        } else {\n+                            subscriptions.remove(request);\n+                        }\n+                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMTU3Nw=="}, "originalCommit": {"oid": "f81d55c51e90a8599071adf560410fe5a9794205"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 547, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}