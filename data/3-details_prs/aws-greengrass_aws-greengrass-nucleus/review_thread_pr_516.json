{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjc5MTg1", "number": 516, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyMjo1N1rOEssuHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMjoyMVrOEtNqtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA1NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyMjo1N1rOHgFU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozNDozMlrOHgFsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw==", "bodyText": "does it need a new decorator each time?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503403757", "createdAt": "2020-10-12T16:22:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODA1MQ==", "bodyText": "your right - this could be a single instance\nfor the UserDecorate is sets a user/group which I'm not sure you would want to reuse (although we could clear out the fields after calling decorate)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503408051", "createdAt": "2020-10-12T16:31:17Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTc0OQ==", "bodyText": "For user it would not be threadsafe in that case, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409749", "createdAt": "2020-10-12T16:34:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzc1Nw=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA2MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyNToxMFrOHgFZcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMDozODo0OVrOHg-KkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg==", "bodyText": "why do we need this? this will do sudo -E -u <user> -- <command>? Why is -- needed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503404912", "createdAt": "2020-10-12T16:25:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNzA1Mw==", "bodyText": "the \"--\" is to tell sudo to stop parsing args. Otherwise your command could be something like -u root rm -rf /", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503407053", "createdAt": "2020-10-12T16:29:26Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMDE2OA==", "bodyText": "However if user decorator is null then it's not parsed. Can user provide '-u root -rm -rf / ' in command and not setting withUser?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503420168", "createdAt": "2020-10-12T16:54:40Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyODU1OA==", "bodyText": "If you don't set the withUser or withUserGroup on Exec, then the userDecorator is null and it doesn't get applied.\nIf you have a null user, then it won't decorate the command. It returns the command un-decorated.\nIn both these cases, no sudo is added. In your example, it would execute the command -u root rm -rf / and fail because -u is not a valid command.\nIf they are executing it in the shell, the shell decorate would prefix sh -c and it would execute sh -c -u root rm -rf / and fail for the same reason", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503428558", "createdAt": "2020-10-12T17:11:43Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NTQ1NA==", "bodyText": "So I guess, if user type in 'sudo -u root rm -rf' it will be translated to 'sh -c sudo rm ...' and failed with 'sudo not found' error?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503475454", "createdAt": "2020-10-12T18:51:55Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMjExNg==", "bodyText": "You wouldn't get a 'sudo not found' error, unless I misunderstand you.\nA user can create a recipe and put sudo -u root rm -rf / as the command. There is nothing stopping them from doing that.\nThey can add that as a lifecycle step for a component. If a user is set for the component (or if they have configured a default runas user), then it would translate to:\nsudo -u <user> -- sh -c sudo -u root rm -rf / which should fail unless the user has a passwordless sudo access\nIf no user is set, and there is no default, then it would just run as sh -c sudo -u root rm -rf /\nIf the user running the kernel is root, or if the user running the kernel has sudo priviliges, this would execute and do bad things.\nThere isn't much we can do to stop that.\nIf the user actually wants to run the lifecycle step as root, there is a separate RequiresPrivilege flag which they can add to indicate whether the step needs to be executed as root (so they don't need to prefix it themselves with sudo -u root and we avoid the sudo -u <user> -- sudo -u root problem)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503512116", "createdAt": "2020-10-12T20:16:36Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMzNDk5Mw==", "bodyText": "", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504334993", "createdAt": "2020-10-14T00:38:49Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;\n+        private String group;\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            // do nothing if no user set\n+            if (user == null) {\n+                return command;\n+            }\n+            int size = (group == null) ? 5 : 7;\n+            String[] ret = new String[command.length + size];\n+            ret[0] = \"sudo\";\n+            ret[1] = \"-E\";  // pass env vars through\n+            ret[2] = \"-u\";\n+            if (user.chars().allMatch(Character::isDigit)) {\n+                user = \"\\\\#\" + user;\n+            }\n+            ret[3] = user;\n+            if (group != null) {\n+                ret[4] = \"-g\";\n+                if (group.chars().allMatch(Character::isDigit)) {\n+                    group = \"\\\\#\" + group;\n+                }\n+                ret[5] = group;\n+            }\n+            ret[size - 1] = \"--\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNDkxMg=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA4OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozMzoyOFrOHgFqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozNDoxNFrOHgFrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTE4NA==", "bodyText": "Does this including UID?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409184", "createdAt": "2020-10-12T16:33:28Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTU5MQ==", "bodyText": "yeah - you'll see it checks if the string is numeric and appends \"\\#\" to the beginning of it - which is what sudo expects for uid/gid", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r503409591", "createdAt": "2020-10-12T16:34:14Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -58,15 +59,109 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     }\n \n     @Override\n-    public String[] getShellForCommand(String command) {\n-        return new String[]{\"sh\", \"-c\", command};\n+    public CommandDecorator getShellDecorator() {\n+        return new ShellDecorator();\n     }\n \n     @Override\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public UserDecorator getUserDecorator() {\n+        return new SudoDecorator();\n+    }\n+\n+    /**\n+     * Decorate a command to run in a shell.\n+     */\n+    public static class ShellDecorator implements CommandDecorator {\n+\n+        private static final String DEFAULT_SHELL = \"sh\";\n+        private static final String DEFAULT_ARG = \"-c\";\n+        private String shell;\n+        private String arg;\n+\n+        /**\n+         * Create a new instance using the default shell (sh).\n+         */\n+        public ShellDecorator() {\n+            this(DEFAULT_SHELL, DEFAULT_ARG);\n+        }\n+\n+        /**\n+         * Create a new instance for a given shell command and shell argument for taking in string input.\n+         * @param shell the shell.\n+         * @param arg optional argument for passing string data into the shell.\n+         */\n+        public ShellDecorator(String shell, String arg) {\n+            this.shell = shell;\n+            this.arg = arg;\n+        }\n+\n+        @Override\n+        public String[] decorate(String... command) {\n+            boolean hasArg = !Utils.isEmpty(arg);\n+            int size = hasArg ? 3 : 2;\n+            String[] ret = new String[size];\n+            ret[0] = shell;\n+            if (hasArg) {\n+                ret[1] = arg;\n+            }\n+            ret[size - 1] = String.join(\" \", command);\n+            return ret;\n+        }\n+    }\n+\n+    /**\n+     * Decorator for running a command as a different user/group with `sudo`.\n+     */\n+    @NoArgsConstructor\n+    public static class SudoDecorator implements UserDecorator {\n+        private String user;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwOTE4NA=="}, "originalCommit": {"oid": "56b35da521480ff96519e0228ea79479bb32d0d8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY3Mzc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowMzoxMFrOHgw7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxODoxNFrOHgxgDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODE5OQ==", "bodyText": "add GGExtension", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504118199", "createdAt": "2020-10-13T17:03:10Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzUwMw==", "bodyText": "To windows platform too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127503", "createdAt": "2020-10-13T17:18:14Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODE5OQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY3NzA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowNDowNFrOHgw9zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzoxODowNlrOHgxfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg==", "bodyText": "why \"arrayContaining\"? Won't that mistakenly accept wrong answers if the decorator added some extra garbage?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504118732", "createdAt": "2020-10-13T17:04:04Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {\n+\n+    private static String[] command = {\"echo\", \"hello\", \"world\"};\n+\n+    @Test\n+    public void GIVEN_no_user_and_no_group_WHEN_decorate_THEN_do_not_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator().decorate(command),\n+                is(arrayContaining(command)));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_and_group_WHEN_decorate_THEN_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .withGroup(\"bar\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"-g\", \"bar\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_numeric_user_and_group_WHEN_decorate_THEN_generate_sudo_with_prefix() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"100\")\n+                        .withGroup(\"200\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"\\\\#100\", \"-g\", \"\\\\#200\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_sudo_without_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"--\", \"echo\", \"hello\", \"world\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNjMwNg==", "bodyText": "It's a poorly named matcher -\nFrom the javadoc:\n\nCreates a matcher for arrays that matches when each item in the examined array is logically equal to the corresponding item in the specified items. For a positive match, the examined array must be of the same length as the number of specified items.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504126306", "createdAt": "2020-10-13T17:16:05Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {\n+\n+    private static String[] command = {\"echo\", \"hello\", \"world\"};\n+\n+    @Test\n+    public void GIVEN_no_user_and_no_group_WHEN_decorate_THEN_do_not_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator().decorate(command),\n+                is(arrayContaining(command)));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_and_group_WHEN_decorate_THEN_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .withGroup(\"bar\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"-g\", \"bar\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_numeric_user_and_group_WHEN_decorate_THEN_generate_sudo_with_prefix() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"100\")\n+                        .withGroup(\"200\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"\\\\#100\", \"-g\", \"\\\\#200\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_sudo_without_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"--\", \"echo\", \"hello\", \"world\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzQyNw==", "bodyText": "Ok, great", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127427", "createdAt": "2020-10-13T17:18:06Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/UnixPlatformTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+\n+public class UnixPlatformTest {\n+\n+    private static String[] command = {\"echo\", \"hello\", \"world\"};\n+\n+    @Test\n+    public void GIVEN_no_user_and_no_group_WHEN_decorate_THEN_do_not_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator().decorate(command),\n+                is(arrayContaining(command)));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_and_group_WHEN_decorate_THEN_generate_sudo_with_user_and_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .withGroup(\"bar\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"-g\", \"bar\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_numeric_user_and_group_WHEN_decorate_THEN_generate_sudo_with_prefix() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"100\")\n+                        .withGroup(\"200\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"\\\\#100\", \"-g\", \"\\\\#200\", \"--\", \"echo\", \"hello\", \"world\")));\n+    }\n+\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_sudo_without_group() {\n+        assertThat(new UnixPlatform.SudoDecorator()\n+                        .withUser(\"foo\")\n+                        .decorate(command),\n+                is(arrayContaining(\"sudo\", \"-E\", \"-u\", \"foo\", \"--\", \"echo\", \"hello\", \"world\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExODczMg=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzY3OTg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzowNDo0OFrOHgw_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDo1NDozMVrOHg5IVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ==", "bodyText": "why is this different from unix in that unix keeps all the arguments as separate entries? Why are they joined on \" \" on windows?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504119185", "createdAt": "2020-10-13T17:04:48Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyNzYwOA==", "bodyText": "from looking at the info about the command,  windows is expecting a single string argument of the command to run, - whereas sudo will execute the command with multiple arguments after the \"--\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504127608", "createdAt": "2020-10-13T17:18:26Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTM3Mw==", "bodyText": "Have you actually tried it yet on windows? Can we get a test which actually verifies the functionality?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504129373", "createdAt": "2020-10-13T17:21:22Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNjUxNA==", "bodyText": "I have an integration test that runs on linux - I can add one for windows too - is it ok if that is in a followup?\nrunas on windows is going to require some work to get right - at least on the windows server I've tested on, you have to enter the password of the user you are switching to at least once (and then you can provide the /savecred option to reuse the saved credentials)\nIt requires the command to be a single string though:\nrunas /user:foo cmd /k echo hello will fail and print the runas help message\nrunas /user:foo \"cmd /k echo hello\" will open a command prompt and output \"hello\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504236514", "createdAt": "2020-10-13T20:23:52Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNzczNA==", "bodyText": "OK we can deal with windows later. May want to create a backlog ticket", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504237734", "createdAt": "2020-10-13T20:26:03Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NTUzOQ==", "bodyText": "Windows doesn't allow user impersonation without credentials - we might need to do something like https://github.com/gfody/PowershellModules/tree/master/RunAs and require customers to store the password for the account they want to runas as a credential associated with the admin account\nI'm tempted to actually remove this as it's not going to work unless we have run runas /savecred on the box before hand (and the users password hasn't changed)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504245539", "createdAt": "2020-10-13T20:41:02Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0NjkwOQ==", "bodyText": "Even when running as the administrator it requires the password? If so, I think yeah we can't support it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504246909", "createdAt": "2020-10-13T20:43:46Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1MjUwMQ==", "bodyText": "I've removed the Windows RunAs implementation for now - it is not going to work the way we need it to without some effort - this needs to be revisited for Windows support", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504252501", "createdAt": "2020-10-13T20:54:31Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {\n+\n+    @Test\n+    public void GIVEN_no_user_WHEN_decorate_THEN_do_not_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"echo\", \"hello\")));\n+    }\n+    @Test\n+    public void GIVEN_user_WHEN_decorate_THEN_generate_runas() {\n+        assertThat(new WindowsPlatform.RunAsDecorator()\n+                        .withUser(\"foo@bar\")\n+                        .decorate(\"echo\", \"hello\"),\n+                is(arrayContaining(\"runas\", \"/user:foo@bar\", \"echo hello\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDExOTE4NQ=="}, "originalCommit": {"oid": "58bf5ac04f12b12e16f5f1382f14b7d81ff78ae2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODQ1MzAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMjoyMVrOHg4bdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMjoyMVrOHg4bdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MTAxNA==", "bodyText": "needs GGExtension", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/516#discussion_r504241014", "createdAt": "2020-10-13T20:32:21Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/util/platforms/WindowsPlatformTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util.platforms;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.arrayContaining;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+public class WindowsPlatformTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90985a15fefefffb6a643d84e83b3159c1f7c4bf"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 650, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}