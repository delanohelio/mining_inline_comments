{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDM2MjE2", "number": 328, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjowODo0MFrOERrMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDoyOTozOVrOESmxkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTY4OTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjowODo0MFrOG2hO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMTozNlrOG26y3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMDc5Nw==", "bodyText": "Use findOrDefault. Are our timeouts all specified in seconds?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r459820797", "createdAt": "2020-07-24T02:08:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTU4Mw==", "bodyText": "Changed - the name is a bit confusing though.\nfind finds a topic but findOrDefault returns the value... Not sure if we want to rename the findOrDefault. may be getValueOrDefault?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239583", "createdAt": "2020-07-24T19:11:36Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMDc5Nw=="}, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjI2NDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODoxNDo0OVrOG25L_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMjowMFrOG26zjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzI0Nw==", "bodyText": "Should we close exec if timeout?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460213247", "createdAt": "2020-07-24T18:14:49Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,\n+                TIMEOUT_NAMESPACE_TOPIC);\n+\n+        int timeoutInSec = timeoutTopic == null ? DEFAULT_BOOTSTRAP_TIMEOUT_SEC : Coerce.toInt(timeoutTopic);\n+\n+        try {\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap timed out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTc1Ng==", "bodyText": "Yes. I changed to use try-with-resource", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239756", "createdAt": "2020-07-24T19:12:00Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,71 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Runs the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     */\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight();\n+\n+        if (exec == null) {\n+            // no bootstrap command found\n+            return null;\n+        }\n+\n+        // timeout handling\n+        Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC,\n+                TIMEOUT_NAMESPACE_TOPIC);\n+\n+        int timeoutInSec = timeoutTopic == null ? DEFAULT_BOOTSTRAP_TIMEOUT_SEC : Coerce.toInt(timeoutTopic);\n+\n+        try {\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap timed out\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzI0Nw=="}, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjI2ODAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODoxNjowM1rOG25OYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMjozMVrOG260VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzg1OA==", "bodyText": "Are all default timeouts 2 min?\nMaybe vaguely mention \"default timeout\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460213858", "createdAt": "2020-07-24T18:16:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -305,8 +371,9 @@ public void handleError() throws InterruptedException {\n     /**\n      * Run one of the commands defined in the config on the command line.\n      *\n-     * @param name         name of the command to run (\"run\", \"install\", \"start\").\n-     * @param background   IntConsumer to receive the exit code. If null, the command will timeout after 2 minutes.\n+     * @param name         name of the command to run (\"run\", \"install\", \"startup\", \"bootstrap\").\n+     * @param background   IntConsumer to receive the exit code. If null, the command will run as a foreground process\n+     *                     and timeout after 2 minutes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTk1Ng==", "bodyText": "Yes. but the original comment here is actually run - the timeout is not controlled here. I updated the comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460239956", "createdAt": "2020-07-24T19:12:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -305,8 +371,9 @@ public void handleError() throws InterruptedException {\n     /**\n      * Run one of the commands defined in the config on the command line.\n      *\n-     * @param name         name of the command to run (\"run\", \"install\", \"start\").\n-     * @param background   IntConsumer to receive the exit code. If null, the command will timeout after 2 minutes.\n+     * @param name         name of the command to run (\"run\", \"install\", \"startup\", \"bootstrap\").\n+     * @param background   IntConsumer to receive the exit code. If null, the command will run as a foreground process\n+     *                     and timeout after 2 minutes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxMzg1OA=="}, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjI2OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODoxNjoyOFrOG25PPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMjo0OVrOG2604A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNDA3OQ==", "bodyText": "Is this used anywhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460214079", "createdAt": "2020-07-24T18:16:28Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0MDA5Ng==", "bodyText": "not anymore... good catch. removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460240096", "createdAt": "2020-07-24T19:12:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n import java.util.concurrent.ConcurrentLinkedDeque;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNDA3OQ=="}, "originalCommit": {"oid": "295fe18c9663d4bb4f7f3171066f69a38cc776ad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzAwOTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzoyNToxNlrOG3ANAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMzoyNToxNlrOG3ANAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyODE5Mw==", "bodyText": "101 for rebooting device. Also you can use the defined constants for 0, 100, and 101 in deployments/bootstrap.\nIs this func intended to be protected?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r460328193", "createdAt": "2020-07-24T23:25:16Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -230,6 +231,20 @@ public boolean isErrored() {\n         return !(getState().isHappy() && error == null);\n     }\n \n+    /**\n+     * Bootstrap and notify if a kernel/device restart is needed. Called when a component newly added to kernel, or the\n+     * version changes. Returns 0 for no-op, 100 for restarting kernel, 200 for restarting device, other code for\n+     * errors, and null if not configured.\n+     *\n+     * @return exit code; 0 for no-op, 100 for restarting kernel, 200 for restarting device, other code for errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkyMzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1ODo1NlrOG3zWBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo1ODo1NlrOG3zWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NjA4NQ==", "bodyText": "NIT extra line", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461166085", "createdAt": "2020-07-27T20:58:56Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkzMTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMToxNFrOG3za3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMToxNFrOG3za3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NzMyNQ==", "bodyText": "NIT: Add timeout value in exception message", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461167325", "createdAt": "2020-07-27T21:01:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap step timed out\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODkzMjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMTo0MVrOG3zbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowMTo0MVrOG3zbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2NzU1Nw==", "bodyText": "What's the exit value in this case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461167557", "createdAt": "2020-07-27T21:01:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -90,11 +96,60 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+\n+\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                throw new TimeoutException(\"Bootstrap step timed out\");\n+            }\n+\n+        } catch (IOException e) {\n+            logger.atError(\"bootstrap-process-close-error\").setCause(e).log(\"Error closing process at bootstrap step.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0NDYzOnYy", "diffSide": "RIGHT", "path": "README_CONFIG_SCHEMA.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNTowNlrOG3zixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNTowNlrOG3zixg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2OTM1MA==", "bodyText": "Nice!! I believe this also applies skipif", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461169350", "createdAt": "2020-07-27T21:05:06Z", "author": {"login": "ShirleyZheng92"}, "path": "README_CONFIG_SCHEMA.md", "diffHunk": "@@ -65,6 +65,11 @@ Root keys have to be recognized keys.\n services: \n <serviceName>:\n   lifecycle:\n+    bootstrap:\n+      script:\n+      timeout: # optional. timeout in number of seconds. Default to 120 sec.\n+      setenv: # key-value environment variables. optional, can override the parent 'setenv'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODk0ODY3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjoyMFrOG3zlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTowNjoyMFrOG3zlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MDAxNQ==", "bodyText": "NIT extra new lines", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461170015", "createdAt": "2020-07-27T21:06:20Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -248,4 +248,32 @@ void GIVEN_running_service_WHEN_setenv_config_changes_THEN_service_restarts() th\n \n         assertTrue(serviceRestarted.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_bootstrap_command_WHEN_bootstrap_THEN_command_runs_and_returns_exit_code() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_just_bootstrap.yaml\").toString());\n+\n+        GenericExternalService serviceWithJustBootstrap =\n+                (GenericExternalService) kernel.locate(\"service_with_just_bootstrap\");\n+\n+        assertEquals(147, serviceWithJustBootstrap.bootstrap());\n+\n+        GenericExternalService serviceWithJustBootstrapAndConfiguredTimeout =\n+                (GenericExternalService) kernel.locate(\"service_with_just_bootstrap_and_configured_timeout\");\n+        assertEquals(147, serviceWithJustBootstrapAndConfiguredTimeout.bootstrap());\n+    }\n+\n+    @Test\n+    void GIVEN_bootstrap_command_WHEN_runs_longer_than_120_sec_THEN_timeout_exception_is_thrown() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_just_bootstrap.yaml\").toString());\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eec5e1ed1454a1203b4d4213cb4aad77340620f8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTQ1MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDoyOTozOVrOG34SBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDoyOTozOVrOG34SBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0Njk4Mw==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nThis code uses '%s' to format int: timeoutInSec (declared at line 133). This is a potential locale-sensitive handling issue. It might cause errors in the handling and processing of the statement at line: 138. Consider formatting this data with '%d' instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/328#discussion_r461246983", "createdAt": "2020-07-28T00:29:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -94,11 +100,58 @@ public static String exit2String(int exitCode) {\n                 : \"exit(\" + ((exitCode << 24) >> 24) + \")\";\n     }\n \n+    /**\n+     * Run the command under 'bootstrap' and returns the exit code. The timeout can be configured with 'timeout' field\n+     * in seconds. If not configured, by default, it times out after 2 minutes.\n+     *\n+     * @return exit code of process; null if no bootstrap command found.\n+     * @throws InterruptedException when the command execution is interrupted.\n+     * @throws TimeoutException     when the command execution times out.\n+     */\n+    @Override\n+    public synchronized Integer bootstrap() throws InterruptedException, TimeoutException {\n+        // this is redundant because all lifecycle processes should have been before calling this method.\n+        // stopping here again to be safer\n+        stopAllLifecycleProcesses();\n+\n+        CountDownLatch timeoutLatch = new CountDownLatch(1);\n+        AtomicInteger atomicExitCode = new AtomicInteger();\n+\n+        // run the command at background thread so that the main thread can handle it when it times out\n+        // note that this could be a foreground process but it requires run() methods, ShellerRunner, and Exec's method\n+        // signature changes to deal with timeout, so we decided to go with background thread.\n+        try (Exec exec = run(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, exitCode -> {\n+            atomicExitCode.set(exitCode);\n+            timeoutLatch.countDown();\n+        }, lifecycleProcesses).getRight()) {\n+            if (exec == null) {\n+                // no bootstrap command found\n+                return null;\n+            }\n+\n+            // timeout handling\n+            int timeoutInSec = (int) config\n+                    .findOrDefault(DEFAULT_BOOTSTRAP_TIMEOUT_SEC, SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                            LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            boolean completedInTime = timeoutLatch.await(timeoutInSec, TimeUnit.SECONDS);\n+            if (!completedInTime) {\n+                String msg = String.format(\"Bootstrap step timed out after '%s' seconds.\", timeoutInSec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16bae349c5060906db8aa3774f21bc1e16bd722b"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4444, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}