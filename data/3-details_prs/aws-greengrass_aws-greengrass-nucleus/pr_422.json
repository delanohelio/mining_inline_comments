{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDcwMTgy", "number": 422, "title": "Make S3 integrity check mandatory, perform download only if necessary", "bodyText": "Issue #, if available:\nhttps://issues.amazon.com/issues/P37421163\nDescription of changes:\nMake S3 integrity check mandatory\nRefactored such that public components can use integrity check easily when cloud side changes for public component publish workflow are deployed\nPerform download only if necessary\nWhy is this change necessary:\nPart of this PR, i.e. making S3 download integrity check mandatory is required for M2, we were waiting for cloud to implement the workflow for adding digest and algorithm to recipe, now that's done so we're unblocked\nHow was this change tested:\nTests pass\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-09-09T19:11:26Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422", "merged": true, "mergeCommit": {"oid": "8fe86b19a699fd2bb454d3ed438f2e7127715790"}, "closed": true, "closedAt": "2020-09-10T01:46:15Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHRSVXgFqTQ4NTMzNjAxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHWEA2AFqTQ4NTQ5NTk5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzM2MDEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485336010", "createdAt": "2020-09-09T19:23:06Z", "commit": {"oid": "3756df0382d908dc6e4da3325702ad2cadfab728"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMzowNlrOHPWWXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxOToyMzowNlrOHPWWXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg1Njg2Mg==", "bodyText": "what if the algorithm and digest aren't specified?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485856862", "createdAt": "2020-09-09T19:23:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -3,16 +3,89 @@\n \n package com.aws.iot.evergreen.packagemanager.plugins;\n \n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.ArtifactChecksumMismatchException;\n import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n \n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n \n-public interface ArtifactDownloader {\n-    File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+public abstract class ArtifactDownloader {\n+    static final Logger logger = LogManager.getLogger(ArtifactDownloader.class);\n+    static final String ARTIFACT_DOWNLOAD_EXCEPTION_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+\n+    static void checkIntegrityAndSaveToStore(InputStream artifactObject, ComponentArtifact artifact,\n+                                             PackageIdentifier packageIdentifier, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        try (OutputStream artifactFile = Files.newOutputStream(saveToPath)) {\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3756df0382d908dc6e4da3325702ad2cadfab728"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3756df0382d908dc6e4da3325702ad2cadfab728", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3756df0382d908dc6e4da3325702ad2cadfab728", "committedDate": "2020-09-09T19:05:57Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}, "afterCommit": {"oid": "29a4f5093b3a1ff7d09e8f2e055b4b58948fc43a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29a4f5093b3a1ff7d09e8f2e055b4b58948fc43a", "committedDate": "2020-09-09T23:08:24Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29a4f5093b3a1ff7d09e8f2e055b4b58948fc43a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29a4f5093b3a1ff7d09e8f2e055b4b58948fc43a", "committedDate": "2020-09-09T23:08:24Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}, "afterCommit": {"oid": "ad0336dd7aa351eae8c15d62481afd6395e42096", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ad0336dd7aa351eae8c15d62481afd6395e42096", "committedDate": "2020-09-09T23:21:42Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a557731e911f963069943c885aa6d9fef558cc6", "committedDate": "2020-09-09T23:27:05Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad0336dd7aa351eae8c15d62481afd6395e42096", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ad0336dd7aa351eae8c15d62481afd6395e42096", "committedDate": "2020-09-09T23:21:42Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}, "afterCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a557731e911f963069943c885aa6d9fef558cc6", "committedDate": "2020-09-09T23:27:05Z", "message": "Make S3 integrity check mandatory, add optional integrity check for public artifacts, perform download only if necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDg2ODIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485486821", "createdAt": "2020-09-10T00:25:49Z", "commit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNTo0OVrOHPen7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNTo0OVrOHPen7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjQyOQ==", "bodyText": "use try with resources to close the input stream?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485992429", "createdAt": "2020-09-10T00:25:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -3,16 +3,109 @@\n \n package com.aws.iot.evergreen.packagemanager.plugins;\n \n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.ArtifactChecksumMismatchException;\n import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.util.Utils;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n \n-public interface ArtifactDownloader {\n-    File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+public abstract class ArtifactDownloader {\n+    static final Logger logger = LogManager.getLogger(ArtifactDownloader.class);\n+    static final String ARTIFACT_DOWNLOAD_EXCEPTION_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+\n+    static void checkIntegrityAndSaveToStore(InputStream artifactObject, ComponentArtifact artifact,\n+                                             PackageIdentifier packageIdentifier, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        try (OutputStream artifactFile = Files.newOutputStream(saveToPath)) {\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());\n+            byte[] buffer = new byte[1024];\n+            int readBytes = artifactObject.read(buffer);\n+            while (readBytes > -1) {\n+                // Compute digest as well as write to the file path\n+                messageDigest.update(buffer, 0, readBytes);\n+                artifactFile.write(buffer, 0, readBytes);\n+                readBytes = artifactObject.read(buffer);\n+            }\n+            artifactObject.close();\n+            String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n+            if (!digest.equals(artifact.getChecksum())) {\n+                // Handle failure in integrity check, delete bad file then throw\n+                Files.deleteIfExists(saveToPath);\n+                throw new ArtifactChecksumMismatchException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                                packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atDebug().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log(\"Passed integrity check\");\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ArtifactChecksumMismatchException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                            packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                            \"Algorithm requested for artifact checksum is not supported\"), e);\n+        }\n+    }\n+\n+    static boolean needsDownload(ComponentArtifact artifact, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        // Local recipes don't have digest or algorithm and that's expected, in such case, use the\n+        // locally present artifact. On the other hand, recipes downloaded from cloud will always\n+        // have digest and algorithm\n+        if (Files.exists(saveToPath) && !recipeHasDigest(artifact)) {\n+            return false;\n+        } else if (!Files.exists(saveToPath)) {\n+            if (recipeHasDigest(artifact)) {\n+                return true;\n+            } else {\n+                throw new PackageDownloadException(\n+                        \"No local artifact found and recipe does not have required digest information\");\n+            }\n+        }\n+\n+        // If the file already exists and has the right content, skip download\n+        InputStream existingArtifact = null;\n+        try {\n+            existingArtifact = Files.newInputStream(saveToPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDg3MDQw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485487040", "createdAt": "2020-09-10T00:26:35Z", "commit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNjozNVrOHPeoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyNjozNVrOHPeoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MjYxMQ==", "bodyText": "why is this commented out? When would we uncomment it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485992611", "createdAt": "2020-09-10T00:26:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -61,7 +62,23 @@ public File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifac\n                     String filename = extractFilename(url, disposition);\n \n                     try (InputStream inputStream = httpConn.getInputStream()) {\n+\n+                        // TODO : Remove this and uncomment the code below once cloud implementation for public\n+                        //  component publish workflow is ready\n                         Files.copy(inputStream, saveToPath.resolve(filename), StandardCopyOption.REPLACE_EXISTING);\n+\n+                        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDg3ODg3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485487887", "createdAt": "2020-09-10T00:29:21Z", "commit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyOToyMVrOHPerpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDoyOToyMVrOHPerpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5MzM4Mg==", "bodyText": "does this method close the input stream? It will need to, or else close it in this method", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485993382", "createdAt": "2020-09-10T00:29:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/S3Downloader.java", "diffHunk": "@@ -68,25 +63,20 @@ public File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifac\n         String key = s3PathMatcher.group(2);\n \n         try {\n-            // Get artifact from S3\n-            // TODO : Calculating hash for integrity check needs the whole object in memory,\n-            //  However it could be an issue in the case of large files, need to evaluate if\n-            //  there's a way to get around this\n-            byte[] artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n-\n-            // TODO : There is ongoing discussion on whether integrity check should be made mandatory\n-            //  and who should own calculating checksums i.e. customer vs greengrass cloud. Until\n-            //  that is resolved, integrity check here is made optional, it will be performed only if\n-            //  the downloaded recipe has checksum that can be used for validation\n-            // Perform integrity check\n-            if (!Utils.isEmpty(artifact.getChecksum()) && !Utils.isEmpty(artifact.getAlgorithm())) {\n-                performIntegrityCheck(artifactObject, artifact, packageIdentifier);\n+            Path filePath = saveToPath.resolve(extractFileName(key));\n+            // Skip download if not needed\n+            if (needsDownload(artifact, filePath)) {\n+                // Get artifact from S3\n+                InputStream artifactObject = getObject(bucket, key, artifact, packageIdentifier);\n+\n+                // Perform integrity check and save file to store\n+                checkIntegrityAndSaveToStore(artifactObject, artifact, packageIdentifier, filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cd2a92c64cf28a1903e92b71242776e8ba9ca0b", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9cd2a92c64cf28a1903e92b71242776e8ba9ca0b", "committedDate": "2020-09-10T00:37:21Z", "message": "Address comments"}, "afterCommit": {"oid": "eb4b450938d7e445cc45cc4fd1ef04c046369809", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb4b450938d7e445cc45cc4fd1ef04c046369809", "committedDate": "2020-09-10T00:40:26Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDg5Nzkz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485489793", "createdAt": "2020-09-10T00:35:29Z", "commit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozNToyOVrOHPeyrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDozNTozNlrOHPeywg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NTE4MQ==", "bodyText": "nit: add a constant for 4096 and above?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485995181", "createdAt": "2020-09-10T00:35:29Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -3,16 +3,109 @@\n \n package com.aws.iot.evergreen.packagemanager.plugins;\n \n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.ArtifactChecksumMismatchException;\n import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.util.Utils;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n \n-public interface ArtifactDownloader {\n-    File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+public abstract class ArtifactDownloader {\n+    static final Logger logger = LogManager.getLogger(ArtifactDownloader.class);\n+    static final String ARTIFACT_DOWNLOAD_EXCEPTION_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+\n+    static void checkIntegrityAndSaveToStore(InputStream artifactObject, ComponentArtifact artifact,\n+                                             PackageIdentifier packageIdentifier, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        try (OutputStream artifactFile = Files.newOutputStream(saveToPath)) {\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());\n+            byte[] buffer = new byte[1024];\n+            int readBytes = artifactObject.read(buffer);\n+            while (readBytes > -1) {\n+                // Compute digest as well as write to the file path\n+                messageDigest.update(buffer, 0, readBytes);\n+                artifactFile.write(buffer, 0, readBytes);\n+                readBytes = artifactObject.read(buffer);\n+            }\n+            artifactObject.close();\n+            String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n+            if (!digest.equals(artifact.getChecksum())) {\n+                // Handle failure in integrity check, delete bad file then throw\n+                Files.deleteIfExists(saveToPath);\n+                throw new ArtifactChecksumMismatchException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                                packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atDebug().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log(\"Passed integrity check\");\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ArtifactChecksumMismatchException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                            packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                            \"Algorithm requested for artifact checksum is not supported\"), e);\n+        }\n+    }\n+\n+    static boolean needsDownload(ComponentArtifact artifact, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        // Local recipes don't have digest or algorithm and that's expected, in such case, use the\n+        // locally present artifact. On the other hand, recipes downloaded from cloud will always\n+        // have digest and algorithm\n+        if (Files.exists(saveToPath) && !recipeHasDigest(artifact)) {\n+            return false;\n+        } else if (!Files.exists(saveToPath)) {\n+            if (recipeHasDigest(artifact)) {\n+                return true;\n+            } else {\n+                throw new PackageDownloadException(\n+                        \"No local artifact found and recipe does not have required digest information\");\n+            }\n+        }\n+\n+        // If the file already exists and has the right content, skip download\n+        InputStream existingArtifact = null;\n+        try {\n+            existingArtifact = Files.newInputStream(saveToPath);\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());\n+            byte[] buffer = new byte[4096];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NTIwMg==", "bodyText": "return true?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#discussion_r485995202", "createdAt": "2020-09-10T00:35:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -3,16 +3,109 @@\n \n package com.aws.iot.evergreen.packagemanager.plugins;\n \n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.exceptions.ArtifactChecksumMismatchException;\n import com.aws.iot.evergreen.packagemanager.exceptions.InvalidArtifactUriException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.util.Utils;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n \n-public interface ArtifactDownloader {\n-    File downloadToPath(PackageIdentifier packageIdentifier, ComponentArtifact artifact, Path saveToPath)\n+public abstract class ArtifactDownloader {\n+    static final Logger logger = LogManager.getLogger(ArtifactDownloader.class);\n+    static final String ARTIFACT_DOWNLOAD_EXCEPTION_FMT =\n+            \"Failed to download artifact %s for component %s-%s, reason: %s\";\n+\n+    static void checkIntegrityAndSaveToStore(InputStream artifactObject, ComponentArtifact artifact,\n+                                             PackageIdentifier packageIdentifier, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        try (OutputStream artifactFile = Files.newOutputStream(saveToPath)) {\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());\n+            byte[] buffer = new byte[1024];\n+            int readBytes = artifactObject.read(buffer);\n+            while (readBytes > -1) {\n+                // Compute digest as well as write to the file path\n+                messageDigest.update(buffer, 0, readBytes);\n+                artifactFile.write(buffer, 0, readBytes);\n+                readBytes = artifactObject.read(buffer);\n+            }\n+            artifactObject.close();\n+            String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n+            if (!digest.equals(artifact.getChecksum())) {\n+                // Handle failure in integrity check, delete bad file then throw\n+                Files.deleteIfExists(saveToPath);\n+                throw new ArtifactChecksumMismatchException(\n+                        String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                                packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                                \"Integrity check for downloaded artifact failed\"));\n+            }\n+            logger.atDebug().setEventType(\"download-artifact\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .addKeyValue(\"artifactUri\", artifact.getArtifactUri()).log(\"Passed integrity check\");\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new ArtifactChecksumMismatchException(\n+                    String.format(ARTIFACT_DOWNLOAD_EXCEPTION_FMT, artifact.getArtifactUri(),\n+                            packageIdentifier.getName(), packageIdentifier.getVersion().toString(),\n+                            \"Algorithm requested for artifact checksum is not supported\"), e);\n+        }\n+    }\n+\n+    static boolean needsDownload(ComponentArtifact artifact, Path saveToPath)\n+            throws PackageDownloadException, IOException {\n+        // Local recipes don't have digest or algorithm and that's expected, in such case, use the\n+        // locally present artifact. On the other hand, recipes downloaded from cloud will always\n+        // have digest and algorithm\n+        if (Files.exists(saveToPath) && !recipeHasDigest(artifact)) {\n+            return false;\n+        } else if (!Files.exists(saveToPath)) {\n+            if (recipeHasDigest(artifact)) {\n+                return true;\n+            } else {\n+                throw new PackageDownloadException(\n+                        \"No local artifact found and recipe does not have required digest information\");\n+            }\n+        }\n+\n+        // If the file already exists and has the right content, skip download\n+        InputStream existingArtifact = null;\n+        try {\n+            existingArtifact = Files.newInputStream(saveToPath);\n+            MessageDigest messageDigest = MessageDigest.getInstance(artifact.getAlgorithm());\n+            byte[] buffer = new byte[4096];\n+            int readBytes = existingArtifact.read(buffer);\n+            while (readBytes > -1) {\n+                messageDigest.update(buffer, 0, readBytes);\n+                readBytes = existingArtifact.read(buffer);\n+            }\n+            String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n+            return !digest.equals(artifact.getChecksum());\n+\n+        } catch (IOException | NoSuchAlgorithmException e) {\n+            // If error in checking the existing content, attempt fresh download\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a557731e911f963069943c885aa6d9fef558cc6"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583281208b872d7be9d226b77d879db3e8ad43b5", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/583281208b872d7be9d226b77d879db3e8ad43b5", "committedDate": "2020-09-10T00:45:16Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb4b450938d7e445cc45cc4fd1ef04c046369809", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb4b450938d7e445cc45cc4fd1ef04c046369809", "committedDate": "2020-09-10T00:40:26Z", "message": "Address comments"}, "afterCommit": {"oid": "583281208b872d7be9d226b77d879db3e8ad43b5", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/583281208b872d7be9d226b77d879db3e8ad43b5", "committedDate": "2020-09-10T00:45:16Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDk0NTQw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485494540", "createdAt": "2020-09-10T00:51:50Z", "commit": {"oid": "583281208b872d7be9d226b77d879db3e8ad43b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDk1OTkz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/422#pullrequestreview-485495993", "createdAt": "2020-09-10T00:57:00Z", "commit": {"oid": "583281208b872d7be9d226b77d879db3e8ad43b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}