{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjU1NzAw", "number": 281, "title": "Cancel deployment and override safe update in deployment", "bodyText": "Issue #, if available:\nDeployment Cancellation\nOverride safe update\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nManual testing, new tests have been added\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-06-15T16:45:34Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281", "merged": true, "mergeCommit": {"oid": "2823e4d84c681f2f2d271ee53ed8c56787cc3583"}, "closed": true, "closedAt": "2020-06-23T05:02:08Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrn4NRgFqTQzMTAxMzM2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABct5qPWAFqTQzNTM0NTg3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDEzMzY1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431013365", "createdAt": "2020-06-15T21:41:00Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo0MTowMFrOGkDuGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo0OTowMVrOGkD7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2Mjg3Mw==", "bodyText": "why is this message part of stdout context?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440462873", "createdAt": "2020-06-15T21:41:00Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -539,13 +550,73 @@ void GIVEN_service_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_\n         kernel.getContext().removeGlobalStateChangeListener(listener);\n     }\n \n+    @Test\n+    void GIVEN_kernel_running_single_service_WHEN_deployment_with_skip_safety_check_config_THEN_merge_without_checking_safety()\n+            throws Throwable {\n+\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"single_service.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        // WHEN\n+        CountDownLatch mainRestarted = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING) && oldState.equals(State.STARTING)) {\n+                mainRestarted.countDown();\n+            }\n+        });\n+        AtomicBoolean safeUpdateSkipped= new AtomicBoolean();\n+        Consumer<EvergreenStructuredLogMessage> listener = (m) -> {\n+            if (\"Deployment is configured to skip safety check, not waiting for safe time to update\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NDEwNA==", "bodyText": "did cloud add this already? If not, do we have an ETA?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440464104", "createdAt": "2020-06-15T21:43:47Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/SkipSafetyCheck.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"DeploymentId\": \"f7fe5b16-574a-11ea-82b4-0242ac130004\",\n+  \"RootPackages\": [\n+    \"NonDisruptableService\"\n+  ],\n+  \"Packages\": [\n+    {\n+      \"Name\": \"NonDisruptableService\",\n+      \"ResolvedVersion\": \"1.0.1\"\n+    }\n+  ],\n+  \"Timestamp\": 1592574829000,\n+  \"FailureHandlingPolicy\": \"DO_NOTHING\",\n+  \"DeploymentSafetyPolicy\": \"SKIP_SAFETY_CHECK\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NDMwNQ==", "bodyText": "these are redundant.\nAlso, add Windows. Going forward everything should be windows compatible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440464305", "createdAt": "2020-06-15T21:44:17Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/local_store_content/recipes/NonDisruptableService-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,21 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: NonDisruptableService\n+Description: A service that can be performing important task so should not be restarted if not safe\n+Publisher: Me\n+Version: '1.0.0'\n+Platforms:\n+  - ubuntu\n+  - debian", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NjMxNA==", "bodyText": "maybe add a comment here to explain why this is hardcoded.\nI'm fine with the hardcoding, but just a note would be helpful", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440466314", "createdAt": "2020-06-15T21:49:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -55,10 +56,10 @@ public static DeploymentDocument convertFromLocalOverrideRequestAndRoot(LocalOve\n         List<DeploymentPackageConfiguration> packageConfigurations =\n                 buildDeploymentPackageConfigurations(localOverrideRequest, newRootComponents);\n \n-\n         return DeploymentDocument.builder().timestamp(localOverrideRequest.getRequestTimestamp())\n                 .deploymentId(localOverrideRequest.getRequestId()).rootPackages(rootPackages)\n-                .deploymentPackageConfigurationList(packageConfigurations).build();\n+                .deploymentPackageConfigurationList(packageConfigurations)\n+                .deploymentSafetyPolicy(DeploymentSafetyPolicy.SKIP_SAFETY_CHECK).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDQ2Nzc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431046776", "createdAt": "2020-06-15T22:55:05Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1NTowNVrOGkFa4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMjo1NTowNVrOGkFa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MDcyMw==", "bodyText": "can you add comments on the different flows that can happen during cancellation. what happens when the deployment cannot be cancelled etc..", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440490723", "createdAt": "2020-06-15T22:55:05Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,10 +243,34 @@ private void finishCurrentDeployment() throws InterruptedException {\n \n     @SuppressWarnings(\"PMD.NullAssignment\")\n     private void cancelCurrentDeployment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDc0NDA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431074406", "createdAt": "2020-06-16T00:12:20Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDoxMjoyMVrOGkG13Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozMTo0N1rOGkHLUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNDAxMw==", "bodyText": "Does this error happen when no packages are found?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440514013", "createdAt": "2020-06-16T00:12:21Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -112,8 +112,9 @@ public PackageManager(GreengrassRepositoryDownloader greengrassArtifactDownloade\n             packageMetadataList.addAll(\n                     greengrassPackageServiceHelper.listAvailablePackageMetadata(packageName, versionRequirement));\n         } catch (PackageDownloadException e) {\n-            logger.atInfo(\"list-package-versions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNDk5MQ==", "bodyText": "Can we encapsulate the two variables into a class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440514991", "createdAt": "2020-06-16T00:15:45Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -29,6 +30,7 @@\n @Singleton\n public class UpdateSystemSafelyService extends EvergreenService {\n     private final Map<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final AtomicBoolean runningUpdateActions = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxODUzMA==", "bodyText": "Will this be able to handle situations where job1 is in progress, job2 is queued, and then job1 cancellation is received?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440518530", "createdAt": "2020-06-16T00:28:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -157,27 +158,28 @@ public void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentsQueue.peek();\n             if (deployment != null) {\n+                if (currentDeploymentTaskMetadata != null && deployment.isCancelled()) {\n+                    logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                            .log(\"Canceling the job\");\n+                    //Assuming cancel will either cancel the current job or wait till it finishes\n+                    cancelCurrentDeployment();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxOTUwNQ==", "bodyText": "I have a small request on this code. Can we encapsulate the workflow from ln122 to ln136 in servicesChangeManager class, so that it can be used both here and in rollback?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440519505", "createdAt": "2020-06-16T00:31:47Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -61,87 +62,93 @@\n     public Future<DeploymentResult> mergeInNewConfig(DeploymentDocument deploymentDocument,\n                                                      Map<Object, Object> newConfig) {\n         CompletableFuture<DeploymentResult> totallyCompleteFuture = new CompletableFuture<>();\n-        long timestamp = deploymentDocument.getTimestamp();\n \n         if (newConfig.get(SERVICES_NAMESPACE_TOPIC) == null) {\n-            kernel.getConfig().mergeMap(timestamp, newConfig);\n+            kernel.getConfig().mergeMap(deploymentDocument.getTimestamp(), newConfig);\n             totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.SUCCESSFUL, null));\n             return totallyCompleteFuture;\n         }\n \n-        Map<String, Object> serviceConfig = (Map<String, Object>) newConfig.get(SERVICES_NAMESPACE_TOPIC);\n-        AggregateServicesChangeManager servicesChangeManager =\n-                new AggregateServicesChangeManager(kernel, serviceConfig);\n+        if (performSafeUpdate(deploymentDocument.getDeploymentSafetyPolicy())) {\n+            kernel.getContext().get(UpdateSystemSafelyService.class)\n+                    .addUpdateAction(deploymentDocument.getDeploymentId(),\n+                            () -> updateActionForDeployment(newConfig, deploymentDocument, totallyCompleteFuture));\n+        } else {\n+            logger.atInfo().log(\"Deployment is configured to skip safety check, not waiting for safe time to update\");\n+            updateActionForDeployment(newConfig, deploymentDocument, totallyCompleteFuture);\n+        }\n \n+        return totallyCompleteFuture;\n+    }\n+\n+    private void updateActionForDeployment(Map<Object, Object> newConfig, DeploymentDocument deploymentDocument,\n+                                           CompletableFuture<DeploymentResult> totallyCompleteFuture) {\n         String deploymentId = deploymentDocument.getDeploymentId();\n-        kernel.getContext().get(UpdateSystemSafelyService.class).addUpdateAction(deploymentId, () -> {\n \n-            // if the update is cancelled, don't perform merge\n-            if (totallyCompleteFuture.isCancelled()) {\n+        // if the update is cancelled, don't perform merge\n+        if (totallyCompleteFuture.isCancelled()) {\n+            logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(\"deployment\", deploymentId)\n+                    .log(\"Future was cancelled so no need to go through with the update\");\n+            return;\n+        }\n+\n+        FailureHandlingPolicy failureHandlingPolicy = deploymentDocument.getFailureHandlingPolicy();\n+        if (isAutoRollbackRequested(failureHandlingPolicy)) {\n+            try {\n+                takeSnapshotForRollback(deploymentId);\n+            } catch (IOException e) {\n+                // Failed to record snapshot hence did not execute merge, no rollback needed\n+                logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n+                        .log(\"Failed to take a snapshot for rollback\");\n+                totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.FAILED_NO_STATE_CHANGE, e));\n                 return;\n             }\n+        }\n \n-            FailureHandlingPolicy failureHandlingPolicy = deploymentDocument.getFailureHandlingPolicy();\n-            if (isAutoRollbackRequested(failureHandlingPolicy)) {\n+        Map<String, Object> serviceConfig = (Map<String, Object>) newConfig.get(SERVICES_NAMESPACE_TOPIC);\n+        AggregateServicesChangeManager servicesChangeManager =\n+                new AggregateServicesChangeManager(kernel, serviceConfig);\n+\n+        // Get the timestamp before mergeMap(). It will be used to check whether services have started.\n+        long mergeTime = System.currentTimeMillis();\n+\n+        kernel.getConfig().mergeMap(deploymentDocument.getTimestamp(), newConfig);\n+        // wait until topic listeners finished processing mergeMap changes.\n+        kernel.getContext().runOnPublishQueue(() -> {\n+            // polling to wait for all services to be started.\n+            kernel.getContext().get(ExecutorService.class).execute(() -> {\n+                //TODO: Add timeout\n                 try {\n-                    takeSnapshotForRollback(deploymentId);\n-                } catch (IOException e) {\n-                    // Failed to record snapshot hence did not execute merge, no rollback needed\n-                    logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n-                            .log(\"Failed to take a snapshot for rollback\");\n-                    totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.FAILED_NO_STATE_CHANGE, e));\n-                    return;\n-                }\n-            }\n-            // Get the timestamp before mergeMap(). It will be used to check whether services have started.\n-            long mergeTime = System.currentTimeMillis();\n-\n-            kernel.getConfig().mergeMap(timestamp, newConfig);\n-            // wait until topic listeners finished processing mergeMap changes.\n-            kernel.getContext().runOnPublishQueue(() -> {\n-                // polling to wait for all services to be started.\n-                kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                    //TODO: Add timeout\n-                    try {\n-                        servicesChangeManager.startNewServices();\n-\n-                        // Restart any services that may have been broken before this deployment\n-                        // This is added to allow deployments to fix broken services\n-                        servicesChangeManager.reinstallBrokenServices();\n-\n-                        Set<EvergreenService> servicesToTrack = servicesChangeManager.servicesToTrack();\n-                        logger.atDebug(MERGE_CONFIG_EVENT_KEY).kv(\"serviceToTrack\", servicesToTrack)\n-                                .log(\"Applied new service config. Waiting for services to complete update\");\n-\n-                        waitForServicesToStart(servicesToTrack, totallyCompleteFuture, mergeTime);\n-                        logger.atDebug(MERGE_CONFIG_EVENT_KEY).log(\"new/updated services are running, will now remove\"\n-                                + \" old services\");\n-                        if (totallyCompleteFuture.isCancelled()) {\n-                            // TODO : Does this need rolling back to old config?\n-                            logger.atWarn(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                                    .log(\"merge-config-cancelled\");\n-                            return;\n-                        }\n-                        servicesChangeManager.removeObsoleteServices();\n-                        logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                                .log(\"All services updated\");\n-                        totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.SUCCESSFUL, null));\n-                    } catch (ServiceLoadException | InterruptedException | ServiceUpdateException\n-                            | ExecutionException e) {\n-                        logger.atError(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId).setCause(e)\n-                                .log(\"Deployment failed\");\n-                        if (isAutoRollbackRequested(failureHandlingPolicy)) {\n-                            rollback(deploymentId, totallyCompleteFuture, e, servicesChangeManager.toRollback());\n-                        } else {\n-                            totallyCompleteFuture\n-                                    .complete(new DeploymentResult(DeploymentStatus.FAILED_ROLLBACK_NOT_REQUESTED, e));\n-                        }\n+                    servicesChangeManager.startNewServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTM5MTc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431139177", "createdAt": "2020-06-16T03:44:33Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NDozM1rOGkKNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NDozM1rOGkKNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTE3Ng==", "bodyText": "Do we not need to handle this situation? the current behavior is to cancel the ongoing deployment when a new deployment shows up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440569176", "createdAt": "2020-06-16T03:44:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -157,27 +158,28 @@ public void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentsQueue.peek();\n             if (deployment != null) {\n+                if (currentDeploymentTaskMetadata != null && deployment.isCancelled()) {\n+                    logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                            .log(\"Canceling the job\");\n+                    //Assuming cancel will either cancel the current job or wait till it finishes\n+                    cancelCurrentDeployment();\n+                }\n                 if (currentDeploymentTaskMetadata != null && !deployment.getDeploymentType()\n                         .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n                     // deployment from another source, wait till the current deployment finish\n                     continue;\n                 }\n-                if (currentDeploymentTaskMetadata != null\n-                        && currentDeploymentTaskMetadata.getDeploymentType() != null) {\n-                    if (deployment.getId().equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment\n-                            .getDeploymentType().equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                        //Duplicate message and already processing this deployment so nothing is needed\n-                        deploymentsQueue.remove();\n-                        continue;\n-                    } else {\n-                        logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling the job\");\n-                        //Assuming cancel will either cancel the current job or wait till it finishes\n-                        cancelCurrentDeployment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQwNDk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431140498", "createdAt": "2020-06-16T03:49:24Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0OToyNFrOGkKRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0OToyNFrOGkKRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDI3NQ==", "bodyText": "This new deployment cancels any ongoing deployment. How do we ensure that its the right deployment that is getting cancelled.\nSay deployment A is going on and device just finished it. Deployment B came through and is in progress, If deployment A gets cancelled now, wouldn't deployment B get cancelled instead of A", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440570275", "createdAt": "2020-06-16T03:49:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -157,27 +158,28 @@ public void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentsQueue.peek();\n             if (deployment != null) {\n+                if (currentDeploymentTaskMetadata != null && deployment.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQxMTA5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431141109", "createdAt": "2020-06-16T03:51:32Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MTozM1rOGkKTnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MTozM1rOGkKTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDc4MA==", "bodyText": "can we rename deploymentprocess to deploymentResultFuture as it is an instance of DeploymentResult", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440570780", "createdAt": "2020-06-16T03:51:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,10 +243,34 @@ private void finishCurrentDeployment() throws InterruptedException {\n \n     @SuppressWarnings(\"PMD.NullAssignment\")\n     private void cancelCurrentDeployment() {\n-        //TODO: Make the deployment task be able to handle the interrupt\n-        // and wait till the job gets cancelled or is finished\n-        if (currentDeploymentTaskMetadata != null) {\n-            currentDeploymentTaskMetadata.getDeploymentProcess().cancel(true);\n+        if (currentDeploymentTaskMetadata.getDeploymentProcess() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQ1MjM1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431145235", "createdAt": "2020-06-16T04:06:46Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowNjo0NlrOGkKgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowNjo0NlrOGkKgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NDEzNQ==", "bodyText": "This is misleading, if the cancel is called after the L89 in updateActionForDeployment() then deployment goes forward, but this log would give the impression that the deployment was cancelled.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440574135", "createdAt": "2020-06-16T04:06:46Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -73,8 +87,34 @@ public DeploymentResult call()\n                 throw new RetryableDeploymentTaskFailureException(t);\n             }\n             throw new NonRetryableDeploymentTaskFailureException(t);\n-        } catch (InterruptedException | IOException | PackagingException e) {\n+        } catch (InterruptedException e) {\n+            // DeploymentTask received interrupt\n+            handleCancellation(preparePackagesFuture, deploymentMergeFuture);\n+            return null;\n+        } catch (IOException | PackagingException e) {\n             throw new RetryableDeploymentTaskFailureException(e);\n         }\n     }\n+\n+    /*\n+     * Handle deployment cancellation\n+     */\n+    private void handleCancellation(Future<Void> preparePackagesFuture,\n+                                    Future<DeploymentResult> deploymentMergeFuture) {\n+        // Stop downloading packages since the task was cancelled\n+        if (preparePackagesFuture != null && !preparePackagesFuture.isDone()) {\n+            preparePackagesFuture.cancel(true);\n+            logger.atInfo(DEPLOYMENT_TASK_EVENT_TYPE)\n+                    .kv(DEPLOYMENT_ID_LOGGING_KEY, deploymentDocument.getDeploymentId())\n+                    .log(\"Cancelled package download due to received interrupt\");\n+            return;\n+        }\n+        // Cancel deployment config merge future\n+        if (deploymentMergeFuture != null && !deploymentMergeFuture.isDone()) {\n+            deploymentMergeFuture.cancel(true);\n+            logger.atInfo(DEPLOYMENT_TASK_EVENT_TYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQ2MDgw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431146080", "createdAt": "2020-06-16T04:09:46Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowOTo0NlrOGkKjcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowOTo0NlrOGkKjcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NDgzMg==", "bodyText": "what happens if the current job is cancelled but there are other queued deployments? would this condition be true ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440574832", "createdAt": "2020-06-16T04:09:46Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -143,8 +143,15 @@\n             requestNextPendingJobDocument();\n             return;\n         }\n-        //TODO: If there was only one job, then indicate cancellation of that job.\n-        // Empty list will be received.\n+        if (jobs.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQ2NjI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431146626", "createdAt": "2020-06-16T04:11:41Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoxMTo0MVrOGkKlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoxMTo0MVrOGkKlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3NTI4OA==", "bodyText": "wouldnt returning the value of .remove be more meaning full? Should we make pendingActions concurrentHashMap?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440575288", "createdAt": "2020-06-16T04:11:41Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -76,6 +79,32 @@ protected synchronized void runUpdateActions() {\n         for (EvergreenService s : kernel.orderedDependencies()) {\n             s.disruptionCompleted(); // Notify disruption is over\n         }\n+        runningUpdateActions.set(false);\n+    }\n+\n+    /**\n+     * Check if a pending action with the tag currently exists.\n+     *\n+     * @param tag tag to identify an update action\n+     * @return true if there is a pending action for specified tag\n+     */\n+    public boolean hasPendingUpdateAction(String tag) {\n+        return pendingActions.containsKey(tag);\n+    }\n+\n+    /**\n+     * Discard a pending action if update actions are not already running.\n+     *\n+     * @param tag tag to identify an update action\n+     * @return true if all update actions are pending and requested action could be discarded, false if update actions\n+     *         were already in progress so it's not safe to discard the requested action\n+     */\n+    public boolean discardPendingUpdateAction(String tag) {\n+        if (runningUpdateActions.get()) {\n+            return false;\n+        }\n+        pendingActions.remove(tag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTU0OTQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431154941", "createdAt": "2020-06-16T04:41:47Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MTo0OFrOGkLA0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MTo0OFrOGkLA0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjM1Mg==", "bodyText": "If discard can ensure that the queued update was discarded without being picked up, we dont have to call cancel on deploymentProcess future. If the deployment is not using UpdateSystemSafelyService the discard will return false and then cancelling the deploymentProcess would make sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r440582352", "createdAt": "2020-06-16T04:41:48Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,10 +243,34 @@ private void finishCurrentDeployment() throws InterruptedException {\n \n     @SuppressWarnings(\"PMD.NullAssignment\")\n     private void cancelCurrentDeployment() {\n-        //TODO: Make the deployment task be able to handle the interrupt\n-        // and wait till the job gets cancelled or is finished\n-        if (currentDeploymentTaskMetadata != null) {\n-            currentDeploymentTaskMetadata.getDeploymentProcess().cancel(true);\n+        if (currentDeploymentTaskMetadata.getDeploymentProcess() != null) {\n+            if (currentDeploymentTaskMetadata.getDeploymentProcess().isDone()) {\n+                logger.atInfo().log(\"Deployment already finished processing, cannot cancel now\");\n+            } else {\n+                boolean canCancelDeployment = context.get(UpdateSystemSafelyService.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzIwMzg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-431720384", "createdAt": "2020-06-16T17:10:13Z", "commit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMDoxNFrOGklJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozOToxNVrOGkmMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMDYyNg==", "bodyText": "Also I feel this test might easily fail and very hard to debug if we rely on the trivial text match to set the safeUpdateSkipped. If someone changed the text thinking it's just logging/message, and this test will fail without explicit reason....", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441010626", "createdAt": "2020-06-16T17:10:14Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -539,13 +550,73 @@ void GIVEN_service_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_\n         kernel.getContext().removeGlobalStateChangeListener(listener);\n     }\n \n+    @Test\n+    void GIVEN_kernel_running_single_service_WHEN_deployment_with_skip_safety_check_config_THEN_merge_without_checking_safety()\n+            throws Throwable {\n+\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"single_service.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        // WHEN\n+        CountDownLatch mainRestarted = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING) && oldState.equals(State.STARTING)) {\n+                mainRestarted.countDown();\n+            }\n+        });\n+        AtomicBoolean safeUpdateSkipped= new AtomicBoolean();\n+        Consumer<EvergreenStructuredLogMessage> listener = (m) -> {\n+            if (\"Deployment is configured to skip safety check, not waiting for safe time to update\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2Mjg3Mw=="}, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNTM5Nw==", "bodyText": "Similar to above comment about trivial string match... I know it is very hard but we could discuss about if possible to verify the state with variables somehow.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441015397", "createdAt": "2020-06-16T17:18:29Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -314,6 +314,93 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    @Test\n+    @Order(6)\n+    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_safety_check_THEN_deployment_is_successful(\n+            ExtensionContext context) throws Exception {\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"AddNewServiceWithSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal and RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+        assertEquals(\"1.0.0\", kernel.findServiceTopic(\"NonDisruptableService\")\n+                .find(\"version\").getOnce());\n+\n+        ignoreExceptionUltimateCauseOfType(context, ServiceUpdateException.class);\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"SkipSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        DeploymentResult result = resultFuture.get(30, TimeUnit.SECONDS);\n+        services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal, RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+        assertEquals(\"1.0.1\", kernel.findServiceTopic(\"NonDisruptableService\")\n+                .find(\"version\").getOnce());\n+        assertEquals(DeploymentResult.DeploymentStatus.SUCCESSFUL, result.getDeploymentStatus());\n+    }\n+\n+    @Test\n+    @Order(7)\n+    void GIVEN_deployment_in_progress_WHEN_deployment_task_is_cancelled_THEN_stop_processing(\n+            ExtensionContext context) throws Exception {\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"AddNewServiceWithSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal and RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+\n+        CountDownLatch cdlUpdateStarted = new CountDownLatch(1);\n+        CountDownLatch cdlMergeCancelled = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m -> {\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if (messageOnStdout != null && messageOnStdout.contains(\"checkIfSafeToUpdate decided it is unsafe to update now\")) {\n+                cdlUpdateStarted.countDown();\n+            }\n+            if (messageOnStdout != null && messageOnStdout.contains(\"Cancelled deployment merge due to interrupt\")) {\n+                cdlMergeCancelled.countDown();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNjAyNQ==", "bodyText": "Is this because the polling frequency is every 30 seconds? Could we reduce it? It shouldn't take 2 minutes to cancel this simple deployment right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441016025", "createdAt": "2020-06-16T17:19:25Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -314,6 +314,93 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    @Test\n+    @Order(6)\n+    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_safety_check_THEN_deployment_is_successful(\n+            ExtensionContext context) throws Exception {\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"AddNewServiceWithSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal and RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+        assertEquals(\"1.0.0\", kernel.findServiceTopic(\"NonDisruptableService\")\n+                .find(\"version\").getOnce());\n+\n+        ignoreExceptionUltimateCauseOfType(context, ServiceUpdateException.class);\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"SkipSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        DeploymentResult result = resultFuture.get(30, TimeUnit.SECONDS);\n+        services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal, RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+        assertEquals(\"1.0.1\", kernel.findServiceTopic(\"NonDisruptableService\")\n+                .find(\"version\").getOnce());\n+        assertEquals(DeploymentResult.DeploymentStatus.SUCCESSFUL, result.getDeploymentStatus());\n+    }\n+\n+    @Test\n+    @Order(7)\n+    void GIVEN_deployment_in_progress_WHEN_deployment_task_is_cancelled_THEN_stop_processing(\n+            ExtensionContext context) throws Exception {\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"AddNewServiceWithSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal and RedSignal\n+        assertEquals(2, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"NonDisruptableService\"));\n+\n+        CountDownLatch cdlUpdateStarted = new CountDownLatch(1);\n+        CountDownLatch cdlMergeCancelled = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m -> {\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if (messageOnStdout != null && messageOnStdout.contains(\"checkIfSafeToUpdate decided it is unsafe to update now\")) {\n+                cdlUpdateStarted.countDown();\n+            }\n+            if (messageOnStdout != null && messageOnStdout.contains(\"Cancelled deployment merge due to interrupt\")) {\n+                cdlMergeCancelled.countDown();\n+            }\n+        };\n+        Slf4jLogAdapter.addGlobalListener(listener);\n+\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"UpdateServiceWithSafetyCheck.json\").toURI(),\n+                System.currentTimeMillis());\n+\n+        assertTrue(cdlUpdateStarted.await(60, TimeUnit.SECONDS));\n+        resultFuture.cancel(true);\n+\n+        assertTrue(cdlMergeCancelled.await(120, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNzgyMQ==", "bodyText": "Like the comments here. Very helpful!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441017821", "createdAt": "2020-06-16T17:22:28Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -196,4 +203,64 @@ void GIVEN_deployment_fails_due_to_service_broken_WHEN_failure_policy_is_rollbac\n                 .describeJobExecution(DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thingInfo.getThingName())\n                         .build()).execution().statusDetails().detailsMap().get(\"detailed-deployment-status\"));\n     }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_some_running_services_WHEN_cancel_event_received_and_kernel_is_waiting_for_safe_time_THEN_deployment_should_be_canceled() throws Exception {\n+        // First Deployment to have some services running in Kernel which has a safety check configured\n+        SetConfigurationRequest setRequest1 = new SetConfigurationRequest()\n+                .withTargetName(thingGroupName)\n+                .withTargetType(THING_GROUP_TARGET_TYPE)\n+                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n+                .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.0\"));\n+        PublishConfigurationResult publishResult1 = setAndPublishFleetConfiguration(setRequest1);\n+\n+        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n+                Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n+\n+        // Second deployment to update the service which is currently running an important task so deployment should\n+        // wait for a safe time to update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxOTk1OQ==", "bodyText": "Do we need this method? Seems it's more clear if just put this one line as condition.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441019959", "createdAt": "2020-06-16T17:26:07Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -282,6 +290,13 @@ private boolean isAutoRollbackRequested(FailureHandlingPolicy failureHandlingPol\n         return FailureHandlingPolicy.ROLLBACK.equals(failureHandlingPolicy);\n     }\n \n+    /*\n+     * Evaluate if the customer specified deployment safety policy is to perform deployment at a safe time\n+     */\n+    private boolean performSafeUpdate(DeploymentSafetyPolicy deploymentSafetyPolicy) {\n+        return DeploymentSafetyPolicy.CHECK_SAFETY.equals(deploymentSafetyPolicy);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzU5Nw==", "bodyText": "We talked about this before but we didn't have to change at the time - AggregateServicesChangeManager could and should just be a singleton. It right now stores some states like, old services and new services but those could just be simple POJO or DTO - the manager should just take them as input and do the logic. No need to initialize a new AggregateServicesChangeManager every time for a new deployment.\nMaybe now it's the time to refactor this, as this class begins to grow to become unmanageable potentially. With AggregateServicesChangeManager separating out, unit test could also be added for it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441023597", "createdAt": "2020-06-16T17:32:04Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -61,87 +62,93 @@\n     public Future<DeploymentResult> mergeInNewConfig(DeploymentDocument deploymentDocument,\n                                                      Map<Object, Object> newConfig) {\n         CompletableFuture<DeploymentResult> totallyCompleteFuture = new CompletableFuture<>();\n-        long timestamp = deploymentDocument.getTimestamp();\n \n         if (newConfig.get(SERVICES_NAMESPACE_TOPIC) == null) {\n-            kernel.getConfig().mergeMap(timestamp, newConfig);\n+            kernel.getConfig().mergeMap(deploymentDocument.getTimestamp(), newConfig);\n             totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.SUCCESSFUL, null));\n             return totallyCompleteFuture;\n         }\n \n-        Map<String, Object> serviceConfig = (Map<String, Object>) newConfig.get(SERVICES_NAMESPACE_TOPIC);\n-        AggregateServicesChangeManager servicesChangeManager =\n-                new AggregateServicesChangeManager(kernel, serviceConfig);\n+        if (performSafeUpdate(deploymentDocument.getDeploymentSafetyPolicy())) {\n+            kernel.getContext().get(UpdateSystemSafelyService.class)\n+                    .addUpdateAction(deploymentDocument.getDeploymentId(),\n+                            () -> updateActionForDeployment(newConfig, deploymentDocument, totallyCompleteFuture));\n+        } else {\n+            logger.atInfo().log(\"Deployment is configured to skip safety check, not waiting for safe time to update\");\n+            updateActionForDeployment(newConfig, deploymentDocument, totallyCompleteFuture);\n+        }\n \n+        return totallyCompleteFuture;\n+    }\n+\n+    private void updateActionForDeployment(Map<Object, Object> newConfig, DeploymentDocument deploymentDocument,\n+                                           CompletableFuture<DeploymentResult> totallyCompleteFuture) {\n         String deploymentId = deploymentDocument.getDeploymentId();\n-        kernel.getContext().get(UpdateSystemSafelyService.class).addUpdateAction(deploymentId, () -> {\n \n-            // if the update is cancelled, don't perform merge\n-            if (totallyCompleteFuture.isCancelled()) {\n+        // if the update is cancelled, don't perform merge\n+        if (totallyCompleteFuture.isCancelled()) {\n+            logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(\"deployment\", deploymentId)\n+                    .log(\"Future was cancelled so no need to go through with the update\");\n+            return;\n+        }\n+\n+        FailureHandlingPolicy failureHandlingPolicy = deploymentDocument.getFailureHandlingPolicy();\n+        if (isAutoRollbackRequested(failureHandlingPolicy)) {\n+            try {\n+                takeSnapshotForRollback(deploymentId);\n+            } catch (IOException e) {\n+                // Failed to record snapshot hence did not execute merge, no rollback needed\n+                logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n+                        .log(\"Failed to take a snapshot for rollback\");\n+                totallyCompleteFuture.complete(new DeploymentResult(DeploymentStatus.FAILED_NO_STATE_CHANGE, e));\n                 return;\n             }\n+        }\n \n-            FailureHandlingPolicy failureHandlingPolicy = deploymentDocument.getFailureHandlingPolicy();\n-            if (isAutoRollbackRequested(failureHandlingPolicy)) {\n+        Map<String, Object> serviceConfig = (Map<String, Object>) newConfig.get(SERVICES_NAMESPACE_TOPIC);\n+        AggregateServicesChangeManager servicesChangeManager =\n+                new AggregateServicesChangeManager(kernel, serviceConfig);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNzY3Nw==", "bodyText": "From DeploymentTask got cancelled? How is this working together with line 66-70? Are they the same interruption but happen at the different time? If that's the case should we limit the try-catch block scope?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441027677", "createdAt": "2020-06-16T17:39:15Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -73,8 +87,34 @@ public DeploymentResult call()\n                 throw new RetryableDeploymentTaskFailureException(t);\n             }\n             throw new NonRetryableDeploymentTaskFailureException(t);\n-        } catch (InterruptedException | IOException | PackagingException e) {\n+        } catch (InterruptedException e) {\n+            // DeploymentTask received interrupt\n+            handleCancellation(preparePackagesFuture, deploymentMergeFuture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50162b5e3826fef38918929073a7b44da70869df"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "088af5d173e13c1c23d462beea95f43033d5ad30", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/088af5d173e13c1c23d462beea95f43033d5ad30", "committedDate": "2020-06-17T03:41:02Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "9aff74a47b010c589c5a14f4b40ec82d24e56e4f", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9aff74a47b010c589c5a14f4b40ec82d24e56e4f", "committedDate": "2020-06-17T03:41:43Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9aff74a47b010c589c5a14f4b40ec82d24e56e4f", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9aff74a47b010c589c5a14f4b40ec82d24e56e4f", "committedDate": "2020-06-17T03:41:43Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "751c4cfccabf05628223d120b3e255ec3987aaa0", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/751c4cfccabf05628223d120b3e255ec3987aaa0", "committedDate": "2020-06-17T05:34:02Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "751c4cfccabf05628223d120b3e255ec3987aaa0", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/751c4cfccabf05628223d120b3e255ec3987aaa0", "committedDate": "2020-06-17T05:34:02Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "db9438d51952bb693eb0bb0a9e2fe261c78d5a5e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/db9438d51952bb693eb0bb0a9e2fe261c78d5a5e", "committedDate": "2020-06-17T17:41:41Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db9438d51952bb693eb0bb0a9e2fe261c78d5a5e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/db9438d51952bb693eb0bb0a9e2fe261c78d5a5e", "committedDate": "2020-06-17T17:41:41Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "075e5d6f9bbcc01b33b9773b4e36b0ba6e01e64e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/075e5d6f9bbcc01b33b9773b4e36b0ba6e01e64e", "committedDate": "2020-06-17T18:03:21Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "075e5d6f9bbcc01b33b9773b4e36b0ba6e01e64e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/075e5d6f9bbcc01b33b9773b4e36b0ba6e01e64e", "committedDate": "2020-06-17T18:03:21Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "05d2c3a6c05dba8befd6311dfd057f6fef776d89", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/05d2c3a6c05dba8befd6311dfd057f6fef776d89", "committedDate": "2020-06-17T18:07:12Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05d2c3a6c05dba8befd6311dfd057f6fef776d89", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/05d2c3a6c05dba8befd6311dfd057f6fef776d89", "committedDate": "2020-06-17T18:07:12Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "1f43304b36853bbaf2db2a245047dc22365909dc", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f43304b36853bbaf2db2a245047dc22365909dc", "committedDate": "2020-06-17T19:33:06Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f43304b36853bbaf2db2a245047dc22365909dc", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f43304b36853bbaf2db2a245047dc22365909dc", "committedDate": "2020-06-17T19:33:06Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "2fb11f6c34e6a8363e91e52e2e205eb330c7d674", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2fb11f6c34e6a8363e91e52e2e205eb330c7d674", "committedDate": "2020-06-17T19:38:01Z", "message": "Address comments, implement cancellation with queued jobs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzI2MTIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-432726120", "createdAt": "2020-06-17T19:53:29Z", "commit": {"oid": "2fb11f6c34e6a8363e91e52e2e205eb330c7d674"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1MzoyOVrOGlVGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTo1MzoyOVrOGlVGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc5NjE0Ng==", "bodyText": "instead of doing a locate and passing the kernel, did you consider just injecting a reference to the DeploymentService class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r441796146", "createdAt": "2020-06-17T19:53:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -570,6 +591,27 @@ protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent>\n         logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n     }\n \n+    private void evaluateCancellationAndCancelDeploymentIfNeeded() {\n+        try {\n+            EvergreenService deploymentServiceLocateResult = kernel.locate(DeploymentService.DEPLOYMENT_SERVICE_TOPICS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fb11f6c34e6a8363e91e52e2e205eb330c7d674"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fb11f6c34e6a8363e91e52e2e205eb330c7d674", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2fb11f6c34e6a8363e91e52e2e205eb330c7d674", "committedDate": "2020-06-17T19:38:01Z", "message": "Address comments, implement cancellation with queued jobs"}, "afterCommit": {"oid": "9d46ec1f6a9e4602b22af90821f638f8dbfef813", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9d46ec1f6a9e4602b22af90821f638f8dbfef813", "committedDate": "2020-06-17T22:11:05Z", "message": "Changes due to new cloud sdk"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d46ec1f6a9e4602b22af90821f638f8dbfef813", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9d46ec1f6a9e4602b22af90821f638f8dbfef813", "committedDate": "2020-06-17T22:11:05Z", "message": "Changes due to new cloud sdk"}, "afterCommit": {"oid": "d68f62c4b8aa9d6207b3a1f6efce51b34c6f5f6a", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d68f62c4b8aa9d6207b3a1f6efce51b34c6f5f6a", "committedDate": "2020-06-17T23:27:43Z", "message": "Changes due to new cloud sdk"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDQ4NTQy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-433448542", "createdAt": "2020-06-18T16:23:40Z", "commit": {"oid": "eb7514f69e09c054af5e4054a413f3ce262233e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyMzo0MFrOGl26Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mjo0OVrOGl3pUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1MDA5NA==", "bodyText": "Do we need platform keyword here in Lifecycle? I haven't tried this so not sure if cloud will accept this. Same for the other recipes", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r442350094", "createdAt": "2020-06-18T16:23:40Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/e2e/local_store_content/recipes/NonDisruptableService-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,22 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: NonDisruptableService\n+Description: A service that can be performing important task so should not be restarted if not safe\n+Publisher: Me\n+Version: '1.0.0'\n+Platforms:\n+  - ubuntu\n+  - debian\n+  - macos\n+  - windows\n+Lifecycle:\n+  run: |-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7514f69e09c054af5e4054a413f3ce262233e9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjE5Mg==", "bodyText": "Just to confirm the iot jobs behavior, if a device belongs to multiple groups, each of which schedules some deployments, this device will only get one iot job notification at a time. So there's really no chance that we have more than one deployments in the local queue from iot jobs. Multiple jobs in the local queue must be from different sources. Is that correct?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#discussion_r442362192", "createdAt": "2020-06-18T16:42:49Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -182,6 +192,15 @@\n             // This should not happen as we are converting a HashMap\n             return;\n         }\n+\n+        // Reaching this point means there is no IN_PROGRESS job in cloud because if there was, it would\n+        // have been deduplicated. The fact that we got the next queued deployment means that the previous\n+        // IN_PROGRESS job is either finished with SUCCEEDED/FAILED status or got cancelled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb7514f69e09c054af5e4054a413f3ce262233e9"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb7514f69e09c054af5e4054a413f3ce262233e9", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb7514f69e09c054af5e4054a413f3ce262233e9", "committedDate": "2020-06-17T23:55:04Z", "message": "Testing workflow with overriden region"}, "afterCommit": {"oid": "674d78aeb39c6ce67ae52d9f198ebe9817e0a67d", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/674d78aeb39c6ce67ae52d9f198ebe9817e0a67d", "committedDate": "2020-06-18T23:00:08Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "674d78aeb39c6ce67ae52d9f198ebe9817e0a67d", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/674d78aeb39c6ce67ae52d9f198ebe9817e0a67d", "committedDate": "2020-06-18T23:00:08Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}, "afterCommit": {"oid": "e724be32a65b09ba6b4a7f5bc26d2dc1318a267b", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e724be32a65b09ba6b4a7f5bc26d2dc1318a267b", "committedDate": "2020-06-18T23:10:52Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e724be32a65b09ba6b4a7f5bc26d2dc1318a267b", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e724be32a65b09ba6b4a7f5bc26d2dc1318a267b", "committedDate": "2020-06-18T23:10:52Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}, "afterCommit": {"oid": "ea061668224216500431825240ccba541c86f3d3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea061668224216500431825240ccba541c86f3d3", "committedDate": "2020-06-18T23:53:02Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjU2MzYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-434256362", "createdAt": "2020-06-19T18:01:15Z", "commit": {"oid": "ea061668224216500431825240ccba541c86f3d3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea061668224216500431825240ccba541c86f3d3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea061668224216500431825240ccba541c86f3d3", "committedDate": "2020-06-18T23:53:02Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}, "afterCommit": {"oid": "1409688439c1a8ee84d4b8b8cb77df2738b80205", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1409688439c1a8ee84d4b8b8cb77df2738b80205", "committedDate": "2020-06-22T02:01:49Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e3c057f39e9690b9c51865c333a05e665617ef", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45e3c057f39e9690b9c51865c333a05e665617ef", "committedDate": "2020-06-22T02:05:56Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1409688439c1a8ee84d4b8b8cb77df2738b80205", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1409688439c1a8ee84d4b8b8cb77df2738b80205", "committedDate": "2020-06-22T02:01:49Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}, "afterCommit": {"oid": "45e3c057f39e9690b9c51865c333a05e665617ef", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45e3c057f39e9690b9c51865c333a05e665617ef", "committedDate": "2020-06-22T02:05:56Z", "message": "Implemented deployment cancellation for IoT jobs based deployments and safety check override"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTc1MzY1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-435175365", "createdAt": "2020-06-22T18:30:52Z", "commit": {"oid": "45e3c057f39e9690b9c51865c333a05e665617ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cfbd1b952949b812e56347bca5998e92e122c83", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0cfbd1b952949b812e56347bca5998e92e122c83", "committedDate": "2020-06-22T22:19:25Z", "message": "Merge branch 'master' into cancel-deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzQ1ODcy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/281#pullrequestreview-435345872", "createdAt": "2020-06-22T23:43:24Z", "commit": {"oid": "0cfbd1b952949b812e56347bca5998e92e122c83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2818, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}