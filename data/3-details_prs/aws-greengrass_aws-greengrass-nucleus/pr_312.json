{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTk0Mjg2", "number": 312, "title": "Recipe reference", "bodyText": "Issue #, if available:\nDescription of changes:\nProvide recipe reference\nList recipe sections, provide descriptions and examples, the format refers to docker compose reference file.\nWhy is this change necessary:\nA place to provide recipe reference to all the parties are involved/interested in Evergreen.\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-15T16:27:56Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312", "merged": true, "mergeCommit": {"oid": "9795e71e105578215ffe870f17691b706f27e6bd"}, "closed": true, "closedAt": "2020-07-21T05:15:42Z", "author": {"login": "wikimonkey"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1M9IXAH2gAyNDQ5NTk0Mjg2Ojc0ZjU4ODE3OWYzODE2MjE5Yzk3YjM0ODJkNjNjNTBlNGQ4YzViNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2-jIogH2gAyNDQ5NTk0Mjg2Ojc0NjE5MTUwZjQ1Yzg0N2EyOGE5MzgyNjY2YWVjYTA1NDYxNGUxZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74f588179f3816219c97b3482d63c50e4d8c5b57", "author": {"user": {"login": "wikimonkey", "name": "Jason Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74f588179f3816219c97b3482d63c50e4d8c5b57", "committedDate": "2020-07-15T16:09:42Z", "message": "provide component recipe reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9db049828f8e4ef939f71967b06959561638fcac", "author": {"user": {"login": "wikimonkey", "name": "Jason Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9db049828f8e4ef939f71967b06959561638fcac", "committedDate": "2020-07-15T16:13:17Z", "message": "formating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931", "author": {"user": {"login": "wikimonkey", "name": "Jason Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3dc0f109f07649db3fd14be8fd59a9406dcf7931", "committedDate": "2020-07-15T16:25:01Z", "message": "add missing description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2664b27e2709a084a67fa925dadb99616556b757", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2664b27e2709a084a67fa925dadb99616556b757", "committedDate": "2020-07-16T07:00:25Z", "message": "Merge branch 'master' into recipe_reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTU2ODM1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#pullrequestreview-449556835", "createdAt": "2020-07-16T07:00:54Z", "commit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzowMDo1NFrOGycvNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzoxMDoyOVrOGydBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MjgyMg==", "bodyText": "for the component author to define...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455552822", "createdAt": "2020-07-16T07:00:54Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MjkzNw==", "bodyText": "in the AWS Greengrass ecosystem", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455552937", "createdAt": "2020-07-16T07:01:09Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MzAzMg==", "bodyText": "Capitalize all Greengrass", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455553032", "createdAt": "2020-07-16T07:01:24Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MzE4Mw==", "bodyText": "what's this done for?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455553183", "createdAt": "2020-07-16T07:01:41Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MzQ1Mw==", "bodyText": "Keys in this group provide component...\ncomponents in the Greengrass environment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455553453", "createdAt": "2020-07-16T07:02:19Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MzkyNA==", "bodyText": "is unique within a private...? Maybe, something like that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455553924", "createdAt": "2020-07-16T07:03:17Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NDA2Ng==", "bodyText": "A private component which has the same name...\nAlso, why is this the case? If share components are identified by shared.name?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455554066", "createdAt": "2020-07-16T07:03:36Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NDY2OQ==", "bodyText": "AFAIK this isn't environment currently. Right now it is setenv, though it should probably be renamed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455554669", "createdAt": "2020-07-16T07:04:54Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.\n+> note: component name is also used as service name, since component to service is 1:1 mapping.\n+```yaml\n+ComponentName: com.aws.greengrass.HelloWorld\n+```\n+### VERSION\n+Component verison, use [semantic versioning](https://semver.org/) standard\n+```yaml\n+Version: 1.6.1\n+```\n+### DESCRIPTION\n+Text description of component\n+```yaml\n+Description: Hello World App for Evergreen\n+```\n+### PUBLISHER\n+Publisher of component\n+```yaml\n+Publisher: Amazon\n+```\n+### Platforms\n+A list of platforms component declaring support. Greengrass will apply the constrains before provisioning component\n+ on device.\n+ > note: the platform constraints only support OS with text match now, no CPU architecture constraints support yet.\n+```yaml\n+Platforms:\n+  - debian\n+  - android\n+```\n+## Service configuration\n+Keys in this group are mostly used for defining component runtime characteristics.\n+### LIFECYCLE\n+Specify lifecycle management scripts for component represented service\n+```yaml\n+Lifecycle:\n+  environment: # apply to all commands to the service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NDk2Nw==", "bodyText": "and/or are accessible by...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455554967", "createdAt": "2020-07-16T07:05:33Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.\n+> note: component name is also used as service name, since component to service is 1:1 mapping.\n+```yaml\n+ComponentName: com.aws.greengrass.HelloWorld\n+```\n+### VERSION\n+Component verison, use [semantic versioning](https://semver.org/) standard\n+```yaml\n+Version: 1.6.1\n+```\n+### DESCRIPTION\n+Text description of component\n+```yaml\n+Description: Hello World App for Evergreen\n+```\n+### PUBLISHER\n+Publisher of component\n+```yaml\n+Publisher: Amazon\n+```\n+### Platforms\n+A list of platforms component declaring support. Greengrass will apply the constrains before provisioning component\n+ on device.\n+ > note: the platform constraints only support OS with text match now, no CPU architecture constraints support yet.\n+```yaml\n+Platforms:\n+  - debian\n+  - android\n+```\n+## Service configuration\n+Keys in this group are mostly used for defining component runtime characteristics.\n+### LIFECYCLE\n+Specify lifecycle management scripts for component represented service\n+```yaml\n+Lifecycle:\n+  environment: # apply to all commands to the service.\n+    <key>: <defaultValue>\n+        \n+  install:\n+    skipif: onpath <executable>|exists <file>\n+    script:\n+    timeout: # default to be 120 seconds.\n+    environment: # optional\n+      <key>: <overrideValue>\n+    \n+  startup: # mutually exclusive from 'run'\n+    script: # eg: brew services start influxdb\n+    timeout: # optional\n+    environment:  # optional, override\n+      \n+  run: # mutually exclusive from 'startup'\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+    periodicity: # perodically run the command\n+    \n+  shutdown: # can co-exist with both startup/run\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+  \n+  healthcheck: # do health check when service is in Running\n+    script: # non-zero exit trigger error\n+    recheckPeriod: # optional, default to be 0\n+    environment: # override\n+    \n+  recover:\n+    script: # will be run every time service enters error.\n+    environment: # optional, override\n+    # referring to https://docs.docker.com/v17.12/compose/compose-file/#restart_policy\n+    retryPolicy:\n+      delay: # default to be 0. Time to wait between retry.\n+      maxAttempts: # default to be infinite. After N times of error, service enter Broken state.\n+      window: # how long to wait before deciding if a restart has succeeded\n+  \n+  checkIfSafeToUpdate:\n+    recheckPeriod: 5\n+    script: \n+    \n+  updatesCompleted:\n+    script:\n+```\n+### PARAMETERS\n+Component author specifies configuration parameters used in lifecycle management scripts, and/or accessible by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NTE4NQ==", "bodyText": "Current supported types include", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455555185", "createdAt": "2020-07-16T07:06:04Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.\n+> note: component name is also used as service name, since component to service is 1:1 mapping.\n+```yaml\n+ComponentName: com.aws.greengrass.HelloWorld\n+```\n+### VERSION\n+Component verison, use [semantic versioning](https://semver.org/) standard\n+```yaml\n+Version: 1.6.1\n+```\n+### DESCRIPTION\n+Text description of component\n+```yaml\n+Description: Hello World App for Evergreen\n+```\n+### PUBLISHER\n+Publisher of component\n+```yaml\n+Publisher: Amazon\n+```\n+### Platforms\n+A list of platforms component declaring support. Greengrass will apply the constrains before provisioning component\n+ on device.\n+ > note: the platform constraints only support OS with text match now, no CPU architecture constraints support yet.\n+```yaml\n+Platforms:\n+  - debian\n+  - android\n+```\n+## Service configuration\n+Keys in this group are mostly used for defining component runtime characteristics.\n+### LIFECYCLE\n+Specify lifecycle management scripts for component represented service\n+```yaml\n+Lifecycle:\n+  environment: # apply to all commands to the service.\n+    <key>: <defaultValue>\n+        \n+  install:\n+    skipif: onpath <executable>|exists <file>\n+    script:\n+    timeout: # default to be 120 seconds.\n+    environment: # optional\n+      <key>: <overrideValue>\n+    \n+  startup: # mutually exclusive from 'run'\n+    script: # eg: brew services start influxdb\n+    timeout: # optional\n+    environment:  # optional, override\n+      \n+  run: # mutually exclusive from 'startup'\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+    periodicity: # perodically run the command\n+    \n+  shutdown: # can co-exist with both startup/run\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+  \n+  healthcheck: # do health check when service is in Running\n+    script: # non-zero exit trigger error\n+    recheckPeriod: # optional, default to be 0\n+    environment: # override\n+    \n+  recover:\n+    script: # will be run every time service enters error.\n+    environment: # optional, override\n+    # referring to https://docs.docker.com/v17.12/compose/compose-file/#restart_policy\n+    retryPolicy:\n+      delay: # default to be 0. Time to wait between retry.\n+      maxAttempts: # default to be infinite. After N times of error, service enter Broken state.\n+      window: # how long to wait before deciding if a restart has succeeded\n+  \n+  checkIfSafeToUpdate:\n+    recheckPeriod: 5\n+    script: \n+    \n+  updatesCompleted:\n+    script:\n+```\n+### PARAMETERS\n+Component author specifies configuration parameters used in lifecycle management scripts, and/or accessible by\n+ service runtime, which can both read and write configuration values.\n+```yaml\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+```\n+#### name\n+name of parameter\n+#### value\n+default value of parameter\n+#### type\n+type of parameter. Current supported types includes:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NTcyOQ==", "bodyText": "Is this duplicating L163?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455555729", "createdAt": "2020-07-16T07:07:09Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.\n+> note: component name is also used as service name, since component to service is 1:1 mapping.\n+```yaml\n+ComponentName: com.aws.greengrass.HelloWorld\n+```\n+### VERSION\n+Component verison, use [semantic versioning](https://semver.org/) standard\n+```yaml\n+Version: 1.6.1\n+```\n+### DESCRIPTION\n+Text description of component\n+```yaml\n+Description: Hello World App for Evergreen\n+```\n+### PUBLISHER\n+Publisher of component\n+```yaml\n+Publisher: Amazon\n+```\n+### Platforms\n+A list of platforms component declaring support. Greengrass will apply the constrains before provisioning component\n+ on device.\n+ > note: the platform constraints only support OS with text match now, no CPU architecture constraints support yet.\n+```yaml\n+Platforms:\n+  - debian\n+  - android\n+```\n+## Service configuration\n+Keys in this group are mostly used for defining component runtime characteristics.\n+### LIFECYCLE\n+Specify lifecycle management scripts for component represented service\n+```yaml\n+Lifecycle:\n+  environment: # apply to all commands to the service.\n+    <key>: <defaultValue>\n+        \n+  install:\n+    skipif: onpath <executable>|exists <file>\n+    script:\n+    timeout: # default to be 120 seconds.\n+    environment: # optional\n+      <key>: <overrideValue>\n+    \n+  startup: # mutually exclusive from 'run'\n+    script: # eg: brew services start influxdb\n+    timeout: # optional\n+    environment:  # optional, override\n+      \n+  run: # mutually exclusive from 'startup'\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+    periodicity: # perodically run the command\n+    \n+  shutdown: # can co-exist with both startup/run\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+  \n+  healthcheck: # do health check when service is in Running\n+    script: # non-zero exit trigger error\n+    recheckPeriod: # optional, default to be 0\n+    environment: # override\n+    \n+  recover:\n+    script: # will be run every time service enters error.\n+    environment: # optional, override\n+    # referring to https://docs.docker.com/v17.12/compose/compose-file/#restart_policy\n+    retryPolicy:\n+      delay: # default to be 0. Time to wait between retry.\n+      maxAttempts: # default to be infinite. After N times of error, service enter Broken state.\n+      window: # how long to wait before deciding if a restart has succeeded\n+  \n+  checkIfSafeToUpdate:\n+    recheckPeriod: 5\n+    script: \n+    \n+  updatesCompleted:\n+    script:\n+```\n+### PARAMETERS\n+Component author specifies configuration parameters used in lifecycle management scripts, and/or accessible by\n+ service runtime, which can both read and write configuration values.\n+```yaml\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+```\n+#### name\n+name of parameter\n+#### value\n+default value of parameter\n+#### type\n+type of parameter. Current supported types includes:\n+* String\n+* Number\n+* Boolean\n+## Dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc0f109f07649db3fd14be8fd59a9406dcf7931"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1NzM3Nw==", "bodyText": "bounce is ambiguous. I'd say that SOFT means that the service will wait for the dependency to start when first starting, but will not be restarted if the dependency changes state.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#discussion_r455557377", "createdAt": "2020-07-16T07:10:29Z", "author": {"login": "MikeDombo"}, "path": "RECIPE_REFERENCE.md", "diffHunk": "@@ -0,0 +1,178 @@\n+# Component Recipe Reference\n+## Reference and guidelines\n+This reference describes version 1 of component recipe file format.\n+\n+Component recipe is a single yaml/json file for component author to define component deployment and runtime\n+ characteristics in AWS greengrass ecosystem.\n+## Recipe file structure and examples\n+Here is a sample recipe file in yaml format which defines a simple HelloWorld application can run on AWS greengrass\n+ managed devices.\n+```yaml\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+ComponentName: HelloWorld\n+Version: '1.0.0'\n+Description: Hello World App for Evergreen\n+Publisher: Amazon\n+Platforms:\n+  - debian\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+Lifecycle:\n+  run:\n+    debian: python3 {{artifacts:path}}/hello_world.py '{{params:Message.value}}'\n+      done\n+Artifacts:\n+  debian:\n+    - \"greengrass:hello_world.py\"\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+The topics on this reference are organized by top-level keys grouped by functions, such as providing metadata, or\n+ defining deployment and/or runtime behaviors. Top-level keys can have options that support them as sub-topics. This\n+  maps to the `<key>: <options>: <value>` indent structure of recipe file.\n+## Component metadata\n+Keys in this group provides component metadata, which are usually used for processing components in greengrass\n+ environment. The metadata is often used for indexing and filtering as well.\n+### RECIPE TEMPLATE VERSION\n+Define the version of recipe itself\n+```yaml\n+RecipeTemplateVersion: '2020-01-25'\n+```\n+### COMPONENT NAME\n+Component name identifier, reverse DNS notation is recommended. Component name is unique private component registry\n+. Private component which has same name occludes public available component.\n+> note: component name is also used as service name, since component to service is 1:1 mapping.\n+```yaml\n+ComponentName: com.aws.greengrass.HelloWorld\n+```\n+### VERSION\n+Component verison, use [semantic versioning](https://semver.org/) standard\n+```yaml\n+Version: 1.6.1\n+```\n+### DESCRIPTION\n+Text description of component\n+```yaml\n+Description: Hello World App for Evergreen\n+```\n+### PUBLISHER\n+Publisher of component\n+```yaml\n+Publisher: Amazon\n+```\n+### Platforms\n+A list of platforms component declaring support. Greengrass will apply the constrains before provisioning component\n+ on device.\n+ > note: the platform constraints only support OS with text match now, no CPU architecture constraints support yet.\n+```yaml\n+Platforms:\n+  - debian\n+  - android\n+```\n+## Service configuration\n+Keys in this group are mostly used for defining component runtime characteristics.\n+### LIFECYCLE\n+Specify lifecycle management scripts for component represented service\n+```yaml\n+Lifecycle:\n+  environment: # apply to all commands to the service.\n+    <key>: <defaultValue>\n+        \n+  install:\n+    skipif: onpath <executable>|exists <file>\n+    script:\n+    timeout: # default to be 120 seconds.\n+    environment: # optional\n+      <key>: <overrideValue>\n+    \n+  startup: # mutually exclusive from 'run'\n+    script: # eg: brew services start influxdb\n+    timeout: # optional\n+    environment:  # optional, override\n+      \n+  run: # mutually exclusive from 'startup'\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+    periodicity: # perodically run the command\n+    \n+  shutdown: # can co-exist with both startup/run\n+    script:\n+    environment: # optional, override\n+    timeout: # optional\n+  \n+  healthcheck: # do health check when service is in Running\n+    script: # non-zero exit trigger error\n+    recheckPeriod: # optional, default to be 0\n+    environment: # override\n+    \n+  recover:\n+    script: # will be run every time service enters error.\n+    environment: # optional, override\n+    # referring to https://docs.docker.com/v17.12/compose/compose-file/#restart_policy\n+    retryPolicy:\n+      delay: # default to be 0. Time to wait between retry.\n+      maxAttempts: # default to be infinite. After N times of error, service enter Broken state.\n+      window: # how long to wait before deciding if a restart has succeeded\n+  \n+  checkIfSafeToUpdate:\n+    recheckPeriod: 5\n+    script: \n+    \n+  updatesCompleted:\n+    script:\n+```\n+### PARAMETERS\n+Component author specifies configuration parameters used in lifecycle management scripts, and/or accessible by\n+ service runtime, which can both read and write configuration values.\n+```yaml\n+Parameters:\n+  - name: Message\n+    value: 'World'\n+    type: STRING\n+```\n+#### name\n+name of parameter\n+#### value\n+default value of parameter\n+#### type\n+type of parameter. Current supported types includes:\n+* String\n+* Number\n+* Boolean\n+## Dependencies\n+Keys in the group are used for describing component deployment dependencies. The dependencies could be\n+ component necessary artifacts or the other components.\n+### ARTIFACTS\n+A list of artifacts component relies on as resources, such as binary, scripts, images etc. The section supports platform\n+ hierarchy.\n+```yaml\n+Artifacts:\n+  debian\n+    - greengrass:hello_world.py\n+    - s3://example-bucket/path/to/object\n+```\n+Artifacts are referenced by artifact URIs. Currently greengrass supports greengrass repository and s3 as artifact\n+ storage location.\n+### DEPENDENCIES\n+Describe component dependencies, the versions of dependencies will be resolved during deployment.\n+> note: Services represented by components will be started/stopped with respect to dependency order.\n+```yaml\n+Dependencies:\n+  debian:\n+    shared.python:\n+      VersionRequirement: ~3.6\n+      DependencyType: HARD\n+```\n+#### Version Requirement\n+Specify dependency version requirements, the requirements support NPM-style syntax.\n+#### Dependency Type\n+Specify if dependency is `HARD` or `SOFT` dependency. `HARD` dependency means dependent service will be bounced if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2664b27e2709a084a67fa925dadb99616556b757"}, "originalPosition": 176}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8927c576cc4ecdbdcf3076f95ab35c9743f602d6", "author": {"user": {"login": "wikimonkey", "name": "Jason Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8927c576cc4ecdbdcf3076f95ab35c9743f602d6", "committedDate": "2020-07-20T16:14:14Z", "message": "correct grammer errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzYwNTE3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#pullrequestreview-451760517", "createdAt": "2020-07-20T16:18:03Z", "commit": {"oid": "8927c576cc4ecdbdcf3076f95ab35c9743f602d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9445ab5d480c17a5c87e0a0fd0faf02ca92fe0d7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9445ab5d480c17a5c87e0a0fd0faf02ca92fe0d7", "committedDate": "2020-07-20T16:18:13Z", "message": "Merge branch 'master' into recipe_reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODgwODY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/312#pullrequestreview-451880866", "createdAt": "2020-07-20T19:05:14Z", "commit": {"oid": "9445ab5d480c17a5c87e0a0fd0faf02ca92fe0d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5d61226e468212ce244818f2167acc9e89c9c6", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dc5d61226e468212ce244818f2167acc9e89c9c6", "committedDate": "2020-07-20T19:53:26Z", "message": "Merge branch 'master' into recipe_reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dde86a4e13ae012c16fdc42dac87e8657d526af", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6dde86a4e13ae012c16fdc42dac87e8657d526af", "committedDate": "2020-07-21T02:46:57Z", "message": "Merge branch 'master' into recipe_reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f5c6e9809206033a7c99cb55b909b2dde0b1683", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6f5c6e9809206033a7c99cb55b909b2dde0b1683", "committedDate": "2020-07-21T03:17:41Z", "message": "Merge branch 'master' into recipe_reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74619150f45c847a28a9382666aeca054614e1d9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74619150f45c847a28a9382666aeca054614e1d9", "committedDate": "2020-07-21T04:30:29Z", "message": "Merge branch 'master' into recipe_reference"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2892, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}