{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTIxMTUz", "number": 220, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTozODowMlrOD4fdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoxNDoyNlrOD5NdDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTYyMzEyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTozODowMlrOGPWaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0NDoyNVrOGQLG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0ODkzNQ==", "bodyText": "How about: https://github.com/grantwest/eventually-matchers", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r418748935", "createdAt": "2020-05-01T21:38:02Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -98,53 +103,55 @@ void cleanUp() {\n         if (kernel != null) {\n             kernel.shutdown();\n         }\n-        Utils.cleanAllCreatedThings(iotClient);\n-        Utils.cleanAllCreatedThingGroups(iotClient);\n+        Utils.cleanThing(iotClient, thingInfo);\n+        Utils.cleanThingGroup(iotClient, thingGroupResp.thingGroupName());\n         createdIotJobIdList.forEach(jobId -> Utils.cleanJob(iotClient, jobId));\n+        createdIotJobIdList.clear();\n     }\n \n     @Test\n-    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful()\n-            throws Exception {\n-        System.setProperty(\"root\", tempRootDir.toString());\n-        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful() throws Exception {\n+        kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n \n         Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").getPath());\n         // pre-load contents to package store\n         FileUtils.copyFolderRecursively(localStoreContentPath, kernel.getPackageStorePath());\n \n-        Utils.ThingInfo thingInfo = Utils.createThing(iotClient);\n+        thingInfo = Utils.createThing(iotClient);\n         Utils.updateKernelConfigWithIotConfiguration(kernel, thingInfo);\n \n         kernel.launch();\n \n         // Create thing group and deployment\n-        String thingGroupArn = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n+        thingGroupResp = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n         DeploymentDocument document = DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n                 .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\"))\n-                .deploymentPackageConfigurationList(\n-                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n-                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build();\n+                .deploymentPackageConfigurationList(Arrays\n+                        .asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null), new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null)))\n+                .build();\n \n-        String jobId1 = sendCreateDeploymentRequest(thingGroupArn, document);\n+        String jobId1 = sendCreateDeploymentRequest(thingGroupResp.thingGroupArn(), document);\n \n         // wait until deployment complete\n-        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3),\n-                s -> s.equals(JobExecutionStatus.SUCCEEDED));\n-\n-        assertEquals(State.FINISHED, kernel.getMain().getState());\n-        assertEquals(State.FINISHED, kernel.locate(\"CustomerApp\").getState());\n-        assertEquals(State.FINISHED, kernel.locate(\"SomeService\").getState());\n+        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3), s -> s\n+                .equals(JobExecutionStatus.SUCCEEDED));\n+\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),\n+                () -> State.FINISHED.equals(kernel.getMain().getState()));\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),\n+                () -> State.FINISHED.equals(kernel.locate(\"CustomerApp\").getState()));\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d197ef38a344aa23675af89d500e4e3dbb64ea30"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMjQwMA==", "bodyText": "I'll try it out", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419612400", "createdAt": "2020-05-04T17:44:25Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -98,53 +103,55 @@ void cleanUp() {\n         if (kernel != null) {\n             kernel.shutdown();\n         }\n-        Utils.cleanAllCreatedThings(iotClient);\n-        Utils.cleanAllCreatedThingGroups(iotClient);\n+        Utils.cleanThing(iotClient, thingInfo);\n+        Utils.cleanThingGroup(iotClient, thingGroupResp.thingGroupName());\n         createdIotJobIdList.forEach(jobId -> Utils.cleanJob(iotClient, jobId));\n+        createdIotJobIdList.clear();\n     }\n \n     @Test\n-    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful()\n-            throws Exception {\n-        System.setProperty(\"root\", tempRootDir.toString());\n-        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful() throws Exception {\n+        kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n \n         Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").getPath());\n         // pre-load contents to package store\n         FileUtils.copyFolderRecursively(localStoreContentPath, kernel.getPackageStorePath());\n \n-        Utils.ThingInfo thingInfo = Utils.createThing(iotClient);\n+        thingInfo = Utils.createThing(iotClient);\n         Utils.updateKernelConfigWithIotConfiguration(kernel, thingInfo);\n \n         kernel.launch();\n \n         // Create thing group and deployment\n-        String thingGroupArn = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n+        thingGroupResp = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n         DeploymentDocument document = DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n                 .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\"))\n-                .deploymentPackageConfigurationList(\n-                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n-                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build();\n+                .deploymentPackageConfigurationList(Arrays\n+                        .asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null), new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null)))\n+                .build();\n \n-        String jobId1 = sendCreateDeploymentRequest(thingGroupArn, document);\n+        String jobId1 = sendCreateDeploymentRequest(thingGroupResp.thingGroupArn(), document);\n \n         // wait until deployment complete\n-        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3),\n-                s -> s.equals(JobExecutionStatus.SUCCEEDED));\n-\n-        assertEquals(State.FINISHED, kernel.getMain().getState());\n-        assertEquals(State.FINISHED, kernel.locate(\"CustomerApp\").getState());\n-        assertEquals(State.FINISHED, kernel.locate(\"SomeService\").getState());\n+        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3), s -> s\n+                .equals(JobExecutionStatus.SUCCEEDED));\n+\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),\n+                () -> State.FINISHED.equals(kernel.getMain().getState()));\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),\n+                () -> State.FINISHED.equals(kernel.locate(\"CustomerApp\").getState()));\n+        CustomAssertionUtil.assertEventuallyTrue(3, Duration.ofMillis(500),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc0ODkzNQ=="}, "originalCommit": {"oid": "d197ef38a344aa23675af89d500e4e3dbb64ea30"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNTY0MDg4OnYy", "diffSide": "RIGHT", "path": ".github/workflows/maven.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMTo0NTo1OFrOGPWksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyNDozMVrOGPYJEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MTY2Ng==", "bodyText": "Since most of our time is just waiting for the cloud, we should be able to do more than 1 per core. I'd go maybe 4c.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r418751666", "createdAt": "2020-05-01T21:45:58Z", "author": {"login": "MikeDombo"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -83,14 +83,22 @@ jobs:\n           aws-region: us-west-2\n       - name: Build Tests\n         run: mvn -ntp generate-test-sources generate-test-resources test-compile -DskipTests\n-      - name: E2E Test\n-        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\"\n+      - name: Run E2E Tests in parallel\n+        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\" -DforkCount=1C -DreuseForks=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d197ef38a344aa23675af89d500e4e3dbb64ea30"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3Njg1MA==", "bodyText": "It won't help much right away because we only have 3 classes to run in parallel here. I can try out 2c and 4c to see if which is better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r418776850", "createdAt": "2020-05-01T23:21:54Z", "author": {"login": "hui-yang"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -83,14 +83,22 @@ jobs:\n           aws-region: us-west-2\n       - name: Build Tests\n         run: mvn -ntp generate-test-sources generate-test-resources test-compile -DskipTests\n-      - name: E2E Test\n-        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\"\n+      - name: Run E2E Tests in parallel\n+        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\" -DforkCount=1C -DreuseForks=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MTY2Ng=="}, "originalCommit": {"oid": "d197ef38a344aa23675af89d500e4e3dbb64ea30"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3NzM2MQ==", "bodyText": "OK, got it. That's fine, but I guess it would help in the future. Since we're blocked on network and not compute we should be able to run more than 1 per core.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r418777361", "createdAt": "2020-05-01T23:24:31Z", "author": {"login": "MikeDombo"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -83,14 +83,22 @@ jobs:\n           aws-region: us-west-2\n       - name: Build Tests\n         run: mvn -ntp generate-test-sources generate-test-resources test-compile -DskipTests\n-      - name: E2E Test\n-        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\"\n+      - name: Run E2E Tests in parallel\n+        run: mvn -ntp surefire:test@integration-tests -Dgroups=\"E2E\" -DexcludedGroups=\"\" -Dsurefire.argLine=\"\" -DforkCount=1C -DreuseForks=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc1MTY2Ng=="}, "originalCommit": {"oid": "d197ef38a344aa23675af89d500e4e3dbb64ea30"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzAxNzMzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowNToyOFrOGQVT4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzowNzozNlrOGQVWfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3OTU1Mw==", "bodyText": "how long will this go for? We need reasonable timeouts.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419779553", "createdAt": "2020-05-04T23:05:28Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -100,53 +106,52 @@ void cleanUp() {\n         if (kernel != null) {\n             kernel.shutdown();\n         }\n-        Utils.cleanAllCreatedThings(iotClient);\n-        Utils.cleanAllCreatedThingGroups(iotClient);\n+        Utils.cleanThing(iotClient, thingInfo);\n+        Utils.cleanThingGroup(iotClient, thingGroupResp.thingGroupName());\n         createdIotJobIdList.forEach(jobId -> Utils.cleanJob(iotClient, jobId));\n+        createdIotJobIdList.clear();\n     }\n \n     @Test\n-    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful()\n-            throws Exception {\n-        System.setProperty(\"root\", tempRootDir.toString());\n-        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful() throws Exception {\n+        kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n \n         Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").getPath());\n         // pre-load contents to package store\n         FileUtils.copyFolderRecursively(localStoreContentPath, kernel.getPackageStorePath());\n \n-        Utils.ThingInfo thingInfo = Utils.createThing(iotClient);\n+        thingInfo = Utils.createThing(iotClient);\n         Utils.updateKernelConfigWithIotConfiguration(kernel, thingInfo);\n \n         kernel.launch();\n \n         // Create thing group and deployment\n-        String thingGroupArn = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n+        thingGroupResp = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n         DeploymentDocument document = DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n                 .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\"))\n-                .deploymentPackageConfigurationList(\n-                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n-                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build();\n+                .deploymentPackageConfigurationList(Arrays\n+                        .asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null), new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null)))\n+                .build();\n \n-        String jobId1 = sendCreateDeploymentRequest(thingGroupArn, document);\n+        String jobId1 = sendCreateDeploymentRequest(thingGroupResp.thingGroupArn(), document);\n \n         // wait until deployment complete\n-        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3),\n-                s -> s.equals(JobExecutionStatus.SUCCEEDED));\n+        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3), s -> s\n+                .equals(JobExecutionStatus.SUCCEEDED));\n \n-        assertThat(kernel.getMain().getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n-        assertThat(kernel.locate(\"CustomerApp\").getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n-        assertThat(kernel.locate(\"SomeService\").getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n+        assertThat(kernel.getMain()::getState, eventuallyEval(is(State.FINISHED)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4776a8a34beb74e035d8fc119524eb556d9379ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4MDIyMw==", "bodyText": "5 seconds by default. It's sufficient in most cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419780223", "createdAt": "2020-05-04T23:07:36Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentCloudServiceIntegTest.java", "diffHunk": "@@ -100,53 +106,52 @@ void cleanUp() {\n         if (kernel != null) {\n             kernel.shutdown();\n         }\n-        Utils.cleanAllCreatedThings(iotClient);\n-        Utils.cleanAllCreatedThingGroups(iotClient);\n+        Utils.cleanThing(iotClient, thingInfo);\n+        Utils.cleanThingGroup(iotClient, thingGroupResp.thingGroupName());\n         createdIotJobIdList.forEach(jobId -> Utils.cleanJob(iotClient, jobId));\n+        createdIotJobIdList.clear();\n     }\n \n     @Test\n-    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful()\n-            throws Exception {\n-        System.setProperty(\"root\", tempRootDir.toString());\n-        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+    void GIVEN_blank_kernel_WHEN_create_deployment_on_thing_group_THEN_new_services_deployed_and_job_is_successful() throws Exception {\n+        kernel = new Kernel()\n+                .parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString(), \"-r\", tempRootDir.toString());\n \n         Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").getPath());\n         // pre-load contents to package store\n         FileUtils.copyFolderRecursively(localStoreContentPath, kernel.getPackageStorePath());\n \n-        Utils.ThingInfo thingInfo = Utils.createThing(iotClient);\n+        thingInfo = Utils.createThing(iotClient);\n         Utils.updateKernelConfigWithIotConfiguration(kernel, thingInfo);\n \n         kernel.launch();\n \n         // Create thing group and deployment\n-        String thingGroupArn = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n+        thingGroupResp = Utils.createThingGroupAndAddThing(iotClient, thingInfo);\n         DeploymentDocument document = DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n                 .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\"))\n-                .deploymentPackageConfigurationList(\n-                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n-                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build();\n+                .deploymentPackageConfigurationList(Arrays\n+                        .asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null), new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null)))\n+                .build();\n \n-        String jobId1 = sendCreateDeploymentRequest(thingGroupArn, document);\n+        String jobId1 = sendCreateDeploymentRequest(thingGroupResp.thingGroupArn(), document);\n \n         // wait until deployment complete\n-        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3),\n-                s -> s.equals(JobExecutionStatus.SUCCEEDED));\n+        Utils.waitForJobExecutionStatusToSatisfy(iotClient, jobId1, thingInfo.thingName, Duration.ofMinutes(3), s -> s\n+                .equals(JobExecutionStatus.SUCCEEDED));\n \n-        assertThat(kernel.getMain().getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n-        assertThat(kernel.locate(\"CustomerApp\").getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n-        assertThat(kernel.locate(\"SomeService\").getState(), anyOf(is(State.RUNNING), is(State.FINISHED)));\n+        assertThat(kernel.getMain()::getState, eventuallyEval(is(State.FINISHED)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc3OTU1Mw=="}, "originalCommit": {"oid": "4776a8a34beb74e035d8fc119524eb556d9379ee"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzEwNzkxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzo0OToxMVrOGQWI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMzo0OToxMVrOGQWI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc5MzEyOQ==", "bodyText": "nit - Let's make is consistent. E2E-INTRUSIVE and will be executed at Run intrusive e2e test sequentially stage.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419793129", "createdAt": "2020-05-04T23:49:11Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -54,18 +57,19 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n @ExtendWith(EGExtension.class)\n-@Tag(\"E2E\")\n+@Tag(\"E2E-EXCLUSIVE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4776a8a34beb74e035d8fc119524eb556d9379ee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzE1ODUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoxNDoyNlrOGQWmJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDoyNzo1M1rOGQW1CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwMDYxMw==", "bodyText": "Nice!\nSince you are adding this... As a good practice for external calls, I'd suggest log before and after making any external call, with the enough identifier for debugging purpose(if not logged by SDK). Sometimes even entire request should be logged if necessary.\nFor example,\nlogger.atInfo().kv(\"Thing Name\", thingName).log(\"Subscribing to job execution change events.\"); and logger.atInfo().kv(\"Thing Name\", thingName).log(\"Subscribed to job execution change events.\");\nLet's add the identifier for now and we could re-visit logging later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419800613", "createdAt": "2020-05-05T00:14:26Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -395,5 +401,6 @@ protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent>\n         CompletableFuture<Integer> subscribed = iotJobsClient\n                 .SubscribeToJobExecutionsChangedEvents(request, QualityOfService.AT_LEAST_ONCE, eventHandler);\n         subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+        logger.atInfo().log(\"Subscribed to deployment notifications.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e850da35b89118fdc10c9cc3cfc68d1c0edfa35b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNDQyNQ==", "bodyText": "Yes. I can add that. I didn't add both before and after because we're not waiting for this async call. One log line seems enough here and we do log when the response comes in.\nUPDATE: logging both before and after this call makes sense. I'll update.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/220#discussion_r419804425", "createdAt": "2020-05-05T00:27:53Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -395,5 +401,6 @@ protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent>\n         CompletableFuture<Integer> subscribed = iotJobsClient\n                 .SubscribeToJobExecutionsChangedEvents(request, QualityOfService.AT_LEAST_ONCE, eventHandler);\n         subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+        logger.atInfo().log(\"Subscribed to deployment notifications.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwMDYxMw=="}, "originalCommit": {"oid": "e850da35b89118fdc10c9cc3cfc68d1c0edfa35b"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4657, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}