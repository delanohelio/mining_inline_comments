{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTc2OTIw", "number": 258, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDoxOToxMlrOEAUZmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozODo1NVrOEAr1KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzY5NjkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDoxOToxMlrOGbhjag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTowMTowNVrOGcGkSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDQ3NA==", "bodyText": "I wouldn't do this. Just list all the services.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r431514474", "createdAt": "2020-05-28T00:19:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNjgxMg==", "bodyText": "I think the intention here is just to filter out the built-in services because we don't want users to be confused. We can discuss but I'm fine with initial revision as this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432006812", "createdAt": "2020-05-28T17:32:54Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDQ3NA=="}, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NDQ2OQ==", "bodyText": "Yes, the intention is to hide stuff the customer didn't start. From a local CLI perspective the customer just added two services but if list components returns 10, the customer has to ignore the 8 returned which is there by default.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432094469", "createdAt": "2020-05-28T20:08:10Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDQ3NA=="}, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NTgyNA==", "bodyText": "This is a bad assumption moving forward. Don't lie to the customer; just give all the components.\nThis is bad going forward because components like tes and shadow and more will be optional but run in our jvm. Thus they would fail your check, but should be listed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432095824", "createdAt": "2020-05-28T20:10:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDQ3NA=="}, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyMDkwNw==", "bodyText": "Removed the check.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432120907", "createdAt": "2020-05-28T21:01:05Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDQ3NA=="}, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzY5ODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMDoxOTo1OFrOGbhkNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToxNDoxMFrOGbl47w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDY3OA==", "bodyText": "you can use Coerce.toString(e.getValue())", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r431514678", "createdAt": "2020-05-28T00:19:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toList());\n+\n+            List<ComponentInfo> componentInfo = kernel.orderedDependencies().stream()\n+                    .filter(service -> service instanceof GenericExternalService)\n+                    .filter(service -> !service.getName().equals(kernel.getMain().getName()))\n+                    .map(service -> {\n+                        Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+                        Topics parameters = service.getConfig().findTopics(PARAMETERS_CONFIG_KEY);\n+                        ComponentInfo.ComponentInfoBuilder componentInfoBuilder = ComponentInfo.builder()\n+                                .packageName(service.getName());\n+                        if (version != null) {\n+                            componentInfoBuilder.version(((Semver) version.getOnce()).getValue());\n+                        }\n+                        if (parameters != null) {\n+                            componentInfoBuilder.runtimeParameters(parameters.children.entrySet().stream().collect(\n+                                    Collectors.toMap(e -> e.getKey(), e -> (String) ((Topic) e.getValue()).getOnce())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4NTUxOQ==", "bodyText": "Forgot abt that, updated!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r431585519", "createdAt": "2020-05-28T05:14:10Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +64,75 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toList());\n+\n+            List<ComponentInfo> componentInfo = kernel.orderedDependencies().stream()\n+                    .filter(service -> service instanceof GenericExternalService)\n+                    .filter(service -> !service.getName().equals(kernel.getMain().getName()))\n+                    .map(service -> {\n+                        Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+                        Topics parameters = service.getConfig().findTopics(PARAMETERS_CONFIG_KEY);\n+                        ComponentInfo.ComponentInfoBuilder componentInfoBuilder = ComponentInfo.builder()\n+                                .packageName(service.getName());\n+                        if (version != null) {\n+                            componentInfoBuilder.version(((Semver) version.getOnce()).getValue());\n+                        }\n+                        if (parameters != null) {\n+                            componentInfoBuilder.runtimeParameters(parameters.children.entrySet().stream().collect(\n+                                    Collectors.toMap(e -> e.getKey(), e -> (String) ((Topic) e.getValue()).getOnce())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxNDY3OA=="}, "originalCommit": {"oid": "70bbce2f6e8bed31b0916d7bdb518777b6c800a7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDcyNjgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozNDowOFrOGb_pMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDowOTo0MFrOGcE_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNzQ3NA==", "bodyText": "Remove this TODO. Doesn't apply here :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432007474", "createdAt": "2020-05-28T17:34:08Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +65,76 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toList());\n+\n+            List<ComponentInfo> componentInfo = kernel.orderedDependencies().stream()\n+                    .filter(service -> service instanceof GenericExternalService)\n+                    .filter(service -> !service.getName().equals(kernel.getMain().getName()))\n+                    .map(service -> {\n+                        Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+                        Topics parameters = service.getConfig().findTopics(PARAMETERS_CONFIG_KEY);\n+                        ComponentInfo.ComponentInfoBuilder componentInfoBuilder = ComponentInfo.builder()\n+                                .packageName(service.getName());\n+                        if (version != null) {\n+                            componentInfoBuilder.version(((Semver) version.getOnce()).getValue());\n+                        }\n+                        if (parameters != null) {\n+                            componentInfoBuilder.runtimeParameters(parameters.children.entrySet().stream().collect(\n+                                    Collectors.toMap(e -> e.getKey(), e -> Coerce.toString(e.getValue()))));\n+\n+                        }\n+                        return componentInfoBuilder.build();\n+                    }).collect(Collectors.toList());\n+\n+            return OBJECT_MAPPER.writerWithDefaultPrettyPrinter()\n+                    .writeValueAsString(new ListComponentsResult(rootComponenetNames, componentInfo));\n+        } catch (JsonProcessingException e) {\n+            //TODO: during IPC integration, change this to report internal error\n+            throw new DeviceConfigurationException(\"Unable to list components\", e);\n+        }\n+    }\n+\n+    //TODO: move this data object to appropriate place during IPC integration.\n+    /**\n+     * Data object used to transfer currently running.\n+     */\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    @Getter\n+    public static class ListComponentsResult {\n+        @JsonProperty(\"RootPackages\")\n+        private List<String> rootPackages;\n+\n+        @JsonProperty(\"Components\")\n+        private List<ComponentInfo> componentsInfo;\n+\n+    }\n+\n+    //TODO: move this data object to appropriate place during IPC integration.\n+    @Builder\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    @Getter\n+    public static class ComponentInfo {\n+        @JsonProperty(\"Name\")\n+        private String packageName;\n+\n+        // TODO: change to versionRequirements which can be a pinned version or a version range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5830ed4a5f46002ba1f6f3519d71bb078d18f646"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NTIxNQ==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432095215", "createdAt": "2020-05-28T20:09:40Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +65,76 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toList());\n+\n+            List<ComponentInfo> componentInfo = kernel.orderedDependencies().stream()\n+                    .filter(service -> service instanceof GenericExternalService)\n+                    .filter(service -> !service.getName().equals(kernel.getMain().getName()))\n+                    .map(service -> {\n+                        Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+                        Topics parameters = service.getConfig().findTopics(PARAMETERS_CONFIG_KEY);\n+                        ComponentInfo.ComponentInfoBuilder componentInfoBuilder = ComponentInfo.builder()\n+                                .packageName(service.getName());\n+                        if (version != null) {\n+                            componentInfoBuilder.version(((Semver) version.getOnce()).getValue());\n+                        }\n+                        if (parameters != null) {\n+                            componentInfoBuilder.runtimeParameters(parameters.children.entrySet().stream().collect(\n+                                    Collectors.toMap(e -> e.getKey(), e -> Coerce.toString(e.getValue()))));\n+\n+                        }\n+                        return componentInfoBuilder.build();\n+                    }).collect(Collectors.toList());\n+\n+            return OBJECT_MAPPER.writerWithDefaultPrettyPrinter()\n+                    .writeValueAsString(new ListComponentsResult(rootComponenetNames, componentInfo));\n+        } catch (JsonProcessingException e) {\n+            //TODO: during IPC integration, change this to report internal error\n+            throw new DeviceConfigurationException(\"Unable to list components\", e);\n+        }\n+    }\n+\n+    //TODO: move this data object to appropriate place during IPC integration.\n+    /**\n+     * Data object used to transfer currently running.\n+     */\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    @Getter\n+    public static class ListComponentsResult {\n+        @JsonProperty(\"RootPackages\")\n+        private List<String> rootPackages;\n+\n+        @JsonProperty(\"Components\")\n+        private List<ComponentInfo> componentsInfo;\n+\n+    }\n+\n+    //TODO: move this data object to appropriate place during IPC integration.\n+    @Builder\n+    @AllArgsConstructor\n+    @NoArgsConstructor\n+    @Getter\n+    public static class ComponentInfo {\n+        @JsonProperty(\"Name\")\n+        private String packageName;\n+\n+        // TODO: change to versionRequirements which can be a pinned version or a version range", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNzQ3NA=="}, "originalCommit": {"oid": "5830ed4a5f46002ba1f6f3519d71bb078d18f646"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDcyOTcyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/LocalDeploymentListenerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozNDo1OVrOGb_rCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDoxMDoxM1rOGcFA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNzk0NQ==", "bodyText": "We need to consolidate the ObjectMapper... Maybe after both you and my PR gets merged in!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432007945", "createdAt": "2020-05-28T17:34:59Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/LocalDeploymentListenerTest.java", "diffHunk": "@@ -15,10 +17,14 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class LocalDeploymentListenerTest {\n \n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n+            .configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5830ed4a5f46002ba1f6f3519d71bb078d18f646"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NTQ4Ng==", "bodyText": "Yes, that would be done during merge.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432095486", "createdAt": "2020-05-28T20:10:13Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/LocalDeploymentListenerTest.java", "diffHunk": "@@ -15,10 +17,14 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n public class LocalDeploymentListenerTest {\n \n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n+            .configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNzk0NQ=="}, "originalCommit": {"oid": "5830ed4a5f46002ba1f6f3519d71bb078d18f646"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTUyNzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNjowOFrOGcHm4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNjowOFrOGcHm4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNzk1NQ==", "bodyText": "Why DeviceConfigurationException? doesn't seem relevant here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432137955", "createdAt": "2020-05-28T21:36:08Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +65,74 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toList());\n+\n+            List<ComponentInfo> componentInfo = kernel.orderedDependencies().stream()\n+                    .filter(service -> !service.getName().equals(kernel.getMain().getName()))\n+                    .map(service -> {\n+                        Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+                        Topics parameters = service.getConfig().findTopics(PARAMETERS_CONFIG_KEY);\n+                        ComponentInfo.ComponentInfoBuilder componentInfoBuilder = ComponentInfo.builder()\n+                                .packageName(service.getName());\n+                        if (version != null) {\n+                            componentInfoBuilder.version(((Semver) version.getOnce()).getValue());\n+                        }\n+                        if (parameters != null) {\n+                            componentInfoBuilder.runtimeParameters(parameters.children.entrySet().stream().collect(\n+                                    Collectors.toMap(e -> e.getKey(), e -> Coerce.toString(e.getValue()))));\n+\n+                        }\n+                        return componentInfoBuilder.build();\n+                    }).collect(Collectors.toList());\n+\n+            return OBJECT_MAPPER.writerWithDefaultPrettyPrinter()\n+                    .writeValueAsString(new ListComponentsResult(rootComponenetNames, componentInfo));\n+        } catch (JsonProcessingException e) {\n+            //TODO: during IPC integration, change this to report internal error\n+            throw new DeviceConfigurationException(\"Unable to list components\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394cad0d43edd49b3542d95560fe1867d0c33df2"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTUzNTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozODo1NVrOGcHrzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozODo1NVrOGcHrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzOTIxMg==", "bodyText": "typo : component", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/258#discussion_r432139212", "createdAt": "2020-05-28T21:38:55Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -39,4 +65,74 @@ public boolean submitLocalDeployment(String deploymentDocument) {\n         return false;\n     }\n \n+    /**\n+     * Retrieves root level components names, component information and runtime parameters.\n+     * @return serialized ListComponentsResult\n+     * @throws DeviceConfigurationException failure to serialize ListComponentsResult\n+     */\n+    public String listComponents() throws DeviceConfigurationException {\n+        try {\n+            List<String> rootComponenetNames = kernel.getMain().getDependencies().keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394cad0d43edd49b3542d95560fe1867d0c33df2"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4751, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}