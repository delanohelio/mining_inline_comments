{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDY1Mzk4", "number": 375, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozODowOVrOEaKobw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxNzo1OVrOEbtUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODcyNjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozODowOVrOHDa2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxNjozNVrOHDn_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0NzY4MA==", "bodyText": "move it out to a method, as its just kinda hack for stream manager v1 compatibility, we will use actual authorization stuff here later.\nvoid doAuthorize(request) {\n    try {\n            authenticationHandler.doAuthentication(request.getToken());\n    } catch (Unauthenticated e) {\n         throw new UnAuthorized()\n   }\n\n}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473347680", "createdAt": "2020-08-19T21:38:09Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    public AuthorizationService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.AUTHORIZATION;\n+        super.postInject();\n+\n+        try {\n+            router.registerServiceCallback(destination.getValue(), this::handleMessage);\n+            logger.atInfo(\"register-request-handler\")\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log();\n+        } catch (IPCException e) {\n+            logger.atError(\"register-request-handler-error\", e)\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log(\"Failed to register service callback to destination\");\n+        }\n+    }\n+\n+    /**\n+     * Handle all requests from the client.\n+     *\n+     * @param message the incoming request\n+     * @param context caller request context\n+     * @return future containing our response\n+     */\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n+\n+        ApplicationMessage applicationMessage = ApplicationMessage.fromBytes(message.getPayload());\n+        CompletableFuture<Message> fut = new CompletableFuture<>();\n+        AuthorizationResponse response;\n+        try {\n+            AuthorizationRequest request = CBOR_MAPPER.readValue(applicationMessage.getPayload(),\n+                    AuthorizationRequest.class);\n+\n+            //This will throw an UnauthenticatedException if not authenticated\n+            String serviceName = authenticationHandler.doAuthentication(request.getToken());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzAyOQ==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473563029", "createdAt": "2020-08-20T03:16:35Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    public AuthorizationService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.AUTHORIZATION;\n+        super.postInject();\n+\n+        try {\n+            router.registerServiceCallback(destination.getValue(), this::handleMessage);\n+            logger.atInfo(\"register-request-handler\")\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log();\n+        } catch (IPCException e) {\n+            logger.atError(\"register-request-handler-error\", e)\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log(\"Failed to register service callback to destination\");\n+        }\n+    }\n+\n+    /**\n+     * Handle all requests from the client.\n+     *\n+     * @param message the incoming request\n+     * @param context caller request context\n+     * @return future containing our response\n+     */\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n+\n+        ApplicationMessage applicationMessage = ApplicationMessage.fromBytes(message.getPayload());\n+        CompletableFuture<Message> fut = new CompletableFuture<>();\n+        AuthorizationResponse response;\n+        try {\n+            AuthorizationRequest request = CBOR_MAPPER.readValue(applicationMessage.getPayload(),\n+                    AuthorizationRequest.class);\n+\n+            //This will throw an UnauthenticatedException if not authenticated\n+            String serviceName = authenticationHandler.doAuthentication(request.getToken());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0NzY4MA=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODcyNzkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozODoyN1rOHDa3bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxNjoyOFrOHDn_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzk1MQ==", "bodyText": "Why do you change this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473347951", "createdAt": "2020-08-19T21:38:27Z", "author": {"login": "prateek-y"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -61,7 +61,8 @@\n     private static final String ACCESS_KEY_ID = \"ASIA\";\n     private static final String SECRET_ACCESS_KEY = \"FC8OGbRnCl1\";\n     private static final String SESSION_TOKEN = \"ABCDEFGHI\";\n-    private static final String EXPIRATION = \"2020-08-19T07:35:15Z\";\n+    // Set in the far future so it doesn't expire\n+    private static final String EXPIRATION = \"2030-08-19T07:35:15Z\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0OTI4Mw==", "bodyText": "there are TES failures if this is not in place. Michael included it in his PR earlier this day and posted in the greenseer chat", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473349283", "createdAt": "2020-08-19T21:40:03Z", "author": {"login": "avipinku"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -61,7 +61,8 @@\n     private static final String ACCESS_KEY_ID = \"ASIA\";\n     private static final String SECRET_ACCESS_KEY = \"FC8OGbRnCl1\";\n     private static final String SESSION_TOKEN = \"ABCDEFGHI\";\n-    private static final String EXPIRATION = \"2020-08-19T07:35:15Z\";\n+    // Set in the far future so it doesn't expire\n+    private static final String EXPIRATION = \"2030-08-19T07:35:15Z\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzk1MQ=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1MDczNA==", "bodyText": "It is merged now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473350734", "createdAt": "2020-08-19T21:41:53Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -61,7 +61,8 @@\n     private static final String ACCESS_KEY_ID = \"ASIA\";\n     private static final String SECRET_ACCESS_KEY = \"FC8OGbRnCl1\";\n     private static final String SESSION_TOKEN = \"ABCDEFGHI\";\n-    private static final String EXPIRATION = \"2020-08-19T07:35:15Z\";\n+    // Set in the far future so it doesn't expire\n+    private static final String EXPIRATION = \"2030-08-19T07:35:15Z\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzk1MQ=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzAwNQ==", "bodyText": "rebased and removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473563005", "createdAt": "2020-08-20T03:16:28Z", "author": {"login": "avipinku"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -61,7 +61,8 @@\n     private static final String ACCESS_KEY_ID = \"ASIA\";\n     private static final String SECRET_ACCESS_KEY = \"FC8OGbRnCl1\";\n     private static final String SESSION_TOKEN = \"ABCDEFGHI\";\n-    private static final String EXPIRATION = \"2020-08-19T07:35:15Z\";\n+    // Set in the far future so it doesn't expire\n+    private static final String EXPIRATION = \"2030-08-19T07:35:15Z\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0Nzk1MQ=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODczMDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTozOTowN1rOHDa5hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxNjozMFrOHDn_hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0ODQ4NQ==", "bodyText": "lets make it private for now, we dont intend to expose this to customers for now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473348485", "createdAt": "2020-08-19T21:39:07Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzAxNA==", "bodyText": "this needs to be public to be accessible to\n@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473563014", "createdAt": "2020-08-20T03:16:30Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM0ODQ4NQ=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkzMjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyMTowNlrOHDc-ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMzoxNjozMlrOHDn_jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MjU1OA==", "bodyText": "rename the pubsub string", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473382558", "createdAt": "2020-08-19T22:21:06Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    public AuthorizationService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.AUTHORIZATION;\n+        super.postInject();\n+\n+        try {\n+            router.registerServiceCallback(destination.getValue(), this::handleMessage);\n+            logger.atInfo(\"register-request-handler\")\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log();\n+        } catch (IPCException e) {\n+            logger.atError(\"register-request-handler-error\", e)\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log(\"Failed to register service callback to destination\");\n+        }\n+    }\n+\n+    /**\n+     * Handle all requests from the client.\n+     *\n+     * @param message the incoming request\n+     * @param context caller request context\n+     * @return future containing our response\n+     */\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n+\n+        ApplicationMessage applicationMessage = ApplicationMessage.fromBytes(message.getPayload());\n+        CompletableFuture<Message> fut = new CompletableFuture<>();\n+        AuthorizationResponse response;\n+        try {\n+            AuthorizationRequest request = CBOR_MAPPER.readValue(applicationMessage.getPayload(),\n+                    AuthorizationRequest.class);\n+\n+            //This will throw an UnauthenticatedException if not authenticated\n+            String serviceName = authenticationHandler.doAuthentication(request.getToken());\n+            response = new AuthorizationResponse(true, null,\n+                    serviceName);\n+\n+            ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                    .version(applicationMessage.getVersion())\n+                    .payload(CBOR_MAPPER.writeValueAsBytes(response))\n+                    .build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n+\n+        } catch (Throwable e) {\n+            logger.atError().setEventType(\"authorization-error\").setCause(e).log(\"Failed to handle message\");\n+            try {\n+                response = new AuthorizationResponse(false, e.toString(),\n+                        null);\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(CBOR_MAPPER.writeValueAsBytes(response))\n+                        .build();\n+                fut.complete(new Message(responseMessage.toByteArray()));\n+            } catch (IOException ex) {\n+                logger.atError(\"pubsub-error\", ex).log(\"Failed to send error response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU2MzAyMA==", "bodyText": "oops, fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r473563020", "createdAt": "2020-08-20T03:16:32Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/AuthorizationService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.AuthenticationHandler;\n+import com.aws.iot.evergreen.ipc.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationRequest;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.common.BuiltInServiceDestinationCode;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.ApplicationMessage;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.IPCRouter.DESTINATION_STRING;\n+\n+@ImplementsService(name = AuthorizationService.AUTHORIZATION_SERVICE_NAME, autostart = true)\n+public class AuthorizationService extends EvergreenService {\n+    private static final ObjectMapper CBOR_MAPPER = new CBORMapper();\n+    public static final String AUTHORIZATION_SERVICE_NAME = \"aws.greengrass.ipc.authorization\";\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    public AuthorizationService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.AUTHORIZATION;\n+        super.postInject();\n+\n+        try {\n+            router.registerServiceCallback(destination.getValue(), this::handleMessage);\n+            logger.atInfo(\"register-request-handler\")\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log();\n+        } catch (IPCException e) {\n+            logger.atError(\"register-request-handler-error\", e)\n+                    .kv(DESTINATION_STRING, destination.name())\n+                    .log(\"Failed to register service callback to destination\");\n+        }\n+    }\n+\n+    /**\n+     * Handle all requests from the client.\n+     *\n+     * @param message the incoming request\n+     * @param context caller request context\n+     * @return future containing our response\n+     */\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n+\n+        ApplicationMessage applicationMessage = ApplicationMessage.fromBytes(message.getPayload());\n+        CompletableFuture<Message> fut = new CompletableFuture<>();\n+        AuthorizationResponse response;\n+        try {\n+            AuthorizationRequest request = CBOR_MAPPER.readValue(applicationMessage.getPayload(),\n+                    AuthorizationRequest.class);\n+\n+            //This will throw an UnauthenticatedException if not authenticated\n+            String serviceName = authenticationHandler.doAuthentication(request.getToken());\n+            response = new AuthorizationResponse(true, null,\n+                    serviceName);\n+\n+            ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                    .version(applicationMessage.getVersion())\n+                    .payload(CBOR_MAPPER.writeValueAsBytes(response))\n+                    .build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n+\n+        } catch (Throwable e) {\n+            logger.atError().setEventType(\"authorization-error\").setCause(e).log(\"Failed to handle message\");\n+            try {\n+                response = new AuthorizationResponse(false, e.toString(),\n+                        null);\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(CBOR_MAPPER.writeValueAsBytes(response))\n+                        .build();\n+                fut.complete(new Message(responseMessage.toByteArray()));\n+            } catch (IOException ex) {\n+                logger.atError(\"pubsub-error\", ex).log(\"Failed to send error response\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4MjU1OA=="}, "originalCommit": {"oid": "f6f6baa1e2818776b5fc2e4169ffabc88314f5f8"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDg5NDU1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxNzo0NlrOHFy53w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDowMzo1NVrOHF0UqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzODk0Mw==", "bodyText": "use assertThrows instead", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r475838943", "createdAt": "2020-08-24T19:17:46Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.integrationtests.ipc;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationException;\n+import com.aws.iot.evergreen.ipc.IPCClient;\n+import com.aws.iot.evergreen.ipc.IPCClientImpl;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationClient;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.config.KernelIPCClientConfig;\n+import com.aws.iot.evergreen.ipc.exceptions.UnauthorizedException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.TEST_SERVICE_NAME;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.iot.evergreen.ipc.AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+class IPCAuthorizationTest {\n+\n+    @TempDir\n+    static Path tempRootDir;\n+    private static Kernel kernel;\n+    private IPCClient client;\n+    private AuthorizationClient authorizationClient;\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) throws Exception  {\n+        ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n+        // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Channel not found for given connection context\");\n+\n+        kernel = prepareKernelFromConfigFile(\"ipc.yaml\", TEST_SERVICE_NAME, this.getClass());\n+        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        client = new IPCClientImpl(config);\n+        authorizationClient = new AuthorizationClient(client);\n+    }\n+\n+    @BeforeAll\n+    static void startKernel() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        client.disconnect();\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_null_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(null);\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is null\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_empty_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(\"\");\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is empty\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_invalid_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, UnauthorizedException.class);\n+        try{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "218794af8b1004d0466cc6ceeab7e541a1bb402c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2MjE4NQ==", "bodyText": "fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r475862185", "createdAt": "2020-08-24T20:03:55Z", "author": {"login": "avipinku"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.integrationtests.ipc;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationException;\n+import com.aws.iot.evergreen.ipc.IPCClient;\n+import com.aws.iot.evergreen.ipc.IPCClientImpl;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationClient;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.config.KernelIPCClientConfig;\n+import com.aws.iot.evergreen.ipc.exceptions.UnauthorizedException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.TEST_SERVICE_NAME;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.iot.evergreen.ipc.AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+class IPCAuthorizationTest {\n+\n+    @TempDir\n+    static Path tempRootDir;\n+    private static Kernel kernel;\n+    private IPCClient client;\n+    private AuthorizationClient authorizationClient;\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) throws Exception  {\n+        ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n+        // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Channel not found for given connection context\");\n+\n+        kernel = prepareKernelFromConfigFile(\"ipc.yaml\", TEST_SERVICE_NAME, this.getClass());\n+        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        client = new IPCClientImpl(config);\n+        authorizationClient = new AuthorizationClient(client);\n+    }\n+\n+    @BeforeAll\n+    static void startKernel() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        client.disconnect();\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_null_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(null);\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is null\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_empty_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(\"\");\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is empty\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_invalid_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, UnauthorizedException.class);\n+        try{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzODk0Mw=="}, "originalCommit": {"oid": "218794af8b1004d0466cc6ceeab7e541a1bb402c"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NDg5NTIyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxOToxNzo1OVrOHFy6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDowNDowMVrOHF0U3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTA0Ng==", "bodyText": "use assertThrows on all of these", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r475839046", "createdAt": "2020-08-24T19:17:59Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.integrationtests.ipc;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationException;\n+import com.aws.iot.evergreen.ipc.IPCClient;\n+import com.aws.iot.evergreen.ipc.IPCClientImpl;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationClient;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.config.KernelIPCClientConfig;\n+import com.aws.iot.evergreen.ipc.exceptions.UnauthorizedException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.TEST_SERVICE_NAME;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.iot.evergreen.ipc.AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+class IPCAuthorizationTest {\n+\n+    @TempDir\n+    static Path tempRootDir;\n+    private static Kernel kernel;\n+    private IPCClient client;\n+    private AuthorizationClient authorizationClient;\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) throws Exception  {\n+        ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n+        // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Channel not found for given connection context\");\n+\n+        kernel = prepareKernelFromConfigFile(\"ipc.yaml\", TEST_SERVICE_NAME, this.getClass());\n+        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        client = new IPCClientImpl(config);\n+        authorizationClient = new AuthorizationClient(client);\n+    }\n+\n+    @BeforeAll\n+    static void startKernel() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        client.disconnect();\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_null_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(null);\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is null\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_empty_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "218794af8b1004d0466cc6ceeab7e541a1bb402c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg2MjIzOA==", "bodyText": "fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/375#discussion_r475862238", "createdAt": "2020-08-24T20:04:01Z", "author": {"login": "avipinku"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.aws.iot.evergreen.integrationtests.ipc;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationException;\n+import com.aws.iot.evergreen.ipc.IPCClient;\n+import com.aws.iot.evergreen.ipc.IPCClientImpl;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationClient;\n+import com.aws.iot.evergreen.ipc.authorization.AuthorizationResponse;\n+import com.aws.iot.evergreen.ipc.config.KernelIPCClientConfig;\n+import com.aws.iot.evergreen.ipc.exceptions.UnauthorizedException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.TEST_SERVICE_NAME;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.iot.evergreen.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.iot.evergreen.ipc.AuthenticationHandler.AUTH_TOKEN_LOOKUP_KEY;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.iot.evergreen.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+class IPCAuthorizationTest {\n+\n+    @TempDir\n+    static Path tempRootDir;\n+    private static Kernel kernel;\n+    private IPCClient client;\n+    private AuthorizationClient authorizationClient;\n+\n+    @BeforeEach\n+    void beforeEach(ExtensionContext context) throws Exception  {\n+        ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n+        // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Channel not found for given connection context\");\n+\n+        kernel = prepareKernelFromConfigFile(\"ipc.yaml\", TEST_SERVICE_NAME, this.getClass());\n+        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        client = new IPCClientImpl(config);\n+        authorizationClient = new AuthorizationClient(client);\n+    }\n+\n+    @BeforeAll\n+    static void startKernel() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        client.disconnect();\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_null_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);\n+        try{\n+            authorizationClient.validateToken(null);\n+        } catch (AuthorizationException e) {\n+            assertEquals(\"Provided auth token is null\", e.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_authorizationClient_WHEN_empty_token_provided_THEN_Fail(ExtensionContext context) {\n+\n+        ignoreExceptionOfType(context, AuthorizationException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgzOTA0Ng=="}, "originalCommit": {"oid": "218794af8b1004d0466cc6ceeab7e541a1bb402c"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4562, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}