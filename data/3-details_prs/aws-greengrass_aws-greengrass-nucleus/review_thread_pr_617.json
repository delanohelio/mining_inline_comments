{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDU1Nzg5", "number": 617, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozMDowNFrOE1dWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyMjo0MFrOE1yVEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDkwODQ5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCServicesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozMDowNFrOHtvqiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTo1MjozNlrOHtwEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyODkwNA==", "bodyText": "Can we add a test where client does not specify deploymentId", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/617#discussion_r517728904", "createdAt": "2020-11-05T01:30:04Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -261,6 +261,7 @@ public void onStreamEvent(ValidateConfigurationUpdateEvents events) {\n                                     new SendConfigurationValidityReportRequest();\n                             ConfigurationValidityReport report = new ConfigurationValidityReport();\n                             report.setStatus(ConfigurationValidityStatus.ACCEPTED);\n+                            report.setDeploymentId(events.getValidateConfigurationUpdateEvent().getDeploymentId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0aac1c2a99cea1c45f905c4106fc7ea500d017"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNTUzMw==", "bodyText": "Tried it, nothing happens. The handler is invoked with a null deployment ID which it won't find, so it ought send back an error that it couldn't find the validation request", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/617#discussion_r517735533", "createdAt": "2020-11-05T01:52:36Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -261,6 +261,7 @@ public void onStreamEvent(ValidateConfigurationUpdateEvents events) {\n                                     new SendConfigurationValidityReportRequest();\n                             ConfigurationValidityReport report = new ConfigurationValidityReport();\n                             report.setStatus(ConfigurationValidityStatus.ACCEPTED);\n+                            report.setDeploymentId(events.getValidateConfigurationUpdateEvent().getDeploymentId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyODkwNA=="}, "originalCommit": {"oid": "da0aac1c2a99cea1c45f905c4106fc7ea500d017"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM0NTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyMjo0MFrOHuQkog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODozMToxM1rOHuQ4dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2ODA2Ng==", "bodyText": "Do we need this check here ? This should be handled at handleRequest() L206", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/617#discussion_r518268066", "createdAt": "2020-11-05T18:22:40Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "diffHunk": "@@ -211,13 +214,17 @@ private long getTimeToReCheck(long timeout, List<Future<DeferUpdateRequest>> def\n                 if (fut.isDone()) {\n                     try {\n                         DeferUpdateRequest deferRequest = fut.get();\n-                        long timeToRecheck = currentTimeMillis + deferRequest.getRecheckTimeInMs();\n-                        if (timeToRecheck > maxTimeToReCheck) {\n-                            maxTimeToReCheck = timeToRecheck;\n-                            logger.atInfo().setEventType(\"service-update-deferred\")\n-                                    .log(\"deferred for {} millis with message {}\",\n-                                            deferRequest.getRecheckTimeInMs(),\n-                                            deferRequest.getMessage());\n+                        if (deploymentId.equals(deferRequest.getDeploymentId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22c7ce684c91d0cf9e01cb2d0fb89ddb4e28832a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2OTE5OQ==", "bodyText": "Handle request already found it, but now we need to make sure that the DeferUpdateRequest object is for the request that we're actually processing, otherwise this change will have done nothing and it will still defer some random request.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/617#discussion_r518269199", "createdAt": "2020-11-05T18:24:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "diffHunk": "@@ -211,13 +214,17 @@ private long getTimeToReCheck(long timeout, List<Future<DeferUpdateRequest>> def\n                 if (fut.isDone()) {\n                     try {\n                         DeferUpdateRequest deferRequest = fut.get();\n-                        long timeToRecheck = currentTimeMillis + deferRequest.getRecheckTimeInMs();\n-                        if (timeToRecheck > maxTimeToReCheck) {\n-                            maxTimeToReCheck = timeToRecheck;\n-                            logger.atInfo().setEventType(\"service-update-deferred\")\n-                                    .log(\"deferred for {} millis with message {}\",\n-                                            deferRequest.getRecheckTimeInMs(),\n-                                            deferRequest.getMessage());\n+                        if (deploymentId.equals(deferRequest.getDeploymentId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2ODA2Ng=="}, "originalCommit": {"oid": "22c7ce684c91d0cf9e01cb2d0fb89ddb4e28832a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MzE0MA==", "bodyText": "The futures for the previous deployments are cleared before sending out a PreComponentUpdateEvent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/617#discussion_r518273140", "createdAt": "2020-11-05T18:31:13Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "diffHunk": "@@ -211,13 +214,17 @@ private long getTimeToReCheck(long timeout, List<Future<DeferUpdateRequest>> def\n                 if (fut.isDone()) {\n                     try {\n                         DeferUpdateRequest deferRequest = fut.get();\n-                        long timeToRecheck = currentTimeMillis + deferRequest.getRecheckTimeInMs();\n-                        if (timeToRecheck > maxTimeToReCheck) {\n-                            maxTimeToReCheck = timeToRecheck;\n-                            logger.atInfo().setEventType(\"service-update-deferred\")\n-                                    .log(\"deferred for {} millis with message {}\",\n-                                            deferRequest.getRecheckTimeInMs(),\n-                                            deferRequest.getMessage());\n+                        if (deploymentId.equals(deferRequest.getDeploymentId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2ODA2Ng=="}, "originalCommit": {"oid": "22c7ce684c91d0cf9e01cb2d0fb89ddb4e28832a"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 470, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}