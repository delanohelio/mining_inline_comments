{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDg3MDQz", "number": 484, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0NTozMlrOEoUYRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozMzowN1rOEosWog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEyMzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0NTozMlrOHZVaHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNToxMDo1OVrOHZadNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw==", "bodyText": "If these aggregations don't actually make sense, then we should just disable this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496327197", "createdAt": "2020-09-29T01:45:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzYzMg==", "bodyText": "https://docs.aws.amazon.com/greengrass/latest/developerguide/telemetry.html#subscribe-for-telemetry-data", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496327632", "createdAt": "2020-09-29T01:47:09Z", "author": {"login": "saranyailla"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzk3MA==", "bodyText": "Lets keep the kernel ones to average for now since they are newer metrics. System metrics have to be sum to keep parity with V1.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496327970", "createdAt": "2020-09-29T01:48:40Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzMDk3OA==", "bodyText": "If I keep kernel metrics to have \"Average\" then that entire message is considered as invalid payload. For the UATs to be working, it has to be Sum for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496330978", "createdAt": "2020-09-29T01:55:09Z", "author": {"login": "saranyailla"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM4Mzc5MA==", "bodyText": "The documentation is ambiguous:\n                    {\n                        \"N\": \"CpuUsage\",\n                        \"Sum\": 35.63,\n                        \"U\": \"Percent\"\n                    }\n\nImplies an average. But:\n\nThe aggregated metric value. The telemetry agent adds new values to the previous total, so the sum is an ever-increasing value. You can use the timestamp to find the value of a specific aggregation. For example, to find the latest aggregated value, subtract the previous timestamped value from the latest timestamped value.\n\nSeems like Sum is being overloaded as an \"n\" value, where Sum and Average can be calculated on the receiving end. What is the original telemetry agent doing for these system metrics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496383790", "createdAt": "2020-09-29T04:34:11Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQwOTkwOA==", "bodyText": "System metrics are an exception case in V1. We get the value when the aggregation happens fro CPU usage, number of FDs and Mem Used and add it to the aggregated data snapshot. We don't really perform any kind of aggregation on it.\nEven in v2, since the aggregation time and the system metrics emission time interval is the same, we won't perform any aggregation on these metrics.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496409908", "createdAt": "2020-09-29T05:10:59Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelMetricsEmitter.java", "diffHunk": "@@ -48,71 +48,71 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStarting\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STARTING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsInstalled\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.INSTALLED, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStateless\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STATELESS, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsStopping\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, stateCount.getOrDefault(State.STOPPING, 0));\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"NumberOfComponentsBroken\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzE5Nw=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzEyNDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/telemetry/SystemMetricsEmitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0NTo1OFrOHZValg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo1NzozMFrOHZVv9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzMxOA==", "bodyText": "sums definitely don't make sense here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496327318", "createdAt": "2020-09-29T01:45:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/telemetry/SystemMetricsEmitter.java", "diffHunk": "@@ -40,15 +40,15 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"TotalNumberOfFDs\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, systemInfo.getOperatingSystem().getFileSystem().getOpenFileDescriptors());\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"SystemMemUsage\")\n                 .unit(TelemetryUnit.Megabytes)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyOTQ5MQ==", "bodyText": "You can't just sum the memory usage or cpu usage over time, that isn't meaningful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496329491", "createdAt": "2020-09-29T01:53:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/telemetry/SystemMetricsEmitter.java", "diffHunk": "@@ -40,15 +40,15 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"TotalNumberOfFDs\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, systemInfo.getOperatingSystem().getFileSystem().getOpenFileDescriptors());\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"SystemMemUsage\")\n                 .unit(TelemetryUnit.Megabytes)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzMxOA=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMzMjc4OQ==", "bodyText": "@saranyailla can you add a TODO here to check with the PM? This is a breaking change if we do want to make it Average. So after consulting with the PM and the cloud team, we can make the change if necessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496332789", "createdAt": "2020-09-29T01:57:30Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/telemetry/SystemMetricsEmitter.java", "diffHunk": "@@ -40,15 +40,15 @@ public void emitMetrics() {\n                 .namespace(NAMESPACE)\n                 .name(\"TotalNumberOfFDs\")\n                 .unit(TelemetryUnit.Count)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)\n                 .build();\n         mf.putMetricData(metric, systemInfo.getOperatingSystem().getFileSystem().getOpenFileDescriptors());\n \n         metric = Metric.builder()\n                 .namespace(NAMESPACE)\n                 .name(\"SystemMemUsage\")\n                 .unit(TelemetryUnit.Megabytes)\n-                .aggregation(TelemetryAggregation.Average)\n+                .aggregation(TelemetryAggregation.Sum)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNzMxOA=="}, "originalCommit": {"oid": "82d3a85dc226b7a1bc873b41bb8525f147fb03fe"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA1MTg2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozMzowN1rOHZ7pQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTowNTowMlrOHZ8uxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzY2NQ==", "bodyText": "We still need this check right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496953665", "createdAt": "2020-09-29T18:33:07Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -188,10 +188,7 @@ void publishPeriodicMetrics() {\n         Map<Long, List<AggregatedNamespaceData>> metricsToPublishMap =\n                 metricsAggregator.getMetricsToPublish(lastPublish, timestamp);\n         getPeriodicPublishTimeTopic().withValue(timestamp);\n-        // Publish only if the collected metrics are not empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "273b30e4b3ba1aa5e5ab950f581f1578067261ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk3MTQ2Mw==", "bodyText": "If it is empty, then there are no metrics to lose even when it is considered as an invalid payload.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/484#discussion_r496971463", "createdAt": "2020-09-29T19:05:02Z", "author": {"login": "saranyailla"}, "path": "src/main/java/com/aws/greengrass/telemetry/TelemetryAgent.java", "diffHunk": "@@ -188,10 +188,7 @@ void publishPeriodicMetrics() {\n         Map<Long, List<AggregatedNamespaceData>> metricsToPublishMap =\n                 metricsAggregator.getMetricsToPublish(lastPublish, timestamp);\n         getPeriodicPublishTimeTopic().withValue(timestamp);\n-        // Publish only if the collected metrics are not empty.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MzY2NQ=="}, "originalCommit": {"oid": "273b30e4b3ba1aa5e5ab950f581f1578067261ad"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 578, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}