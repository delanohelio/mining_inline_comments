{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDcxMjc4", "number": 100, "title": " Move services under \"services\" keyword", "bodyText": "Move services under \"services\" keyword\nMake EvergreenService.locate() throw ServiceLoadException when unable to load service\n\nIssue #, if available:\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-07T00:03:35Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100", "merged": true, "mergeCommit": {"oid": "6caebbd1597984bb829223ff2d65b7f30df9ea1a"}, "closed": true, "closedAt": "2020-03-12T00:55:48Z", "author": {"login": "ShirleyZheng92"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLJdykAFqTM3MDY5NTExMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMwjrNgBqjMxMjA5OTc3ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjk1MTEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-370695111", "createdAt": "2020-03-07T00:05:43Z", "commit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDowNTo0M1rOFzK4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoyMDo1M1rOFzLEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDA3Nw==", "bodyText": "remove these commented out things as it no longer applies.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389200077", "createdAt": "2020-03-07T00:05:43Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/ipc/ipc.yaml", "diffHunk": "@@ -1,27 +1,27 @@\n ---\n+services:\n+  #launchers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDM2NQ==", "bodyText": "Did you look at Crashable? James added that a little while back for having functions which can throw exceptions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389200365", "createdAt": "2020-03-07T00:07:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -400,7 +401,7 @@ public final synchronized T put(T v) {\n             }\n         }\n \n-        public final synchronized T computeIfEmpty(Function<Value, T> s) {\n+        public final synchronized <E extends Exception> T computeIfEmpty(ThrowsFunction<Value, T, E> s) throws E {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTA0MA==", "bodyText": "Delete all references to this search url list if we're not going to look anything up from it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389201040", "createdAt": "2020-03-07T00:10:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -155,54 +157,38 @@ public synchronized void reportState(State newState) {\n      * @param context context to lookup the name in\n      * @param name    name of the service to find\n      * @return found service or null\n+     * @throws ServiceLoadException\n      */\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n-    public static EvergreenService locate(Context context, String name) {\n+    public static EvergreenService locate(Context context, String name) throws ServiceLoadException {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n             Configuration configuration = context.get(Configuration.class);\n-            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n-            assert (topics != null);\n-            if (topics.isEmpty()) {\n-                // No definition of this service was found in the config file.\n-                // weave config fragments in from elsewhere...\n-                Kernel kernel = context.get(Kernel.class);\n-                for (String serverUrl : kernel.getServiceServerURLList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTI3Ng==", "bodyText": "You have a duplicate setCause", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389201276", "createdAt": "2020-03-07T00:11:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -213,59 +199,41 @@ public static EvergreenService locate(Context context, String name) {\n                     clazz = si.get(name);\n                 }\n             }\n+            // If found class, try to load service class from plugins.\n             if (clazz != null) {\n                 try {\n                     Constructor<?> ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(topics);\n+                    ret = (EvergreenService) ctor.newInstance(serviceRootTopics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n                     staticLogger.atInfo().setEventType(\"evergreen-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                    staticLogger.atError().setCause(ex).setEventType(\"evergreen-service-load-error\").setCause(ex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTQ4Mw==", "bodyText": "This comment is misplaced, should be on 223. Here it should be \"if class not found and nothing found in config, then throw\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389201483", "createdAt": "2020-03-07T00:12:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -213,59 +199,41 @@ public static EvergreenService locate(Context context, String name) {\n                     clazz = si.get(name);\n                 }\n             }\n+            // If found class, try to load service class from plugins.\n             if (clazz != null) {\n                 try {\n                     Constructor<?> ctor = clazz.getConstructor(Topics.class);\n-                    ret = (EvergreenService) ctor.newInstance(topics);\n+                    ret = (EvergreenService) ctor.newInstance(serviceRootTopics);\n                     if (clazz.getAnnotation(Singleton.class) != null) {\n                         context.put(ret.getClass(), v);\n                     }\n                     staticLogger.atInfo().setEventType(\"evergreen-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setCause(ex).setEventType(\"evergreen-service-load-error\")\n+                    staticLogger.atError().setCause(ex).setEventType(\"evergreen-service-load-error\").setCause(ex)\n                             .addKeyValue(\"className\", clazz.getName()).log(\"Can't create Evergreen Service instance\");\n-                    ret = errNode(context, name, \"Can't create code-backed service from \" + clazz.getSimpleName(), ex);\n+                    throw new ServiceLoadException(\"Can't create code-backed service from \" + clazz.getSimpleName());\n                 }\n-            } else if (topics.isEmpty()) {\n+            // if not found, initialize GenericExternalService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTc4MA==", "bodyText": "This log won't do any good since you haven't provided placeholders {}. This should be\nlogger.error(\"Unable to load service {}\", s, se), or use addKeyValue", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389201780", "createdAt": "2020-03-07T00:14:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -284,6 +285,8 @@ public Kernel launch() {\n             autostart.forEach(s -> {\n                 try {\n                     main.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                } catch (ServiceLoadException se) {\n+                    logger.atError().setCause(se).log(\"Unable to load service\", s, se);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTg4OQ==", "bodyText": "Should we be throwing from here? I think so.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389201889", "createdAt": "2020-03-07T00:14:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -326,7 +329,11 @@ private boolean ensureCreated(Path p) {\n     public EvergreenService getMain() {\n         EvergreenService m = mainService;\n         if (m == null) {\n-            m = mainService = EvergreenService.locate(context, mainServiceName);\n+            try {\n+                m = mainService = EvergreenService.locate(context, mainServiceName);\n+            } catch (ServiceLoadException e) {\n+                logger.atError().log(\"Cannot get main service\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjE4NA==", "bodyText": "Can we fail/succeed faster here instead of doing if-else? Otherwise it is hard to keep track of what is null and what that means.\nNeed to make sure that the future gets completed in this case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389202184", "createdAt": "2020-03-07T00:16:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -576,37 +583,50 @@ private void addServiceSearchURL(Object url) {\n     public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n         CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n \n-        Map<String, CountDownLatch> latches = new HashMap<>();\n-        newConfig.forEach((key, v) -> latches.put((String) key, new CountDownLatch(1)));\n-\n-        EvergreenService.GlobalStateChangeListener listener = (service, was) -> {\n-            if (newConfig.containsKey(service.getName()) && service.getState().equals(State.RUNNING)) {\n-                latches.get(service.getName()).countDown();\n-            }\n-            if (latches.values().stream().allMatch(c -> c.getCount() <= 0)) {\n-                totallyCompleteFuture.complete(null);\n-            }\n-        };\n-\n-        totallyCompleteFuture.thenRun(() -> {\n-            context.removeGlobalStateChangeListener(listener);\n-        });\n+        final EvergreenService.GlobalStateChangeListener listener;\n+        final Map<String, Object> serviceConfig;\n+\n+        if (newConfig.get(\"services\") == null) {\n+            listener = null;\n+            serviceConfig = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjMwOA==", "bodyText": "Remove system outs.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389202308", "createdAt": "2020-03-07T00:17:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -576,37 +583,50 @@ private void addServiceSearchURL(Object url) {\n     public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n         CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n \n-        Map<String, CountDownLatch> latches = new HashMap<>();\n-        newConfig.forEach((key, v) -> latches.put((String) key, new CountDownLatch(1)));\n-\n-        EvergreenService.GlobalStateChangeListener listener = (service, was) -> {\n-            if (newConfig.containsKey(service.getName()) && service.getState().equals(State.RUNNING)) {\n-                latches.get(service.getName()).countDown();\n-            }\n-            if (latches.values().stream().allMatch(c -> c.getCount() <= 0)) {\n-                totallyCompleteFuture.complete(null);\n-            }\n-        };\n-\n-        totallyCompleteFuture.thenRun(() -> {\n-            context.removeGlobalStateChangeListener(listener);\n-        });\n+        final EvergreenService.GlobalStateChangeListener listener;\n+        final Map<String, Object> serviceConfig;\n+\n+        if (newConfig.get(\"services\") == null) {\n+            listener = null;\n+            serviceConfig = null;\n+        } else {\n+            serviceConfig = (Map<String, Object>) newConfig.get(\"services\");\n+            Map<String, CountDownLatch> latches = new HashMap<>();\n+            serviceConfig.forEach((key, v) -> latches.put((String) key, new CountDownLatch(1)));\n+\n+            listener = (service, was) -> {\n+                System.err.println(String.format(\"get service %s update to %s\", service.getName(), service.getState()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjc0Nw==", "bodyText": "This TODO doesn't match the behavior since you don't have requestRestart here, but requestStart, so something needs to change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389202747", "createdAt": "2020-03-07T00:19:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -576,37 +583,50 @@ private void addServiceSearchURL(Object url) {\n     public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n         CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n \n-        Map<String, CountDownLatch> latches = new HashMap<>();\n-        newConfig.forEach((key, v) -> latches.put((String) key, new CountDownLatch(1)));\n-\n-        EvergreenService.GlobalStateChangeListener listener = (service, was) -> {\n-            if (newConfig.containsKey(service.getName()) && service.getState().equals(State.RUNNING)) {\n-                latches.get(service.getName()).countDown();\n-            }\n-            if (latches.values().stream().allMatch(c -> c.getCount() <= 0)) {\n-                totallyCompleteFuture.complete(null);\n-            }\n-        };\n-\n-        totallyCompleteFuture.thenRun(() -> {\n-            context.removeGlobalStateChangeListener(listener);\n-        });\n+        final EvergreenService.GlobalStateChangeListener listener;\n+        final Map<String, Object> serviceConfig;\n+\n+        if (newConfig.get(\"services\") == null) {\n+            listener = null;\n+            serviceConfig = null;\n+        } else {\n+            serviceConfig = (Map<String, Object>) newConfig.get(\"services\");\n+            Map<String, CountDownLatch> latches = new HashMap<>();\n+            serviceConfig.forEach((key, v) -> latches.put((String) key, new CountDownLatch(1)));\n+\n+            listener = (service, was) -> {\n+                System.err.println(String.format(\"get service %s update to %s\", service.getName(), service.getState()));\n+                if (serviceConfig.containsKey(service.getName()) && service.getState().equals(State.RUNNING)) {\n+                    latches.get(service.getName()).countDown();\n+                }\n+                if (latches.values().stream().allMatch(c -> c.getCount() <= 0)) {\n+                    totallyCompleteFuture.complete(null);\n+                }\n+            };\n+            totallyCompleteFuture.thenRun(() -> {\n+                context.removeGlobalStateChangeListener(listener);\n+            });\n+        }\n \n         context.get(UpdateSystemSafelyService.class).addUpdateAction(deploymentId, () -> {\n             context.runOnPublishQueueAndWait(() -> {\n                 try {\n                     mergeMap(timestamp, newConfig);\n-                    context.addGlobalStateChangeListener(listener);\n-\n-                    newConfig.keySet().forEach(serviceName -> {\n-                        EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n-                        if (eg == null) {\n-                            logger.error(\"Could not locate EvergreenService for modified service {}\", serviceName);\n-                        } else if (State.NEW.equals(eg.getState())) {\n-                            eg.requestStart();\n-                        }\n-                    });\n-\n+                    if (listener != null) {\n+                        context.addGlobalStateChangeListener(listener);\n+                        serviceConfig.keySet().forEach(serviceName -> {\n+                            try {\n+                                EvergreenService eg = EvergreenService.locate(context, serviceName);\n+                                // TODO: remove requestRestart here as each service will handle update behavior based on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMjkzOA==", "bodyText": "What is up with this link? Just use @link FunctionalInterface?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389202938", "createdAt": "2020-03-07T00:20:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/ThrowsFunction.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.util;\n+\n+import java.util.Objects;\n+\n+\n+/**\n+ * Represents a function that accepts one argument and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMzA2MA==", "bodyText": "Remove all search list stuff since you removed the implementation.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r389203060", "createdAt": "2020-03-07T00:20:53Z", "author": {"login": "MikeDombo"}, "path": "src/test/resources/com/aws/iot/evergreen/kernel/config.yaml", "diffHunk": "@@ -91,50 +89,35 @@ mqtt:\n           curl --silent -L https://bintray.com/artifact/download/andsel/generic/moquette-0.12.1.tar.gz | tar -zxf - -C $W;\n     shutdown:\n       unix: pkill -9  -f \"io[.]moquette[.]broker[.]Server\" || true\n-  mosquitto:\n-    startup:\n-      macos: brew services restart mosquitto\n-    install:\n-      macos:\n-        skipif: brew list | egrep -i -q mosquitto\n-        script:  brew install mosquitto\n-    shutdown:\n-      macos:\n-        script: brew services stop mosquitto\n-    requires:\n-      macos:\n-        homebrew\n-  tinyembeddedthing:\n-    installer: whatever\n \n-fallbackMain:  # This service only gets invoked if the main service fails to even begin to boot\n-  startup: echo sudo reboot -force   # TODO: this is stupid.  Should try to talk to cloud\n-broken:\n-  startup: exit -1\n-ticktock:\n-  run: echo tick-tock\n-  periodic: 2 seconds\n-setenv:\n-  ANSWER: 42\n-main:\n-  install:\n-    skipif: true\n-    all: echo All installed\n-  requires:\n-    macos: jdk11, git, hello-docker, hello-docker-nginx, mqtt, ticktock:INSTALLED\n-    linux: jdk11, git, mqtt, ticktock:INSTALLED # Remove docker dependency for github code check run due to docker install failure.\n-  xyzzy: localhttp, broken\n+  fallbackMain:  # This service only gets invoked if the main service fails to even begin to boot\n+    startup: echo sudo reboot -force   # TODO: this is stupid.  Should try to talk to cloud\n+  broken:\n+    startup: exit -1\n+  ticktock:\n+    run: echo tick-tock\n+    periodic: 2 seconds\n   setenv:\n-    JUSTME: fancy a spot of tea?\n-  run: |-\n-    echo $PATH\n-    pwd\n-    printenv\n-    while true; do\n-    date; sleep 5; echo RUNNING\n-    done\n-  download:\n-    hw.jar: http://foo/hw.jar\n-  args: -jar {hw.jar}\n-system:\n-  ServiceSearchList: https://raw.githubusercontent.com/JamesGosling/SailingForecast/master/docs/evg/\n\\ No newline at end of file\n+    ANSWER: 42\n+  main:\n+    install:\n+      skipif: true\n+      all: echo All installed\n+    requires:\n+      macos: jdk11, git, hello-docker, hello-docker-nginx, mqtt, ticktock:INSTALLED\n+      linux: jdk11, git, mqtt, ticktock:INSTALLED # Remove docker dependency for github code check run due to docker install failure.\n+    xyzzy: localhttp, broken\n+    setenv:\n+      JUSTME: fancy a spot of tea?\n+    run: |-\n+      echo $PATH\n+      pwd\n+      printenv\n+      while true; do\n+      date; sleep 5; echo RUNNING\n+      done\n+    download:\n+      hw.jar: http://foo/hw.jar\n+    args: -jar {hw.jar}\n+  system:\n+    ServiceSearchList: https://raw.githubusercontent.com/JamesGosling/SailingForecast/master/docs/evg/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d"}, "originalPosition": 237}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf2c6ed80b13c90819027629e7e7f5a39812655d", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf2c6ed80b13c90819027629e7e7f5a39812655d", "committedDate": "2020-03-06T23:59:22Z", "message": "Draft CR to move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service\n\nTested on KernelTest.java"}, "afterCommit": {"oid": "c7ab1849687501cf0f3c6be7cf54bea7502a2745", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7ab1849687501cf0f3c6be7cf54bea7502a2745", "committedDate": "2020-03-07T01:57:36Z", "message": "Draft CR to move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service\n\nTested on KernelTest.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7ab1849687501cf0f3c6be7cf54bea7502a2745", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c7ab1849687501cf0f3c6be7cf54bea7502a2745", "committedDate": "2020-03-07T01:57:36Z", "message": "Draft CR to move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service\n\nTested on KernelTest.java"}, "afterCommit": {"oid": "32b2257f53b23a5fd6a7df453d393867edc4ccfa", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32b2257f53b23a5fd6a7df453d393867edc4ccfa", "committedDate": "2020-03-09T23:32:09Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b2257f53b23a5fd6a7df453d393867edc4ccfa", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32b2257f53b23a5fd6a7df453d393867edc4ccfa", "committedDate": "2020-03-09T23:32:09Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}, "afterCommit": {"oid": "cd808fe437b413dcdd9e4a937f9755f2890b6ec9", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cd808fe437b413dcdd9e4a937f9755f2890b6ec9", "committedDate": "2020-03-09T23:40:57Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd808fe437b413dcdd9e4a937f9755f2890b6ec9", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cd808fe437b413dcdd9e4a937f9755f2890b6ec9", "committedDate": "2020-03-09T23:40:57Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}, "afterCommit": {"oid": "54a88529518d03779edc96b718af575dcd16296f", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/54a88529518d03779edc96b718af575dcd16296f", "committedDate": "2020-03-10T00:00:32Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54a88529518d03779edc96b718af575dcd16296f", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/54a88529518d03779edc96b718af575dcd16296f", "committedDate": "2020-03-10T00:00:32Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}, "afterCommit": {"oid": "86faf38aa7c45a4e9ae1e5c16f9209805d5fc6d0", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/86faf38aa7c45a4e9ae1e5c16f9209805d5fc6d0", "committedDate": "2020-03-10T00:20:33Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjc3NjA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-372277605", "createdAt": "2020-03-10T19:58:57Z", "commit": {"oid": "bc8822632c7287f4184651370c08dcb33276e186"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo1ODo1N1rOF0e0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo1ODo1N1rOF0e0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NTI3Ng==", "bodyText": "This is expected? Why have both name and full name in that case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r390575276", "createdAt": "2020-03-10T19:58:57Z", "author": {"login": "chaurah"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -47,7 +47,7 @@\n     void beforeEach() {\n         Mockito.when(config.createLeafChild(eq(\"_State\"))).thenReturn(stateTopic);\n         Mockito.when(config.createLeafChild(eq(\"requires\"))).thenReturn(requiresTopic);\n-        Mockito.when(config.getFullName()).thenReturn(EVERGREEN_SERVICE_FULL_NAME);\n+        Mockito.when(config.getName()).thenReturn(EVERGREEN_SERVICE_FULL_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8822632c7287f4184651370c08dcb33276e186"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc8822632c7287f4184651370c08dcb33276e186", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc8822632c7287f4184651370c08dcb33276e186", "committedDate": "2020-03-10T18:46:01Z", "message": "Merge branch 'master' into configChange"}, "afterCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c816b7c0aa898193c237b61a07213d66113b6586", "committedDate": "2020-03-10T23:27:57Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDU0MDU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-372454057", "createdAt": "2020-03-11T03:23:26Z", "commit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTgwNDMz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-372980433", "createdAt": "2020-03-11T17:35:53Z", "commit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozNTo1M1rOF1BqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0MDoxNVrOF1B13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NjAzMg==", "bodyText": "I'd say the name isn't descriptive enough... Also Load is very generic... What kind of error are we trying to throw here? Unable to locate?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r391146032", "createdAt": "2020-03-11T17:35:53Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/exceptions/ServiceLoadException.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.kernel.exceptions;\n+\n+public class ServiceLoadException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0NzM2NQ==", "bodyText": "I did notice the strange restarting behavior of SafeSystemUpdate service. Is this related to the flakiness of MergeConfigTest?\nAlso do we have a plan forward for the TODO? I think this one has high priority.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r391147365", "createdAt": "2020-03-11T17:37:55Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -280,10 +281,19 @@ public Kernel launch() {\n             context.put(ShellRunner.class, context.get(ShellRunner.Dryrun.class));\n         }\n         try {\n-            EvergreenService main = getMain(); // Trigger boot  (!?!?)\n+            mainService = getMain();\n             autostart.forEach(s -> {\n                 try {\n-                    main.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    if (!s.contains(\"SafeSystemUpdate\")) {\n+                        mainService.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    } else {\n+                        // SafeSystemUpdate will reset to Installed after update.\n+                        // This is a hacky way to avoid restarting depending services.\n+                        // TODO: Find a proper way handle this situation.\n+                        mainService.addDependency(EvergreenService.locate(context, s), State.INSTALLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0ODc0Mw==", "bodyText": "If root service isn't found, should this be an error?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r391148743", "createdAt": "2020-03-11T17:39:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -155,117 +160,87 @@ public synchronized void reportState(State newState) {\n      * @param context context to lookup the name in\n      * @param name    name of the service to find\n      * @return found service or null\n+     * @throws ServiceLoadException if service cannot load\n      */\n     @SuppressWarnings({\"checkstyle:emptycatchblock\"})\n-    public static EvergreenService locate(Context context, String name) {\n+    public static EvergreenService locate(Context context, String name) throws ServiceLoadException {\n         return context.getv(EvergreenService.class, name).computeIfEmpty(v -> {\n             Configuration configuration = context.get(Configuration.class);\n-            Topics topics = configuration.lookupTopics(Configuration.splitPath(name));\n-            assert (topics != null);\n-            if (topics.isEmpty()) {\n-                // No definition of this service was found in the config file.\n-                // weave config fragments in from elsewhere...\n-                Kernel kernel = context.get(Kernel.class);\n-                for (String serverUrl : kernel.getServiceServerURLList()) {\n-                    if (topics.isEmpty()) {\n-                        try {\n-                            // TODO: should probably think hard about what file extension to use\n-                            // TODO: allow the file to be a zip package?\n-                            URL configUrl = new URL(serverUrl + name + \".evg\");\n-                            kernel.read(configUrl, false);\n-                            if (!topics.isEmpty()) {\n-                                staticLogger.atInfo().setEventType(\"service-config-found\")\n-                                        .addKeyValue(\"configURL\", configUrl).log(\"Found external service definition\");\n-                            }\n-                        } catch (IOException ignored) {\n-                        }\n-                    } else {\n-                        break;\n-                    }\n-                }\n-                if (topics.isEmpty()) {\n-                    topics.createLeafChild(\"run\").dflt(\"echo No definition found for \" + name + \";exit -1\");\n-                    staticLogger.atWarn().setEventType(\"service-config-not-found\").addKeyValue(\"serviceName\", name)\n-                            .log();\n-                }\n+            Topics serviceRootTopics = configuration.lookupTopics(SERVICES_NAMESPACE_TOPIC, name);\n+            if (serviceRootTopics == null || serviceRootTopics.isEmpty()) {\n+                staticLogger.atWarn().setEventType(\"service-config-not-found\").addKeyValue(\"serviceName\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0OTAyMg==", "bodyText": "Love this!!!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r391149022", "createdAt": "2020-03-11T17:40:15Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -57,6 +57,10 @@ public String getFullName() {\n         return fnc;\n     }\n \n+    public String getName() {\n+        return name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyOTg3MTA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-372987106", "createdAt": "2020-03-11T17:44:23Z", "commit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0NDoyM1rOF1CAhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzo0NDoyM1rOF1CAhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE1MTc0OA==", "bodyText": "Does newConfig has a services key? Is that change made to the UpdatingKernelState in deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#discussion_r391151748", "createdAt": "2020-03-11T17:44:23Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -573,21 +587,29 @@ private void addServiceSearchURL(Object url) {\n      * @param newConfig    the map of new configuration\n      * @return future which completes only once the config is merged and all the services in the config are running\n      */\n+    @SuppressFBWarnings(\"NP_NONNULL_PARAM_VIOLATION\") // https://github.com/findbugsproject/findbugs/issues/79\n     public Future<Void> mergeInNewConfig(String deploymentId, long timestamp, Map<Object, Object> newConfig) {\n         CompletableFuture<Void> totallyCompleteFuture = new CompletableFuture<>();\n \n+\n+        if (newConfig.get(\"services\") == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c816b7c0aa898193c237b61a07213d66113b6586", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c816b7c0aa898193c237b61a07213d66113b6586", "committedDate": "2020-03-10T23:27:57Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}, "afterCommit": {"oid": "1c3392d7f0112d5101769ca9329051d50f1aade3", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1c3392d7f0112d5101769ca9329051d50f1aade3", "committedDate": "2020-03-11T19:31:11Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTk0MDQy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/100#pullrequestreview-373194042", "createdAt": "2020-03-11T23:33:15Z", "commit": {"oid": "f3f953c2fb553fc7c87f88f7afef7895bdcec1ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c83256bbd3ce138094b4b7cf3f1283abbe821f1", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8c83256bbd3ce138094b4b7cf3f1283abbe821f1", "committedDate": "2020-03-12T00:02:26Z", "message": "Move services under \"services\" keyword\n\n1. Move services under \"services\" keyword\n1. Make EvergreenService.locate() throw Exception on unable to load service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b7e46b43cce07ce43ad99b4cc576398c3d61b85", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b7e46b43cce07ce43ad99b4cc576398c3d61b85", "committedDate": "2020-03-12T00:02:26Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c41f008992883d18ece8769e041a585f86c0bac", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9c41f008992883d18ece8769e041a585f86c0bac", "committedDate": "2020-03-11T23:50:38Z", "message": "Merge branch 'master' into configChange"}, "afterCommit": {"oid": "8b7e46b43cce07ce43ad99b4cc576398c3d61b85", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b7e46b43cce07ce43ad99b4cc576398c3d61b85", "committedDate": "2020-03-12T00:02:26Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2311, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}