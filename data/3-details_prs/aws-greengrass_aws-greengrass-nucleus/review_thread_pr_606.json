{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MzYzODQw", "number": 606, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoyNjoxOVrOE0kuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoyNjowNlrOE0mFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTYzMjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjoyNjoxOVrOHsX_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTowMDo1MFrOHsdCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5MjQyMQ==", "bodyText": "The error log is more accurate to be \"Unable to add publish request to spooler\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/606#discussion_r516292421", "createdAt": "2020-11-02T22:26:19Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -90,21 +89,23 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                 doAuthorization(this.getOperationModelContext().getOperationName(), serviceName, topic);\n             } catch (AuthorizationException e) {\n                 LOGGER.atError().cause(e).log();\n-                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e.getMessage()));\n+                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e));\n             }\n \n             PublishRequest publishRequest = PublishRequest.builder().payload(request.getPayload()).topic(topic)\n                     .retain(request.isRetain()).qos(getQualityOfServiceFromQOS(request.getQos())).build();\n             CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n-            // GG_NEEDS_REVIEW: TODO: replace this with a check that message is inserted in spooler queue\n-            try {\n-                future.get(mqttClient.getTimeout(), TimeUnit.MILLISECONDS);\n-            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n-                        .log(\"Unable to publish to topic\");\n-                throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic,\n-                        e.getMessage()));\n+            if (future.isCompletedExceptionally()) {\n+                try {\n+                    future.get();\n+                } catch (InterruptedException ignore) {\n+                    // this won't happen since future already completed\n+                } catch (ExecutionException e) {\n+                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n+                            .log(\"Unable to publish to topic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa9938023fce5517a24801dc953b503556440f4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3NTIyNA==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/606#discussion_r516375224", "createdAt": "2020-11-03T01:00:50Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -90,21 +89,23 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                 doAuthorization(this.getOperationModelContext().getOperationName(), serviceName, topic);\n             } catch (AuthorizationException e) {\n                 LOGGER.atError().cause(e).log();\n-                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e.getMessage()));\n+                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e));\n             }\n \n             PublishRequest publishRequest = PublishRequest.builder().payload(request.getPayload()).topic(topic)\n                     .retain(request.isRetain()).qos(getQualityOfServiceFromQOS(request.getQos())).build();\n             CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n-            // GG_NEEDS_REVIEW: TODO: replace this with a check that message is inserted in spooler queue\n-            try {\n-                future.get(mqttClient.getTimeout(), TimeUnit.MILLISECONDS);\n-            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n-                        .log(\"Unable to publish to topic\");\n-                throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic,\n-                        e.getMessage()));\n+            if (future.isCompletedExceptionally()) {\n+                try {\n+                    future.get();\n+                } catch (InterruptedException ignore) {\n+                    // this won't happen since future already completed\n+                } catch (ExecutionException e) {\n+                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n+                            .log(\"Unable to publish to topic\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5MjQyMQ=="}, "originalCommit": {"oid": "7fa9938023fce5517a24801dc953b503556440f4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTY0NTc0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMjozMToxOFrOHsYHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoxNjoyMlrOHsZzsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5NDU5Mg==", "bodyText": "I did not get why this method should be deleted. The mqttClient.subscribe() mqttClient.unsubscribe are also involved this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/606#discussion_r516294592", "createdAt": "2020-11-02T22:31:18Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -547,10 +547,6 @@ public void addToCallbackEvents(MqttClientConnectionEvents callbacks) {\n         callbackEventManager.addToCallbackEvents(callbacks);\n     }\n \n-    public int getTimeout() {\n-        return Coerce.toInt(mqttTopics.findOrDefault(DEFAULT_MQTT_OPERATION_TIMEOUT, MQTT_OPERATION_TIMEOUT_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa9938023fce5517a24801dc953b503556440f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyMjIyNg==", "bodyText": "mqttClient.subscribe() and mqttClient.unsubscribe are calling the publish method of AwsIotMqttClient.\nThis one was added by me just for calling in MqttProxyIPCAgent, so removing it now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/606#discussion_r516322226", "createdAt": "2020-11-02T23:16:22Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -547,10 +547,6 @@ public void addToCallbackEvents(MqttClientConnectionEvents callbacks) {\n         callbackEventManager.addToCallbackEvents(callbacks);\n     }\n \n-    public int getTimeout() {\n-        return Coerce.toInt(mqttTopics.findOrDefault(DEFAULT_MQTT_OPERATION_TIMEOUT, MQTT_OPERATION_TIMEOUT_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI5NDU5Mg=="}, "originalCommit": {"oid": "7fa9938023fce5517a24801dc953b503556440f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTg1MzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoyNjowNlrOHsaMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzoyNjowNlrOHsaMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMyODU3MQ==", "bodyText": "Can you add an integration test to make sure the appropriate error response is returned to the IPC client?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/606#discussion_r516328571", "createdAt": "2020-11-02T23:26:06Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/builtin/services/mqttproxy/MqttProxyIPCAgent.java", "diffHunk": "@@ -90,21 +89,23 @@ public PublishToIoTCoreResponse handleRequest(PublishToIoTCoreRequest request) {\n                 doAuthorization(this.getOperationModelContext().getOperationName(), serviceName, topic);\n             } catch (AuthorizationException e) {\n                 LOGGER.atError().cause(e).log();\n-                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e.getMessage()));\n+                throw new UnauthorizedError(String.format(\"Authorization failed with error %s\", e));\n             }\n \n             PublishRequest publishRequest = PublishRequest.builder().payload(request.getPayload()).topic(topic)\n                     .retain(request.isRetain()).qos(getQualityOfServiceFromQOS(request.getQos())).build();\n             CompletableFuture<Integer> future = mqttClient.publish(publishRequest);\n \n-            // GG_NEEDS_REVIEW: TODO: replace this with a check that message is inserted in spooler queue\n-            try {\n-                future.get(mqttClient.getTimeout(), TimeUnit.MILLISECONDS);\n-            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n-                LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n-                        .log(\"Unable to publish to topic\");\n-                throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic,\n-                        e.getMessage()));\n+            if (future.isCompletedExceptionally()) {\n+                try {\n+                    future.get();\n+                } catch (InterruptedException ignore) {\n+                    // this won't happen since future already completed\n+                } catch (ExecutionException e) {\n+                    LOGGER.atError().cause(e).kv(TOPIC_KEY, topic).kv(SERVICE_KEY, serviceName)\n+                            .log(\"Unable to publish to topic\");\n+                    throw new ServiceError(String.format(\"Publish to topic %s failed with error %s\", topic, e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa9938023fce5517a24801dc953b503556440f4"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}