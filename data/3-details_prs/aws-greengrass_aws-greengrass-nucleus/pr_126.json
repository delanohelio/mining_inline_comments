{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjc3MjE3", "number": 126, "title": "E2E Deployment test with IoT Jobs", "bodyText": "Issue #, if available:\nDescription of changes:\nThis PR adds a new end-to-end test which exercises our deployment system through IoT Jobs. It creates all the IoT Core resources and then starts up the kernel with them. It then sets up the IoT Job with a test deployment document, then waits for the IoT Job to succeed or fail.\nAdditionally, this change breaks out this test into a third-tier of testing which is not automatically run as part of mvn verify since it requires AWS credentials.\nThis change also adds the usage of a CachedThreadPool because our existing fixed size threadpool could easily result in deadlocks because each service requires at least 1 thread from this pool to operate. So once there were more than 4 service running at a time, it would lock up, causing flakiness due to the precise ordering of what tasks the pool was able to pick up before exhausting the 4 threads.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-19T23:03:13Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126", "merged": true, "mergeCommit": {"oid": "cbd1ebb6b785515dee78347d0c307960acefa1ab"}, "closed": true, "closedAt": "2020-03-23T18:20:42Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPUYASABqjMxNDc1OTg5MzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQinAhgFqTM3OTcwMTU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7", "committedDate": "2020-03-19T22:58:37Z", "message": "E2E Deployment test with IoT Jobs"}, "afterCommit": {"oid": "0c84b36f7908ed655f94265c36d01d37a0c98ec9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0c84b36f7908ed655f94265c36d01d37a0c98ec9", "committedDate": "2020-03-19T23:18:59Z", "message": "E2E Deployment test with IoT Jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c84b36f7908ed655f94265c36d01d37a0c98ec9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0c84b36f7908ed655f94265c36d01d37a0c98ec9", "committedDate": "2020-03-19T23:18:59Z", "message": "E2E Deployment test with IoT Jobs"}, "afterCommit": {"oid": "9cbb3eb2c277f2c83aaee348894ae94433a03a07", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9cbb3eb2c277f2c83aaee348894ae94433a03a07", "committedDate": "2020-03-19T23:20:54Z", "message": "E2E Deployment test with IoT Jobs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cbb3eb2c277f2c83aaee348894ae94433a03a07", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9cbb3eb2c277f2c83aaee348894ae94433a03a07", "committedDate": "2020-03-19T23:20:54Z", "message": "E2E Deployment test with IoT Jobs"}, "afterCommit": {"oid": "a92e0f72222d8bc7755d94d0c6b4bbcc4fcc969f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a92e0f72222d8bc7755d94d0c6b4bbcc4fcc969f", "committedDate": "2020-03-19T23:26:20Z", "message": "E2E Deployment test with IoT Jobs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUzNzkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-378153791", "createdAt": "2020-03-19T23:10:08Z", "commit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxMDowOFrOF5Daqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoxNjo0MFrOF5Di3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2OTEzMA==", "bodyText": "Packages need to be created in the store as well as part of this test?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395369130", "createdAt": "2020-03-19T23:10:08Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_MQTT_CLIENT_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DeploymentE2ETest extends AbstractBaseITCase {\n+\n+    private static final String ROOT_CA_FILENAME = tempRootDir.resolve(\"rootCA.pem\").toString();\n+    private static final String PRIVATE_KEY_FILENAME = tempRootDir.resolve(\"privKey.key\").toString();\n+    private static final String CERTIFICATE_FILENAME = tempRootDir.resolve(\"thingCert.crt\").toString();\n+\n+    @AfterAll\n+    static void afterAll() {\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Test\n+    void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_and_job_is_successful()\n+            throws Exception {\n+        // Setup IoT resources\n+        Utils.downloadRootCAToFile(new File(ROOT_CA_FILENAME));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(PRIVATE_KEY_FILENAME).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(CERTIFICATE_FILENAME).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        // Inject IoT resources into kernel\n+        Kernel kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(PRIVATE_KEY_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(CERTIFICATE_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(ROOT_CA_FILENAME);\n+        kernel.launch();\n+\n+        // Create Job Doc\n+        String document = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        // TODO: Add packages once we have a mock/real package store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2OTY5Nw==", "bodyText": "Change this to be more restrictive. Certs with these policies are going to live (even though short lived) on different hosts and thats a risk. I would changes the Resource to be the Iot Thing ARN", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395369697", "createdAt": "2020-03-19T23:11:54Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build());\n+        createdJobs.add(jobId);\n+        return jobId;\n+    }\n+\n+    public static void waitForJobToComplete(String jobId, Duration timeout) throws TimeoutException {\n+        Instant start = Instant.now();\n+\n+        while (start.plusMillis(timeout.toMillis()).isAfter(Instant.now())) {\n+            JobStatus status = iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status();\n+            if (status.ordinal() > JobStatus.IN_PROGRESS.ordinal()) {\n+                return;\n+            }\n+        }\n+        throw new TimeoutException();\n+    }\n+\n+    public static ThingInfo createThing() {\n+        // Find or create IoT policy\n+        try {\n+            iotClient.getPolicy(GetPolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).build());\n+        } catch (ResourceNotFoundException e) {\n+            iotClient.createPolicy(CreatePolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).policyDocument(\n+                    \"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": \\\"iot:*\\\",\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTIyOQ==", "bodyText": "May not be applicable for starters but, timeout should be taken as parameter and we should be able to create job without timeout. In my understanding when cloud service creates a job it is not going to put timeout. At some point we are also going to deployment when device gets offline after it receives the job.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395371229", "createdAt": "2020-03-19T23:16:40Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTYzMjc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-378163274", "createdAt": "2020-03-19T23:36:47Z", "commit": {"oid": "a92e0f72222d8bc7755d94d0c6b4bbcc4fcc969f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTY2MzI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-378166324", "createdAt": "2020-03-19T23:45:37Z", "commit": {"oid": "a92e0f72222d8bc7755d94d0c6b4bbcc4fcc969f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0NTozN1rOF5EDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0ODoyNFrOF5EGiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTU5NA==", "bodyText": "Yes it does not affect how the jobs work.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395379594", "createdAt": "2020-03-19T23:45:37Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MTIyOQ=="}, "originalCommit": {"oid": "f9dc44da3807bbafce064f5b6b4ed62d1cddf5e7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM4MDM2Mw==", "bodyText": "Handle ThrottlingException for this and other resource CRUD operations in Iot? Add retries with backoff?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395380363", "createdAt": "2020-03-19T23:48:24Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+\n+    public static String createJob(String document, String[] targets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a92e0f72222d8bc7755d94d0c6b4bbcc4fcc969f"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1009bf6164b9c7a19fc819b62f27ada3bde5615", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b1009bf6164b9c7a19fc819b62f27ada3bde5615", "committedDate": "2020-03-20T00:27:52Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}, "afterCommit": {"oid": "656749d351d506c73e8b779e6c749609101f0724", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/656749d351d506c73e8b779e6c749609101f0724", "committedDate": "2020-03-20T00:32:35Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTgyMTI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-378182126", "createdAt": "2020-03-20T00:40:39Z", "commit": {"oid": "656749d351d506c73e8b779e6c749609101f0724"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDo0MDozOVrOF5E46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDo1Nzo1OVrOF5FHfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MzI1OQ==", "bodyText": "Dependencies are not needed in job document. This is a deprecated field. We get the dependencies from recipe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395393259", "createdAt": "2020-03-20T00:40:39Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.AbstractBaseITCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_MQTT_CLIENT_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class DeploymentE2ETest extends AbstractBaseITCase {\n+\n+    private static final String ROOT_CA_FILENAME = tempRootDir.resolve(\"rootCA.pem\").toString();\n+    private static final String PRIVATE_KEY_FILENAME = tempRootDir.resolve(\"privKey.key\").toString();\n+    private static final String CERTIFICATE_FILENAME = tempRootDir.resolve(\"thingCert.crt\").toString();\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    @AfterAll\n+    static void afterAll() {\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Test\n+    void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_and_job_is_successful()\n+            throws Exception {\n+        // Setup IoT resources\n+        Utils.downloadRootCAToFile(new File(ROOT_CA_FILENAME));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(PRIVATE_KEY_FILENAME).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(CERTIFICATE_FILENAME).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        // Inject IoT resources into kernel\n+        Kernel kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(PRIVATE_KEY_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(CERTIFICATE_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(ROOT_CA_FILENAME);\n+\n+        // Inject our mocked local package store\n+        kernel.context.getv(DependencyResolver.class)\n+                .put(new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel));\n+        kernel.launch();\n+\n+        // Create Job Doc\n+        String document = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null,\n+                                        Arrays.asList(new PackageIdentifier(\"Mosquitto\", null))))).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656749d351d506c73e8b779e6c749609101f0724"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5Njk4OA==", "bodyText": "Like how you do this. Would it better to take retryable exceptions as input? We want to retry in specific cases, not in all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r395396988", "createdAt": "2020-03-20T00:57:59Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.CrashableSupplier;\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final int DEFAULT_RETRIES = 5;\n+    private static final int DEFAULT_INITIAL_BACKOFF_MS = 100;\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        retry(() -> iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build()));\n+        createdJobs.add(jobId);\n+        return jobId;\n+    }\n+\n+    public static void waitForJobToComplete(String jobId, Duration timeout) throws TimeoutException {\n+        Instant start = Instant.now();\n+\n+        while (start.plusMillis(timeout.toMillis()).isAfter(Instant.now())) {\n+            JobStatus status =\n+                    retry(() -> iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build())).job()\n+                            .status();\n+            if (status.ordinal() > JobStatus.IN_PROGRESS.ordinal()) {\n+                return;\n+            }\n+        }\n+        throw new TimeoutException();\n+    }\n+\n+    public static ThingInfo createThing() {\n+        // Find or create IoT policy\n+        try {\n+            retry(() -> iotClient.getPolicy(GetPolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).build()),\n+                    ResourceNotFoundException.class);\n+        } catch (ResourceNotFoundException e) {\n+            retry(() -> iotClient.createPolicy(CreatePolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = retry(() -> iotClient\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        retry(() -> iotClient.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).target(keyResponse.certificateArn())\n+                        .build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = \"e2etest-\" + UUID.randomUUID().toString();\n+        String thingArn = retry(() -> iotClient.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                .thingArn();\n+        retry(() -> iotClient.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        ThingInfo info = new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), retry(() -> iotClient\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress());\n+        createdThings.add(info);\n+        return info;\n+    }\n+\n+    public static void cleanAllCreatedThings() {\n+        createdThings.forEach(Utils::cleanThing);\n+    }\n+\n+    public static void cleanAllCreatedJobs() {\n+        createdJobs.forEach(Utils::cleanJob);\n+    }\n+\n+    public static void cleanThing(ThingInfo thing) {\n+        retry(() -> iotClient.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        retry(() -> iotClient.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        retry(() -> iotClient.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build()));\n+        retry(() -> iotClient.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+        createdThings.remove(thing);\n+    }\n+\n+    public static void cleanJob(String jobId) {\n+        try {\n+            retry(() -> iotClient.cancelJob(CancelJobRequest.builder().jobId(jobId).force(true).build()),\n+                    InvalidRequestException.class);\n+        } catch (InvalidRequestException e) {\n+            // Ignore can't cancel due to job already completed\n+            if (!e.getMessage().contains(\"in status COMPLETED cannot\")) {\n+                throw e;\n+            }\n+        }\n+        retry(() -> iotClient.deleteJob(DeleteJobRequest.builder().jobId(jobId).force(true).build()));\n+        createdJobs.remove(jobId);\n+    }\n+\n+    public static void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    public static void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    @AllArgsConstructor\n+    public static class ThingInfo {\n+        public String thingArn;\n+        public String thingName;\n+        public String certificateArn;\n+        public String certificateId;\n+        public String certificatePem;\n+        public KeyPair keyPair;\n+        public String endpoint;\n+    }\n+\n+    @SafeVarargs\n+    public static <T, E extends Throwable> T retry(CrashableSupplier<T, E> func, Class<E>... nonRetryable) throws E {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656749d351d506c73e8b779e6c749609101f0724"}, "originalPosition": 179}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "656749d351d506c73e8b779e6c749609101f0724", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/656749d351d506c73e8b779e6c749609101f0724", "committedDate": "2020-03-20T00:32:35Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}, "afterCommit": {"oid": "ee67a53a3b7b194a3186b70b63d86ca0c7a696b8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee67a53a3b7b194a3186b70b63d86ca0c7a696b8", "committedDate": "2020-03-20T01:08:59Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee67a53a3b7b194a3186b70b63d86ca0c7a696b8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ee67a53a3b7b194a3186b70b63d86ca0c7a696b8", "committedDate": "2020-03-20T01:08:59Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}, "afterCommit": {"oid": "5dd7a15ef0a4bf25ec5ca68be8372bd8e7a02a82", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5dd7a15ef0a4bf25ec5ca68be8372bd8e7a02a82", "committedDate": "2020-03-20T17:22:27Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e3ab2f066cf3bd8c3e767f5db1db077f4409bef", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e3ab2f066cf3bd8c3e767f5db1db077f4409bef", "committedDate": "2020-03-20T18:01:41Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "e43625494fcb1704a0f08638e558aa5d6bbb57b2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e43625494fcb1704a0f08638e558aa5d6bbb57b2", "committedDate": "2020-03-20T18:02:43Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e43625494fcb1704a0f08638e558aa5d6bbb57b2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e43625494fcb1704a0f08638e558aa5d6bbb57b2", "committedDate": "2020-03-20T18:02:43Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "ddaa690bcac2eab09eed33c3cfcfc418724b8928", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ddaa690bcac2eab09eed33c3cfcfc418724b8928", "committedDate": "2020-03-20T18:17:36Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddaa690bcac2eab09eed33c3cfcfc418724b8928", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ddaa690bcac2eab09eed33c3cfcfc418724b8928", "committedDate": "2020-03-20T18:17:36Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "019ec3ae0476de5322108b553c0bd9e36f1252cf", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/019ec3ae0476de5322108b553c0bd9e36f1252cf", "committedDate": "2020-03-20T19:07:36Z", "message": "Breakout E2E test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1c8ea527db198fcaf64f09a9074c1c00a34625", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9a1c8ea527db198fcaf64f09a9074c1c00a34625", "committedDate": "2020-03-22T01:40:21Z", "message": "E2E Deployment test with IoT Jobs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "714f5928ce0a813a4eccf89b5b56b22f6b014889", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/714f5928ce0a813a4eccf89b5b56b22f6b014889", "committedDate": "2020-03-22T01:40:21Z", "message": "Add retries for IoT Core operations. Scoped down IoT Core Policy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "019ec3ae0476de5322108b553c0bd9e36f1252cf", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/019ec3ae0476de5322108b553c0bd9e36f1252cf", "committedDate": "2020-03-20T19:07:36Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "07f6a0cbd6d23780c352a88b0a6c87e564c2158e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07f6a0cbd6d23780c352a88b0a6c87e564c2158e", "committedDate": "2020-03-22T01:41:13Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07f6a0cbd6d23780c352a88b0a6c87e564c2158e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/07f6a0cbd6d23780c352a88b0a6c87e564c2158e", "committedDate": "2020-03-22T01:41:13Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "7a2850a1332076e769e8aaa3f79312882de83013", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7a2850a1332076e769e8aaa3f79312882de83013", "committedDate": "2020-03-22T02:02:47Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a2850a1332076e769e8aaa3f79312882de83013", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7a2850a1332076e769e8aaa3f79312882de83013", "committedDate": "2020-03-22T02:02:47Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "c87dbd45d6719bdedaf857bbaf63400fd78d92e7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c87dbd45d6719bdedaf857bbaf63400fd78d92e7", "committedDate": "2020-03-22T02:35:12Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c87dbd45d6719bdedaf857bbaf63400fd78d92e7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c87dbd45d6719bdedaf857bbaf63400fd78d92e7", "committedDate": "2020-03-22T02:35:12Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "fda112ff2eb27d08f24146a2f7b8f81cd50d7362", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fda112ff2eb27d08f24146a2f7b8f81cd50d7362", "committedDate": "2020-03-22T03:31:27Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fda112ff2eb27d08f24146a2f7b8f81cd50d7362", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fda112ff2eb27d08f24146a2f7b8f81cd50d7362", "committedDate": "2020-03-22T03:31:27Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "3bb27a6ba0b7a2d211747251f5456d2d72a0eae1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bb27a6ba0b7a2d211747251f5456d2d72a0eae1", "committedDate": "2020-03-22T03:53:45Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bb27a6ba0b7a2d211747251f5456d2d72a0eae1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bb27a6ba0b7a2d211747251f5456d2d72a0eae1", "committedDate": "2020-03-22T03:53:45Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "d2c3578c87ae3b9c652e185d4f0f02bfac39c89f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2c3578c87ae3b9c652e185d4f0f02bfac39c89f", "committedDate": "2020-03-22T04:10:42Z", "message": "Breakout E2E test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/75ffce92082d2008f46114d4a20ac2b36013df9c", "committedDate": "2020-03-22T04:23:27Z", "message": "Breakout E2E test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2c3578c87ae3b9c652e185d4f0f02bfac39c89f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2c3578c87ae3b9c652e185d4f0f02bfac39c89f", "committedDate": "2020-03-22T04:10:42Z", "message": "Breakout E2E test"}, "afterCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/75ffce92082d2008f46114d4a20ac2b36013df9c", "committedDate": "2020-03-22T04:23:27Z", "message": "Breakout E2E test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjA1MDM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379605038", "createdAt": "2020-03-23T16:33:13Z", "commit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozMzoxM1rOF6NzQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozMzoxM1rOF6NzQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4Nzg0Mg==", "bodyText": "Are there existing libraries supporting the retry behavior?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396587842", "createdAt": "2020-03-23T16:33:13Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.CrashableSupplier;\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InternalException;\n+import software.amazon.awssdk.services.iot.model.InternalFailureException;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.IotException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.LimitExceededException;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.ThrottlingException;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final int DEFAULT_RETRIES = 5;\n+    private static final int DEFAULT_INITIAL_BACKOFF_MS = 100;\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        retryIot(() -> iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build()));\n+        createdJobs.add(jobId);\n+        return jobId;\n+    }\n+\n+    public static void waitForJobToComplete(String jobId, Duration timeout) throws TimeoutException {\n+        Instant start = Instant.now();\n+\n+        while (start.plusMillis(timeout.toMillis()).isAfter(Instant.now())) {\n+            JobStatus status =\n+                    retryIot(() -> iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build())).job()\n+                            .status();\n+            if (status.ordinal() > JobStatus.IN_PROGRESS.ordinal()) {\n+                return;\n+            }\n+        }\n+        throw new TimeoutException();\n+    }\n+\n+    public static ThingInfo createThing() {\n+        // Find or create IoT policy\n+        try {\n+            retryIot(() -> iotClient.getPolicy(GetPolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).build()));\n+        } catch (ResourceNotFoundException e) {\n+            retryIot(() -> iotClient.createPolicy(CreatePolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME)\n+                    .policyDocument(\"{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n\"\n+                            + \"      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Action\\\": [\\n\"\n+                            + \"                \\\"iot:Connect\\\",\\n                \\\"iot:Publish\\\",\\n\"\n+                            + \"                \\\"iot:Subscribe\\\",\\n                \\\"iot:Receive\\\"\\n],\\n\"\n+                            + \"      \\\"Resource\\\": \\\"*\\\"\\n    }\\n  ]\\n}\").build()));\n+        }\n+\n+        // Create cert\n+        CreateKeysAndCertificateResponse keyResponse = retryIot(() -> iotClient\n+                .createKeysAndCertificate(CreateKeysAndCertificateRequest.builder().setAsActive(true).build()));\n+\n+        // Attach policy to cert\n+        retryIot(() -> iotClient.attachPolicy(\n+                AttachPolicyRequest.builder().policyName(FULL_ACCESS_POLICY_NAME).target(keyResponse.certificateArn())\n+                        .build()));\n+\n+        // Create the thing and attach the cert to it\n+        String thingName = \"e2etest-\" + UUID.randomUUID().toString();\n+        String thingArn =\n+                retryIot(() -> iotClient.createThing(CreateThingRequest.builder().thingName(thingName).build()))\n+                        .thingArn();\n+        retryIot(() -> iotClient.attachThingPrincipal(\n+                AttachThingPrincipalRequest.builder().thingName(thingName).principal(keyResponse.certificateArn())\n+                        .build()));\n+\n+        ThingInfo info = new ThingInfo(thingArn, thingName, keyResponse.certificateArn(), keyResponse.certificateId(),\n+                keyResponse.certificatePem(), keyResponse.keyPair(), retryIot(() -> iotClient\n+                .describeEndpoint(DescribeEndpointRequest.builder().endpointType(\"iot:Data-ATS\").build()))\n+                .endpointAddress());\n+        createdThings.add(info);\n+        return info;\n+    }\n+\n+    public static void cleanAllCreatedThings() {\n+        createdThings.forEach(Utils::cleanThing);\n+    }\n+\n+    public static void cleanAllCreatedJobs() {\n+        createdJobs.forEach(Utils::cleanJob);\n+    }\n+\n+    public static void cleanThing(ThingInfo thing) {\n+        retryIot(() -> iotClient.detachThingPrincipal(\n+                DetachThingPrincipalRequest.builder().thingName(thing.thingName).principal(thing.certificateArn)\n+                        .build()));\n+        retryIot(() -> iotClient.deleteThing(DeleteThingRequest.builder().thingName(thing.thingName).build()));\n+        retryIot(() -> iotClient.updateCertificate(UpdateCertificateRequest.builder().certificateId(thing.certificateId)\n+                .newStatus(CertificateStatus.INACTIVE).build()));\n+        retryIot(() -> iotClient.deleteCertificate(\n+                DeleteCertificateRequest.builder().certificateId(thing.certificateId).forceDelete(true).build()));\n+        createdThings.remove(thing);\n+    }\n+\n+    public static void cleanJob(String jobId) {\n+        try {\n+            retryIot(() -> iotClient.cancelJob(CancelJobRequest.builder().jobId(jobId).force(true).build()));\n+        } catch (InvalidRequestException e) {\n+            // Ignore can't cancel due to job already completed\n+            if (!e.getMessage().contains(\"in status COMPLETED cannot\")) {\n+                throw e;\n+            }\n+        }\n+        retryIot(() -> iotClient.deleteJob(DeleteJobRequest.builder().jobId(jobId).force(true).build()));\n+        createdJobs.remove(jobId);\n+    }\n+\n+    public static void downloadRootCAToFile(File f) throws IOException {\n+        downloadFileFromURL(ROOT_CA_URL, f);\n+    }\n+\n+    public static void downloadFileFromURL(String url, File f) throws IOException {\n+        try (ReadableByteChannel readableByteChannel = Channels.newChannel(new URL(url).openStream());\n+             FileOutputStream fileOutputStream = new FileOutputStream(f)) {\n+            fileOutputStream.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);\n+        }\n+    }\n+\n+    @AllArgsConstructor\n+    public static class ThingInfo {\n+        public String thingArn;\n+        public String thingName;\n+        public String certificateArn;\n+        public String certificateId;\n+        public String certificatePem;\n+        public KeyPair keyPair;\n+        public String endpoint;\n+    }\n+\n+    public static <T, E extends IotException> T retryIot(CrashableSupplier<T, E> func) throws E {\n+        return retry(DEFAULT_RETRIES, DEFAULT_INITIAL_BACKOFF_MS, func, ThrottlingException.class,\n+                InternalException.class, InternalFailureException.class, LimitExceededException.class);\n+    }\n+\n+    @SafeVarargs\n+    public static <T, E extends Throwable> T retry(int tries, int initialBackoffMillis, CrashableSupplier<T, E> func,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjU4Nzc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379658777", "createdAt": "2020-03-23T17:28:36Z", "commit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyODozN1rOF6QNPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyODozN1rOF6QNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNzI2MA==", "bodyText": "Can this be removed from your personal account?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396627260", "createdAt": "2020-03-23T17:28:37Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -11,56 +11,74 @@ jobs:\n   build:\n     runs-on: ubuntu-latest\n     steps:\n-    - uses: actions/checkout@v2\n-    - name: Decrypt the test Iot thing private key\n-      run: ./.github/scripts/decrypt_iot_thing_private_key_and_cert.sh\n-      env:\n-        evergreen_test_iot_thing_private_key_secret_passphrase: ${{secrets.evergreen_test_iot_thing_private_key}}\n-    - name: Set up JDK 1.8\n-      uses: actions/setup-java@v1\n-      with:\n-        java-version: 1.8\n-    - name: Configure AWS credentials\n-      uses: aws-actions/configure-aws-credentials@v1\n-      with:\n-        aws-access-key-id: ${{ secrets.evergreen_dev_snapshot_access_key_id }}\n-        aws-secret-access-key: ${{ secrets.evergreen_dev_snapshot_access_key_secret }}\n-        aws-region: us-west-2\n-    - name: Build with Maven\n-      run: mvn -ntp verify\n-    - name: Convert Jacoco to Cobertura\n-      run: curl -o cover2cover.py https://gist.githubusercontent.com/MikeDombo/82567fccc1b2aced0c76fc053efd5a26/raw/f79f748f37cabb4cedd186321ea70e9fb383815d/cover2cover.py && python3 cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml\n-    - name: Upload Coverage\n-      uses: actions/upload-artifact@v1.0.0\n-      with:\n-        name: Coverage Report\n-        path: target/jacoco-report\n-    - name: cobertura-report\n-      uses: 5monkeys/cobertura-action@master\n-      continue-on-error: true\n-      with:\n-        # The GITHUB_TOKEN for this repo\n-        repo_token: ${{ github.token }}\n-        # Path to the cobertura file.\n-        path: target/jacoco-report/cobertura.xml\n-        # If files with 100% should be skipped from report.\n-        skip_covered: false\n-        # Minimum allowed coverage percentage as an integer.\n-        minimum_coverage: 60\n-        # Show line rate as specific column.\n-        show_line: true\n-        # Show branch rate as specific column.\n-        show_branch: true\n-        # Use class names instead of the filename\n-        show_class_names: true\n-    - name: Publish with Maven\n-      run: mvn -ntp --settings settings.xml clean deploy -DskipTests=true -Daccess-key-id=${{ secrets.evergreen_dev_snapshot_access_key_id }} -Daccess-key-secret=${{ secrets.evergreen_dev_snapshot_access_key_secret }} -Dstargate-snapshot-repository-url=${{ secrets.stargate_dev_snapshot_repository_url }}\n-      if: github.event_name == 'push'\n-    - name: GitHub Actions Artifact Cleaner\n-      uses: glassechidna/artifact-cleaner@v2\n-      continue-on-error: true\n-      with:\n-        # Specify a minimum size of artifacts to delete in bytes. Artifacts smaller than this won't be deleted.\n-        minimumDeletionSize: 0 # optional, default is 0\n-        # Only delete artifacts older than this, measured in seconds.\n-        minimumAge: 5184000 # optional, default is 0. Set to 5.184e+6 (60 days)\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Build with Maven\n+        run: mvn -ntp verify\n+      - name: Convert Jacoco to Cobertura\n+        run: curl -o cover2cover.py https://gist.githubusercontent.com/MikeDombo/82567fccc1b2aced0c76fc053efd5a26/raw/f79f748f37cabb4cedd186321ea70e9fb383815d/cover2cover.py && python3 cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjM3NzA0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379637704", "createdAt": "2020-03-23T17:09:05Z", "commit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowOTowNVrOF6PXdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNjoyMVrOF6QHEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMzQ5NQ==", "bodyText": "This will run tests belonging to all groups?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396613495", "createdAt": "2020-03-23T17:09:05Z", "author": {"login": "abanthiy"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -11,56 +11,74 @@ jobs:\n   build:\n     runs-on: ubuntu-latest\n     steps:\n-    - uses: actions/checkout@v2\n-    - name: Decrypt the test Iot thing private key\n-      run: ./.github/scripts/decrypt_iot_thing_private_key_and_cert.sh\n-      env:\n-        evergreen_test_iot_thing_private_key_secret_passphrase: ${{secrets.evergreen_test_iot_thing_private_key}}\n-    - name: Set up JDK 1.8\n-      uses: actions/setup-java@v1\n-      with:\n-        java-version: 1.8\n-    - name: Configure AWS credentials\n-      uses: aws-actions/configure-aws-credentials@v1\n-      with:\n-        aws-access-key-id: ${{ secrets.evergreen_dev_snapshot_access_key_id }}\n-        aws-secret-access-key: ${{ secrets.evergreen_dev_snapshot_access_key_secret }}\n-        aws-region: us-west-2\n-    - name: Build with Maven\n-      run: mvn -ntp verify\n-    - name: Convert Jacoco to Cobertura\n-      run: curl -o cover2cover.py https://gist.githubusercontent.com/MikeDombo/82567fccc1b2aced0c76fc053efd5a26/raw/f79f748f37cabb4cedd186321ea70e9fb383815d/cover2cover.py && python3 cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml\n-    - name: Upload Coverage\n-      uses: actions/upload-artifact@v1.0.0\n-      with:\n-        name: Coverage Report\n-        path: target/jacoco-report\n-    - name: cobertura-report\n-      uses: 5monkeys/cobertura-action@master\n-      continue-on-error: true\n-      with:\n-        # The GITHUB_TOKEN for this repo\n-        repo_token: ${{ github.token }}\n-        # Path to the cobertura file.\n-        path: target/jacoco-report/cobertura.xml\n-        # If files with 100% should be skipped from report.\n-        skip_covered: false\n-        # Minimum allowed coverage percentage as an integer.\n-        minimum_coverage: 60\n-        # Show line rate as specific column.\n-        show_line: true\n-        # Show branch rate as specific column.\n-        show_branch: true\n-        # Use class names instead of the filename\n-        show_class_names: true\n-    - name: Publish with Maven\n-      run: mvn -ntp --settings settings.xml clean deploy -DskipTests=true -Daccess-key-id=${{ secrets.evergreen_dev_snapshot_access_key_id }} -Daccess-key-secret=${{ secrets.evergreen_dev_snapshot_access_key_secret }} -Dstargate-snapshot-repository-url=${{ secrets.stargate_dev_snapshot_repository_url }}\n-      if: github.event_name == 'push'\n-    - name: GitHub Actions Artifact Cleaner\n-      uses: glassechidna/artifact-cleaner@v2\n-      continue-on-error: true\n-      with:\n-        # Specify a minimum size of artifacts to delete in bytes. Artifacts smaller than this won't be deleted.\n-        minimumDeletionSize: 0 # optional, default is 0\n-        # Only delete artifacts older than this, measured in seconds.\n-        minimumAge: 5184000 # optional, default is 0. Set to 5.184e+6 (60 days)\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Build with Maven\n+        run: mvn -ntp verify", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxNTQ5Mg==", "bodyText": "nit: change it to FILEPATH", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396615492", "createdAt": "2020-03-23T17:11:52Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_MQTT_CLIENT_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@Tag(\"E2E\")\n+public class DeploymentE2ETest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static String ROOT_CA_FILENAME;\n+    private static String PRIVATE_KEY_FILENAME;\n+    private static String CERTIFICATE_FILENAME;\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+        ROOT_CA_FILENAME = tempRootDir.resolve(\"rootCA.pem\").toString();\n+        PRIVATE_KEY_FILENAME = tempRootDir.resolve(\"privKey.key\").toString();\n+        CERTIFICATE_FILENAME = tempRootDir.resolve(\"thingCert.crt\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxODY5MQ==", "bodyText": "We are going to use thing groups as targets when creating jobs using Iot Jobs. For individual devices we will use shadows (which is not implemented yet). So this will need to evolve to use Iot Thing groups. Don't want to block this PR because of this but add a TODO to make that change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396618691", "createdAt": "2020-03-23T17:16:21Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.deployment;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.util.CommitableFile;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import software.amazon.awssdk.services.iot.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.JobExecutionStatus;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.UUID;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_CERTIFICATE_FILE_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_MQTT_CLIENT_ENDPOINT;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_PRIVATE_KEY_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_ROOT_CA_PATH;\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEVICE_PARAM_THING_NAME;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@Tag(\"E2E\")\n+public class DeploymentE2ETest {\n+    @TempDir\n+    static Path tempRootDir;\n+\n+    private static String ROOT_CA_FILENAME;\n+    private static String PRIVATE_KEY_FILENAME;\n+    private static String CERTIFICATE_FILENAME;\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n+        ROOT_CA_FILENAME = tempRootDir.resolve(\"rootCA.pem\").toString();\n+        PRIVATE_KEY_FILENAME = tempRootDir.resolve(\"privKey.key\").toString();\n+        CERTIFICATE_FILENAME = tempRootDir.resolve(\"thingCert.crt\").toString();\n+    }\n+\n+    @AfterAll\n+    static void afterAll() {\n+        // Cleanup all IoT thing resources we created\n+        Utils.cleanAllCreatedThings();\n+        Utils.cleanAllCreatedJobs();\n+    }\n+\n+    @Test\n+    void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_and_job_is_successful()\n+            throws Exception {\n+        // Setup IoT resources\n+        Utils.downloadRootCAToFile(new File(ROOT_CA_FILENAME));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(PRIVATE_KEY_FILENAME).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(CERTIFICATE_FILENAME).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        // Inject IoT resources into kernel\n+        Kernel kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(PRIVATE_KEY_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(CERTIFICATE_FILENAME);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(ROOT_CA_FILENAME);\n+\n+        // Inject our mocked local package store\n+        kernel.context.getv(DependencyResolver.class)\n+                .put(new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel));\n+        kernel.launch();\n+\n+        // Create Job Doc\n+        String document = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+\n+        // Create job targeting our DUT\n+        String[] targets = new String[]{thing.thingArn};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTY4MQ==", "bodyText": "Sleep in else part and wait a bit before next query?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396625681", "createdAt": "2020-03-23T17:26:21Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.CrashableSupplier;\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InternalException;\n+import software.amazon.awssdk.services.iot.model.InternalFailureException;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.IotException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.LimitExceededException;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.ThrottlingException;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {\n+    public static final IotClient iotClient = IotClient.builder().build();\n+    private static final String FULL_ACCESS_POLICY_NAME = \"E2ETestFullAccess\";\n+    private static final Set<ThingInfo> createdThings = new CopyOnWriteArraySet<>();\n+    private static final Set<String> createdJobs = new CopyOnWriteArraySet<>();\n+    private static final String ROOT_CA_URL = \"https://www.amazontrust.com/repository/AmazonRootCA1.pem\";\n+    private static final int DEFAULT_RETRIES = 5;\n+    private static final int DEFAULT_INITIAL_BACKOFF_MS = 100;\n+\n+    public static String createJob(String document, String[] targets) {\n+        String jobId = UUID.randomUUID().toString();\n+\n+        retryIot(() -> iotClient.createJob(\n+                CreateJobRequest.builder().jobId(jobId).targets(targets).targetSelection(TargetSelection.SNAPSHOT)\n+                        .document(document).description(\"E2E Test: \" + new Date())\n+                        .timeoutConfig(TimeoutConfig.builder().inProgressTimeoutInMinutes(10L).build()).build()));\n+        createdJobs.add(jobId);\n+        return jobId;\n+    }\n+\n+    public static void waitForJobToComplete(String jobId, Duration timeout) throws TimeoutException {\n+        Instant start = Instant.now();\n+\n+        while (start.plusMillis(timeout.toMillis()).isAfter(Instant.now())) {\n+            JobStatus status =\n+                    retryIot(() -> iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build())).job()\n+                            .status();\n+            if (status.ordinal() > JobStatus.IN_PROGRESS.ordinal()) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ffce92082d2008f46114d4a20ac2b36013df9c"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77d5370144d216c313cf3a5dcda01426cb1c4f06", "committedDate": "2020-03-23T17:49:19Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Njg3ODM2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379687836", "createdAt": "2020-03-23T18:03:58Z", "commit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzAxNzI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379701725", "createdAt": "2020-03-23T18:20:05Z", "commit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NzAxNTQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#pullrequestreview-379701549", "createdAt": "2020-03-23T18:19:51Z", "commit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxOTo1MlrOF6STIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoyNjo1OFrOF6SpAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2MTUzNw==", "bodyText": "How to run this test from dev machine? How to set up the AWS credentials? Can you add a comment or readme on that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396661537", "createdAt": "2020-03-23T18:19:52Z", "author": {"login": "fengwang666"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -11,56 +11,74 @@ jobs:\n   build:\n     runs-on: ubuntu-latest\n     steps:\n-    - uses: actions/checkout@v2\n-    - name: Decrypt the test Iot thing private key\n-      run: ./.github/scripts/decrypt_iot_thing_private_key_and_cert.sh\n-      env:\n-        evergreen_test_iot_thing_private_key_secret_passphrase: ${{secrets.evergreen_test_iot_thing_private_key}}\n-    - name: Set up JDK 1.8\n-      uses: actions/setup-java@v1\n-      with:\n-        java-version: 1.8\n-    - name: Configure AWS credentials\n-      uses: aws-actions/configure-aws-credentials@v1\n-      with:\n-        aws-access-key-id: ${{ secrets.evergreen_dev_snapshot_access_key_id }}\n-        aws-secret-access-key: ${{ secrets.evergreen_dev_snapshot_access_key_secret }}\n-        aws-region: us-west-2\n-    - name: Build with Maven\n-      run: mvn -ntp verify\n-    - name: Convert Jacoco to Cobertura\n-      run: curl -o cover2cover.py https://gist.githubusercontent.com/MikeDombo/82567fccc1b2aced0c76fc053efd5a26/raw/f79f748f37cabb4cedd186321ea70e9fb383815d/cover2cover.py && python3 cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml\n-    - name: Upload Coverage\n-      uses: actions/upload-artifact@v1.0.0\n-      with:\n-        name: Coverage Report\n-        path: target/jacoco-report\n-    - name: cobertura-report\n-      uses: 5monkeys/cobertura-action@master\n-      continue-on-error: true\n-      with:\n-        # The GITHUB_TOKEN for this repo\n-        repo_token: ${{ github.token }}\n-        # Path to the cobertura file.\n-        path: target/jacoco-report/cobertura.xml\n-        # If files with 100% should be skipped from report.\n-        skip_covered: false\n-        # Minimum allowed coverage percentage as an integer.\n-        minimum_coverage: 60\n-        # Show line rate as specific column.\n-        show_line: true\n-        # Show branch rate as specific column.\n-        show_branch: true\n-        # Use class names instead of the filename\n-        show_class_names: true\n-    - name: Publish with Maven\n-      run: mvn -ntp --settings settings.xml clean deploy -DskipTests=true -Daccess-key-id=${{ secrets.evergreen_dev_snapshot_access_key_id }} -Daccess-key-secret=${{ secrets.evergreen_dev_snapshot_access_key_secret }} -Dstargate-snapshot-repository-url=${{ secrets.stargate_dev_snapshot_repository_url }}\n-      if: github.event_name == 'push'\n-    - name: GitHub Actions Artifact Cleaner\n-      uses: glassechidna/artifact-cleaner@v2\n-      continue-on-error: true\n-      with:\n-        # Specify a minimum size of artifacts to delete in bytes. Artifacts smaller than this won't be deleted.\n-        minimumDeletionSize: 0 # optional, default is 0\n-        # Only delete artifacts older than this, measured in seconds.\n-        minimumAge: 5184000 # optional, default is 0. Set to 5.184e+6 (60 days)\n+      - uses: actions/checkout@v2\n+      - name: Set up JDK 1.8\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 1.8\n+      - name: Build with Maven\n+        run: mvn -ntp verify\n+      - name: Convert Jacoco to Cobertura\n+        run: python3 .github/scripts/cover2cover.py target/jacoco-report/jacoco.xml src/main/java > target/jacoco-report/cobertura.xml\n+      - name: Upload Coverage\n+        uses: actions/upload-artifact@v1.0.0\n+        with:\n+          name: Coverage Report\n+          path: target/jacoco-report\n+      - name: cobertura-report\n+        uses: 5monkeys/cobertura-action@master\n+        continue-on-error: true\n+        with:\n+          # The GITHUB_TOKEN for this repo\n+          repo_token: ${{ github.token }}\n+          # Path to the cobertura file.\n+          path: target/jacoco-report/cobertura.xml\n+          # If files with 100% should be skipped from report.\n+          skip_covered: false\n+          # Minimum allowed coverage percentage as an integer.\n+          minimum_coverage: 60\n+          # Show line rate as specific column.\n+          show_line: true\n+          # Show branch rate as specific column.\n+          show_branch: true\n+          # Use class names instead of the filename\n+          show_class_names: true\n+      - name: GitHub Actions Artifact Cleaner\n+        uses: glassechidna/artifact-cleaner@v2\n+        continue-on-error: true\n+        with:\n+          # Specify a minimum size of artifacts to delete in bytes. Artifacts smaller than this won't be deleted.\n+          minimumDeletionSize: 0 # optional, default is 0\n+          # Only delete artifacts older than this, measured in seconds.\n+          minimumAge: 5184000 # optional, default is 0. Set to 5.184e+6 (60 days)\n+  e2e-test:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2NTcxOA==", "bodyText": "Thanks for cleaning this!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396665718", "createdAt": "2020-03-23T18:25:13Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -197,9 +195,6 @@ public static EvergreenService locate(Context context, String name) throws Servi\n                 try {\n                     clazz = Class.forName(cn);\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setEventType(\"service-load-error\")\n-                            .addKeyValue(\"serviceName\", name)\n-                            .addKeyValue(\"className\", cn).log(\"Can't load service class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2NzEzOQ==", "bodyText": "Nit: rename it to AwsIoTUtils to be more specific?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/126#discussion_r396667139", "createdAt": "2020-03-23T18:26:58Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.util;\n+\n+import com.aws.iot.evergreen.util.CrashableSupplier;\n+import lombok.AllArgsConstructor;\n+import software.amazon.awssdk.services.iot.IotClient;\n+import software.amazon.awssdk.services.iot.model.AttachPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.AttachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.CancelJobRequest;\n+import software.amazon.awssdk.services.iot.model.CertificateStatus;\n+import software.amazon.awssdk.services.iot.model.CreateJobRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.CreateKeysAndCertificateResponse;\n+import software.amazon.awssdk.services.iot.model.CreatePolicyRequest;\n+import software.amazon.awssdk.services.iot.model.CreateThingRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteCertificateRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteJobRequest;\n+import software.amazon.awssdk.services.iot.model.DeleteThingRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeEndpointRequest;\n+import software.amazon.awssdk.services.iot.model.DescribeJobRequest;\n+import software.amazon.awssdk.services.iot.model.DetachThingPrincipalRequest;\n+import software.amazon.awssdk.services.iot.model.GetPolicyRequest;\n+import software.amazon.awssdk.services.iot.model.InternalException;\n+import software.amazon.awssdk.services.iot.model.InternalFailureException;\n+import software.amazon.awssdk.services.iot.model.InvalidRequestException;\n+import software.amazon.awssdk.services.iot.model.IotException;\n+import software.amazon.awssdk.services.iot.model.JobStatus;\n+import software.amazon.awssdk.services.iot.model.KeyPair;\n+import software.amazon.awssdk.services.iot.model.LimitExceededException;\n+import software.amazon.awssdk.services.iot.model.ResourceNotFoundException;\n+import software.amazon.awssdk.services.iot.model.TargetSelection;\n+import software.amazon.awssdk.services.iot.model.ThrottlingException;\n+import software.amazon.awssdk.services.iot.model.TimeoutConfig;\n+import software.amazon.awssdk.services.iot.model.UpdateCertificateRequest;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.TimeoutException;\n+\n+public class Utils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77d5370144d216c313cf3a5dcda01426cb1c4f06"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2359, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}