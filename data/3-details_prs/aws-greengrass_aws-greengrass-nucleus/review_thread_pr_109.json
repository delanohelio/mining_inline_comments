{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTUyMDIy", "number": 109, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0MzozMFrODnSkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1NDoyMlrODo2QOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI1MzM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0MzozMFrOF1M9Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOToyMTozOFrOF2PuSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw==", "bodyText": "Why is this no longer threadsafe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391331107", "createdAt": "2020-03-11T23:43:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNDM1MQ==", "bodyText": "it's not synchronize on the desiredStateLIst  anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391334351", "createdAt": "2020-03-11T23:54:45Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzE2NA==", "bodyText": "But why not keep it synchronizing on desiredStateList?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391337164", "createdAt": "2020-03-12T00:05:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0OTcxMg==", "bodyText": "Because callers will check content on desiredStateList first before modifying it. I want to keep the check-then-modify behavior in one sync block", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391849712", "createdAt": "2020-03-12T19:40:57Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMzIyNw==", "bodyText": "You can keep this as synchronized which is just extra-safe, it won't release the lock when called from inside a synchronized block.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391903227", "createdAt": "2020-03-12T21:25:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1MTMxOA==", "bodyText": "Since we are sync on desiredStateList in other functions that call setDesiredState we can sync here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391951318", "createdAt": "2020-03-12T23:07:04Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQyNTAzNQ==", "bodyText": "This should all be put into synchronize (desiredStateList) { ... }", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r392425035", "createdAt": "2020-03-13T19:21:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -287,30 +287,30 @@ public boolean isPeriodic() {\n     }\n \n     private Optional<State> peekOrRemoveFirstDesiredState(State activeState) {\n-        if (desiredStateList.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        State first = desiredStateList.get(0);\n-        if (first == activeState) {\n-            desiredStateList.remove(first);\n-            // ignore remove() return value as it's possible that desiredStateList update\n+        synchronized (desiredStateList) {\n+            if (desiredStateList.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            State first = desiredStateList.get(0);\n+            if (first == activeState) {\n+                desiredStateList.remove(first);\n+                // ignore remove() return value as it's possible that desiredStateList update\n+            }\n+            return Optional.ofNullable(first);\n         }\n-        return Optional.ofNullable(first);\n     }\n \n     // Set desiredStateList and override existing desiredStateList.\n-    // Expect to have multi-thread access\n-    private synchronized void setDesiredState(State... state) {\n-        synchronized (desiredStateList) {\n-            List<State> newStateList = Arrays.asList(state);\n-            if (newStateList.equals(desiredStateList)) {\n-                return;\n-            }\n-            desiredStateList.clear();\n-            desiredStateList.addAll(newStateList);\n-            // try insert to the queue, if queue full doesn't block.\n-            enqueueStateEvent(\"DesiredStateUpdated\");\n+    // Not thread safe.\n+    private void setDesiredState(State... state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTEwNw=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI1NDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0NDowNFrOF1M92g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1NDoyNVrOF1NJbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTI5MA==", "bodyText": "make these all final as services should not be overriding their implementations.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391331290", "createdAt": "2020-03-11T23:44:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -332,28 +332,60 @@ private synchronized void enqueueStateEvent(Object event) {\n      * Start Service.\n      */\n     public void requestStart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNDI1Mg==", "bodyText": "Sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391334252", "createdAt": "2020-03-11T23:54:25Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -332,28 +332,60 @@ private synchronized void enqueueStateEvent(Object event) {\n      * Start Service.\n      */\n     public void requestStart() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTI5MA=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI1NjQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo0NToxOVrOF1M_FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzo1NDoxMlrOF1NJLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTYwNQ==", "bodyText": "Once you've set the desired state, isn't this done? Should it return from here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391331605", "createdAt": "2020-03-11T23:45:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -332,28 +332,60 @@ private synchronized void enqueueStateEvent(Object event) {\n      * Start Service.\n      */\n     public void requestStart() {\n-        setDesiredState(State.RUNNING);\n+        synchronized (this.desiredStateList) {\n+            if (this.desiredStateList.isEmpty()) {\n+                this.setDesiredState(State.RUNNING);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNDE5MA==", "bodyText": "Ooops", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391334190", "createdAt": "2020-03-11T23:54:12Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -332,28 +332,60 @@ private synchronized void enqueueStateEvent(Object event) {\n      * Start Service.\n      */\n     public void requestStart() {\n-        setDesiredState(State.RUNNING);\n+        synchronized (this.desiredStateList) {\n+            if (this.desiredStateList.isEmpty()) {\n+                this.setDesiredState(State.RUNNING);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzMTYwNQ=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI5NTU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/RequestLifecycleChangeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDowNzowNFrOF1NW6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDowNzowNFrOF1NW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzcwNw==", "bodyText": "THEN?\nMissing the \"THEN\" clause for all these tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391337707", "createdAt": "2020-03-12T00:07:04Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/RequestLifecycleChangeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Assertions;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class RequestLifecycleChangeTest extends EGServiceTestUtil {\n+\n+    private EvergreenService evergreenService;\n+\n+    private static Field desiredStateListField;\n+    private List<State> desiredStateList;\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        desiredStateListField = EvergreenService.class.getDeclaredField(\"desiredStateList\");\n+        desiredStateListField.setAccessible(true);\n+    }\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        Topics config = initializeMockedConfig();\n+        evergreenService = new EvergreenService(config);\n+        desiredStateList = (List<State>) desiredStateListField.get(evergreenService);\n+    }\n+\n+    @Test\n+    public void GIVEN_evergreenService_WHEN_requestStart_called() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODE3NzA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzo1ODo1MVrOF1pYxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzo1ODo1MVrOF1pYxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5NjkzMg==", "bodyText": "I see you are making changes to sync strategy, can we have some documentation at the class level on the sycn strategy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391796932", "createdAt": "2020-03-12T17:58:51Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -357,28 +332,60 @@ private synchronized void enqueueStateEvent(Object event) {\n      * Start Service.\n      */\n     public void requestStart() {\n-        setDesiredState(State.RUNNING);\n+        synchronized (this.desiredStateList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODI1NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/state/UpdatingKernelState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxODoyMzowMVrOF1qL6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTo0MzoxM1rOF1srRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDAyNQ==", "bodyText": "shouldn't this be deleted?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391810025", "createdAt": "2020-03-12T18:23:01Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/state/UpdatingKernelState.java", "diffHunk": "@@ -58,8 +60,10 @@ public void proceed() throws DeploymentFailureException {\n         }\n \n         // merge config\n-        Map<Object, Object> resolvedConfig = deploymentContext.getResolvedKernelConfig();\n+        Map<Object, Object> resolvedConfig = new HashMap<>();\n+        resolvedConfig.put(EvergreenService.SERVICES_NAMESPACE_TOPIC, deploymentContext.getResolvedKernelConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MDgyMw==", "bodyText": "My bad. I didn't rebase onto the latest master branch", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391850823", "createdAt": "2020-03-12T19:43:13Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/state/UpdatingKernelState.java", "diffHunk": "@@ -58,8 +60,10 @@ public void proceed() throws DeploymentFailureException {\n         }\n \n         // merge config\n-        Map<Object, Object> resolvedConfig = deploymentContext.getResolvedKernelConfig();\n+        Map<Object, Object> resolvedConfig = new HashMap<>();\n+        resolvedConfig.put(EvergreenService.SERVICES_NAMESPACE_TOPIC, deploymentContext.getResolvedKernelConfig());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDAyNQ=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg2Mzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyODoxNlrOF1wANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowNjoyM1rOF2PUtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNTMzMg==", "bodyText": "Let's just fix the safe system update instead of putting in these hacks here. That service should either stay in running, or go to finished, or be periodic. However we do it, this is not the way to fix it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391905332", "createdAt": "2020-03-12T21:28:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -280,10 +282,19 @@ public Kernel launch() {\n             context.put(ShellRunner.class, context.get(ShellRunner.Dryrun.class));\n         }\n         try {\n-            EvergreenService main = getMain(); // Trigger boot  (!?!?)\n+            mainService = getMain();\n             autostart.forEach(s -> {\n                 try {\n-                    main.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    if (!s.contains(\"SafeSystemUpdate\")) {\n+                        mainService.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    } else {\n+                        // SafeSystemUpdate will reset to Installed after update.\n+                        // This is a hacky way to avoid restarting depending services.\n+                        // TODO: Find a proper way handle this situation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxODQ4NA==", "bodyText": "I feel it's too big change for this PR. Periodicity currently is tightly coupled with EvergreenService", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r392418484", "createdAt": "2020-03-13T19:06:23Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -280,10 +282,19 @@ public Kernel launch() {\n             context.put(ShellRunner.class, context.get(ShellRunner.Dryrun.class));\n         }\n         try {\n-            EvergreenService main = getMain(); // Trigger boot  (!?!?)\n+            mainService = getMain();\n             autostart.forEach(s -> {\n                 try {\n-                    main.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    if (!s.contains(\"SafeSystemUpdate\")) {\n+                        mainService.addDependency(EvergreenService.locate(context, s), State.RUNNING);\n+                    } else {\n+                        // SafeSystemUpdate will reset to Installed after update.\n+                        // This is a hacky way to avoid restarting depending services.\n+                        // TODO: Find a proper way handle this situation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNTMzMg=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg3MzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyOTo1M1rOF1wFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMzoxNVrOF2PPgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNjU2Mg==", "bodyText": "This should be static if possible because it should not be specific to an individual service; our config is global.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391906562", "createdAt": "2020-03-12T21:29:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -565,6 +580,10 @@ private void addServiceSearchURL(Object url) {\n         }\n     }\n \n+    public Topics findServiceTopic(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNzE1NQ==", "bodyText": "config isn't static though, unless we pass in config as param", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r392417155", "createdAt": "2020-03-13T19:03:15Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -565,6 +580,10 @@ private void addServiceSearchURL(Object url) {\n         }\n     }\n \n+    public Topics findServiceTopic(String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNjU2Mg=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg4Nzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozMjoyN1rOF1wNLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMjo0NlrOF2POpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwODY1NA==", "bodyText": "newly created service don't auto-start, so this todo is not true. The requestStart is required only for new services.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r391908654", "createdAt": "2020-03-12T21:32:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -597,16 +624,17 @@ private void addServiceSearchURL(Object url) {\n                 try {\n                     mergeMap(timestamp, newConfig);\n                     context.addGlobalStateChangeListener(listener);\n-\n-                    newConfig.keySet().forEach(serviceName -> {\n-                        EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n-                        if (eg == null) {\n-                            logger.error(\"Could not locate EvergreenService for modified service {}\", serviceName);\n-                        } else if (State.NEW.equals(eg.getState())) {\n+                    serviceConfig.keySet().forEach(serviceName -> {\n+                        try {\n+                            EvergreenService eg = EvergreenService.locate(context, serviceName);\n+                            // TODO: remove requestStart here as each service will handle update behavior based on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNjkzNA==", "bodyText": "I see. Thanks for pointing out", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r392416934", "createdAt": "2020-03-13T19:02:46Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -597,16 +624,17 @@ private void addServiceSearchURL(Object url) {\n                 try {\n                     mergeMap(timestamp, newConfig);\n                     context.addGlobalStateChangeListener(listener);\n-\n-                    newConfig.keySet().forEach(serviceName -> {\n-                        EvergreenService eg = EvergreenService.locate(context, (String) serviceName);\n-                        if (eg == null) {\n-                            logger.error(\"Could not locate EvergreenService for modified service {}\", serviceName);\n-                        } else if (State.NEW.equals(eg.getState())) {\n+                    serviceConfig.keySet().forEach(serviceName -> {\n+                        try {\n+                            EvergreenService eg = EvergreenService.locate(context, serviceName);\n+                            // TODO: remove requestStart here as each service will handle update behavior based on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwODY1NA=="}, "originalCommit": {"oid": "f08bd5d402f5203ce975be538f8adebeb2e12ff8"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzY0MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMjoyNFrOF3CrdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMjoyNFrOF3CrdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1OTg5Mg==", "bodyText": "How about a blocking queue instead of wait/notify? Since we have a list of actions to perform anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r393259892", "createdAt": "2020-03-16T19:22:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -59,8 +59,8 @@ public void removeDisruptableCheck(DisruptableCheck d) {\n     public synchronized void addUpdateAction(String tag, Crashable action) {\n         pendingActions.put(tag, action);\n         logger.atDebug().setEventType(\"register-service-update-action\").addKeyValue(\"action\", tag).log();\n-        if (!isPeriodic()) {\n-            requestStart();\n+        synchronized (pendingActions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f992c80775fb9e166eda0e864e146a9a8f5b2728"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTU4NTIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/RequestLifecycleChangeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODo1NDoyMlrOF3pzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTozOTo1M1rOF3rPiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMDk0Ng==", "bodyText": "I know EvergreenService class is special but I still think we should avoid testing with checking an private field. As Jamie said,\n\nplease don\u2019t write unit tests that are \u201cIs the code implemented this way\u201d.\n\nChecking a private field basically makes the code needs to be implemented in a very particular way.\nMoreover, changing the content of a private field during the test actually changes the logic of real code, which defeats the purpose of unit test...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r393900946", "createdAt": "2020-03-17T18:54:22Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/RequestLifecycleChangeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Assertions;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class RequestLifecycleChangeTest extends EGServiceTestUtil {\n+\n+    private EvergreenService evergreenService;\n+\n+    private static Field desiredStateListField;\n+    private List<State> desiredStateList;\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        desiredStateListField = EvergreenService.class.getDeclaredField(\"desiredStateList\");\n+        desiredStateListField.setAccessible(true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2f186de35b3eefa3e8ad4038d487f4f8d3d9b9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyNDQ5MQ==", "bodyText": "I agree with Ethan there. This test looks really fragile. Can we just write integration tests instead if unit tests are difficult to write. I much prefer integration tests than fragile unit tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/109#discussion_r393924491", "createdAt": "2020-03-17T19:39:53Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/RequestLifecycleChangeTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Assertions;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class RequestLifecycleChangeTest extends EGServiceTestUtil {\n+\n+    private EvergreenService evergreenService;\n+\n+    private static Field desiredStateListField;\n+    private List<State> desiredStateList;\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        desiredStateListField = EvergreenService.class.getDeclaredField(\"desiredStateList\");\n+        desiredStateListField.setAccessible(true);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMDk0Ng=="}, "originalCommit": {"oid": "1e2f186de35b3eefa3e8ad4038d487f4f8d3d9b9"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}