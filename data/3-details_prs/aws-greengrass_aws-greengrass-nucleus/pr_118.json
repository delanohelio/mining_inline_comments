{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTAyMjIx", "number": 118, "title": "Upload JMH performance benchmark results to CloudWatch", "bodyText": "Creates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master.\nIssue #, if available:\nDescription of changes:\nAs part of our benchmark GitHub action which runs on a push to master, we will now parse the JMH results and upload them to CloudWatch. In addition to putting them into CloudWatch, this action will also create a dashboard which you can view an example of here: https://tiny.amazon.com/13kfz40tx/IsenLink.\nWhy is this change necessary:\nThis change enables dashboarding and viewing our benchmarking metrics.\nHow was this change tested:\nManually run using act to parse and upload to CloudWatch.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-17T22:07:26Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118", "merged": true, "mergeCommit": {"oid": "a77e506b447c4e8b3a23c7adbdf652ad09990ed0"}, "closed": true, "closedAt": "2020-03-18T17:23:54Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOqjgYgBqjMxMzkzMDM4MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO6xeEgFqTM3NzA4NDM4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0eb89b394f89d9b903deb17c52dc6853d4351068", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0eb89b394f89d9b903deb17c52dc6853d4351068", "committedDate": "2020-03-17T22:02:12Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}, "afterCommit": {"oid": "9ba2c95a50de6a306d3a9ca82add46709358c80a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ba2c95a50de6a306d3a9ca82add46709358c80a", "committedDate": "2020-03-17T22:35:42Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ba2c95a50de6a306d3a9ca82add46709358c80a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ba2c95a50de6a306d3a9ca82add46709358c80a", "committedDate": "2020-03-17T22:35:42Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}, "afterCommit": {"oid": "6e97b9037a7b978dd086732b1cfb23bb8654899c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e97b9037a7b978dd086732b1cfb23bb8654899c", "committedDate": "2020-03-17T22:45:36Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e97b9037a7b978dd086732b1cfb23bb8654899c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6e97b9037a7b978dd086732b1cfb23bb8654899c", "committedDate": "2020-03-17T22:45:36Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}, "afterCommit": {"oid": "1f4771e5ec46f5e048b78d51f9e6f16dc3e81838", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f4771e5ec46f5e048b78d51f9e6f16dc3e81838", "committedDate": "2020-03-17T22:56:36Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b2c51f8c852210634a7be0936b9dcde3b40ffe7", "committedDate": "2020-03-17T23:30:31Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f4771e5ec46f5e048b78d51f9e6f16dc3e81838", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f4771e5ec46f5e048b78d51f9e6f16dc3e81838", "committedDate": "2020-03-17T22:56:36Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}, "afterCommit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b2c51f8c852210634a7be0936b9dcde3b40ffe7", "committedDate": "2020-03-17T23:30:31Z", "message": "Upload JMH performance benchmark results to CloudWatch\n\nCreates CloudWatch dashboard automatically from JMH and annotates\nwith the last 50 commits to master."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTAwNzYx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#pullrequestreview-376500761", "createdAt": "2020-03-18T01:02:15Z", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMjoxNVrOF3zEdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowMjoxNVrOF3zEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MjcyNA==", "bodyText": "What account does this upload the metrics to and create the dashboard in? how are the credentials picked up?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#discussion_r394052724", "createdAt": "2020-03-18T01:02:15Z", "author": {"login": "shaguptashaikh"}, "path": ".github/workflows/benchmark.yaml", "diffHunk": "@@ -33,7 +33,18 @@ jobs:\n           -rf json\n           -f 5\n           -wi 0\n-          -jvmArgs \"-Xms1m -XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 -XX:GCTimeRatio=19\n+          -jvmArgs \"-Xms1m -Xmx128m -XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 -XX:GCTimeRatio=19\n           -XX:NativeMemoryTracking=summary -Xss232k\"\n           -prof com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler\n           -i 1\n+          -bm avgt\n+      - name: Upload JMH Result\n+        uses: actions/upload-artifact@v1.0.0\n+        with:\n+          name: JMH Report\n+          path: jmh-result.json\n+      - name: Upload to CloudWatch\n+        run: >-\n+          pip3 -q install boto3 setuptools wheel &&\n+          pip3 -q install retryable PyGithub &&\n+          python3 .github/scripts/cwJMHUpload.py", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTAyNjk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#pullrequestreview-376502694", "createdAt": "2020-03-18T01:09:13Z", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDc0NjYx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#pullrequestreview-377074661", "createdAt": "2020-03-18T17:16:12Z", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNjoxMlrOF4PF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNjoxMlrOF4PF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMTgzMQ==", "bodyText": "can a report have benchmarks from a push request and a pull request? are we doing anything for pull requests?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#discussion_r394511831", "createdAt": "2020-03-18T17:16:12Z", "author": {"login": "fahadmohammed01"}, "path": ".github/scripts/cwJMHUpload.py", "diffHunk": "@@ -0,0 +1,184 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch\n+\"\"\"\n+import json\n+import os\n+import subprocess\n+\n+import boto3\n+\n+try:\n+    # Try getting type hints when developing but we don't need it in prod\n+    from boto3_type_annotations.cloudwatch import Client\n+except:\n+    pass\n+from retryable import retry\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, namespace, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=namespace,\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry()\n+def put_dashboard_retryable(cw, dashboard_name, dashboard_data):\n+    cw.put_dashboard(DashboardName=dashboard_name, DashboardBody=json.dumps(dashboard_data))\n+\n+\n+def convert_units(input_unit):\n+    \"\"\"\n+    Convert units into CloudWatch understandable units.\n+    \"\"\"\n+    input_unit = input_unit.lower()\n+    if input_unit == \"s/op\":\n+        return \"Seconds\"\n+    elif input_unit == \"bytes\" or input_unit == \"byte\":\n+        return \"Bytes\"\n+    elif input_unit == \"op/s\":\n+        return \"Count/Second\"\n+    elif input_unit == \"ms\":\n+        return \"Milliseconds\"\n+    else:\n+        print(\"Unknown unit type\", input_unit)\n+\n+\n+def main():\n+    namespace = \"Evergreen/Benchmark\"\n+    with open(\"jmh-result.json\", \"r\") as f:\n+        report = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")  # type: Client\n+    datapoints = []\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+    secondary_metric_names = []\n+\n+    # Generate CloudWatch metrics from our benchmarks\n+    for benchmark in report:\n+        dims = [\n+            {\n+                \"Name\": \"Benchmark\",\n+                \"Value\": benchmark[\"benchmark\"]\n+            },\n+            {\n+                \"Name\": \"GitHub Event\",\n+                \"Value\": event_type\n+            }\n+        ]\n+        datapoints.append({\n+            \"MetricName\": \"ExecutionTime\",\n+            \"Value\": benchmark[\"primaryMetric\"][\"score\"],\n+            \"Dimensions\": dims,\n+            \"Unit\": convert_units(benchmark[\"primaryMetric\"][\"scoreUnit\"])\n+        })\n+        if \"secondaryMetrics\" in benchmark:\n+            for metric_name, values in benchmark[\"secondaryMetrics\"].items():\n+                datapoints.append({\n+                    \"MetricName\": metric_name,\n+                    \"Value\": values[\"score\"],\n+                    \"Unit\": convert_units(values[\"scoreUnit\"]),\n+                    \"Dimensions\": dims\n+                })\n+                secondary_metric_names.append(metric_name)\n+\n+    if event_type == \"push\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDgwODU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#pullrequestreview-377080854", "createdAt": "2020-03-18T17:23:40Z", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDg0Mzg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#pullrequestreview-377084389", "createdAt": "2020-03-18T17:27:51Z", "commit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNzo1MlrOF4PkBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNzo1MlrOF4PkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxOTU1OA==", "bodyText": "if not \"push\" event, the benchmark isn't used?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/118#discussion_r394519558", "createdAt": "2020-03-18T17:27:52Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/cwJMHUpload.py", "diffHunk": "@@ -0,0 +1,184 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch\n+\"\"\"\n+import json\n+import os\n+import subprocess\n+\n+import boto3\n+\n+try:\n+    # Try getting type hints when developing but we don't need it in prod\n+    from boto3_type_annotations.cloudwatch import Client\n+except:\n+    pass\n+from retryable import retry\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, namespace, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=namespace,\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry()\n+def put_dashboard_retryable(cw, dashboard_name, dashboard_data):\n+    cw.put_dashboard(DashboardName=dashboard_name, DashboardBody=json.dumps(dashboard_data))\n+\n+\n+def convert_units(input_unit):\n+    \"\"\"\n+    Convert units into CloudWatch understandable units.\n+    \"\"\"\n+    input_unit = input_unit.lower()\n+    if input_unit == \"s/op\":\n+        return \"Seconds\"\n+    elif input_unit == \"bytes\" or input_unit == \"byte\":\n+        return \"Bytes\"\n+    elif input_unit == \"op/s\":\n+        return \"Count/Second\"\n+    elif input_unit == \"ms\":\n+        return \"Milliseconds\"\n+    else:\n+        print(\"Unknown unit type\", input_unit)\n+\n+\n+def main():\n+    namespace = \"Evergreen/Benchmark\"\n+    with open(\"jmh-result.json\", \"r\") as f:\n+        report = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")  # type: Client\n+    datapoints = []\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+    secondary_metric_names = []\n+\n+    # Generate CloudWatch metrics from our benchmarks\n+    for benchmark in report:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b2c51f8c852210634a7be0936b9dcde3b40ffe7"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2346, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}