{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDcwMjc2", "number": 574, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToyMTo0NlrOEyj0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyNTo0NFrOE4YYEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDUxMTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToyMTo0NlrOHpRfdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToyMTo0NlrOHpRfdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0MDI0NA==", "bodyText": "you remove the desiredStateQueue all state required to update the reported state of shadow are present in Map<String, Object> deploymentDetails", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r513040244", "createdAt": "2020-10-27T21:21:46Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -182,51 +183,48 @@ private void publishToGetDeviceShadowTopic() {\n \n     @SuppressFBWarnings\n     private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n-        DeploymentStatus status = DeploymentStatus.valueOf((String)\n-                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n-\n         String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n-        // only update reported state when the deployment succeeds.\n-        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n-\n-            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n-            // discard configurations that might have got added to the queue but the deployment\n-            // got discarded before being processed due to a new shadow deployment\n-            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n-                desiredStateQueue.poll();\n-                desired = desiredStateQueue.peek();\n-            }\n+        Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n+        // discard configurations that might have got added to the queue but the deployment\n+        // got discarded before being processed due to a new shadow deployment\n+        while (desired != null && !desired.getLeft().equals(configurationArn)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e76736d2852631cfcc080b5ae0346e01f9495f39"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ2NzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMzoxMlrOHritlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzoxMzo0M1rOHr1HJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTU0Mg==", "bodyText": "Lets create a new hash map here, wouldnt this just add two more keys with the same value while keeping the originals keys DEPLOYMENT_DETAILED_STATUS_KEY, DEPLOYMENT_FAILURE_CAUSE_KEY", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515419542", "createdAt": "2020-10-30T23:13:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -182,59 +189,52 @@ private void publishToGetDeviceShadowTopic() {\n \n     @SuppressFBWarnings\n     private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n-        DeploymentStatus status = DeploymentStatus.valueOf((String)\n-                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n-\n         String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n-        // only update reported state when the deployment succeeds.\n-        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+        try {\n+            ShadowState shadowState = new ShadowState();\n+            shadowState.reported = getReportedShadowState(deploymentDetails);\n+            UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n+            updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n+            updateNamedShadowRequest.thingName = thingName;\n+            updateNamedShadowRequest.state = shadowState;\n+            iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                    .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+            logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                    .log(\"Updated reported state for deployment\");\n+            return true;\n+        } catch (InterruptedException e) {\n+            //Since this method can run as runnable cannot throw exception so handling exceptions here\n+            logger.atWarn().log(\"Interrupted while publishing reported state\");\n+        } catch (ExecutionException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+        }\n+        return false;\n+    }\n \n-            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n-            // discard configurations that might have got added to the queue but the deployment\n-            // got discarded before being processed due to a new shadow deployment\n-            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n-                desiredStateQueue.poll();\n-                desired = desiredStateQueue.peek();\n-            }\n+    @SuppressWarnings(\"PMD.LooseCoupling\")\n+    private HashMap<String, Object> getReportedShadowState(Map<String, Object> deploymentDetails) {\n+        HashMap<String, Object> statusDetails =\n+                (HashMap<String, Object>) deploymentDetails.get(DEPLOYMENT_STATUS_DETAILS_KEY_NAME);\n+        statusDetails.put(DETAILED_STATUS_KEY, statusDetails.get(DEPLOYMENT_DETAILED_STATUS_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcyMDk5OA==", "bodyText": "Oops meant to do that", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515720998", "createdAt": "2020-11-02T03:13:43Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -182,59 +189,52 @@ private void publishToGetDeviceShadowTopic() {\n \n     @SuppressFBWarnings\n     private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n-        DeploymentStatus status = DeploymentStatus.valueOf((String)\n-                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n-\n         String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n-        // only update reported state when the deployment succeeds.\n-        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+        try {\n+            ShadowState shadowState = new ShadowState();\n+            shadowState.reported = getReportedShadowState(deploymentDetails);\n+            UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n+            updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n+            updateNamedShadowRequest.thingName = thingName;\n+            updateNamedShadowRequest.state = shadowState;\n+            iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                    .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+            logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                    .log(\"Updated reported state for deployment\");\n+            return true;\n+        } catch (InterruptedException e) {\n+            //Since this method can run as runnable cannot throw exception so handling exceptions here\n+            logger.atWarn().log(\"Interrupted while publishing reported state\");\n+        } catch (ExecutionException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+        }\n+        return false;\n+    }\n \n-            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n-            // discard configurations that might have got added to the queue but the deployment\n-            // got discarded before being processed due to a new shadow deployment\n-            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n-                desiredStateQueue.poll();\n-                desired = desiredStateQueue.peek();\n-            }\n+    @SuppressWarnings(\"PMD.LooseCoupling\")\n+    private HashMap<String, Object> getReportedShadowState(Map<String, Object> deploymentDetails) {\n+        HashMap<String, Object> statusDetails =\n+                (HashMap<String, Object>) deploymentDetails.get(DEPLOYMENT_STATUS_DETAILS_KEY_NAME);\n+        statusDetails.put(DETAILED_STATUS_KEY, statusDetails.get(DEPLOYMENT_DETAILED_STATUS_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTU0Mg=="}, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ3ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyMDo1MlrOHrizpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjo1OTo0MFrOHr08-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMTA5Mw==", "bodyText": "Line256 should use configuration.get(FLEET_CONFIG_KEY)) instead of configuration. Can we test this by pointing to a different shadow and updating the shadow (simulate cloud)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515421093", "createdAt": "2020-10-30T23:20:52Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -259,9 +259,12 @@ protected void shadowUpdated(Map<String, Object> configuration, Integer version)\n             return;\n         }\n \n-        desiredStateQueue.add(new Pair<>(configurationArn, configuration));\n-        Deployment deployment =\n-                new Deployment(configurationString, DeploymentType.SHADOW, configurationArn);\n+        Deployment deployment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODM5Mw==", "bodyText": "Fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515718393", "createdAt": "2020-11-02T02:59:40Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -259,9 +259,12 @@ protected void shadowUpdated(Map<String, Object> configuration, Integer version)\n             return;\n         }\n \n-        desiredStateQueue.add(new Pair<>(configurationArn, configuration));\n-        Deployment deployment =\n-                new Deployment(configurationString, DeploymentType.SHADOW, configurationArn);\n+        Deployment deployment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMTA5Mw=="}, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ3OTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyMTo0NFrOHri0Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzoyMzoyNFrOHr1Okw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMTI0Mg==", "bodyText": "we dont need this check, the deployment details can be emitted for both shadow and jobs deployments. Lets not check this in as it would break existing e2e and FSS related UAT's", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515421242", "createdAt": "2020-10-30T23:21:44Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -240,6 +246,13 @@ private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n             logger.atDebug().log(\"Updating Fleet Status service for deployment with ID: {}\",\n                     deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME));\n             isDeploymentInProgress.set(false);\n+            if (type == SHADOW) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcyMjg5OQ==", "bodyText": "Removed the check.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r515722899", "createdAt": "2020-11-02T03:23:24Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -240,6 +246,13 @@ private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n             logger.atDebug().log(\"Updating Fleet Status service for deployment with ID: {}\",\n                     deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME));\n             isDeploymentInProgress.set(false);\n+            if (type == SHADOW) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMTI0Mg=="}, "originalCommit": {"oid": "004427fa7d0e14d4d748f35db61a4a77db7f6683"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTE5MDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowNjowM1rOHsT2Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo0NzowMVrOHs589w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDU0Mw==", "bodyText": "nit: DESIRED_STATUS_CANCELED.equals(...)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516224543", "createdAt": "2020-11-02T20:06:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -253,15 +256,18 @@ protected void shadowUpdated(Map<String, Object> configuration, Integer version)\n \n         String configurationString;\n         try {\n-            configurationString = SerializerFactory.getJsonObjectMapper().writeValueAsString(configuration);\n+            configurationString = SerializerFactory.getJsonObjectMapper().writeValueAsString(fleetConfig);\n         } catch (JsonProcessingException e) {\n             logger.atError(\"Unable to process shadow update\", e);\n             return;\n         }\n \n-        desiredStateQueue.add(new Pair<>(configurationArn, configuration));\n-        Deployment deployment =\n-                new Deployment(configurationString, DeploymentType.SHADOW, configurationArn);\n+        Deployment deployment;\n+        if (desired.get(DESIRED_STATUS_KEY).equals(DESIRED_STATUS_CANCELED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0ODg4Nw==", "bodyText": "oh so that the LHS can't be null \ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516848887", "createdAt": "2020-11-03T17:47:01Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -253,15 +256,18 @@ protected void shadowUpdated(Map<String, Object> configuration, Integer version)\n \n         String configurationString;\n         try {\n-            configurationString = SerializerFactory.getJsonObjectMapper().writeValueAsString(configuration);\n+            configurationString = SerializerFactory.getJsonObjectMapper().writeValueAsString(fleetConfig);\n         } catch (JsonProcessingException e) {\n             logger.atError(\"Unable to process shadow update\", e);\n             return;\n         }\n \n-        desiredStateQueue.add(new Pair<>(configurationArn, configuration));\n-        Deployment deployment =\n-                new Deployment(configurationString, DeploymentType.SHADOW, configurationArn);\n+        Deployment deployment;\n+        if (desired.get(DESIRED_STATUS_KEY).equals(DESIRED_STATUS_CANCELED)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDU0Mw=="}, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTIxMTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxMjozOFrOHsUCiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoyNDoxOVrOHs7Rfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNzcyMA==", "bodyText": "Is this information only reported to shadow (not in iot jobs)?\nThe version may need to be changed later, by looking up Nucleus component deviceConfiguration.getNucleusComponentName()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516227720", "createdAt": "2020-11-02T20:12:38Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -182,59 +189,55 @@ private void publishToGetDeviceShadowTopic() {\n \n     @SuppressFBWarnings\n     private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n-        DeploymentStatus status = DeploymentStatus.valueOf((String)\n-                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n-\n         String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n-        // only update reported state when the deployment succeeds.\n-        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+        try {\n+            ShadowState shadowState = new ShadowState();\n+            shadowState.reported = getReportedShadowState(deploymentDetails);\n+            UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n+            updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n+            updateNamedShadowRequest.thingName = thingName;\n+            updateNamedShadowRequest.state = shadowState;\n+            iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                    .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+            logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                    .log(\"Updated reported state for deployment\");\n+            return true;\n+        } catch (InterruptedException e) {\n+            //Since this method can run as runnable cannot throw exception so handling exceptions here\n+            logger.atWarn().log(\"Interrupted while publishing reported state\");\n+        } catch (ExecutionException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+        }\n+        return false;\n+    }\n \n-            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n-            // discard configurations that might have got added to the queue but the deployment\n-            // got discarded before being processed due to a new shadow deployment\n-            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n-                desiredStateQueue.poll();\n-                desired = desiredStateQueue.peek();\n-            }\n+    @SuppressWarnings(\"PMD.LooseCoupling\")\n+    private HashMap<String, Object> getReportedShadowState(Map<String, Object> deploymentDetails) {\n+        Map<String, Object> deploymentStatusDetails =\n+                (Map<String, Object>) deploymentDetails.get(DEPLOYMENT_STATUS_DETAILS_KEY_NAME);\n \n-            if (desired == null) {\n-                logger.atError().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n-                        .log(\"Unable to update shadow for deployment\");\n-                return true;\n-            }\n+        HashMap<String, Object> statusDetails = new HashMap<>();\n+        statusDetails.put(DETAILED_STATUS_KEY, deploymentStatusDetails.get(DEPLOYMENT_DETAILED_STATUS_KEY));\n+        statusDetails.put(FAILURE_CAUSE_KEY, deploymentStatusDetails.get(DEPLOYMENT_FAILURE_CAUSE_KEY));\n \n-            try {\n-                ShadowState shadowState = new ShadowState();\n-                shadowState.reported = new HashMap<>(desired.getRight());\n-                UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n-                updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n-                updateNamedShadowRequest.thingName = thingName;\n-                updateNamedShadowRequest.state = shadowState;\n-                iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n-                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n-                desiredStateQueue.remove();\n-                logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n-                        .log(\"Updated reported state for deployment\");\n-                return true;\n-            } catch (InterruptedException e) {\n-                //Since this method can run as runnable cannot throw exception so handling exceptions here\n-                logger.atWarn().log(\"Interrupted while publishing reported state\");\n-            } catch (ExecutionException e) {\n-                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n-            } catch (TimeoutException e) {\n-                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n-            }\n-            return false;\n-        }\n-        return true;\n+        HashMap<String, Object> reported = new HashMap<>();\n+        reported.put(ARN_FOR_STATUS_KEY, deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME));\n+        reported.put(STATUS_KEY, deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+        reported.put(STATUS_DETAILS_KEY, statusDetails);\n+        reported.put(GGC_VERSION_KEY, KERNEL_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MDUyNw==", "bodyText": "Noted! There's a few more places getting the version from lifecyclemanager.KernelVersion. getNucleusComponentName right now doesn't contain the version number yet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516870527", "createdAt": "2020-11-03T18:24:19Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/deployment/ShadowDeploymentListener.java", "diffHunk": "@@ -182,59 +189,55 @@ private void publishToGetDeviceShadowTopic() {\n \n     @SuppressFBWarnings\n     private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n-        DeploymentStatus status = DeploymentStatus.valueOf((String)\n-                deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n-\n         String configurationArn = (String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME);\n-        // only update reported state when the deployment succeeds.\n-        if (DeploymentStatus.SUCCEEDED.equals(status)) {\n+        try {\n+            ShadowState shadowState = new ShadowState();\n+            shadowState.reported = getReportedShadowState(deploymentDetails);\n+            UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n+            updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n+            updateNamedShadowRequest.thingName = thingName;\n+            updateNamedShadowRequest.state = shadowState;\n+            iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n+                    .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n+            logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n+                    .log(\"Updated reported state for deployment\");\n+            return true;\n+        } catch (InterruptedException e) {\n+            //Since this method can run as runnable cannot throw exception so handling exceptions here\n+            logger.atWarn().log(\"Interrupted while publishing reported state\");\n+        } catch (ExecutionException e) {\n+            logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n+        } catch (TimeoutException e) {\n+            logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n+        }\n+        return false;\n+    }\n \n-            Pair<String, Map<String, Object>> desired = desiredStateQueue.peek();\n-            // discard configurations that might have got added to the queue but the deployment\n-            // got discarded before being processed due to a new shadow deployment\n-            while (desired != null && !desired.getLeft().equals(configurationArn)) {\n-                desiredStateQueue.poll();\n-                desired = desiredStateQueue.peek();\n-            }\n+    @SuppressWarnings(\"PMD.LooseCoupling\")\n+    private HashMap<String, Object> getReportedShadowState(Map<String, Object> deploymentDetails) {\n+        Map<String, Object> deploymentStatusDetails =\n+                (Map<String, Object>) deploymentDetails.get(DEPLOYMENT_STATUS_DETAILS_KEY_NAME);\n \n-            if (desired == null) {\n-                logger.atError().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n-                        .log(\"Unable to update shadow for deployment\");\n-                return true;\n-            }\n+        HashMap<String, Object> statusDetails = new HashMap<>();\n+        statusDetails.put(DETAILED_STATUS_KEY, deploymentStatusDetails.get(DEPLOYMENT_DETAILED_STATUS_KEY));\n+        statusDetails.put(FAILURE_CAUSE_KEY, deploymentStatusDetails.get(DEPLOYMENT_FAILURE_CAUSE_KEY));\n \n-            try {\n-                ShadowState shadowState = new ShadowState();\n-                shadowState.reported = new HashMap<>(desired.getRight());\n-                UpdateNamedShadowRequest updateNamedShadowRequest = new UpdateNamedShadowRequest();\n-                updateNamedShadowRequest.shadowName = DEPLOYMENT_SHADOW_NAME;\n-                updateNamedShadowRequest.thingName = thingName;\n-                updateNamedShadowRequest.state = shadowState;\n-                iotShadowClient.PublishUpdateNamedShadow(updateNamedShadowRequest, QualityOfService.AT_LEAST_ONCE)\n-                        .get(TIMEOUT_FOR_PUBLISHING_TO_TOPICS_SECONDS, TimeUnit.SECONDS);\n-                desiredStateQueue.remove();\n-                logger.atInfo().kv(CONFIGURATION_ARN_LOG_KEY_NAME, configurationArn)\n-                        .log(\"Updated reported state for deployment\");\n-                return true;\n-            } catch (InterruptedException e) {\n-                //Since this method can run as runnable cannot throw exception so handling exceptions here\n-                logger.atWarn().log(\"Interrupted while publishing reported state\");\n-            } catch (ExecutionException e) {\n-                logger.atError().setCause(e).log(\"Caught exception while publishing reported state\");\n-            } catch (TimeoutException e) {\n-                logger.atWarn().setCause(e).log(\"Publish reported state timed out, will retry shortly\");\n-            }\n-            return false;\n-        }\n-        return true;\n+        HashMap<String, Object> reported = new HashMap<>();\n+        reported.put(ARN_FOR_STATUS_KEY, deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME));\n+        reported.put(STATUS_KEY, deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME));\n+        reported.put(STATUS_DETAILS_KEY, statusDetails);\n+        reported.put(GGC_VERSION_KEY, KERNEL_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNzcyMA=="}, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjE2NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMToxMDoxNVrOHsdQmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo0OTozMlrOHs6Czg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3ODc3OA==", "bodyText": "should this cast happen safely? maybe check if the get does not return null?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516378778", "createdAt": "2020-11-03T01:10:15Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -359,6 +364,24 @@ private void uploadFleetStatusServiceData(Set<GreengrassService> greengrassServi\n                 .ggcVersion(KERNEL_VERSION)\n                 .sequenceNumber(sequenceNumber)\n                 .build();\n+\n+        if (deploymentDetails != null) {\n+            DeploymentInformation deploymentInformation = DeploymentInformation.builder()\n+                    .status((String) deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME))\n+                    .fleetConfigurationArnForStatus((String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME))\n+                    .build();\n+            Map<String, String> statusDetailsMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1MDM4Mg==", "bodyText": "Right. Should have check for null before casting", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516850382", "createdAt": "2020-11-03T17:49:32Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -359,6 +364,24 @@ private void uploadFleetStatusServiceData(Set<GreengrassService> greengrassServi\n                 .ggcVersion(KERNEL_VERSION)\n                 .sequenceNumber(sequenceNumber)\n                 .build();\n+\n+        if (deploymentDetails != null) {\n+            DeploymentInformation deploymentInformation = DeploymentInformation.builder()\n+                    .status((String) deploymentDetails.get(DEPLOYMENT_STATUS_KEY_NAME))\n+                    .fleetConfigurationArnForStatus((String) deploymentDetails.get(DEPLOYMENT_ID_KEY_NAME))\n+                    .build();\n+            Map<String, String> statusDetailsMap =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3ODc3OA=="}, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjE3MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMToxNDoyMlrOHsdUrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODozMDoxMlrOHs7dzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3OTgyMA==", "bodyText": "It would probably be better if you send a DeploymentInformation in this function and create the object in deploymentStatusChanged", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516379820", "createdAt": "2020-11-03T01:14:22Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -277,12 +281,13 @@ private void updateEventTriggeredFleetStatusData() {\n         });\n         removedDependenciesSet.forEach(allServiceNamesMap::remove);\n         removedDependenciesSet.clear();\n-        uploadFleetStatusServiceData(updatedGreengrassServiceSet, overAllStatus.get());\n+        uploadFleetStatusServiceData(updatedGreengrassServiceSet, overAllStatus.get(), deploymentDetails);\n         isEventTriggeredUpdateInProgress.set(false);\n     }\n \n     private void uploadFleetStatusServiceData(Set<GreengrassService> greengrassServiceSet,\n-                                              OverallStatus overAllStatus) {\n+                                              OverallStatus overAllStatus,\n+                                              Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg3MzY3Ng==", "bodyText": "Good point!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r516873676", "createdAt": "2020-11-03T18:30:12Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -277,12 +281,13 @@ private void updateEventTriggeredFleetStatusData() {\n         });\n         removedDependenciesSet.forEach(allServiceNamesMap::remove);\n         removedDependenciesSet.clear();\n-        uploadFleetStatusServiceData(updatedGreengrassServiceSet, overAllStatus.get());\n+        uploadFleetStatusServiceData(updatedGreengrassServiceSet, overAllStatus.get(), deploymentDetails);\n         isEventTriggeredUpdateInProgress.set(false);\n     }\n \n     private void uploadFleetStatusServiceData(Set<GreengrassService> greengrassServiceSet,\n-                                              OverallStatus overAllStatus) {\n+                                              OverallStatus overAllStatus,\n+                                              Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM3OTgyMA=="}, "originalCommit": {"oid": "715ec34856f78c6e10d5c4135f2cd5c3b3e44025"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTU1MDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQyMjoyNTo0NFrOHyRGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMTowNDo1MFrOHyVXDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTAwNw==", "bodyText": "Can you add a unit test which will use this function?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r522471007", "createdAt": "2020-11-12T22:25:44Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -437,6 +445,20 @@ private OverallStatus getOverallStatusBasedOnServiceState(OverallStatus overallS\n         return OverallStatus.HEALTHY;\n     }\n \n+    private DeploymentInformation getDeploymentInformation(Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4634f2d8b921472a2b457e41dd4c069e21f6eb3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ4MTIxNw==", "bodyText": "Added some assertions for this in existing unit tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r522481217", "createdAt": "2020-11-12T22:48:21Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -437,6 +445,20 @@ private OverallStatus getOverallStatusBasedOnServiceState(OverallStatus overallS\n         return OverallStatus.HEALTHY;\n     }\n \n+    private DeploymentInformation getDeploymentInformation(Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTAwNw=="}, "originalCommit": {"oid": "a4634f2d8b921472a2b457e41dd4c069e21f6eb3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxNjMwMg==", "bodyText": "You also need to make sure that the status details are also set right if they exist? Can you add that as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r522516302", "createdAt": "2020-11-12T23:57:07Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -437,6 +445,20 @@ private OverallStatus getOverallStatusBasedOnServiceState(OverallStatus overallS\n         return OverallStatus.HEALTHY;\n     }\n \n+    private DeploymentInformation getDeploymentInformation(Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTAwNw=="}, "originalCommit": {"oid": "a4634f2d8b921472a2b457e41dd4c069e21f6eb3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU0MDgxNA==", "bodyText": "Missed it... Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/574#discussion_r522540814", "createdAt": "2020-11-13T01:04:50Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/status/FleetStatusService.java", "diffHunk": "@@ -437,6 +445,20 @@ private OverallStatus getOverallStatusBasedOnServiceState(OverallStatus overallS\n         return OverallStatus.HEALTHY;\n     }\n \n+    private DeploymentInformation getDeploymentInformation(Map<String, Object> deploymentDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ3MTAwNw=="}, "originalCommit": {"oid": "a4634f2d8b921472a2b457e41dd4c069e21f6eb3"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 400, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}