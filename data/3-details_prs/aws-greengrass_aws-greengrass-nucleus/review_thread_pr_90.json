{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNTYzMzgx", "number": 90, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1NjoyM1rODkZx3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMzozM1rODkfa2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk3NjkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1NjoyM1rOFwtL1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjowNzowOVrOFwxEfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjI3OA==", "bodyText": "Shouldn't this be true?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386616278", "createdAt": "2020-03-02T19:56:23Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static volatile boolean calledAlready;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new RuntimeInfo(0, 0, 0));\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> context.getStore(NAMESPACE).put(context.getDisplayName(),\n+                ((RuntimeInfo) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                        .max(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                                MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()))), 0,\n+                50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a03e771de5b1437834517ebb4765efeeee2509"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3OTkzMw==", "bodyText": "Debatable, but yeah maybe. I thought since what we're running is so quick, I should just try to let if finish the current one. So I may get the very last value, or not, but either way it isn't a big deal.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386679933", "createdAt": "2020-03-02T22:07:09Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static volatile boolean calledAlready;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new RuntimeInfo(0, 0, 0));\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> context.getStore(NAMESPACE).put(context.getDisplayName(),\n+                ((RuntimeInfo) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                        .max(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                                MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()))), 0,\n+                50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjI3OA=="}, "originalCommit": {"oid": "44a03e771de5b1437834517ebb4765efeeee2509"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgyMTE2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToxOTozMFrOFw1ODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNDo1M1rOFw1UYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzkxOQ==", "bodyText": "Should you give the extension a more explicit name, since it's about performance metrics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386747919", "createdAt": "2020-03-03T01:19:30Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a47e0f5256c84fa1fb514c8638b48d6770834038"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTUzNw==", "bodyText": "Yeah, just named it when I was trying to get something working. Will rename.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386749537", "createdAt": "2020-03-03T01:24:53Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0NzkxOQ=="}, "originalCommit": {"oid": "a47e0f5256c84fa1fb514c8638b48d6770834038"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgyMjA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyMDowMFrOFw1OmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNTowOFrOFw1Unw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODA1Ng==", "bodyText": "Can it be private?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386748056", "createdAt": "2020-03-03T01:20:00Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new LinkedList<RuntimeInfo>());\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> {\n+            ((List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                    .add(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                            MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()));\n+        }, 0, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);\n+        List<RuntimeInfo> infoList = (List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName());\n+        double maxHeapMemoryMB = infoList.stream().mapToLong(x -> x.heapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        double maxNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        long maxLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).max().getAsLong();\n+\n+        double avgHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.heapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n+\n+        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",\n+                context.getRequiredTestClass().getName(), \"maxHeapMemoryMB\", maxHeapMemoryMB, \"maxNonHeapMemoryMB\",\n+                maxNonHeapMemoryMB, \"maxLoadedClassCount\", maxLoadedClassCount, \"avgHeapMemoryMB\", avgHeapMemoryMB,\n+                \"avgNonHeapMemoryMB\", avgNonHeapMemoryMB, \"avgLoadedClassCount\", avgLoadedClassCount);\n+\n+        ValueIterator<?> existing = null;\n+        try {\n+            existing = JSON.std.anySequenceFrom(reportFile);\n+        } catch (JSONObjectException ignored) {\n+        }\n+\n+        try (FileWriter fileWriter = new FileWriter(reportFile, false);\n+             SequenceWriter seqWriter = MAPPER.writer().writeValuesAsArray(fileWriter)) {\n+            if (existing != null) {\n+                seqWriter.writeAll(existing.readAll());\n+            }\n+            seqWriter.write(map);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) throws Exception {\n+        File surefireReportDir = new File(System.getProperty(\"surefireReportDir\", \"target/surefire-reports\"));\n+        if (!surefireReportDir.exists()) {\n+            surefireReportDir.mkdirs();\n+        }\n+\n+        reportFile = surefireReportDir.toPath().resolve(\"junitReport.json\").toFile();\n+        if (!reportFile.exists()) {\n+            reportFile.createNewFile();\n+        }\n+    }\n+\n+    @AllArgsConstructor\n+    static class RuntimeInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a47e0f5256c84fa1fb514c8638b48d6770834038"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTU5OQ==", "bodyText": "If it can be private I'll switch it to private.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386749599", "createdAt": "2020-03-03T01:25:08Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/extension/EGExtension.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EGExtension\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new LinkedList<RuntimeInfo>());\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> {\n+            ((List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                    .add(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                            MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()));\n+        }, 0, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);\n+        List<RuntimeInfo> infoList = (List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName());\n+        double maxHeapMemoryMB = infoList.stream().mapToLong(x -> x.heapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        double maxNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        long maxLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).max().getAsLong();\n+\n+        double avgHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.heapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n+\n+        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",\n+                context.getRequiredTestClass().getName(), \"maxHeapMemoryMB\", maxHeapMemoryMB, \"maxNonHeapMemoryMB\",\n+                maxNonHeapMemoryMB, \"maxLoadedClassCount\", maxLoadedClassCount, \"avgHeapMemoryMB\", avgHeapMemoryMB,\n+                \"avgNonHeapMemoryMB\", avgNonHeapMemoryMB, \"avgLoadedClassCount\", avgLoadedClassCount);\n+\n+        ValueIterator<?> existing = null;\n+        try {\n+            existing = JSON.std.anySequenceFrom(reportFile);\n+        } catch (JSONObjectException ignored) {\n+        }\n+\n+        try (FileWriter fileWriter = new FileWriter(reportFile, false);\n+             SequenceWriter seqWriter = MAPPER.writer().writeValuesAsArray(fileWriter)) {\n+            if (existing != null) {\n+                seqWriter.writeAll(existing.readAll());\n+            }\n+            seqWriter.write(map);\n+        }\n+    }\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) throws Exception {\n+        File surefireReportDir = new File(System.getProperty(\"surefireReportDir\", \"target/surefire-reports\"));\n+        if (!surefireReportDir.exists()) {\n+            surefireReportDir.mkdirs();\n+        }\n+\n+        reportFile = surefireReportDir.toPath().resolve(\"junitReport.json\").toFile();\n+        if (!reportFile.exists()) {\n+            reportFile.createNewFile();\n+        }\n+    }\n+\n+    @AllArgsConstructor\n+    static class RuntimeInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODA1Ng=="}, "originalCommit": {"oid": "a47e0f5256c84fa1fb514c8638b48d6770834038"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTg5OTQ3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMjo0NFrOFw189Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowNjo1MlrOFw2BMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTkyNQ==", "bodyText": "Hm what's the difference with @BeforeAll in Performance?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386759925", "createdAt": "2020-03-03T02:02:44Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class InitTest {\n+    // This test case runs once per test suite execution before the suite starts.\n+    // Put logic here which should run only once before all tests.\n+    @Test\n+    public void init() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822d3dd80eac9d964086cae9d326bba809894387"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MTAwOA==", "bodyText": "BeforeAll doesn't run before all tests. The BeforeAll runs before every test class, not the whole test suite. This one only ever runs once before everything else.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386761008", "createdAt": "2020-03-03T02:06:52Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class InitTest {\n+    // This test case runs once per test suite execution before the suite starts.\n+    // Put logic here which should run only once before all tests.\n+    @Test\n+    public void init() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTkyNQ=="}, "originalCommit": {"oid": "822d3dd80eac9d964086cae9d326bba809894387"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTg5OTg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMjo1NlrOFw19Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMjo1NlrOFw19Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1OTk5MA==", "bodyText": "Maybe name to InitTestSuite?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386759990", "createdAt": "2020-03-03T02:02:56Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/extension/InitTest.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+\n+public class InitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822d3dd80eac9d964086cae9d326bba809894387"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTkwMTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMzozM1rOFw193w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjowMzozM1rOFw193w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2MDE1OQ==", "bodyText": "rename to performanceResultMap or perfResultMap", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/90#discussion_r386760159", "createdAt": "2020-03-03T02:03:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/extension/PerformanceReporting.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.extension;\n+\n+import com.aws.iot.evergreen.util.Utils;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SequenceWriter;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import com.fasterxml.jackson.jr.ob.JSONObjectException;\n+import com.fasterxml.jackson.jr.ob.ValueIterator;\n+import lombok.AllArgsConstructor;\n+import org.junit.jupiter.api.extension.AfterTestExecutionCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.Extension;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.lang.management.ClassLoadingMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+public class PerformanceReporting\n+        implements Extension, BeforeAllCallback, BeforeTestExecutionCallback, AfterTestExecutionCallback {\n+    private static final ExtensionContext.Namespace NAMESPACE =\n+            ExtensionContext.Namespace.create(\"com.aws.iot.evergreen.extension\");\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final ScheduledExecutorService exec = new ScheduledThreadPoolExecutor(1);\n+    private static final MemoryMXBean MEMORY_BEAN = ManagementFactory.getMemoryMXBean();\n+    private static final ClassLoadingMXBean CLASS_BEAN = ManagementFactory.getClassLoadingMXBean();\n+    private ScheduledFuture<?> running;\n+    private static File reportFile;\n+\n+    @Override\n+    public void beforeTestExecution(ExtensionContext context) throws Exception {\n+        // Request that we first gc to make sure that we start as small as possible\n+        Runtime.getRuntime().gc();\n+        context.getStore(NAMESPACE).put(context.getDisplayName(), new LinkedList<RuntimeInfo>());\n+\n+        // Refresh the stats every 50ms, taking the maximum of each value every time\n+        running = exec.scheduleAtFixedRate(() -> {\n+            ((List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName()))\n+                    .add(new RuntimeInfo(MEMORY_BEAN.getHeapMemoryUsage().getUsed(),\n+                            MEMORY_BEAN.getNonHeapMemoryUsage().getUsed(), CLASS_BEAN.getLoadedClassCount()));\n+        }, 0, 50, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    public void afterTestExecution(ExtensionContext context) throws Exception {\n+        running.cancel(false);\n+        List<RuntimeInfo> infoList = (List<RuntimeInfo>) context.getStore(NAMESPACE).get(context.getDisplayName());\n+        double maxHeapMemoryMB = infoList.stream().mapToLong(x -> x.heapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        double maxNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).max().getAsLong() / 1024.0 / 1024.0;\n+        long maxLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).max().getAsLong();\n+\n+        double avgHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.heapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgNonHeapMemoryMB =\n+                infoList.stream().mapToLong(x -> x.nonHeapMemory).average().getAsDouble() / 1024.0 / 1024.0;\n+        double avgLoadedClassCount = infoList.stream().mapToLong(x -> x.loadedClassCount).average().getAsDouble();\n+\n+        Map<String, String> map = Utils.immutableMap(\"name\", context.getRequiredTestMethod().getName(), \"classname\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822d3dd80eac9d964086cae9d326bba809894387"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4834, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}