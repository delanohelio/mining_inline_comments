{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NjQ5MjQ5", "number": 508, "title": "Add group-based CLI auth", "bodyText": "Issue #, if available:\nDescription of changes:\n\nChange ~root/cli_ipc_info from a file to a directory of auth files\nCLIService takes a list of posix groups which are authorized to use CLI, generates auth info for each group, and save to a file named group-<gid> with group owner <gid>\n\nBy default, auth file will be generated for the effective user which is running GGC, with file name user-<uid>\nWhen configuration changes, revoke all previous auth tokens and clean up the entire auth directory.\n\n\n\nDepends on: aws-greengrass/aws-greengrass-cli#48\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nDoc: CLI authentication and authorization design\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-08T04:33:35Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508", "merged": true, "mergeCommit": {"oid": "3f4c1e6acd87e3791b8a719c5a89d3bfd909eb97"}, "closed": true, "closedAt": "2020-10-22T00:04:20Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQlu2YgBqjM4NTY3NzM3NTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU2avSAFqTUxNDI3MDM3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e028164f0d1c8d38d2db314bcb86a72382fec26b", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e028164f0d1c8d38d2db314bcb86a72382fec26b", "committedDate": "2020-10-08T04:08:28Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "committedDate": "2020-10-08T18:16:16Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/85d7ba6505df78f49ac2e8493ab92bb22485cc1f", "committedDate": "2020-10-08T18:16:16Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "a8f6abd28d96f4927fb46feabb3d62a05649a777", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8f6abd28d96f4927fb46feabb3d62a05649a777", "committedDate": "2020-10-08T22:03:17Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8f6abd28d96f4927fb46feabb3d62a05649a777", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8f6abd28d96f4927fb46feabb3d62a05649a777", "committedDate": "2020-10-08T22:03:17Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "cf57dfd7a893e50c9d51ececdca95a0b40338482", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf57dfd7a893e50c9d51ececdca95a0b40338482", "committedDate": "2020-10-08T22:48:05Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf57dfd7a893e50c9d51ececdca95a0b40338482", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cf57dfd7a893e50c9d51ececdca95a0b40338482", "committedDate": "2020-10-08T22:48:05Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "668963d2816abc104033bac4aaef757a00dad16a", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/668963d2816abc104033bac4aaef757a00dad16a", "committedDate": "2020-10-08T23:37:55Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "668963d2816abc104033bac4aaef757a00dad16a", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/668963d2816abc104033bac4aaef757a00dad16a", "committedDate": "2020-10-08T23:37:55Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb807991abdc5f456848686d80adb2353f5a358e", "committedDate": "2020-10-09T00:12:53Z", "message": "Add group-based CLI auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI0NDQz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-505324443", "createdAt": "2020-10-09T02:44:26Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0NDoyN1rOHe4_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0NDoyN1rOHe4_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1MzExNw==", "bodyText": "reuse code with registerAuthenticationTokenForExternalClient ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502153117", "createdAt": "2020-10-09T02:44:27Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +103,40 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI1NjAx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-505325601", "createdAt": "2020-10-09T02:48:49Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0ODo0OVrOHe5JDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo0ODo0OVrOHe5JDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NTUzMg==", "bodyText": "not sure if you should return 0? 0 could be root.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502155532", "createdAt": "2020-10-09T02:48:49Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/util/platforms/WindowsPlatform.java", "diffHunk": "@@ -42,4 +42,16 @@ public void killProcessAndChildren(Process process, boolean force) throws IOExce\n     public int exitCodeWhenCommandDoesNotExist() {\n         return 1;\n     }\n+\n+    @Override\n+    public Group getGroup(String posixGroup) {\n+        // TODO: support windows platform\n+        return new Group(\"0\", 0);\n+    }\n+\n+    @Override\n+    public int getEffectiveUID() {\n+        // TODO: support windows platform\n+        return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI3MjIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-505327221", "createdAt": "2020-10-09T02:54:41Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1NDo0MVrOHe5OjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1NDo0MVrOHe5OjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1Njk0MA==", "bodyText": "I am not sure if this is the right way to do for all unix platforms. May be some one with better device knowledge can advice?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502156940", "createdAt": "2020-10-09T02:54:41Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -30,6 +33,7 @@\n     protected static final int SIGINT = 2;\n     protected static final int SIGKILL = 9;\n     public static final Pattern PS_PID_PATTERN = Pattern.compile(\"(\\\\d+)\\\\s+(\\\\d+)\");\n+    private static final String POSIX_GROUP_FILE = \"/etc/group\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI3ODcz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-505327873", "createdAt": "2020-10-09T02:57:13Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1NzoxM1rOHe5Q0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1NzoxM1rOHe5Q0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzUyMg==", "bodyText": "Can you fail creating paths here? What happens then.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502157522", "createdAt": "2020-10-09T02:57:13Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI3OTk2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-505327996", "createdAt": "2020-10-09T02:57:41Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1Nzo0MVrOHe5ROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMjo1Nzo0MVrOHe5ROQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzYyNQ==", "bodyText": "Can revoke fail in a way that old tokens are also valid but you go ahead an create more tokens?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r502157625", "createdAt": "2020-10-09T02:57:41Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDMzMzMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-507033331", "createdAt": "2020-10-13T02:50:32Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1MDozMlrOHgTiZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjozNjoxNVrOHgXV-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNjU4Mg==", "bodyText": "This check should happen before Line 130? and if its null, should this method return true instead, because the token is not permitted.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503636582", "createdAt": "2020-10-13T02:50:32Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +103,40 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service to revoke external client token\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+        return revokeAuthenticationToken(authTokenToRevoke);\n+    }\n+\n+    private boolean revokeAuthenticationToken(String authTokenToRevoke) {\n+        Topic tokenTopic = config.lookup(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY, authTokenToRevoke);\n+        tokenTopic.withParentNeedsToKnow(false);\n+\n+        if (tokenTopic == null) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzNzE3NQ==", "bodyText": "This will need to be replace with the new IPC domain socket path. Add a TODO for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503637175", "createdAt": "2020-10-13T02:52:47Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODA3MA==", "bodyText": "Can at any point of time GGC load stale configuration with old tokens (in case of restart?). When does GGC make copy of configuration? This is a critical operation, upon which we need to ensure the persisted configuration is updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503638070", "createdAt": "2020-10-13T02:56:29Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE1NzYyNQ=="}, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODI3OQ==", "bodyText": "Might make this whole format as constant", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503698279", "createdAt": "2020-10-13T06:34:42Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        List<String> posixGroups = Coerce.toStringList(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.isEmpty()) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows file permissions\n+            ipcInfoFile.setReadable(false, false);\n+            ipcInfoFile.setReadable(true, true);\n+            ipcInfoFile.setWritable(true, true);\n+            return;\n+        }\n+        // This only supports POSIX compliant file permission right now. We will need to\n+        // change this when trying to support Greengrass in Non-POSIX OS.\n+        try {\n+            GroupPrincipal groupPrincipal = FileSystems.getDefault().getUserPrincipalLookupService()\n+                    .lookupPrincipalByGroupName(group.getName());\n+            PosixFileAttributeView posixFile = Files.getFileAttributeView(ipcInfoFile.toPath(),\n+                    PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n+            posixFile.setPermissions(PosixFilePermissions.fromString(GROUP_BASED_POSIX_FILE_PERMISSION));\n+            posixFile.setGroup(groupPrincipal);\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", GROUP_BASED_POSIX_FILE_PERMISSION)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n                 Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                GREENGRASS_CLI + \"-\" + clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5ODkzNw==", "bodyText": "you mean for group?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r503698937", "createdAt": "2020-10-13T06:36:15Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -127,50 +146,155 @@ public void postInject() {\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n+\n+        config.lookup(PARAMETERS_CONFIG_KEY, posixGroups).subscribe((why, newv) -> {\n+            requestRestart();\n+        });\n     }\n \n     @Override\n     protected void startup() {\n+        reportState(State.STARTING);\n+\n         try {\n             generateCliIpcInfo();\n             reportState(State.RUNNING);\n         } catch (IOException | UnauthenticatedException e) {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n \n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+        Utils.createPaths(authTokenDir);\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        List<String> posixGroups = Coerce.toStringList(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.isEmpty()) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows file permissions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODk0OTI4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-508894928", "createdAt": "2020-10-15T02:31:50Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMTo1MVrOHhuj7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMTo1MVrOHhuj7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyNzkxOQ==", "bodyText": "wrong path?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r505127919", "createdAt": "2020-10-15T02:31:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -22,15 +22,27 @@\n     private Path configPath;\n     private Path deploymentPath;\n     private Path kernelAltsPath;\n+    private Path cliIpcInfoPath;\n \n     public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n-                          Path deployment) throws IOException {\n+                          Path deployment, Path cliIpcInfo) throws IOException {\n         setRootPath(root);\n         setConfigPath(configPath);\n         setDeploymentPath(deployment);\n         setKernelAltsPath(kernelAlts);\n         setWorkPath(workPath);\n         setComponentStorePath(componentStorePath);\n+        setCliIpcInfoPath(cliIpcInfo);\n+    }\n+\n+    public void setCliIpcInfoPath(Path cliIpcInfoPath) throws IOException {\n+        this.cliIpcInfoPath = cliIpcInfoPath;\n+        Utils.createPaths(cliIpcInfoPath());\n+        Permissions.setCliIpcInfoPermission(kernelAltsPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODk1MDA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-508895005", "createdAt": "2020-10-15T02:32:05Z", "commit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMjowNVrOHhukJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMjowNVrOHhukJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyNzk3NQ==", "bodyText": "add the proper permission now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r505127975", "createdAt": "2020-10-15T02:32:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Permissions.java", "diffHunk": "@@ -40,4 +40,7 @@ public static void setConfigPermission(Path p) {\n \n     public static void setPluginPermission(Path p) {\n     }\n+\n+    public static void setCliIpcInfoPermission(Path p) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb807991abdc5f456848686d80adb2353f5a358e", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb807991abdc5f456848686d80adb2353f5a358e", "committedDate": "2020-10-09T00:12:53Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "d2db862aa41576c442b425c952b5e975377536cd", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2db862aa41576c442b425c952b5e975377536cd", "committedDate": "2020-10-15T16:49:11Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2db862aa41576c442b425c952b5e975377536cd", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d2db862aa41576c442b425c952b5e975377536cd", "committedDate": "2020-10-15T16:49:11Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "e4938d0604f41bbecbf7609644c305f47705efe9", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e4938d0604f41bbecbf7609644c305f47705efe9", "committedDate": "2020-10-19T19:43:18Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4938d0604f41bbecbf7609644c305f47705efe9", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e4938d0604f41bbecbf7609644c305f47705efe9", "committedDate": "2020-10-19T19:43:18Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "committedDate": "2020-10-19T20:56:53Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2528b691f99fe3402fc29d64b5a1d3f70c6c37b", "committedDate": "2020-10-19T20:56:53Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "committedDate": "2020-10-19T21:24:47Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3e2317a7ff8c5076b2184edc9658f62da1fb7ce8", "committedDate": "2020-10-19T21:24:47Z", "message": "Add group-based CLI auth"}, "afterCommit": {"oid": "f8678849032967313278ea228d71c79948f11b34", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f8678849032967313278ea228d71c79948f11b34", "committedDate": "2020-10-19T21:48:09Z", "message": "Add group-based CLI auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTg5NjI4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-513989628", "createdAt": "2020-10-21T17:15:20Z", "commit": {"oid": "73a14520ee994e2d7806eafc1c20482a751e11bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNToyMFrOHl3J3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNToyMFrOHl3J3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2MzAwNg==", "bodyText": "use the permissions setting ability of Platform instead", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509463006", "createdAt": "2020-10-21T17:15:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +158,145 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n+\n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n \n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73a14520ee994e2d7806eafc1c20482a751e11bb"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzOTkwMTkz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-513990193", "createdAt": "2020-10-21T17:16:06Z", "commit": {"oid": "73a14520ee994e2d7806eafc1c20482a751e11bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNjowNlrOHl3MqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoxNjowNlrOHl3MqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2MzcyMQ==", "bodyText": "don't do this yourself. Use Platform", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509463721", "createdAt": "2020-10-21T17:16:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +158,145 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n+\n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n \n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        ipcInfoFile.setReadable(false, false);\n+        ipcInfoFile.setReadable(true, true);\n+        ipcInfoFile.setWritable(true, true);\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73a14520ee994e2d7806eafc1c20482a751e11bb"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc20d7785c4064c1c58945f805aef09c2713964c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc20d7785c4064c1c58945f805aef09c2713964c", "committedDate": "2020-10-21T18:27:30Z", "message": "Add group-based CLI auth"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73a14520ee994e2d7806eafc1c20482a751e11bb", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/73a14520ee994e2d7806eafc1c20482a751e11bb", "committedDate": "2020-10-21T16:26:56Z", "message": "Merge branch 'master' into cli-auth"}, "afterCommit": {"oid": "fe65bb53a6fde4d7e30d029607df05841b58943f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe65bb53a6fde4d7e30d029607df05841b58943f", "committedDate": "2020-10-21T18:27:30Z", "message": "Handle file permissions in Platform utils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471b264367920873eaa80ddef30da287e03c1b12", "committedDate": "2020-10-21T20:12:48Z", "message": "Handle file permissions in Platform utils"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe65bb53a6fde4d7e30d029607df05841b58943f", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe65bb53a6fde4d7e30d029607df05841b58943f", "committedDate": "2020-10-21T18:27:30Z", "message": "Handle file permissions in Platform utils"}, "afterCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/471b264367920873eaa80ddef30da287e03c1b12", "committedDate": "2020-10-21T20:12:48Z", "message": "Handle file permissions in Platform utils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTkxMTMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-514191131", "createdAt": "2020-10-21T21:14:25Z", "commit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMToxNDoyNVrOHmFzCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMToyMDowM1rOHmGFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMjkyMA==", "bodyText": "requestingServiceName for k-v", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509702920", "createdAt": "2020-10-21T21:14:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +96,41 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    private void authenticateRequestsForExternalClient(String requestingAuthToken) throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMzU0Nw==", "bodyText": "don't set withParentsNeedsToKnow, just remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509703547", "createdAt": "2020-10-21T21:15:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/AuthenticationHandler.java", "diffHunk": "@@ -103,6 +96,41 @@ private String generateAuthenticationToken(String clientIdentifier) {\n         }\n     }\n \n+    private void authenticateRequestsForExternalClient(String requestingAuthToken) throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service to register/revoke external client token\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+    }\n+\n+    /**\n+     * Revoke an auth token for an external client which is not part of Greengrass. Only authenticated EG service can\n+     * revoke such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param authTokenToRevoke The auth token to revoke\n+     * @return true if authTokenToRevoke existed and is now removed, false if authTokenToRevoke does not exist.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public boolean revokeAuthenticationTokenForExternalClient(String requestingAuthToken, String authTokenToRevoke)\n+            throws UnauthenticatedException {\n+        authenticateRequestsForExternalClient(requestingAuthToken);\n+        return revokeAuthenticationToken(authTokenToRevoke);\n+    }\n+\n+    private boolean revokeAuthenticationToken(String authTokenToRevoke) {\n+        Topic tokenTopic = config.lookup(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY, authTokenToRevoke);\n+        if (tokenTopic == null) {\n+            return false;\n+        }\n+        tokenTopic.withParentNeedsToKnow(false).remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNDQzMA==", "bodyText": "do not do this. Just let it throw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509704430", "createdAt": "2020-10-21T21:16:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTA4MA==", "bodyText": "no getOnce when using coerce", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705080", "createdAt": "2020-10-21T21:16:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTM5OQ==", "bodyText": "can or should any of this stuff be moved into platform support?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705399", "createdAt": "2020-10-21T21:17:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNTc4Mw==", "bodyText": "space before works or after authentication.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509705783", "createdAt": "2020-10-21T21:17:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNjM4MA==", "bodyText": "I'm not sure if filePermission has a reasonable toString, you may want to add @ToString to it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509706380", "createdAt": "2020-10-21T21:18:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNjcwMw==", "bodyText": "use filePath.toFile()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509706703", "createdAt": "2020-10-21T21:18:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzIxNg==", "bodyText": "use Files.delete which can give proper exceptions", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509707216", "createdAt": "2020-10-21T21:19:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());\n+    }\n+\n+    private String getAuthClientIdentifier(String clientId) {\n+        return String.format(GREENGRASS_CLI_CLIENT_ID_FMT, clientId);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"},\n+            justification = \"File to be deleted should exist\")\n+    private synchronized void revokeOutdatedAuthTokens(Path authTokenDir) throws UnauthenticatedException {\n+        for (Map.Entry<String, String> entry : clientIdToAuthToken.entrySet()) {\n+            authenticationHandler.revokeAuthenticationTokenForExternalClient(\n+                    Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), entry.getValue());\n+        }\n+        clientIdToAuthToken.clear();\n+        File[] allContents = authTokenDir.toFile().listFiles();\n+        if (allContents != null) {\n+            for (File file : allContents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwNzYzNA==", "bodyText": "why not just use Utils.deleteFileRecursively", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#discussion_r509707634", "createdAt": "2020-10-21T21:20:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/modules/CLIService.java", "diffHunk": "@@ -138,39 +155,138 @@ protected void startup() {\n             logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n                     .setCause(e)\n                     .log(\"Failed to create cli_ipc_info file\");\n+            reportState(State.ERRORED);\n+        } catch (InterruptedException e) {\n+            requestStop();\n         }\n     }\n \n-    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n-            justification = \"File is created in the same method\")\n-    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n-    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+    @Override\n+    protected void shutdown() {\n \n+    }\n+\n+    String getClientIdForGroup(int groupId) {\n+        return GROUP_CLIENT_ID_PREFIX + groupId;\n+    }\n+\n+    Group getGroup(String posixGroup) throws IOException {\n+        return Platform.getInstance().getGroup(posixGroup);\n+    }\n+\n+    private synchronized void generateCliIpcInfo() throws UnauthenticatedException, IOException, InterruptedException {\n+        // TODO: replace with the new IPC domain socket path\n         if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n             logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n             return;\n         }\n \n+        Path authTokenDir = kernel.getNucleusPaths().cliIpcInfoPath();\n+        revokeOutdatedAuthTokens(authTokenDir);\n+\n+        if (Exec.isWindows) {\n+            // TODO support windows group permissions\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+\n+        Topic authorizedPosixGroups = config.find(PARAMETERS_CONFIG_KEY, posixGroups);\n+        if (authorizedPosixGroups == null) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        String posixGroups = Coerce.toString(authorizedPosixGroups.getOnce());\n+        if (posixGroups == null || posixGroups.length() == 0) {\n+            generateCliIpcInfoForEffectiveUser(authTokenDir);\n+            return;\n+        }\n+        for (String posixGroup : posixGroups.split(\",\")) {\n+            Group group;\n+            try {\n+                group = getGroup(posixGroup);\n+            } catch (NumberFormatException | IOException e) {\n+                logger.atError().kv(\"posixGroup\", posixGroup).log(\"Failed to get group ID\", e);\n+                continue;\n+            }\n+            generateCliIpcInfoForPosixGroup(group, authTokenDir);\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    private synchronized void generateCliIpcInfoForEffectiveUser(Path directory)\n+            throws UnauthenticatedException, IOException, InterruptedException {\n+        String defaultClientId = USER_CLIENT_ID_PREFIX + Platform.getInstance().getEffectiveUID();\n+        File ipcInfoFile = generateCliIpcInfoForClient(defaultClientId, directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+        Platform.getInstance().setPermissions(DEFAULT_FILE_PERMISSION, ipcInfoFile.toPath());\n+    }\n+\n+    private synchronized void generateCliIpcInfoForPosixGroup(Group group, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        File ipcInfoFile = generateCliIpcInfoForClient(getClientIdForGroup(group.getId()), directory);\n+        if (ipcInfoFile == null) {\n+            return;\n+        }\n+\n+        FileSystemPermission filePermission = new FileSystemPermission(null, group.getName(), true, true, false,\n+                true, false, false, false, false, false);\n+        try {\n+            Platform.getInstance().setPermissions(filePermission, ipcInfoFile.toPath());\n+        } catch (IOException e) {\n+            logger.atError().kv(\"file\", ipcInfoFile.toPath()).kv(\"permission\", filePermission)\n+                    .kv(\"groupOwner\", group.getName()).log(\"Failed to set up posix file permissions and group owner. \"\n+                    + \"Admin may have to manually update the file permission so that CLI authentication\"\n+                    + \"works as intended\", e);\n+        }\n+    }\n+\n+    private synchronized File generateCliIpcInfoForClient(String clientId, Path directory)\n+            throws UnauthenticatedException, IOException {\n+        if (clientIdToAuthToken.containsKey(clientId)) {\n+            // Duplicate user input. No need to override auth token.\n+            return null;\n+        }\n+\n         String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n-                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n-                GREENGRASS_CLI);\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), getAuthClientIdentifier(clientId));\n+\n+        clientIdToAuthToken.put(clientId, cliAuthToken);\n+\n         Map<String, String> ipcInfo = new HashMap<>();\n         ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n-\n         //TODO: Change the URL as per the new IPC\n         ipcInfo.put(SOCKET_URL, Coerce.toString(\n                 config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n \n-        Path filePath = kernel.getNucleusPaths().rootPath().resolve(CLI_IPC_INFO_FILENAME);\n+        Path filePath = directory.resolve(clientId);\n         Files.write(filePath, OBJECT_MAPPER.writeValueAsString(ipcInfo)\n                 .getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n-        // TODO: Add the users in configuration to a group and add group permissions for file on linux, windows and\n-        //  other platforms.\n-        File ipcInfoFile = new File(filePath.toString());\n         ipcInfo.clear();\n-        ipcInfoFile.setReadable(false, false);\n-        ipcInfoFile.setReadable(true, true);\n-        ipcInfoFile.setWritable(true, true);\n+        return new File(filePath.toString());\n+    }\n+\n+    private String getAuthClientIdentifier(String clientId) {\n+        return String.format(GREENGRASS_CLI_CLIENT_ID_FMT, clientId);\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"},\n+            justification = \"File to be deleted should exist\")\n+    private synchronized void revokeOutdatedAuthTokens(Path authTokenDir) throws UnauthenticatedException {\n+        for (Map.Entry<String, String> entry : clientIdToAuthToken.entrySet()) {\n+            authenticationHandler.revokeAuthenticationTokenForExternalClient(\n+                    Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)), entry.getValue());\n+        }\n+        clientIdToAuthToken.clear();\n+        File[] allContents = authTokenDir.toFile().listFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "471b264367920873eaa80ddef30da287e03c1b12"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad", "committedDate": "2020-10-21T22:05:36Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjI0OTky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-514224992", "createdAt": "2020-10-21T22:14:34Z", "commit": {"oid": "2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjMyMzAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-514232303", "createdAt": "2020-10-21T22:23:47Z", "commit": {"oid": "2e94e8e544a67ee151a2f9d3ab915fb3bd13e1ad"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6512a19756d3b2c705be236391e7a5c40f0f423e", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6512a19756d3b2c705be236391e7a5c40f0f423e", "committedDate": "2020-10-21T22:24:59Z", "message": "fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjcwMzUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-514270353", "createdAt": "2020-10-21T23:59:43Z", "commit": {"oid": "6512a19756d3b2c705be236391e7a5c40f0f423e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjcwMzc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/508#pullrequestreview-514270374", "createdAt": "2020-10-21T23:59:48Z", "commit": {"oid": "6512a19756d3b2c705be236391e7a5c40f0f423e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3096, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}