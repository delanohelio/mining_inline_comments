{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzQwMTU3", "number": 91, "title": "Graceful shutdown of services in kernel shutdown", "bodyText": "Description of changes:\nOn kernel shutdown, the services will be shutdown respecting dependencies. The change makes sure that a service will move to finish when all its dependers have exited.\nSay\nmain depends on A and A depends on B. A will wait for main to shutdown and B will wait for A to shutdown.\nWhy is this change necessary:\nWithout the change, all services will shutdown simultaneously.  A service might not be able to shutdown gracefully if all its dependencies exit before itself.\nHow was this change tested:\nAdded test to verify that services are shutdown in reverse dependency order and every service wait for all its dependers to shutdown.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-03T04:41:59Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91", "merged": true, "mergeCommit": {"oid": "8ff8e69271b8ca24af4dc902744e63d2129d179a"}, "closed": true, "closedAt": "2020-03-04T22:26:25Z", "author": {"login": "fahadmohammed01"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ6qvrgH2gAyMzgyNzQwMTU3OjY2MWM4NDM5ZTdhZjQyOGRkMmQxZDJkZjM5YmEyMDJlMDhkZWI1ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKenQGgFqTM2OTE2OTYwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "661c8439e7af428dd2d1d2df39ba202e08deb5f5", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/661c8439e7af428dd2d1d2df39ba202e08deb5f5", "committedDate": "2020-03-03T04:32:35Z", "message": "changes for gracefull kernel shutdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzAxMTAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-367701102", "createdAt": "2020-03-03T04:50:28Z", "commit": {"oid": "661c8439e7af428dd2d1d2df39ba202e08deb5f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNDo1MDoyOVrOFw4RUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNDo1MjowM1rOFw4SuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5NzkwNg==", "bodyText": "Unused?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r386797906", "createdAt": "2020-03-03T04:50:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -3,6 +3,9 @@\n \n package com.aws.iot.evergreen.dependency;\n \n+import javax.print.attribute.standard.Finishings;\n+import java.util.concurrent.BrokenBarrierException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661c8439e7af428dd2d1d2df39ba202e08deb5f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5ODAxMQ==", "bodyText": "Use log interpolation instead of concatenation.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r386798011", "createdAt": "2020-03-03T04:50:56Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -63,10 +67,12 @@ public void postInject() {\n      * @return response for setting state\n      */\n     public LifecycleGenericResponse reportState(StateChangeRequest stateChangeRequest, ConnectionContext context) {\n+\n         State s = State.valueOf(stateChangeRequest.getState());\n         Optional<EvergreenService> service =\n                 Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n \n+        log.info(service.get().getName() + \" reported state :\" + s.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661c8439e7af428dd2d1d2df39ba202e08deb5f5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5ODI2NA==", "bodyText": "Get rid of this and just use the keyset of the dependencies map.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r386798264", "createdAt": "2020-03-03T04:52:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -53,10 +53,12 @@\n \n     public final Topics config;\n     public Context context;\n-\n+    // Services that this service depend on\n     protected final ConcurrentHashMap<EvergreenService, State> dependencies = new ConcurrentHashMap<>();\n-\n+    // Services that depend on this service\n+    protected final List<EvergreenService> dependers = new CopyOnWriteArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "661c8439e7af428dd2d1d2df39ba202e08deb5f5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3de061042384b21b662deaed4a3d3780ccdfca97", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3de061042384b21b662deaed4a3d3780ccdfca97", "committedDate": "2020-03-03T04:57:04Z", "message": "fixed check-style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bb443a4a2a677a4d3db33bf4a833f9404243907", "committedDate": "2020-03-03T05:07:31Z", "message": "addressed PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjc2MzE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368276319", "createdAt": "2020-03-03T19:51:26Z", "commit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1MToyNlrOFxUN5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1MToyNlrOFxUN5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NTc4Mw==", "bodyText": "I feel this can be in L665 after requestStop()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387255783", "createdAt": "2020-03-03T19:51:26Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -651,12 +653,22 @@ protected void shutdown() {\n \n     @Override\n     public void close() {\n-        requestStop();\n         Periodicity t = periodicityInformation;\n         if (t != null) {\n             t.shutdown();\n         }\n+        try {\n+            waitForDependersToExit();\n+        } catch (InterruptedException e) {\n+            logger.error(\"Interrupted waiting for dependers to exit\");\n+        }\n+        requestStop();\n+    }\n \n+    /**\n+     * Shutdown the thread executing startStateTransition().\n+     */\n+    public void shutDownStateMachine() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjc3NjAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368277603", "createdAt": "2020-03-03T19:53:20Z", "commit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1MzoyMFrOFxURtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo1NDo0N1rOFxUUrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1Njc1Nw==", "bodyText": "Isn't this conflicting L738?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387256757", "createdAt": "2020-03-03T19:53:20Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -704,11 +716,46 @@ public synchronized void addDependency(EvergreenService dependentEvergreenServic\n         });\n     }\n \n+    private void addDepender(EvergreenService dependerEvergreenService) {\n+        dependers.add(dependerEvergreenService);\n+        dependerEvergreenService.getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+            synchronized (dependersExitedLock) {\n+                if (dependersExited()) {\n+                    dependersExitedLock.notifyAll();\n+                }\n+            }\n+        });\n+    }\n+\n     private String serializeDependencyList(ConcurrentHashMap<EvergreenService, State> dependencies) {\n         return dependencies.entrySet().stream().map((entry) -> entry.getKey().getName() + \":\" + entry.getValue())\n                 .collect(Collectors.joining(\",\"));\n     }\n \n+    private void waitForDependersToExit() throws InterruptedException {\n+        synchronized (dependersExitedLock) {\n+            while (!dependersExited()) {\n+                logger.atDebug().setEventType(\"service-waiting-for-depender-to-finish\").log();\n+                dependersExitedLock.wait();\n+            }\n+        }\n+    }\n+\n+    private boolean dependersExited() {\n+        Optional<EvergreenService> dependerService =\n+                dependers.stream().filter(d -> !dependerExited(d)).findAny();\n+        if (dependerService.isPresent()) {\n+            logger.atDebug().setEventType(\"continue-waiting-for-dependencies\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NzUxOQ==", "bodyText": "No need to make change here. Given that close() will clean the wait all tasks on publishQueue exit, you can just call executorService.shutdown here()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387257519", "createdAt": "2020-03-03T19:54:47Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -460,30 +462,45 @@ public void shutdown() {\n      *\n      * @param timeoutSeconds Timeout in seconds\n      */\n+    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\")\n     public void shutdown(int timeoutSeconds) {\n         if (broken) {\n             return;\n         }\n+        if (!isShutdownInitiated.compareAndSet(false, true)) {\n+            logger.info(\"Shutdown already initiated, returning...\");\n+            return;\n+        }\n         close(tlog);\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n+            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n+\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n                 try {\n                     d[i].close();\n+                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+                        if (((State) t.getOnce()).isTerminalState()) {\n+                            allServicesExitedLatch.countDown();\n+                        }\n+                    });\n                 } catch (Throwable t) {\n                     logger.atError().setEventType(\"service-shutdown-error\").addKeyValue(\"serviceName\", d[i].getName())\n                             .setCause(t).log();\n                 }\n             }\n \n+            allServicesExitedLatch.await(timeoutSeconds, TimeUnit.SECONDS);\n             // Wait for tasks in the executor to end.\n             ExecutorService executorService = context.get(ExecutorService.class);\n             this.context.runOnPublishQueueAndWait(() -> {\n                 executorService.shutdown();\n                 logger.atInfo().setEventType(\"executor-service-shutdown-initiated\").log();\n             });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb443a4a2a677a4d3db33bf4a833f9404243907"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a49e3d042e11bd55e4d26052d22895c1c1565152", "committedDate": "2020-03-03T21:18:08Z", "message": "removed storing dependers in a list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDE5NDUy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368419452", "createdAt": "2020-03-04T00:17:40Z", "commit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoxNzo0MFrOFxbUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoxNzo0MFrOFxbUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MjExMQ==", "bodyText": "[nit]\nYou don't need to call toString() yourself, you can just pass the object.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387372111", "createdAt": "2020-03-04T00:17:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -63,10 +67,12 @@ public void postInject() {\n      * @return response for setting state\n      */\n     public LifecycleGenericResponse reportState(StateChangeRequest stateChangeRequest, ConnectionContext context) {\n+\n         State s = State.valueOf(stateChangeRequest.getState());\n         Optional<EvergreenService> service =\n                 Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n \n+        log.info(\"{} reported state : {}\", service.get().getName(), s.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDE5ODM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368419834", "createdAt": "2020-03-04T00:18:41Z", "commit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoxODo0MlrOFxbVmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoxODo0MlrOFxbVmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MjQ0Mw==", "bodyText": "Since this is only called from Kernel, can we have all this dependency ordering logic just be part of the kernel shutdown, instead of putting it into all the services? Since the services themselves will never use this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387372443", "createdAt": "2020-03-04T00:18:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -651,12 +652,22 @@ protected void shutdown() {\n \n     @Override\n     public void close() {\n-        requestStop();\n         Periodicity t = periodicityInformation;\n         if (t != null) {\n             t.shutdown();\n         }\n+        try {\n+            waitForDependersToExit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDIwMjk3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368420297", "createdAt": "2020-03-04T00:20:01Z", "commit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoyMDowMVrOFxbXEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDoyMDowMVrOFxbXEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MjgxOQ==", "bodyText": "public?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387372819", "createdAt": "2020-03-04T00:20:01Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelShutdownTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.WhatHappened;\n+import com.aws.iot.evergreen.dependency.State;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class KernelShutdownTest {\n+\n+    public static Kernel kernel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98bb7853a29196dc2b524fdf19bdbabdf77a03c8", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/98bb7853a29196dc2b524fdf19bdbabdf77a03c8", "committedDate": "2020-03-04T01:26:09Z", "message": "addresses pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85c1f17fe57d1bf606bdc043380f3cdb8a85c63", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c85c1f17fe57d1bf606bdc043380f3cdb8a85c63", "committedDate": "2020-03-04T02:40:31Z", "message": "updated test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462a67555cc18cfa345e4eb6349ace87eb0ca285", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/462a67555cc18cfa345e4eb6349ace87eb0ca285", "committedDate": "2020-03-04T02:50:30Z", "message": "Merge branch 'master' into gracefully_shutdown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTMyMjMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-368532231", "createdAt": "2020-03-04T06:33:28Z", "commit": {"oid": "462a67555cc18cfa345e4eb6349ace87eb0ca285"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjozMzoyOFrOFxhZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjozMzoyOFrOFxhZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3MTY4OQ==", "bodyText": "This worries me because we subscribe, but never delete the subscription. Running over a long period of time, our subscriber will pile up and that may be a difficult problem for us.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387471689", "createdAt": "2020-03-04T06:33:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -709,6 +712,52 @@ private String serializeDependencyList(ConcurrentHashMap<EvergreenService, State\n                 .collect(Collectors.joining(\",\"));\n     }\n \n+    private List<EvergreenService> getDependers() {\n+        List<EvergreenService> dependers = new ArrayList<>();\n+        Kernel kernel = context.get(Kernel.class);\n+        for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n+            boolean isDepender = evergreenService.dependencies.keySet().stream().anyMatch(d -> d.equals(this));\n+            if (isDepender) {\n+                dependers.add(evergreenService);\n+            }\n+            // orderedDependencies sorts services based on dependency order with main as last,\n+            // therefore all dependers will be present before the service itself in the list of orderedDependencies\n+            if (evergreenService.equals(this)) {\n+                break;\n+            }\n+        }\n+        return dependers;\n+    }\n+\n+    private void waitForDependersToExit() throws InterruptedException {\n+        getDependers().forEach(dependerEvergreenService ->\n+                dependerEvergreenService.getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+                    synchronized (dependersExitedLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462a67555cc18cfa345e4eb6349ace87eb0ca285"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/58dd58412d5f961815ea0b641b6d8929fbac81f9", "committedDate": "2020-03-04T18:35:47Z", "message": "addressed PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg1MzUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369085350", "createdAt": "2020-03-04T20:06:51Z", "commit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowNjo1MVrOFx74nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowNjo1MVrOFx74nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwNTY5Mw==", "bodyText": "Instead of using the state topic (which we can't unsubscribe from right now), can we use the global context listener, which does have an unsubscribe method?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387905693", "createdAt": "2020-03-04T20:06:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -709,6 +713,56 @@ private String serializeDependencyList(ConcurrentHashMap<EvergreenService, State\n                 .collect(Collectors.joining(\",\"));\n     }\n \n+    private List<EvergreenService> getDependers() {\n+        List<EvergreenService> dependers = new ArrayList<>();\n+        Kernel kernel = context.get(Kernel.class);\n+        for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n+            boolean isDepender = evergreenService.dependencies.keySet().stream().anyMatch(d -> d.equals(this));\n+            if (isDepender) {\n+                dependers.add(evergreenService);\n+            }\n+            // orderedDependencies sorts services based on dependency order with main as last,\n+            // therefore all dependers will be present before the service itself in the list of orderedDependencies\n+            if (evergreenService.equals(this)) {\n+                break;\n+            }\n+        }\n+        return dependers;\n+    }\n+\n+    private void waitForDependersToExit() throws InterruptedException {\n+        Subscriber dependerExitWatcher = (WhatHappened what, Topic t) -> {\n+            synchronized (dependersExitedLock) {\n+                if (dependersExited()) {\n+                    dependersExitedLock.notifyAll();\n+                }\n+            }\n+        };\n+        // subscribing to depender state changes\n+        getDependers().forEach(dependerEvergreenService ->\n+                dependerEvergreenService.getStateTopic().subscribe(dependerExitWatcher));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg4MDQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369088045", "createdAt": "2020-03-04T20:10:58Z", "commit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg4ODU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369088856", "createdAt": "2020-03-04T20:12:12Z", "commit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMjoxM1rOFx8DHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxNzoxMlrOFx8MMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODM4MQ==", "bodyText": "It's expensive to have getDependers() called every time in a listener's synchronized block. You should call getDependers() once in L742 and use the result listeners.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387908381", "createdAt": "2020-03-04T20:12:13Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -709,6 +713,56 @@ private String serializeDependencyList(ConcurrentHashMap<EvergreenService, State\n                 .collect(Collectors.joining(\",\"));\n     }\n \n+    private List<EvergreenService> getDependers() {\n+        List<EvergreenService> dependers = new ArrayList<>();\n+        Kernel kernel = context.get(Kernel.class);\n+        for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n+            boolean isDepender = evergreenService.dependencies.keySet().stream().anyMatch(d -> d.equals(this));\n+            if (isDepender) {\n+                dependers.add(evergreenService);\n+            }\n+            // orderedDependencies sorts services based on dependency order with main as last,\n+            // therefore all dependers will be present before the service itself in the list of orderedDependencies\n+            if (evergreenService.equals(this)) {\n+                break;\n+            }\n+        }\n+        return dependers;\n+    }\n+\n+    private void waitForDependersToExit() throws InterruptedException {\n+        Subscriber dependerExitWatcher = (WhatHappened what, Topic t) -> {\n+            synchronized (dependersExitedLock) {\n+                if (dependersExited()) {\n+                    dependersExitedLock.notifyAll();\n+                }\n+            }\n+        };\n+        // subscribing to depender state changes\n+        getDependers().forEach(dependerEvergreenService ->\n+                dependerEvergreenService.getStateTopic().subscribe(dependerExitWatcher));\n+        synchronized (dependersExitedLock) {\n+            while (!dependersExited()) {\n+                logger.atDebug().setEventType(\"service-waiting-for-depender-to-finish\").log();\n+                dependersExitedLock.wait();\n+            }\n+        }\n+        // removing state change watchers\n+        getDependers().forEach(dependerEvergreenService ->\n+                dependerEvergreenService.getStateTopic().remove(dependerExitWatcher));\n+    }\n+\n+    private boolean dependersExited() {\n+        Optional<EvergreenService> dependerService =\n+                getDependers().stream().filter(d -> !d.getState().isTerminalState()).findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwOTg5MA==", "bodyText": "NIT: close() is blocking on waitDependerQuit(). maybe you should either: 1. make close() unblocking . 2. put d[i].close(); in a separate thread", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387909890", "createdAt": "2020-03-04T20:15:23Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -460,30 +462,44 @@ public void shutdown() {\n      *\n      * @param timeoutSeconds Timeout in seconds\n      */\n+    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\")\n     public void shutdown(int timeoutSeconds) {\n         if (broken) {\n             return;\n         }\n+        if (!isShutdownInitiated.compareAndSet(false, true)) {\n+            logger.info(\"Shutdown already initiated, returning...\");\n+            return;\n+        }\n         close(tlog);\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n+            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n+\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n                 try {\n                     d[i].close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMDcwNQ==", "bodyText": "waitForDependersToExit() is blocking, but requestStop() doesn't block until lifecycle exit. Maybe add a logic here to wait until lifecycle thread exit.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387910705", "createdAt": "2020-03-04T20:17:12Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -651,13 +652,17 @@ protected void shutdown() {\n \n     @Override\n     public void close() {\n-        requestStop();\n         Periodicity t = periodicityInformation;\n         if (t != null) {\n             t.shutdown();\n         }\n-\n-        closed.set(true);\n+        try {\n+            waitForDependersToExit();\n+        } catch (InterruptedException e) {\n+            logger.error(\"Interrupted waiting for dependers to exit\");\n+        }\n+        requestStop();\n+        isClosed.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89a110561b38fd813b8a9522e4a3b80a030ee0a1", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/89a110561b38fd813b8a9522e4a3b80a030ee0a1", "committedDate": "2020-03-04T21:18:35Z", "message": "reduce calls to find dependers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDk1MDg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369095088", "createdAt": "2020-03-04T20:22:31Z", "commit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoyMjozMVrOFx8Vxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToyMTo0OVrOFx-FCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMzE1OA==", "bodyText": "static final?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Logger log = LogManager.getLogger(LifecycleIPCAgent.class);\n          \n          \n            \n                private static final Logger log = LogManager.getLogger(LifecycleIPCAgent.class);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387913158", "createdAt": "2020-03-04T20:22:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -40,6 +42,8 @@\n     @Inject\n     private ExecutorService executor;\n \n+    private Logger log = LogManager.getLogger(LifecycleIPCAgent.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxNDA0Mg==", "bodyText": "Could empty Optional cause a problem here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387914042", "createdAt": "2020-03-04T20:24:21Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -63,10 +67,12 @@ public void postInject() {\n      * @return response for setting state\n      */\n     public LifecycleGenericResponse reportState(StateChangeRequest stateChangeRequest, ConnectionContext context) {\n+\n         State s = State.valueOf(stateChangeRequest.getState());\n         Optional<EvergreenService> service =\n                 Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n \n+        log.info(\"{} reported state : {}\", service.get().getName(), s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyODczMA==", "bodyText": "Good catch!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387928730", "createdAt": "2020-03-04T20:55:13Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/ipc/IPCAwareServicesTest.java", "diffHunk": "@@ -18,8 +18,6 @@\n \n     @BeforeEach\n     public void setup() {\n-        // starting daemon\n-        CountDownLatch OK = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjA2OQ==", "bodyText": "+1 on moving this logic out/up. I think it will simplify the control flow if we move this logic to an upper level. Each service just knows how to close itself while the controller, Kernel or DeploymentService, handles the ordering/waiting logic between calling close on each service, providing better isolation and independence.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387936069", "createdAt": "2020-03-04T21:10:10Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -651,12 +652,22 @@ protected void shutdown() {\n \n     @Override\n     public void close() {\n-        requestStop();\n         Periodicity t = periodicityInformation;\n         if (t != null) {\n             t.shutdown();\n         }\n+        try {\n+            waitForDependersToExit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3MjQ0Mw=="}, "originalCommit": {"oid": "a49e3d042e11bd55e4d26052d22895c1c1565152"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNzU2Ng==", "bodyText": "[Minor] This adds up to 120 seconds if failing... We could fail faster I guess?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387937566", "createdAt": "2020-03-04T21:13:11Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelShutdownTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.WhatHappened;\n+import com.aws.iot.evergreen.dependency.State;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class KernelShutdownTest {\n+\n+    private static Kernel kernel;\n+\n+    @BeforeEach\n+    public void setup() {\n+        kernel = new Kernel();\n+        String tdir = System.getProperty(\"user.dir\");\n+        kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\", KernelShutdownTest.class.getResource(\"long_running_services.yaml\").toString());\n+        kernel.launch();\n+    }\n+\n+    @Test\n+    public void WHEN_kernel_shutdown_THEN_services_are_shutdown_in_reverse_dependecy_order() throws InterruptedException {\n+\n+        CountDownLatch mainRunningLatch = new CountDownLatch(1);\n+        kernel.getMain().getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+            if (((State) t.getOnce()).isRunning()) {\n+                mainRunningLatch.countDown();\n+            }\n+        });\n+        //wait for main to run\n+        assertTrue(mainRunningLatch.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown(60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MDAzNw==", "bodyText": "This gave me the impression of State machine's Terminal State definition and Errored and Finished technically are not.\nI think what we need here is something like isClosable ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387940037", "createdAt": "2020-03-04T21:18:34Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -92,4 +92,8 @@ public boolean preceeds(State other) {\n     public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n+\n+    public boolean isTerminalState() {\n+        return this.equals(ERRORED) || this.equals(BROKEN) || this.equals(FINISHED);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0MTY0Mw==", "bodyText": "Very well verified! \ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#discussion_r387941643", "createdAt": "2020-03-04T21:21:49Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelShutdownTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.WhatHappened;\n+import com.aws.iot.evergreen.dependency.State;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class KernelShutdownTest {\n+\n+    private static Kernel kernel;\n+\n+    @BeforeEach\n+    public void setup() {\n+        kernel = new Kernel();\n+        String tdir = System.getProperty(\"user.dir\");\n+        kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\", KernelShutdownTest.class.getResource(\"long_running_services.yaml\").toString());\n+        kernel.launch();\n+    }\n+\n+    @Test\n+    public void WHEN_kernel_shutdown_THEN_services_are_shutdown_in_reverse_dependecy_order() throws InterruptedException {\n+\n+        CountDownLatch mainRunningLatch = new CountDownLatch(1);\n+        kernel.getMain().getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+            if (((State) t.getOnce()).isRunning()) {\n+                mainRunningLatch.countDown();\n+            }\n+        });\n+        //wait for main to run\n+        assertTrue(mainRunningLatch.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown(60);\n+\n+        List<EvergreenService> genericExternalServices = kernel.orderedDependencies().stream()\n+                .filter(e -> e instanceof GenericExternalService).collect(Collectors.toList());\n+\n+        assertTrue(genericExternalServices.stream().allMatch(e -> e.getState().isTerminalState()));\n+\n+        //sorting genericExternalServices in descending order based on when they reached terminal state\n+        Collections.sort(genericExternalServices, (s1, s2) ->\n+                Long.compare(s1.getStateTopic().getModtime(), s1.getStateTopic().getModtime()));\n+\n+        // service should moved to terminal state based on dependency order\n+        assertEquals(\"main\", genericExternalServices.get(2).getName());\n+        assertEquals(\"sleeperA\", genericExternalServices.get(1).getName());\n+        assertEquals(\"sleeperB\", genericExternalServices.get(0).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58dd58412d5f961815ea0b641b6d8929fbac81f9"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7251fe87cb49cf2d4f205686b35fe31ec8013fbc", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7251fe87cb49cf2d4f205686b35fe31ec8013fbc", "committedDate": "2020-03-04T22:12:18Z", "message": "minor refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTY5MTE1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369169115", "createdAt": "2020-03-04T22:24:25Z", "commit": {"oid": "7251fe87cb49cf2d4f205686b35fe31ec8013fbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTY5NjAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/91#pullrequestreview-369169602", "createdAt": "2020-03-04T22:25:21Z", "commit": {"oid": "7251fe87cb49cf2d4f205686b35fe31ec8013fbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}