{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjk5NTEw", "number": 706, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNjo1OVrOE7I-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowODozNFrOE8YK9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDQ4NjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNjo1OVrOH2nWuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjozNjo1OVrOH2nWuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyOTk0Nw==", "bodyText": "This is what I'm looking for. I will let you know Shagupta", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r527029947", "createdAt": "2020-11-19T16:36:59Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -168,15 +168,15 @@ private void retrieveArtifactInfo() throws PackageDownloadException, Interrupted\n \n     private URL getArtifactDownloadURL(ComponentIdentifier componentIdentifier, String artifactName)\n             throws PackageDownloadException {\n-        GetComponentVersionArtifactDeprecatedRequest getComponentArtifactRequest =\n-                new GetComponentVersionArtifactDeprecatedRequest().withArtifactName(artifactName)\n-                        .withComponentName(componentIdentifier.getName())\n-                        .withComponentVersion(componentIdentifier.getVersion().toString());\n+        // TODO : UPDATE_MODEL : use ARN when the PR to handle ARN is checked in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feea9a100db3684ed0b338a1244777291a4164ac"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTc5NDA1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoxMDoxMVrOH2z7DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyMDoxMlrOH20U_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNTg1Mg==", "bodyText": "What's FINALCP ? Final is always a dangerous word to have in a version, it never is.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r527235852", "createdAt": "2020-11-19T22:10:11Z", "author": {"login": "JamieHunter"}, "path": "pom.xml", "diffHunk": "@@ -101,7 +101,7 @@\n         <dependency>\n             <groupId>com.amazonaws.services</groupId>\n             <artifactId>evergreen</artifactId>\n-            <version>1.1.100</version>\n+            <version>1.0.0-FINALCP-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6c7a477f485349b06c2c2516c4b1eace9a0a2f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0MjQ5Mg==", "bodyText": "I meant to suggest that we're using finalized cloud models, but this is temporary, the SDK will need to come from the AWS SDK public maven repo ultimately. I can add a todo here for that, and if you have concerns still, I can republish with a different name to our internal s3 repo and use that", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r527242492", "createdAt": "2020-11-19T22:20:12Z", "author": {"login": "shaguptashaikh"}, "path": "pom.xml", "diffHunk": "@@ -101,7 +101,7 @@\n         <dependency>\n             <groupId>com.amazonaws.services</groupId>\n             <artifactId>evergreen</artifactId>\n-            <version>1.1.100</version>\n+            <version>1.0.0-FINALCP-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIzNTg1Mg=="}, "originalCommit": {"oid": "b6c7a477f485349b06c2c2516c4b1eace9a0a2f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzM5MDM2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo0ODoxOFrOH4c42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxOTo1MzoxM1rOH4dDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTYxMA==", "bodyText": "nit - do we need to assert like this? If it doesn't throw I guess we should be good?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528955610", "createdAt": "2020-11-23T19:48:18Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -204,9 +206,16 @@ static void afterAll() {\n         try {\n             List<ComponentIdentifier> allComponents = new ArrayList<>(Arrays.asList(componentsWithArtifactsInS3));\n             for (ComponentIdentifier component : allComponents) {\n-                DeleteComponentVersionDeprecatedResult result = ComponentServiceHelper\n-                        .deleteComponent(greengrassClient, component.getName(), component.getVersion().toString());\n-                assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+                String componentArn = componentArns.get(component);\n+                if (Utils.isEmpty(componentArn)) {\n+                    logger.atWarn().kv(\"component-name\", component.getName())\n+                            .kv(\"compoenent-version\", component.getVersion())\n+                            .log(\"No component arn found to make delete request for cleanup\");\n+                } else {\n+                    DeleteComponentResult result =\n+                            ComponentServiceTestHelper.deleteComponent(greengrassClient, componentArn);\n+                    assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dedb3c709f209cbdc17600fcda52795a9499c17"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1ODMzMw==", "bodyText": "Not sure, it was already like this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528958333", "createdAt": "2020-11-23T19:53:13Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -204,9 +206,16 @@ static void afterAll() {\n         try {\n             List<ComponentIdentifier> allComponents = new ArrayList<>(Arrays.asList(componentsWithArtifactsInS3));\n             for (ComponentIdentifier component : allComponents) {\n-                DeleteComponentVersionDeprecatedResult result = ComponentServiceHelper\n-                        .deleteComponent(greengrassClient, component.getName(), component.getVersion().toString());\n-                assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+                String componentArn = componentArns.get(component);\n+                if (Utils.isEmpty(componentArn)) {\n+                    logger.atWarn().kv(\"component-name\", component.getName())\n+                            .kv(\"compoenent-version\", component.getVersion())\n+                            .log(\"No component arn found to make delete request for cleanup\");\n+                } else {\n+                    DeleteComponentResult result =\n+                            ComponentServiceTestHelper.deleteComponent(greengrassClient, componentArn);\n+                    assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk1NTYxMA=="}, "originalCommit": {"oid": "7dedb3c709f209cbdc17600fcda52795a9499c17"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQzODUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowMTo1NFrOH4dV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNDoxOFrOH4duRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzA1Mg==", "bodyText": "Can be removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528963052", "createdAt": "2020-11-23T20:01:54Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "diffHunk": "@@ -80,19 +61,19 @@ ComponentContent resolveComponentVersion(String componentName, Semver localCandi\n                         .withArchitecture(platformResolver.getCurrentPlatform().get(PlatformResolver.ARCHITECTURE_KEY));\n         Map<String, String> versionRequirementsInString = versionRequirements.entrySet().stream()\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString()));\n-        ComponentCandidate candidate = new ComponentCandidate().withName(componentName)\n-                .withVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n+        ComponentCandidate candidate = new ComponentCandidate().withComponentName(componentName)\n+                .withComponentVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n                 .withVersionRequirements(versionRequirementsInString);\n-        ResolveComponentVersionsRequest request = new ResolveComponentVersionsRequest().withPlatform(platform)\n-                .withComponentCandidates(Collections.singletonList(candidate))\n-                // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n-                // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n-                // in server, so could have this hack now\n-                .withDeploymentConfigurationId(UUID.randomUUID().toString());\n-\n-        ResolveComponentVersionsResult result;\n+        ResolveComponentCandidatesRequest request = new ResolveComponentCandidatesRequest().withPlatform(platform)\n+                .withComponentCandidates(Collections.singletonList(candidate));\n+        // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n+        // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n+        // in server, so could have this hack now\n+        //.withDeploymentConfigurationId(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2OTI4Nw==", "bodyText": "I will do it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528969287", "createdAt": "2020-11-23T20:14:18Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "diffHunk": "@@ -80,19 +61,19 @@ ComponentContent resolveComponentVersion(String componentName, Semver localCandi\n                         .withArchitecture(platformResolver.getCurrentPlatform().get(PlatformResolver.ARCHITECTURE_KEY));\n         Map<String, String> versionRequirementsInString = versionRequirements.entrySet().stream()\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString()));\n-        ComponentCandidate candidate = new ComponentCandidate().withName(componentName)\n-                .withVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n+        ComponentCandidate candidate = new ComponentCandidate().withComponentName(componentName)\n+                .withComponentVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n                 .withVersionRequirements(versionRequirementsInString);\n-        ResolveComponentVersionsRequest request = new ResolveComponentVersionsRequest().withPlatform(platform)\n-                .withComponentCandidates(Collections.singletonList(candidate))\n-                // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n-                // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n-                // in server, so could have this hack now\n-                .withDeploymentConfigurationId(UUID.randomUUID().toString());\n-\n-        ResolveComponentVersionsResult result;\n+        ResolveComponentCandidatesRequest request = new ResolveComponentCandidatesRequest().withPlatform(platform)\n+                .withComponentCandidates(Collections.singletonList(candidate));\n+        // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n+        // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n+        // in server, so could have this hack now\n+        //.withDeploymentConfigurationId(UUID.randomUUID().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzA1Mg=="}, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQ0MDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowMjoyMFrOH4dW3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNDoyOVrOH4durw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzI5Mw==", "bodyText": "nit: should we call it gcs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528963293", "createdAt": "2020-11-23T20:02:20Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "diffHunk": "@@ -80,19 +61,19 @@ ComponentContent resolveComponentVersion(String componentName, Semver localCandi\n                         .withArchitecture(platformResolver.getCurrentPlatform().get(PlatformResolver.ARCHITECTURE_KEY));\n         Map<String, String> versionRequirementsInString = versionRequirements.entrySet().stream()\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString()));\n-        ComponentCandidate candidate = new ComponentCandidate().withName(componentName)\n-                .withVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n+        ComponentCandidate candidate = new ComponentCandidate().withComponentName(componentName)\n+                .withComponentVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n                 .withVersionRequirements(versionRequirementsInString);\n-        ResolveComponentVersionsRequest request = new ResolveComponentVersionsRequest().withPlatform(platform)\n-                .withComponentCandidates(Collections.singletonList(candidate))\n-                // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n-                // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n-                // in server, so could have this hack now\n-                .withDeploymentConfigurationId(UUID.randomUUID().toString());\n-\n-        ResolveComponentVersionsResult result;\n+        ResolveComponentCandidatesRequest request = new ResolveComponentCandidatesRequest().withPlatform(platform)\n+                .withComponentCandidates(Collections.singletonList(candidate));\n+        // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n+        // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n+        // in server, so could have this hack now\n+        //.withDeploymentConfigurationId(UUID.randomUUID().toString());\n+\n+        ResolveComponentCandidatesResult result;\n         try {\n-            result = clientFactory.getCmsClient().resolveComponentVersions(request);\n+            result = clientFactory.getCmsClient().resolveComponentCandidates(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2OTM5MQ==", "bodyText": "yeah. will do renaming in one shot", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528969391", "createdAt": "2020-11-23T20:14:29Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentServiceHelper.java", "diffHunk": "@@ -80,19 +61,19 @@ ComponentContent resolveComponentVersion(String componentName, Semver localCandi\n                         .withArchitecture(platformResolver.getCurrentPlatform().get(PlatformResolver.ARCHITECTURE_KEY));\n         Map<String, String> versionRequirementsInString = versionRequirements.entrySet().stream()\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString()));\n-        ComponentCandidate candidate = new ComponentCandidate().withName(componentName)\n-                .withVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n+        ComponentCandidate candidate = new ComponentCandidate().withComponentName(componentName)\n+                .withComponentVersion(localCandidateVersion == null ? null : localCandidateVersion.getValue())\n                 .withVersionRequirements(versionRequirementsInString);\n-        ResolveComponentVersionsRequest request = new ResolveComponentVersionsRequest().withPlatform(platform)\n-                .withComponentCandidates(Collections.singletonList(candidate))\n-                // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n-                // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n-                // in server, so could have this hack now\n-                .withDeploymentConfigurationId(UUID.randomUUID().toString());\n-\n-        ResolveComponentVersionsResult result;\n+        ResolveComponentCandidatesRequest request = new ResolveComponentCandidatesRequest().withPlatform(platform)\n+                .withComponentCandidates(Collections.singletonList(candidate));\n+        // TODO: [P41215565]: Switch back deploymentConfigurationId once it's removed from URL path\n+        // use UUID to avoid ARN complication in URL, deploymentConfigurationId is used for logging purpose\n+        // in server, so could have this hack now\n+        //.withDeploymentConfigurationId(UUID.randomUUID().toString());\n+\n+        ResolveComponentCandidatesResult result;\n         try {\n-            result = clientFactory.getCmsClient().resolveComponentVersions(request);\n+            result = clientFactory.getCmsClient().resolveComponentCandidates(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzI5Mw=="}, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQ1MjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowNjowMFrOH4deEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDoxNDo0OFrOH4dvcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NTEzOA==", "bodyText": "Should be able to delete the function.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528965138", "createdAt": "2020-11-23T20:06:00Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -235,7 +249,7 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n      */\n     List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2OTU4Nw==", "bodyText": "good point... I will try", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528969587", "createdAt": "2020-11-23T20:14:48Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -235,7 +249,7 @@ ComponentMetadata getPackageMetadata(@NonNull ComponentIdentifier pkgId) throws\n      */\n     List<ComponentMetadata> listAvailablePackageMetadata(@NonNull String packageName, @NonNull Requirement requirement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NTEzOA=="}, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzQ2MDM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowODozNFrOH4di7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDowODozNFrOH4di7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NjM4Mw==", "bodyText": "The exception should be renamed, and probably examine exception hierarchy.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/706#discussion_r528966383", "createdAt": "2020-11-23T20:08:34Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentStore.java", "diffHunk": "@@ -409,4 +429,102 @@ private static Semver parseVersionFromFileName(String filename) throws PackageLo\n         }\n     }\n \n+    /**\n+     * Saves recipe metadata to file. Overrides if the target file exists.\n+     *\n+     * @param componentIdentifier component id\n+     * @param recipeMetadata      metadata for the recipe\n+     * @throws PackageLoadingException when failed write recipe metadata to file system.\n+     */\n+    public void saveRecipeMetadata(ComponentIdentifier componentIdentifier, RecipeMetadata recipeMetadata)\n+            throws PackageLoadingException {\n+        File metadataFile = resolveRecipeMetadataFile(componentIdentifier);\n+\n+        try {\n+            SerializerFactory.getFailSafeJsonObjectMapper().writeValue(metadataFile, recipeMetadata);\n+        } catch (IOException e) {\n+            logger.atError().cause(e).kv(RECIPE_METADATA_FILE_PATH_LOG_KEY, metadataFile.getAbsolutePath())\n+                    .log(\"Failed to write recipe metadata file\");\n+\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to write recipe metadata to file: '%s'.\", metadataFile.getAbsolutePath()), e);\n+        }\n+    }\n+\n+    /**\n+     * Reads component recipe metadata file.\n+     *\n+     * @param componentIdentifier component id\n+     * @throws PackageLoadingException if failed to read recipe metadata from file system or failed to parse the file.\n+     */\n+    public RecipeMetadata getRecipeMetadata(ComponentIdentifier componentIdentifier) throws PackageLoadingException {\n+        File metadataFile = resolveRecipeMetadataFile(componentIdentifier);\n+\n+        if (!metadataFile.exists() || !metadataFile.isFile()) {\n+            // log error because this is not expected to happen in any normal case\n+            logger.atError().kv(RECIPE_METADATA_FILE_PATH_LOG_KEY, metadataFile.getAbsolutePath())\n+                    .log(\"Failed to get recipe metadata because the file doesn't not exit or it is a folder\");\n+\n+            throw new PackageLoadingException(String.format(\n+                    \"Failed to get recipe metadata because the file doesn't not exit or it is a folder. \"\n+                            + RECIPE_METADATA_FILE_PATH_LOG_KEY + \": '%s'.\", metadataFile.getAbsolutePath()));\n+        }\n+\n+        try {\n+            return SerializerFactory.getFailSafeJsonObjectMapper().readValue(metadataFile, RecipeMetadata.class);\n+\n+            // exception handling is intentionally heavy so that to deal with file corruption\n+            // TODO review note: I struggled btw having the below or removing it. Tried to remove it and feel a single\n+            // catch on IOException and saying file is corrupted is a little thin.\n+            // Furthermore, we should do the similar to recipe file! That's a lot more important.\n+        } catch (JsonParseException e) {\n+            // log error because this is not expected to happen in any normal case\n+            logger.atError().cause(e).kv(RECIPE_METADATA_FILE_PATH_LOG_KEY, metadataFile.getAbsolutePath())\n+                    .log(\"Failed to get recipe metadata because the recipe metadata file should be a json \"\n+                                 + \"but is corrupted\");\n+\n+            throw new PackageLoadingException(String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b44ecac127664450400975c174652863a5b9f5d"}, "originalPosition": 225}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 280, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}