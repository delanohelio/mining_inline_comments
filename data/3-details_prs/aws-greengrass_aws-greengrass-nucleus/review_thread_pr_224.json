{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODQzNzEy", "number": 224, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0NDo1MVrOD5qsqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyNjozNVrOD8OZhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk0OTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0NDo1MVrOGRD33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0NDo1MVrOGRD33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0MjQzMQ==", "bodyText": "Where did the default of RUNNING go to?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r420542431", "createdAt": "2020-05-06T04:44:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -469,21 +477,19 @@ public Topics getServiceConfig() {\n \n     private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n         State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        if (startWhen != null && !startWhen.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk1MjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0NjoxM1rOGRD5Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo0NjoxM1rOGRD5Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0Mjc0Nw==", "bodyText": "Why only RUNNING here? Should this include FINISHED also since that is almost even harder than RUNNING?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r420542747", "createdAt": "2020-05-06T04:46:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -358,13 +360,14 @@ private Subscriber createDependencySubscriber(EvergreenService dependentEvergree\n         };\n     }\n \n-    private List<EvergreenService> getDependers() {\n+    private List<EvergreenService> getHardDependers() {\n         List<EvergreenService> dependers = new ArrayList<>();\n         Kernel kernel = context.get(Kernel.class);\n         for (EvergreenService evergreenService : kernel.orderedDependencies()) {\n-            boolean isDepender = evergreenService.dependencies.keySet().stream().anyMatch(d -> d.equals(this));\n-            if (isDepender) {\n-                dependers.add(evergreenService);\n+            for (Map.Entry<EvergreenService, DependencyInfo> entry : evergreenService.dependencies.entrySet()) {\n+                if (entry.getKey().equals(this) && State.RUNNING.equals(entry.getValue().startWhen)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f83a652b3c44d6fb69f19dc48c78c8ec64d6cb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY1OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozMjo0NVrOGUZu1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1NzoxNFrOGVDPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjI5NQ==", "bodyText": "nit: lowercase service here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424046295", "createdAt": "2020-05-12T21:32:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {\n+                if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n+                    type = s;\n                     break;\n                 }\n             }\n-            if (x == null) {\n-                throw new InputValidationException(startWhen + \" does not match any EvergreenService state name\");\n+            if (type == null) {\n+                throw new InputValidationException(typeString + \" does not match any Service dependency type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNjQzMw==", "bodyText": "This hasn't been updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424726433", "createdAt": "2020-05-13T20:57:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {\n+                if (typeString.regionMatches(true, 0, s.name(), 0, typeString.length())) {\n+                    type = s;\n                     break;\n                 }\n             }\n-            if (x == null) {\n-                throw new InputValidationException(startWhen + \" does not match any EvergreenService state name\");\n+            if (type == null) {\n+                throw new InputValidationException(typeString + \" does not match any Service dependency type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjI5NQ=="}, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY2MjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozMzo0OFrOGUZwkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMjo0OFrOGUcg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ==", "bodyText": "IMO these can probably be soft.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424046739", "createdAt": "2020-05-12T21:33:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -73,7 +73,7 @@ public void launch() {\n \n         autostart.forEach(s -> {\n             try {\n-                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+                mainService.addOrUpdateDependency(kernel.locate(s), Type.HARD, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1MzE0NA==", "bodyText": "Does mean if an EG-aware service wants to use IPC featues, it has to explicitly declare hard dependency on IPCService? Maybe we can discuss offline which 1P offerings can be soft dependency and whether we should expose that in configuration.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424053144", "createdAt": "2020-05-12T21:47:33Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -73,7 +73,7 @@ public void launch() {\n \n         autostart.forEach(s -> {\n             try {\n-                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+                mainService.addOrUpdateDependency(kernel.locate(s), Type.HARD, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ=="}, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTg3NQ==", "bodyText": "Discussed offline. We agreed to leave the defaults to be hard dependencies.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424091875", "createdAt": "2020-05-12T23:32:48Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -73,7 +73,7 @@ public void launch() {\n \n         autostart.forEach(s -> {\n             try {\n-                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+                mainService.addOrUpdateDependency(kernel.locate(s), Type.HARD, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0NjczOQ=="}, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY3MTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozNzowMVrOGUZ15w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTo0OTo1N1rOGUaN6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODEwMw==", "bodyText": "nit: may want to do a case-insensitive match using toUpperCase", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048103", "createdAt": "2020-05-12T21:37:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA1NDI1MQ==", "bodyText": "It should be case-insensitive because of next line. I'll add unit tests to verify that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424054251", "createdAt": "2020-05-12T21:49:57Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,49 +445,45 @@ public Topics getServiceConfig() {\n         return config;\n     }\n \n-    private Map<EvergreenService, State> getDependencyStateMap(Iterable<String> dependencyList)\n+    private Map<EvergreenService, Type> getDependencyTypeMap(Iterable<String> dependencyList)\n             throws InputValidationException, ServiceLoadException {\n-        HashMap<EvergreenService, State> ret = new HashMap<>();\n+        HashMap<EvergreenService, Type> ret = new HashMap<>();\n         for (String dependency : dependencyList) {\n             String[] dependencyInfo = dependency.split(\":\");\n             if (dependencyInfo.length == 0 || dependencyInfo.length > 2) {\n                 throw new InputValidationException(\"Bad dependency syntax\");\n             }\n-            Pair<EvergreenService, State> dep =\n+            Pair<EvergreenService, Type> dep =\n                     parseSingleDependency(dependencyInfo[0], dependencyInfo.length > 1 ? dependencyInfo[1] : null);\n             ret.put(dep.getLeft(), dep.getRight());\n         }\n         return ret;\n     }\n \n-    private Pair<EvergreenService, State> parseSingleDependency(String name, String startWhen)\n+    private Pair<EvergreenService, Type> parseSingleDependency(String name, String typeString)\n             throws InputValidationException, ServiceLoadException {\n-        if (startWhen == null) {\n-            startWhen = State.RUNNING.toString();\n-        }\n-        State x = null;\n-        int len = startWhen.length();\n-        if (len > 0) {\n+        Type type = null;\n+        if (typeString != null && !typeString.isEmpty()) {\n             // do \"friendly\" match\n-            for (State s : State.values()) {\n-                if (startWhen.regionMatches(true, 0, s.name(), 0, len)) {\n-                    x = s;\n+            for (Type s : Type.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODEwMw=="}, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY3Mzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozNzo1NFrOGUZ3iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozNzo1NFrOGUZ3iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODUyMA==", "bodyText": "Please add javadoc explaining what hard and soft mean.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048520", "createdAt": "2020-05-12T21:37:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum Type {\n+    HARD(\"HARD\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDY3NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozODoxMlrOGUZ4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTozODoxMlrOGUZ4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA0ODY1MQ==", "bodyText": "Type is far too generic. Please rename. Perhaps DependencyType.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424048651", "createdAt": "2020-05-12T21:38:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Type.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a65508db1f3ac766abafc8e9f0df612f926bb2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYyNjkwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/delta.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyMTo1MVrOGU24xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyMToxOFrOGU-Ceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzk3NA==", "bodyText": "Nit - should this not be changed to Soft?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424523974", "createdAt": "2020-05-13T15:21:51Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/delta.yaml", "diffHunk": "@@ -14,7 +14,7 @@ services:\n         date; sleep 5; echo Now we\\'re in phase 3\n         done\n     dependencies:\n-      - ticktock:INSTALLED\n+      - ticktock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MTE0Ng==", "bodyText": "startWhen=INSTALLED does not have a direct mapping to dependency types. Changing to soft indicates ticktock doesn't have to be installed successfully. I feel we can only choose the more restrictive option.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424641146", "createdAt": "2020-05-13T18:21:18Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/delta.yaml", "diffHunk": "@@ -14,7 +14,7 @@ services:\n         date; sleep 5; echo Now we\\'re in phase 3\n         done\n     dependencies:\n-      - ticktock:INSTALLED\n+      - ticktock", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzk3NA=="}, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY5NTYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozNjozM1rOGU3kGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjoyNlrOGU8QAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNTA2NA==", "bodyText": "Nit- looks like leftover commented code, just remove it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424535064", "createdAt": "2020-05-13T15:36:33Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "diffHunk": "@@ -109,7 +109,7 @@ public void T1() {\n \n     public static class C2 extends EvergreenService {\n         final String id = \"c2/\" + ++seq;\n-        //        @Inject @StartWhen(NEW) c1 parent;\n+        //        @Inject @ServiceDependencyType(DependencyType.SOFT) c1 parent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTg0MQ==", "bodyText": "Yeah I can just remove it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424611841", "createdAt": "2020-05-13T17:32:26Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "diffHunk": "@@ -109,7 +109,7 @@ public void T1() {\n \n     public static class C2 extends EvergreenService {\n         final String id = \"c2/\" + ++seq;\n-        //        @Inject @StartWhen(NEW) c1 parent;\n+        //        @Inject @ServiceDependencyType(DependencyType.SOFT) c1 parent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNTA2NA=="}, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzcwODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozOTowMVrOGU3sFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjowNFrOGU8PJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNzExMQ==", "bodyText": "This TODO can be removed now right? or are you waiting for your other PRs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424537111", "createdAt": "2020-05-13T15:39:01Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -103,12 +103,12 @@\n         resolvedServiceConfig.put(SETENV_CONFIG_NAMESPACE, resolvedSetEnvConfig);\n \n         // TODO : Update package recipe format to include all information that service dependencies config\n-        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // expects according to the new syntax e.g. dependencyType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTYyMw==", "bodyText": "Yes. It's in the next PR to modify package recipes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424611623", "createdAt": "2020-05-13T17:32:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -103,12 +103,12 @@\n         resolvedServiceConfig.put(SETENV_CONFIG_NAMESPACE, resolvedSetEnvConfig);\n \n         // TODO : Update package recipe format to include all information that service dependencies config\n-        // expects according to the new syntax e.g. isHotPluggable, dependency service state,\n+        // expects according to the new syntax e.g. dependencyType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNzExMQ=="}, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzcyMTQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0MTo1M1rOGU30QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjo0NFrOGU8Quw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzOTIwMQ==", "bodyText": "Nit- now since you're making an effort to clean up this test, also static import verify?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424539201", "createdAt": "2020-05-13T15:41:53Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "diffHunk": "@@ -1,63 +1,88 @@\n package com.aws.iot.evergreen.kernel;\n \n import com.aws.iot.evergreen.config.Subscriber;\n-import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.dependency.DependencyType;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class SetupDependencyTest extends EGServiceTestUtil {\n \n     private EvergreenService evergreenService;\n+    private Kernel mockKernel;\n \n \n     @BeforeEach\n     void beforeEach() {\n         evergreenService = new EvergreenService(initializeMockedConfig());\n         evergreenService.context = context;\n-        Kernel mockKernel = Mockito.mock(Kernel.class);\n-        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n+        mockKernel = mock(Kernel.class);\n+        when(context.get(Kernel.class)).thenReturn(mockKernel);\n     }\n \n     @Test\n     void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n         // WHEN\n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n \n         // THEN\n-        Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n+        Map<EvergreenService, DependencyType> dependencies = evergreenService.getDependencies();\n         // verify dependency added\n-        Assertions.assertEquals(1, dependencies.size());\n-        Assertions.assertEquals(State.INSTALLED, dependencies.get(dep1));\n+        assertEquals(1, dependencies.size());\n+        assertEquals(DependencyType.SOFT, dependencies.get(dep1));\n     }\n \n     @Test\n     void GIVEN_dependency_exist_WHEN_dependency_is_updated_THEN_update_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n         Mockito.verify(dep1).addStateSubscriber(Mockito.any(Subscriber.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMjAyNw==", "bodyText": "Will do.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424612027", "createdAt": "2020-05-13T17:32:44Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "diffHunk": "@@ -1,63 +1,88 @@\n package com.aws.iot.evergreen.kernel;\n \n import com.aws.iot.evergreen.config.Subscriber;\n-import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.dependency.DependencyType;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n-import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import java.util.Arrays;\n import java.util.Map;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n public class SetupDependencyTest extends EGServiceTestUtil {\n \n     private EvergreenService evergreenService;\n+    private Kernel mockKernel;\n \n \n     @BeforeEach\n     void beforeEach() {\n         evergreenService = new EvergreenService(initializeMockedConfig());\n         evergreenService.context = context;\n-        Kernel mockKernel = Mockito.mock(Kernel.class);\n-        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n+        mockKernel = mock(Kernel.class);\n+        when(context.get(Kernel.class)).thenReturn(mockKernel);\n     }\n \n     @Test\n     void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n         // WHEN\n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n \n         // THEN\n-        Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n+        Map<EvergreenService, DependencyType> dependencies = evergreenService.getDependencies();\n         // verify dependency added\n-        Assertions.assertEquals(1, dependencies.size());\n-        Assertions.assertEquals(State.INSTALLED, dependencies.get(dep1));\n+        assertEquals(1, dependencies.size());\n+        assertEquals(DependencyType.SOFT, dependencies.get(dep1));\n     }\n \n     @Test\n     void GIVEN_dependency_exist_WHEN_dependency_is_updated_THEN_update_successful() throws Exception {\n         // GIVEN\n-        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        EvergreenService dep1 = mock(EvergreenService.class);\n \n-        evergreenService.addOrUpdateDependency(dep1, State.INSTALLED, false);\n+        evergreenService.addOrUpdateDependency(dep1, DependencyType.SOFT, false);\n         Mockito.verify(dep1).addStateSubscriber(Mockito.any(Subscriber.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzOTIwMQ=="}, "originalCommit": {"oid": "c3d2fbd052ca923ea3c96cadc07a37b1573e8460"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDc3MDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/DependencyType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDoyNjozNVrOGVCShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNzozNlrOGVD3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDc4OA==", "bodyText": "Nit - remain in its state", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424710788", "createdAt": "2020-05-13T20:26:35Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/DependencyType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum DependencyType {\n+    /**\n+     * The lifecycle of hard dependencies will impact the lifecycle of the depending service.\n+     * e.g. the depending service will be restarted by Kernel if any hard dependency errors out and tries to recover.\n+     */\n+    HARD(\"HARD\"),\n+\n+    /**\n+     * Soft dependencies have independent lifecycle from the depending service.\n+     * e.g. the depending service can remain its state if any soft dependency errors out.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb7f6a4133c2a1acfc5f8e6482d0ade81ec44"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjU2NA==", "bodyText": "Will update in the next PR #237", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/224#discussion_r424736564", "createdAt": "2020-05-13T21:17:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/DependencyType.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.dependency;\n+\n+import lombok.AllArgsConstructor;\n+\n+/**\n+ * Dependency type used for declared service dependencies.\n+ */\n+@AllArgsConstructor\n+public enum DependencyType {\n+    /**\n+     * The lifecycle of hard dependencies will impact the lifecycle of the depending service.\n+     * e.g. the depending service will be restarted by Kernel if any hard dependency errors out and tries to recover.\n+     */\n+    HARD(\"HARD\"),\n+\n+    /**\n+     * Soft dependencies have independent lifecycle from the depending service.\n+     * e.g. the depending service can remain its state if any soft dependency errors out.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxMDc4OA=="}, "originalCommit": {"oid": "02ffb7f6a4133c2a1acfc5f8e6482d0ade81ec44"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}