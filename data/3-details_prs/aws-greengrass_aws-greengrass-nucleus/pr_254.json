{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDExMzQ1", "number": 254, "title": "Implement taking LocalOverrideRequest and convert to DeploymentDocument", "bodyText": "Issue #, if available:\nDescription of changes:\nUpdate the DeploymentService to take in LocalOverrideRequest, consolidate with the running components, and generate a DeploymentDocument, so that DeploymentService can use.\nI'm also not super happy with error handling but I don't think we have time to make all of them in the first revision.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-22T16:15:32Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254", "merged": true, "mergeCommit": {"oid": "bf1b95d4a5c3be5ab382e1dfa3a1e3a411edc375"}, "closed": true, "closedAt": "2020-05-29T17:33:06Z", "author": {"login": "leaf94"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj0pJHAH2gAyNDIyMDExMzQ1OjQ1ZTA0MGRlNzY0MjdjYWRkYWYyYjA3YmNiYmE5MjUxMzk0YTNhNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmF-C7AFqTQyMTE1Mjg2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/45e040de76427caddaf2b07bcbba9251394a3a5a", "committedDate": "2020-05-22T16:13:26Z", "message": "Ready for Demo; Missing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDM0MDMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-417034031", "createdAt": "2020-05-22T16:23:56Z", "commit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoyMzo1NlrOGZc0rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjoyNjozN1rOGZc5yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzOTgyMw==", "bodyText": "This seems maybe too quick. Not positive what the original intention of setting it to 30s was though, but I'm guessing it is to keep the cpu idle for longer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429339823", "createdAt": "2020-05-22T16:23:56Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -44,12 +51,12 @@\n \n     public static final String DEPLOYMENT_SERVICE_TOPICS = \"DeploymentService\";\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n-            .configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n-            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    private static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     // TODO: These should probably become configurable parameters eventually\n-    private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(1).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MDgwNw==", "bodyText": "why skip, why not have a null version?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429340807", "createdAt": "2020-05-22T16:26:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -311,20 +314,39 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n             // if not found, initialize GenericExternalService\n             try {\n                 ret = new GenericExternalService(serviceRootTopics);\n-                logger.atInfo(\"generic-service-loaded\")\n-                        .kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n+                logger.atInfo(\"generic-service-loaded\").kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n             } catch (Throwable ex) {\n                 throw new ServiceLoadException(\"Can't create generic service instance \" + name, ex);\n             }\n             return ret;\n         });\n     }\n \n+\n+    /**\n+     * Fetch root packages and thier version from the kernel.\n+     *\n+     * @return returns packageName, version as a map\n+     */\n+    public Map<String, String> getRootPackageNameAndVersion() {\n+\n+        Map<String, String> rootPackageNameAndVersionMap = new HashMap<>();\n+        for (EvergreenService service : getMain().getDependencies().keySet()) {\n+            Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+            if (version == null) {\n+                // version is not currently available for services that ship with the kernel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MTEyOA==", "bodyText": "this can be a bit simpler if you just do if (configuration==null) return set;", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429341128", "createdAt": "2020-05-22T16:26:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageParameter.java", "diffHunk": "@@ -59,16 +59,16 @@ public PackageParameter(String name, String value, ParameterType type) {\n      */\n     public static Set<PackageParameter> fromMap(Map<String, Object> configuration) {\n         HashSet<PackageParameter> set = new HashSet<>();\n-        for (Map.Entry<String, Object> parameter : configuration.entrySet()) {\n-            Object value = parameter.getValue();\n-            if (value instanceof String) {\n-                set.add(new PackageParameter(parameter.getKey(), (String) value, ParameterType.STRING));\n-            } else if (value instanceof Boolean) {\n-                set.add(new PackageParameter(parameter.getKey(), ((Boolean) value).toString(),\n-                        ParameterType.BOOLEAN));\n-            } else if (value instanceof Number) {\n-                set.add(new PackageParameter(parameter.getKey(), String.valueOf(value),\n-                        ParameterType.NUMBER));\n+        if (configuration != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629392a55d643d2313169c45be62aa84b16d6f3f", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/629392a55d643d2313169c45be62aa84b16d6f3f", "committedDate": "2020-05-22T17:22:29Z", "message": "Add request id and timestamp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDY2MDY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-417066068", "createdAt": "2020-05-22T17:12:15Z", "commit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoxMjoxNVrOGZeOTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyNzo0NFrOGZeoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mjc2Nw==", "bodyText": "What is \"*\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429362767", "createdAt": "2020-05-22T17:12:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -301,6 +315,52 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         return document;\n     }\n \n+    private DeploymentDocument convertLocalOverrideRequestToDeployDoc(LocalOverrideRequest localOverrideRequest) {\n+\n+        // TODO DeploymentId\n+        Map<String, String> rootComponents = kernel.getRootPackageNameAndVersion();\n+\n+        // remove\n+        List<String> componentsToRemove = localOverrideRequest.getComponentsToRemove();\n+        if (componentsToRemove != null && !componentsToRemove.isEmpty()) {\n+            componentsToRemove.forEach((rootComponents::remove));\n+        }\n+\n+        // add or update\n+        Map<String, String> componentsToMerge = localOverrideRequest.getComponentsToMerge();\n+\n+        if (componentsToMerge != null && !componentsToMerge.isEmpty()) {\n+            componentsToMerge.forEach((name, version) -> rootComponents.merge(name, version, (k, v) -> version));\n+        }\n+\n+        List<String> rootPackages = new ArrayList<>(rootComponents.keySet());\n+\n+\n+        List<DeploymentPackageConfiguration> packageConfigurations =\n+                localOverrideRequest.getComponentNameToConfig().entrySet().stream()\n+                        .map(entry -> new DeploymentPackageConfiguration(entry.getKey(), \"*\", entry.getValue()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NDg5Mg==", "bodyText": "typo: thier -> their", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429364892", "createdAt": "2020-05-22T17:17:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -311,20 +314,39 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n             // if not found, initialize GenericExternalService\n             try {\n                 ret = new GenericExternalService(serviceRootTopics);\n-                logger.atInfo(\"generic-service-loaded\")\n-                        .kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n+                logger.atInfo(\"generic-service-loaded\").kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n             } catch (Throwable ex) {\n                 throw new ServiceLoadException(\"Can't create generic service instance \" + name, ex);\n             }\n             return ret;\n         });\n     }\n \n+\n+    /**\n+     * Fetch root packages and thier version from the kernel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NTg2NA==", "bodyText": "I have no idea what this TODO means. The purpose of TODO is other people can understand what is missing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429365864", "createdAt": "2020-05-22T17:19:39Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -301,6 +315,52 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         return document;\n     }\n \n+    private DeploymentDocument convertLocalOverrideRequestToDeployDoc(LocalOverrideRequest localOverrideRequest) {\n+\n+        // TODO DeploymentId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Njg5Mg==", "bodyText": "why not just use put()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429366892", "createdAt": "2020-05-22T17:21:42Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -301,6 +315,52 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         return document;\n     }\n \n+    private DeploymentDocument convertLocalOverrideRequestToDeployDoc(LocalOverrideRequest localOverrideRequest) {\n+\n+        // TODO DeploymentId\n+        Map<String, String> rootComponents = kernel.getRootPackageNameAndVersion();\n+\n+        // remove\n+        List<String> componentsToRemove = localOverrideRequest.getComponentsToRemove();\n+        if (componentsToRemove != null && !componentsToRemove.isEmpty()) {\n+            componentsToRemove.forEach((rootComponents::remove));\n+        }\n+\n+        // add or update\n+        Map<String, String> componentsToMerge = localOverrideRequest.getComponentsToMerge();\n+\n+        if (componentsToMerge != null && !componentsToMerge.isEmpty()) {\n+            componentsToMerge.forEach((name, version) -> rootComponents.merge(name, version, (k, v) -> version));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2ODczNg==", "bodyText": "Agree. 1s is too much.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429368736", "createdAt": "2020-05-22T17:25:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -44,12 +51,12 @@\n \n     public static final String DEPLOYMENT_SERVICE_TOPICS = \"DeploymentService\";\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n-            .configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n-            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    private static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     // TODO: These should probably become configurable parameters eventually\n-    private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(1).toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMzOTgyMw=="}, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTU0Nw==", "bodyText": "I don't quite understand this line. Isn't the root component already in the packageConfigurations?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429369547", "createdAt": "2020-05-22T17:27:44Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -301,6 +315,52 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         return document;\n     }\n \n+    private DeploymentDocument convertLocalOverrideRequestToDeployDoc(LocalOverrideRequest localOverrideRequest) {\n+\n+        // TODO DeploymentId\n+        Map<String, String> rootComponents = kernel.getRootPackageNameAndVersion();\n+\n+        // remove\n+        List<String> componentsToRemove = localOverrideRequest.getComponentsToRemove();\n+        if (componentsToRemove != null && !componentsToRemove.isEmpty()) {\n+            componentsToRemove.forEach((rootComponents::remove));\n+        }\n+\n+        // add or update\n+        Map<String, String> componentsToMerge = localOverrideRequest.getComponentsToMerge();\n+\n+        if (componentsToMerge != null && !componentsToMerge.isEmpty()) {\n+            componentsToMerge.forEach((name, version) -> rootComponents.merge(name, version, (k, v) -> version));\n+        }\n+\n+        List<String> rootPackages = new ArrayList<>(rootComponents.keySet());\n+\n+\n+        List<DeploymentPackageConfiguration> packageConfigurations =\n+                localOverrideRequest.getComponentNameToConfig().entrySet().stream()\n+                        .map(entry -> new DeploymentPackageConfiguration(entry.getKey(), \"*\", entry.getValue()))\n+                        .collect(Collectors.toList());\n+\n+        // apply root\n+        rootComponents.forEach((rootComponentName, version) -> {\n+            Optional<DeploymentPackageConfiguration> optionalConfiguration = packageConfigurations.stream()\n+                    .filter(packageConfiguration -> packageConfiguration.getPackageName().equals(rootComponentName))\n+                    .findAny();\n+\n+            if (optionalConfiguration.isPresent()) {\n+                optionalConfiguration.get().setResolvedVersion(version);\n+            } else {\n+                packageConfigurations.add(new DeploymentPackageConfiguration(rootComponentName, version, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTg0OTAx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-417184901", "createdAt": "2020-05-22T21:11:52Z", "commit": {"oid": "629392a55d643d2313169c45be62aa84b16d6f3f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMToxMTo1MlrOGZjufg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMToxMTo1MlrOGZjufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MjkyNg==", "bodyText": "Can we have this logic some place else ? Deployment service need not know abt converting the override request to deployment document", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r429452926", "createdAt": "2020-05-22T21:11:52Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -301,6 +315,50 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         return document;\n     }\n \n+    private DeploymentDocument convertLocalOverrideRequestToDeployDoc(LocalOverrideRequest localOverrideRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629392a55d643d2313169c45be62aa84b16d6f3f"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9ee5d2f171839066c1e4176539ccff92e41f25", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b9ee5d2f171839066c1e4176539ccff92e41f25", "committedDate": "2020-05-22T23:32:14Z", "message": "added unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1578dfc4bcf445621ba958d0a69525b7056cf3cb", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1578dfc4bcf445621ba958d0a69525b7056cf3cb", "committedDate": "2020-05-27T05:44:00Z", "message": "Merge branch 'master' into component_local_override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c980a2341802795ecf5cde7c9f2f97e7b4a6218e", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c980a2341802795ecf5cde7c9f2f97e7b4a6218e", "committedDate": "2020-05-27T05:44:10Z", "message": "Add Converter and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d84911fe44354e426809d2a05b039fb892733871", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d84911fe44354e426809d2a05b039fb892733871", "committedDate": "2020-05-27T17:37:38Z", "message": "Fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDgyMzU4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-419482358", "createdAt": "2020-05-27T18:05:26Z", "commit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNToyNlrOGbXDgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNToyNlrOGbXDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MjQ2Ng==", "bodyText": "object mappers are expensive, avoid creating them all the time. Save this as a static final.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431342466", "createdAt": "2020-05-27T18:05:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/LocalDeploymentListener.java", "diffHunk": "@@ -23,20 +25,35 @@\n     private LinkedBlockingQueue<Deployment> deploymentsQueue;\n \n     //TODO: LocalDeploymentListener should register with IPC to expose submitLocalDeployment\n-    //TODO: the interface is not finalized yet, this is more an example.\n-    /** schedules a deployment with deployment service.\n-     * @param deploymentDocument document configuration\n+\n+    /**\n+     * schedules a deployment with deployment service.\n+     *\n+     * @param localOverrideRequestStr serialized localOverrideRequestStr\n      * @return true if deployment was scheduled\n      */\n-    public boolean submitLocalDeployment(String deploymentDocument) {\n-        String localDeploymentIdentifier = LOCAL_DEPLOYMENT_ID_PREFIX + System.currentTimeMillis();\n-        Deployment deployment = new Deployment(deploymentDocument, DeploymentType.LOCAL, localDeploymentIdentifier);\n+    public boolean submitLocalDeployment(String localOverrideRequestStr) {\n+\n+        LocalOverrideRequest request;\n+\n+        try {\n+            request = new ObjectMapper().readValue(localOverrideRequestStr, LocalOverrideRequest.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDgzMzk5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-419483399", "createdAt": "2020-05-27T18:06:51Z", "commit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowNjo1MVrOGbXGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxMDowN1rOGbXNvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MzI0MA==", "bodyText": "nit: no reason to check for empty.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431343240", "createdAt": "2020-05-27T18:06:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.converter;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.deployment.model.LocalOverrideRequest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public final class DeploymentDocumentConverter {\n+\n+    private static final String ANY_VERSION = \"*\";\n+\n+    private DeploymentDocumentConverter() {\n+        // So that this can't be initialized\n+    }\n+\n+    /**\n+     * Convert to a DeploymentDocument from a LocalOverrideRequest and the current running root Components.\n+     *\n+     * @param localOverrideRequest  local override request\n+     * @param runningRootComponents current running root component name to version\n+     * @return a converted DeploymentDocument\n+     */\n+    public static DeploymentDocument convertFromLocalOverrideRequestAndRoot(LocalOverrideRequest localOverrideRequest,\n+                                                                            Map<String, String> runningRootComponents) {\n+\n+        // copy over existing root components\n+        Map<String, String> newRootComponents = new HashMap<>(runningRootComponents);\n+\n+        // remove\n+        List<String> componentsToRemove = localOverrideRequest.getComponentsToRemove();\n+        if (componentsToRemove != null && !componentsToRemove.isEmpty()) {\n+            componentsToRemove.forEach(newRootComponents::remove);\n+        }\n+\n+        // add or update\n+        Map<String, String> componentsToMerge = localOverrideRequest.getComponentsToMerge();\n+        if (componentsToMerge != null && !componentsToMerge.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0Mzg2NA==", "bodyText": "Still typo", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431343864", "createdAt": "2020-05-27T18:07:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -311,20 +314,39 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n             // if not found, initialize GenericExternalService\n             try {\n                 ret = new GenericExternalService(serviceRootTopics);\n-                logger.atInfo(\"generic-service-loaded\")\n-                        .kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n+                logger.atInfo(\"generic-service-loaded\").kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n             } catch (Throwable ex) {\n                 throw new ServiceLoadException(\"Can't create generic service instance \" + name, ex);\n             }\n             return ret;\n         });\n     }\n \n+\n+    /**\n+     * Fetch root packages and thier version from the kernel.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NDg5Mg=="}, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDI1NA==", "bodyText": "Why not return them, won't this cause them to be removed or have their config values reset during the deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431344254", "createdAt": "2020-05-27T18:08:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -311,20 +314,39 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n             // if not found, initialize GenericExternalService\n             try {\n                 ret = new GenericExternalService(serviceRootTopics);\n-                logger.atInfo(\"generic-service-loaded\")\n-                        .kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n+                logger.atInfo(\"generic-service-loaded\").kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n             } catch (Throwable ex) {\n                 throw new ServiceLoadException(\"Can't create generic service instance \" + name, ex);\n             }\n             return ret;\n         });\n     }\n \n+\n+    /**\n+     * Fetch root packages and thier version from the kernel.\n+     *\n+     * @return returns packageName, version as a map\n+     */\n+    public Map<String, String> getRootPackageNameAndVersion() {\n+\n+        Map<String, String> rootPackageNameAndVersionMap = new HashMap<>();\n+        for (EvergreenService service : getMain().getDependencies().keySet()) {\n+            Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+            if (version == null) {\n+                // version is not currently available for services that ship with the kernel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM0MDgwNw=="}, "originalCommit": {"oid": "45e040de76427caddaf2b07bcbba9251394a3a5a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDc4Mg==", "bodyText": "please undo the formatting.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431344782", "createdAt": "2020-05-27T18:09:38Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "diffHunk": "@@ -42,16 +46,9 @@\n @ExtendWith(EGExtension.class)\n class KernelTest {\n     private static final String EXPECTED_CONFIG_OUTPUT =\n-            \"---\\n\"\n-            + \"services:\\n\"\n-            + \"  service1:\\n\"\n-            + \"    dependencies: []\\n\"\n-            + \"    lifecycle:\\n\"\n-            + \"      run:\\n\"\n-            + \"        script: \\\"test script\\\"\\n\"\n-            + \"  main:\\n\"\n-            + \"    dependencies:\\n\"\n-            + \"    - \\\"service1\\\"\\n\";\n+            \"---\\n\" + \"services:\\n\" + \"  service1:\\n\" + \"    dependencies: []\\n\" + \"    lifecycle:\\n\" + \"      run:\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NTA4Nw==", "bodyText": "use findServiceTopics instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r431345087", "createdAt": "2020-05-27T18:10:07Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "diffHunk": "@@ -74,19 +71,16 @@ void GIVEN_kernel_and_services_WHEN_orderedDependencies_THEN_dependencies_are_re\n         KernelLifecycle kernelLifecycle = spy(new KernelLifecycle(kernel, new KernelCommandLine(kernel)));\n         kernel.setKernelLifecycle(kernelLifecycle);\n \n-        EvergreenService mockMain =\n-                new EvergreenService(kernel.getConfig()\n-                        .lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"main\"));\n+        EvergreenService mockMain = new EvergreenService(\n+                kernel.getConfig().lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"main\"));\n         mockMain.postInject();\n         when(kernelLifecycle.getMain()).thenReturn(mockMain);\n \n-        EvergreenService service1 =\n-                new EvergreenService(kernel.getConfig()\n-                        .lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"service1\"));\n+        EvergreenService service1 = new EvergreenService(\n+                kernel.getConfig().lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"service1\"));\n         service1.postInject();\n-        EvergreenService service2 =\n-                new EvergreenService(kernel.getConfig()\n-                        .lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"service2\"));\n+        EvergreenService service2 = new EvergreenService(\n+                kernel.getConfig().lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC, \"service2\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d84911fe44354e426809d2a05b039fb892733871"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c14b4568bb38b052289acb44e449c6ae75186ded", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c14b4568bb38b052289acb44e449c6ae75186ded", "committedDate": "2020-05-28T05:45:48Z", "message": "Merge branch 'master' into component_local_override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427dfcde64ab6a76efd11ceeb87faf9a166a6f71", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/427dfcde64ab6a76efd11ceeb87faf9a166a6f71", "committedDate": "2020-05-28T07:19:03Z", "message": "PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2d09b975af4bb1c904c3d6702f88f42d3273c2", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2c2d09b975af4bb1c904c3d6702f88f42d3273c2", "committedDate": "2020-05-28T17:43:03Z", "message": "Put back the polling wait time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDk4NjYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-420498662", "createdAt": "2020-05-28T21:16:54Z", "commit": {"oid": "2c2d09b975af4bb1c904c3d6702f88f42d3273c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToxNjo1NFrOGcHCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToxNjo1NFrOGcHCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEyODYzMg==", "bodyText": "Why does this cause duplication? That sounds like a serious bug that should be fixed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432128632", "createdAt": "2020-05-28T21:16:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -44,11 +47,15 @@\n \n     public static final String DEPLOYMENT_SERVICE_TOPICS = \"DeploymentService\";\n \n-    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper()\n-            .configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n-            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    private static final ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     // TODO: These should probably become configurable parameters eventually\n+    // TODO: Deployment polling wait time can't be simply reduced now because it may result doing duplicate deployment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2d09b975af4bb1c904c3d6702f88f42d3273c2"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97b1750af4a5f46159835800f3dd847f8c7cb4fe", "committedDate": "2020-05-28T21:27:36Z", "message": "Merge branch 'master' into component_local_override"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTEzODUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-420513850", "createdAt": "2020-05-28T21:42:44Z", "commit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0Mjo0NFrOGcHyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxMzoyOFrOGcIj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MDgxMw==", "bodyText": "Refer to my suggested approach above and remove this comment", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432140813", "createdAt": "2020-05-28T21:42:44Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -178,6 +178,10 @@\n         }\n         Deployment deployment =\n                 new Deployment(documentString, DeploymentType.IOT_JOBS, jobExecutionData.jobId);\n+\n+        // TODO The deduping here doesn't working when the deployment polling frequency increased", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MzMwMg==", "bodyText": "I think this should happen respectively in IotJobsHelper and LocalDeploymentListener\nDeployment service understands the deployment document and any transformations should be handled before it. Otherwise deployment service will keep on adding transformation code for different deployment sources.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432143302", "createdAt": "2020-05-28T21:48:32Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -282,11 +293,17 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n         if (Utils.isEmpty(jobDocumentString)) {\n             throw new InvalidRequestException(\"Job document cannot be empty\");\n         }\n-        DeploymentDocument document = null;\n+        DeploymentDocument document;\n         try {\n             switch (deployment.getDeploymentType()) {\n                 case LOCAL:\n-                    document = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+                    LocalOverrideRequest localOverrideRequest =\n+                            OBJECT_MAPPER.readValue(jobDocumentString, LocalOverrideRequest.class);\n+\n+                    Map<String, String> rootComponents = kernel.getRunningCustomRootComponents();\n+\n+                    document = DeploymentDocumentConverter\n+                            .convertFromLocalOverrideRequestAndRoot(localOverrideRequest, rootComponents);\n                     break;\n                 case IOT_JOBS:\n                     FleetConfiguration config = OBJECT_MAPPER.readValue(jobDocumentString, FleetConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0Nzk5Nw==", "bodyText": "This initialization can move to top and this can be reduced to one if block", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432147997", "createdAt": "2020-05-28T21:59:39Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.converter;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.deployment.model.LocalOverrideRequest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public final class DeploymentDocumentConverter {\n+\n+    private static final String ANY_VERSION = \"*\";\n+\n+    private DeploymentDocumentConverter() {\n+        // So that this can't be initialized\n+    }\n+\n+    /**\n+     * Convert to a DeploymentDocument from a LocalOverrideRequest and the current running root Components.\n+     *\n+     * @param localOverrideRequest  local override request\n+     * @param runningRootComponents current running root component name to version\n+     * @return a converted DeploymentDocument\n+     */\n+    public static DeploymentDocument convertFromLocalOverrideRequestAndRoot(LocalOverrideRequest localOverrideRequest,\n+                                                                            Map<String, String> runningRootComponents) {\n+\n+        // copy over existing root components\n+        Map<String, String> newRootComponents = new HashMap<>(runningRootComponents);\n+\n+        // remove\n+        List<String> componentsToRemove = localOverrideRequest.getComponentsToRemove();\n+        if (componentsToRemove != null) {\n+            componentsToRemove.forEach(newRootComponents::remove);\n+        }\n+\n+        // add or update\n+        Map<String, String> componentsToMerge = localOverrideRequest.getComponentsToMerge();\n+        if (componentsToMerge != null) {\n+            componentsToMerge.forEach(newRootComponents::put);\n+        }\n+\n+        List<String> rootPackages = new ArrayList<>(newRootComponents.keySet());\n+\n+        // Build configs\n+        List<DeploymentPackageConfiguration> packageConfigurations =\n+                buildDeploymentPackageConfigurations(localOverrideRequest, newRootComponents);\n+\n+\n+        return DeploymentDocument.builder().timestamp(localOverrideRequest.getRequestTimestamp())\n+                .deploymentId(localOverrideRequest.getRequestId()).rootPackages(rootPackages)\n+                .deploymentPackageConfigurationList(packageConfigurations).build();\n+    }\n+\n+    private static List<DeploymentPackageConfiguration> buildDeploymentPackageConfigurations(\n+            LocalOverrideRequest localOverrideRequest, Map<String, String> newRootComponents) {\n+        List<DeploymentPackageConfiguration> packageConfigurations;\n+\n+        // convert Deployment Config from getComponentNameToConfig, which doesn't include root components necessarily\n+        if (localOverrideRequest.getComponentNameToConfig() == null || localOverrideRequest.getComponentNameToConfig()\n+                .isEmpty()) {\n+            packageConfigurations = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MzU5NA==", "bodyText": "Getting all root components and creating the complete config seems like work which dependency resolver/kernelConfigResolver needs to do. Why can't we just send the packages that need to be updated, added and removed. Right now we do no support removing, but with multi groups and shadow deployments we will need to add those.\nI am ok keeping this for M1 since these are bigger changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432153594", "createdAt": "2020-05-28T22:13:28Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment.converter;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.deployment.model.LocalOverrideRequest;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public final class DeploymentDocumentConverter {\n+\n+    private static final String ANY_VERSION = \"*\";\n+\n+    private DeploymentDocumentConverter() {\n+        // So that this can't be initialized\n+    }\n+\n+    /**\n+     * Convert to a DeploymentDocument from a LocalOverrideRequest and the current running root Components.\n+     *\n+     * @param localOverrideRequest  local override request\n+     * @param runningRootComponents current running root component name to version\n+     * @return a converted DeploymentDocument\n+     */\n+    public static DeploymentDocument convertFromLocalOverrideRequestAndRoot(LocalOverrideRequest localOverrideRequest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDUwMTEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-421050113", "createdAt": "2020-05-29T15:17:23Z", "commit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToxNzoyM1rOGchJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToxNzoyM1rOGchJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NjM4OA==", "bodyText": "Not needed for this pr, but let's add a version to the implements service annotation so that all services will have versions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#discussion_r432556388", "createdAt": "2020-05-29T15:17:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -311,20 +314,42 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n             // if not found, initialize GenericExternalService\n             try {\n                 ret = new GenericExternalService(serviceRootTopics);\n-                logger.atInfo(\"generic-service-loaded\")\n-                        .kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n+                logger.atInfo(\"generic-service-loaded\").kv(EvergreenService.SERVICE_NAME_KEY, ret.getName()).log();\n             } catch (Throwable ex) {\n                 throw new ServiceLoadException(\"Can't create generic service instance \" + name, ex);\n             }\n             return ret;\n         });\n     }\n \n+\n+    /**\n+     * Get running custom root components, excluding the kernel's built-in services.\n+     *\n+     * @return returns name and version as a map\n+     */\n+    public Map<String, String> getRunningCustomRootComponents() {\n+\n+        Map<String, String> rootPackageNameAndVersionMap = new HashMap<>();\n+\n+        for (EvergreenService service : getMain().getDependencies().keySet()) {\n+            Topic version = service.getConfig().find(VERSION_CONFIG_KEY);\n+\n+            if (version == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b1750af4a5f46159835800f3dd847f8c7cb4fe"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798ad7c8c731b9ce8e6e478dabdf0d8fdde668a9", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/798ad7c8c731b9ce8e6e478dabdf0d8fdde668a9", "committedDate": "2020-05-29T16:14:40Z", "message": "address amit comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23ab6e8776c8ba00dad7c194e8f9b31edb0bf395", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/23ab6e8776c8ba00dad7c194e8f9b31edb0bf395", "committedDate": "2020-05-29T16:17:56Z", "message": "solve merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe45a8518a20f7353c71d490601abdd6e1c49238", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fe45a8518a20f7353c71d490601abdd6e1c49238", "committedDate": "2020-05-29T16:31:57Z", "message": "solve merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTQyMzYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-421142362", "createdAt": "2020-05-29T17:17:21Z", "commit": {"oid": "fe45a8518a20f7353c71d490601abdd6e1c49238"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTUyODY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/254#pullrequestreview-421152868", "createdAt": "2020-05-29T17:32:30Z", "commit": {"oid": "fe45a8518a20f7353c71d490601abdd6e1c49238"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}