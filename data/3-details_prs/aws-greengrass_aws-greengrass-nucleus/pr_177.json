{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzcwNDgz", "number": 177, "title": "Fix IPC Lifecycle test, Fix benchmark, do not retry lifecycle on RejectedExecutionException", "bodyText": "Issue #, if available:\nDescription of changes:\nSorry for the large PR, this PR fixes many problems found in benchmarking and testing.\nSince we no longer read the log file for tests we do not need a fresh fork for every test. This change may speed up test execution slightly.\nThis change also prevents the lifecycle thread from retrying when it gets RejectedExecutionException which occurs when the kernel is shutting down. Without this change the lifecycle thread will retry forever, until the kernel main thread completely exits.\nFixes problems we've seen recently with the IPC lifecycle test being flaky. Ran successfully on my laptop 25x in a row.\nFixes PackageStore to only compare recipes for the package that it is searching for, instead of all packages.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-13T18:18:50Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177", "merged": true, "mergeCommit": {"oid": "28370ec7c89108af6e1ebd1337ff6c573da50979"}, "closed": true, "closedAt": "2020-04-14T01:10:04Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXUn_FgH2gAyNDAyNzcwNDgzOjMyOTYwYWRkNzdkODRjMzMwODYwMTJkODM5YTVmZmJhYmEyZTViYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXY71YgFqTM5MjUzODAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32960add77d84c33086012d839a5ffbaba2e5ba4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32960add77d84c33086012d839a5ffbaba2e5ba4", "committedDate": "2020-04-13T20:08:07Z", "message": "Remove test forking, do not retry lifecycle on RejectedExecutionException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51983c9d1b441ba2903c9ec85ae9e7fad6453920", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/51983c9d1b441ba2903c9ec85ae9e7fad6453920", "committedDate": "2020-04-13T18:13:53Z", "message": "Remove test forking, do not retry lifecycle on RejectedExecutionException"}, "afterCommit": {"oid": "32960add77d84c33086012d839a5ffbaba2e5ba4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/32960add77d84c33086012d839a5ffbaba2e5ba4", "committedDate": "2020-04-13T20:08:07Z", "message": "Remove test forking, do not retry lifecycle on RejectedExecutionException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5c5f22d0ce07c7c23afa23041fafeb887357de", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb5c5f22d0ce07c7c23afa23041fafeb887357de", "committedDate": "2020-04-13T20:44:26Z", "message": "Fix IPC Lifecycle test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b54cf0bd99f3ad24201f5358bdd33a066c2442", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/87b54cf0bd99f3ad24201f5358bdd33a066c2442", "committedDate": "2020-04-13T20:44:54Z", "message": "Merge branch 'master' into no-fork"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDM3OTIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392437923", "createdAt": "2020-04-13T21:03:38Z", "commit": {"oid": "87b54cf0bd99f3ad24201f5358bdd33a066c2442"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDUxNzMy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392451732", "createdAt": "2020-04-13T21:26:25Z", "commit": {"oid": "87b54cf0bd99f3ad24201f5358bdd33a066c2442"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNjoyNVrOGE18EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMToyNjoyNVrOGE18EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczMTIxNg==", "bodyText": "Why do we need this change? Waiting for IPCService to be ready is not sufficient?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407731216", "createdAt": "2020-04-13T21:26:25Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCServicesTest.java", "diffHunk": "@@ -60,7 +60,7 @@ static void startKernel() throws Exception {\n         // ensure awaitIpcServiceLatch starts\n         CountDownLatch awaitIpcServiceLatch = new CountDownLatch(1);\n         kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"IPCService\") && newState.equals(State.RUNNING)) {\n+            if (service.getName().equals(\"ServiceName\") && newState.equals(State.FINISHED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b54cf0bd99f3ad24201f5358bdd33a066c2442"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b043abb65405a770e540296089820809cbf05ecb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b043abb65405a770e540296089820809cbf05ecb", "committedDate": "2020-04-13T21:57:33Z", "message": "Fix benchmark for dependency resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7487eb090aede6a18a2b421981fb014c408c19", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cc7487eb090aede6a18a2b421981fb014c408c19", "committedDate": "2020-04-13T22:39:52Z", "message": "Fix ordering of IPC lifecycle changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ef84b8c7d6eaef568d93f2a712b6fe7a5d061a5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2ef84b8c7d6eaef568d93f2a712b6fe7a5d061a5", "committedDate": "2020-04-13T22:44:44Z", "message": "Fix PMD issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTEwODY0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392510864", "createdAt": "2020-04-13T23:43:15Z", "commit": {"oid": "2ef84b8c7d6eaef568d93f2a712b6fe7a5d061a5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTE0NDU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392514455", "createdAt": "2020-04-13T23:54:11Z", "commit": {"oid": "49478f3913f732db819e8770ce1d908c3a4f8fa3"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e303af677675494c4f4cc111786ebbb153aa1811", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e303af677675494c4f4cc111786ebbb153aa1811", "committedDate": "2020-04-14T00:46:39Z", "message": "Rename DeploymentTaskIntegrationTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49478f3913f732db819e8770ce1d908c3a4f8fa3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/49478f3913f732db819e8770ce1d908c3a4f8fa3", "committedDate": "2020-04-13T23:53:12Z", "message": "Rename DeploymentTaskIntegrationTest"}, "afterCommit": {"oid": "e303af677675494c4f4cc111786ebbb153aa1811", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e303af677675494c4f4cc111786ebbb153aa1811", "committedDate": "2020-04-14T00:46:39Z", "message": "Rename DeploymentTaskIntegrationTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTMyNjM1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392532635", "createdAt": "2020-04-14T00:51:30Z", "commit": {"oid": "e303af677675494c4f4cc111786ebbb153aa1811"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1MTozMFrOGE6Qtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1MTozMFrOGE6Qtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjAzOQ==", "bodyText": "Can there be other exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#discussion_r407802039", "createdAt": "2020-04-14T00:51:30Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -106,35 +107,45 @@ public LifecycleGenericResponse listenToStateChanges(LifecycleListenRequest life\n         return LifecycleGenericResponse.builder().status(LifecycleResponseStatus.Success).build();\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidGettingFutureWithoutTimeout\")\n     private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n                                                                ConnectionContext context) {\n         return (oldState, newState) -> {\n-            executor.execute(() -> {\n-                // Synchronize on context so that we only try to send 1 update at a time to a given client\n-                synchronized (context) {\n-                    StateTransitionEvent stateTransitionEvent =\n-                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n-                                    .service(listenRequest.getServiceName()).build();\n-\n-                    log.info(\"Pushing state change notification to {} from {} to {}\",\n-                            listenRequest.getServiceName(), oldState, newState);\n-                    try {\n-                        ApplicationMessage applicationMessage =\n-                                ApplicationMessage.builder().version(LifecycleImpl.API_VERSION)\n-                                        .opCode(LifecycleClientOpCodes.STATE_TRANSITION.ordinal())\n-                                        .payload(IPCUtil.encode(stateTransitionEvent)).build();\n-                        // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+            StateTransitionEvent stateTransitionEvent =\n+                    StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n+                            .service(listenRequest.getServiceName()).build();\n+\n+            log.info(\"Pushing state change notification to {} from {} to {}\",\n+                    listenRequest.getServiceName(), oldState, newState);\n+            try {\n+                ApplicationMessage applicationMessage =\n+                        ApplicationMessage.builder().version(LifecycleImpl.API_VERSION)\n+                                .opCode(LifecycleClientOpCodes.STATE_TRANSITION.ordinal())\n+                                .payload(IPCUtil.encode(stateTransitionEvent)).build();\n+                // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+                Future<FrameReader.Message> fut =\n                         context.serverPush(BuiltInServiceDestinationCode.LIFECYCLE.getValue(),\n-                                new FrameReader.Message(applicationMessage.toByteArray())).get();\n+                                new FrameReader.Message(applicationMessage.toByteArray()));\n+\n+                // call the blocking \"get\" in a separate thread so we don't block the publish queue\n+                executor.execute(() -> {\n+                    try {\n+                        fut.get();\n                         // TODO: Check the response message and make sure it was successful. https://sim.amazon.com/issues/P32541289\n-                    } catch (IOException | InterruptedException | ExecutionException e) {\n+                    } catch (InterruptedException | ExecutionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e303af677675494c4f4cc111786ebbb153aa1811"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTM4MDI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/177#pullrequestreview-392538027", "createdAt": "2020-04-14T01:09:25Z", "commit": {"oid": "e303af677675494c4f4cc111786ebbb153aa1811"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2109, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}