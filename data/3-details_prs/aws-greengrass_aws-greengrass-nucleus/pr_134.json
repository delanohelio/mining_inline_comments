{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjg0Mzk0", "number": 134, "title": "Fix addDependency() behavior", "bodyText": "When a dependency is added, don't add the state listener multiple times.\nWhen a dependency is removed, remove dependency state listener.\nDon't update the dependency topic in addDependency() invocation.\ndependencyTopic only track customer provided config store.\n\nIssue #, if available:\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nThis PR is blocked by #133\nThis PR is part of the #123 .\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-24T22:19:55Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134", "merged": true, "mergeCommit": {"oid": "623e3333cd605e00c8d105fe5ca257262bd5d2c5"}, "closed": true, "closedAt": "2020-03-26T20:23:35Z", "author": {"login": "ShirleyZheng92"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ6pVpgFqTM4MDc0MTkxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRgwNigFqTM4MjMxODI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQxOTE2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-380741916", "createdAt": "2020-03-24T22:27:55Z", "commit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyNzo1NlrOF7FeBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoyNzo1NlrOF7FeBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA==", "bodyText": "I think it would be safe to change this method signature to provide the whole dependency info.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r397499910", "createdAt": "2020-03-24T22:27:56Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -916,7 +930,8 @@ protected void addDependencies(HashSet<EvergreenService> deps) {\n     }\n \n     public Map<EvergreenService, State> getDependencies() {\n-        return dependencies;\n+        return dependencies.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().startWhen));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzQ4NzAx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-381348701", "createdAt": "2020-03-25T16:58:00Z", "commit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo1ODowMFrOF7k8zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyOTo0M1rOF7mXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNTY5NA==", "bodyText": "Sorry for not asking this yesterday... What problem are we trying to solve here?\nCould we simplify this by ensuring Kernel always starting all @ImplementService first, and shutdown @ImplementService at the end, so that each evergreen service doesn't have to deal with the complexity?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398015694", "createdAt": "2020-03-25T16:58:00Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNjE0NA==", "bodyText": "[Minor] I think ov here breaks 0. 0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398016144", "createdAt": "2020-03-25T16:58:32Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }\n+            ov.startWhen = when;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNzcwNQ==", "bodyText": "oldValue is better than ov! I'd even go with\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n          \n          \n            \n                    dependencies.compute(newDependentService, (dependentService, dependencyInfo) -> {", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398017705", "createdAt": "2020-03-25T17:00:44Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMTI1Nw==", "bodyText": "Am I right that this will make service restart multiple times when kernel initially add dependencies to the service? Although that might be fine if our requestRestart is smart enough", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398021257", "createdAt": "2020-03-25T17:05:32Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTMwNQ==", "bodyText": "How about moving this to a putIfAbsent so that it is easier to read?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398029305", "createdAt": "2020-03-25T17:16:05Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyOTg3Mw==", "bodyText": "I personally like this level of encapsulation  a lot!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398029873", "createdAt": "2020-03-25T17:16:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)\n             throws InputValidationException {\n         if (dependentEvergreenService == null || when == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (key, oldValue) -> {\n+            if (oldValue == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(when, isDefault, subscriber);\n+            }\n+            ov.startWhen = when;\n+            // if a dependency is added as both a default and a non-default, treat it as default dependency\n+            if (!ov.isDefaultDependency) {\n+                ov.isDefaultDependency = isDefault;\n+            }\n+            return ov;\n+        });\n+    }\n \n-        dependentEvergreenService.getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n+    private Subscriber createDependencySubscriber(EvergreenService dependentEvergreenService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTU2NQ==", "bodyText": "[minor] Maybe rename the when to startWhen so that it is consistent with DependencyInfo", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398031565", "createdAt": "2020-03-25T17:19:07Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -684,25 +689,35 @@ public Context getContext() {\n      * @param dependentEvergreenService the service to add as a dependency.\n      * @param when                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when, boolean isDefault)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzMTkxMA==", "bodyText": "primitive boolean if it can't be null", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398031910", "createdAt": "2020-03-25T17:19:38Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -940,4 +955,12 @@ public boolean isClosed() {\n         return isClosed.get();\n     }\n \n+    @AllArgsConstructor\n+    protected static class DependencyInfo {\n+        // starting at which state when the dependency is considered Ready. Default to be RUNNING.\n+        State startWhen;\n+        // true if the dependency isn't explicitly declared in config\n+        Boolean isDefaultDependency;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNTY0NQ==", "bodyText": "Hah we are thinking about the same thing. I'm confused when reading through unit tests and wondering why getDependencies.get(service) returns a State?\nI agree we could change it right after other PRs merged in. Just leave a TODO.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398035645", "createdAt": "2020-03-25T17:24:57Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -916,7 +930,8 @@ protected void addDependencies(HashSet<EvergreenService> deps) {\n     }\n \n     public Map<EvergreenService, State> getDependencies() {\n-        return dependencies;\n+        return dependencies.entrySet().stream()\n+                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().startWhen));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5OTkxMA=="}, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNTc2MA==", "bodyText": "Very very clean.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398035760", "createdAt": "2020-03-25T17:25:07Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/SetupDependencyTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import java.util.Map;\n+\n+import com.aws.iot.evergreen.config.Subscriber;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class SetupDependencyTest extends EGServiceTestUtil {\n+\n+    private EvergreenService evergreenService;\n+\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        evergreenService = new EvergreenService(initializeMockedConfig());\n+        evergreenService.context = context;\n+        Kernel mockKernel = Mockito.mock(Kernel.class);\n+        Mockito.when(context.get(Kernel.class)).thenReturn(mockKernel);\n+    }\n+\n+    @Test\n+    void GIVEN_no_dependencies_added_WHEN_dependency_is_added_THEN_dependency_add_successful() throws Exception {\n+        // GIVEN\n+        EvergreenService dep1 = Mockito.mock(EvergreenService.class);\n+        Topic depStateTopic = Mockito.mock(Topic.class);\n+        Mockito.when(depStateTopic.subscribe(Mockito.any(Subscriber.class))).thenReturn(depStateTopic);\n+        Mockito.when(dep1.getStateTopic()).thenReturn(depStateTopic);\n+\n+        // WHEN\n+        evergreenService.addDependency(dep1, State.INSTALLED, false);\n+\n+        // THEN\n+        Map<EvergreenService, State> dependencies = evergreenService.getDependencies();\n+        // verify dependency added\n+        Assertions.assertEquals(1, dependencies.size());\n+        Assertions.assertEquals(State.INSTALLED, dependencies.get(dep1));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzODk1MQ==", "bodyText": "Should we use node in the subscriber ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398038951", "createdAt": "2020-03-25T17:29:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -250,11 +255,11 @@ private Topic initStateTopic(final Topics topics) {\n     }\n \n     private synchronized void initDependenciesTopic() {\n-        dependenciesTopic.subscribe((what, node) -> {\n+        externalDependenciesTopic.subscribe((what, node) -> {\n             if (!WhatHappened.changed.equals(what)) {\n                 return;\n             }\n-            Iterable<String> depList = (Iterable<String>) dependenciesTopic.getOnce();\n+            Iterable<String> depList = (Iterable<String>) externalDependenciesTopic.getOnce();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "committedDate": "2020-03-25T18:15:16Z", "message": "Fix addDependency() behavior\n\n1. When a dependency is added, don't add the state listener multiple times.\n1. When a dependency is removed, remove dependency state listener.\n1. Don't update the dependency topic in addDependency() invocation.\n dependencyTopic only track customer provided config store."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a11060e522e8f6c161582e7f5e3c2fcf8617d907", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a11060e522e8f6c161582e7f5e3c2fcf8617d907", "committedDate": "2020-03-24T21:51:41Z", "message": "Fix addDependency() behavior\n\n1. When a dependency is added, don't add the state listener multiple times.\n1. When a dependency is removed, remove dependency state listener.\n1. Don't update the dependency topic in addDependency() invocation.\n dependencyTopic only track customer provided config store."}, "afterCommit": {"oid": "93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/93aed414ebd9afd00a5a86f5f2dcdf93fc667fae", "committedDate": "2020-03-25T18:15:16Z", "message": "Fix addDependency() behavior\n\n1. When a dependency is added, don't add the state listener multiple times.\n1. When a dependency is removed, remove dependency state listener.\n1. Don't update the dependency topic in addDependency() invocation.\n dependencyTopic only track customer provided config store."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTM1MjIy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-381535222", "createdAt": "2020-03-25T21:04:31Z", "commit": {"oid": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTowNDozMVrOF7uQ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMTowNDozMVrOF7uQ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2ODMwMQ==", "bodyText": "[minor] change to node here as well", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398168301", "createdAt": "2020-03-25T21:04:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -263,7 +268,7 @@ private synchronized void initDependenciesTopic() {\n         });\n \n         try {\n-            setupDependencies((Iterable<String>) dependenciesTopic.getOnce());\n+            setupDependencies((Iterable<String>) externalDependenciesTopic.getOnce());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169cd689a0697f66828b90f166762b00e113328a", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/169cd689a0697f66828b90f166762b00e113328a", "committedDate": "2020-03-25T23:06:42Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjIxNDM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-381621438", "createdAt": "2020-03-26T00:04:57Z", "commit": {"oid": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/16164f45ae6cfe6d0d2d6b36de91bee5d2987f68", "committedDate": "2020-03-25T20:52:53Z", "message": "Address comments"}, "afterCommit": {"oid": "169cd689a0697f66828b90f166762b00e113328a", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/169cd689a0697f66828b90f166762b00e113328a", "committedDate": "2020-03-25T23:06:42Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjI1MjE2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-381625216", "createdAt": "2020-03-26T00:16:38Z", "commit": {"oid": "16164f45ae6cfe6d0d2d6b36de91bee5d2987f68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoxNzoyMFrOF7zE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoxNzoyMFrOF7zE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0NzEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                        if (dependencyInfo == null) {\n          \n          \n            \n                            Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n          \n          \n            \n                            dependentEvergreenService.getStateTopic().subscribe(subscriber);\n          \n          \n            \n                            context.get(Kernel.class).clearODcache();\n          \n          \n            \n                            this.requestRestart();\n          \n          \n            \n                            return new DependencyInfo(startWhen, isDefault, subscriber);\n          \n          \n            \n                        }\n          \n          \n            \n                        dependencyInfo.startWhen = startWhen;\n          \n          \n            \n                        // if a dependency is added as both a default and a non-default, treat it as default dependency\n          \n          \n            \n                        if (!dependencyInfo.isDefaultDependency) {\n          \n          \n            \n                            dependencyInfo.isDefaultDependency = isDefault;\n          \n          \n            \n                        }\n          \n          \n            \n                        return dependencyInfo;\n          \n          \n            \n                    });\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                     // update if exists\n          \n          \n            \n                    dependencies.computeIfPresent(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                        dependencyInfo.startWhen = when;\n          \n          \n            \n                        // if a dependency is added as both a default and a non-default, treat it as default dependency\n          \n          \n            \n                        if (!dependencyInfo.isDefaultDependency) {\n          \n          \n            \n                            dependencyInfo.isDefaultDependency = isDefault;\n          \n          \n            \n                        }\n          \n          \n            \n                        return dependencyInfo;\n          \n          \n            \n                    });\n          \n          \n            \n                    \n          \n          \n            \n                    // if doesn't exist, add it and restart service.\n          \n          \n            \n                     dependencies.computeIfAbsent(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n          \n          \n            \n                            Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n          \n          \n            \n                            dependentEvergreenService.getStateTopic().subscribe(subscriber);\n          \n          \n            \n                            context.get(Kernel.class).clearODcache();\n          \n          \n            \n                            this.requestRestart();\n          \n          \n            \n                            return new DependencyInfo(when, isDefault, subscriber);\n          \n          \n            \n                        }", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398247139", "createdAt": "2020-03-26T00:17:20Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -699,27 +704,38 @@ public Context getContext() {\n      * Add a dependency.\n      *\n      * @param dependentEvergreenService the service to add as a dependency.\n-     * @param when                      the state that the dependent service must be in before starting the current\n+     * @param startWhen                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(\n+            EvergreenService dependentEvergreenService, State startWhen, boolean isDefault)\n             throws InputValidationException {\n-        if (dependentEvergreenService == null || when == null) {\n+        if (dependentEvergreenService == null || startWhen == null) {\n             throw new InputValidationException(\"One or more parameters was null\");\n         }\n \n-        if (dependencies.containsKey(dependentEvergreenService) && dependencies.get(dependentEvergreenService)\n-                .equals(when)) {\n-            return;\n-        }\n-\n-        context.get(Kernel.class).clearODcache();\n-        dependencies.put(dependentEvergreenService, when);\n-        Iterable<String> ser = createDependenciesList(dependencies);\n-        dependenciesTopic.setValue(ser);\n+        dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n+            if (dependencyInfo == null) {\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+                context.get(Kernel.class).clearODcache();\n+                this.requestRestart();\n+                return new DependencyInfo(startWhen, isDefault, subscriber);\n+            }\n+            dependencyInfo.startWhen = startWhen;\n+            // if a dependency is added as both a default and a non-default, treat it as default dependency\n+            if (!dependencyInfo.isDefaultDependency) {\n+                dependencyInfo.isDefaultDependency = isDefault;\n+            }\n+            return dependencyInfo;\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "169cd689a0697f66828b90f166762b00e113328a"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cda72803476df1a31161e42ce983a32a236fbae", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6cda72803476df1a31161e42ce983a32a236fbae", "committedDate": "2020-03-26T01:15:58Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjQ0OTA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-381644905", "createdAt": "2020-03-26T01:24:02Z", "commit": {"oid": "6cda72803476df1a31161e42ce983a32a236fbae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMToyNDowMlrOF70LZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMToyNDowMlrOF70LZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2NTE5MA==", "bodyText": "With what we are doing now, addOrUpdateDependency would be more appropriate!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#discussion_r398265190", "createdAt": "2020-03-26T01:24:02Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -699,27 +704,38 @@ public Context getContext() {\n      * Add a dependency.\n      *\n      * @param dependentEvergreenService the service to add as a dependency.\n-     * @param when                      the state that the dependent service must be in before starting the current\n+     * @param startWhen                      the state that the dependent service must be in before starting the current\n      *                                  service.\n+     * @param isDefault                 True if the dependency is added without explicit declaration\n+     *                                  in 'dependencies' Topic.\n      * @throws InputValidationException if the provided arguments are invalid.\n      */\n-    public synchronized void addDependency(EvergreenService dependentEvergreenService, State when)\n+    public synchronized void addDependency(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cda72803476df1a31161e42ce983a32a236fbae"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f81389bee9f57d28cb6c40631ff991676cd37c7", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f81389bee9f57d28cb6c40631ff991676cd37c7", "committedDate": "2020-03-26T16:55:06Z", "message": "Merge branch 'master' into fixDependencyTopic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b087e099de2f316956d903f7a0d65f95343da41", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1b087e099de2f316956d903f7a0d65f95343da41", "committedDate": "2020-03-26T17:39:55Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzA2MzI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-382306324", "createdAt": "2020-03-26T18:41:47Z", "commit": {"oid": "1b087e099de2f316956d903f7a0d65f95343da41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzE4MjUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/134#pullrequestreview-382318253", "createdAt": "2020-03-26T18:52:25Z", "commit": {"oid": "1b087e099de2f316956d903f7a0d65f95343da41"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2376, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}