{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDMxNTIz", "number": 166, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyMTo1M1rODwIbQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoxNzo1OFrODxVb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk2MjkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyMTo1M1rOGC9h5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozMjo0N1rOGDmhzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODQzOQ==", "bodyText": "given that these branches are the same, just get rid of the if.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405758439", "createdAt": "2020-04-08T19:21:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -335,12 +334,11 @@ private void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n+    @SuppressFBWarnings({\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"DB_DUPLICATE_BRANCHES\"})\n     private void enqueueStateEvent(Object event) {\n         synchronized (stateEventLock) {\n             if (event instanceof State) {\n                 // override existing reportState\n-                stateEventQueue.clear();\n                 stateEventQueue.offer(event);\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTM0Mg==", "bodyText": "Also please remove the new suppression for findbugs warning", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405911342", "createdAt": "2020-04-09T01:50:56Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -335,12 +334,11 @@ private void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n+    @SuppressFBWarnings({\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"DB_DUPLICATE_BRANCHES\"})\n     private void enqueueStateEvent(Object event) {\n         synchronized (stateEventLock) {\n             if (event instanceof State) {\n                 // override existing reportState\n-                stateEventQueue.clear();\n                 stateEventQueue.offer(event);\n             } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODQzOQ=="}, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDE1Ng==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406430156", "createdAt": "2020-04-09T19:32:47Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -335,12 +334,11 @@ private void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n+    @SuppressFBWarnings({\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"DB_DUPLICATE_BRANCHES\"})\n     private void enqueueStateEvent(Object event) {\n         synchronized (stateEventLock) {\n             if (event instanceof State) {\n                 // override existing reportState\n-                stateEventQueue.clear();\n                 stateEventQueue.offer(event);\n             } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODQzOQ=="}, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk1MjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo1MDoyNlrOGDG2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTozNzo0MFrOGDmrqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTIzMg==", "bodyText": "Nit - You seem to have added some space here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r405911232", "createdAt": "2020-04-09T01:50:26Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -412,7 +410,7 @@ public final void requestReinstall() {\n             setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n         }\n     }\n-\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMjY4Mw==", "bodyText": "Fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406432683", "createdAt": "2020-04-09T19:37:40Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -412,7 +410,7 @@ public final void requestReinstall() {\n             setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n         }\n     }\n-\n+   ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTIzMg=="}, "originalCommit": {"oid": "4a7fb67fb857089f305f8759ecec33a7c9cf0652"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ2OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo0OTo1M1rOGDo5sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjozMToxMlrOGDrl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTA0Mg==", "bodyText": "not a problem, but why the change from array to linked?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469042", "createdAt": "2020-04-09T20:49:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -76,8 +76,7 @@\n \n     // A state event can be a state transition event, or a desired state updated notification.\n     // TODO: make class of StateEvent instead of generic object.\n-    private final BlockingQueue<Object> stateEventQueue = new ArrayBlockingQueue<>(1);\n-    private final Object stateEventLock = new Object();\n+    private final BlockingQueue<Object> stateEventQueue = new LinkedBlockingQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMzEwNQ==", "bodyText": "The intention was to avoid losing any state change event. And also to avoid being blocked. Therefore, I changed this to LinkedBlockingQueue without a bound.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406513105", "createdAt": "2020-04-09T22:31:12Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -76,8 +76,7 @@\n \n     // A state event can be a state transition event, or a desired state updated notification.\n     // TODO: make class of StateEvent instead of generic object.\n-    private final BlockingQueue<Object> stateEventQueue = new ArrayBlockingQueue<>(1);\n-    private final Object stateEventLock = new Object();\n+    private final BlockingQueue<Object> stateEventQueue = new LinkedBlockingQueue<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTA0Mg=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ3MTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MDozOFrOGDo7TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MDozOFrOGDo7TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTQ1Mw==", "bodyText": "remove print stack trace.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469453", "createdAt": "2020-04-09T20:50:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);\n+        } catch (InterruptedException e) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ3NDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MTo0M1rOGDo9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDoyNDoyNFrOGDtjlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTk2Ng==", "bodyText": "this put is blocking, so it won't be able to put until there is room. Is this what we want? If so, we need to be careful with the InterruptedException since that means that the thread wants to be shutdown. As such, that signal should be propagated by not catching it, but changing the signature instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406469966", "createdAt": "2020-04-09T20:51:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTIxOA==", "bodyText": "I realized that this will affect our getReportState() logic, where it's assuming the queue size is 1 and trying to get one element. However, with this logic being changed, the state event queue can be arbitrary long and not all element are state change event. In this case the getReportState() logic will be updated, basically keep reading the until reach an element that's type of state change event.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406521218", "createdAt": "2020-04-09T22:56:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTk2Ng=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNTMxNQ==", "bodyText": "Good point about InterruptedException. If we propagate InterruptedException here, the caller is in no better position to handle it.\nSince we are using LinkedBlockingQueue, I am going to change it back tooffer, but to log the error here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406535315", "createdAt": "2020-04-09T23:46:51Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTk2Ng=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0NTMwMw==", "bodyText": "@ShirleyZheng92 Do you mean \"DesiredStateUpdated\"? How is \"DesiredStateUpdated\" being used? I only see one place that we are inserting it into the queue. But there is no code that tests against if a state is \"DesiredStateUpdated\".\nIs DesiredStateUpdated actually being used? Can we remove it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406545303", "createdAt": "2020-04-10T00:24:24Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTk2Ng=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ3NzU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MjoyOVrOGDo-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo0NzoxM1rOGDs8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDM5OA==", "bodyText": "you can also use AtomicInteger for this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406470398", "createdAt": "2020-04-09T20:52:29Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -15,11 +17,23 @@\n import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import javax.inject.Inject;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n @ExtendWith(MockitoExtension.class)\n-class EvergreenServiceTest extends EGServiceTestUtil {\n+public class EvergreenServiceTest extends EGServiceTestUtil {\n+    private static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final int NUM = 100;\n \n-    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static int n = 0; // Easy way to pass n without creating a mutable integer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjkwOQ==", "bodyText": "Nice. Done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406526909", "createdAt": "2020-04-09T23:15:20Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -15,11 +17,23 @@\n import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import javax.inject.Inject;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n @ExtendWith(MockitoExtension.class)\n-class EvergreenServiceTest extends EGServiceTestUtil {\n+public class EvergreenServiceTest extends EGServiceTestUtil {\n+    private static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final int NUM = 100;\n \n-    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static int n = 0; // Easy way to pass n without creating a mutable integer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDM5OA=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNTQxNg==", "bodyText": "Changed. Thanks.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406535416", "createdAt": "2020-04-09T23:47:13Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -15,11 +17,23 @@\n import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import javax.inject.Inject;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadPoolExecutor;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n \n @ExtendWith(MockitoExtension.class)\n-class EvergreenServiceTest extends EGServiceTestUtil {\n+public class EvergreenServiceTest extends EGServiceTestUtil {\n+    private static final String STATE_TOPIC_NAME = \"_State\";\n+    private static final int NUM = 100;\n \n-    public static final String STATE_TOPIC_NAME = \"_State\";\n+    private static int n = 0; // Easy way to pass n without creating a mutable integer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDM5OA=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ4NjMwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1NTowMVrOGDpEQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo0NzozMlrOGDs9RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MTc0Nw==", "bodyText": "do not await without a timeout. Use assertTrue(cd.await(<timeout>))", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406471747", "createdAt": "2020-04-09T20:55:01Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;\n+        });\n+\n+        context.get(AwesomeService.class).requestStart();\n+        cd.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjgyMQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406526821", "createdAt": "2020-04-09T23:15:05Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;\n+        });\n+\n+        context.get(AwesomeService.class).requestStart();\n+        cd.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MTc0Nw=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNTQ5Mw==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406535493", "createdAt": "2020-04-09T23:47:32Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;\n+        });\n+\n+        context.get(AwesomeService.class).requestStart();\n+        cd.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MTc0Nw=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ5MzQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1NzozMlrOGDpI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozODoxM1rOGD_dHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3Mjk1OQ==", "bodyText": "don't report stopping as no customer service should ever do this. Try ERRORED instead.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406472959", "createdAt": "2020-04-09T20:57:32Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNDE0MA==", "bodyText": "For some reason, if I use ERRORED, the lifecycle thread notifies me ~1000 times instead of ~200. I haven't studied the code well enough to understand why yet. But with STOPPING, there are only two extra events when running on my mac which i can explain.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406834140", "createdAt": "2020-04-10T16:27:15Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3Mjk1OQ=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODU1Ng==", "bodyText": "The reason should be that the service is restarted, so it will create this thread again.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406838556", "createdAt": "2020-04-10T16:38:13Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3Mjk1OQ=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ5NTk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1ODoxOFrOGDpKoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxNDo0MlrOGDsbAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MzM3Ng==", "bodyText": "Why not have this be a countdownlatch also? That way you can wait for it to reach 0 instead of just sleeping 10 seconds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406473376", "createdAt": "2020-04-09T20:58:18Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjcyMw==", "bodyText": ":)   Thanks for the suggestion. Done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406526723", "createdAt": "2020-04-09T23:14:42Z", "author": {"login": "fufranci"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -66,4 +78,55 @@ void GIVEN_a_new_state_WHEN_getState_THEN_return_the_new_state() {\n \n         Mockito.verify(stateTopic).getOnce();\n     }\n+\n+    private class AwesomeService extends EvergreenService {\n+        @Inject\n+        private CountDownLatch cd;\n+\n+        @Inject\n+        public AwesomeService(Context context) {\n+            super(Topics.errorNode(context, \"AwesomeService\", \"testing\"));\n+        }\n+\n+        @Override\n+        public void startup() {\n+            new Thread(() -> {\n+                for (int i = 0; i < NUM; i++) {\n+                    reportState(State.RUNNING);\n+                    reportState(State.STOPPING);\n+                }\n+\n+                cd.countDown();\n+            }).start();\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_a_service_WHEN_reportState_THEN_all_state_changes_are_notified() throws InterruptedException {\n+        ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n+        ExecutorService cachedPool = Executors.newCachedThreadPool();\n+        CountDownLatch cd = new CountDownLatch(1);\n+\n+        Context context = new Context();\n+        context.put(ScheduledThreadPoolExecutor.class, ses);\n+        context.put(ScheduledExecutorService.class, ses);\n+        context.put(Executor.class, cachedPool);\n+        context.put(ExecutorService.class, cachedPool);\n+        context.put(ThreadPoolExecutor.class, ses);\n+        context.put(CountDownLatch.class, cd);\n+        context.addGlobalStateChangeListener((service, oldState, newState, latest) -> {\n+            n++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MzM3Ng=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjgwNzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo1NzoxNlrOGDsGhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo0OToxOFrOGDs_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTQ3OQ==", "bodyText": "NIT: add \"interrupted\" in the error message", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406521479", "createdAt": "2020-04-09T22:57:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);\n+        } catch (InterruptedException e) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzNTk5NA==", "bodyText": "See the discussion about catching InterruptedException. I am going to revert back to use offer but log any error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406535994", "createdAt": "2020-04-09T23:49:18Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -261,18 +260,11 @@ private void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        try {\n+            stateEventQueue.put(event);\n+        } catch (InterruptedException e) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTQ3OQ=="}, "originalCommit": {"oid": "642fd9f01fcdc580fa50930e7040fb1365e1974a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDkzNjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozNzozOFrOGD_cHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozNzozOFrOGD_cHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODMwMg==", "bodyText": "this can be removed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406838302", "createdAt": "2020-04-10T16:37:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -197,18 +197,8 @@ void setDesiredState(State... state) {\n \n     @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10fbad6785762c26c8a4cb4ea1f03ba53d5a781"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM4MDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOTowNFrOGEDruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowMzoyMVrOGEtUtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzMg==", "bodyText": "please add comments for what is going on here and why.\nThis seems a bit dangerous to me since we use the queue to unblock the thread, but here you're going to be removing things from the queue, possibly racing with the lifecycle thread it would seem.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406907832", "createdAt": "2020-04-10T19:29:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -145,7 +145,11 @@ synchronized void reportState(State newState) {\n \n     private Optional<State> getReportState() {\n         Object top = stateEventQueue.poll();\n-        if (top instanceof State) {\n+        while (top != null && !(top instanceof State)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTI5Ng==", "bodyText": "You probably will drain the queue unintentionally", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406911296", "createdAt": "2020-04-10T19:38:59Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -145,7 +145,11 @@ synchronized void reportState(State newState) {\n \n     private Optional<State> getReportState() {\n         Object top = stateEventQueue.poll();\n-        if (top instanceof State) {\n+        while (top != null && !(top instanceof State)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzMg=="}, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMzMyNQ==", "bodyText": "Hmm... I thought I understood the problem but I am confused again. Here is the original code:\n    private Optional<State> getReportState() {\n        Object top = stateEventQueue.poll();\n        if (top instanceof State) {\n            return Optional.of((State) top);\n        }\n        return Optional.empty();\n    }\n\n\nIf the queue is empty, we return null.\nIf the first element is a State, we return that state.\nIf the first element is the special \"DesiredStateUpdated\" value, we return null.\n\nSo why does this code not work when we have an unbound queue? Can you show me an example of the queue that would make the existing code to fail? For example:\n[S, X] where\nS - valid state\nX - special value \"DesiredStateUpdated\"\nHow would the queue look like that would cause a problem?\nThe logic seems to be very tricky. Currently, getReportState is called by two places:\n\nhandleCurrentStateNew\nhandleCurrentStateStopping\n\nWhen the thread is there, that also means it is not waiting at take.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r406933325", "createdAt": "2020-04-10T20:39:13Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -145,7 +145,11 @@ synchronized void reportState(State newState) {\n \n     private Optional<State> getReportState() {\n         Object top = stateEventQueue.poll();\n-        if (top instanceof State) {\n+        while (top != null && !(top instanceof State)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzMg=="}, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MDA2OQ==", "bodyText": "Discussed offline together with  both Shirley and Michael and we think what is in the PR is fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407590069", "createdAt": "2020-04-13T17:03:21Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -145,7 +145,11 @@ synchronized void reportState(State newState) {\n \n     private Optional<State> getReportState() {\n         Object top = stateEventQueue.poll();\n-        if (top instanceof State) {\n+        while (top != null && !(top instanceof State)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzMg=="}, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDE3MjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoxOTo0MFrOGEr3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowMzozMlrOGEtVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjE1NA==", "bodyText": "I'd still prefer using the logic of\nif (event instanceof State || stateEventQueue.emtpy()) {\n  stateEventQueue.offer(event);\n} \n\nrequire lifecycle change calls can be invoked arbitrary many times, causing the \"DesiredStateUpdated\" event to accumulate in the queue.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407566154", "createdAt": "2020-04-13T16:19:40Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -195,20 +199,9 @@ void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        if (!stateEventQueue.offer(event)) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU3MTIzOQ==", "bodyText": "How does that make sense? If we do that, then we're just in the same situation that we were before this change, meaning that transitions will be lost.\nNevermind, it is || so that's ok.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407571239", "createdAt": "2020-04-13T16:28:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -195,20 +199,9 @@ void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        if (!stateEventQueue.offer(event)) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjE1NA=="}, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MDE1NA==", "bodyText": "Discussed offline together with  both Shirley and Michael and we think what is in the PR is fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407590154", "createdAt": "2020-04-13T17:03:32Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -195,20 +199,9 @@ void setDesiredState(State... state) {\n         }\n     }\n \n-    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\")\n     private void enqueueStateEvent(Object event) {\n-        synchronized (stateEventLock) {\n-            if (event instanceof State) {\n-                // override existing reportState\n-                stateEventQueue.clear();\n-                stateEventQueue.offer(event);\n-            } else {\n-                stateEventQueue.offer(event);\n-\n-                // Ignore returned value of offer().\n-                // If enqueue isn't successful, the event queue has contents and there is no need to send another\n-                // trigger to process state transition.\n-            }\n+        if (!stateEventQueue.offer(event)) {\n+            logger.error(\"couldn't put the new event to stateEventQueue\");\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2NjE1NA=="}, "originalCommit": {"oid": "97c2518e21824378421016481fb77be0de87c094"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDM0MTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzowOTowNVrOGEtglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzozMDo1MVrOGEuPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzExMA==", "bodyText": "isEmpty isn't necessarily correct given that it contains both states and strings, but this state change is only for states.\nI think that given this limitation, I'd rather not have the latest argument added to this. Also, since none of your changes are using the latest at all. Let's reinvestigate if we need it at a later date. For now, I'm happy to just have the fix to unbound the queue.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407593110", "createdAt": "2020-04-13T17:09:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -100,7 +99,8 @@ private void updateStateAndBroadcast(State newState) {\n         synchronized (State.class) {\n             prevState = currentState;\n             stateTopic.withValue(newState);\n-            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState);\n+            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState,\n+                    stateEventQueue.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65ce5d92be64049a795d80c3f4d419dc8c1f91e7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwNTA4Ng==", "bodyText": ":(  but good call.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407605086", "createdAt": "2020-04-13T17:30:51Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -100,7 +99,8 @@ private void updateStateAndBroadcast(State newState) {\n         synchronized (State.class) {\n             prevState = currentState;\n             stateTopic.withValue(newState);\n-            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState);\n+            evergreenService.getContext().globalNotifyStateChanged(evergreenService, prevState, newState,\n+                    stateEventQueue.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5MzExMA=="}, "originalCommit": {"oid": "65ce5d92be64049a795d80c3f4d419dc8c1f91e7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDU4MDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoxNzo1OFrOGEv2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODoyMzo1OFrOGEwDEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMTQ2MA==", "bodyText": "Why keep this at all?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407631460", "createdAt": "2020-04-13T18:17:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -257,9 +257,10 @@ public synchronized void removeGlobalStateChangeListener(GlobalStateChangeListen\n      * @param changedService the service which had a state change\n      * @param oldState  the old state of the service\n      * @param newState the new state of the service\n+     * @param latest True if this is the latest state. False if there are more state changes coming.\n      */\n     public synchronized void globalNotifyStateChanged(EvergreenService changedService, final State oldState,\n-                                                      final State newState) {\n+                                                      final State newState, boolean latest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9935cc03b7bab092cd0d80d8f8150d8e9cd80417"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzNDcwNw==", "bodyText": "Missed. Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/166#discussion_r407634707", "createdAt": "2020-04-13T18:23:58Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -257,9 +257,10 @@ public synchronized void removeGlobalStateChangeListener(GlobalStateChangeListen\n      * @param changedService the service which had a state change\n      * @param oldState  the old state of the service\n      * @param newState the new state of the service\n+     * @param latest True if this is the latest state. False if there are more state changes coming.\n      */\n     public synchronized void globalNotifyStateChanged(EvergreenService changedService, final State oldState,\n-                                                      final State newState) {\n+                                                      final State newState, boolean latest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYzMTQ2MA=="}, "originalCommit": {"oid": "9935cc03b7bab092cd0d80d8f8150d8e9cd80417"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 22, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}