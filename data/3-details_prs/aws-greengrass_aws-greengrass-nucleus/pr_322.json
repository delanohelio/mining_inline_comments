{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNjE2NzQy", "number": 322, "title": "Cache credentials in TES", "bodyText": "Issue #, if available:\nDescription of changes:\nAdd caching in TES based on expiration time in TES response\nWhy is this change necessary:\nIf the credentials haven't expired, there is no need to make a call to TES in cloud. Instead, previously cached credentials can be used.\nHow was this change tested:\nA unit test that covers various scenarios based on current time and expiration time\nmvn test -Dtest=CredentialRequestHandlerTest\nAny additional information or context required to review the change:\nCaching of errors (4xx, 5xx etc) will be added in a later pr\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-18T01:44:08Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322", "merged": true, "mergeCommit": {"oid": "07107b758b5908b78cbd8ce89aa00f06adf82000"}, "closed": true, "closedAt": "2020-07-21T22:49:02Z", "author": {"login": "popanmol"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1-NYgAH2gAyNDUxNjE2NzQyOjRjNWUwZGY3ZmNhYWJiOWVlNzQzNDk0M2QwNWQzOGNkYjhlYjM4ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3NzIgAH2gAyNDUxNjE2NzQyOjc2OWZiZTczYTk4YTFiMTQzZTg4ZjczZGY1NzZjYzk4NDE2YmMwMmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4c5e0df7fcaabb9ee7434943d05d38cdb8eb38fd", "author": {"user": {"login": "popanmol", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4c5e0df7fcaabb9ee7434943d05d38cdb8eb38fd", "committedDate": "2020-07-18T01:32:48Z", "message": "Cache credentials in TES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03", "author": {"user": {"login": "popanmol", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/66ba55f6eb430360ff7ebfeedbce82f908975a03", "committedDate": "2020-07-18T02:02:28Z", "message": "Merge branch 'master' into tes-cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzgxMDY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#pullrequestreview-451781068", "createdAt": "2020-07-20T16:44:21Z", "commit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NDoyMVrOG0WmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo1MDoxMVrOG0W0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTM5Mw==", "bodyText": "Lets key the credentials by role name or url. This prevents accidental overrides of credentials, lets say when we update the role in the config.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457549393", "createdAt": "2020-07-20T16:44:21Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTY0NQ==", "bodyText": "Do you want to create a cached POJO  instead of different fields here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457549645", "createdAt": "2020-07-20T16:44:48Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;\n+\n+    private int cachedResponseCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MTAxMg==", "bodyText": "Lets always log the real expiry time, easier to read logs, then i dont have to do the math of +5 to debug what happened.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457551012", "createdAt": "2020-07-20T16:47:08Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MjUzOQ==", "bodyText": "If parseExpiry or translate throws, you will set credentials to empty. Do you want that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457552539", "createdAt": "2020-07-20T16:49:32Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),\n+                            TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                } else {\n+                    LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                }\n+            }\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scenarios\n             LOGGER.error(\"Encountered error while fetching credentials\", e);\n         }\n+\n+        cacheExpiry = newExpiry;\n+        cachedCredentials = response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1Mjk0Mg==", "bodyText": "Lets add test case for those cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457552942", "createdAt": "2020-07-20T16:50:11Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),\n+                            TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                } else {\n+                    LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                }\n+            }\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scenarios\n             LOGGER.error(\"Encountered error while fetching credentials\", e);\n         }\n+\n+        cacheExpiry = newExpiry;\n+        cachedCredentials = response;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MjUzOQ=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc75eb938932fb684edce1f6806ae5afd17d1d2e", "author": {"user": {"login": "popanmol", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc75eb938932fb684edce1f6806ae5afd17d1d2e", "committedDate": "2020-07-21T00:44:40Z", "message": "cache map and unparsable response body"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0c4be22bba7c4668de94b80b25a0360983c58a", "author": {"user": {"login": "popanmol", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd0c4be22bba7c4668de94b80b25a0360983c58a", "committedDate": "2020-07-21T01:09:20Z", "message": "add expiry to cache object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d96453a7c918dafb9a1999d8af368850df8f0306", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d96453a7c918dafb9a1999d8af368850df8f0306", "committedDate": "2020-07-21T02:47:21Z", "message": "Merge branch 'master' into tes-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "173a75dac4c8be70c0ff215191ca5bb2c80a8edc", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/173a75dac4c8be70c0ff215191ca5bb2c80a8edc", "committedDate": "2020-07-21T03:16:59Z", "message": "Merge branch 'master' into tes-cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjkzMzc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#pullrequestreview-452693376", "createdAt": "2020-07-21T17:49:10Z", "commit": {"oid": "173a75dac4c8be70c0ff215191ca5bb2c80a8edc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODU1Mjkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#pullrequestreview-452855291", "createdAt": "2020-07-21T21:51:00Z", "commit": {"oid": "173a75dac4c8be70c0ff215191ca5bb2c80a8edc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyODU1NDU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#pullrequestreview-452855459", "createdAt": "2020-07-21T21:51:20Z", "commit": {"oid": "173a75dac4c8be70c0ff215191ca5bb2c80a8edc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769fbe73a98a1b143e88f73df576cc98416bc02c", "author": {"user": {"login": "popanmol", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/769fbe73a98a1b143e88f73df576cc98416bc02c", "committedDate": "2020-07-21T22:16:32Z", "message": "Merge branch 'master' into tes-cache"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2909, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}