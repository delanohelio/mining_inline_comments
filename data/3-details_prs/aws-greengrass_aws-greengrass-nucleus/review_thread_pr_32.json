{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNzY4Mzc1", "number": 32, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjozMTozM1rODXWTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxNjowNFrODYB1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA5MTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Configuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjozMTozM1rOFcnIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxMDozNVrOFc_0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTQ4Ng==", "bodyText": "[nit]\nMaybe useSourceTimestamp or sourceTimestampAvailable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365545486", "createdAt": "2020-01-11T22:31:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Configuration.java", "diffHunk": "@@ -99,12 +97,13 @@ public void deepForEachTopic(Consumer<Topic> f) {\n         root.deepForEachTopic(f);\n     }\n     public Configuration read(String s) throws IOException {\n-        return s.contains(\":/\") ? read(new URL(s)) : read(Paths.get(s));\n+        return s.contains(\":/\") ? read(new URL(s), false) : read(Paths.get(s));\n     }\n-    public Configuration read(URL url) throws IOException {\n+    public Configuration read(URL url, boolean sourceTimestamp) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MDA5Mw==", "bodyText": "Fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365950093", "createdAt": "2020-01-13T18:10:35Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/config/Configuration.java", "diffHunk": "@@ -99,12 +97,13 @@ public void deepForEachTopic(Consumer<Topic> f) {\n         root.deepForEachTopic(f);\n     }\n     public Configuration read(String s) throws IOException {\n-        return s.contains(\":/\") ? read(new URL(s)) : read(Paths.get(s));\n+        return s.contains(\":/\") ? read(new URL(s), false) : read(Paths.get(s));\n     }\n-    public Configuration read(URL url) throws IOException {\n+    public Configuration read(URL url, boolean sourceTimestamp) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTQ4Ng=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA5Mjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjozNDoyOVrOFcnIbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODowOTowMlrOFc_yEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTU4Mw==", "bodyText": "Could this be made AutoCloseable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365545583", "createdAt": "2020-01-11T22:34:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -12,10 +12,12 @@\n public class ConfigurationWriter implements Closeable, Subscriber {\n     private final Writer out;\n     private final Configuration conf;\n+    private  boolean flushImmediately;\n     public static void dump(Configuration c, Path file) {\n         try (CommitableWriter out = CommitableWriter.abandonOnClose(file);\n                 ConfigurationWriter cs = new ConfigurationWriter(c, out)) {\n             cs.writeAll();\n+            cs.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0NjYwNQ==", "bodyText": "It could be, but it's already Closeable (from BufferedWriter), which is a subclass of AutoCloseable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365646605", "createdAt": "2020-01-13T04:49:59Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -12,10 +12,12 @@\n public class ConfigurationWriter implements Closeable, Subscriber {\n     private final Writer out;\n     private final Configuration conf;\n+    private  boolean flushImmediately;\n     public static void dump(Configuration c, Path file) {\n         try (CommitableWriter out = CommitableWriter.abandonOnClose(file);\n                 ConfigurationWriter cs = new ConfigurationWriter(c, out)) {\n             cs.writeAll();\n+            cs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTU4Mw=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0Njg3NA==", "bodyText": "Ah, in that case, can't the call to close be omitted here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365646874", "createdAt": "2020-01-13T04:51:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -12,10 +12,12 @@\n public class ConfigurationWriter implements Closeable, Subscriber {\n     private final Writer out;\n     private final Configuration conf;\n+    private  boolean flushImmediately;\n     public static void dump(Configuration c, Path file) {\n         try (CommitableWriter out = CommitableWriter.abandonOnClose(file);\n                 ConfigurationWriter cs = new ConfigurationWriter(c, out)) {\n             cs.writeAll();\n+            cs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTU4Mw=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk0OTQ1Nw==", "bodyText": "It's worse: the close() should have been a commit()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365949457", "createdAt": "2020-01-13T18:09:02Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -12,10 +12,12 @@\n public class ConfigurationWriter implements Closeable, Subscriber {\n     private final Writer out;\n     private final Configuration conf;\n+    private  boolean flushImmediately;\n     public static void dump(Configuration c, Path file) {\n         try (CommitableWriter out = CommitableWriter.abandonOnClose(file);\n                 ConfigurationWriter cs = new ConfigurationWriter(c, out)) {\n             cs.writeAll();\n+            cs.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTU4Mw=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA5Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjozODozN1rOFcnJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMTowODo0NVrOFcsESg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTczMQ==", "bodyText": "[nit]\nMaybe something like bubbleUpChanges = true or even simply notifyParentOfChanges =true  instead of transparency. Transparency to me sounds a bit like the change is only ever bubbled up and not handled at all at this node.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365545731", "createdAt": "2020-01-11T22:38:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -20,6 +20,7 @@ protected Node(Context c, String n, Topics p) {\n     public final Context context;\n     public final String name;\n     public final Topics parent;\n+    private boolean transParent; // parent doesn't get notified of changes to this node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyNjQ0Mg==", "bodyText": "You're right, it's a dumb name.  I'll pick a better one.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365626442", "createdAt": "2020-01-13T01:08:45Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -20,6 +20,7 @@ protected Node(Context c, String n, Topics p) {\n     public final Context context;\n     public final String name;\n     public final Topics parent;\n+    private boolean transParent; // parent doesn't get notified of changes to this node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NTczMQ=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODA5NzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMjo1MjoyM1rOFcnK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwMToyNzoxMlrOFcsJNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjIzMA==", "bodyText": "I see you're returning the lower 8 bits of the exit code, but why is this needed? Shouldn't it just return the exit code as-is?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365546230", "createdAt": "2020-01-11T22:52:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -40,31 +48,57 @@ public void startup() {\n     }\n     @Override\n     public void run() {\n-//        log().significant(\"running\", this);\n         if (run(\"run\", exit -> {\n-            if (exit == 0) {\n-                setState(State.Finished);\n-                context.getLog().significant(\"Finished\", getName());\n-            } else {\n-                setState(State.Errored);\n-                context.getLog().error(\"Failed\", getName(), exit);\n-            }\n+            currentScript = null;\n+            if(!inShutdown)\n+                if (exit == 0) {\n+                    setState(State.Finished);\n+                    context.getLog().significant(getName(), \"Finished\");\n+                } else {\n+                    setState(State.Errored);\n+                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                }\n         })==RunStatus.NothingDone) {\n-            context.getLog().significant(\"run: NothingDone\", getName());\n+            context.getLog().significant(getName(), \"run: NothingDone\");\n             setState(State.Finished);\n         }\n     }\n-\n+    static final String[] sigCodes = {\n+        \"SIGHUP\", \"SIGINT\", \"SIGQUIT\", \"SIGILL\", \"SIGTRAP\", \"SIGIOT\", \"SIGBUS\", \"SIGFPE\",\n+        \"SIGKILL\", \"SIGUSR1\", \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\",\n+        \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\", \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\",\n+        \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\", \"SIGIO\",\n+        \"SIGPWR\", \"SIGSYS\",\n+    };\n+    public static String exit2String(int exitCode) {\n+        return exitCode>128 && exitCode<129+sigCodes.length\n+            ? sigCodes[exitCode-129]\n+            : \"exit(\"+((exitCode<<24)>>24)+\")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyNzcwMg==", "bodyText": "Well...  The posix standard does specify that the exit code is unsigned.  But, historically, lots of code does exit(-1), or even exit(-n) for errors.  Standard practice is a mess, but I just find that exit(-1) is less confusing than exit(255), even though they're exactly the same.  It's easy enough to revert.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365627702", "createdAt": "2020-01-13T01:27:12Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -40,31 +48,57 @@ public void startup() {\n     }\n     @Override\n     public void run() {\n-//        log().significant(\"running\", this);\n         if (run(\"run\", exit -> {\n-            if (exit == 0) {\n-                setState(State.Finished);\n-                context.getLog().significant(\"Finished\", getName());\n-            } else {\n-                setState(State.Errored);\n-                context.getLog().error(\"Failed\", getName(), exit);\n-            }\n+            currentScript = null;\n+            if(!inShutdown)\n+                if (exit == 0) {\n+                    setState(State.Finished);\n+                    context.getLog().significant(getName(), \"Finished\");\n+                } else {\n+                    setState(State.Errored);\n+                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                }\n         })==RunStatus.NothingDone) {\n-            context.getLog().significant(\"run: NothingDone\", getName());\n+            context.getLog().significant(getName(), \"run: NothingDone\");\n             setState(State.Finished);\n         }\n     }\n-\n+    static final String[] sigCodes = {\n+        \"SIGHUP\", \"SIGINT\", \"SIGQUIT\", \"SIGILL\", \"SIGTRAP\", \"SIGIOT\", \"SIGBUS\", \"SIGFPE\",\n+        \"SIGKILL\", \"SIGUSR1\", \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\",\n+        \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\", \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\",\n+        \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\", \"SIGIO\",\n+        \"SIGPWR\", \"SIGSYS\",\n+    };\n+    public static String exit2String(int exitCode) {\n+        return exitCode>128 && exitCode<129+sigCodes.length\n+            ? sigCodes[exitCode-129]\n+            : \"exit(\"+((exitCode<<24)>>24)+\")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjIzMA=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODEwMTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQyMzowNDowNFrOFcnMrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMTozNVrOFdIhmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjY2OA==", "bodyText": "Should the return type be a Duration or a date? Otherwise it is difficult to know (just from the interface) that the long in the return represents time in milliseconds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365546668", "createdAt": "2020-01-11T23:04:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.remove(d);\n+    }\n+    /**\n+     * \n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disrutableChecks) c.disruptableCheck(false); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disrutableChecks) {\n+                long ct = c.disruptableCheck(true);\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * \n+         * @param disruptionPending true iff a disruption is pending.  After a disruption,\n+         *      disruptableCheck is called with this being false to signal to the handler\n+         *      that it's OK to start activity\n+         * @return Estimated time that this handler will be willing to be disrupted. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long disruptableCheck(boolean disruptionPending);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYyODAzOA==", "bodyText": "I'll make it clearer.  Duration and Date don't add much other than heap churn.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365628038", "createdAt": "2020-01-13T01:31:07Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.remove(d);\n+    }\n+    /**\n+     * \n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disrutableChecks) c.disruptableCheck(false); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disrutableChecks) {\n+                long ct = c.disruptableCheck(true);\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * \n+         * @param disruptionPending true iff a disruption is pending.  After a disruption,\n+         *      disruptableCheck is called with this being false to signal to the handler\n+         *      that it's OK to start activity\n+         * @return Estimated time that this handler will be willing to be disrupted. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long disruptableCheck(boolean disruptionPending);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjY2OA=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MDk2MA==", "bodyText": "I'm not sure how this function would be implemented, but since the return value only applies when disruptionPending is true, is it worth splitting this into two functions?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365660960", "createdAt": "2020-01-13T06:44:16Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.remove(d);\n+    }\n+    /**\n+     * \n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disrutableChecks) c.disruptableCheck(false); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disrutableChecks) {\n+                long ct = c.disruptableCheck(true);\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * \n+         * @param disruptionPending true iff a disruption is pending.  After a disruption,\n+         *      disruptableCheck is called with this being false to signal to the handler\n+         *      that it's OK to start activity\n+         * @return Estimated time that this handler will be willing to be disrupted. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long disruptableCheck(boolean disruptionPending);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjY2OA=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDYwMw==", "bodyText": "Funny you should ask....  Yes.  I almost did it that way.  The semantics would be cleaner.  The nice thing about interfaces with one method is that you can create instances with the lambda syntax.  With more than one you have to use the clunkier inner class syntax.  So it was a choice between clean semantics or clean syntax.  When I say it that way, it's clear I should have leaned the other way.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365954603", "createdAt": "2020-01-13T18:20:54Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.remove(d);\n+    }\n+    /**\n+     * \n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disrutableChecks) c.disruptableCheck(false); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disrutableChecks) {\n+                long ct = c.disruptableCheck(true);\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * \n+         * @param disruptionPending true iff a disruption is pending.  After a disruption,\n+         *      disruptableCheck is called with this being false to signal to the handler\n+         *      that it's OK to start activity\n+         * @return Estimated time that this handler will be willing to be disrupted. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long disruptableCheck(boolean disruptionPending);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjY2OA=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MjY5Ng==", "bodyText": "Fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366092696", "createdAt": "2020-01-14T00:01:35Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.remove(d);\n+    }\n+    /**\n+     * \n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disrutableChecks) c.disruptableCheck(false); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disrutableChecks) {\n+                long ct = c.disruptableCheck(true);\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * \n+         * @param disruptionPending true iff a disruption is pending.  After a disruption,\n+         *      disruptableCheck is called with this being false to signal to the handler\n+         *      that it's OK to start activity\n+         * @return Estimated time that this handler will be willing to be disrupted. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long disruptableCheck(boolean disruptionPending);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0NjY2OA=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODEyNTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDozNzozMFrOFcnY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDozNzozMFrOFcnY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTgxOQ==", "bodyText": "nit: disruptableChecks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365549819", "createdAt": "2020-01-12T00:37:30Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODEyNTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDozNzo1MFrOFcnZCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDozNzo1MFrOFcnZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTgzNQ==", "bodyText": "nit: addDisruptableCheck", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365549835", "createdAt": "2020-01-12T00:37:50Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODEyNTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQwMDozODowMlrOFcnZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODo0MToyN1rOFdApbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTgzOQ==", "bodyText": "nit: removeDisruptableCheck", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365549839", "createdAt": "2020-01-12T00:38:02Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk2MzYyOQ==", "bodyText": "If I were a superhero, my nemesis would be spelling.   :-)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365963629", "createdAt": "2020-01-13T18:41:27Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disrutableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisrutableCheck(DisruptableCheck d) {\n+        disrutableChecks.add(d);\n+    }\n+    public void removeDisrutableCheck(DisruptableCheck d) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0OTgzOQ=="}, "originalCommit": {"oid": "1bc7066a951cdd500ba87687bc375c83e6b8a0e0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODk0MDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjozNzowNFrOFcuHEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDowMDowNVrOFdIgKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1OTkyMQ==", "bodyText": "nit: can you add a todo for these timeouts? Presumably we want them to be configurable in the future", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r365659921", "createdAt": "2020-01-13T06:37:04Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -208,17 +206,57 @@ public void run() {\n                         break;\n                 }\n             } catch (Throwable t) {\n-                appendStackTrace(t, out);\n+                // nothing that can go wrong here worries us, they're\n+                // all EOFs\n+                // appendStackTrace(t, out);\n             }\n             if (whenDone != null && numberOfCopiers.decrementAndGet() <= 0)\n                 try {\n-                    process.waitFor(10, TimeUnit.SECONDS);\n-                    whenDone.accept(process.exitValue());\n+                    process.waitFor(10, TimeUnit.SECONDS); // be graceful\n+                    setClosed();\n                 } catch (Throwable t) {\n                     t.printStackTrace(System.out);\n                 }\n         }\n     }\n+    synchronized void setClosed() {\n+        if(!closed) {\n+            IntConsumer wd = whenDone;\n+            int exit = process!=null ? process.exitValue() : -1;\n+            closed = true;\n+            process = null;\n+            stderrc = null;\n+            stdoutc = null;\n+            whenDone = null;\n+            if(wd!=null) wd.accept(exit);\n+            notifyAll();\n+        }\n+    }\n+    public boolean isRunning() { return !closed; }\n+    public synchronized boolean waitClosed(int timeout) {\n+        if(!closed) try {\n+            wait(timeout);\n+        } catch(InterruptedException ie){}\n+        return closed;\n+    }\n+    @Override\n+    public synchronized void close() throws IOException {\n+        if(!closed) {\n+            Process p = process;\n+            if(p!=null) {\n+                p.destroy();\n+                if(!waitClosed(2000)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4523d342493751826c6852ba2c3aebea9b2422"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5MjMyOA==", "bodyText": "Sure.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366092328", "createdAt": "2020-01-14T00:00:05Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -208,17 +206,57 @@ public void run() {\n                         break;\n                 }\n             } catch (Throwable t) {\n-                appendStackTrace(t, out);\n+                // nothing that can go wrong here worries us, they're\n+                // all EOFs\n+                // appendStackTrace(t, out);\n             }\n             if (whenDone != null && numberOfCopiers.decrementAndGet() <= 0)\n                 try {\n-                    process.waitFor(10, TimeUnit.SECONDS);\n-                    whenDone.accept(process.exitValue());\n+                    process.waitFor(10, TimeUnit.SECONDS); // be graceful\n+                    setClosed();\n                 } catch (Throwable t) {\n                     t.printStackTrace(System.out);\n                 }\n         }\n     }\n+    synchronized void setClosed() {\n+        if(!closed) {\n+            IntConsumer wd = whenDone;\n+            int exit = process!=null ? process.exitValue() : -1;\n+            closed = true;\n+            process = null;\n+            stderrc = null;\n+            stdoutc = null;\n+            whenDone = null;\n+            if(wd!=null) wd.accept(exit);\n+            notifyAll();\n+        }\n+    }\n+    public boolean isRunning() { return !closed; }\n+    public synchronized boolean waitClosed(int timeout) {\n+        if(!closed) try {\n+            wait(timeout);\n+        } catch(InterruptedException ie){}\n+        return closed;\n+    }\n+    @Override\n+    public synchronized void close() throws IOException {\n+        if(!closed) {\n+            Process p = process;\n+            if(p!=null) {\n+                p.destroy();\n+                if(!waitClosed(2000)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1OTkyMQ=="}, "originalCommit": {"oid": "0b4523d342493751826c6852ba2c3aebea9b2422"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTk5NDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMjo1OToxN1rOFdK-jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMzozMToyOVrOFdLUWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMjg3Ng==", "bodyText": "Any reason why these are removed? I think Shirley's doc on states still has Unstable in it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366132876", "createdAt": "2020-01-14T02:59:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -34,20 +34,20 @@\n      * ever take a significant amount of time to run.\n      */\n     Running(true, true, true),\n-    /**\n-     * Running, but experiencing problems that the service is attempting to\n-     * repair itself\n-     */\n-    Unstable(false, true, false),\n+//    /**\n+//     * Running, but experiencing problems that the service is attempting to\n+//     * repair itself\n+//     */\n+//    Unstable(false, true, false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzODQ1Ng==", "bodyText": "It's certainly a topic ripe for debate.  They are two states that were never used in any real way and I had originally put them in partly as thought experiments.  The more I think about Unstable the less I think it's the right way to approach the situation.  I think it's better to have services that are experiencing instability to instead indicate the instability in their outputs.  For example:\nif(sensor.state==Running) { v = sensor.getValue(); ... }\n\nhas the problem that check-then-fetch has a race hazard.  But\nv = sensor.getValue();\nif (i!sNan(v)) [ ... ]\n\ndoes not.\nHaving low-value states needlessly complicates the state machine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366138456", "createdAt": "2020-01-14T03:31:29Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -34,20 +34,20 @@\n      * ever take a significant amount of time to run.\n      */\n     Running(true, true, true),\n-    /**\n-     * Running, but experiencing problems that the service is attempting to\n-     * repair itself\n-     */\n-    Unstable(false, true, false),\n+//    /**\n+//     * Running, but experiencing problems that the service is attempting to\n+//     * repair itself\n+//     */\n+//    Unstable(false, true, false),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEzMjg3Ng=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDA0ODA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0Nzo1MFrOFdecTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoyMjowNlrOFdfi3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MTc5MA==", "bodyText": "nit: looks like a weird character \"\u00cf\" got added to the end of millis", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366451790", "createdAt": "2020-01-14T16:47:50Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disruptableChecks) {\n+                long ct = c.whenIsDisruptionOK();\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2OTg1NQ==", "bodyText": "How weird.  Fixed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366469855", "createdAt": "2020-01-14T17:22:06Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disruptableChecks) {\n+                long ct = c.whenIsDisruptionOK();\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MTc5MA=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDA1MTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0ODo0N1rOFdeeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoyMjo0NFrOFdnwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MjMyNw==", "bodyText": "you used to have a clock that could be injected. Is that still available?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366452327", "createdAt": "2020-01-14T16:48:47Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MTcxMg==", "bodyText": "Yes, I put it in to enable running a device in \"simulation\" mode where the system clock could run faster than realtime.  But it was never religiously used, so it would have taken a while to make it all work properly.  I pulled it because the code was a mess and cleaning it up properly meant finishing off simulation support, which I didn't feel up to.  It should go on the TODO list.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366471712", "createdAt": "2020-01-14T17:25:45Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MjMyNw=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MzA3NA==", "bodyText": "I've done it in previous projects and it's seriously useful; it's also a serious pain in the ass to nail all the details (eg. timeouts).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366473074", "createdAt": "2020-01-14T17:28:38Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MjMyNw=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwNDM0Ng==", "bodyText": "I'm fine with it going in a TODO :-) I remember you talking about it before and how useful it was", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366604346", "createdAt": "2020-01-14T22:22:44Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1MjMyNw=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDA1NDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjo0OTozMVrOFdegGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoyOToxMlrOFdfwig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1Mjc2MA==", "bodyText": "what does the boolean signify here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366452760", "createdAt": "2020-01-14T16:49:31Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disruptableChecks) {\n+                long ct = c.whenIsDisruptionOK();\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * Inform a listener that a disruption is pending to find out when a disruption\n+         * is acceptable.\n+         * @return Estimated time when this handler will be willing to be disrupted,\n+         *      expressed as milliseconds since the epoch. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long whenIsDisruptionOK();\n+        /** After a disruption, this is called to signal to the handler that the\n+         * disruption is over and it's OK to start activity */\n+        public boolean disruptionCompleted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MzM1NA==", "bodyText": "Nothing.  It's a leftover turd.  Fixed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366473354", "createdAt": "2020-01-14T17:29:12Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);\n+    }\n+    protected synchronized void runUpdateActions() {\n+        for (Map.Entry<String, Crashable> todo : pendingActions.entrySet())\n+            try {\n+                todo.getValue().run();\n+            } catch (Throwable t) {\n+                log.error(getName(), \"Error processing system update\", todo.getKey(), t);\n+            }\n+        pendingActions.clear();\n+        for (DisruptableCheck c : disruptableChecks) c.disruptionCompleted(); // Notify disruption is over\n+    }\n+    @SuppressWarnings(\"SleepWhileInLoop\")\n+    @Override public void run() {\n+        // run() is invoked on it's own thread\n+        log.note(getName(), \"Checking for updates\");\n+        while (!pendingActions.isEmpty()) {\n+            final long now = System.currentTimeMillis();\n+            long maxt = now;\n+\n+            log.note(getName(), \"updates pending:\", pendingActions.size());\n+            for (DisruptableCheck c : disruptableChecks) {\n+                long ct = c.whenIsDisruptionOK();\n+                if (ct > maxt) maxt = ct;\n+            }\n+            if (maxt > now) try {\n+                log.note(getName(), \"Holding for\", maxt - now, \"millis\u00cf\");\n+                Thread.sleep(maxt - now);\n+            } catch (InterruptedException ex) {\n+            }\n+            else {\n+                log.note(getName(), \"Queueing update actions\");\n+                context.runOnPublishQueueAndWait(() -> {\n+                    log.note(getName(), \"Starting safe-time update\");\n+                    runUpdateActions();\n+                    log.note(getName(), \"Finished read-phase of safe-time update\");\n+                });\n+                log.note(getName(), \"Back on run Q safe-time update\");\n+            }\n+        }\n+        super.run();\n+    }\n+\n+    public static interface DisruptableCheck {\n+        /**\n+         * Inform a listener that a disruption is pending to find out when a disruption\n+         * is acceptable.\n+         * @return Estimated time when this handler will be willing to be disrupted,\n+         *      expressed as milliseconds since the epoch. If\n+         *      the returned value is less than now (System.currentTimeMillis()) the handler\n+         *      is granting permission to be disrupted.  Otherwise, it will be asked again\n+         *      sometime later.\n+         */\n+        public long whenIsDisruptionOK();\n+        /** After a disruption, this is called to signal to the handler that the\n+         * disruption is over and it's OK to start activity */\n+        public boolean disruptionCompleted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ1Mjc2MA=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTE2NjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo0MToyNlrOFdpWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo0MToyNlrOFdpWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMDU1Ng==", "bodyText": "Yeah I noticed this bug as well. Have a temporary check in #30", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366630556", "createdAt": "2020-01-14T23:41:26Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/ShellRunner.java", "diffHunk": "@@ -21,16 +21,18 @@\n         @Override\n         public synchronized Exec setup(String note, String command, EvergreenService onBehalfOf) {\n             if (!isEmpty(command) && onBehalfOf != null) {\n-                if (!isEmpty(note))\n+                if (!isEmpty(note) && log!=null /* !!?!! */)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTE4MTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo0OTo1NVrOFdpfaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1MjozNlrOFeBGjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMjgxMQ==", "bodyText": "Will this result in run() being called multiple times?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366632811", "createdAt": "2020-01-14T23:49:55Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxOTY2Mw==", "bodyText": "Simultaneously: no.  setState(Running) does nothing if the service is already running.  The update service normally sits in Finished state doing nothing.   If it's periodic, it will get started whenever it's period next comes around.  Otherwise it get's started immediatly whenever there is some action pending.  It then checks for all services that care about disruptions to give their permission, when permission is granted by everyone, the disruption happens.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r367019663", "createdAt": "2020-01-15T17:52:36Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/UpdateSystemSafelyService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/* Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.*;\n+import com.aws.iot.evergreen.util.Log;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import javax.inject.*;\n+\n+/**\n+ * Handles requests to update the system's configuration during safe times.\n+ * (or anything else that's disruptive and shouldn't be done until the system\n+ * is in a \"safe\" state).\n+ * \n+ * It maintains two lists: one is a list of actions that will be executed when the\n+ * system is next \"disruptable\".  This is typically code that is going to install an update.\n+ * \n+ * The other is a list of functions that are called to check if the system is \"disruptable\".\n+ * For example, a TV might not be disruptable if it is being used, or a robot if it is\n+ * in motion.\n+ * \n+ * If the update service is periodic, update actions will only be processed at that time.\n+ * Otherwise, it the update will be processed immediately, assuming that all disruptability\n+ * checks pass.\n+ */\n+@ImplementsService(name = \"update\", autostart = true)\n+@Singleton\n+public class UpdateSystemSafelyService extends EvergreenService {\n+    @Inject Log log;\n+    private final LinkedHashMap<String, Crashable> pendingActions = new LinkedHashMap<>();\n+    private final CopyOnWriteArrayList<DisruptableCheck> disruptableChecks = new CopyOnWriteArrayList<>();\n+\n+    public UpdateSystemSafelyService(Topics c) {\n+        super(c);\n+    }\n+    public void addDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.add(d);\n+    }\n+    public void removeDisruptableCheck(DisruptableCheck d) {\n+        disruptableChecks.remove(d);\n+    }\n+    /**\n+     * @param tag used both as a printable description and a de-duplication key.  eg. If\n+     *          the action is installing a new config file, the tag should probably be the\n+     *          URL of the config.  If a key is duplicated by subsequent actions, they\n+     *          are suppressed.\n+     * @param action The action to be performed.\n+     */\n+    public synchronized void addUpdateAction(String tag, Crashable action) {\n+        pendingActions.put(tag, action);\n+        log.note(getName(), \"Adding update action\", tag);\n+        if (!isPeriodic()) setState(State.Running);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMjgxMQ=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTIxODU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxMjozNlrOFdp2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNzo1NzoxN1rOFeBPcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODc1MA==", "bodyText": "So basically if the 'install' part of a configuration file changed, the service will automatically re-install , if any other parts changed, service will restart. Should we skip child.childOf(\"shutdown\") ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366638750", "createdAt": "2020-01-15T00:12:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -18,6 +18,14 @@\n public class GenericExternalService extends EvergreenService {\n     public GenericExternalService(Topics c) {\n         super(c);\n+        c.subscribe((what,child)->{\n+            if(c.parentNeedsToKnow()) {\n+                context.getLog().warn(getName(),\"responding to change to\",child);\n+                if(child.childOf(\"install\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMTkzNg==", "bodyText": "Good point.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r367021936", "createdAt": "2020-01-15T17:57:17Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -18,6 +18,14 @@\n public class GenericExternalService extends EvergreenService {\n     public GenericExternalService(Topics c) {\n         super(c);\n+        c.subscribe((what,child)->{\n+            if(c.parentNeedsToKnow()) {\n+                context.getLog().warn(getName(),\"responding to change to\",child);\n+                if(child.childOf(\"install\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzODc1MA=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NTIyNTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxNjowNFrOFdp6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMToxNTo1OFrOFeLZUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzOTczMw==", "bodyText": "Should run(\"shutdown\") be before closing the Exec or after?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r366639733", "createdAt": "2020-01-15T00:16:04Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -40,34 +48,56 @@ public void startup() {\n     }\n     @Override\n     public void run() {\n-//        log().significant(\"running\", this);\n         if (run(\"run\", exit -> {\n-            if (exit == 0) {\n-                setState(State.Finished);\n-                context.getLog().significant(\"Finished\", getName());\n-            } else {\n-                setState(State.Errored);\n-                context.getLog().error(\"Failed\", getName(), exit);\n-            }\n+            currentScript = null;\n+            if(!inShutdown)\n+                if (exit == 0) {\n+                    setState(State.Finished);\n+                    context.getLog().significant(getName(), \"Finished\");\n+                } else {\n+                    setState(State.Errored);\n+                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                }\n         })==RunStatus.NothingDone) {\n-            context.getLog().significant(\"run: NothingDone\", getName());\n+            context.getLog().significant(getName(), \"run: NothingDone\");\n             setState(State.Finished);\n         }\n     }\n-\n+    static final String[] sigCodes = {\n+        \"SIGHUP\", \"SIGINT\", \"SIGQUIT\", \"SIGILL\", \"SIGTRAP\", \"SIGIOT\", \"SIGBUS\", \"SIGFPE\",\n+        \"SIGKILL\", \"SIGUSR1\", \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\",\n+        \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\", \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\",\n+        \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\", \"SIGIO\",\n+        \"SIGPWR\", \"SIGSYS\",\n+    };\n+    public static String exit2String(int exitCode) {\n+        return exitCode>128 && exitCode<129+sigCodes.length\n+            ? sigCodes[exitCode-129]\n+            : \"exit(\"+((exitCode<<24)>>24)+\")\";\n+    }\n+    private boolean inShutdown;\n     @Override\n     public void shutdown() {\n+        inShutdown = true;\n+//        context.getLog().significant(this,\"starting shutdown\");\n+        Exec e = currentScript;\n+        if(e!=null && e.isRunning()) try {\n+            context.getLog().significant(getName(),\"shutting down\",e);\n+            e.close();\n+            e.waitClosed(1000);\n+//            new Throwable().printStackTrace();\n+        } catch(IOException ioe) {\n+            context.getLog().error(\n+                    this,\"shutdown failure\",Utils.getUltimateMessage(ioe));\n+        }\n //        context.getLog().significant(\"shutdown\", this);\n         run(\"shutdown\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4ODMwNg==", "bodyText": "That is a very good question.  If shutdown does nothing, it doesn't matter.  If shutdown does something, it'll probably expect the service that it's shutting down is still around.  It's probably going to try something more graceful than just firing a SIG* at it, which is what the preceeding code does.  \"Before\" is clearly the right answer.  I'll fix it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/32#discussion_r367188306", "createdAt": "2020-01-16T01:15:58Z", "author": {"login": "JamesGosling"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -40,34 +48,56 @@ public void startup() {\n     }\n     @Override\n     public void run() {\n-//        log().significant(\"running\", this);\n         if (run(\"run\", exit -> {\n-            if (exit == 0) {\n-                setState(State.Finished);\n-                context.getLog().significant(\"Finished\", getName());\n-            } else {\n-                setState(State.Errored);\n-                context.getLog().error(\"Failed\", getName(), exit);\n-            }\n+            currentScript = null;\n+            if(!inShutdown)\n+                if (exit == 0) {\n+                    setState(State.Finished);\n+                    context.getLog().significant(getName(), \"Finished\");\n+                } else {\n+                    setState(State.Errored);\n+                    context.getLog().error(getName(), \"Failed\", exit2String(exit));\n+                }\n         })==RunStatus.NothingDone) {\n-            context.getLog().significant(\"run: NothingDone\", getName());\n+            context.getLog().significant(getName(), \"run: NothingDone\");\n             setState(State.Finished);\n         }\n     }\n-\n+    static final String[] sigCodes = {\n+        \"SIGHUP\", \"SIGINT\", \"SIGQUIT\", \"SIGILL\", \"SIGTRAP\", \"SIGIOT\", \"SIGBUS\", \"SIGFPE\",\n+        \"SIGKILL\", \"SIGUSR1\", \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\",\n+        \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\", \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\",\n+        \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\", \"SIGIO\",\n+        \"SIGPWR\", \"SIGSYS\",\n+    };\n+    public static String exit2String(int exitCode) {\n+        return exitCode>128 && exitCode<129+sigCodes.length\n+            ? sigCodes[exitCode-129]\n+            : \"exit(\"+((exitCode<<24)>>24)+\")\";\n+    }\n+    private boolean inShutdown;\n     @Override\n     public void shutdown() {\n+        inShutdown = true;\n+//        context.getLog().significant(this,\"starting shutdown\");\n+        Exec e = currentScript;\n+        if(e!=null && e.isRunning()) try {\n+            context.getLog().significant(getName(),\"shutting down\",e);\n+            e.close();\n+            e.waitClosed(1000);\n+//            new Throwable().printStackTrace();\n+        } catch(IOException ioe) {\n+            context.getLog().error(\n+                    this,\"shutdown failure\",Utils.getUltimateMessage(ioe));\n+        }\n //        context.getLog().significant(\"shutdown\", this);\n         run(\"shutdown\", null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzOTczMw=="}, "originalCommit": {"oid": "094079a156977e8274233eab8b7673fd18aa16f5"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 33, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}