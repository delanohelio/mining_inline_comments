{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4ODEwNjQ3", "number": 565, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMTozOVrOExPngA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjo0NDo0NlrOEylRTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDcxNTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTowMTozOVrOHnRsXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNzoxOTo1OFrOHnWtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjM5OQ==", "bodyText": "how is this going to work given that stuff is running in their own work dirs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r510946399", "createdAt": "2020-10-23T15:01:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -38,6 +39,7 @@\n                 new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                         .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME = \"ipcEventStreamServer\";\n+    public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK = \"./ipcEventStreamServer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20365ef64835e2d59f1dbae7218ae7b97f59e21"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxOTc1MQ==", "bodyText": "The components will read the absolute path from the env variable. This symlink is only being sent to IPC server.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511019751", "createdAt": "2020-10-23T17:02:54Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -38,6 +39,7 @@\n                 new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                         .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME = \"ipcEventStreamServer\";\n+    public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK = \"./ipcEventStreamServer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjM5OQ=="}, "originalCommit": {"oid": "f20365ef64835e2d59f1dbae7218ae7b97f59e21"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyMjM4MQ==", "bodyText": "The clients don't have the same path problem?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511022381", "createdAt": "2020-10-23T17:08:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -38,6 +39,7 @@\n                 new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                         .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME = \"ipcEventStreamServer\";\n+    public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK = \"./ipcEventStreamServer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjM5OQ=="}, "originalCommit": {"oid": "f20365ef64835e2d59f1dbae7218ae7b97f59e21"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyNzU5OA==", "bodyText": "I was thinking clients can control to create a symlink themselves if needed because any of the generated code does not configure socket options for them. The client themselves create the socket options, so this can be more of on need basis. However we can set relative link in the env variable but I just thought having relative link can be undeterministic (if the assumption of client having CWD as expected is not true). For integration tests in kernel it will be not true I think.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511027598", "createdAt": "2020-10-23T17:18:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -38,6 +39,7 @@\n                 new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                         .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME = \"ipcEventStreamServer\";\n+    public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK = \"./ipcEventStreamServer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjM5OQ=="}, "originalCommit": {"oid": "f20365ef64835e2d59f1dbae7218ae7b97f59e21"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAyODQ4MQ==", "bodyText": "We set the CWD, so we can make that assumption", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511028481", "createdAt": "2020-10-23T17:19:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -38,6 +39,7 @@\n                 new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                         .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME = \"ipcEventStreamServer\";\n+    public static final String IPC_SERVER_DOMAIN_SOCKET_FILENAME_SYMLINK = \"./ipcEventStreamServer\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0NjM5OQ=="}, "originalCommit": {"oid": "f20365ef64835e2d59f1dbae7218ae7b97f59e21"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTcwNTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDo1NzoxMVrOHn-K0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjoyNTo1MFrOHokqdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ==", "bodyText": "you're assuming that the CWD of the nucleus is the root which isn't necessarily true. You should use an absolute path when creating and deleting the symlinks to make sure they're all pointing to the proper location.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511675089", "createdAt": "2020-10-26T00:57:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwNDIwNg==", "bodyText": "You need to address this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512204206", "createdAt": "2020-10-26T19:09:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4MzQ2Nw==", "bodyText": "No I am not assuming that, whatever the CWD, the symlink is being created in that directory and pointing to absolute path. I can delete the symlink during close to ensure that whatever symlink was created get deleted on server shutdown.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512283467", "createdAt": "2020-10-26T21:36:01Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NDgyNw==", "bodyText": "The symlink wont be in the correct place though!\nIf the CWD of the kernel is /root/home/GG, then the symlink could be pointing to the right thing, but the relative path ../../nucleusRoot/socket will not be correct", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512284827", "createdAt": "2020-10-26T21:38:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDM1Mg==", "bodyText": "The relative path I am using is ../../ipcEventStreamServer.socket\nIrrespective of where the symlink is it should be able to get to that file in the nucleus root (assuming '../../' takes the component to kernel root)\nIs this assumption wrong? Is the CWD of component relative to kernel's CWD or kernel's root?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512294352", "createdAt": "2020-10-26T21:58:54Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NTQ4MQ==", "bodyText": "There are 2 relative paths that you're using. ./nucleusRoot/ipcEventStreamServer.socket is this path, which is relative to the kernel's CWD and not the component's CWDs. The kernel's CWD is not necessarily the root. Use nucleusPaths to get a proper path", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512295481", "createdAt": "2020-10-26T22:01:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NjAzMQ==", "bodyText": "NUCLEUS_ROOT_PATH_SYMLINK must be an absolute path or it needs to be correctly relative", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512296031", "createdAt": "2020-10-26T22:02:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMwNTc4MQ==", "bodyText": "As discussed offline, having as absolute path does not solve the underlying problem. The concern was that we are writing outside of nucleus root which is reduced by putting in a check to create symlink only when necessary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512305781", "createdAt": "2020-10-26T22:25:50Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -85,27 +96,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+        if (Files.exists(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), LinkOption.NOFOLLOW_LINKS)) {\n+            try {\n+                logger.atDebug().log(\"Deleting the nucleus root path symlink\");\n+                Files.delete(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTA4OQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTcwNjQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDo1ODowMFrOHn-LRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjowMDo1NlrOHokBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTIwNg==", "bodyText": "remove?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511675206", "createdAt": "2020-10-26T00:58:00Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "diffHunk": "@@ -76,7 +84,18 @@\n     private AuthorizationHandler mockAuthorizationHandler;\n \n     @BeforeEach\n-    public void setup() {\n+    public void setup() throws IOException {\n+        Set<PosixFilePermission> filePermissions = Files.getPosixFilePermissions(mockRootPath);\n+        filePermissions.stream().forEach(perm -> logger.atInfo().log(perm));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NTMzMQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512295331", "createdAt": "2020-10-26T22:00:56Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "diffHunk": "@@ -76,7 +84,18 @@\n     private AuthorizationHandler mockAuthorizationHandler;\n \n     @BeforeEach\n-    public void setup() {\n+    public void setup() throws IOException {\n+        Set<PosixFilePermission> filePermissions = Files.getPosixFilePermissions(mockRootPath);\n+        filePermissions.stream().forEach(perm -> logger.atInfo().log(perm));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTIwNg=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTcwNjcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDo1ODoyOFrOHn-LfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjowMTowM1rOHokBzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTI2MQ==", "bodyText": "this won't be closed if the test fails. Use try with resources or try-finally", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r511675261", "createdAt": "2020-10-26T00:58:28Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "diffHunk": "@@ -97,41 +118,44 @@ public void tearDown() {\n     }\n \n     @Test\n-    public void testClientConnection() throws InterruptedException, IOException, ExecutionException {\n-        final ClientConnection[] clientConnectionArray = {null};\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void testClientConnection() throws Exception {\n         CountDownLatch connectionLatch = new CountDownLatch(1);\n \n         try (EventLoopGroup elg = new EventLoopGroup(1);\n              ClientBootstrap clientBootstrap = new ClientBootstrap(elg, new HostResolver(elg));\n              SocketOptions socketOptions = TestUtils.getSocketOptionsForIPC()) {\n \n             String ipcServerSocketPath = mockRootPath.resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-            ClientConnection\n-                    .connect(ipcServerSocketPath, (short) DEFAULT_PORT_NUMBER, socketOptions, null, clientBootstrap, new ClientConnectionHandler() {\n-                        @Override\n-                        protected void onConnectionSetup(ClientConnection connection, int errorCode) {\n-                            connectionLatch.countDown();\n-                            clientConnectionArray[0] = connection;\n-                        }\n-\n-                        @Override\n-                        protected void onProtocolMessage(List<Header> headers, byte[] payload, MessageType messageType, int messageFlags) {\n-\n-                        }\n-\n-                        @Override\n-                        protected void onConnectionClosed(int closeReason) {\n-\n-                        }\n-                    }).get();\n+            final EventStreamRPCConnectionConfig config = new EventStreamRPCConnectionConfig(clientBootstrap, elg,\n+                    socketOptions, null, ipcServerSocketPath, DEFAULT_PORT_NUMBER,\n+                    GreengrassConnectMessageSupplier.connectMessageSupplier(\"authToken\"));\n+            final EventStreamRPCConnection connection = new EventStreamRPCConnection(config);\n+            final boolean disconnected[] = {false};\n+            final int disconnectedCode[] = {-1};\n+            //this is a bit cumbersome but does not prevent a convenience wrapper from exposing a sync\n+            //connect() or a connect() that returns a CompletableFuture that errors\n+            //this could be wrapped by utility methods to provide a more\n+            connection.connect(new EventStreamRPCConnection.LifecycleHandler() {\n+                @Override\n+                public void onConnect() {\n+                    connectionLatch.countDown();\n+                }\n+\n+                @Override\n+                public void onDisconnect(int errorCode) {\n+                    disconnected[0] = true;\n+                    disconnectedCode[0] = errorCode;\n+                }\n+\n+                //This on error is for any errors that is connection level, including problems during connect()\n+                @Override\n+                public boolean onError(Throwable t) {\n+                    return true;    //hints at handler to disconnect due to this error\n+                }\n+            });\n             assertTrue(connectionLatch.await(2, TimeUnit.SECONDS));\n-            GreengrassEventStreamConnectMessage connectMessagePayloadStructure =\n-                    new GreengrassEventStreamConnectMessage();\n-            connectMessagePayloadStructure.setAuthToken(\"authToken\");\n-            String payload = OBJECT_MAPPER.writeValueAsString(connectMessagePayloadStructure);\n-            clientConnectionArray[0].sendProtocolMessage(null, payload.getBytes(StandardCharsets.UTF_8),\n-                    MessageType.Connect, 0).get();\n-            clientConnectionArray[0].closeConnection(0);\n+            connection.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NTM3NA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r512295374", "createdAt": "2020-10-26T22:01:03Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/greengrass/ipc/IPCEventStreamServiceTest.java", "diffHunk": "@@ -97,41 +118,44 @@ public void tearDown() {\n     }\n \n     @Test\n-    public void testClientConnection() throws InterruptedException, IOException, ExecutionException {\n-        final ClientConnection[] clientConnectionArray = {null};\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void testClientConnection() throws Exception {\n         CountDownLatch connectionLatch = new CountDownLatch(1);\n \n         try (EventLoopGroup elg = new EventLoopGroup(1);\n              ClientBootstrap clientBootstrap = new ClientBootstrap(elg, new HostResolver(elg));\n              SocketOptions socketOptions = TestUtils.getSocketOptionsForIPC()) {\n \n             String ipcServerSocketPath = mockRootPath.resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-            ClientConnection\n-                    .connect(ipcServerSocketPath, (short) DEFAULT_PORT_NUMBER, socketOptions, null, clientBootstrap, new ClientConnectionHandler() {\n-                        @Override\n-                        protected void onConnectionSetup(ClientConnection connection, int errorCode) {\n-                            connectionLatch.countDown();\n-                            clientConnectionArray[0] = connection;\n-                        }\n-\n-                        @Override\n-                        protected void onProtocolMessage(List<Header> headers, byte[] payload, MessageType messageType, int messageFlags) {\n-\n-                        }\n-\n-                        @Override\n-                        protected void onConnectionClosed(int closeReason) {\n-\n-                        }\n-                    }).get();\n+            final EventStreamRPCConnectionConfig config = new EventStreamRPCConnectionConfig(clientBootstrap, elg,\n+                    socketOptions, null, ipcServerSocketPath, DEFAULT_PORT_NUMBER,\n+                    GreengrassConnectMessageSupplier.connectMessageSupplier(\"authToken\"));\n+            final EventStreamRPCConnection connection = new EventStreamRPCConnection(config);\n+            final boolean disconnected[] = {false};\n+            final int disconnectedCode[] = {-1};\n+            //this is a bit cumbersome but does not prevent a convenience wrapper from exposing a sync\n+            //connect() or a connect() that returns a CompletableFuture that errors\n+            //this could be wrapped by utility methods to provide a more\n+            connection.connect(new EventStreamRPCConnection.LifecycleHandler() {\n+                @Override\n+                public void onConnect() {\n+                    connectionLatch.countDown();\n+                }\n+\n+                @Override\n+                public void onDisconnect(int errorCode) {\n+                    disconnected[0] = true;\n+                    disconnectedCode[0] = errorCode;\n+                }\n+\n+                //This on error is for any errors that is connection level, including problems during connect()\n+                @Override\n+                public boolean onError(Throwable t) {\n+                    return true;    //hints at handler to disconnect due to this error\n+                }\n+            });\n             assertTrue(connectionLatch.await(2, TimeUnit.SECONDS));\n-            GreengrassEventStreamConnectMessage connectMessagePayloadStructure =\n-                    new GreengrassEventStreamConnectMessage();\n-            connectMessagePayloadStructure.setAuthToken(\"authToken\");\n-            String payload = OBJECT_MAPPER.writeValueAsString(connectMessagePayloadStructure);\n-            clientConnectionArray[0].sendProtocolMessage(null, payload.getBytes(StandardCharsets.UTF_8),\n-                    MessageType.Connect, 0).get();\n-            clientConnectionArray[0].closeConnection(0);\n+            connection.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3NTI2MQ=="}, "originalCommit": {"oid": "12db8f163de7c9fa624067c7f595117c2e3f858c"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDc0ODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjo0NDo0NlrOHpTt5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzoyNDowMlrOHpUiWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NjcwOQ==", "bodyText": "should we abort the startup?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r513076709", "createdAt": "2020-10-27T22:44:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -90,27 +104,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+\n         Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n-        kernelUri.withValue(ipcServerSocketPath);\n+        kernelUri.withValue(ipcServerSocketAbsolutePath);\n+        Topic kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n+                NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+        kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n+\n+        boolean symLinkCreated = false;\n+\n+        try {\n+            // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n+            // will create a symlink only if needed\n+            if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n+                Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n+                kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n+                        NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+                kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n+                symLinkCreated = true;\n+            }\n+\n+        } catch (IOException e) {\n+            logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "160669ed37d40c87cbd2204bab514e8b7febba0e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MDEzNw==", "bodyText": "The client still has option to create a symlink themselves and solve teh issue. I don;t want to take that away from them by not starting the server", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/565#discussion_r513090137", "createdAt": "2020-10-27T23:24:02Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/greengrass/ipc/IPCEventStreamService.java", "diffHunk": "@@ -90,27 +104,51 @@ public void startup() {\n         socketOptions.domain = SocketOptions.SocketDomain.LOCAL;\n         socketOptions.type = SocketOptions.SocketType.STREAM;\n         eventLoopGroup = new EventLoopGroup(1);\n-        ipcServerSocketPath = kernel.getNucleusPaths().rootPath()\n+        ipcServerSocketAbsolutePath = kernel.getNucleusPaths().rootPath()\n                 .resolve(IPC_SERVER_DOMAIN_SOCKET_FILENAME).toString();\n-        if (Files.exists(Paths.get(ipcServerSocketPath))) {\n+\n+        if (Files.exists(Paths.get(ipcServerSocketAbsolutePath))) {\n             try {\n                 logger.atDebug().log(\"Deleting the ipc server socket descriptor file\");\n-                Files.delete(Paths.get(ipcServerSocketPath));\n+                Files.delete(Paths.get(ipcServerSocketAbsolutePath));\n             } catch (IOException e) {\n                 logger.atError().setCause(e).log(\"Failed to delete the ipc server socket descriptor file\");\n             }\n         }\n+\n         Topic kernelUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE, NUCLEUS_DOMAIN_SOCKET_FILEPATH);\n-        kernelUri.withValue(ipcServerSocketPath);\n+        kernelUri.withValue(ipcServerSocketAbsolutePath);\n+        Topic kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n+                NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+        kernelRelativeUri.withValue(ipcServerSocketAbsolutePath);\n+\n+        boolean symLinkCreated = false;\n+\n+        try {\n+            // Usually we do not want to write outside of kernel root. Because of socket path length limitations we\n+            // will create a symlink only if needed\n+            if (ipcServerSocketAbsolutePath.length() > UDS_SOCKET_PATH_MAX_LEN) {\n+                Files.createSymbolicLink(Paths.get(NUCLEUS_ROOT_PATH_SYMLINK), kernel.getNucleusPaths().rootPath());\n+                kernelRelativeUri = config.getRoot().lookup(SETENV_CONFIG_NAMESPACE,\n+                        NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT);\n+                kernelRelativeUri.withValue(IPC_SERVER_DOMAIN_SOCKET_RELATIVE_FILENAME);\n+                symLinkCreated = true;\n+            }\n+\n+        } catch (IOException e) {\n+            logger.atError().setCause(e).log(\"Cannot setup symlinks for the ipc server socket path\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3NjcwOQ=="}, "originalCommit": {"oid": "160669ed37d40c87cbd2204bab514e8b7febba0e"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 390, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}