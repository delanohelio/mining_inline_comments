{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDIwMjE1", "number": 582, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNDoxNlrOEzZVWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNToxNlrOEz8V_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzI3ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNDoxNlrOHql3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1Mjo0NVrOHqyo1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjU3NA==", "bodyText": "not sure where, but we must deserialize somewhere else, can you dedupe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514422574", "createdAt": "2020-10-29T17:04:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTg5NA==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514631894", "createdAt": "2020-10-29T23:52:45Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjU3NA=="}, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzI4NTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNTo1N1rOHql7aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoxMjozMlrOHqy-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzY1OQ==", "bodyText": "Why check for null, just remove it. A node with a null value is still a node which can be removed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423659", "createdAt": "2020-10-29T17:05:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                componentIdentifier.toString());\n+        if (digestTopic.getOnce() != null) {\n+            digestTopic.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzMzNw==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514637337", "createdAt": "2020-10-30T00:12:32Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                componentIdentifier.toString());\n+        if (digestTopic.getOnce() != null) {\n+            digestTopic.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzY1OQ=="}, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzI4NzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNjoyMFrOHql8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1Mjo1NFrOHqypBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzg5Nw==", "bodyText": "use find instead of lookup, then check for null on the returned topic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423897", "createdAt": "2020-10-29T17:06:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTk0MQ==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514631941", "createdAt": "2020-10-29T23:52:54Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzg5Nw=="}, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQwMzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/Digest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNDowMFrOHqnF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1NToyNVrOHqysBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MjcxOQ==", "bodyText": "why isn't string comparison enough given that both strings are already b64 encoded?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514442719", "createdAt": "2020-10-29T17:34:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Digest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+/**\n+ * Set of methods for digest operations but with Strings.\n+ */\n+public final class Digest {\n+    // Every implementation of the Java platform is required to support SHA-256.\n+    public static final String DIGEST_ALGO = \"SHA-256\";\n+    \n+    private Digest() {\n+    }\n+\n+    /**\n+     * Calculate digest for a UTF_8 encoded string input.\n+     * @param utfInput String to calculate digest for\n+     * @return the base64 encoded digest value for the string\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     * @throws IllegalArgumentException if input is invalid\n+     */\n+    public static String calculate(String utfInput) throws NoSuchAlgorithmException {\n+        if (Utils.isEmpty(utfInput)) {\n+            throw new IllegalArgumentException(\"Invalid input to calculate digest\");\n+        }\n+        MessageDigest messageDigest = MessageDigest.getInstance(DIGEST_ALGO);\n+        return Base64.getEncoder().encodeToString(messageDigest.digest(utfInput.getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    /**\n+     * Compare two utf8 encoded digest strings.\n+     * @param digest1 first digest to compare\n+     * @param digest2 second digest to compare\n+     * @return whether two digests are equal\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     */\n+    public static boolean isEqual(String digest1, String digest2) throws NoSuchAlgorithmException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjcxMA==", "bodyText": "yeah. that works. I was trying to use the equals method provided by digest, lets keep this way unless you feel strongly about it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514632710", "createdAt": "2020-10-29T23:55:25Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/util/Digest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+/**\n+ * Set of methods for digest operations but with Strings.\n+ */\n+public final class Digest {\n+    // Every implementation of the Java platform is required to support SHA-256.\n+    public static final String DIGEST_ALGO = \"SHA-256\";\n+    \n+    private Digest() {\n+    }\n+\n+    /**\n+     * Calculate digest for a UTF_8 encoded string input.\n+     * @param utfInput String to calculate digest for\n+     * @return the base64 encoded digest value for the string\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     * @throws IllegalArgumentException if input is invalid\n+     */\n+    public static String calculate(String utfInput) throws NoSuchAlgorithmException {\n+        if (Utils.isEmpty(utfInput)) {\n+            throw new IllegalArgumentException(\"Invalid input to calculate digest\");\n+        }\n+        MessageDigest messageDigest = MessageDigest.getInstance(DIGEST_ALGO);\n+        return Base64.getEncoder().encodeToString(messageDigest.digest(utfInput.getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    /**\n+     * Compare two utf8 encoded digest strings.\n+     * @param digest1 first digest to compare\n+     * @param digest2 second digest to compare\n+     * @return whether two digests are equal\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     */\n+    public static boolean isEqual(String digest1, String digest2) throws NoSuchAlgorithmException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MjcxOQ=="}, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQxNjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNzowNVrOHqnN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1NTozMFrOHqysKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NDc5OA==", "bodyText": "don't call new. Just use context.get(ComponentStore.class)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514444798", "createdAt": "2020-10-29T17:37:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -128,6 +133,8 @@ public Kernel() {\n         context.put(NucleusPaths.class, nucleusPaths);\n         kernelCommandLine = new KernelCommandLine(this);\n         kernelLifecycle = new KernelLifecycle(this, kernelCommandLine, nucleusPaths);\n+        componentStore = new ComponentStore(nucleusPaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjc0NA==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514632744", "createdAt": "2020-10-29T23:55:30Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -128,6 +133,8 @@ public Kernel() {\n         context.put(NucleusPaths.class, nucleusPaths);\n         kernelCommandLine = new KernelCommandLine(this);\n         kernelLifecycle = new KernelLifecycle(this, kernelCommandLine, nucleusPaths);\n+        componentStore = new ComponentStore(nucleusPaths);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NDc5OA=="}, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAwMDk4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/PluginComponentTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMDozNlrOHreVUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyODoyMFrOHriE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Nzc5Mg==", "bodyText": "instead of using main, let's use the nucleus name\n@shaguptashaikh any preference?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515347792", "createdAt": "2020-10-30T20:00:36Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/PluginComponentTest.java", "diffHunk": "@@ -251,6 +273,29 @@ private void setupPackageStore() throws IOException, PackagingException, URISynt\n         FileUtils.copyFile(jarFilePath.toFile(), artifactPath1_0_0.toFile());\n     }\n \n+    private void setDigestInConfig() throws IOException, URISyntaxException {\n+        Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").toURI());\n+        Path recipePath = localStoreContentPath.resolve(\"recipes\");\n+        try (Stream<Path> paths = Files.walk(recipePath)) {\n+                paths.filter(Files::isRegularFile).forEach(path -> {\n+                    try {\n+                        String digest = Digest.calculate(FileUtils.readFileToString(path.toFile()));\n+                        String filename = FilenameUtils.removeExtension(path.getFileName().toString());\n+                        String componentId =\n+                                String.format(\"%s-v%s\", filename.split(\"-\")[0], filename.split(\"-\")[1]);\n+                        kernel.getConfig()\n+                                .lookupTopics(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                                        KernelCommandLine.MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTE0MA==", "bodyText": "lets revisit this later, need to catch the beta train", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515409140", "createdAt": "2020-10-30T22:28:20Z", "author": {"login": "prateek-y"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/PluginComponentTest.java", "diffHunk": "@@ -251,6 +273,29 @@ private void setupPackageStore() throws IOException, PackagingException, URISynt\n         FileUtils.copyFile(jarFilePath.toFile(), artifactPath1_0_0.toFile());\n     }\n \n+    private void setDigestInConfig() throws IOException, URISyntaxException {\n+        Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").toURI());\n+        Path recipePath = localStoreContentPath.resolve(\"recipes\");\n+        try (Stream<Path> paths = Files.walk(recipePath)) {\n+                paths.filter(Files::isRegularFile).forEach(path -> {\n+                    try {\n+                        String digest = Digest.calculate(FileUtils.readFileToString(path.toFile()));\n+                        String filename = FilenameUtils.removeExtension(path.getFileName().toString());\n+                        String componentId =\n+                                String.format(\"%s-v%s\", filename.split(\"-\")[0], filename.split(\"-\")[1]);\n+                        kernel.getConfig()\n+                                .lookupTopics(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                                        KernelCommandLine.MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Nzc5Mg=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAxMTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMzo1NVrOHrebug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDozNDo0NlrOHrfPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTQzNA==", "bodyText": "remove this, we have a bit too much logging in locate", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349434", "createdAt": "2020-10-30T20:03:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2Mjc1NA==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515362754", "createdAt": "2020-10-30T20:34:46Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTQzNA=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAxNTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNToxNlrOHred6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyNzo1NVrOHriElg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ==", "bodyText": "use findTopics otherwise this will create the topic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349995", "createdAt": "2020-10-30T20:05:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM2NDQ5Mg==", "bodyText": "I was intentionally trying to create at this point if it does not exist. What do you think the right behavior should be, Since this is part of kernel I was thinking to create runtime topic for main if it doesnt exist.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515364492", "createdAt": "2020-10-30T20:36:16Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MDQzMQ==", "bodyText": "Why do you want to create it? Your purpose is it check if it is set or not.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515370431", "createdAt": "2020-10-30T20:41:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3MTA0MA==", "bodyText": "You should use lookup when you are actually setting the digest, I agree with that", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515371040", "createdAt": "2020-10-30T20:41:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwOTA0Ng==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515409046", "createdAt": "2020-10-30T22:27:55Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ=="}, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 413, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}