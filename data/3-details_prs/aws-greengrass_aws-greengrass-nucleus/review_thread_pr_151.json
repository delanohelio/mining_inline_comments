{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzcwOTE3", "number": 151, "reviewThreads": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxMzozNVrODtzyCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMToxOFrODvSzfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYwOTA1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxMzozNVrOF_cmoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNjoyOVrOF_2MVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MzI0OA==", "bodyText": "typo: when_does_not_startup", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402073248", "createdAt": "2020-04-02T06:13:35Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -36,4 +36,22 @@ void GIVEN_service_config_with_broken_skipif_config_WHEN_launch_service_THEN_ser\n         // THEN\n         assertTrue(testErrored.await(60, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_startup_timeout_WHEN_do_not_startup_within_timeout_THEN_move_service_to_errored()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjUwMw==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492503", "createdAt": "2020-04-02T17:36:29Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -36,4 +36,22 @@ void GIVEN_service_config_with_broken_skipif_config_WHEN_launch_service_THEN_ser\n         // THEN\n         assertTrue(testErrored.await(60, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_startup_timeout_WHEN_do_not_startup_within_timeout_THEN_move_service_to_errored()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MzI0OA=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxMjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNToxMlrOF_cozw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNjoyN1rOF_2MPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MzgwNw==", "bodyText": "If it doesn't need to be serializable then you can remove the serialization uid.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402073807", "createdAt": "2020-04-02T06:15:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjQ3OQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492479", "createdAt": "2020-04-02T17:36:27Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3MzgwNw=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxMzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxNTo0NFrOF_cpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjozODo1MFrOF_--pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3Mzk3OQ==", "bodyText": "Do we have a \"DeploymentException\" class? If not, let's make that and then have this extend that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402073979", "createdAt": "2020-04-02T06:15:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceInBrokenStateAfterDeploymentException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5NjgwNw==", "bodyText": "Added", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402596807", "createdAt": "2020-04-02T21:07:04Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceInBrokenStateAfterDeploymentException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3Mzk3OQ=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5OTQ0Mg==", "bodyText": "Agree. Also I don't think service in Broken state needs a separate Exception. We can have a ServiceUpdateException , and have \"Service in Broken state\" in the message.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402599442", "createdAt": "2020-04-02T21:13:24Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceInBrokenStateAfterDeploymentException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3Mzk3OQ=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNjQ1Mg==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402636452", "createdAt": "2020-04-02T22:38:50Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceInBrokenStateAfterDeploymentException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceInBrokenStateAfterDeploymentException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3Mzk3OQ=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYxOTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODoyMlrOF_csxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo0MToxNVrOGBG3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg==", "bodyText": "I don't think this should be in the backing task. I believe we'd want this to be in the lifecycle thread.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402074822", "createdAt": "2020-04-02T06:18:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjQyNw==", "bodyText": "This is in the backing task because, the timeout should start after the waitForDependencyReady() returns.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492427", "createdAt": "2020-04-02T17:36:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDAwMA==", "bodyText": "This topic can be initialized at the beginning of initializing this class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402600000", "createdAt": "2020-04-02T21:14:38Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MDQ4OA==", "bodyText": "I dont think we should initialize it in the constructor, this would prevent it from getting updated via deployment. Refactored and added support for timeout for run as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402680488", "createdAt": "2020-04-03T01:03:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTA3NA==", "bodyText": "Why would that prevent anything? The topic can still be updated during deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402681074", "createdAt": "2020-04-03T01:05:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNDIwNg==", "bodyText": "Updated to use findTopics() in Topics class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403814206", "createdAt": "2020-04-06T03:41:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDgyMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyMDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoxODo0M1rOF_ctVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNjoyMVrOF_2L5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDk2NA==", "bodyText": "Pull out the default to a const which we can change more easily.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402074964", "createdAt": "2020-04-02T06:18:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null\n+                                            ? lifecycle.findInteriorChild(LIFECYCLE_STARTUP_NAMESPACE_TOPIC)\n+                                            : null;\n+                                    // only schedule task to report error for services which use startup\n+                                    // Default startup time is 120 seconds\n+                                    if (startUpTopic != null) {\n+                                        Integer timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(120).getOnce();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjM5MQ==", "bodyText": "Changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492391", "createdAt": "2020-04-02T17:36:21Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null\n+                                            ? lifecycle.findInteriorChild(LIFECYCLE_STARTUP_NAMESPACE_TOPIC)\n+                                            : null;\n+                                    // only schedule task to report error for services which use startup\n+                                    // Default startup time is 120 seconds\n+                                    if (startUpTopic != null) {\n+                                        Integer timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(120).getOnce();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NDk2NA=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMDoyMVrOF_cvlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoxNjoxOVrOF__yJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTU0Mg==", "bodyText": "This requires another thread which seems wasteful. I believe if you moved this logic into the main lifecycle thread then you can wait on some future with the provided timeout. Remember back when we discussed the 3-way wait when we were discussing the state machine refactor. We want to unblock the lifecycle thread if startup completes, timesout, or errors.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402075542", "createdAt": "2020-04-02T06:20:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null\n+                                            ? lifecycle.findInteriorChild(LIFECYCLE_STARTUP_NAMESPACE_TOPIC)\n+                                            : null;\n+                                    // only schedule task to report error for services which use startup\n+                                    // Default startup time is 120 seconds\n+                                    if (startUpTopic != null) {\n+                                        Integer timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(120).getOnce();\n+                                        Future<?> schedule =\n+                                                context.get(ScheduledExecutorService.class).schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0OTYzNw==", "bodyText": "If we wait for the future to complete (like in install and shutdown), lifecycle thread would be able to make any state transition until startup timeout is completed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402649637", "createdAt": "2020-04-02T23:16:19Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +483,26 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = lifecycle != null\n+                                            ? lifecycle.findInteriorChild(LIFECYCLE_STARTUP_NAMESPACE_TOPIC)\n+                                            : null;\n+                                    // only schedule task to report error for services which use startup\n+                                    // Default startup time is 120 seconds\n+                                    if (startUpTopic != null) {\n+                                        Integer timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(120).getOnce();\n+                                        Future<?> schedule =\n+                                                context.get(ScheduledExecutorService.class).schedule(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTU0Mg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYzMjk4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMzo0N1rOF_c0gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNTo1N1rOF_2KnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjgwMg==", "bodyText": "typo: completes_without_exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402076802", "createdAt": "2020-04-02T06:23:47Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjA2MA==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492060", "createdAt": "2020-04-02T17:35:57Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjgwMg=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYzNjM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNDo0NVrOF_c2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNjoxMlrOF_2LgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzI1MQ==", "bodyText": "This won't actually do anything to block the test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402077251", "createdAt": "2020-04-02T06:24:45Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_WHEN_one_service_is_broken_THEN_waitForServicesToStart_completes_Exceptionally()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.BROKEN);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        future.whenComplete((v, t) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjI4OA==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492288", "createdAt": "2020-04-02T17:36:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_WHEN_one_service_is_broken_THEN_waitForServicesToStart_completes_Exceptionally()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.BROKEN);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        future.whenComplete((v, t) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzI1MQ=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYzODUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNTozOVrOF_c3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzozNjoxNlrOF_2Lqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzU3MA==", "bodyText": "You'll need to use ServiceInborkenStateAfterDeploymentException ex = assertThrows(ServiceInborkenStateAfterDeploymentException.class, () -> future.get(1, TimeUnit.Seconds)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402077570", "createdAt": "2020-04-02T06:25:39Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_WHEN_one_service_is_broken_THEN_waitForServicesToStart_completes_Exceptionally()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.BROKEN);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        future.whenComplete((v, t) -> {\n+            assertTrue(t instanceof ServiceInBrokenStateAfterDeploymentException);\n+            EvergreenService brokenService = ((ServiceInBrokenStateAfterDeploymentException) t).getBrokenService();\n+            assertEquals(mockMainService, brokenService);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ5MjMzMQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402492331", "createdAt": "2020-04-02T17:36:16Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +42,46 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_complete_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());\n+    }\n+\n+    @Test\n+    public void GIVEN_deployment_WHEN_one_service_is_broken_THEN_waitForServicesToStart_completes_Exceptionally()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.BROKEN);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        future.whenComplete((v, t) -> {\n+            assertTrue(t instanceof ServiceInBrokenStateAfterDeploymentException);\n+            EvergreenService brokenService = ((ServiceInBrokenStateAfterDeploymentException) t).getBrokenService();\n+            assertEquals(mockMainService, brokenService);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzU3MA=="}, "originalCommit": {"oid": "dcbe3e44bbe72b9d02faabc39a728deb283b21d9"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njg3NjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxMDoyNFrOF_8pGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoxMDo0NVrOF__rZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODE2OQ==", "bodyText": "An updated DesiredState will also cancel this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402598169", "createdAt": "2020-04-02T21:10:24Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -608,6 +633,11 @@ private void startStateTransition() throws InterruptedException {\n                 logger.atInfo().setEventType(\"service-report-state\").kv(\"state\", toState).log();\n                 updateStateAndBroadcast(toState);\n             }\n+            // service transitioning to another state, cancelling task monitoring the timeout for startup\n+            Future triggerTimeOutFuture = triggerTimeOutFutureReference.get();\n+            if (triggerTimeOutFuture != null) {\n+                triggerTimeOutFuture.cancel(true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b1571f723b0bff5ee3606105b2937c7c2d78439"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NzkwOA==", "bodyText": "Synced offline.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402647908", "createdAt": "2020-04-02T23:10:45Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -608,6 +633,11 @@ private void startStateTransition() throws InterruptedException {\n                 logger.atInfo().setEventType(\"service-report-state\").kv(\"state\", toState).log();\n                 updateStateAndBroadcast(toState);\n             }\n+            // service transitioning to another state, cancelling task monitoring the timeout for startup\n+            Future triggerTimeOutFuture = triggerTimeOutFutureReference.get();\n+            if (triggerTimeOutFuture != null) {\n+                triggerTimeOutFuture.cancel(true);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU5ODE2OQ=="}, "originalCommit": {"oid": "0b1571f723b0bff5ee3606105b2937c7c2d78439"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI1MDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzozNjo1OVrOGAALyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNjozMVrOGABuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NjIwMw==", "bodyText": "Let's make sure to use these topic names elsewhere, ie. in GenericExternalService.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402656203", "createdAt": "2020-04-02T23:36:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -53,6 +55,10 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String LIFECYCLE_STARTUP_NAMESPACE_TOPIC = \"startup\";\n+    public static final String TIMEOUT_NAMESPACE_TOPIC = \"timeout\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTM1Ng==", "bodyText": "Found one in generic external service, updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402681356", "createdAt": "2020-04-03T01:06:31Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -53,6 +55,10 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String LIFECYCLE_STARTUP_NAMESPACE_TOPIC = \"startup\";\n+    public static final String TIMEOUT_NAMESPACE_TOPIC = \"timeout\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NjIwMw=="}, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI1MzcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzozODo0NVrOGAAN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNDowMlrOGABrfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NjcyMw==", "bodyText": "Looks like this change will fix a PMD issue, please make sure to decrease the max allowed PMD violations if it got decreased.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402656723", "createdAt": "2020-04-02T23:38:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -127,8 +133,8 @@ private void updateStateAndBroadcast(State newState) {\n         }\n \n         // TODO: Add validation\n-        logger.atInfo().setEventType(\"service-set-state\").kv(\"currentState\", currentState).kv(\"newState\", newState)\n-                .log();\n+        logger.atInfo().setEventType(\"service-set-state\")\n+                .kv(CURRENT_STATE_METRIC_NAME, currentState).kv(\"newState\", newState).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MDcwMQ==", "bodyText": "moved it down to 80", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402680701", "createdAt": "2020-04-03T01:04:02Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -127,8 +133,8 @@ private void updateStateAndBroadcast(State newState) {\n         }\n \n         // TODO: Add validation\n-        logger.atInfo().setEventType(\"service-set-state\").kv(\"currentState\", currentState).kv(\"newState\", newState)\n-                .log();\n+        logger.atInfo().setEventType(\"service-set-state\")\n+                .kv(CURRENT_STATE_METRIC_NAME, currentState).kv(\"newState\", newState).log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NjcyMw=="}, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI1NTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzozOToyNFrOGAAOrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNjowMVrOGABtfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1Njk0MQ==", "bodyText": "Keep the description for the backing task. This will make logging much much better, because we have no other way to tell what is running in the backing task.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402656941", "createdAt": "2020-04-02T23:39:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,7 +450,7 @@ private void startStateTransition() throws InterruptedException {\n                         } finally {\n                             installLatch.countDown();\n                         }\n-                    }, \"install\");\n+                    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTIxMw==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402681213", "createdAt": "2020-04-03T01:06:01Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -444,7 +450,7 @@ private void startStateTransition() throws InterruptedException {\n                         } finally {\n                             installLatch.countDown();\n                         }\n-                    }, \"install\");\n+                    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1Njk0MQ=="}, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI1NjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo0MDowM1rOGAAPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNjowNlrOGABtmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzEwNA==", "bodyText": "Again, keep the description here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402657104", "createdAt": "2020-04-02T23:40:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +512,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTI0MQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402681241", "createdAt": "2020-04-03T01:06:06Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +512,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzEwNA=="}, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI1ODIxOnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo0MToxOFrOGAAQqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMTowNjoxMlrOGABttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzQ0OQ==", "bodyText": "Instead of removing the description since it is unused, change the log on L627 to use the description, since the bt is a future which won't print anything helpful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402657449", "createdAt": "2020-04-02T23:41:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -619,7 +648,7 @@ private void startStateTransition() throws InterruptedException {\n     public void handleError() throws InterruptedException {\n     }\n \n-    private synchronized void setBackingTask(Runnable r, String db) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MTI3MQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402681271", "createdAt": "2020-04-03T01:06:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -619,7 +648,7 @@ private void startStateTransition() throws InterruptedException {\n     public void handleError() throws InterruptedException {\n     }\n \n-    private synchronized void setBackingTask(Runnable r, String db) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NzQ0OQ=="}, "originalCommit": {"oid": "62149c8e001ca92100d358f53d6db77013dd1ff3"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQzNTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxNjo1OVrOGAB4xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1Mjo0OFrOGAr92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDEwMw==", "bodyText": "Do we want to get rid of assert? Maybe use Object.notNull instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402684103", "createdAt": "2020-04-03T01:16:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -56,10 +56,10 @@ public int size() {\n \n     @Override\n     public void copyFrom(Node from) {\n-        assert (from != null);\n+        assert from != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzUyOQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403373529", "createdAt": "2020-04-03T22:52:48Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -56,10 +56,10 @@ public int size() {\n \n     @Override\n     public void copyFrom(Node from) {\n-        assert (from != null);\n+        assert from != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDEwMw=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQzNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxNzozNVrOGAB5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozMjozN1rOGAoPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDI3Ng==", "bodyText": "I think this might be wrong since this is inside of a lambda, the this is not the same this as outside of the lambda.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402684276", "createdAt": "2020-04-03T01:17:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -84,7 +84,7 @@ public Node getChild(String name) {\n      * @return the node\n      */\n     public Topic createLeafChild(String name) {\n-        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, Topics.this));\n+        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTE2Ng==", "bodyText": "Since createLeafChild is within the Topics class and there is no inner classes at play,  replacing Topics.this with this should not cause any problem.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403249166", "createdAt": "2020-04-03T19:01:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -84,7 +84,7 @@ public Node getChild(String name) {\n      * @return the node\n      */\n     public Topic createLeafChild(String name) {\n-        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, Topics.this));\n+        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, this));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDI3Ng=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MjU1Mg==", "bodyText": "A lambda is an anonymous inner class. The this inside the lambda is not the same as outside, AFAIK.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403252552", "createdAt": "2020-04-03T19:06:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -84,7 +84,7 @@ public Node getChild(String name) {\n      * @return the node\n      */\n     public Topic createLeafChild(String name) {\n-        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, Topics.this));\n+        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, this));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDI3Ng=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxMjUxMA==", "bodyText": "https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.27.2\nUnlike code appearing in anonymous class declarations, the meaning of names and the this and super keywords appearing in a lambda body, along with the accessibility of referenced declarations, are the same as in the surrounding context (except that lambda parameters introduce new names).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403312510", "createdAt": "2020-04-03T20:32:37Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -84,7 +84,7 @@ public Node getChild(String name) {\n      * @return the node\n      */\n     public Topic createLeafChild(String name) {\n-        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, Topics.this));\n+        Node n = children.computeIfAbsent(name, (nm) -> new Topic(context, nm, this));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDI3Ng=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQzODM0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxODoyN1rOGAB6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjo0NTo1M1rOGAHAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDUwNg==", "bodyText": "Why are you removing this from the constructor?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402684506", "createdAt": "2020-04-03T01:18:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -102,7 +108,6 @@\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.context = topics.getContext();\n-        this.lifecycle = topics.findInteriorChild(SERVICE_LIFECYCLE_NAMESPACE_TOPIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NzkwOA==", "bodyText": "same reason as below", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402767908", "createdAt": "2020-04-03T06:45:53Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -102,7 +108,6 @@\n     public EvergreenService(Topics topics) {\n         this.config = topics;\n         this.context = topics.getContext();\n-        this.lifecycle = topics.findInteriorChild(SERVICE_LIFECYCLE_NAMESPACE_TOPIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDUwNg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQzOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxOToxNlrOGAB7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1MToxM1rOGAr8Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDczMA==", "bodyText": "All this should be in the constructor, and then subscribed to in order to get updates if the timeout changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402684730", "createdAt": "2020-04-03T01:19:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2Nzg3OQ==", "bodyText": "I didn't add this to the constructor because if a startup or run got added via mergeinConfig then the variable initialized in constructor will not get updated. We can subscribe to changes and update the values but say if the field is missing we will have to subscribe to its parent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402767879", "createdAt": "2020-04-03T06:45:49Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }\n+                                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDczMA=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzA2Nw==", "bodyText": "Refactored to use find in topics", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403373067", "createdAt": "2020-04-03T22:51:13Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }\n+                                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDczMA=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ0MDE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxOToyOVrOGAB7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NjoyM1rOGBlj2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDc2OA==", "bodyText": "is this an extra space?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402684768", "createdAt": "2020-04-03T01:19:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +518,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },  \"start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzA5OA==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403373098", "createdAt": "2020-04-03T22:51:18Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +518,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },  \"start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDc2OA=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MzEwNQ==", "bodyText": "Still present it would seem.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404283105", "createdAt": "2020-04-06T17:58:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +518,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },  \"start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDc2OA=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzE0NQ==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404317145", "createdAt": "2020-04-06T18:56:23Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -488,7 +518,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },  \"start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NDc2OA=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ0MzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToyMToyMVrOGAB9NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozNzo1MFrOGAG02Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTIzNw==", "bodyText": "use != null? I think PMD will be ok with it, and if not, let's ignore that because this is more complicated with the ternary.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402685237", "createdAt": "2020-04-03T01:21:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -653,7 +691,7 @@ public void serviceErrored() {\n     }\n \n     public boolean isErrored() {\n-        return !getState().isHappy() || error != null;\n+        return getState().isHappy() && error == null ? false : true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NTAxNw==", "bodyText": "PMD was complaining complicated ternary operation  because of the ! and !=.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402765017", "createdAt": "2020-04-03T06:37:50Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -653,7 +691,7 @@ public void serviceErrored() {\n     }\n \n     public boolean isErrored() {\n-        return !getState().isHappy() || error != null;\n+        return getState().isHappy() && error == null ? false : true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTIzNw=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzQ0ODA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToyMzo0OFrOGAB_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1MTozOFrOGAr8mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTkyMg==", "bodyText": "Run should be handled by GenericExternalService. Since EvergreenService has no run() API it should not be doing anything with it. IMO run() is a detail of GenericExternalService which should be encapsulated within it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r402685922", "createdAt": "2020-04-03T01:23:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MzIxMQ==", "bodyText": "Agree. Can we move this timeout logic to GenericExternalService?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403143211", "createdAt": "2020-04-03T16:54:08Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTkyMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE2NDIyMg==", "bodyText": "startup and run are two ways you can move the service to running. There is not much difference between them other than how they transition the service to finished state once the script execution finishes. GenericExternalService also do not have run() method, both run and startup configuration is handled in the startup().\nIts not a big change to move this to GenericExternalService, but since both the timeouts stand has the same behaviour I though it would be better to have it in one place.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403164222", "createdAt": "2020-04-03T17:18:46Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTkyMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzIxMQ==", "bodyText": "Moved run timeout to GenericExternalService", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403373211", "createdAt": "2020-04-03T22:51:38Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -477,8 +482,33 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startUpTopic = getStartUpTopic();\n+                                    Integer timeout = null;\n+                                    if (startUpTopic != null) {\n+                                        timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                .dflt(DEFAULT_STARTUP_STAGE_TIMEOUT_IN_SEC).getOnce();\n+                                        Topics runTopic = getRunTopic();\n+                                        if (runTopic != null) {\n+                                            timeout = (Integer) startUpTopic.findLeafChild(TIMEOUT_NAMESPACE_TOPIC)\n+                                                    .dflt(null).getOnce();\n+                                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4NTkyMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDQ1NzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo1NzozNVrOGAeEVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzozOTo1OFrOGBG2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NTgxMg==", "bodyText": "Why do you put a reference of the service in the exception? Isn't the name of the service sufficient?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403145812", "createdAt": "2020-04-03T16:57:35Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceUpdateException extends DeploymentException {\n+\n+    @Getter\n+    private EvergreenService brokenService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE2NDI4Nw==", "bodyText": "I added it in case, a more richer message needed to be constructed by DA.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403164287", "createdAt": "2020-04-03T17:18:50Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceUpdateException extends DeploymentException {\n+\n+    @Getter\n+    private EvergreenService brokenService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NTgxMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNjU5MA==", "bodyText": "This doesn't feel right. The handler of the exception shouldn't need to inspect EvergreenService.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403336590", "createdAt": "2020-04-03T21:08:12Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceUpdateException extends DeploymentException {\n+\n+    @Getter\n+    private EvergreenService brokenService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NTgxMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMzk0MA==", "bodyText": "removed EvergreenService reference from exception and updated the error message", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403813940", "createdAt": "2020-04-06T03:39:58Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Getter;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")\n+public class ServiceUpdateException extends DeploymentException {\n+\n+    @Getter\n+    private EvergreenService brokenService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NTgxMg=="}, "originalCommit": {"oid": "53f1974927f39c36a198527ac01856026e2b4470"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjQ0MjAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMzo1NDoxN1rOGAu0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzozOTozMVrOGBG10g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDM0OQ==", "bodyText": "Thanks for adding these. Can you copy lookup also from Configuration and then have the lookup and find methods in Config delegate to these methods on the root topics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403420349", "createdAt": "2020-04-04T03:54:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -133,6 +133,41 @@ public Topic lookup(String... path) {\n         return n.createLeafChild(path[limit]);\n     }\n \n+    /**\n+     * Find, but do not create if missing, a topic (a name/value pair) in the\n+     * config file. Returns null if missing.\n+     *\n+     * @param path String[] of node names to traverse to find or create the Topic\n+     */\n+    public Topic find(String... path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37f9d91ed014f232a16f9ae7078bea466e83bfd6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMzg0Mg==", "bodyText": "Done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403813842", "createdAt": "2020-04-06T03:39:31Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -133,6 +133,41 @@ public Topic lookup(String... path) {\n         return n.createLeafChild(path[limit]);\n     }\n \n+    /**\n+     * Find, but do not create if missing, a topic (a name/value pair) in the\n+     * config file. Returns null if missing.\n+     *\n+     * @param path String[] of node names to traverse to find or create the Topic\n+     */\n+    public Topic find(String... path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDM0OQ=="}, "originalCommit": {"oid": "37f9d91ed014f232a16f9ae7078bea466e83bfd6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MDo0NVrOGBG_Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDoxMjowNFrOGBHPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjIxMQ==", "bodyText": "Looks like you can get rid of this now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403816211", "createdAt": "2020-04-06T03:50:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyMDMzMA==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403820330", "createdAt": "2020-04-06T04:12:04Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/exceptions/ServiceUpdateException.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.aws.iot.evergreen.deployment.exceptions;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+@SuppressFBWarnings(justification = \"This does not need to be serializable\", value = \"SE_BAD_FIELD\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjIxMQ=="}, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY2Njc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1MjoxMlrOGBHAJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDoxMjowN1rOGBHPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjQ4Nw==", "bodyText": "This happens a lot. I think this should drop to debug.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403816487", "createdAt": "2020-04-06T03:52:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -635,16 +662,19 @@ private void serviceTerminatedMoveToDesiredState(@Nonnull State desiredState) {\n     public void handleError() throws InterruptedException {\n     }\n \n-    private synchronized void setBackingTask(Runnable r, String db) {\n+    private synchronized void setBackingTask(Runnable r, String action) {\n         Future bt = backingTask;\n-        if (bt != null) {\n-            backingTask = null;\n-            if (!bt.isDone()) {\n-                logger.info(\"Stopping backingTask {}\", bt);\n-                bt.cancel(true);\n-            }\n+        String btName = backingTaskName;\n+\n+        if (!bt.isDone()) {\n+            backingTask = CompletableFuture.completedFuture(null);\n+            logger.info(\"Stopping backingTask {}\", btName);\n+            bt.cancel(true);\n         }\n+\n         if (r != null) {\n+            backingTaskName = action;\n+            logger.info(\"Scheduling backingTask {}\", backingTaskName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyMDMzNQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403820335", "createdAt": "2020-04-06T04:12:07Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -635,16 +662,19 @@ private void serviceTerminatedMoveToDesiredState(@Nonnull State desiredState) {\n     public void handleError() throws InterruptedException {\n     }\n \n-    private synchronized void setBackingTask(Runnable r, String db) {\n+    private synchronized void setBackingTask(Runnable r, String action) {\n         Future bt = backingTask;\n-        if (bt != null) {\n-            backingTask = null;\n-            if (!bt.isDone()) {\n-                logger.info(\"Stopping backingTask {}\", bt);\n-                bt.cancel(true);\n-            }\n+        String btName = backingTaskName;\n+\n+        if (!bt.isDone()) {\n+            backingTask = CompletableFuture.completedFuture(null);\n+            logger.info(\"Stopping backingTask {}\", btName);\n+            bt.cancel(true);\n         }\n+\n         if (r != null) {\n+            backingTaskName = action;\n+            logger.info(\"Scheduling backingTask {}\", backingTaskName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjQ4Nw=="}, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTY3MDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzo1NDoyM1rOGBHCAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNDozNzozOFrOGBHjWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjk2MA==", "bodyText": "This is overcomplicated. Exec has a timeout field which you can set instead. Try modifying the run function to lookup both the script and the timeout.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403816960", "createdAt": "2020-04-06T03:54:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,29 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyNTMzMw==", "bodyText": "Synced offline, The timeout in exec doesn't do what we want, its causes the run() to block till the timeout is breached. Having a job scheduled into the future is better than having a thread wait the whole time.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403825333", "createdAt": "2020-04-06T04:36:51Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,29 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjk2MA=="}, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgyNTQ5OQ==", "bodyText": "Thanks for pointing it out, i didn't know there was a timeout in exec :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r403825499", "createdAt": "2020-04-06T04:37:38Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,29 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxNjk2MA=="}, "originalCommit": {"oid": "b04145b56ac40794602b86ad3a1763b1902f2fdf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM2NzY4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0ODoyOFrOGBgzSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0ODoyOFrOGBgzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzOTE3OA==", "bodyText": "Good!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404239178", "createdAt": "2020-04-06T16:48:28Z", "author": {"login": "ShirleyZheng92"}, "path": "pom.xml", "diffHunk": "@@ -170,7 +170,7 @@\n                 <version>3.13.0</version>\n                 <configuration>\n                     <!-- Current violations should not be exceeded. Try to decrease these over time -->\n-                    <maxAllowedViolations>89</maxAllowedViolations>\n+                    <maxAllowedViolations>81</maxAllowedViolations>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM3MjMwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0OTozMFrOGBg2Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyMjowOVrOGCOJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzOTg5MA==", "bodyText": "Curious what this is?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404239890", "createdAt": "2020-04-06T16:49:30Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+---\n+services:\n+  plain:\n+    lifecycle:\n+      startup:\n+        all: \"{platform.invoke} {args}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MjAzNQ==", "bodyText": "something that got copied over from another config, I am not using this service in the test though.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404982035", "createdAt": "2020-04-07T17:22:09Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+---\n+services:\n+  plain:\n+    lifecycle:\n+      startup:\n+        all: \"{platform.invoke} {args}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzOTg5MA=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM3MjcwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0OTozNVrOGBg2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0OTozNVrOGBg2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzOTk1Ng==", "bodyText": "Curious what this is?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404239956", "createdAt": "2020-04-06T16:49:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+---\n+services:\n+  plain:\n+    lifecycle:\n+      startup:\n+        all: \"{platform.invoke} {args}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM4MjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1MjowN1rOGBg8jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMzozM1rOGCIAmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MTU0OA==", "bodyText": "Can this be in GenericExternalService.java", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404241548", "createdAt": "2020-04-06T16:52:07Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -54,6 +56,11 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String LIFECYCLE_STARTUP_NAMESPACE_TOPIC = \"startup\";\n+    public static final String LIFECYCLE_RUN_NAMESPACE_TOPIC = \"run\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2Njk5MQ==", "bodyText": "+1, run is specific to external", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404366991", "createdAt": "2020-04-06T20:27:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -54,6 +56,11 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String LIFECYCLE_STARTUP_NAMESPACE_TOPIC = \"startup\";\n+    public static final String LIFECYCLE_RUN_NAMESPACE_TOPIC = \"run\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MTU0OA=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MTU2MQ==", "bodyText": "Moved run to external", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404881561", "createdAt": "2020-04-07T15:03:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -54,6 +56,11 @@\n     public static final String SERVICES_NAMESPACE_TOPIC = \"services\";\n     public static final String SERVICE_LIFECYCLE_NAMESPACE_TOPIC = \"lifecycle\";\n     public static final String SERVICE_NAME_KEY = \"serviceName\";\n+    public static final String LIFECYCLE_STARTUP_NAMESPACE_TOPIC = \"startup\";\n+    public static final String LIFECYCLE_RUN_NAMESPACE_TOPIC = \"run\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MTU0OA=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODM5MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1NDozM1rOGBhCrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMzoyMlrOGCH_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MzExOQ==", "bodyText": "Hmm can you add more message?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404243119", "createdAt": "2020-04-06T16:54:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,29 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            // sigint, sigterm will cause the process to exit with a non-zero exit code\n+                            // which would move the service into errored state\n+                            processToClose.close();\n+                        } catch (IOException e) {\n+                            logger.atError(\"\").log(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MTQwMA==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404881400", "createdAt": "2020-04-07T15:03:22Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,29 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            // sigint, sigterm will cause the process to exit with a non-zero exit code\n+                            // which would move the service into errored state\n+                            processToClose.close();\n+                        } catch (IOException e) {\n+                            logger.atError(\"\").log(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0MzExOQ=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODU1MjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzozNTo0N1rOGBiokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo1NDo1NlrOGCKcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTIwMg==", "bodyText": "Why not use find here with the whole path to TIMEOUT_NAMESPACE_TOPIC?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404269202", "createdAt": "2020-04-06T17:35:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -478,8 +479,29 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startupTopics = config.findTopics(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3NTAyMw==", "bodyText": "I want to differentiate between timeout not specified for startup life-cycle stage vs timeout not present because startup life-cycle stage itself is missing. find will return null in both the cases and we only need to start a timer if startup life-cycle stage is present", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404275023", "createdAt": "2020-04-06T17:45:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -478,8 +479,29 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startupTopics = config.findTopics(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTIwMg=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0OTIwNw==", "bodyText": "I feel the case of \"startup life-cycle stage itself is missing\" doesn't make a difference here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404349207", "createdAt": "2020-04-06T19:54:29Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -478,8 +479,29 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startupTopics = config.findTopics(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTIwMg=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMTUwMQ==", "bodyText": "We don't enforce a timeout if startup life-cycle stage is missing as its handled in generic external service. Hence the explicit check startupTopics != null before enforcing timeout", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404921501", "createdAt": "2020-04-07T15:54:56Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -478,8 +479,29 @@ private void startStateTransition() throws InterruptedException {\n                                             .log(\"Got interrupted while waiting for dependency ready\");\n                                     return;\n                                 }\n-\n                                 try {\n+                                    Topics startupTopics = config.findTopics(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI2OTIwMg=="}, "originalCommit": {"oid": "d283fce79b3ffd0ea7e2e68e54699e6ee3b66fcb"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODYzMTU0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NjozNVrOGBjaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NjowMlrOGBljIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MTkwMw==", "bodyText": "Can we make this timeout any faster?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404281903", "createdAt": "2020-04-06T17:56:35Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -36,4 +36,27 @@ void GIVEN_service_config_with_broken_skipif_config_WHEN_launch_service_THEN_ser\n         // THEN\n         assertTrue(testErrored.await(60, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_timeout_WHEN_timeout_expires_THEN_move_service_to_errored()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_timesout.yaml\").toString());\n+        kernel.launch();\n+        CountDownLatch ServicesAErroredLatch = new CountDownLatch(1);\n+        CountDownLatch ServicesBErroredLatch = new CountDownLatch(1);\n+        // service sleeps for 120 seconds during startup and timeout is 5 seconds, service should transition to errored\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if(\"ServiceA\".equals(service.getName()) && State.ERRORED.equals(newState)){\n+                ServicesAErroredLatch.countDown();\n+            }\n+            if(\"ServiceB\".equals(service.getName()) && State.ERRORED.equals(newState)){\n+                ServicesBErroredLatch.countDown();\n+            }\n+        });\n+\n+        assertTrue(ServicesAErroredLatch.await(60, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjk2Mw==", "bodyText": "made it 30 seconds. lets see if that works", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316963", "createdAt": "2020-04-06T18:56:02Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -36,4 +36,27 @@ void GIVEN_service_config_with_broken_skipif_config_WHEN_launch_service_THEN_ser\n         // THEN\n         assertTrue(testErrored.await(60, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_service_with_timeout_WHEN_timeout_expires_THEN_move_service_to_errored()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_timesout.yaml\").toString());\n+        kernel.launch();\n+        CountDownLatch ServicesAErroredLatch = new CountDownLatch(1);\n+        CountDownLatch ServicesBErroredLatch = new CountDownLatch(1);\n+        // service sleeps for 120 seconds during startup and timeout is 5 seconds, service should transition to errored\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if(\"ServiceA\".equals(service.getName()) && State.ERRORED.equals(newState)){\n+                ServicesAErroredLatch.countDown();\n+            }\n+            if(\"ServiceB\".equals(service.getName()) && State.ERRORED.equals(newState)){\n+                ServicesBErroredLatch.countDown();\n+            }\n+        });\n+\n+        assertTrue(ServicesAErroredLatch.await(60, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MTkwMw=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODYzMzY5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo1NzowNlrOGBjbjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NTozNVrOGBliMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjI1Mg==", "bodyText": "I'd suggest getting rid of this since it doesn't do anything.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404282252", "createdAt": "2020-04-06T17:57:06Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+---\n+services:\n+  plain:\n+    lifecycle:\n+      startup:\n+        all: \"{platform.invoke} {args}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjcyMQ==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316721", "createdAt": "2020-04-06T18:55:35Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/kernel/service_timesout.yaml", "diffHunk": "@@ -0,0 +1,28 @@\n+---\n+services:\n+  plain:\n+    lifecycle:\n+      startup:\n+        all: \"{platform.invoke} {args}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjI1Mg=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODY1MDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMToxOFrOGBjlzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NDozM1rOGBlfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NDg3OA==", "bodyText": "Won't this be wrong if it did not timeout? If it ran to completion, then we should not be reporting error or calling close here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404284878", "createdAt": "2020-04-06T18:01:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,28 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjA4MA==", "bodyText": "nice catch, fixed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316080", "createdAt": "2020-04-06T18:54:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,28 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NDg3OA=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODY1MjY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODowMjowNlrOGBjnfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NDozMVrOGBlfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NTMwOQ==", "bodyText": "should we check if the future is done?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404285309", "createdAt": "2020-04-06T18:02:06Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +44,47 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_completes_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjA1Ng==", "bodyText": "The function being tested does not complete the future unless there is an exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316056", "createdAt": "2020-04-06T18:54:31Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/mergeTest.java", "diffHunk": "@@ -21,5 +44,47 @@ public void testSomeMethod() throws Exception {\n         assertEquals(c.getRoot(), b.getRoot());\n     }\n \n+    @Test\n+    public void GIVEN_deployment_WHEN_all_service_are_running_THEN_waitForServicesToStart_completes_without_exception()\n+            throws InterruptedException {\n+        Kernel kernel = new Kernel();\n+        when(mockMainService.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceA.getState()).thenReturn(State.RUNNING);\n+        when(mockServiceB.getState()).thenReturn(State.RUNNING);\n+\n+        when(mockMainService.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceA.reachedDesiredState()).thenReturn(true);\n+        when(mockServiceB.reachedDesiredState()).thenReturn(true);\n+        CompletableFuture future = new CompletableFuture();\n+        Set<EvergreenService> evergreenServices =\n+                new HashSet(Arrays.asList(mockMainService, mockServiceA, mockServiceB));\n+        kernel.waitForServicesToStart(evergreenServices, future);\n+\n+        assertFalse(future.isCompletedExceptionally());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4NTMwOQ=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODcxNTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxOTo0OFrOGBkPWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NDo0MVrOGBlf_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NTUxMw==", "bodyText": "Proper handling?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404295513", "createdAt": "2020-04-06T18:19:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,28 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();\n+                            reportState(State.ERRORED);\n+                        } catch (IOException e) {\n+                            logger.atError(\"\").log(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjE1Ng==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316156", "createdAt": "2020-04-06T18:54:41Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,28 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();\n+                            reportState(State.ERRORED);\n+                        } catch (IOException e) {\n+                            logger.atError(\"\").log(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NTUxMw=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODcyNjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyMjozNFrOGBkV7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowOTo1MVrOGCLISw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzE5OQ==", "bodyText": "Does this need to be a field of the class since the lifecycle thread may break/continue which would cause this future to be lost?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404297199", "createdAt": "2020-04-06T18:22:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -416,14 +417,14 @@ private void startStateTransition() throws InterruptedException {\n         while (!(isClosed.get() && getState().isClosable())) {\n             Optional<State> desiredState;\n             State current = getState();\n-            logger.atInfo().setEventType(\"service-state-transition-start\").kv(\"currentState\", current).log();\n+            logger.atInfo().setEventType(\"service-state-transition-start\").kv(CURRENT_STATE_METRIC_NAME, current).log();\n \n             // if already in desired state, remove the head of desired state list.\n             desiredState = peekOrRemoveFirstDesiredState(current);\n             while (desiredState.isPresent() && desiredState.get().equals(current)) {\n                 desiredState = peekOrRemoveFirstDesiredState(current);\n             }\n-\n+            AtomicReference<Future> triggerTimeOutReference = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjM0NA==", "bodyText": "No, triggerTimeOutReference is only valid within startStateTransition", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404316344", "createdAt": "2020-04-06T18:54:57Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -416,14 +417,14 @@ private void startStateTransition() throws InterruptedException {\n         while (!(isClosed.get() && getState().isClosable())) {\n             Optional<State> desiredState;\n             State current = getState();\n-            logger.atInfo().setEventType(\"service-state-transition-start\").kv(\"currentState\", current).log();\n+            logger.atInfo().setEventType(\"service-state-transition-start\").kv(CURRENT_STATE_METRIC_NAME, current).log();\n \n             // if already in desired state, remove the head of desired state list.\n             desiredState = peekOrRemoveFirstDesiredState(current);\n             while (desiredState.isPresent() && desiredState.get().equals(current)) {\n                 desiredState = peekOrRemoveFirstDesiredState(current);\n             }\n-\n+            AtomicReference<Future> triggerTimeOutReference = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzE5OQ=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NzkwMA==", "bodyText": "Add timeout to install as well? L452 has it hardcoded.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404367900", "createdAt": "2020-04-06T20:28:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -416,14 +417,14 @@ private void startStateTransition() throws InterruptedException {\n         while (!(isClosed.get() && getState().isClosable())) {\n             Optional<State> desiredState;\n             State current = getState();\n-            logger.atInfo().setEventType(\"service-state-transition-start\").kv(\"currentState\", current).log();\n+            logger.atInfo().setEventType(\"service-state-transition-start\").kv(CURRENT_STATE_METRIC_NAME, current).log();\n \n             // if already in desired state, remove the head of desired state list.\n             desiredState = peekOrRemoveFirstDesiredState(current);\n             while (desiredState.isPresent() && desiredState.get().equals(current)) {\n                 desiredState = peekOrRemoveFirstDesiredState(current);\n             }\n-\n+            AtomicReference<Future> triggerTimeOutReference = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzE5OQ=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMjY4Mw==", "bodyText": "why not, added support for configurable timeout for install. There is still hard coded timeout for shutdown, that can be fixed while tuning all the shutdown timeouts", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404932683", "createdAt": "2020-04-07T16:09:51Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -416,14 +417,14 @@ private void startStateTransition() throws InterruptedException {\n         while (!(isClosed.get() && getState().isClosable())) {\n             Optional<State> desiredState;\n             State current = getState();\n-            logger.atInfo().setEventType(\"service-state-transition-start\").kv(\"currentState\", current).log();\n+            logger.atInfo().setEventType(\"service-state-transition-start\").kv(CURRENT_STATE_METRIC_NAME, current).log();\n \n             // if already in desired state, remove the head of desired state list.\n             desiredState = peekOrRemoveFirstDesiredState(current);\n             while (desiredState.isPresent() && desiredState.get().equals(current)) {\n                 desiredState = peekOrRemoveFirstDesiredState(current);\n             }\n-\n+            AtomicReference<Future> triggerTimeOutReference = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5NzE5OQ=="}, "originalCommit": {"oid": "7a6eb3135bf0dcfeb6265fe9e1c9f5d38f1169b1"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTE3MDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDoyOToxOVrOGBorUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMzoxNlrOGCH_lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2ODIwOA==", "bodyText": "There should be a space here. But only 1.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404368208", "createdAt": "2020-04-06T20:29:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -489,7 +511,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },\"start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3471c05965ddcda0c25e25d61f376fff6c3f953"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MTMwMw==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404881303", "createdAt": "2020-04-07T15:03:16Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -489,7 +511,7 @@ private void startStateTransition() throws InterruptedException {\n                                     reportState(State.ERRORED);\n                                     logger.atError().setEventType(\"service-runtime-error\").setCause(t).log();\n                                 }\n-                            }, \"start\");\n+                            },\"start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2ODIwOA=="}, "originalCommit": {"oid": "e3471c05965ddcda0c25e25d61f376fff6c3f953"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTE3NzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDozMToxOFrOGBovjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMzoxMVrOGCH_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2OTI5Mw==", "bodyText": "Whether it errors here or not, you still need to do the reportState, right? Should you maybe just put the report into finally?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404369293", "createdAt": "2020-04-06T20:31:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,32 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                    if (processToClose.isRunning()) {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();\n+                            reportState(State.ERRORED);\n+\n+                        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3471c05965ddcda0c25e25d61f376fff6c3f953"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MTIzOQ==", "bodyText": "Moved reportState above processToClose.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/151#discussion_r404881239", "createdAt": "2020-04-07T15:03:11Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -106,12 +108,32 @@ public void startup() throws InterruptedException {\n                     }\n                 }\n             });\n+            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n+            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n+            if (timeout != null) {\n+                Exec processToClose = currentScript;\n+                context.get(ScheduledExecutorService.class).schedule(() -> {\n+                    if (processToClose.isRunning()) {\n+                        try {\n+                            logger.atWarn(\"service-run-timed-out\")\n+                                    .log(\"Service failed to run within timeout, calling close in process\");\n+                            processToClose.close();\n+                            reportState(State.ERRORED);\n+\n+                        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2OTI5Mw=="}, "originalCommit": {"oid": "e3471c05965ddcda0c25e25d61f376fff6c3f953"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4980, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}