{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDcwMTk1", "number": 255, "title": "Deflake MQTT reconnection test", "bodyText": "Issue #, if available:\nDescription of changes:\nAddress test failure: First Job was updated to SUCCEEDED in the cloud, then DS tries to update from the persisted status again to be IN_PROGRESS.\n\nAlways update all persisted deployment status in order.\n\nWhy is this change necessary:\nHow was this change tested:\nExisting tests.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-22T17:57:34Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255", "merged": true, "mergeCommit": {"oid": "d3569fe308c33b006fb3e779f58630a1e1682f9b"}, "closed": true, "closedAt": "2020-05-26T23:38:07Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj2KvNAFqTQxNzA5MzU1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclNqwkgFqTQxODc1NTM4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDkzNTU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-417093554", "createdAt": "2020-05-22T18:00:01Z", "commit": {"oid": "a5f65ac253bd23dc95fd0401973e401ae3f9f2da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODowMDowMVrOGZfg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODowMDowMVrOGZfg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4Mzg5OA==", "bodyText": "nit: I don't think we capitalize these most of the time.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#discussion_r429383898", "createdAt": "2020-05-22T18:00:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -388,7 +388,7 @@ private Boolean deploymentStatusChanged(Map<String, Object> deploymentDetails) {\n         } catch (ExecutionException e) {\n             if (e.getCause() instanceof MqttException) {\n                 //caused due to connectivity issue\n-                logger.atWarn().setCause(e).log(UPDATE_DEPLOYMENT_STATUS_MQTT_ERROR_LOG);\n+                logger.atWarn().setCause(e).kv(\"Status\", status).log(UPDATE_DEPLOYMENT_STATUS_MQTT_ERROR_LOG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f65ac253bd23dc95fd0401973e401ae3f9f2da"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5f65ac253bd23dc95fd0401973e401ae3f9f2da", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a5f65ac253bd23dc95fd0401973e401ae3f9f2da", "committedDate": "2020-05-22T17:54:19Z", "message": "Deflake MQTT reconnection test"}, "afterCommit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d86f365ca47c6cef84468de01d3ea64a2838e069", "committedDate": "2020-05-22T20:19:34Z", "message": "Deflake MQTT reconnection test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjAzOTA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-417203906", "createdAt": "2020-05-22T21:56:39Z", "commit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo1NjozOVrOGZkuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo1NjozOVrOGZkuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ2OTM4NA==", "bodyText": "if there are multiple updates for same deployment id, and if one of the update was not published then shouldnt we skip the rest to make sure the updates are not send out of order?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#discussion_r429469384", "createdAt": "2020-05-22T21:56:39Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -92,43 +90,40 @@ public void persistAndPublishDeploymentStatus(String jobId, DeploymentType deplo\n      * all deployments the device performed when offline\n      * @param type deployment type\n      */\n-    public void publishPersistedStatusUpdates(DeploymentType type) {\n+    public synchronized void publishPersistedStatusUpdates(DeploymentType type) {\n         Topics processedDeployments = getProcessedDeployments();\n-        //TODO: better sync approach.\n-        synchronized (processedDeployments) {\n-            ArrayList<Topic> deployments = new ArrayList<>();\n-            processedDeployments.forEach(topic -> {\n-\n-                Map<String, Object> deploymentDetails = (HashMap) ((Topic) topic).getOnce();\n-                DeploymentType deploymentType = (DeploymentType)\n-                        deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n-                if (deploymentType.equals(type)) {\n-                    deployments.add((Topic) topic);\n-                }\n-            });\n-            // Topics are stored as ConcurrentHashMaps which do not guarantee ordering of elements\n-            // We want the statuses to be updated in the cloud in the order in which they were processed on the device.\n-            // This will be accurate representation of what happened on the device, especially when deployment service\n-            // processes multiple deployments in the order in which they come. Additionally, a customer workflow can\n-            // depend on this order. If Group2 gets successfully updated before Group1 then customer workflow may\n-            // error out.\n-            List<Topic> sortedByTimestamp = deployments.stream().sorted((o1, o2) -> {\n-                if (Long.valueOf(o1.getModtime()) > Long.valueOf(o2.getModtime())) {\n-                    return 1;\n-                }\n-                return -1;\n-            }).collect(Collectors.toList());\n-\n-            Iterator iterator = sortedByTimestamp.iterator();\n-            while (iterator.hasNext()) {\n-                Topic topic = (Topic) iterator.next();\n-                Map<String, Object> deploymentDetails = (HashMap) topic.getOnce();\n-                DeploymentType deploymentType = (DeploymentType)\n-                        deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n-\n-                if (getConsumerForDeploymentType(deploymentType).apply(deploymentDetails)) {\n-                    processedDeployments.remove(topic);\n-                }\n+        ArrayList<Topic> deployments = new ArrayList<>();\n+        processedDeployments.forEach(topic -> {\n+\n+            Map<String, Object> deploymentDetails = (HashMap) ((Topic) topic).getOnce();\n+            DeploymentType deploymentType = (DeploymentType)\n+                    deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n+            if (deploymentType.equals(type)) {\n+                deployments.add((Topic) topic);\n+            }\n+        });\n+        // Topics are stored as ConcurrentHashMaps which do not guarantee ordering of elements\n+        // We want the statuses to be updated in the cloud in the order in which they were processed on the device.\n+        // This will be accurate representation of what happened on the device, especially when deployment service\n+        // processes multiple deployments in the order in which they come. Additionally, a customer workflow can\n+        // depend on this order. If Group2 gets successfully updated before Group1 then customer workflow may\n+        // error out.\n+        List<Topic> sortedByTimestamp = deployments.stream().sorted((o1, o2) -> {\n+            if (Long.valueOf(o1.getModtime()) > Long.valueOf(o2.getModtime())) {\n+                return 1;\n+            }\n+            return -1;\n+        }).collect(Collectors.toList());\n+\n+        Iterator iterator = sortedByTimestamp.iterator();\n+        while (iterator.hasNext()) {\n+            Topic topic = (Topic) iterator.next();\n+            Map<String, Object> deploymentDetails = (HashMap) topic.getOnce();\n+            DeploymentType deploymentType = (DeploymentType)\n+                    deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n+\n+            if (getConsumerForDeploymentType(deploymentType).apply(deploymentDetails)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjA0OTAw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-417204900", "createdAt": "2020-05-22T21:59:58Z", "commit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo1OTo1OFrOGZk4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMTo1OTo1OFrOGZk4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3MTgyNA==", "bodyText": "Can we only publish updates of the deployment id at hand and not publish status for the type. maybe publish can take deployment id along with type?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#discussion_r429471824", "createdAt": "2020-05-22T21:59:58Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -66,24 +66,22 @@ public void persistAndPublishDeploymentStatus(String jobId, DeploymentType deplo\n             return;\n         }\n \n-        Topics processedDeployments = getProcessedDeployments();\n-        //While this method is being run, another thread could be running the publishPersistedStatusUpdates\n-        // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n-        synchronized (processedDeployments) {\n+        synchronized (this) {\n+            //While this method is being run, another thread could be running the publishPersistedStatusUpdates\n+            // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n             logger.atDebug().kv(JOB_ID_LOG_KEY_NAME, jobId).kv(\"JobStatus\", status).log(\"Storing job status\");\n             Map<String, Object> deploymentDetails = new HashMap<>();\n             deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID, jobId);\n             deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS, status);\n             deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS, statusDetails);\n             deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE, deploymentType);\n             //Each status update is uniquely stored\n+            Topics processedDeployments = getProcessedDeployments();\n             Topic thisJob = processedDeployments.createLeafChild(String.valueOf(System.currentTimeMillis()));\n             thisJob.withValue(deploymentDetails);\n-\n-            if (getConsumerForDeploymentType(deploymentType).apply(deploymentDetails)) {\n-                processedDeployments.remove(thisJob);\n-            }\n         }\n+\n+        publishPersistedStatusUpdates(deploymentType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjA1NzUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-417205750", "createdAt": "2020-05-22T22:02:52Z", "commit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowMjo1MlrOGZk-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMjowMjo1MlrOGZk-3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3MzUwMw==", "bodyText": "synchronize on type to enable better parallelization?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#discussion_r429473503", "createdAt": "2020-05-22T22:02:52Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -92,43 +90,40 @@ public void persistAndPublishDeploymentStatus(String jobId, DeploymentType deplo\n      * all deployments the device performed when offline\n      * @param type deployment type\n      */\n-    public void publishPersistedStatusUpdates(DeploymentType type) {\n+    public synchronized void publishPersistedStatusUpdates(DeploymentType type) {\n         Topics processedDeployments = getProcessedDeployments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af68be3993588d611443443c1747db8bb7cc99c8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af68be3993588d611443443c1747db8bb7cc99c8", "committedDate": "2020-05-23T00:56:26Z", "message": "Deflake MQTT reconnection test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d86f365ca47c6cef84468de01d3ea64a2838e069", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d86f365ca47c6cef84468de01d3ea64a2838e069", "committedDate": "2020-05-22T20:19:34Z", "message": "Deflake MQTT reconnection test"}, "afterCommit": {"oid": "af68be3993588d611443443c1747db8bb7cc99c8", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af68be3993588d611443443c1747db8bb7cc99c8", "committedDate": "2020-05-23T00:56:26Z", "message": "Deflake MQTT reconnection test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbeba99c682b1474f5583c32051bfac6c1e297c", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cbbeba99c682b1474f5583c32051bfac6c1e297c", "committedDate": "2020-05-26T18:12:14Z", "message": "Merge branch 'master' into mqtt-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27e18a57c44252b764df393d2885debe06618d6", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b27e18a57c44252b764df393d2885debe06618d6", "committedDate": "2020-05-26T19:20:50Z", "message": "Merge branch 'master' into mqtt-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzM0Mzg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-418734388", "createdAt": "2020-05-26T22:58:15Z", "commit": {"oid": "b27e18a57c44252b764df393d2885debe06618d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzM1MTc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-418735178", "createdAt": "2020-05-26T23:00:12Z", "commit": {"oid": "b27e18a57c44252b764df393d2885debe06618d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzowMDoxMlrOGazFcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzowMDoxMlrOGazFcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1MzEzOQ==", "bodyText": "why do this? Seems hacky if we break when deployments are quick.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#discussion_r430753139", "createdAt": "2020-05-26T23:00:12Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/e2e/deployment/local_store_content/recipes/SlowToDeployApp-1.0.0.yaml", "diffHunk": "@@ -0,0 +1,9 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: SlowToDeployApp\n+Description: An app that takes some time to install so as to slow down deployments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b27e18a57c44252b764df393d2885debe06618d6"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzM4NDgz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-418738483", "createdAt": "2020-05-26T23:08:53Z", "commit": {"oid": "b27e18a57c44252b764df393d2885debe06618d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e243af8ae5350f11bd6d132f4d499d9a228ba0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d4e243af8ae5350f11bd6d132f4d499d9a228ba0", "committedDate": "2020-05-26T23:08:59Z", "message": "Merge branch 'master' into mqtt-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzU1Mzg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/255#pullrequestreview-418755389", "createdAt": "2020-05-26T23:56:45Z", "commit": {"oid": "d4e243af8ae5350f11bd6d132f4d499d9a228ba0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2227, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}