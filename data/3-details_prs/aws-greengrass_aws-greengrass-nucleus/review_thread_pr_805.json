{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NDQ4Njc2", "number": 805, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoxMjoyMFrOFJDp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMjowOFrOFL259g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQxMzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoxMjoyMFrOILUmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMTo1NzoxMlrOISW_lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MjY1Ng==", "bodyText": "is it possible to use the Arn datatype instead of building it ourselves using string formatting?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r548742656", "createdAt": "2020-12-24T20:12:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -390,31 +399,55 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n      * @param roleName           name of target role\n      * @param rolePolicyName     name of policy to create and attach\n      * @param rolePolicyDocument document of policy to create and attach\n+     * @param awsRegion          aws region\n      * @return ARN of created policy\n      */\n-    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName,\n-                                                      String rolePolicyDocument) {\n-        try {\n+    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName, String rolePolicyDocument,\n+                                                      Region awsRegion) {\n+        Optional<String> tesRolePolicyArnOptional = getPolicyArn(rolePolicyName, awsRegion);\n+        if (tesRolePolicyArnOptional.isPresent()) {\n+            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n+                    + \"already%n\", rolePolicyName);\n+            return tesRolePolicyArnOptional;\n+        } else {\n             String tesRolePolicyArn;\n             CreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                     software.amazon.awssdk.services.iam.model.CreatePolicyRequest.builder().policyName(rolePolicyName)\n                             .policyDocument(rolePolicyDocument).build());\n             tesRolePolicyArn = createPolicyResponse.policy().arn();\n             outStream.printf(\"IAM role policy for TES \\\"%s\\\" created. This policy DOES NOT have S3 access, please \"\n-                            + \"modify it with your private components' artifact buckets/objects as needed when you \"\n+                    + \"modify it with your private components' artifact buckets/objects as needed when you \"\n                     + \"create and deploy private components %n\", rolePolicyName);\n             outStream.println(\"Attaching IAM role policy for TES to IAM role for TES...\");\n             iamClient.attachRolePolicy(\n                     AttachRolePolicyRequest.builder().roleName(roleName).policyArn(tesRolePolicyArn).build());\n             return Optional.of(tesRolePolicyArn);\n-        } catch (EntityAlreadyExistsException e) {\n-            // TODO: [P41215965] get and reuse the policy. non trivial because we can only get IAM policy by ARN\n-            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n-                    + \"already%n\", rolePolicyName);\n-            return Optional.empty();\n         }\n     }\n \n+    private Optional<String> getPolicyArn(String policyName, Region awsRegion) {\n+        String partition = awsRegion.metadata().partition().id();\n+        try {\n+            String policyArn = String.format(MANAGED_IAM_POLICY_ARN_FORMAT, partition, policyName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEyMjAwNw==", "bodyText": "I made this change in previous revision but had to revert it because it turns out that arns built like that(e.g. arn:aws:iam:null:null:policy/GreengrassV2TokenExchangeRoleAccess) do not work well with global services like IAM and when the ARNs are different based on managed vs customer created resources.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r556122007", "createdAt": "2021-01-12T21:57:12Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -390,31 +399,55 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n      * @param roleName           name of target role\n      * @param rolePolicyName     name of policy to create and attach\n      * @param rolePolicyDocument document of policy to create and attach\n+     * @param awsRegion          aws region\n      * @return ARN of created policy\n      */\n-    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName,\n-                                                      String rolePolicyDocument) {\n-        try {\n+    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName, String rolePolicyDocument,\n+                                                      Region awsRegion) {\n+        Optional<String> tesRolePolicyArnOptional = getPolicyArn(rolePolicyName, awsRegion);\n+        if (tesRolePolicyArnOptional.isPresent()) {\n+            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n+                    + \"already%n\", rolePolicyName);\n+            return tesRolePolicyArnOptional;\n+        } else {\n             String tesRolePolicyArn;\n             CreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                     software.amazon.awssdk.services.iam.model.CreatePolicyRequest.builder().policyName(rolePolicyName)\n                             .policyDocument(rolePolicyDocument).build());\n             tesRolePolicyArn = createPolicyResponse.policy().arn();\n             outStream.printf(\"IAM role policy for TES \\\"%s\\\" created. This policy DOES NOT have S3 access, please \"\n-                            + \"modify it with your private components' artifact buckets/objects as needed when you \"\n+                    + \"modify it with your private components' artifact buckets/objects as needed when you \"\n                     + \"create and deploy private components %n\", rolePolicyName);\n             outStream.println(\"Attaching IAM role policy for TES to IAM role for TES...\");\n             iamClient.attachRolePolicy(\n                     AttachRolePolicyRequest.builder().roleName(roleName).policyArn(tesRolePolicyArn).build());\n             return Optional.of(tesRolePolicyArn);\n-        } catch (EntityAlreadyExistsException e) {\n-            // TODO: [P41215965] get and reuse the policy. non trivial because we can only get IAM policy by ARN\n-            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n-                    + \"already%n\", rolePolicyName);\n-            return Optional.empty();\n         }\n     }\n \n+    private Optional<String> getPolicyArn(String policyName, Region awsRegion) {\n+        String partition = awsRegion.metadata().partition().id();\n+        try {\n+            String policyArn = String.format(MANAGED_IAM_POLICY_ARN_FORMAT, partition, policyName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0MjY1Ng=="}, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjM3MjMzOnYy", "diffSide": "LEFT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozMzoyMlrOIMCacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzo1MTo1MlrOIOhJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzM2Mg==", "bodyText": "Just realized this, should we change e2e tests to target prod?\nMaybe add a separate task for this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549493362", "createdAt": "2020-12-28T21:33:22Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -419,7 +428,8 @@ protected void setupTesRoleAndAlias() throws InterruptedException {\n         deviceProvisioningHelper.setupIoTRoleForTes(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n         if (tesRolePolicyArn == null || !tesRolePolicyArn.isPresent()) {\n             tesRolePolicyArn = deviceProvisioningHelper\n-                    .createAndAttachRolePolicy(TES_ROLE_NAME, TES_ROLE_POLICY_NAME, TES_ROLE_POLICY_DOCUMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5NDE1Nw==", "bodyText": "Not sure if we want to, should discuss", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r552094157", "createdAt": "2021-01-05T17:51:52Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -419,7 +428,8 @@ protected void setupTesRoleAndAlias() throws InterruptedException {\n         deviceProvisioningHelper.setupIoTRoleForTes(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n         if (tesRolePolicyArn == null || !tesRolePolicyArn.isPresent()) {\n             tesRolePolicyArn = deviceProvisioningHelper\n-                    .createAndAttachRolePolicy(TES_ROLE_NAME, TES_ROLE_POLICY_NAME, TES_ROLE_POLICY_DOCUMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzM2Mg=="}, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjM3NTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozNToyMFrOIMCcTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozNToyMFrOIMCcTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5MzgzOA==", "bodyText": "Update the required permission for e2e tests in readme https://github.com/aws-greengrass/aws-greengrass-nucleus/blame/main/DEVELOPING.md#L51-L57", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549493838", "createdAt": "2020-12-28T21:35:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -142,6 +147,7 @@ public DeviceProvisioningHelper(String awsRegion, String environmentStage, Print\n                 : EnvironmentStage.fromString(environmentStage);\n         this.iotClient = IotSdkClientFactory.getIotClient(awsRegion, envStage);\n         this.iamClient = IamSdkClientFactory.getIamClient(awsRegion);\n+        this.stsClient = StsSdkClientFactory.getStsClient(awsRegion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjM4MDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTozODowM1rOIMCewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNzo1Mzo1NVrOIOhOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDQ2Ng==", "bodyText": "Do we have a managed policy?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r549494466", "createdAt": "2020-12-28T21:38:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -108,6 +110,8 @@\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n     private static final String GREENGRASS_CLI_COMPONENT_NAME = \"aws.greengrass.Cli\";\n     private static final String INITIAL_DEPLOYMENT_NAME_FORMAT = \"Deployment for %s\";\n+    private static final String IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::%s:policy/%s\";\n+    private static final String MANAGED_IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::aws:policy/%s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5NTQwNA==", "bodyText": "We don't but since the arn is used to make a get request, it should look for it in both categories, this bit changed a bit now though after switching to the Arn builder", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r552095404", "createdAt": "2021-01-05T17:53:55Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -108,6 +110,8 @@\n     private static final String IOT_ROLE_POLICY_NAME_PREFIX = \"GreengrassTESCertificatePolicy\";\n     private static final String GREENGRASS_CLI_COMPONENT_NAME = \"aws.greengrass.Cli\";\n     private static final String INITIAL_DEPLOYMENT_NAME_FORMAT = \"Deployment for %s\";\n+    private static final String IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::%s:policy/%s\";\n+    private static final String MANAGED_IAM_POLICY_ARN_FORMAT = \"arn:%s:iam::aws:policy/%s\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ5NDQ2Ng=="}, "originalCommit": {"oid": "d7262e9bce97047947776bcaac5e6c960290690c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3OTc4MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMjowOFrOIPRyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxODozMjowOFrOIPRyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjg5MDkwNg==", "bodyText": "Add a comment for what these 2 cases are trying to do.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/805#discussion_r552890906", "createdAt": "2021-01-06T18:32:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -390,31 +398,54 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n      * @param roleName           name of target role\n      * @param rolePolicyName     name of policy to create and attach\n      * @param rolePolicyDocument document of policy to create and attach\n+     * @param awsRegion          aws region\n      * @return ARN of created policy\n      */\n-    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName,\n-                                                      String rolePolicyDocument) {\n-        try {\n+    public Optional<String> createAndAttachRolePolicy(String roleName, String rolePolicyName, String rolePolicyDocument,\n+                                                      Region awsRegion) {\n+        Optional<String> tesRolePolicyArnOptional = getPolicyArn(rolePolicyName, awsRegion);\n+        if (tesRolePolicyArnOptional.isPresent()) {\n+            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n+                    + \"already%n\", rolePolicyName);\n+            return tesRolePolicyArnOptional;\n+        } else {\n             String tesRolePolicyArn;\n             CreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                     software.amazon.awssdk.services.iam.model.CreatePolicyRequest.builder().policyName(rolePolicyName)\n                             .policyDocument(rolePolicyDocument).build());\n             tesRolePolicyArn = createPolicyResponse.policy().arn();\n             outStream.printf(\"IAM role policy for TES \\\"%s\\\" created. This policy DOES NOT have S3 access, please \"\n-                            + \"modify it with your private components' artifact buckets/objects as needed when you \"\n+                    + \"modify it with your private components' artifact buckets/objects as needed when you \"\n                     + \"create and deploy private components %n\", rolePolicyName);\n             outStream.println(\"Attaching IAM role policy for TES to IAM role for TES...\");\n             iamClient.attachRolePolicy(\n                     AttachRolePolicyRequest.builder().roleName(roleName).policyArn(tesRolePolicyArn).build());\n             return Optional.of(tesRolePolicyArn);\n-        } catch (EntityAlreadyExistsException e) {\n-            // TODO: [P41215965] get and reuse the policy. non trivial because we can only get IAM policy by ARN\n-            outStream.printf(\"IAM policy named \\\"%s\\\" already exists. Please attach it to the IAM role if not \"\n-                    + \"already%n\", rolePolicyName);\n-            return Optional.empty();\n         }\n     }\n \n+    private Optional<String> getPolicyArn(String policyName, Region awsRegion) {\n+        String partition = awsRegion.metadata().partition().id();\n+        Arn.Builder policyArnBuilder = Arn.builder().partition(partition).service(\"iam\").resource(policyName);\n+        try {\n+            return Optional.of(iamClient.getPolicy(software.amazon.awssdk.services.iam.model.GetPolicyRequest.builder()\n+                    .policyArn(policyArnBuilder.build().toString()).build()).policy().arn());\n+        } catch (ResourceNotFoundException | NoSuchEntityException mnf) {\n+            try {\n+                return Optional.of(iamClient.getPolicy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5592c067f47c90f9a49315e45d97cbee2f916b2"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 177, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}