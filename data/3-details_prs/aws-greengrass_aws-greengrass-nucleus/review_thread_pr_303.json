{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTEyNDA1", "number": 303, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NzoyNFrOEOAPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMjoyNlrOEPRP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTE5Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMTo0NzoyNFrOGw7HHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDo1MzozMVrOGxk66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA==", "bodyText": "all states (except NEW, STOPPING, and FINISHED) are stoppable. In truth, the \"start\" and \"stop\" change the desired state of a service. So, even if a service is ERRORED, if it desired to be running, it will start up again.\nThis change might not actually make sense, because all states might be able to change the desired state.\nSo, maybe don't add isStoppable and isStartable. What should be used is the desiredState of each service.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r453953308", "createdAt": "2020-07-13T21:47:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1NTIxNA==", "bodyText": "https://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java#L98", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r453955214", "createdAt": "2020-07-13T21:50:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2ODMxMQ==", "bodyText": "Even though requesting a change to Lifecycle is just a push to the desiredStateList I think it is still useful to restrict the user-facing functionality to changes that make sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r453968311", "createdAt": "2020-07-13T22:09:24Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk5NjkwNQ==", "bodyText": "For many dev cases, these functions will be useless, but for maintainability, I don't want these restrictions to be handled by the internal-http.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r453996905", "createdAt": "2020-07-13T23:06:48Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYxODcxNQ==", "bodyText": "How is isStartable/isStoppable used?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454618715", "createdAt": "2020-07-14T20:18:10Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYyMzYxNw==", "bodyText": "it's used as a functionality check for the internal dashboard UI. We want functionality for the user to be able to \"start\" or \"stop\" a service. However, since requesting start/stop/etc to the lifecycle can technically be done at any time, we want to restrict these functionalities so if a user requests \"stop,\" for instance, they can only do so when it is logical.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454623617", "createdAt": "2020-07-14T20:26:54Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMzk1MA==", "bodyText": "Lifecycle should be able to handle that. For example if you call requestStart on an already Running service, it should take no effect. (Same for requesting stop on an already FINISHED service). I don't have a strong preference though.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454633950", "createdAt": "2020-07-14T20:45:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzNTA1MA==", "bodyText": "Yes, it is handled, but we want to not show all operations on the dashboard except for the operations that make sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454635050", "createdAt": "2020-07-14T20:47:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzODMxNQ==", "bodyText": "That's exactly the problem. Lifecycle doesn't return anything so doesn't tell you if an action is successful. So I want to shape the user experience such that there is no confusion and minimize instances where a request is ignored.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454638315", "createdAt": "2020-07-14T20:53:31Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);\n+    }\n+\n+    public boolean isStoppable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk1MzMwOA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTMxNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMjoxMToyMFrOGw8Gug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyNDo0M1rOGxl5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2OTU5NA==", "bodyText": "NEW is also startable, as is BROKEN (through re-install)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r453969594", "createdAt": "2020-07-13T22:11:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NDMxMw==", "bodyText": "NIT: Currently BROKEN doesn't auto re-install when customer call requestStart(). An explicit invocation of requestReinstall() is required.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r454654313", "createdAt": "2020-07-14T21:24:43Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -98,6 +108,14 @@ public boolean preceedsOrEqual(State other) {\n         return ordinal() <= other.ordinal();\n     }\n \n+    public boolean isStartable() {\n+        return this.equals(INSTALLED) || this.equals(ERRORED) || this.equals(FINISHED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzk2OTU5NA=="}, "originalCommit": {"oid": "64658a0dbe84fa567743bd7fc6f0441795e500f4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTYwMzIzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNToxMlrOGyKijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNTowMjoyN1rOGzFbqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDY2OQ==", "bodyText": "I already fixed this and merged :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r455254669", "createdAt": "2020-07-15T18:25:12Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -140,7 +140,7 @@ void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnec\n             networkUtils.disconnectMqtt();\n \n             // Wait for the deployment to finish offline\n-            assertTrue(jobCompleted.await(3, TimeUnit.MINUTES));\n+            assertTrue(jobCompleted.await(5, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNDQwOA==", "bodyText": "@Victor-C-Zhang try removing this change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456004408", "createdAt": "2020-07-16T18:57:14Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -140,7 +140,7 @@ void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnec\n             networkUtils.disconnectMqtt();\n \n             // Wait for the deployment to finish offline\n-            assertTrue(jobCompleted.await(3, TimeUnit.MINUTES));\n+            assertTrue(jobCompleted.await(5, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDY2OQ=="}, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NjUyOQ==", "bodyText": "Not sure what I would do in this case. The file from mainline already looks identical to the one that's in this branch", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456186529", "createdAt": "2020-07-17T02:40:30Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -140,7 +140,7 @@ void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnec\n             networkUtils.disconnectMqtt();\n \n             // Wait for the deployment to finish offline\n-            assertTrue(jobCompleted.await(3, TimeUnit.MINUTES));\n+            assertTrue(jobCompleted.await(5, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDY2OQ=="}, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMzEyMA==", "bodyText": "Current master has this with 3 minute timeout: https://github.com/aws/aws-greengrass-kernel/blob/master/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java#L146", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456203120", "createdAt": "2020-07-17T03:50:20Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -140,7 +140,7 @@ void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnec\n             networkUtils.disconnectMqtt();\n \n             // Wait for the deployment to finish offline\n-            assertTrue(jobCompleted.await(3, TimeUnit.MINUTES));\n+            assertTrue(jobCompleted.await(5, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDY2OQ=="}, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxOTU2Mw==", "bodyText": "I see, reverted just now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456219563", "createdAt": "2020-07-17T05:02:27Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/MqttReconnectTest.java", "diffHunk": "@@ -140,7 +140,7 @@ void GIVEN_new_deployment_while_device_online_WHEN_mqtt_disconnects_and_reconnec\n             networkUtils.disconnectMqtt();\n \n             // Wait for the deployment to finish offline\n-            assertTrue(jobCompleted.await(3, TimeUnit.MINUTES));\n+            assertTrue(jobCompleted.await(5, TimeUnit.MINUTES));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDY2OQ=="}, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTYwNDg3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNToyOFrOGyKjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNjo1NFrOGyKnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDkyOA==", "bodyText": "Why changing this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r455254928", "createdAt": "2020-07-15T18:25:28Z", "author": {"login": "ShirleyZheng92"}, "path": "pom.xml", "diffHunk": "@@ -426,7 +426,7 @@\n                                         <limit>\n                                             <counter>BRANCH</counter>\n                                             <value>COVEREDRATIO</value>\n-                                            <minimum>0.60</minimum>\n+                                            <minimum>0.59</minimum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NTgxMQ==", "bodyText": "It failed on windows. The 3 extra lines he added dropped it just below the threshold.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r455255811", "createdAt": "2020-07-15T18:26:54Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -426,7 +426,7 @@\n                                         <limit>\n                                             <counter>BRANCH</counter>\n                                             <value>COVEREDRATIO</value>\n-                                            <minimum>0.60</minimum>\n+                                            <minimum>0.59</minimum>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDkyOA=="}, "originalCommit": {"oid": "4ec6347743431c3542d97470889bf423cb0574c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ2NjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMjoyNlrOGy5J5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowNToxNlrOGy62HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODQwNQ==", "bodyText": "use the name() of Enum?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456018405", "createdAt": "2020-07-16T19:22:26Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -13,62 +13,65 @@\n      * TODO Remove this?\n      * Object does not have a state (not a Lifecycle).\n      */\n-    STATELESS(true, false, false),\n+    STATELESS(true, false, false, \"Stateless\"),\n \n     /**\n      * Freshly created, probably being injected.\n      */\n-    NEW(true, false, false),\n+    NEW(true, false, false, \"New\"),\n \n     /**\n      * Associated artifacts are installed.\n      */\n-    INSTALLED(true, false, false),\n+    INSTALLED(true, false, false, \"Installed\"),\n \n     /**\n      * The service has started, but hasn't report running yet.\n      */\n-    STARTING(true, false, false),\n+    STARTING(true, false, false, \"Starting\"),\n \n     /**\n      * Up and running, operating normally. This is the only state that should\n      * ever take a significant amount of time to run.\n      */\n-    RUNNING(true, true, true),\n+    RUNNING(true, true, true, \"Running\"),\n \n     /**\n      * Service is in the process of shutting down.\n      */\n-    STOPPING(true, false, true),\n+    STOPPING(true, false, true, \"Stopping\"),\n \n     /**\n      * Not running. It may be possible for the enclosing framework to restart\n      * it.\n      */\n-    ERRORED(false, false, false),\n+    ERRORED(false, false, false, \"Errored\"),\n \n     /**\n      * Shut down, cannot be restarted. Generally the result of an unresolvable error.\n      */\n-    BROKEN(false, false, false),\n+    BROKEN(false, false, false, \"Broken\"),\n     /**\n      * The service has done it's job and has no more to do. May be restarted\n      * (for example, a monitoring task that will be restarted by a timer)\n      */\n-    FINISHED(true, false, true);\n+    FINISHED(true, false, true, \"Finished\");\n \n     private final boolean happy;\n     private final boolean running;\n     private final boolean functioningProperly;\n+    private final String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7f9dc193be3026ce6b11c7dcfe2eefc58738705"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxOTY3Ng==", "bodyText": "don't want it to be all caps. This name will be used in the UI", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456019676", "createdAt": "2020-07-16T19:24:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -13,62 +13,65 @@\n      * TODO Remove this?\n      * Object does not have a state (not a Lifecycle).\n      */\n-    STATELESS(true, false, false),\n+    STATELESS(true, false, false, \"Stateless\"),\n \n     /**\n      * Freshly created, probably being injected.\n      */\n-    NEW(true, false, false),\n+    NEW(true, false, false, \"New\"),\n \n     /**\n      * Associated artifacts are installed.\n      */\n-    INSTALLED(true, false, false),\n+    INSTALLED(true, false, false, \"Installed\"),\n \n     /**\n      * The service has started, but hasn't report running yet.\n      */\n-    STARTING(true, false, false),\n+    STARTING(true, false, false, \"Starting\"),\n \n     /**\n      * Up and running, operating normally. This is the only state that should\n      * ever take a significant amount of time to run.\n      */\n-    RUNNING(true, true, true),\n+    RUNNING(true, true, true, \"Running\"),\n \n     /**\n      * Service is in the process of shutting down.\n      */\n-    STOPPING(true, false, true),\n+    STOPPING(true, false, true, \"Stopping\"),\n \n     /**\n      * Not running. It may be possible for the enclosing framework to restart\n      * it.\n      */\n-    ERRORED(false, false, false),\n+    ERRORED(false, false, false, \"Errored\"),\n \n     /**\n      * Shut down, cannot be restarted. Generally the result of an unresolvable error.\n      */\n-    BROKEN(false, false, false),\n+    BROKEN(false, false, false, \"Broken\"),\n     /**\n      * The service has done it's job and has no more to do. May be restarted\n      * (for example, a monitoring task that will be restarted by a timer)\n      */\n-    FINISHED(true, false, true);\n+    FINISHED(true, false, true, \"Finished\");\n \n     private final boolean happy;\n     private final boolean running;\n     private final boolean functioningProperly;\n+    private final String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODQwNQ=="}, "originalCommit": {"oid": "f7f9dc193be3026ce6b11c7dcfe2eefc58738705"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMzc5OQ==", "bodyText": "StringUtils.capitalize(name().toLowerCase()) ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456033799", "createdAt": "2020-07-16T19:43:44Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -13,62 +13,65 @@\n      * TODO Remove this?\n      * Object does not have a state (not a Lifecycle).\n      */\n-    STATELESS(true, false, false),\n+    STATELESS(true, false, false, \"Stateless\"),\n \n     /**\n      * Freshly created, probably being injected.\n      */\n-    NEW(true, false, false),\n+    NEW(true, false, false, \"New\"),\n \n     /**\n      * Associated artifacts are installed.\n      */\n-    INSTALLED(true, false, false),\n+    INSTALLED(true, false, false, \"Installed\"),\n \n     /**\n      * The service has started, but hasn't report running yet.\n      */\n-    STARTING(true, false, false),\n+    STARTING(true, false, false, \"Starting\"),\n \n     /**\n      * Up and running, operating normally. This is the only state that should\n      * ever take a significant amount of time to run.\n      */\n-    RUNNING(true, true, true),\n+    RUNNING(true, true, true, \"Running\"),\n \n     /**\n      * Service is in the process of shutting down.\n      */\n-    STOPPING(true, false, true),\n+    STOPPING(true, false, true, \"Stopping\"),\n \n     /**\n      * Not running. It may be possible for the enclosing framework to restart\n      * it.\n      */\n-    ERRORED(false, false, false),\n+    ERRORED(false, false, false, \"Errored\"),\n \n     /**\n      * Shut down, cannot be restarted. Generally the result of an unresolvable error.\n      */\n-    BROKEN(false, false, false),\n+    BROKEN(false, false, false, \"Broken\"),\n     /**\n      * The service has done it's job and has no more to do. May be restarted\n      * (for example, a monitoring task that will be restarted by a timer)\n      */\n-    FINISHED(true, false, true);\n+    FINISHED(true, false, true, \"Finished\");\n \n     private final boolean happy;\n     private final boolean running;\n     private final boolean functioningProperly;\n+    private final String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODQwNQ=="}, "originalCommit": {"oid": "f7f9dc193be3026ce6b11c7dcfe2eefc58738705"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NTUyOQ==", "bodyText": "Perhaps at some point we'll want to add a state that is a phrase instead of just a word. Then we might run into some finicky issues. Or maybe we'll want to expose a different name to the user for some reason.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456045529", "createdAt": "2020-07-16T20:04:04Z", "author": {"login": "Victor-C-Zhang"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -13,62 +13,65 @@\n      * TODO Remove this?\n      * Object does not have a state (not a Lifecycle).\n      */\n-    STATELESS(true, false, false),\n+    STATELESS(true, false, false, \"Stateless\"),\n \n     /**\n      * Freshly created, probably being injected.\n      */\n-    NEW(true, false, false),\n+    NEW(true, false, false, \"New\"),\n \n     /**\n      * Associated artifacts are installed.\n      */\n-    INSTALLED(true, false, false),\n+    INSTALLED(true, false, false, \"Installed\"),\n \n     /**\n      * The service has started, but hasn't report running yet.\n      */\n-    STARTING(true, false, false),\n+    STARTING(true, false, false, \"Starting\"),\n \n     /**\n      * Up and running, operating normally. This is the only state that should\n      * ever take a significant amount of time to run.\n      */\n-    RUNNING(true, true, true),\n+    RUNNING(true, true, true, \"Running\"),\n \n     /**\n      * Service is in the process of shutting down.\n      */\n-    STOPPING(true, false, true),\n+    STOPPING(true, false, true, \"Stopping\"),\n \n     /**\n      * Not running. It may be possible for the enclosing framework to restart\n      * it.\n      */\n-    ERRORED(false, false, false),\n+    ERRORED(false, false, false, \"Errored\"),\n \n     /**\n      * Shut down, cannot be restarted. Generally the result of an unresolvable error.\n      */\n-    BROKEN(false, false, false),\n+    BROKEN(false, false, false, \"Broken\"),\n     /**\n      * The service has done it's job and has no more to do. May be restarted\n      * (for example, a monitoring task that will be restarted by a timer)\n      */\n-    FINISHED(true, false, true);\n+    FINISHED(true, false, true, \"Finished\");\n \n     private final boolean happy;\n     private final boolean running;\n     private final boolean functioningProperly;\n+    private final String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODQwNQ=="}, "originalCommit": {"oid": "f7f9dc193be3026ce6b11c7dcfe2eefc58738705"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NjEwOA==", "bodyText": "Agreed, I'm happy to have this separate field.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/303#discussion_r456046108", "createdAt": "2020-07-16T20:05:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/State.java", "diffHunk": "@@ -13,62 +13,65 @@\n      * TODO Remove this?\n      * Object does not have a state (not a Lifecycle).\n      */\n-    STATELESS(true, false, false),\n+    STATELESS(true, false, false, \"Stateless\"),\n \n     /**\n      * Freshly created, probably being injected.\n      */\n-    NEW(true, false, false),\n+    NEW(true, false, false, \"New\"),\n \n     /**\n      * Associated artifacts are installed.\n      */\n-    INSTALLED(true, false, false),\n+    INSTALLED(true, false, false, \"Installed\"),\n \n     /**\n      * The service has started, but hasn't report running yet.\n      */\n-    STARTING(true, false, false),\n+    STARTING(true, false, false, \"Starting\"),\n \n     /**\n      * Up and running, operating normally. This is the only state that should\n      * ever take a significant amount of time to run.\n      */\n-    RUNNING(true, true, true),\n+    RUNNING(true, true, true, \"Running\"),\n \n     /**\n      * Service is in the process of shutting down.\n      */\n-    STOPPING(true, false, true),\n+    STOPPING(true, false, true, \"Stopping\"),\n \n     /**\n      * Not running. It may be possible for the enclosing framework to restart\n      * it.\n      */\n-    ERRORED(false, false, false),\n+    ERRORED(false, false, false, \"Errored\"),\n \n     /**\n      * Shut down, cannot be restarted. Generally the result of an unresolvable error.\n      */\n-    BROKEN(false, false, false),\n+    BROKEN(false, false, false, \"Broken\"),\n     /**\n      * The service has done it's job and has no more to do. May be restarted\n      * (for example, a monitoring task that will be restarted by a timer)\n      */\n-    FINISHED(true, false, true);\n+    FINISHED(true, false, true, \"Finished\");\n \n     private final boolean happy;\n     private final boolean running;\n     private final boolean functioningProperly;\n+    private final String name;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODQwNQ=="}, "originalCommit": {"oid": "f7f9dc193be3026ce6b11c7dcfe2eefc58738705"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4392, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}