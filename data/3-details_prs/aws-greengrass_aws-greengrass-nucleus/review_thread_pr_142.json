{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDU5ODYz", "number": 142, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo0Nzo1MVrODr4rLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTowMDoyMFrODtVvDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQzOTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo0Nzo1MVrOF8ffZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzozNjowM1rOF87ZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NDgyMg==", "bodyText": "why is null allowed and used as a branching condition here? Is it possible to make us not reply on null?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r398974822", "createdAt": "2020-03-27T00:47:51Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {\n+        if (desiredState == null) {\n+            updateStateAndBroadcast(State.FINISHED);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTk1MA==", "bodyText": "sure. I can directly return here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r399431950", "createdAt": "2020-03-27T17:36:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {\n+        if (desiredState == null) {\n+            updateStateAndBroadcast(State.FINISHED);\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NDgyMg=="}, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ0MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo0OTowMFrOF8fgtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzozNToxNlrOF87XOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NTE1OA==", "bodyText": "Why does RUNNING also set INSTALLED?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r398975158", "createdAt": "2020-03-27T00:49:00Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {\n+        if (desiredState == null) {\n+            updateStateAndBroadcast(State.FINISHED);\n+            return;\n+        }\n+        switch (desiredState) {\n+            case NEW:\n+                updateStateAndBroadcast(State.NEW);\n+                break;\n+            case INSTALLED:\n+            case RUNNING:\n+                updateStateAndBroadcast(State.INSTALLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTQ4MA==", "bodyText": "If current state is FINISHED and desiredState is RUNNING, we sill want the service to go through startup process", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r399431480", "createdAt": "2020-03-27T17:35:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {\n+        if (desiredState == null) {\n+            updateStateAndBroadcast(State.FINISHED);\n+            return;\n+        }\n+        switch (desiredState) {\n+            case NEW:\n+                updateStateAndBroadcast(State.NEW);\n+                break;\n+            case INSTALLED:\n+            case RUNNING:\n+                updateStateAndBroadcast(State.INSTALLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NTE1OA=="}, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ0MzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo0OTo0OFrOF8fhnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzozNzo1OFrOF-g2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NTM5MQ==", "bodyText": "I think we should revisit do we need this method or not...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r398975391", "createdAt": "2020-03-27T00:49:48Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5NDMxOA==", "bodyText": "I struggled at finding a good naming for this method. This logic is duplicated when the service is in FINISHED/STOPPING/ERROED at RUNNING  .", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r401094318", "createdAt": "2020-03-31T17:37:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -610,6 +600,33 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go. If not provided, default is Finished.\n+     */\n+    private void goToDesiredState(State desiredState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NTM5MQ=="}, "originalCommit": {"oid": "4a843afb30533254a3632aaf5c291ecefa1c99ae"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODY4NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTowMDoyMFrOF-tVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToxMjowNFrOF_O1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODgzOA==", "bodyText": "This Nonnull is from lombok, and has no effect here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r401298838", "createdAt": "2020-04-01T01:00:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -611,6 +603,30 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Given the service is terminated, move to desired state.\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go, not null\n+     */\n+    private void serviceTerminatedMoveToDesiredState(@NonNull State desiredState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0269cbd9f0c27f227a032bdd10430e141c332b0c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NzY4OQ==", "bodyText": "NonNull from lombok should still work and do the run-time check. On the other hand, the pure javax.annotation (without binding a checker) will not do run-time check. It only acts as documentation and compile-time check with intellij/findbug. Here I think both are fine...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/142#discussion_r401847689", "createdAt": "2020-04-01T19:12:04Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -611,6 +603,30 @@ private void startStateTransition() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Given the service is terminated, move to desired state.\n+     * Only use in service lifecycle thread.\n+     * @param desiredState the desiredState to go, not null\n+     */\n+    private void serviceTerminatedMoveToDesiredState(@NonNull State desiredState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODgzOA=="}, "originalCommit": {"oid": "0269cbd9f0c27f227a032bdd10430e141c332b0c"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4963, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}