{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NjQ4MDY2", "number": 298, "title": "Tes integ test", "bodyText": "Issue #, if available:\nDescription of changes:\nAdd integ test happy case for TES\nWhy is this change necessary:\nTo be able to test the happy case of fetching tes credentials\nHow was this change tested:\nrun and pass the new test\nAny additional information or context required to review the change:\ncommit was reverted in pr\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-07T20:17:00Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298", "merged": true, "mergeCommit": {"oid": "0c54d4827bd8785745198e886a4dff1941d37b14"}, "closed": true, "closedAt": "2020-07-14T00:34:26Z", "author": {"login": "youtuyy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcypjoFgH2gAyNDQ1NjQ4MDY2OjliNzNjM2VjYTZhNzVhYzBkZDVkZTMwODE0YmI4NGFjM2M2ODllNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0qyZMAFqTQ0NzcwMDM2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b73c3eca6a75ac0dd5de30814bb84ac3c689e6f", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9b73c3eca6a75ac0dd5de30814bb84ac3c689e6f", "committedDate": "2020-07-07T17:47:19Z", "message": "Add TES Integ test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0debf9d5a82fd8f4fd1e4a8a861e9be5cca27636", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0debf9d5a82fd8f4fd1e4a8a861e9be5cca27636", "committedDate": "2020-07-07T19:24:35Z", "message": "Revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5073e0e3d62f0e81a24ceb22ff6b54c1afe4e7f", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c5073e0e3d62f0e81a24ceb22ff6b54c1afe4e7f", "committedDate": "2020-07-07T19:25:33Z", "message": "Add tes happy case test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/95a4abe4223ac25006b3697cab898fc7f799ee06", "committedDate": "2020-07-07T19:29:44Z", "message": "minor fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjE5ODc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#pullrequestreview-444219877", "createdAt": "2020-07-07T20:19:38Z", "commit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoxOTozOFrOGuOI5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoyNToyMVrOGuOVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExOTMzNA==", "bodyText": "no * imports. Import the IntelliJ.xml file in the code style directory to get our code style rules automatically.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451119334", "createdAt": "2020-07-07T20:19:38Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExOTczOQ==", "bodyText": "if this is talking to the cloud, then this isn't integ, but E2E. if it is E2E please add that as a tag so that it runs with the other E2E tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451119739", "createdAt": "2020-07-07T20:20:30Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDU1NQ==", "bodyText": "try not to just add sleeps, this is very flaky or in the best case just slows down the tests. Instead, find a way to wait until the kernel is in whatever state you need it to be in (such as TES is in the RUNNING state).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451120555", "createdAt": "2020-07-07T20:21:32Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDg3MA==", "bodyText": "this won't work on windows. Don't hard code commands like this, instead just use Java to poll the server and check the response.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451120870", "createdAt": "2020-07-07T20:22:13Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();\n+        assertNotNull(url);\n+        String credentials = Exec.sh(String.format(\"curl -s -o /dev/stdout %s\", url));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTA4OQ==", "bodyText": "do not print to stderr. If the test should fail at this point, make it fail. Just printing to stderr does nothing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451121089", "createdAt": "2020-07-07T20:22:39Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();\n+        assertNotNull(url);\n+        String credentials = Exec.sh(String.format(\"curl -s -o /dev/stdout %s\", url));\n+        assertThat(credentials, matchesPattern(\n+                \"\\\\{\\\"AccessKeyId\\\":\\\".+\\\",\\\"SecretAccessKey\\\":\\\".+\\\",\\\"Expiration\\\":\\\".+\\\",\\\"Token\\\":\\\".+\\\"\\\\}\"));\n+    }\n+\n+    void provision(Kernel kernel) throws IOException {\n+        thingInfo = deviceProvisioningHelper.createThing(IotSdkClientFactory.getIotClient(AWS_REGION), POLICY_NAME, THING_NAME);\n+        deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, AWS_REGION);\n+        deviceProvisioningHelper.setupIoTRoleForTes(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+        deviceProvisioningHelper.updateKernelConfigWithTesRoleInfo(kernel, TES_ROLE_ALIAS_NAME);\n+        Topics tesTopics = kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC, TOKEN_EXCHANGE_SERVICE_TOPICS);\n+        if (tesTopics != null) {\n+            System.err.println(tesTopics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjExOQ==", "bodyText": "why are we adding this? Don't we already have this logic implemented in the easy setup?\nIf this is only for tests, then move it to the test utilities.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451122119", "createdAt": "2020-07-07T20:24:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -118,6 +124,53 @@ public ThingInfo createThingForE2ETests() {\n                 E2E_TESTS_THING_NAME_PREFIX + UUID.randomUUID().toString());\n     }\n \n+    /**\n+     * Create a thing with provided configuration.\n+     *\n+     * @param policyName policyName\n+     * @param thingName  thingName\n+     * @return created thing info\n+     */\n+    public ThingInfo createThingForTES(String policyName, String thingName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjQ5MA==", "bodyText": "why is this all being reverted? What was wrong with the change? I'm sure you had tested that change, so why are we reverting it now?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451122490", "createdAt": "2020-07-07T20:25:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -6,42 +6,50 @@\n import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.sun.net.httpserver.HttpExchange;\n import com.sun.net.httpserver.HttpHandler;\n-import software.amazon.awssdk.crt.auth.credentials.Credentials;\n \n import java.io.IOException;\n import java.net.HttpURLConnection;\n-import java.nio.charset.StandardCharsets;\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n import java.util.HashMap;\n-import java.util.Locale;\n import java.util.Map;\n \n public class CredentialRequestHandler implements HttpHandler {\n     private static final Logger LOGGER = LogManager.getLogger(CredentialRequestHandler.class);\n     public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n-    private static final String ACCESS_KEY_STR = \"AccessKeyId\";\n-    private static final String SECRET_ACCESS_STR = \"SecretAccessKey\";\n-    private static final String SESSION_TOKEN_STR = \"Token\";\n-    private static final String EXPIRATION_STR = \"Expiration\";\n+    private static final String CREDENTIALS_UPSTREAM_STR = \"credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjM1OTc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#pullrequestreview-445235978", "createdAt": "2020-07-09T01:45:14Z", "commit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo0NToxNFrOGu-0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTo1NToyOFrOGu-_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxNjg0MA==", "bodyText": "Nit - use the constant from TokenExhangeService.java for AWS_CONTAINER_CREDENTIALS_FULL_URI", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451916840", "createdAt": "2020-07-09T01:45:14Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/tes/TESIntegrationTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.aws.iot.evergreen.integrationtests.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.IotSdkClientFactory;\n+import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.IOException;\n+\n+import static com.aws.iot.evergreen.easysetup.DeviceProvisioningHelper.ThingInfo;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SETENV_CONFIG_NAMESPACE;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.IOT_ROLE_ALIAS_TOPIC;\n+import static com.aws.iot.evergreen.tes.TokenExchangeService.TOKEN_EXCHANGE_SERVICE_TOPICS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.matchesPattern;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(EGExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class TESIntegrationTest {\n+\n+    private static Kernel kernel;\n+    private ThingInfo thingInfo;\n+    private DeviceProvisioningHelper deviceProvisioningHelper;\n+    private final static String POLICY_NAME = \"TES_INTEG_TEST_POLICY\";\n+    private final static String THING_NAME = \"TES_INTEG_THING\";\n+    private final static String AWS_REGION = \"us-east-1\";\n+    private final static String TES_ROLE_NAME = \"TES_INTEG_ROLE\";\n+    private final static String TES_ROLE_ALIAS_NAME = \"TES_INTEG_ROLE_ALIAS\";\n+\n+    @BeforeEach\n+    void setupKernel() throws IOException {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", TESIntegrationTest.class.getResource(\"tesExample.yaml\").toString());\n+        this.deviceProvisioningHelper = new DeviceProvisioningHelper(AWS_REGION, System.out);\n+        provision(kernel);\n+    }\n+\n+    @AfterEach\n+    void tearDown() {\n+        kernel.shutdown();\n+        deviceProvisioningHelper.cleanThing(IotSdkClientFactory.getIotClient(AWS_REGION), thingInfo);\n+        deviceProvisioningHelper.cleanUpIotRoleForTest(TES_ROLE_NAME, TES_ROLE_ALIAS_NAME, thingInfo.getCertificateArn());\n+    }\n+\n+    @Test\n+    void GIVEN_iot_role_alias_WHEN_tes_is_queried_THEN_valid_credentials_are_returned() throws Exception {\n+        kernel.launch();\n+        Thread.sleep(5000);\n+        String url = kernel.getConfig().find(SETENV_CONFIG_NAMESPACE, \"AWS_CONTAINER_CREDENTIALS_FULL_URI\").getOnce().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxODg5MA==", "bodyText": "Can we not hardcode  ReadOnlyAcces? Ideally this policy will be set by the customer, so the policy document should be taken from them as the CLI input to the easy setup CLI and create a separate role policy with that document here, if you cannot do that in this PR then please do this inside your integ test code and not hardcode here like so -\nCreatePolicyResponse createPolicyResponse = iamClient.createPolicy(\n                    CreatePolicyRequest.builder().policyName(TES_ROLE_POLICY_NAME).policyDocument(TES_ROLE_POLICY_DOCUMENT)\n                            .description(\"Defines permissions to access AWS services for E2E test device TES role\").build());\n            iamClient.attachRolePolicy(AttachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(createPolicyResponse.policy().arn()).build());", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451918890", "createdAt": "2020-07-09T01:52:41Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -262,6 +315,11 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n                                 + \"      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"credentials.iot.amazonaws.com\\\"\\n\"\n                                 + \"      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\").build();\n                 roleArn = iamClient.createRole(createRoleRequest).role().arn();\n+                AttachRolePolicyRequest attachRolePolicyRequest = AttachRolePolicyRequest.builder()\n+                        .policyArn(\"arn:aws:iam::aws:policy/ReadOnlyAccess\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkxOTY2NA==", "bodyText": "Let's keep the clean up logic inside the test helpers, in a user journey clean up will not be needed since once these resources are setup they will be used throughout the lifecycle of that device, only possible changes would be in the role policy and that can be made from the cloud", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#discussion_r451919664", "createdAt": "2020-07-09T01:55:28Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/easysetup/DeviceProvisioningHelper.java", "diffHunk": "@@ -289,6 +347,46 @@ public void setupIoTRoleForTes(String roleName, String roleAliasName, String cer\n         iotClient.attachPolicy(attachPolicyRequest);\n     }\n \n+    /**\n+     * Clean Up IoT/IAM roles for using TES.\n+     *\n+     * @param roleName IAM role Name\n+     * @param roleAliasName IOT roleAlias name\n+     * @param certArn IOT certificate Arn\n+     */\n+    public void cleanUpIotRoleForTest(String roleName, String roleAliasName, String certArn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a4abe4223ac25006b3697cab898fc7f799ee06"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f51b9016c05a9d7dee1587843e5a1ee84b34b893", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f51b9016c05a9d7dee1587843e5a1ee84b34b893", "committedDate": "2020-07-10T18:08:47Z", "message": "Merge branch 'master' into tes-integ-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a8422ac5b6dbab6a4f63c60a51e9de8eb149b66e", "committedDate": "2020-07-13T07:12:31Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afaf41ddf56309596909d5abde8ccbf2f783297a", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/afaf41ddf56309596909d5abde8ccbf2f783297a", "committedDate": "2020-07-13T15:50:04Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954b17ab52d9170600c5fc083a4dd7dc0004500b", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/954b17ab52d9170600c5fc083a4dd7dc0004500b", "committedDate": "2020-07-13T16:02:14Z", "message": "improve import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bc39834eca434641170a40aefbb6b4d79908245", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3bc39834eca434641170a40aefbb6b4d79908245", "committedDate": "2020-07-13T16:10:53Z", "message": "fix bufferedreader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTM1MDU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#pullrequestreview-447535057", "createdAt": "2020-07-13T19:24:19Z", "commit": {"oid": "3bc39834eca434641170a40aefbb6b4d79908245"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "496ab1dce20ce6d24056a8bd5fc66e6db3f93256", "author": {"user": {"login": "youtuyy", "name": "Zhaoyan Lin"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/496ab1dce20ce6d24056a8bd5fc66e6db3f93256", "committedDate": "2020-07-13T19:44:30Z", "message": "Update README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTc0NDIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#pullrequestreview-447574423", "createdAt": "2020-07-13T20:24:30Z", "commit": {"oid": "496ab1dce20ce6d24056a8bd5fc66e6db3f93256"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzAwMzY0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/298#pullrequestreview-447700364", "createdAt": "2020-07-14T00:21:12Z", "commit": {"oid": "496ab1dce20ce6d24056a8bd5fc66e6db3f93256"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}