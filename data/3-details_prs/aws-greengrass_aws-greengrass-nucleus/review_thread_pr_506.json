{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODkzMjE1", "number": 506, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozNDo0MlrOErPOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo0NTo1NVrOErb32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzczNjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTozNDo0MlrOHd5XGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowMTozN1rOHd6k5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMDU1NA==", "bodyText": "Setting the permissions for the work path and the artifact paths will need to lookup the the user/group for the service. Do you see that happening in the Permissions class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501110554", "createdAt": "2020-10-07T15:34:42Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {\n+        setRootPath(root);\n+        setConfigPath(configPath);\n+        setDeploymentPath(deployment);\n+        setKernelAltsPath(kernelAlts);\n+        setWorkPath(workPath);\n+        setComponentStorePath(componentStorePath);\n+    }\n+\n+    public void setKernelAltsPath(Path kernelAltsPath) throws IOException {\n+        this.kernelAltsPath = kernelAltsPath;\n+        Utils.createPaths(kernelAltsPath());\n+        Permissions.setKernelAltsPermission(kernelAltsPath());\n+    }\n+\n+    public Path kernelAltsPath() {\n+        return kernelAltsPath;\n+    }\n+\n+    public void setDeploymentPath(Path deploymentPath) throws IOException {\n+        this.deploymentPath = deploymentPath;\n+        Utils.createPaths(deploymentPath());\n+        Permissions.setDeploymentPermission(deploymentPath());\n+    }\n+\n+    public Path deploymentPath() {\n+        return deploymentPath;\n+    }\n+\n+    public void setConfigPath(Path configPath) throws IOException {\n+        this.configPath = configPath;\n+        Utils.createPaths(configPath());\n+        Permissions.setConfigPermission(configPath());\n+    }\n+\n+    public Path configPath() {\n+        return configPath;\n+    }\n+\n+    public void setWorkPath(Path workPath) throws IOException {\n+        this.workPath = workPath;\n+        Utils.createPaths(workPath);\n+        Permissions.setWorkPathPermission(workPath);\n+    }\n+\n+    public void setRootPath(Path root) throws IOException {\n+        this.rootPath = root;\n+        Utils.createPaths(root);\n+        Permissions.setRootPermission(root);\n+\n+        Utils.createPaths(pluginPath());\n+        Permissions.setPluginPermission(pluginPath());\n+    }\n+\n+    public void setComponentStorePath(Path componentStorePath) throws IOException {\n+        this.componentStorePath = componentStorePath;\n+        Utils.createPaths(componentStorePath);\n+        Permissions.setComponentStorePermission(componentStorePath);\n+\n+        Utils.createPaths(artifactPath());\n+        Permissions.setArtifactStorePermission(artifactPath());\n+\n+        Utils.createPaths(unarchivePath());\n+        Permissions.setArtifactStorePermission(unarchivePath());\n+\n+        Utils.createPaths(recipePath());\n+        Permissions.setRecipeStorePermission(recipePath());\n+    }\n+\n+    public Path artifactPath() {\n+        return componentStorePath.resolve(ARTIFACT_DIRECTORY);\n+    }\n+\n+    public Path artifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n+        Path p = artifactPath().resolve(componentIdentifier.getName())\n+                .resolve(componentIdentifier.getVersion().getValue());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path recipePath() {\n+        return componentStorePath.resolve(RECIPE_DIRECTORY);\n+    }\n+\n+    public Path unarchivePath() {\n+        return componentStorePath.resolve(ARTIFACTS_DECOMPRESSED_DIRECTORY);\n+    }\n+\n+    public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier, String artifactName) throws IOException {\n+        Path p = unarchiveArtifactPath(componentIdentifier).resolve(artifactName);\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n+        Path p = unarchivePath().resolve(componentIdentifier.getName())\n+                .resolve(componentIdentifier.getVersion().getValue());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path componentStorePath() {\n+        return componentStorePath;\n+    }\n+\n+    public Path workPath(String serviceName) throws IOException {\n+        Path p = workPath().resolve(serviceName);\n+        Utils.createPaths(p);\n+        Permissions.setWorkPathPermission(p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dca19249d912f4453f6712a773c0a40ff86f0ac"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzMDQ2OQ==", "bodyText": "That's a maybe, I think that it may need to be set by the service/shellrunner just before running, but it will call the Permissions class to do it. I want the logic to be centralized.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501130469", "createdAt": "2020-10-07T16:01:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {\n+        setRootPath(root);\n+        setConfigPath(configPath);\n+        setDeploymentPath(deployment);\n+        setKernelAltsPath(kernelAlts);\n+        setWorkPath(workPath);\n+        setComponentStorePath(componentStorePath);\n+    }\n+\n+    public void setKernelAltsPath(Path kernelAltsPath) throws IOException {\n+        this.kernelAltsPath = kernelAltsPath;\n+        Utils.createPaths(kernelAltsPath());\n+        Permissions.setKernelAltsPermission(kernelAltsPath());\n+    }\n+\n+    public Path kernelAltsPath() {\n+        return kernelAltsPath;\n+    }\n+\n+    public void setDeploymentPath(Path deploymentPath) throws IOException {\n+        this.deploymentPath = deploymentPath;\n+        Utils.createPaths(deploymentPath());\n+        Permissions.setDeploymentPermission(deploymentPath());\n+    }\n+\n+    public Path deploymentPath() {\n+        return deploymentPath;\n+    }\n+\n+    public void setConfigPath(Path configPath) throws IOException {\n+        this.configPath = configPath;\n+        Utils.createPaths(configPath());\n+        Permissions.setConfigPermission(configPath());\n+    }\n+\n+    public Path configPath() {\n+        return configPath;\n+    }\n+\n+    public void setWorkPath(Path workPath) throws IOException {\n+        this.workPath = workPath;\n+        Utils.createPaths(workPath);\n+        Permissions.setWorkPathPermission(workPath);\n+    }\n+\n+    public void setRootPath(Path root) throws IOException {\n+        this.rootPath = root;\n+        Utils.createPaths(root);\n+        Permissions.setRootPermission(root);\n+\n+        Utils.createPaths(pluginPath());\n+        Permissions.setPluginPermission(pluginPath());\n+    }\n+\n+    public void setComponentStorePath(Path componentStorePath) throws IOException {\n+        this.componentStorePath = componentStorePath;\n+        Utils.createPaths(componentStorePath);\n+        Permissions.setComponentStorePermission(componentStorePath);\n+\n+        Utils.createPaths(artifactPath());\n+        Permissions.setArtifactStorePermission(artifactPath());\n+\n+        Utils.createPaths(unarchivePath());\n+        Permissions.setArtifactStorePermission(unarchivePath());\n+\n+        Utils.createPaths(recipePath());\n+        Permissions.setRecipeStorePermission(recipePath());\n+    }\n+\n+    public Path artifactPath() {\n+        return componentStorePath.resolve(ARTIFACT_DIRECTORY);\n+    }\n+\n+    public Path artifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n+        Path p = artifactPath().resolve(componentIdentifier.getName())\n+                .resolve(componentIdentifier.getVersion().getValue());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path recipePath() {\n+        return componentStorePath.resolve(RECIPE_DIRECTORY);\n+    }\n+\n+    public Path unarchivePath() {\n+        return componentStorePath.resolve(ARTIFACTS_DECOMPRESSED_DIRECTORY);\n+    }\n+\n+    public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier, String artifactName) throws IOException {\n+        Path p = unarchiveArtifactPath(componentIdentifier).resolve(artifactName);\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n+        Path p = unarchivePath().resolve(componentIdentifier.getName())\n+                .resolve(componentIdentifier.getVersion().getValue());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactPermission(p);\n+        return p;\n+    }\n+\n+    public Path componentStorePath() {\n+        return componentStorePath;\n+    }\n+\n+    public Path workPath(String serviceName) throws IOException {\n+        Path p = workPath().resolve(serviceName);\n+        Utils.createPaths(p);\n+        Permissions.setWorkPathPermission(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExMDU1NA=="}, "originalCommit": {"oid": "7dca19249d912f4453f6712a773c0a40ff86f0ac"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTc4ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzozMzoxNFrOHeMwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1Njo0MlrOHeNGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyODQxNw==", "bodyText": "Where is the IOException thrown from? Is it retryable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501428417", "createdAt": "2020-10-08T03:33:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java", "diffHunk": "@@ -126,7 +126,7 @@ public DeploymentResult call()\n             // or deployment merge step and landed here\n             handleCancellation(preparePackagesFuture, deploymentMergeFuture);\n             return null;\n-        } catch (PackagingException e) {\n+        } catch (IOException | PackagingException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMzkyNA==", "bodyText": "it is from creating/setting permissions on the artifact directory. It most likely isn't retryable, I'll move it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501433924", "createdAt": "2020-10-08T03:56:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DefaultDeploymentTask.java", "diffHunk": "@@ -126,7 +126,7 @@ public DeploymentResult call()\n             // or deployment merge step and landed here\n             handleCancellation(preparePackagesFuture, deploymentMergeFuture);\n             return null;\n-        } catch (PackagingException e) {\n+        } catch (IOException | PackagingException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQyODQxNw=="}, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgwMzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo0Mjo1NlrOHeM5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1OTozM1rOHeNI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMDczMA==", "bodyText": "Would it be better also moving the path name of the sub-paths into this class? This method gives me the impression that we can init the workPath and configPath under different root directories.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501430730", "createdAt": "2020-10-08T03:42:56Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDYxOQ==", "bodyText": "You can have workPath and configPath under different roots. We don't do it, but that is allowed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501434619", "createdAt": "2020-10-08T03:59:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMDczMA=="}, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgwODkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo0NTo1NVrOHeM8oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1ODo1MlrOHeNIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMTQ1Nw==", "bodyText": "All these set***Path methods look like duplicates. Would one method setPath(Path path, Permission permission) be sufficient?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501431457", "createdAt": "2020-10-08T03:45:55Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {\n+        setRootPath(root);\n+        setConfigPath(configPath);\n+        setDeploymentPath(deployment);\n+        setKernelAltsPath(kernelAlts);\n+        setWorkPath(workPath);\n+        setComponentStorePath(componentStorePath);\n+    }\n+\n+    public void setKernelAltsPath(Path kernelAltsPath) throws IOException {\n+        this.kernelAltsPath = kernelAltsPath;\n+        Utils.createPaths(kernelAltsPath());\n+        Permissions.setKernelAltsPermission(kernelAltsPath());\n+    }\n+\n+    public Path kernelAltsPath() {\n+        return kernelAltsPath;\n+    }\n+\n+    public void setDeploymentPath(Path deploymentPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDQ2NQ==", "bodyText": "No, the idea is that this class holds the information for what permissions will be set, we don't take in permissions as a parameter because the callers don't know what permissions are appropriate. The permissions class knows what permissions are appropriate.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/506#discussion_r501434465", "createdAt": "2020-10-08T03:58:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACTS_DECOMPRESSED_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.ARTIFACT_DIRECTORY;\n+import static com.aws.greengrass.componentmanager.ComponentStore.RECIPE_DIRECTORY;\n+\n+@SuppressWarnings(\"checkstyle:MissingJavadocMethod\")\n+public class NucleusPaths {\n+    private Path rootPath;\n+    private Path workPath;\n+    private Path componentStorePath;\n+    private Path configPath;\n+    private Path deploymentPath;\n+    private Path kernelAltsPath;\n+\n+    public void initPaths(Path root, Path workPath, Path componentStorePath, Path configPath, Path kernelAlts,\n+                          Path deployment) throws IOException {\n+        setRootPath(root);\n+        setConfigPath(configPath);\n+        setDeploymentPath(deployment);\n+        setKernelAltsPath(kernelAlts);\n+        setWorkPath(workPath);\n+        setComponentStorePath(componentStorePath);\n+    }\n+\n+    public void setKernelAltsPath(Path kernelAltsPath) throws IOException {\n+        this.kernelAltsPath = kernelAltsPath;\n+        Utils.createPaths(kernelAltsPath());\n+        Permissions.setKernelAltsPermission(kernelAltsPath());\n+    }\n+\n+    public Path kernelAltsPath() {\n+        return kernelAltsPath;\n+    }\n+\n+    public void setDeploymentPath(Path deploymentPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzMTQ1Nw=="}, "originalCommit": {"oid": "df4df63ef15cbc7b97086d54bcc6eca5d25a37df"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 615, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}