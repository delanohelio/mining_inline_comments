{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjgxODIx", "number": 138, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NzoxN1rODrySdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyODoxM1rODsLpsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM5Mjg2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NzoxN1rOF8VfRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowNTozOVrOF8WONQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk0OA==", "bodyText": "Is SomeService package definition available locally?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398810948", "createdAt": "2020-03-26T18:47:17Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f715e81192a8589e1cb0705bcce921b2cb3467"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjk2NQ==", "bodyText": "Added that to the diff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398822965", "createdAt": "2020-03-26T19:05:39Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMDk0OA=="}, "originalCommit": {"oid": "47f715e81192a8589e1cb0705bcce921b2cb3467"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQwMjU5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0OTo0MVrOF8VlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOTowNToyNFrOF8WNgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjUxMQ==", "bodyText": "why is kernel.launch in injectKernelPackageManagementDependencies()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398812511", "createdAt": "2020-03-26T18:49:41Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(privateKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(certificateFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(rootCaFilePath);\n+        return thing;\n+    }\n+\n+    private void injectKernelPackageManagementDependencies() {\n+        kernel.context.getv(DependencyResolver.class)\n+                .put(new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel));\n+        kernel.launch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f715e81192a8589e1cb0705bcce921b2cb3467"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyMjc4Nw==", "bodyText": "Moved to the individual tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398822787", "createdAt": "2020-03-26T19:05:24Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +105,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());\n+\n+        Topics deploymentServiceTopics = kernel.lookupTopics(SERVICES_NAMESPACE_TOPIC, \"DeploymentService\");\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_THING_NAME).setValue(thing.thingName);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_MQTT_CLIENT_ENDPOINT).setValue(thing.endpoint);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_PRIVATE_KEY_PATH).setValue(privateKeyFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_CERTIFICATE_FILE_PATH).setValue(certificateFilePath);\n+        deploymentServiceTopics.createLeafChild(DEVICE_PARAM_ROOT_CA_PATH).setValue(rootCaFilePath);\n+        return thing;\n+    }\n+\n+    private void injectKernelPackageManagementDependencies() {\n+        kernel.context.getv(DependencyResolver.class)\n+                .put(new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel));\n+        kernel.launch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMjUxMQ=="}, "originalCommit": {"oid": "47f715e81192a8589e1cb0705bcce921b2cb3467"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUwODA1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxNjo0N1rOF8WniQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNDo0NVrOF86Pdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTQ0OQ==", "bodyText": "Can we move this under @afterall", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398829449", "createdAt": "2020-03-26T19:16:47Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662016af2089221c9bcb4f1543bead71f254edc2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMzExMA==", "bodyText": "Moved all cleanup related code", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399413110", "createdAt": "2020-03-27T17:04:45Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyOTQ0OQ=="}, "originalCommit": {"oid": "662016af2089221c9bcb4f1543bead71f254edc2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjUxMzE5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxODowNlrOF8WqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzowNDozM1rOF86O8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDI3Nw==", "bodyText": "move this to a @BeforeAll ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r398830277", "createdAt": "2020-03-26T19:18:06Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662016af2089221c9bcb4f1543bead71f254edc2"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQxMjk3OA==", "bodyText": "Moved all setup related code", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399412978", "createdAt": "2020-03-27T17:04:33Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +106,76 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        Utils.ThingInfo thing = setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();\n+        kernel.launch();\n+\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);\n+        assertEquals(State.FINISHED, EvergreenService.locate(kernel.context, \"CustomerApp\").getState());\n+        assertThrows(ServiceLoadException.class, () -> {\n+            EvergreenService.locate(kernel.context, \"SomeService\").getState();\n+        });\n+        kernel.shutdownNow();\n+\n+        // Make sure that IoT Job was marked as successful\n+        assertEquals(JobExecutionStatus.SUCCEEDED, Utils.iotClient.describeJobExecution(\n+                DescribeJobExecutionRequest.builder().jobId(jobId2).thingName(thing.thingName).build()).execution()\n+                .status());\n+        assertEquals(JobStatus.COMPLETED,\n+                Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId2).build()).job().status());\n+    }\n+\n+    private Utils.ThingInfo setupIotResourcesAndInjectIntoKernel() throws IOException {\n+        Utils.downloadRootCAToFile(new File(rootCaFilePath));\n+        Utils.ThingInfo thing = Utils.createThing();\n+        try (CommitableFile cf = CommitableFile.of(new File(privateKeyFilePath).toPath(), true)) {\n+            cf.write(thing.keyPair.privateKey().getBytes(StandardCharsets.UTF_8));\n+        }\n+        try (CommitableFile cf = CommitableFile.of(new File(certificateFilePath).toPath(), true)) {\n+            cf.write(thing.certificatePem.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        kernel = new Kernel().parseArgs(\"-i\", getClass().getResource(\"blank_config.yaml\").toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgzMDI3Nw=="}, "originalCommit": {"oid": "662016af2089221c9bcb4f1543bead71f254edc2"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjM4MDM5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo0MDoyNlrOF87jeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo1MDowMVrOF8752Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDYxNw==", "bodyText": "this assert is backwards, it should be (expected, actual)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399434617", "createdAt": "2020-03-27T17:40:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +109,68 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294d1dfe190e0510355071ed865ca0657c6d8a5d"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ0MDM0NQ==", "bodyText": "Addressed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399440345", "createdAt": "2020-03-27T17:50:01Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -121,4 +109,68 @@ void GIVEN_blank_kernel_WHEN_deploy_new_services_e2e_THEN_new_services_deployed_\n         assertEquals(JobStatus.COMPLETED,\n                 Utils.iotClient.describeJob(DescribeJobRequest.builder().jobId(jobId).build()).job().status());\n     }\n+\n+    @Test\n+    void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_removes_packages_THEN_services_should_be_stopped_and_job_is_successful()\n+            throws Exception {\n+        // Target our DUT for deployments\n+        // TODO: Eventually switch this to target using Thing Group instead of individual Thing\n+        String[] targets = new String[]{thing.thingArn};\n+\n+        // First Deployment to have some services running in Kernel which can be removed later\n+        String document1 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString())\n+                        .rootPackages(Arrays.asList(\"CustomerApp\", \"SomeService\")).deploymentPackageConfigurationList(\n+                        Arrays.asList(new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null),\n+                                new DeploymentPackageConfiguration(\"SomeService\", \"1.0.0\", null, null, null))).build());\n+        String jobId1 = Utils.createJob(document1, targets);\n+        Utils.waitForJobToComplete(jobId1, Duration.ofMinutes(5));\n+\n+        // Second deployment to remove some services deployed previously\n+        String document2 = new ObjectMapper().writeValueAsString(\n+                DeploymentDocument.builder().timestamp(System.currentTimeMillis())\n+                        .deploymentId(UUID.randomUUID().toString()).rootPackages(Arrays.asList(\"CustomerApp\"))\n+                        .deploymentPackageConfigurationList(Arrays.asList(\n+                                new DeploymentPackageConfiguration(\"CustomerApp\", \"1.0.0\", null, null, null))).build());\n+        String jobId2 = Utils.createJob(document2, targets);\n+        Utils.waitForJobToComplete(jobId2, Duration.ofMinutes(5));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertEquals(kernel.getMain().getState(), State.FINISHED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDYxNw=="}, "originalCommit": {"oid": "294d1dfe190e0510355071ed865ca0657c6d8a5d"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjM4MjgyOnYy", "diffSide": "RIGHT", "path": "local_artifact_source/SomeService/1.0.0/recipe.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo0MTowNVrOF87lBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzo0MTowNVrOF87lBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNTAxMg==", "bodyText": "lol!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399435012", "createdAt": "2020-03-27T17:41:05Z", "author": {"login": "leaf94"}, "path": "local_artifact_source/SomeService/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: SomeService\n+Description: A random service to run in Evergreen\n+Publisher: Me\n+Version: '1.0.0'\n+Lifecycle:\n+  run:\n+    echo \"Hello evergreen. Don't mind me I'm going to be removed soon\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294d1dfe190e0510355071ed865ca0657c6d8a5d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjU0ODM1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyODoxM1rOF89OgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoyODoxM1rOF89OgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MjAxNg==", "bodyText": "Even better!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/138#discussion_r399462016", "createdAt": "2020-03-27T18:28:13Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -53,16 +56,25 @@\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n+    private static Kernel kernel;\n+    private static Utils.ThingInfo thing;\n+\n     @BeforeAll\n-    static void beforeAll() {\n+    static void beforeAll() throws IOException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n         rootCaFilePath = tempRootDir.resolve(\"rootCA.pem\").toString();\n         privateKeyFilePath = tempRootDir.resolve(\"privKey.key\").toString();\n         certificateFilePath = tempRootDir.resolve(\"thingCert.crt\").toString();\n+\n+        kernel = new Kernel().parseArgs(\"-i\", DeploymentE2ETest.class.getResource(\"blank_config.yaml\").toString());\n+        setupIotResourcesAndInjectIntoKernel();\n+        injectKernelPackageManagementDependencies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f41153f7bc088510dc7fd2cf9091db0e962bec3"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4955, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}