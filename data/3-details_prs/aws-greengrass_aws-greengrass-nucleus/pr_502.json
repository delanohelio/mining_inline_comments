{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Njg4ODMy", "number": 502, "title": "Fix deployment sync issue causing cancellation to break and post comp\u2026", "bodyText": "Fix deployment sync issue causing cancellation to break and post component update events to be sent prematurely\nIssue #, if available:\nDescription of changes:\nMake waiting for services to reach desired state and further actions such as rollback etc sync in deployment execution so that a deployment does not get cancelled when in any of those stages and device is never left in an unstable state due to cancellation. This also ensures that post component update events are sent to components only after the deployment action is truly complete after waiting/rollback etc.\nWhy is this change necessary:\nSee description above, this is for fixing the corresponding broken UAT scenario https://code.amazon.com/reviews/CR-35717089\nHow was this change tested:\nMentioned UAT passes and the opposite UAT scenario Deployment-4-T3(do cancel deployment if it's not being applied already i.e. is in or before waiting for safe time to update stage) also passes indicating no regression\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-06T16:41:42Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502", "merged": true, "mergeCommit": {"oid": "26a5bb30d915bfae7f23b52704ac398af0a10b28"}, "closed": true, "closedAt": "2020-10-15T18:35:48Z", "author": {"login": "shaguptashaikh"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP7O_GABqjM4NDY1MzkwNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdS1yJigH2gAyNDk4Njg4ODMyOmNjYzUyODFlMjM5ZTFjNTUwZWQ5YWU2MTYyODcxMWM4OTZlYjg5NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6820396a71a5b43fbd98e479bfa80ffb2cffff11", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6820396a71a5b43fbd98e479bfa80ffb2cffff11", "committedDate": "2020-10-06T16:29:12Z", "message": "Fix deployment sync issue causing cancellation to break and post component updates to be sent prematurely"}, "afterCommit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0316163a2bcd2e369fb1c87907c6b038dff16227", "committedDate": "2020-10-06T16:46:40Z", "message": "Fix deployment sync issue causing cancellation to break and post component updates to be sent prematurely"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjAzMDc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-503203077", "createdAt": "2020-10-06T17:33:05Z", "commit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjA0MzEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-503204313", "createdAt": "2020-10-06T17:34:44Z", "commit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNDo0NFrOHdSr3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNDo0NFrOHdSr3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3Njg5NA==", "bodyText": "this blocks the publish queue, doesn't it need to be unblocked to actually process the deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r500476894", "createdAt": "2020-10-06T17:34:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -79,41 +79,50 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // wait until topic listeners finished processing mergeMap changes.\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                //TODO: Add timeout\n-                try {\n-                    servicesChangeManager.startNewServices();\n-\n-                    // Restart any services that may have been broken before this deployment\n-                    // This is added to allow deployments to fix broken services\n-                    servicesChangeManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrack = servicesChangeManager.servicesToTrack();\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).kv(\"serviceToTrack\", servicesToTrack)\n-                            .log(\"Applied new service config. Waiting for services to complete update\");\n-\n-                    waitForServicesToStart(servicesToTrack, mergeTime);\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).log(\"new/updated services are running, will now remove\"\n-                            + \" old services\");\n-                    servicesChangeManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services updated\");\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.SUCCESSFUL, null));\n-                } catch (ServiceLoadException | InterruptedException | ServiceUpdateException\n-                        | ExecutionException e) {\n-                    logger.atError(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId).setCause(e)\n-                            .log(\"Deployment failed\");\n-                    if (isAutoRollbackRequested(deploymentDocument)) {\n-                        rollback(deploymentDocument, totallyCompleteFuture, e,\n-                                servicesChangeManager.createRollbackManager());\n-                    } else {\n-                        totallyCompleteFuture.complete(new DeploymentResult(\n-                                DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_NOT_REQUESTED, e));\n+            try {\n+                kernel.getContext().get(ExecutorService.class).submit(() -> {\n+                    try {\n+                        servicesChangeManager.startNewServices();\n+                        // Restart any services that may have been broken before this deployment\n+                        // This is added to allow deployments to fix broken services\n+                        servicesChangeManager.reinstallBrokenServices();\n+                    } catch (ServiceLoadException e) {\n+                        handleFailure(servicesChangeManager, deploymentDocument, totallyCompleteFuture, e);\n                     }\n-                }\n-            });\n+                }).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjE4NzE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-503218718", "createdAt": "2020-10-06T17:53:36Z", "commit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1MzozNlrOHdTXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1MzozNlrOHdTXYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4ODAzNQ==", "bodyText": "why change this? How is it any different from before?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r500488035", "createdAt": "2020-10-06T17:53:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "diffHunk": "@@ -159,12 +155,17 @@ protected void startup() throws InterruptedException {\n                 try {\n                     context.get(ExecutorService.class).submit(() -> {\n                         logger.atInfo().setEventType(\"service-update-start\").log();\n+                        runningUpdateActions.set(true);\n+\n                         runUpdateActions();\n+                        pendingActions.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0316163a2bcd2e369fb1c87907c6b038dff16227"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54a898902d493624d81ef0b97cea9e70419c8ab0", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/54a898902d493624d81ef0b97cea9e70419c8ab0", "committedDate": "2020-10-06T20:50:28Z", "message": "Merge branch 'master' into deployment-wait-sync"}, "afterCommit": {"oid": "2e80d1afe49a03c392a973a5c573c3e853101e3e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e80d1afe49a03c392a973a5c573c3e853101e3e", "committedDate": "2020-10-07T16:02:22Z", "message": "Fix deployment sync issue causing cancellation to break and post component updates to be sent prematurely"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDUzMjg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-504053285", "createdAt": "2020-10-07T16:20:00Z", "commit": {"oid": "2e80d1afe49a03c392a973a5c573c3e853101e3e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTA4NzUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-504108751", "createdAt": "2020-10-07T17:27:33Z", "commit": {"oid": "2e80d1afe49a03c392a973a5c573c3e853101e3e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzMxNzQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-504331745", "createdAt": "2020-10-07T23:18:15Z", "commit": {"oid": "2e80d1afe49a03c392a973a5c573c3e853101e3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzoxODoxNVrOHeIyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzoxODoxNVrOHeIyLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM2MzI0Nw==", "bodyText": "Nice! this simplifies the threading model a lot", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r501363247", "createdAt": "2020-10-07T23:18:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -128,35 +140,47 @@ void rollback(DeploymentDocument deploymentDocument, CompletableFuture<Deploymen\n             return;\n         }\n         // wait until topic listeners finished processing read changes.\n+        AtomicBoolean setDesiredStatesFailed = new AtomicBoolean();\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                // TODO: Add timeout\n-                try {\n-                    rollbackManager.startNewServices();\n-                    rollbackManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrackForRollback = rollbackManager.servicesToTrack();\n-\n-                    waitForServicesToStart(servicesToTrackForRollback, mergeTime);\n-\n-                    rollbackManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services rolled back\");\n-\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, failureCause));\n-                } catch (InterruptedException | ServiceUpdateException | ExecutionException\n-                        | ServiceLoadException e) {\n-                    // Rollback execution failed\n-                    logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n-                            .log(\"Failed to rollback deployment\");\n-                    // TODO : Run user provided script to reach user defined safe state and\n-                    //  set deployment status based on the success of the script run\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_UNABLE_TO_ROLLBACK, failureCause));\n-                }\n-            });\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e80d1afe49a03c392a973a5c573c3e853101e3e"}, "originalPosition": 134}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61a93d99c996822e263cc3223d08799cf274c57e", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/61a93d99c996822e263cc3223d08799cf274c57e", "committedDate": "2020-10-08T00:21:47Z", "message": "Merge branch 'master' into deployment-wait-sync"}, "afterCommit": {"oid": "fb08726b915f9091d49ad939de37b6c9643ce314", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb08726b915f9091d49ad939de37b6c9643ce314", "committedDate": "2020-10-08T00:59:49Z", "message": "Higher timeout for hard dependency remove integ test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTI2Njk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-507926694", "createdAt": "2020-10-14T01:04:05Z", "commit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMTowNDowNVrOHg-kag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMToxMzoyMFrOHg-t2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MTYxMA==", "bodyText": "Are services stopped before the updated config is applied?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r504341610", "createdAt": "2020-10-14T01:04:05Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +78,56 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MjQwMg==", "bodyText": "Isn't the presence of a Throwable evidence that setDesiredStatesFailed? Why have both?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r504342402", "createdAt": "2020-10-14T01:06:57Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +78,56 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n \n         // wait until topic listeners finished processing mergeMap changes.\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicBoolean setDesiredStatesFailed = new AtomicBoolean();\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzIxMg==", "bodyText": "There was a add timeout comment above... is that still relevant?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r504343212", "createdAt": "2020-10-14T01:10:11Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +78,56 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n \n         // wait until topic listeners finished processing mergeMap changes.\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicBoolean setDesiredStatesFailed = new AtomicBoolean();\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                //TODO: Add timeout\n-                try {\n-                    servicesChangeManager.startNewServices();\n-\n-                    // Restart any services that may have been broken before this deployment\n-                    // This is added to allow deployments to fix broken services\n-                    servicesChangeManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrack = servicesChangeManager.servicesToTrack();\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).kv(\"serviceToTrack\", servicesToTrack)\n-                            .log(\"Applied new service config. Waiting for services to complete update\");\n-\n-                    waitForServicesToStart(servicesToTrack, mergeTime);\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).log(\"new/updated services are running, will now remove\"\n-                            + \" old services\");\n-                    servicesChangeManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services updated\");\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.SUCCESSFUL, null));\n-                } catch (ServiceLoadException | InterruptedException | ServiceUpdateException\n-                        | ExecutionException e) {\n-                    logger.atError(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId).setCause(e)\n-                            .log(\"Deployment failed\");\n-                    if (isAutoRollbackRequested(deploymentDocument)) {\n-                        rollback(deploymentDocument, totallyCompleteFuture, e,\n-                                servicesChangeManager.createRollbackManager());\n-                    } else {\n-                        totallyCompleteFuture.complete(new DeploymentResult(\n-                                DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_NOT_REQUESTED, e));\n-                    }\n-                }\n-            });\n+            try {\n+                servicesChangeManager.startNewServices();\n+                // Restart any services that may have been broken before this deployment\n+                // This is added to allow deployments to fix broken services\n+                servicesChangeManager.reinstallBrokenServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0MzQxNA==", "bodyText": "Should these be logged?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r504343414", "createdAt": "2020-10-14T01:10:49Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -128,35 +142,47 @@ void rollback(DeploymentDocument deploymentDocument, CompletableFuture<Deploymen\n             return;\n         }\n         // wait until topic listeners finished processing read changes.\n+        AtomicBoolean setDesiredStatesFailed = new AtomicBoolean();\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                // TODO: Add timeout\n-                try {\n-                    rollbackManager.startNewServices();\n-                    rollbackManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrackForRollback = rollbackManager.servicesToTrack();\n-\n-                    waitForServicesToStart(servicesToTrackForRollback, mergeTime);\n-\n-                    rollbackManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services rolled back\");\n-\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, failureCause));\n-                } catch (InterruptedException | ServiceUpdateException | ExecutionException\n-                        | ServiceLoadException e) {\n-                    // Rollback execution failed\n-                    logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n-                            .log(\"Failed to rollback deployment\");\n-                    // TODO : Run user provided script to reach user defined safe state and\n-                    //  set deployment status based on the success of the script run\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_UNABLE_TO_ROLLBACK, failureCause));\n-                }\n-            });\n+            try {\n+                rollbackManager.startNewServices();\n+                rollbackManager.reinstallBrokenServices();\n+            } catch (ServiceLoadException e) {\n+                setDesiredStatesFailed.set(true);\n+                setDesiredStateFailureCause.set(e);\n+            }\n         });\n+        // Do not block the publish queue to handle failure in setting desired states for services\n+        if (setDesiredStatesFailed.get()) {\n+            handleFailureRollback(totallyCompleteFuture, failureCause, setDesiredStateFailureCause.get());\n+        }\n+\n+        try {\n+            Set<GreengrassService> servicesToTrackForRollback = rollbackManager.servicesToTrack();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM0NDAyNA==", "bodyText": "This log does not seem relevant anymore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r504344024", "createdAt": "2020-10-14T01:13:20Z", "author": {"login": "philcali"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/UpdateSystemSafelyService.java", "diffHunk": "@@ -156,16 +155,10 @@ protected void startup() throws InterruptedException {\n             } else {\n                 lifecycleIPCAgent.discardDeferComponentUpdateFutures();\n                 logger.atDebug().setEventType(\"service-update-scheduled\").log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d81768f0e46854468f0a36105120ee1131a2998a", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d81768f0e46854468f0a36105120ee1131a2998a", "committedDate": "2020-10-13T18:37:51Z", "message": "Merge branch 'master' into deployment-wait-sync"}, "afterCommit": {"oid": "402491df0c25cc25bf3037812f9fa0932e3d2556", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/402491df0c25cc25bf3037812f9fa0932e3d2556", "committedDate": "2020-10-14T15:42:19Z", "message": "Revert reusing safe update service startup thread for executing deployment to enable graceful kernel shutdown when deployment triggers restart"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "402491df0c25cc25bf3037812f9fa0932e3d2556", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/402491df0c25cc25bf3037812f9fa0932e3d2556", "committedDate": "2020-10-14T15:42:19Z", "message": "Revert reusing safe update service startup thread for executing deployment to enable graceful kernel shutdown when deployment triggers restart"}, "afterCommit": {"oid": "654c199a76e04f349ffdfb6517d63e91f1f5e332", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/654c199a76e04f349ffdfb6517d63e91f1f5e332", "committedDate": "2020-10-14T15:57:38Z", "message": "Revert reusing safe update service startup thread for executing deployment to enable graceful kernel shutdown when deployment triggers restart"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NTc4MDE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508578019", "createdAt": "2020-10-14T17:34:00Z", "commit": {"oid": "654c199a76e04f349ffdfb6517d63e91f1f5e332"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjM5Mzg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508639389", "createdAt": "2020-10-14T18:56:59Z", "commit": {"oid": "654c199a76e04f349ffdfb6517d63e91f1f5e332"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "943b2ba3e0c7d0207c32230d6cbf7a1256c4f64d", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/943b2ba3e0c7d0207c32230d6cbf7a1256c4f64d", "committedDate": "2020-10-14T19:17:56Z", "message": "Merge branch 'master' into deployment-wait-sync"}, "afterCommit": {"oid": "e0af70c837e79992edb9ff55ae5a281edb8566b5", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e0af70c837e79992edb9ff55ae5a281edb8566b5", "committedDate": "2020-10-14T19:26:16Z", "message": "Revert reusing safe update service startup thread for executing deployment to enable graceful kernel shutdown when deployment triggers restart"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjYxNTA4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508661508", "createdAt": "2020-10-14T19:28:30Z", "commit": {"oid": "e0af70c837e79992edb9ff55ae5a281edb8566b5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzE3MDU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508717057", "createdAt": "2020-10-14T20:49:13Z", "commit": {"oid": "e0af70c837e79992edb9ff55ae5a281edb8566b5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODcxODIx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508871821", "createdAt": "2020-10-15T01:12:59Z", "commit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODk2NTI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508896527", "createdAt": "2020-10-15T02:37:13Z", "commit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozNzoxNFrOHhupOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozNzoxNFrOHhupOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyOTI3Mg==", "bodyText": "don't you need to wait for the lambda to run? This will always be null because it hasn't executed yet, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505129272", "createdAt": "2020-10-15T02:37:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +77,54 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n \n         // wait until topic listeners finished processing mergeMap changes.\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                //TODO: Add timeout\n-                try {\n-                    servicesChangeManager.startNewServices();\n-\n-                    // Restart any services that may have been broken before this deployment\n-                    // This is added to allow deployments to fix broken services\n-                    servicesChangeManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrack = servicesChangeManager.servicesToTrack();\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).kv(\"serviceToTrack\", servicesToTrack)\n-                            .log(\"Applied new service config. Waiting for services to complete update\");\n-\n-                    waitForServicesToStart(servicesToTrack, mergeTime);\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).log(\"new/updated services are running, will now remove\"\n-                            + \" old services\");\n-                    servicesChangeManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services updated\");\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.SUCCESSFUL, null));\n-                } catch (ServiceLoadException | InterruptedException | ServiceUpdateException\n-                        | ExecutionException e) {\n-                    logger.atError(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId).setCause(e)\n-                            .log(\"Deployment failed\");\n-                    if (isAutoRollbackRequested(deploymentDocument)) {\n-                        rollback(deploymentDocument, totallyCompleteFuture, e,\n-                                servicesChangeManager.createRollbackManager());\n-                    } else {\n-                        totallyCompleteFuture.complete(new DeploymentResult(\n-                                DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_NOT_REQUESTED, e));\n-                    }\n-                }\n-            });\n+            try {\n+                servicesChangeManager.startNewServices();\n+                // Restart any services that may have been broken before this deployment\n+                // This is added to allow deployments to fix broken services\n+                servicesChangeManager.reinstallBrokenServices();\n+            } catch (ServiceLoadException e) {\n+                setDesiredStateFailureCause.set(e);\n+            }\n         });\n+        // Do not block the publish queue to handle failure in setting desired states for services\n+        if (setDesiredStateFailureCause.get() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODk2Nzg3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508896787", "createdAt": "2020-10-15T02:38:03Z", "commit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozODowM1rOHhuqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozODowM1rOHhuqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyOTQ5OQ==", "bodyText": "use run and wait which returns you the exception (if any)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505129499", "createdAt": "2020-10-15T02:38:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +77,54 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n \n         // wait until topic listeners finished processing mergeMap changes.\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODk3MTI3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-508897127", "createdAt": "2020-10-15T02:39:13Z", "commit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozOToxM1rOHhurcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozOToxM1rOHhurcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyOTg0MA==", "bodyText": "same here. This will always be null because you aren't waiting for the error to maybe happen.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505129840", "createdAt": "2020-10-15T02:39:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -128,35 +139,49 @@ void rollback(DeploymentDocument deploymentDocument, CompletableFuture<Deploymen\n             return;\n         }\n         // wait until topic listeners finished processing read changes.\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicReference<Throwable> setDesiredStateFailureCause = new AtomicReference<>();\n         kernel.getContext().runOnPublishQueue(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                // TODO: Add timeout\n-                try {\n-                    rollbackManager.startNewServices();\n-                    rollbackManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrackForRollback = rollbackManager.servicesToTrack();\n-\n-                    waitForServicesToStart(servicesToTrackForRollback, mergeTime);\n-\n-                    rollbackManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services rolled back\");\n-\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, failureCause));\n-                } catch (InterruptedException | ServiceUpdateException | ExecutionException\n-                        | ServiceLoadException e) {\n-                    // Rollback execution failed\n-                    logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n-                            .log(\"Failed to rollback deployment\");\n-                    // TODO : Run user provided script to reach user defined safe state and\n-                    //  set deployment status based on the success of the script run\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_UNABLE_TO_ROLLBACK, failureCause));\n-                }\n-            });\n+            try {\n+                rollbackManager.startNewServices();\n+                rollbackManager.reinstallBrokenServices();\n+            } catch (ServiceLoadException e) {\n+                setDesiredStateFailureCause.set(e);\n+            }\n         });\n+        // Do not block the publish queue to handle failure in setting desired states for services\n+        if (setDesiredStateFailureCause.get() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e487b660b2cb3b3d3c7ab5e90b795536bda0bdc7", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e487b660b2cb3b3d3c7ab5e90b795536bda0bdc7", "committedDate": "2020-10-15T16:33:15Z", "message": "Fix deployment sync issue causing cancellation to break and post component updates to be sent prematurely"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7e7c4288dd6cfc4160ae70667262b3f28a4708", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb7e7c4288dd6cfc4160ae70667262b3f28a4708", "committedDate": "2020-10-15T16:33:15Z", "message": "Higher timeout for hard dependency remove integ test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8088fa97d14742d5780e5e08d0a56f8a9ff69cdc", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8088fa97d14742d5780e5e08d0a56f8a9ff69cdc", "committedDate": "2020-10-15T16:33:15Z", "message": "fix race condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d5439e574302bb5a8145392508803dbdb681fa", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/38d5439e574302bb5a8145392508803dbdb681fa", "committedDate": "2020-10-15T16:33:15Z", "message": "Revert reusing safe update service startup thread for executing deployment to enable graceful kernel shutdown when deployment triggers restart"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f10aa4872cfb3d1e37ba5128933e2b59421f3d2b", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f10aa4872cfb3d1e37ba5128933e2b59421f3d2b", "committedDate": "2020-10-15T00:32:29Z", "message": "Merge branch 'master' into deployment-wait-sync"}, "afterCommit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/920704f30aede09201ffa970b0d986e8c63870d3", "committedDate": "2020-10-15T16:39:34Z", "message": "Address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTc3NTY4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-509577568", "createdAt": "2020-10-15T16:48:02Z", "commit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo0ODowM1rOHiQ9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo0ODowM1rOHiQ9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MTU1MQ==", "bodyText": "after handling failure, shouldn't we quit?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505691551", "createdAt": "2020-10-15T16:48:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -77,43 +76,46 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n                 kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n \n         // wait until topic listeners finished processing mergeMap changes.\n-        kernel.getContext().runOnPublishQueue(() -> {\n+        Throwable setDesiredStateFailureCause = kernel.getContext().runOnPublishQueueAndWait(() -> {\n             // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                //TODO: Add timeout\n-                try {\n-                    servicesChangeManager.startNewServices();\n-\n-                    // Restart any services that may have been broken before this deployment\n-                    // This is added to allow deployments to fix broken services\n-                    servicesChangeManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrack = servicesChangeManager.servicesToTrack();\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).kv(\"serviceToTrack\", servicesToTrack)\n-                            .log(\"Applied new service config. Waiting for services to complete update\");\n-\n-                    waitForServicesToStart(servicesToTrack, mergeTime);\n-                    logger.atDebug(MERGE_CONFIG_EVENT_KEY).log(\"new/updated services are running, will now remove\"\n-                            + \" old services\");\n-                    servicesChangeManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services updated\");\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.SUCCESSFUL, null));\n-                } catch (ServiceLoadException | InterruptedException | ServiceUpdateException\n-                        | ExecutionException e) {\n-                    logger.atError(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId).setCause(e)\n-                            .log(\"Deployment failed\");\n-                    if (isAutoRollbackRequested(deploymentDocument)) {\n-                        rollback(deploymentDocument, totallyCompleteFuture, e,\n-                                servicesChangeManager.createRollbackManager());\n-                    } else {\n-                        totallyCompleteFuture.complete(new DeploymentResult(\n-                                DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_NOT_REQUESTED, e));\n-                    }\n-                }\n-            });\n+            servicesChangeManager.startNewServices();\n+            // Restart any services that may have been broken before this deployment\n+            // This is added to allow deployments to fix broken services\n+            servicesChangeManager.reinstallBrokenServices();\n         });\n+        if (setDesiredStateFailureCause != null) {\n+            handleFailure(servicesChangeManager, deploymentDocument, totallyCompleteFuture,\n+                    setDesiredStateFailureCause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTc4MjI5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-509578229", "createdAt": "2020-10-15T16:48:54Z", "commit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo0ODo1NFrOHiQ_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo0ODo1NFrOHiQ_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5MjA2Nw==", "bodyText": "likewise", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505692067", "createdAt": "2020-10-15T16:48:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -128,35 +130,40 @@ void rollback(DeploymentDocument deploymentDocument, CompletableFuture<Deploymen\n             return;\n         }\n         // wait until topic listeners finished processing read changes.\n-        kernel.getContext().runOnPublishQueue(() -> {\n-            // polling to wait for all services to be started.\n-            kernel.getContext().get(ExecutorService.class).execute(() -> {\n-                // TODO: Add timeout\n-                try {\n-                    rollbackManager.startNewServices();\n-                    rollbackManager.reinstallBrokenServices();\n-\n-                    Set<GreengrassService> servicesToTrackForRollback = rollbackManager.servicesToTrack();\n-\n-                    waitForServicesToStart(servicesToTrackForRollback, mergeTime);\n-\n-                    rollbackManager.removeObsoleteServices();\n-                    logger.atInfo(MERGE_CONFIG_EVENT_KEY).kv(DEPLOYMENT_ID_LOG_KEY, deploymentId)\n-                            .log(\"All services rolled back\");\n-\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, failureCause));\n-                } catch (InterruptedException | ServiceUpdateException | ExecutionException\n-                        | ServiceLoadException e) {\n-                    // Rollback execution failed\n-                    logger.atError().setEventType(MERGE_ERROR_LOG_EVENT_KEY).setCause(e)\n-                            .log(\"Failed to rollback deployment\");\n-                    // TODO : Run user provided script to reach user defined safe state and\n-                    //  set deployment status based on the success of the script run\n-                    totallyCompleteFuture.complete(new DeploymentResult(\n-                            DeploymentResult.DeploymentStatus.FAILED_UNABLE_TO_ROLLBACK, failureCause));\n-                }\n-            });\n+        Throwable setDesiredStateFailureCause = kernel.getContext().runOnPublishQueueAndWait(() -> {\n+                rollbackManager.startNewServices();\n+                rollbackManager.reinstallBrokenServices();\n         });\n+        if (setDesiredStateFailureCause != null) {\n+            handleFailureRollback(totallyCompleteFuture, failureCause, setDesiredStateFailureCause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3"}, "originalPosition": 128}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "920704f30aede09201ffa970b0d986e8c63870d3", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/920704f30aede09201ffa970b0d986e8c63870d3", "committedDate": "2020-10-15T16:39:34Z", "message": "Address comment"}, "afterCommit": {"oid": "e38d6a405e083abcbb76b27aa0d7efead357a7fc", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e38d6a405e083abcbb76b27aa0d7efead357a7fc", "committedDate": "2020-10-15T16:56:14Z", "message": "Address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/272a5df8cf88b8b44bfa98d90e142c8b69c19f58", "committedDate": "2020-10-15T17:07:05Z", "message": "Address comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e38d6a405e083abcbb76b27aa0d7efead357a7fc", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e38d6a405e083abcbb76b27aa0d7efead357a7fc", "committedDate": "2020-10-15T16:56:14Z", "message": "Address comment"}, "afterCommit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/272a5df8cf88b8b44bfa98d90e142c8b69c19f58", "committedDate": "2020-10-15T17:07:05Z", "message": "Address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTk1NDMy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-509595432", "createdAt": "2020-10-15T17:09:35Z", "commit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowOTozNVrOHiRzMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzowOTozNVrOHiRzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNTI2Ng==", "bodyText": "instead of suppressing it would be better to fix it, or mark the variable as final which also resolves it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#discussion_r505705266", "createdAt": "2020-10-15T17:09:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -43,6 +42,7 @@ public DefaultActivator(Kernel kernel, DynamicComponentConfigurationValidator va\n     }\n \n     @Override\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjExNDM3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-509611437", "createdAt": "2020-10-15T17:29:57Z", "commit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjI2ODA3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/502#pullrequestreview-509626807", "createdAt": "2020-10-15T17:49:47Z", "commit": {"oid": "272a5df8cf88b8b44bfa98d90e142c8b69c19f58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8ee00517e432e9204cb65a762b858cb6b90649", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ec8ee00517e432e9204cb65a762b858cb6b90649", "committedDate": "2020-10-15T17:57:38Z", "message": "Merge branch 'master' into deployment-wait-sync"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc5281e239e1c550ed9ae61628711c896eb8953", "author": {"user": {"login": "shaguptashaikh", "name": "Shagupta Shaikh"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ccc5281e239e1c550ed9ae61628711c896eb8953", "committedDate": "2020-10-15T18:07:37Z", "message": "Merge branch 'master' into deployment-wait-sync"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3080, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}