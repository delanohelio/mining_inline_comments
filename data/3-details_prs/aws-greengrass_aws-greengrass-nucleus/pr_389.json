{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjQ2OTI0", "number": 389, "title": "Add logic for resolving current platform and findBestMatch platform", "bodyText": "Create model to store OS hierarchy . The model will be moved to common model.\nIntegrate the Platform POJO model with platform resolving logic\nimplement findBestMatch . The model will be moved to common model.\n\nIssue #, if available:\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-26T05:03:25Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389", "merged": true, "mergeCommit": {"oid": "c7c7c33d3c450c987cbd52bd703aebb8234c2630"}, "closed": true, "closedAt": "2020-08-27T23:47:12Z", "author": {"login": "ShirleyZheng92"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCvIOEAFqTQ3NTY5OTc2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDI13WgH2gAyNDczNjQ2OTI0OmJlODViN2IxZjM0OThhZTRhNGJmYThiZjgyMmZlNTY3NGRlNTQxNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Njk5NzYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-475699762", "createdAt": "2020-08-26T17:19:35Z", "commit": {"oid": "ba7fa04e9b368ba636cf8909c7dfd51158f9ae05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxOTozNVrOHHWBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxOTozNVrOHHWBqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2Mjk1Mw==", "bodyText": "Another way is that we define OS as enums and every enum has a children fields. Personally I think that's cleaner. But I'm good with merging this as first iteration.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477462953", "createdAt": "2020-08-26T17:19:35Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final OS OS_ALL = new OS(null, ALL_KEYWORD);\n+    public static final OS OS_WINDOWS = OS_ALL.addChild(\"windows\");\n+    public static final OS OS_UNIX = OS_ALL.addChild(\"unix\");\n+    public static final OS OS_LINUX = OS_UNIX.addChild(\"linux\");\n+    public static final OS OS_FEDORA = OS_LINUX.addChild(\"fedora\");\n+    public static final OS OS_DEBIAN = OS_LINUX.addChild(\"debian\");\n+    public static final OS OS_UBUNTU = OS_DEBIAN.addChild(\"ubuntu\");\n+    public static final OS OS_RASPBIAN = OS_DEBIAN.addChild(\"raspbian\");\n+    public static final OS OS_DARWIN = OS_UNIX.addChild(\"darwin\");\n+    public static final OS OS_MAC_OS = OS_DARWIN.addChild(\"macOs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7fa04e9b368ba636cf8909c7dfd51158f9ae05"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b5bfc11fb33b0d777000d0c9ad778a42419b65", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3b5bfc11fb33b0d777000d0c9ad778a42419b65", "committedDate": "2020-08-26T18:30:25Z", "message": "Add logic for resolving current platform and findBestMatch platform\n\nfindBestMatch functions will be moved to the common model between local and cloud."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "committedDate": "2020-08-26T18:30:25Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eeb1ba1bf1781bb57c6e7e23be6a2f63d63a6917", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eeb1ba1bf1781bb57c6e7e23be6a2f63d63a6917", "committedDate": "2020-08-26T18:28:26Z", "message": "Address comments"}, "afterCommit": {"oid": "d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7ccc9c14c0e00e5aa5c6c863e088f2c74a64bfc", "committedDate": "2020-08-26T18:30:25Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c19249289e4cc0f014169ee493f0612a780a05", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/92c19249289e4cc0f014169ee493f0612a780a05", "committedDate": "2020-08-26T19:20:28Z", "message": "change integ test coverage to pass on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2c9af6e8b267383a02e5e751aee0fb48936f53e8", "committedDate": "2020-08-26T20:43:33Z", "message": "Merge branch 'master' into platform_resolv"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MTUyNTAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476152503", "createdAt": "2020-08-26T23:52:44Z", "commit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1Mjo0NFrOHHk_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1Mjo0NFrOHHk_oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwODE5Mg==", "bodyText": "This is very counter-intuitive...\nI'd rather iterate through the recipeList and filter out the non-matching architecture.\nIn a nutshell, I think we could do\nrecipeList\n.filter(matchArch(platform.getArch))\n.filter(matchOS(platform.getOs))\n.sort(byOsRank())\n.findFirst()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477708192", "createdAt": "2020-08-26T23:52:44Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        List<String> architecturesToCheck;\n+        if (currentPlatform.getArchitecture() == null) {\n+            architecturesToCheck = Collections.singletonList(ALL_KEYWORD);\n+        } else {\n+            architecturesToCheck = Arrays.asList(currentPlatform.getArchitecture(), ALL_KEYWORD);\n+        }\n+\n+        for (String arch : architecturesToCheck) {\n+            // filter matching architecture", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MTUzOTg2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476153986", "createdAt": "2020-08-26T23:53:27Z", "commit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1MzoyN1rOHHlD3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1MzoyN1rOHHlD3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcwOTI3Ng==", "bodyText": "Also any.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477709276", "createdAt": "2020-08-26T23:53:27Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.aws.iot.evergreen.packagemanager.common.Platform.ALL_KEYWORD;\n+\n+public final class PlatformHelper {\n+\n+    public static final Collection<OS> OS_SUPPORTED = OS.ALL.getChildrenRecursively();\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        List<String> architecturesToCheck;\n+        if (currentPlatform.getArchitecture() == null) {\n+            architecturesToCheck = Collections.singletonList(ALL_KEYWORD);\n+        } else {\n+            architecturesToCheck = Arrays.asList(currentPlatform.getArchitecture(), ALL_KEYWORD);\n+        }\n+\n+        for (String arch : architecturesToCheck) {\n+            // filter matching architecture\n+            List<PlatformSpecificManifest> candidateRecipes = recipeList.stream().filter(r -> {\n+                if (!ALL_KEYWORD.equalsIgnoreCase(arch)) {\n+                    return r.getPlatform() != null && arch.equalsIgnoreCase(r.getPlatform().getArchitecture());\n+                }\n+                return r.getPlatform() == null\n+                        || r.getPlatform().getArchitecture() == null\n+                        || ALL_KEYWORD.equalsIgnoreCase(r.getPlatform().getArchitecture());\n+            }).collect(Collectors.toList());\n+\n+            // match os in rank\n+            OS currentOS = OS_SUPPORTED.stream()\n+                    .filter(r -> r.getName().equalsIgnoreCase(currentPlatform.getOs()))\n+                    .findFirst().orElse(null);\n+\n+            while (currentOS != null && !OS.ALL.equals(currentOS)) {\n+                OS osToCheck = currentOS;\n+                Optional<PlatformSpecificManifest> recipe = candidateRecipes.stream()\n+                        .filter(r -> r.getPlatform() != null\n+                                && osToCheck.getName().equalsIgnoreCase(r.getPlatform().getOs()))\n+                        // TODO: filter version match\n+                        .findFirst();\n+                if (recipe.isPresent()) {\n+                    return recipe;\n+                }\n+                // if can't find match for current OS, search a more generic one\n+                currentOS = currentOS.parent;\n+            }\n+\n+            // if no match find, try to match the 'all'.\n+            Optional<PlatformSpecificManifest> recipe = candidateRecipes.stream()\n+                    .filter(r -> r.getPlatform() == null || r.getPlatform().getOs() == null\n+                            || r.getPlatform().getOs().equalsIgnoreCase(ALL_KEYWORD))\n+                    // TODO: filter version match\n+                    .findFirst();\n+\n+            if (recipe.isPresent()) {\n+                return recipe;\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Find the higher rank (more specific one) between OS info. This doesn't check the two OS are on the same branch.\n+     * @param thisOS this\n+     * @param other other\n+     * @return higer rank OS\n+     */\n+    public static OS findMoreSpecificOS(OS thisOS, OS other) {\n+        if (thisOS == null) {\n+            return other;\n+        }\n+        if (other == null) {\n+            return thisOS;\n+        }\n+        if (other.getRank() > thisOS.getRank()) {\n+            return other;\n+        }\n+        return thisOS;\n+    }\n+\n+    /**\n+     * Non customer-facing class. Keeps the OS hierarchy data.\n+     */\n+    @Getter\n+    public enum OS {\n+        ALL(null, ALL_KEYWORD),\n+        WINDOWS(ALL, \"windows\"),\n+        UNIX(ALL, \"unix\"),\n+        LINUX(UNIX, \"linux\"),\n+        FEDORA(LINUX, \"fedora\"),\n+        DEBIAN(LINUX, \"debian\"),\n+        UBUNTU(DEBIAN, \"ubuntu\"),\n+        RASPBIAN(DEBIAN, \"raspbian\"),\n+        DARWIN(UNIX, \"darwin\"),\n+        MAC_OS(DARWIN, \"macOS\");\n+\n+        private final OS parent;\n+        private final String name;\n+        private final Collection<OS> children;\n+        private final int rank;\n+\n+        OS(OS parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        Set<OS> getChildrenRecursively() {\n+            Set<OS> result = new HashSet<>(children);\n+            for (OS child: children) {\n+                result.addAll(child.getChildrenRecursively());\n+            }\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Non customer-facing class. Currently only has name field.\n+     */\n+    @Getter\n+    @AllArgsConstructor\n+    public enum Architecture {\n+        ALL(ALL_KEYWORD), AMD64(\"amd64\"), ARM(\"arm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MTU3OTk3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476157997", "createdAt": "2020-08-26T23:55:26Z", "commit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1NToyNlrOHHlPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMzo1NToyNlrOHHlPkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcxMjI3Mg==", "bodyText": "We can now use Enum here. With @Builder.Default = ALL. so that we don't have to deal with null case specially.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477712272", "createdAt": "2020-08-26T23:55:26Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -14,8 +14,9 @@\n @Builder\n @Value\n public class Platform {\n+    public static final String ALL_KEYWORD = \"all\";\n     String os;\n-    //    String osVersion;\n+    // String osVersion;\n     String architecture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MTcwMDU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476170054", "createdAt": "2020-08-27T00:01:47Z", "commit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowMTo0N1rOHHl03A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDowMTo0N1rOHHl03A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA==", "bodyText": "In this case, the architecture should be NOT_RECOGNIZED which isn't ALL.\nBecause ALL is a requirement, it's technically not an architecture. But NOT_RECOGNIZED is one, which could satisfy All as a requirement.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r477721820", "createdAt": "2020-08-27T00:01:47Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -87,16 +119,77 @@\n         return ranks;\n     }\n \n+    @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+    private static OS getOSInfo() throws IOException, InterruptedException {\n+        if (isWindows) {\n+            return OS.WINDOWS;\n+        }\n+\n+        OS currentOS = OS.ALL;\n+        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n+        String osNameFromSysProperty = System.getProperty(\"os.name\").toLowerCase();\n+\n+        if (Files.exists(Paths.get(\"/bin/sh\")) || Files.exists(Paths.get(\"/usr/bin/sh\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UNIX);\n+        }\n+        if (sysver.contains(\"darwin\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DARWIN);\n+        }\n+        if (osNameFromSysProperty.replaceAll(\"\\\\s\",\"\").contains(\"macos\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.MAC_OS);\n+        }\n+        if (Files.exists(Paths.get(\"/proc\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.LINUX);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.FEDORA);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DEBIAN);\n+        }\n+        if (sysver.contains(\"raspbian\") || sysver.contains(\"raspberry\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.RASPBIAN);\n+        }\n+        if (sysver.contains(\"ubuntu\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UBUNTU);\n+        }\n+\n+        return currentOS;\n+    }\n+\n+    private static Architecture getArchInfo() {\n+        String arch = System.getProperty(\"os.arch\").toLowerCase();\n+        if (\"x86_64\".equals(arch) || \"amd64\".equals(arch)) {\n+            return Architecture.AMD64; // x86_64 & amd64 are same\n+        }\n+        if (arch.contains(\"arm\")) {\n+            return Architecture.ARM;\n+        }\n+        return Architecture.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c91ec9648e0fca24a072a167753721e88451c3b9", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c91ec9648e0fca24a072a167753721e88451c3b9", "committedDate": "2020-08-27T02:52:00Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abcd5366c8d2bd5e64e2aa9f22bb8e7b71766509", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/abcd5366c8d2bd5e64e2aa9f22bb8e7b71766509", "committedDate": "2020-08-27T02:48:44Z", "message": "Address comments"}, "afterCommit": {"oid": "c91ec9648e0fca24a072a167753721e88451c3b9", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c91ec9648e0fca24a072a167753721e88451c3b9", "committedDate": "2020-08-27T02:52:00Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2f84aa3e51908d15eee54bb616f6eaeb09ff8b84", "committedDate": "2020-08-27T02:52:55Z", "message": "Merge branch 'master' into platform_resolv"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODU1ODg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476855885", "createdAt": "2020-08-27T15:48:14Z", "commit": {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTo0ODoxNFrOHIWkQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTo0OTo1NVrOHIWocg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMDM4NA==", "bodyText": "Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478520384", "createdAt": "2020-08-27T15:48:14Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMDY4OQ==", "bodyText": "nit - separate a method like matchOS for even better readability and maintainability.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478520689", "createdAt": "2020-08-27T15:48:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMTQ1OA==", "bodyText": "Maybe use the real SerializerFactory.getRecipeSerializer so that we make sure this test's result is consistent with source code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478521458", "createdAt": "2020-08-27T15:49:55Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/common/PlatformTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PlatformTest {\n+    ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper(new JsonFactory()).configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true)\n+                    .setSerializationInclusion(JsonInclude.Include.NON_NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f84aa3e51908d15eee54bb616f6eaeb09ff8b84"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e7e6836fc2a4349d532fd598a5d40d7a877fab1", "committedDate": "2020-08-27T15:50:36Z", "message": "Merge branch 'master' into platform_resolv"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODU5Mzc5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-476859379", "createdAt": "2020-08-27T15:52:17Z", "commit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTo1MjoxOFrOHIWujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNTo1MjoxOFrOHIWujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUyMzAyMg==", "bodyText": "For the helper method, it could be simplified to be Optional.ofNullable(arch).getOrDefault(ALL)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478523022", "createdAt": "2020-08-27T15:52:18Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case\n+                    Architecture o1Arch = getOrDefault(o1.getPlatform().getArchitecture(), Architecture.ALL);\n+                    Architecture o2Arch = getOrDefault(o2.getPlatform().getArchitecture(), Architecture.ALL);\n+\n+                    if (o1Arch.getRank() != o2Arch.getRank()) {\n+                        return o1Arch.getRank() < o2Arch.getRank() ? -1 : 1;\n+                    }\n+\n+                    OS o1Os = getOrDefault(o1.getPlatform().getOs(), OS.ALL);\n+                    OS o2Os = getOrDefault(o2.getPlatform().getOs(), OS.ALL);\n+                    return Integer.compare(o1Os.getRank(), o2Os.getRank());\n+                });\n+    }\n+\n+    private static <T> T getOrDefault(T getValue, T defaultValue) {\n+        if (getValue == null) {\n+            return defaultValue;\n+        }\n+        return getValue;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDE5ODk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-477019898", "createdAt": "2020-08-27T19:31:40Z", "commit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOTozMTo0MFrOHIeWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDo0Mzo0NVrOHIgk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0Nzg1MQ==", "bodyText": "I remember Ethan removed final for mocking it. Should we avoid going back and forth?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478647851", "createdAt": "2020-08-27T19:31:40Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;\n+\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\"})\n+public final class PlatformResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzEwMA==", "bodyText": "Recommend to avoid importing static method for readability.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478653100", "createdAt": "2020-08-27T19:42:02Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1MzgwNw==", "bodyText": "Should we fail if can't acquire platform info. Falling back to 'all' could be dangerous.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478653807", "createdAt": "2020-08-27T19:43:22Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -20,19 +24,45 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public class PlatformResolver {\n+import static com.aws.iot.evergreen.packagemanager.common.PlatformHelper.findMoreSpecificOS;\n+\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\"})\n+public final class PlatformResolver {\n+    public static final boolean isWindows = System.getProperty(\"os.name\").toLowerCase().contains(\"wind\");\n     private static final Set<String> SUPPORTED_PLATFORMS = Collections.unmodifiableSet(initializeSupportedPlatforms());\n     private static final Logger logger = LogManager.getLogger(PlatformResolver.class);\n     public static final AtomicReference<Map<String, Integer>> RANKS =\n             new AtomicReference<>(Collections.unmodifiableMap(initializeRanks()));\n \n+    public static final Platform CURRENT_PLATFORM = initializePlatformInfo();\n+\n+    private static Platform initializePlatformInfo() {\n+        try {\n+            return Platform.builder()\n+                    .os(getOSInfo())\n+                    .architecture(getArchInfo())\n+                    .build();\n+        } catch (InterruptedException | IOException e) {\n+            // TODO: Better err handling\n+            logger.atError().setCause(e).log(\"Fail to read platform info\");\n+            return Platform.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NTc1NA==", "bodyText": "Again, I think default to 'ALL' is dangerous. Also can we switch to keyword 'any'?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478655754", "createdAt": "2020-08-27T19:46:57Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -5,20 +5,139 @@\n \n package com.aws.iot.evergreen.packagemanager.common;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.Value;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+\n @JsonDeserialize(builder = Platform.PlatformBuilder.class)\n @Builder\n @Value\n public class Platform {\n-    String os;\n-    //    String osVersion;\n-    String architecture;\n+    public static final String ALL_KEYWORD = \"all\";\n+\n+    @Builder.Default\n+    OS os = OS.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1NzA4OA==", "bodyText": "IMO, the function can return 'not recognized', the function caller could throw exception, it means we can't work on your device yet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478657088", "createdAt": "2020-08-27T19:49:33Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -87,16 +119,77 @@\n         return ranks;\n     }\n \n+    @SuppressFBWarnings(\"DMI_HARDCODED_ABSOLUTE_FILENAME\")\n+    private static OS getOSInfo() throws IOException, InterruptedException {\n+        if (isWindows) {\n+            return OS.WINDOWS;\n+        }\n+\n+        OS currentOS = OS.ALL;\n+        String sysver = Exec.sh(\"uname -a\").toLowerCase();\n+        String osNameFromSysProperty = System.getProperty(\"os.name\").toLowerCase();\n+\n+        if (Files.exists(Paths.get(\"/bin/sh\")) || Files.exists(Paths.get(\"/usr/bin/sh\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UNIX);\n+        }\n+        if (sysver.contains(\"darwin\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DARWIN);\n+        }\n+        if (osNameFromSysProperty.replaceAll(\"\\\\s\",\"\").contains(\"macos\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.MAC_OS);\n+        }\n+        if (Files.exists(Paths.get(\"/proc\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.LINUX);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/yum\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.FEDORA);\n+        }\n+        if (Files.exists(Paths.get(\"/usr/bin/apt-get\"))) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.DEBIAN);\n+        }\n+        if (sysver.contains(\"raspbian\") || sysver.contains(\"raspberry\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.RASPBIAN);\n+        }\n+        if (sysver.contains(\"ubuntu\")) {\n+            currentOS = findMoreSpecificOS(currentOS, OS.UBUNTU);\n+        }\n+\n+        return currentOS;\n+    }\n+\n+    private static Architecture getArchInfo() {\n+        String arch = System.getProperty(\"os.arch\").toLowerCase();\n+        if (\"x86_64\".equals(arch) || \"amd64\".equals(arch)) {\n+            return Architecture.AMD64; // x86_64 & amd64 are same\n+        }\n+        if (arch.contains(\"arm\")) {\n+            return Architecture.ARM;\n+        }\n+        return Architecture.ALL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzcyMTgyMA=="}, "originalCommit": {"oid": "2c9af6e8b267383a02e5e751aee0fb48936f53e8"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1ODcyNg==", "bodyText": "I see, you take any keyword here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478658726", "createdAt": "2020-08-27T19:52:41Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/Platform.java", "diffHunk": "@@ -5,20 +5,139 @@\n \n package com.aws.iot.evergreen.packagemanager.common;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.AllArgsConstructor;\n import lombok.Builder;\n+import lombok.Getter;\n import lombok.Value;\n \n+import java.util.Collection;\n+import java.util.HashSet;\n+\n @JsonDeserialize(builder = Platform.PlatformBuilder.class)\n @Builder\n @Value\n public class Platform {\n-    String os;\n-    //    String osVersion;\n-    String architecture;\n+    public static final String ALL_KEYWORD = \"all\";\n+\n+    @Builder.Default\n+    OS os = OS.ALL;\n+    // String osVersion;\n+    @Builder.Default\n+    Architecture architecture = Architecture.ALL;\n \n     @JsonPOJOBuilder(withPrefix = \"\")\n     public static class PlatformBuilder {\n     }\n+\n+    /**\n+     * Non customer-facing class. Keeps the OS hierarchy data.\n+     */\n+    @Getter\n+    public enum OS {\n+        ALL(null, ALL_KEYWORD),\n+        WINDOWS(ALL, \"windows\"),\n+        UNIX(ALL, \"unix\"),\n+        LINUX(UNIX, \"linux\"),\n+        FEDORA(LINUX, \"fedora\"),\n+        DEBIAN(LINUX, \"debian\"),\n+        UBUNTU(DEBIAN, \"ubuntu\"),\n+        RASPBIAN(DEBIAN, \"raspbian\"),\n+        DARWIN(UNIX, \"darwin\"),\n+        MAC_OS(DARWIN, \"macOS\");\n+\n+        @JsonValue\n+        private final String name;\n+        private final OS parent;\n+        private final Collection<OS> children;\n+        private final int rank;\n+\n+        OS(OS parent, String name) {\n+            this.parent = parent;\n+            this.name = name;\n+            this.children = new HashSet<>();\n+            if (parent == null) {\n+                this.rank = 0;\n+            } else {\n+                this.rank = parent.getRank() + 1;\n+                parent.getChildren().add(this);\n+            }\n+        }\n+\n+        /**\n+         * get OS enum from string value. Ignore case.\n+         * Unrecognized values will map to OS.ALL\n+         * @param value String of OS\n+         * @return OS enum\n+         */\n+        @JsonCreator\n+        public static OS getOS(String value) {\n+            // \"any\" and \"all\" keyword are both accepted in recipe.\n+            if (\"any\".equalsIgnoreCase(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4NDM4NQ==", "bodyText": "Does it mean architecture taking precedence?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#discussion_r478684385", "createdAt": "2020-08-27T20:43:45Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformHelper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.aws.iot.evergreen.packagemanager.common.Platform.Architecture;\n+import com.aws.iot.evergreen.packagemanager.common.Platform.OS;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public final class PlatformHelper {\n+\n+    private PlatformHelper() {\n+    }\n+\n+    /**\n+     * find best match from a list of recipes.\n+     *\n+     * @param currentPlatform the platform detail\n+     * @param recipeList      a list of recipe input\n+     * @return closest recipe\n+     */\n+    public static Optional<PlatformSpecificManifest> findBestMatch(Platform currentPlatform,\n+                                                                   List<PlatformSpecificManifest> recipeList) {\n+        return recipeList.stream()\n+                .filter(r -> {\n+                    // match arch\n+                    if (r.getPlatform() == null || r.getPlatform().getArchitecture() == null\n+                            || r.getPlatform().getArchitecture().equals(Architecture.ALL)) {\n+                        return true;\n+                    }\n+                    Architecture currentArch = currentPlatform.getArchitecture();\n+                    while (!Architecture.ALL.equals(currentArch)) {\n+                        if (currentArch.equals(r.getPlatform().getArchitecture())) {\n+                            return true;\n+                        }\n+                        currentArch = currentArch.getParent();\n+                    }\n+                    return false;\n+                })\n+                .filter(r -> {\n+                    // match os\n+                    if (r.getPlatform() == null || r.getPlatform().getOs() == null\n+                        || r.getPlatform().getOs().equals(OS.ALL)) {\n+                        return true;\n+                    }\n+                    OS currentOS = currentPlatform.getOs();\n+                    while (!currentOS.equals(OS.ALL)) {\n+                        if (currentOS.equals(r.getPlatform().getOs())) {\n+                            return true;\n+                        }\n+                        currentOS = currentOS.getParent();\n+                    }\n+                    return false;\n+                })\n+                .max((o1, o2) -> {\n+                    if (o1.getPlatform() == null) {\n+                        return -1;\n+                    }\n+                    if (o2.getPlatform() == null) {\n+                        return 1;\n+                    }\n+                    // getPlatform().getArch() shouldn't return null after parsing from recipe\n+                    // Having null check just in case\n+                    Architecture o1Arch = getOrDefault(o1.getPlatform().getArchitecture(), Architecture.ALL);\n+                    Architecture o2Arch = getOrDefault(o2.getPlatform().getArchitecture(), Architecture.ALL);\n+\n+                    if (o1Arch.getRank() != o2Arch.getRank()) {\n+                        return o1Arch.getRank() < o2Arch.getRank() ? -1 : 1;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTQxNTMy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/389#pullrequestreview-477141532", "createdAt": "2020-08-27T23:06:17Z", "commit": {"oid": "5e7e6836fc2a4349d532fd598a5d40d7a877fab1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be85b7b1f3498ae4a4bfa8bf822fe5674de54141", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/be85b7b1f3498ae4a4bfa8bf822fe5674de54141", "committedDate": "2020-08-27T23:17:05Z", "message": "Merge branch 'master' into platform_resolv"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3207, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}