{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTY1MjUy", "number": 235, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTowNTo1N1rOD701Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1NjoxNVrOEFsY1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDU4MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTowNTo1N1rOGUY8rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowODozMlrOGU5ApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMzQ1Mw==", "bodyText": "What about child added or initialized?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424033453", "createdAt": "2020-05-12T21:05:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -94,7 +94,7 @@ public ConfigurationWriter flushImmediately(boolean fl) {\n \n     @Override\n     public synchronized void published(WhatHappened what, Topic n) {\n-        if (what == WhatHappened.childChanged) {\n+        if (what == WhatHappened.childChanged || what == WhatHappened.childRemoved) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1ODc1Nw==", "bodyText": "createLeafChild() doesn't fire an event for adding new child. However when you set a value in WithNewerValue(), it fires a 'childChanged' event.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424558757", "createdAt": "2020-05-13T16:08:32Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationWriter.java", "diffHunk": "@@ -94,7 +94,7 @@ public ConfigurationWriter flushImmediately(boolean fl) {\n \n     @Override\n     public synchronized void published(WhatHappened what, Topic n) {\n-        if (what == WhatHappened.childChanged) {\n+        if (what == WhatHappened.childChanged || what == WhatHappened.childRemoved) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMzQ1Mw=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDU4NTg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTowNzoyNVrOGUY_fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowMzo1OFrOGU40SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNDE3Mw==", "bodyText": "Why make this abstract, what was wrong with the implementation?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424034173", "createdAt": "2020-05-12T21:07:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -95,49 +93,41 @@ public String toString() {\n      */\n     protected boolean addWatcher(Watcher s) {\n         if (s != null) {\n-            if (watchers == null) {\n-                watchers = new CopyOnWriteArraySet<>();\n-            }\n             return watchers.add(s);\n         }\n         return false;\n     }\n \n     /**\n-     * Remove a subscriber to stop being called for updates.\n+     * Remove a watcher to stop being called for updates.\n      *\n-     * @param s subscriber to remove\n+     * @param watcher watcher to remove\n      */\n-    public void remove(Subscriber s) {\n-        if (watchers != null) {\n-            watchers.remove(s);\n-        }\n+    public void remove(Watcher watcher) {\n+        watchers.remove(watcher);\n     }\n \n     /**\n      * Remove this node from its parent.\n      */\n-    public void remove() {\n-        if (parent != null) {\n-            parent.remove(this);\n-        }\n-    }\n+    public abstract void remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NTU5Mw==", "bodyText": "In existing code, Topics.remove(Node) calls the below code\n        n.fire(WhatHappened.removed);\n        childChanged(WhatHappened.childRemoved, n);\n\nwhile Topic.fire(WhatHappened.removed) calls\nparent.childChanged(what, this);\n\nWhich will cause the parent being called childChanged twice, once with removed and once with childRemoved\nThe expected behavior is, when calling Node.remove() or Topics.remove(child), the child node get 'removed' event once and parent node get 'childRemoved' event once, and the node is removed from parent's children. Here I choose to let child invoke parent.childChanged(event).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424555593", "createdAt": "2020-05-13T16:03:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Node.java", "diffHunk": "@@ -95,49 +93,41 @@ public String toString() {\n      */\n     protected boolean addWatcher(Watcher s) {\n         if (s != null) {\n-            if (watchers == null) {\n-                watchers = new CopyOnWriteArraySet<>();\n-            }\n             return watchers.add(s);\n         }\n         return false;\n     }\n \n     /**\n-     * Remove a subscriber to stop being called for updates.\n+     * Remove a watcher to stop being called for updates.\n      *\n-     * @param s subscriber to remove\n+     * @param watcher watcher to remove\n      */\n-    public void remove(Subscriber s) {\n-        if (watchers != null) {\n-            watchers.remove(s);\n-        }\n+    public void remove(Watcher watcher) {\n+        watchers.remove(watcher);\n     }\n \n     /**\n      * Remove this node from its parent.\n      */\n-    public void remove() {\n-        if (parent != null) {\n-            parent.remove(this);\n-        }\n-    }\n+    public abstract void remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNDE3Mw=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDU4OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTowODozNlrOGUZBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowOTo0NFrOGU5DpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNDc1Ng==", "bodyText": "So this isn't actually removing the node. The node will still exist; it just has a null value. That's the implementation we decided to go with?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424034756", "createdAt": "2020-05-12T21:08:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,19 +118,29 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    @SuppressWarnings(\"PMD.NullAssignment\")\n     @Override\n-    public void fire(WhatHappened what) {\n+    public synchronized void remove() {\n+        modtime = System.currentTimeMillis();\n+        value = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1OTUyNA==", "bodyText": "parent removes this node on receiving a childChanged event. when it has no other references it'll be garbage collected.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424559524", "createdAt": "2020-05-13T16:09:44Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,19 +118,29 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    @SuppressWarnings(\"PMD.NullAssignment\")\n     @Override\n-    public void fire(WhatHappened what) {\n+    public synchronized void remove() {\n+        modtime = System.currentTimeMillis();\n+        value = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNDc1Ng=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDU5MjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMTowOTo1NFrOGUZEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoxMjoyMlrOGU5KrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNTM2Mw==", "bodyText": "What about the other values of WhatHappened? Who can call this fire method, and what values can it be called with.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424035363", "createdAt": "2020-05-12T21:09:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,19 +118,29 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    @SuppressWarnings(\"PMD.NullAssignment\")\n     @Override\n-    public void fire(WhatHappened what) {\n+    public synchronized void remove() {\n+        modtime = System.currentTimeMillis();\n+        value = null;\n+        context.runOnPublishQueueAndWait(() -> this.fire(WhatHappened.removed));\n+        watchers.clear();\n+    }\n+\n+    private void fire(WhatHappened what) {\n         logger.atDebug().setEventType(\"config-node-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n-                }\n+        for (Watcher s : watchers) {\n+            if (s instanceof Subscriber) {\n+                ((Subscriber) s).published(what, this);\n             }\n         }\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(what, this);\n+            if (what.equals(WhatHappened.changed)) {\n+                parent.childChanged(WhatHappened.childChanged, this);\n+            } else if (what.equals(WhatHappened.removed)) {\n+                parent.childChanged(WhatHappened.childRemoved, this);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MTMyNA==", "bodyText": "currently fire() only called in remove() and WithNewerValue() .", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424561324", "createdAt": "2020-05-13T16:12:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,19 +118,29 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    @SuppressWarnings(\"PMD.NullAssignment\")\n     @Override\n-    public void fire(WhatHappened what) {\n+    public synchronized void remove() {\n+        modtime = System.currentTimeMillis();\n+        value = null;\n+        context.runOnPublishQueueAndWait(() -> this.fire(WhatHappened.removed));\n+        watchers.clear();\n+    }\n+\n+    private void fire(WhatHappened what) {\n         logger.atDebug().setEventType(\"config-node-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n-                }\n+        for (Watcher s : watchers) {\n+            if (s instanceof Subscriber) {\n+                ((Subscriber) s).published(what, this);\n             }\n         }\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(what, this);\n+            if (what.equals(WhatHappened.changed)) {\n+                parent.childChanged(WhatHappened.childChanged, this);\n+            } else if (what.equals(WhatHappened.removed)) {\n+                parent.childChanged(WhatHappened.childRemoved, this);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNTM2Mw=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDU5OTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxMTo1NVrOGUZIWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowNjowN1rOGU46RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNjQ0MQ==", "bodyText": "Why does this need to be on the publish queue? The other remove and fire methods don't use it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424036441", "createdAt": "2020-05-12T21:11:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -292,6 +271,19 @@ public Topics subscribe(ChildChanged cc) {\n         return this;\n     }\n \n+    @Override\n+    public synchronized void remove() {\n+        context.runOnPublishQueueAndWait(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NzEyNA==", "bodyText": "fire() method is only invoked in Topic.withNewerValue() , where it put in runOnPublishQueue();", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424557124", "createdAt": "2020-05-13T16:06:07Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -292,6 +271,19 @@ public Topics subscribe(ChildChanged cc) {\n         return this;\n     }\n \n+    @Override\n+    public synchronized void remove() {\n+        context.runOnPublishQueueAndWait(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNjQ0MQ=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDYwNTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxMzozMlrOGUZLnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMDoxN1rOGU5fFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzI3Nw==", "bodyText": "This seems really weird to have here. Makes more sense to me if this removal was actually in the remove method instead of a callback for childChanged.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424037277", "createdAt": "2020-05-12T21:13:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -244,41 +240,24 @@ public void deepForEachTopic(Consumer<Topic> f) {\n         children.values().forEach((t) -> t.deepForEachTopic(f));\n     }\n \n-    /**\n-     * Remove a node from this node's children.\n-     *\n-     * @param n node to remove\n-     */\n-    public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n-    }\n-\n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        if (what.equals(WhatHappened.childRemoved) && children.get(child.getName()) == child) {\n+            children.remove(child.getName());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NjU0OQ==", "bodyText": "I'm not very satisfied with this part as well. The reason writing like this is I want to make all topic-change publish event run in context.runOnPublishQueue(), and make children.remove() run in sync with the remove() call.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424566549", "createdAt": "2020-05-13T16:20:17Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -244,41 +240,24 @@ public void deepForEachTopic(Consumer<Topic> f) {\n         children.values().forEach((t) -> t.deepForEachTopic(f));\n     }\n \n-    /**\n-     * Remove a node from this node's children.\n-     *\n-     * @param n node to remove\n-     */\n-    public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n-    }\n-\n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        if (what.equals(WhatHappened.childRemoved) && children.get(child.getName()) == child) {\n+            children.remove(child.getName());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzI3Nw=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDYwNzU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/TopicsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxNDoyMlrOGUZNHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjowNjoxNVrOGU46rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzY2Mg==", "bodyText": "you already create a context in the beforeeach. Use that one otherwise you'll be leaking contexts.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424037662", "createdAt": "2020-05-12T21:14:22Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/TopicsTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.iot.evergreen.config;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class TopicsTest {\n+\n+    private static final String TEST_TOPICS_CONTENT =\n+            \"---\\n\"\n+            + \"foo:\\n\"\n+            + \"  key1:\\n\"\n+            + \"    subkey1: val1\\n\"\n+            + \"  key2: val2\\n\";\n+    private static Map<Object, Object> testTopicsMap;\n+\n+    private Context context;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        testTopicsMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(\n+            new ByteArrayInputStream(TEST_TOPICS_CONTENT.getBytes()));\n+    }\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws Exception {\n+        if (context != null) {\n+            context.close();\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_leaf_node_removed_THEN_subscribers_get_notified_successfully() throws Exception {\n+        context = new Context();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU1NzIzMA==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r424557230", "createdAt": "2020-05-13T16:06:15Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/config/TopicsTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.aws.iot.evergreen.config;\n+\n+import java.io.ByteArrayInputStream;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.fasterxml.jackson.jr.ob.JSON;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class TopicsTest {\n+\n+    private static final String TEST_TOPICS_CONTENT =\n+            \"---\\n\"\n+            + \"foo:\\n\"\n+            + \"  key1:\\n\"\n+            + \"    subkey1: val1\\n\"\n+            + \"  key2: val2\\n\";\n+    private static Map<Object, Object> testTopicsMap;\n+\n+    private Context context;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        testTopicsMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(\n+            new ByteArrayInputStream(TEST_TOPICS_CONTENT.getBytes()));\n+    }\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws Exception {\n+        if (context != null) {\n+            context.close();\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_topics_WHEN_leaf_node_removed_THEN_subscribers_get_notified_successfully() throws Exception {\n+        context = new Context();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzY2Mg=="}, "originalCommit": {"oid": "3d3db05555ff617cbccf55c8c410171552c8253d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTUzNjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoyNTo0OVrOGix-4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzoyNTo0OVrOGix-4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMzY4Mg==", "bodyText": "wrong class, unless you did this on purpose.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439123682", "createdAt": "2020-06-11T23:25:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -4,48 +4,67 @@\n package com.aws.iot.evergreen.config;\n \n import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.Reader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Iterator;\n import java.util.function.Predicate;\n \n-import static com.aws.iot.evergreen.util.Coerce.toObject;\n-import static com.aws.iot.evergreen.util.Utils.parseLong;\n-\n public final class ConfigurationReader {\n-    private static final java.util.regex.Pattern logLine =\n-            java.util.regex.Pattern.compile(\"([0-9]+),([^,]*),([^\\n]*)\\n*\");\n     private static final java.util.regex.Pattern seperator = java.util.regex.Pattern.compile(\"[./] *\");\n+    private static final Logger logger = LogManager.getLogger(Configuration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU0NjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozMDo1NFrOGiyEdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo0MjoyMFrOGkCAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNTExMA==", "bodyText": "not sure you should add this here, I'd prefer to let the caller do this. This could actually lead to a deadlock if this merge is running in the publish thread.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439125110", "createdAt": "2020-06-11T23:30:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -4,48 +4,67 @@\n package com.aws.iot.evergreen.config;\n \n import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.Reader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Iterator;\n import java.util.function.Predicate;\n \n-import static com.aws.iot.evergreen.util.Coerce.toObject;\n-import static com.aws.iot.evergreen.util.Utils.parseLong;\n-\n public final class ConfigurationReader {\n-    private static final java.util.regex.Pattern logLine =\n-            java.util.regex.Pattern.compile(\"([0-9]+),([^,]*),([^\\n]*)\\n*\");\n     private static final java.util.regex.Pattern seperator = java.util.regex.Pattern.compile(\"[./] *\");\n+    private static final Logger logger = LogManager.getLogger(Configuration.class);\n \n     private ConfigurationReader() {\n     }\n \n     /**\n      * Merge the given transaction log into the given configuration.\n      *\n-     * @param c  configuration to merge into\n+     * @param config  configuration to merge into\n      * @param r0 reader of the transaction log to read from\n+     * @param forceTimestamp forceTimestamp\n+     * @param mergeCondition mergeCondition\n      * @throws IOException if reading fails\n      */\n-    public static void mergeTLogInto(Configuration c, Reader r0) throws IOException {\n+    public static void mergeTLogInto(Configuration config,\n+                                     Reader r0,\n+                                     boolean forceTimestamp,\n+                                     Predicate<Topic> mergeCondition) throws IOException {\n         try (BufferedReader in = r0 instanceof BufferedReader ? (BufferedReader) r0 : new BufferedReader(r0)) {\n-            String l = in.readLine();\n-            while (l != null) {\n-                java.util.regex.Matcher m = logLine.matcher(l);\n-                if (m.matches()) {\n-                    c.lookup(seperator.split(m.group(2))).withNewerValue(parseLong(m.group(1)), toObject(m.group(3)));\n+            String l;\n+\n+            for (l = in.readLine(); l != null; l = in.readLine()) {\n+                try {\n+                    Tlogline tlogline = Tlogline.fromStringInput(l);\n+                    Topic targetTopic = config.lookup(seperator.split(tlogline.topicString));\n+                    if (mergeCondition != null && !mergeCondition.test(targetTopic)) {\n+                        continue;\n+                    }\n+                    if (WhatHappened.changed.equals(tlogline.action)) {\n+                        targetTopic.withNewerValue(tlogline.timestamp, tlogline.value, forceTimestamp);\n+                    } else if (WhatHappened.removed.equals(tlogline.action)) {\n+                        if (forceTimestamp) {\n+                            targetTopic.remove();\n+                        } else {\n+                            targetTopic.remove(tlogline.timestamp);\n+                        }\n+                    }\n+                } catch (Tlogline.InvalidLogException e) {\n+                    logger.atError().setCause(e).log(\"Fail to parse log line\");\n                 }\n-                l = in.readLine();\n             }\n+\n+            // block until all changes are merged in\n+            config.context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4MTk0MQ==", "bodyText": "I think running merge in the publish thread isn't recommended. Since publish is triggered when config change, and it can cause a chain of config changes. I think it's natural for caller to assume that when this mergeTlogInto() returns, the config is updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439981941", "createdAt": "2020-06-15T07:33:57Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -4,48 +4,67 @@\n package com.aws.iot.evergreen.config;\n \n import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.Reader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Iterator;\n import java.util.function.Predicate;\n \n-import static com.aws.iot.evergreen.util.Coerce.toObject;\n-import static com.aws.iot.evergreen.util.Utils.parseLong;\n-\n public final class ConfigurationReader {\n-    private static final java.util.regex.Pattern logLine =\n-            java.util.regex.Pattern.compile(\"([0-9]+),([^,]*),([^\\n]*)\\n*\");\n     private static final java.util.regex.Pattern seperator = java.util.regex.Pattern.compile(\"[./] *\");\n+    private static final Logger logger = LogManager.getLogger(Configuration.class);\n \n     private ConfigurationReader() {\n     }\n \n     /**\n      * Merge the given transaction log into the given configuration.\n      *\n-     * @param c  configuration to merge into\n+     * @param config  configuration to merge into\n      * @param r0 reader of the transaction log to read from\n+     * @param forceTimestamp forceTimestamp\n+     * @param mergeCondition mergeCondition\n      * @throws IOException if reading fails\n      */\n-    public static void mergeTLogInto(Configuration c, Reader r0) throws IOException {\n+    public static void mergeTLogInto(Configuration config,\n+                                     Reader r0,\n+                                     boolean forceTimestamp,\n+                                     Predicate<Topic> mergeCondition) throws IOException {\n         try (BufferedReader in = r0 instanceof BufferedReader ? (BufferedReader) r0 : new BufferedReader(r0)) {\n-            String l = in.readLine();\n-            while (l != null) {\n-                java.util.regex.Matcher m = logLine.matcher(l);\n-                if (m.matches()) {\n-                    c.lookup(seperator.split(m.group(2))).withNewerValue(parseLong(m.group(1)), toObject(m.group(3)));\n+            String l;\n+\n+            for (l = in.readLine(); l != null; l = in.readLine()) {\n+                try {\n+                    Tlogline tlogline = Tlogline.fromStringInput(l);\n+                    Topic targetTopic = config.lookup(seperator.split(tlogline.topicString));\n+                    if (mergeCondition != null && !mergeCondition.test(targetTopic)) {\n+                        continue;\n+                    }\n+                    if (WhatHappened.changed.equals(tlogline.action)) {\n+                        targetTopic.withNewerValue(tlogline.timestamp, tlogline.value, forceTimestamp);\n+                    } else if (WhatHappened.removed.equals(tlogline.action)) {\n+                        if (forceTimestamp) {\n+                            targetTopic.remove();\n+                        } else {\n+                            targetTopic.remove(tlogline.timestamp);\n+                        }\n+                    }\n+                } catch (Tlogline.InvalidLogException e) {\n+                    logger.atError().setCause(e).log(\"Fail to parse log line\");\n                 }\n-                l = in.readLine();\n             }\n+\n+            // block until all changes are merged in\n+            config.context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNTExMA=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNDg4Ng==", "bodyText": "I think the merge does run in the publish thread so that it isn't mixed in with other changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440434886", "createdAt": "2020-06-15T20:42:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -4,48 +4,67 @@\n package com.aws.iot.evergreen.config;\n \n import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.Reader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Iterator;\n import java.util.function.Predicate;\n \n-import static com.aws.iot.evergreen.util.Coerce.toObject;\n-import static com.aws.iot.evergreen.util.Utils.parseLong;\n-\n public final class ConfigurationReader {\n-    private static final java.util.regex.Pattern logLine =\n-            java.util.regex.Pattern.compile(\"([0-9]+),([^,]*),([^\\n]*)\\n*\");\n     private static final java.util.regex.Pattern seperator = java.util.regex.Pattern.compile(\"[./] *\");\n+    private static final Logger logger = LogManager.getLogger(Configuration.class);\n \n     private ConfigurationReader() {\n     }\n \n     /**\n      * Merge the given transaction log into the given configuration.\n      *\n-     * @param c  configuration to merge into\n+     * @param config  configuration to merge into\n      * @param r0 reader of the transaction log to read from\n+     * @param forceTimestamp forceTimestamp\n+     * @param mergeCondition mergeCondition\n      * @throws IOException if reading fails\n      */\n-    public static void mergeTLogInto(Configuration c, Reader r0) throws IOException {\n+    public static void mergeTLogInto(Configuration config,\n+                                     Reader r0,\n+                                     boolean forceTimestamp,\n+                                     Predicate<Topic> mergeCondition) throws IOException {\n         try (BufferedReader in = r0 instanceof BufferedReader ? (BufferedReader) r0 : new BufferedReader(r0)) {\n-            String l = in.readLine();\n-            while (l != null) {\n-                java.util.regex.Matcher m = logLine.matcher(l);\n-                if (m.matches()) {\n-                    c.lookup(seperator.split(m.group(2))).withNewerValue(parseLong(m.group(1)), toObject(m.group(3)));\n+            String l;\n+\n+            for (l = in.readLine(); l != null; l = in.readLine()) {\n+                try {\n+                    Tlogline tlogline = Tlogline.fromStringInput(l);\n+                    Topic targetTopic = config.lookup(seperator.split(tlogline.topicString));\n+                    if (mergeCondition != null && !mergeCondition.test(targetTopic)) {\n+                        continue;\n+                    }\n+                    if (WhatHappened.changed.equals(tlogline.action)) {\n+                        targetTopic.withNewerValue(tlogline.timestamp, tlogline.value, forceTimestamp);\n+                    } else if (WhatHappened.removed.equals(tlogline.action)) {\n+                        if (forceTimestamp) {\n+                            targetTopic.remove();\n+                        } else {\n+                            targetTopic.remove(tlogline.timestamp);\n+                        }\n+                    }\n+                } catch (Tlogline.InvalidLogException e) {\n+                    logger.atError().setCause(e).log(\"Fail to parse log line\");\n                 }\n-                l = in.readLine();\n             }\n+\n+            // block until all changes are merged in\n+            config.context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNTExMA=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU1MTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozNDoxMVrOGiyH1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzozODoyM1rOGjmfqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNTk3NA==", "bodyText": "why are you hardcoding the what?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439125974", "createdAt": "2020-06-11T23:34:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -129,8 +140,14 @@ public void fire(WhatHappened what) {\n                 }\n             }\n         }\n+\n+        if (WhatHappened.removed.equals(what)) {\n+            watchers.clear();\n+            return;\n+        }\n+\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(what, this);\n+            parent.childChanged(WhatHappened.childChanged, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NDA0MA==", "bodyText": "The expected behavior is,\n\nwhen child node is removed, its subscribers get 'Removed' and its parent node (and all great parent node) subscribers get 'childRemoved' events.\nwhen child node is changed, its subscribers get 'Changed' and its parent node (and all great parent node) subscribers get 'childChanged' events.\n\nLeaf node only has changed/removed event. In the remove() function, parent node already sends 'childRemoved' information, so the function returns directly. Therefore I hardcode here to 'childChanged'. I can add more comment here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439984040", "createdAt": "2020-06-15T07:38:23Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -129,8 +140,14 @@ public void fire(WhatHappened what) {\n                 }\n             }\n         }\n+\n+        if (WhatHappened.removed.equals(what)) {\n+            watchers.clear();\n+            return;\n+        }\n+\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(what, this);\n+            parent.childChanged(WhatHappened.childChanged, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNTk3NA=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU1MzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozNToyNVrOGiyJGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzozOToyMlrOGjmhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNjI5Nw==", "bodyText": "why are you undoing the hardcoding here? These 2 changes I commented on are confusing in how they differ.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439126297", "createdAt": "2020-06-11T23:35:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();\n+            return;\n         }\n+\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(WhatHappened.childChanged, child);\n+            parent.childChanged(what, child);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4NDQ5OQ==", "bodyText": "what can be either childchanged/childRemoved here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439984499", "createdAt": "2020-06-15T07:39:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();\n+            return;\n         }\n+\n         if (parent != null && parentNeedsToKnow()) {\n-            parent.childChanged(WhatHappened.childChanged, child);\n+            parent.childChanged(what, child);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNjI5Nw=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU1ODU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozODowNVrOGiyMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozODowNVrOGiyMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNzA1Nw==", "bodyText": "use consts for lifecycle and shutdown.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439127057", "createdAt": "2020-06-11T23:38:05Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "diffHunk": "@@ -56,4 +57,47 @@ public void GIVEN_tlog_with_ignored_namespace_WHEN_tlog_merged_to_config_with_no\n         assertEquals(\"TLogValue\", config.lookup(SERVICES_NAMESPACE_TOPIC, \"YellowSignal\",\n                                                 SKIP_MERGE_NAMESPACE_KEY, \"testTopic\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_tlog_WHEN_tlog_merged_to_config_with_forced_timestamp_THEN_topic_is_removed() throws Exception {\n+        // Create this topic with temp value\n+        config.lookup(SERVICES_NAMESPACE_TOPIC, \"YellowSignal\",\n+                      \"lifecycle\", \"shutdown\").withNewerValue(Long.MAX_VALUE, \"Test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU1OTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozODo1MFrOGiyM8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozODo1MFrOGiyM8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNzI4MQ==", "bodyText": "I know it is maybe silly, but can you assert not null first, then do the merge and check again?\nSame with all the other tests in this class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439127281", "createdAt": "2020-06-11T23:38:50Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "diffHunk": "@@ -56,4 +57,47 @@ public void GIVEN_tlog_with_ignored_namespace_WHEN_tlog_merged_to_config_with_no\n         assertEquals(\"TLogValue\", config.lookup(SERVICES_NAMESPACE_TOPIC, \"YellowSignal\",\n                                                 SKIP_MERGE_NAMESPACE_KEY, \"testTopic\").getOnce());\n     }\n+\n+    @Test\n+    public void GIVEN_tlog_WHEN_tlog_merged_to_config_with_forced_timestamp_THEN_topic_is_removed() throws Exception {\n+        // Create this topic with temp value\n+        config.lookup(SERVICES_NAMESPACE_TOPIC, \"YellowSignal\",\n+                      \"lifecycle\", \"shutdown\").withNewerValue(Long.MAX_VALUE, \"Test\");\n+        Path tlogPath = Paths.get(ConfigurationReaderTest.class.getResource(\"test.tlog\").toURI());\n+        ConfigurationReader.mergeTlogIntoConfig(config, tlogPath, true, null);\n+\n+        assertNull(config.find(SERVICES_NAMESPACE_TOPIC, \"YellowSignal\", \"lifecycle\", \"shutdown\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwMjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNDowM1rOGjN9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo0ODoxNFrOGkIa8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjAyOQ==", "bodyText": "Why do we clear parent node watchers here?\nHow is Topics removed? Do we remove all its children first?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439582029", "createdAt": "2020-06-12T18:34:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzOTcwOQ==", "bodyText": "It's cleaning 'this' node watcher, not parent node. Updated to remove child.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440339709", "createdAt": "2020-06-15T17:39:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjAyOQ=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MDI2Ng==", "bodyText": "Topic is removed by removing from parent's children and remove all watchers. Then this topic will be garbage collected", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440340266", "createdAt": "2020-06-15T17:40:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjAyOQ=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTQwMQ==", "bodyText": "Why clear the watchers at all? This node is going away, so it should all be GC'd", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440435401", "createdAt": "2020-06-15T20:43:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjAyOQ=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzOTg5MQ==", "bodyText": "I still don't understand your answer to either of the questions. Will try to follow up offline directly.\n\nWhy do we clear parent node watchers here?\nHow is Topics removed? Do we remove all its children first?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440539891", "createdAt": "2020-06-16T01:48:14Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -250,27 +250,34 @@ public void deepForEachTopic(Consumer<Topic> f) {\n      * @param n node to remove\n      */\n     public void remove(Node n) {\n-        if (!children.remove(n.getName(), n)) {\n-            logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n-                    .kv(\"childNode\", n.getName()).log();\n-        }\n-        n.fire(WhatHappened.removed);\n-        childChanged(WhatHappened.childRemoved, n);\n+        context.runOnPublishQueue(() -> {\n+            if (!children.remove(n.getName(), n)) {\n+                logger.atError(\"config-node-child-remove-error\").kv(\"thisNode\", toString())\n+                        .kv(\"childNode\", n.getName()).log();\n+            }\n+            n.fire(WhatHappened.removed);\n+            childChanged(WhatHappened.childRemoved, n);\n+        });\n     }\n \n     protected void childChanged(WhatHappened what, Node child) {\n         logger.atDebug().setEventType(\"config-node-child-update\").addKeyValue(\"configNode\", getFullName())\n                 .addKeyValue(\"reason\", what.name()).log();\n-        if (watchers != null) {\n-            for (Watcher s : watchers) {\n-                if (s instanceof ChildChanged) {\n-                    ((ChildChanged) s).childChanged(what, child);\n-                }\n-                // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+\n+        for (Watcher s : watchers) {\n+            if (s instanceof ChildChanged) {\n+                ((ChildChanged) s).childChanged(what, child);\n             }\n+            // TODO: detect if a subscriber fails. Possibly unsubscribe it if the fault is persistent\n+        }\n+\n+        if (what.equals(WhatHappened.removed)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjAyOQ=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQyMDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MTowMFrOGjOI8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzo0Mzo0NFrOGj8U3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTAwOQ==", "bodyText": "Do we still plan to set null and keep the subscribers? I'm asking about the deployment rollback scenario.\nIt seems most cases the only subscriber is only added when a service is initialized. This may be a good reason that we don't have to persist subscribers. Is it safe to assume this is always the case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439585009", "createdAt": "2020-06-12T18:41:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,8 +118,19 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    /**\n+     * Remove with timestamp check.\n+     * @param timestamp timestamp\n+     */\n+    public void remove(long timestamp) {\n+        if (timestamp < this.modtime) {\n+            return;\n+        }\n+        remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM0MTcyNg==", "bodyText": "You can achieve the 'set null and keep subscriber' by calling WithNewerValue(time, null, forcedTimestamp=True) . No need to invoke remove()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440341726", "createdAt": "2020-06-15T17:43:44Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -118,8 +118,19 @@ public synchronized Topic withNewerValue(long proposedModtime, final Object prop\n         return this;\n     }\n \n+    /**\n+     * Remove with timestamp check.\n+     * @param timestamp timestamp\n+     */\n+    public void remove(long timestamp) {\n+        if (timestamp < this.modtime) {\n+            return;\n+        }\n+        remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTAwOQ=="}, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQyNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Tlogline.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MzowOFrOGjOMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MzowOFrOGjOMlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTk0Mw==", "bodyText": "+1 on the refactor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439585943", "createdAt": "2020-06-12T18:43:08Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/Tlogline.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.aws.iot.evergreen.config;\n+\n+import com.aws.iot.evergreen.util.Coerce;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+import static com.aws.iot.evergreen.util.Utils.appendLong;\n+import static com.aws.iot.evergreen.util.Utils.parseLong;\n+\n+@AllArgsConstructor\n+@Getter\n+class Tlogline {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQ1NjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1Mzo1MlrOGjOfTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1Mzo1MlrOGjOfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MDczNQ==", "bodyText": "nit: can we use the javadoc of mergeTlogIntoConfig which has more info?\nmergeTlogIntoConfig should also be renamed to mergeTLogInto as a function overload", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r439590735", "createdAt": "2020-06-12T18:53:52Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -4,48 +4,67 @@\n package com.aws.iot.evergreen.config;\n \n import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.Reader;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.Iterator;\n import java.util.function.Predicate;\n \n-import static com.aws.iot.evergreen.util.Coerce.toObject;\n-import static com.aws.iot.evergreen.util.Utils.parseLong;\n-\n public final class ConfigurationReader {\n-    private static final java.util.regex.Pattern logLine =\n-            java.util.regex.Pattern.compile(\"([0-9]+),([^,]*),([^\\n]*)\\n*\");\n     private static final java.util.regex.Pattern seperator = java.util.regex.Pattern.compile(\"[./] *\");\n+    private static final Logger logger = LogManager.getLogger(Configuration.class);\n \n     private ConfigurationReader() {\n     }\n \n     /**\n      * Merge the given transaction log into the given configuration.\n      *\n-     * @param c  configuration to merge into\n+     * @param config  configuration to merge into\n      * @param r0 reader of the transaction log to read from\n+     * @param forceTimestamp forceTimestamp\n+     * @param mergeCondition mergeCondition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4493333a239db3f6f1e7d73e0e88553b5dd004b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDA1MDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1NDo0NFrOGkCZNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMToyODoxMVrOGkDYkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE0MA==", "bodyText": "why don't you notify the parents here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440441140", "createdAt": "2020-06-15T20:54:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -129,8 +140,14 @@ public void fire(WhatHappened what) {\n                 }\n             }\n         }\n+\n+        if (WhatHappened.removed.equals(what)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d23ea24ff2c294369f8790b00ed1751e843183"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1NzM2MQ==", "bodyText": "Parents are already notified in Topics.remove()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440457361", "createdAt": "2020-06-15T21:28:11Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -129,8 +140,14 @@ public void fire(WhatHappened what) {\n                 }\n             }\n         }\n+\n+        if (WhatHappened.removed.equals(what)) {\n+            watchers.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTE0MA=="}, "originalCommit": {"oid": "a9d23ea24ff2c294369f8790b00ed1751e843183"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDA1NTkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo1NjoxNVrOGkCcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzozODowNlrOGkGO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTg5Ng==", "bodyText": "use asyncAssertOnBiConsumer to ensure that it is only called exactly as many times as you expect and with the precise what that you expect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440441896", "createdAt": "2020-06-15T20:56:15Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -182,4 +183,63 @@ public void GIVEN_config_with_subscribers_WHEN_topic_updated_THEN_subscribers_no\n         assertTrue(childChangedCorrectly.await(100, TimeUnit.MILLISECONDS));\n     }\n \n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_removed_THEN_subscribers_notified() {\n+        Topic testTopic = config.lookup(\"a\", \"b\", \"c\");\n+        AtomicInteger childNotified = new AtomicInteger(0);\n+        testTopic.subscribe((what, t) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d23ea24ff2c294369f8790b00ed1751e843183"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwMjQ2Mg==", "bodyText": "Tried and realized Subscriber interface isn't BiConsumer. I don't want to change the subscriber interface right now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440502462", "createdAt": "2020-06-15T23:33:02Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -182,4 +183,63 @@ public void GIVEN_config_with_subscribers_WHEN_topic_updated_THEN_subscribers_no\n         assertTrue(childChangedCorrectly.await(100, TimeUnit.MILLISECONDS));\n     }\n \n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_removed_THEN_subscribers_notified() {\n+        Topic testTopic = config.lookup(\"a\", \"b\", \"c\");\n+        AtomicInteger childNotified = new AtomicInteger(0);\n+        testTopic.subscribe((what, t) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTg5Ng=="}, "originalCommit": {"oid": "a9d23ea24ff2c294369f8790b00ed1751e843183"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNDA0OQ==", "bodyText": "ChildChanged is indeed a BiConsumer and you can cast the consumer to the childchanged, this should work.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/235#discussion_r440504049", "createdAt": "2020-06-15T23:38:06Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -182,4 +183,63 @@ public void GIVEN_config_with_subscribers_WHEN_topic_updated_THEN_subscribers_no\n         assertTrue(childChangedCorrectly.await(100, TimeUnit.MILLISECONDS));\n     }\n \n+    @Test\n+    public void GIVEN_config_with_subscribers_WHEN_topic_removed_THEN_subscribers_notified() {\n+        Topic testTopic = config.lookup(\"a\", \"b\", \"c\");\n+        AtomicInteger childNotified = new AtomicInteger(0);\n+        testTopic.subscribe((what, t) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTg5Ng=="}, "originalCommit": {"oid": "a9d23ea24ff2c294369f8790b00ed1751e843183"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4687, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}