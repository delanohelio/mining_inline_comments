{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQzMDQ3", "number": 271, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MjoyNFrOECYrxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzowOFrOECqDEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3MDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MjoyNFrOGez4nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MjoyNFrOGez4nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDU0MA==", "bodyText": "this should probably be debug.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r434960540", "createdAt": "2020-06-04T02:42:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -160,6 +160,7 @@ private PackageRecipe findRecipeDownloadIfNotExisted(PackageIdentifier packageId\n         Optional<PackageRecipe> packageOptional = Optional.empty();\n         try {\n             packageOptional = packageStore.findPackageRecipe(packageIdentifier);\n+            logger.atInfo().kv(\"component\", packageIdentifier).log(\"Loaded from local component store\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3MDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MjozMlrOGez4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0MjozMlrOGez4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDU2Ng==", "bodyText": "maybe debug", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r434960566", "createdAt": "2020-06-04T02:42:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -168,6 +169,7 @@ private PackageRecipe findRecipeDownloadIfNotExisted(PackageIdentifier packageId\n         }\n         PackageRecipe packageRecipe = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n         packageStore.savePackageRecipe(packageRecipe);\n+        logger.atInfo().kv(\"component\", packageIdentifier).log(\"Downloaded from component service\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTM3MjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjo0Mzo1NFrOGez6IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0MDo1NVrOGfaYrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDkyOQ==", "bodyText": "why this change?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r434960929", "createdAt": "2020-06-04T02:43:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -153,9 +153,12 @@ public Semver getVersion() {\n                                     + \"should have a property map, but actually: %s\", name, entry.getValue()));\n                 }\n                 Map<String, String> propMap = (Map<String, String>) value;\n-                String versionRequirements = \"\";\n+                String versionRequirements = \"*\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MTM0Mw==", "bodyText": "I think it might be better to have a explicit default value here (or somewhere else) to match all versions if version requirements are not provided.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r435591343", "createdAt": "2020-06-04T22:40:55Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -153,9 +153,12 @@ public Semver getVersion() {\n                                     + \"should have a property map, but actually: %s\", name, entry.getValue()));\n                 }\n                 Map<String, String> propMap = (Map<String, String>) value;\n-                String versionRequirements = \"\";\n+                String versionRequirements = \"*\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2MDkyOQ=="}, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjIxNTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxNzowOFrOGfP7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxODozNlrOGfSJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDAyMg==", "bodyText": "Is it possible that multiple jobs have the same queueAt timestamp? If so, L587 will clear all of them?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r435420022", "createdAt": "2020-06-04T17:17:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -569,4 +569,30 @@ protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent>\n         subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n         logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n     }\n+\n+    private static class LatestQueuedJobs {\n+        private Instant lastQueueAt = Instant.EPOCH;\n+        private final Set<String> jobIds = new HashSet<>();\n+\n+        /**\n+         * Track IoT jobs with the latest timestamp.\n+         *\n+         * @param queueAt QueueAt timestamp in IoT Job Execution Data\n+         * @param jobId IoT job ID\n+         * @return true if IoT job with the given ID is a new job yet to be processed, false otherwise\n+         */\n+        public synchronized boolean addIfAbsent(Instant queueAt, String jobId) {\n+            if (queueAt.isAfter(lastQueueAt)) {\n+                lastQueueAt = queueAt;\n+                jobIds.clear();\n+                jobIds.add(jobId);\n+                return true;\n+            }\n+            if (queueAt.isBefore(lastQueueAt) || jobIds.contains(jobId)) {\n+                return false;\n+            }\n+            jobIds.add(jobId);\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NjM1OQ==", "bodyText": "This is a possible scenario but the above code should be able to handle that. Second job with same timestamp should not reach L587", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/271#discussion_r435456359", "createdAt": "2020-06-04T18:18:36Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -569,4 +569,30 @@ protected void subscribeToEventNotifications(Consumer<JobExecutionsChangedEvent>\n         subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n         logger.atInfo().log(\"Subscribed to deployment job event notifications.\");\n     }\n+\n+    private static class LatestQueuedJobs {\n+        private Instant lastQueueAt = Instant.EPOCH;\n+        private final Set<String> jobIds = new HashSet<>();\n+\n+        /**\n+         * Track IoT jobs with the latest timestamp.\n+         *\n+         * @param queueAt QueueAt timestamp in IoT Job Execution Data\n+         * @param jobId IoT job ID\n+         * @return true if IoT job with the given ID is a new job yet to be processed, false otherwise\n+         */\n+        public synchronized boolean addIfAbsent(Instant queueAt, String jobId) {\n+            if (queueAt.isAfter(lastQueueAt)) {\n+                lastQueueAt = queueAt;\n+                jobIds.clear();\n+                jobIds.add(jobId);\n+                return true;\n+            }\n+            if (queueAt.isBefore(lastQueueAt) || jobIds.contains(jobId)) {\n+                return false;\n+            }\n+            jobIds.add(jobId);\n+            return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyMDAyMg=="}, "originalCommit": {"oid": "1f02681ffdc28d2ece550e65a01bb7db55d30f5c"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4772, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}