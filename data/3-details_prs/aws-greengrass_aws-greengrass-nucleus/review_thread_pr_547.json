{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjY2MDU1", "number": 547, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMToyN1rOEvgLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowMDoxOVrOEwc5Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ1Nzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMToyN1rOHkhgVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTo1OTozMlrOHlFVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTczMg==", "bodyText": "nit: spelling mistake here: restartNucleusOnNucleusConfigChange", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508059732", "createdAt": "2020-10-19T21:01:27Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -265,6 +265,20 @@ public int bootstrap() throws InterruptedException, TimeoutException {\n         return NO_OP;\n     }\n \n+    /**\n+     * Check if the proposed Nucleus config needs Nucleus to be restarted. Deployment workflow ill call this to decide\n+     * if nucleus restart is needed. Default is false, Greengrass services should override this method to check if\n+     * specific nucleus config keys have changed and if that should need a restart.\n+     *\n+     * @param newNucleusConfig new nucleus component config for the update\n+     * @return true if the proposed nucleus config should cause nucleus restart\n+     */\n+    public boolean restartNucleuslOnNucleusConfigChange(Map<String, Object> newNucleusConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjk0NQ==", "bodyText": "sorry for jumping around - I'm moving the conversation there so it is easier to reply\n\n\nWe want to store a \"default\" user/group to run with as part of the nucleus configuration in DeviceConfiguration (see #537 )\nWhen this default changes, ideally only the services that are running with the default user/group would need to be restarted.\nI assume this would still be possible by having the GenericExternalService just listen for the config changes to the nucleus and not require to use this method?\nOr do we take the position that anytime the nucleus config changes, if you need to restart then everything should restart?\n\nIf you reuse what this PR does then it will end up restarting everything, but that's not ideal like you said.\nIt's possible to have GenericExternalService listen to the user/group config independently like you also said, but for that we would want to confirm that a bad config for user/group can fail the deployment and execute rollback. Let me know if you find that the change in this PR needs to be made more generic to handle that\n\nWhere would validation of the nucleus config change happen? For instance, if we change the default user, it needs to be validated see that the username exists on the system. I wouldn't want every external service to have to validate that change. Also, right now this is limited to internal services so the external services wouldn't even get notified.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508236945", "createdAt": "2020-10-20T06:23:09Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -265,6 +265,20 @@ public int bootstrap() throws InterruptedException, TimeoutException {\n         return NO_OP;\n     }\n \n+    /**\n+     * Check if the proposed Nucleus config needs Nucleus to be restarted. Deployment workflow ill call this to decide\n+     * if nucleus restart is needed. Default is false, Greengrass services should override this method to check if\n+     * specific nucleus config keys have changed and if that should need a restart.\n+     *\n+     * @param newNucleusConfig new nucleus component config for the update\n+     * @return true if the proposed nucleus config should cause nucleus restart\n+     */\n+    public boolean restartNucleuslOnNucleusConfigChange(Map<String, Object> newNucleusConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTczMg=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0MDkxMA==", "bodyText": "I haven't given it a lot of thought yet but was thinking this method can throw an exception if the changed nucleus config is invalid, I have a TODO for that below, so any builtin service can check - 1) if the config it's interested is changing value 2) if the changed value is valid , if invalid throw 3) if the changed value is valid, return if nucleus restart is needed. Another way to validate would be extend this validator  to invoke a validate method for builtin services that works with the nucleus component config which will also preemptively fail deployment. Either way the actual validation/evaluation logic lives in the appropriate builtin service's validate / restartNucleuslOnNucleusConfigChange method", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508640910", "createdAt": "2020-10-20T15:54:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -265,6 +265,20 @@ public int bootstrap() throws InterruptedException, TimeoutException {\n         return NO_OP;\n     }\n \n+    /**\n+     * Check if the proposed Nucleus config needs Nucleus to be restarted. Deployment workflow ill call this to decide\n+     * if nucleus restart is needed. Default is false, Greengrass services should override this method to check if\n+     * specific nucleus config keys have changed and if that should need a restart.\n+     *\n+     * @param newNucleusConfig new nucleus component config for the update\n+     * @return true if the proposed nucleus config should cause nucleus restart\n+     */\n+    public boolean restartNucleuslOnNucleusConfigChange(Map<String, Object> newNucleusConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTczMg=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NjcxNQ==", "bodyText": "I know that there is configuration in the DeviceConfiguration that probably doesn't fall clearly in any builtin service's ownership, for example - deployment service can own deployment polling frequency config and authorization service can check auth policies when we add them in future but who checks more generic config like region/default user-group etc, so for that we probably need to make a best effort in assigning that responsibility", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508646715", "createdAt": "2020-10-20T15:59:32Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -265,6 +265,20 @@ public int bootstrap() throws InterruptedException, TimeoutException {\n         return NO_OP;\n     }\n \n+    /**\n+     * Check if the proposed Nucleus config needs Nucleus to be restarted. Deployment workflow ill call this to decide\n+     * if nucleus restart is needed. Default is false, Greengrass services should override this method to check if\n+     * specific nucleus config keys have changed and if that should need a restart.\n+     *\n+     * @param newNucleusConfig new nucleus component config for the update\n+     * @return true if the proposed nucleus config should cause nucleus restart\n+     */\n+    public boolean restartNucleuslOnNucleusConfigChange(Map<String, Object> newNucleusConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTczMg=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ1OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMTo0OFrOHkhhAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowMTo0OFrOHkhhAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1OTkwNw==", "bodyText": "nit: workflow will", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508059907", "createdAt": "2020-10-19T21:01:48Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -265,6 +265,20 @@ public int bootstrap() throws InterruptedException, TimeoutException {\n         return NO_OP;\n     }\n \n+    /**\n+     * Check if the proposed Nucleus config needs Nucleus to be restarted. Deployment workflow ill call this to decide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mjg1NjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzozMDo1M1rOHklNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzo1OToxM1rOHklwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMDQzNg==", "bodyText": "What's the reasoning of adding a separate check instead of extending serviceBootstrapRequired? Is it to limit the restart option to builtins only?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508120436", "createdAt": "2020-10-19T23:30:53Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +116,40 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        if (bootstrapTaskStatusList.isEmpty()) {\n+            return nucleusConfigChangeNeedsRestart(newConfig);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private boolean nucleusConfigChangeNeedsRestart(Map<String, Object> deploymentConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyOTQzNA==", "bodyText": "I did want to keep this limited to builtin services but that's probably not a hard requirement. I saw that serviceBootstrapRequired is to determine if there's any bootstrap task supposed to run for a particular service or not right? I don't want to queue any service specific bootstrap task but want to only evaluate if the kernel restart is needed, I might be missing something though", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508129434", "createdAt": "2020-10-19T23:59:13Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +116,40 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        if (bootstrapTaskStatusList.isEmpty()) {\n+            return nucleusConfigChangeNeedsRestart(newConfig);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private boolean nucleusConfigChangeNeedsRestart(Map<String, Object> deploymentConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMDQzNg=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Mjg2MDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMzozMjozNlrOHklPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo0MzoxN1rOHl49ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMDk1Mw==", "bodyText": "curious, how many times will we try getting the config key for nucleus? Can this information be saved somewhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508120953", "createdAt": "2020-10-19T23:32:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +116,40 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        if (bootstrapTaskStatusList.isEmpty()) {\n+            return nucleusConfigChangeNeedsRestart(newConfig);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private boolean nucleusConfigChangeNeedsRestart(Map<String, Object> deploymentConfig) {\n+        boolean needsRestart = false;\n+        Map<String, Object> proposedNucleusConfig = getProposedNucleusConfig(deploymentConfig);\n+        for (GreengrassService s : kernel.orderedDependencies()) {\n+            // For now, only let builtin Greengrass services decide\n+            if (s.isBuiltin()) {\n+                needsRestart = needsRestart || s.restartNucleuslOnNucleusConfigChange(proposedNucleusConfig);\n+            }\n+        }\n+        return needsRestart;\n+    }\n+\n+    private Map<String, Object> getProposedNucleusConfig(Map<String, Object> deploymentConfig) {\n+        for (Map.Entry<String, Object> serviceConfig : deploymentConfig.entrySet()) {\n+            if (serviceConfig instanceof Map) {\n+                Map<String, Object> serviceConfigMap = (Map<String, Object>) serviceConfig;\n+                String componentType = Coerce.toString(serviceConfigMap.get(SERVICE_TYPE_TOPIC_KEY));\n+                Object componentConfiguration = serviceConfigMap.get(KernelConfigResolver.CONFIGURATION_CONFIG_KEY);\n+                // TODO : Use constant after rebasing on with PR 513\n+                //  And use enum from common component model when the new component type\n+                //  is available in common component model\n+                if (\"aws.greengrass.nucleus\".equals(componentType) && componentConfiguration instanceof Map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyODI2OQ==", "bodyText": "This is for going over the map of service config for deployment and finding out which component is the nucleus component and getting its config, BootstrapManager::isBootstrapRequired method itself should only be called once per deployment right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r508128269", "createdAt": "2020-10-19T23:55:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +116,40 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        if (bootstrapTaskStatusList.isEmpty()) {\n+            return nucleusConfigChangeNeedsRestart(newConfig);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private boolean nucleusConfigChangeNeedsRestart(Map<String, Object> deploymentConfig) {\n+        boolean needsRestart = false;\n+        Map<String, Object> proposedNucleusConfig = getProposedNucleusConfig(deploymentConfig);\n+        for (GreengrassService s : kernel.orderedDependencies()) {\n+            // For now, only let builtin Greengrass services decide\n+            if (s.isBuiltin()) {\n+                needsRestart = needsRestart || s.restartNucleuslOnNucleusConfigChange(proposedNucleusConfig);\n+            }\n+        }\n+        return needsRestart;\n+    }\n+\n+    private Map<String, Object> getProposedNucleusConfig(Map<String, Object> deploymentConfig) {\n+        for (Map.Entry<String, Object> serviceConfig : deploymentConfig.entrySet()) {\n+            if (serviceConfig instanceof Map) {\n+                Map<String, Object> serviceConfigMap = (Map<String, Object>) serviceConfig;\n+                String componentType = Coerce.toString(serviceConfigMap.get(SERVICE_TYPE_TOPIC_KEY));\n+                Object componentConfiguration = serviceConfigMap.get(KernelConfigResolver.CONFIGURATION_CONFIG_KEY);\n+                // TODO : Use constant after rebasing on with PR 513\n+                //  And use enum from common component model when the new component type\n+                //  is available in common component model\n+                if (\"aws.greengrass.nucleus\".equals(componentType) && componentConfiguration instanceof Map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMDk1Mw=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ5MjU4MQ==", "bodyText": "Yes. It's called once per deployment", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r509492581", "createdAt": "2020-10-21T17:43:17Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +116,40 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        if (bootstrapTaskStatusList.isEmpty()) {\n+            return nucleusConfigChangeNeedsRestart(newConfig);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private boolean nucleusConfigChangeNeedsRestart(Map<String, Object> deploymentConfig) {\n+        boolean needsRestart = false;\n+        Map<String, Object> proposedNucleusConfig = getProposedNucleusConfig(deploymentConfig);\n+        for (GreengrassService s : kernel.orderedDependencies()) {\n+            // For now, only let builtin Greengrass services decide\n+            if (s.isBuiltin()) {\n+                needsRestart = needsRestart || s.restartNucleuslOnNucleusConfigChange(proposedNucleusConfig);\n+            }\n+        }\n+        return needsRestart;\n+    }\n+\n+    private Map<String, Object> getProposedNucleusConfig(Map<String, Object> deploymentConfig) {\n+        for (Map.Entry<String, Object> serviceConfig : deploymentConfig.entrySet()) {\n+            if (serviceConfig instanceof Map) {\n+                Map<String, Object> serviceConfigMap = (Map<String, Object>) serviceConfig;\n+                String componentType = Coerce.toString(serviceConfigMap.get(SERVICE_TYPE_TOPIC_KEY));\n+                Object componentConfiguration = serviceConfigMap.get(KernelConfigResolver.CONFIGURATION_CONFIG_KEY);\n+                // TODO : Use constant after rebasing on with PR 513\n+                //  And use enum from common component model when the new component type\n+                //  is available in common component model\n+                if (\"aws.greengrass.nucleus\".equals(componentType) && componentConfiguration instanceof Map) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEyMDk1Mw=="}, "originalCommit": {"oid": "88c709e228f0f63b4bf83efad1267895c1de80e2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTcyMzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NjoyMFrOHl6g4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo1NjoyMFrOHl6g4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUxODA1MA==", "bodyText": "nit on the comment. Right now we execute bootstrap tasks one by one, and then restart/reboot/do nothing, based on the return code. When the no more bootstrap tasks, we restart once regardless of the return code of last task. So we don't restart nucleus explicitly for nucleus config change, and we also don't consolidate the restart to once.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r509518050", "createdAt": "2020-10-21T17:56:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -88,6 +95,11 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n                     \"No bootstrap tasks found: Deployment configuration is missing or has no service changes\");\n             return false;\n         }\n+\n+        // Validate nucleus config early, if it's valid, still proceed with evaluating if any bootstrap tasks\n+        // are needed such that we only need to restart nucleus once for all changes\n+        final boolean nucleusConfigValidAndNeedsRestart = nucleusConfigValidAndNeedsRestart(newConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca47aaf4816f215fcd7ca17870434ab6429771e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjM5NzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1OTozMVrOHmBmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1OTozMVrOHmBmqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNDIxNg==", "bodyText": "nit: have a static string for this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r509634216", "createdAt": "2020-10-21T19:59:31Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -112,7 +124,37 @@ public boolean isBootstrapRequired(Map<String, Object> newConfig) throws Service\n         logger.atInfo().kv(\"list\", dependencyFound).log(\"Found a list of bootstrap tasks in dependency order\");\n         dependencyFound.forEach(name -> bootstrapTaskStatusList.add(new BootstrapTaskStatus(name)));\n \n-        return !bootstrapTaskStatusList.isEmpty();\n+        return nucleusConfigValidAndNeedsRestart || !bootstrapTaskStatusList.isEmpty();\n+    }\n+\n+    private boolean nucleusConfigValidAndNeedsRestart(Map<String, Object> deploymentConfig)\n+            throws ComponentConfigurationValidationException {\n+        boolean needsRestart = false;\n+        Map<String, Object> proposedNucleusConfig = getProposedNucleusConfig(deploymentConfig);\n+        for (GreengrassService s : kernel.orderedDependencies()) {\n+            // For now, only let builtin Greengrass services decide\n+            if (s.isBuiltin()) {\n+                needsRestart = needsRestart || s.restartNucleuslOnNucleusConfigChange(proposedNucleusConfig);\n+            }\n+        }\n+        return needsRestart;\n+    }\n+\n+    private Map<String, Object> getProposedNucleusConfig(Map<String, Object> deploymentConfig) {\n+        for (Map.Entry<String, Object> serviceConfig : deploymentConfig.entrySet()) {\n+            if (serviceConfig instanceof Map) {\n+                Map<String, Object> serviceConfigMap = (Map<String, Object>) serviceConfig;\n+                String componentType = Coerce.toString(serviceConfigMap.get(SERVICE_TYPE_TOPIC_KEY));\n+                Object componentConfiguration = serviceConfigMap.get(KernelConfigResolver.CONFIGURATION_CONFIG_KEY);\n+                // TODO : Use constant after rebasing on with PR 513\n+                //  And use enum from common component model when the new component type\n+                //  is available in common component model\n+                if (\"aws.greengrass.nucleus\".equals(componentType) && componentConfiguration instanceof Map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca47aaf4816f215fcd7ca17870434ab6429771e"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjQwNDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/exceptions/ComponentConfigurationValidationException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowMDoxOVrOHmBrqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowMDoxOVrOHmBrqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYzNTQ5Ng==", "bodyText": "nit: add License header.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/547#discussion_r509635496", "createdAt": "2020-10-21T20:00:19Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/greengrass/deployment/exceptions/ComponentConfigurationValidationException.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.aws.greengrass.deployment.exceptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca47aaf4816f215fcd7ca17870434ab6429771e"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 344, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}