{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzk2MjE1", "number": 34, "title": "Server-side framework implementation for Service Discovery", "bodyText": "Issue #, if available:\nAdds basic skeleton for Service Discovery's server implementation.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-01-16T00:14:43Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34", "merged": true, "mergeCommit": {"oid": "73f78a978a7eb259d1c1906b5462fa322367ec9c"}, "closed": true, "closedAt": "2020-01-17T16:54:15Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6wkp6gH2gAyMzYzMzk2MjE1OmEyZDkwMGYwOTVhM2NmYjU1MDU1MzBjYzRhNmIyMTZiZjBlNDkyZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7EOnrgFqTM0NDMxNDQ1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "committedDate": "2020-01-16T02:18:01Z", "message": "Server-side framework implementation for Service Discovery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "331380713218436fe861e90fd995fe9083f355ea", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/331380713218436fe861e90fd995fe9083f355ea", "committedDate": "2020-01-16T00:15:07Z", "message": "Merge branch 'master' into service_discovery"}, "afterCommit": {"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a2d900f095a3cfb5505530cc4a6b216bf0e492f1", "committedDate": "2020-01-16T02:18:01Z", "message": "Server-side framework implementation for Service Discovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNzAxNzQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#pullrequestreview-343701741", "createdAt": "2020-01-16T06:49:12Z", "commit": {"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo0OToxMlrOFePe3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjo0OToxMlrOFePe3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1NTI2MQ==", "bodyText": "ABC? other wise looks good", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#discussion_r367255261", "createdAt": "2020-01-16T06:49:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/ServiceDiscoveryService.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.handler.MessageDispatcher;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.LookupResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.RegisterResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.RemoveResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.Resource;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscoveryResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscoveryRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.ServiceDiscovery.UpdateResourceRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.SendAndReceiveIPCUtil;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.util.Log;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import javax.inject.Inject;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import static com.aws.iot.evergreen.ipc.services.ServiceDiscovery.ServiceDiscovery.SERVICE_DISCOVERY_NAME;\n+import static com.aws.iot.evergreen.util.Log.Level;\n+\n+\n+//TODO: see if this needs to be a GGService\n+@ImplementsService(name = \"servicediscovery\", autostart = true)\n+public class ServiceDiscoveryService extends EvergreenService {\n+    private ObjectMapper mapper = new CBORMapper();\n+\n+    //TODO: figure out how to inject the interface than the impl\n+    @Inject\n+    private MessageDispatcher messageDispatcher;\n+\n+    @Inject\n+    Log log;\n+\n+    public ServiceDiscoveryService(Topics c) {\n+        super(c);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        try {\n+            messageDispatcher.registerServiceCallback(SERVICE_DISCOVERY_NAME, this::handleMessage);\n+        } catch (IPCException e) {\n+            log.log(Level.Error,\"Error registering callback for service \"+ SERVICE_DISCOVERY_NAME);\n+        }\n+    }\n+\n+    public Message handleMessage(Message request) {\n+        // TODO: Input validation\n+\n+        try {\n+            GeneralRequest<Object, ServiceDiscoveryRequestTypes> obj = SendAndReceiveIPCUtil.decode(request, new TypeReference<GeneralRequest<Object, ServiceDiscoveryRequestTypes>>() {});\n+\n+            GeneralResponse<Object, ServiceDiscoveryResponseStatus> genResp = new GeneralResponse<>();\n+            switch (obj.type) {\n+                case lookup:\n+                    LookupResourceRequest lookup = mapper.convertValue(obj.request, LookupResourceRequest.class);\n+                    // Do lookup\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    genResp.response = new ArrayList<Resource>();\n+                    break;\n+                case remove:\n+                    RemoveResourceRequest remove = mapper.convertValue(obj.request, RemoveResourceRequest.class);\n+                    // Do remove\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    break;\n+                case update:\n+                    UpdateResourceRequest update = mapper.convertValue(obj.request, UpdateResourceRequest.class);\n+                    // Do update\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    break;\n+                case register:\n+                    RegisterResourceRequest register = mapper.convertValue(obj.request, RegisterResourceRequest.class);\n+                    // Do register\n+                    genResp.error = ServiceDiscoveryResponseStatus.Success;\n+                    Resource resource = new Resource();\n+                    resource.name = \"ABC\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d900f095a3cfb5505530cc4a6b216bf0e492f1"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b2d6e6428c4abbc7ecc6213a97a97d99f195795", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2b2d6e6428c4abbc7ecc6213a97a97d99f195795", "committedDate": "2020-01-16T18:40:58Z", "message": "Merge branch 'master' into service_discovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzE0NDUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/34#pullrequestreview-344314453", "createdAt": "2020-01-17T01:12:03Z", "commit": {"oid": "2b2d6e6428c4abbc7ecc6213a97a97d99f195795"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2436, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}