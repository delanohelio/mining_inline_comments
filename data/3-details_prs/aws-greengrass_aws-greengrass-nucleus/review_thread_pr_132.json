{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjQ4MzQ4", "number": 132, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNDowOVrODq-d1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0MjozOVrODrY-rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzkwMjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNDowOVrOF7DpZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjowNDowOFrOF7Jovg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA1NQ==", "bodyText": "Nit you could combine these two, if not then move the TODO from line 48 to line 53", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397470055", "createdAt": "2020-03-24T21:24:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2ODE5MA==", "bodyText": "This section got refactored for the change \"newRootPackages is used for both dependency resolver and config resolver\".", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397568190", "createdAt": "2020-03-25T02:04:08Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MDA1NQ=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzkxNTM0OnYy", "diffSide": "LEFT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToyNzo1N1rOF7Dw7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzoyNToxMVrOF7Gx9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MTk4MA==", "bodyText": "You've moved the business logic that this test tests to DependencyResolver class, shouldn't there be a corresponding test added to DependencyResolverTest as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397471980", "createdAt": "2020-03-24T21:27:57Z", "author": {"login": "shaguptashaikh"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()\n-            throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTM5Ng==", "bodyText": "Yes, removed to GIVEN_active_packages_WHEN_merge_in_packages_THEN_add_or_update_or_keep_or_delete_accordingly test in dependency resolver.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397521396", "createdAt": "2020-03-24T23:25:11Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()\n-            throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MTk4MA=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzk1MjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTozOTo0NlrOF7EH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoxMDowOFrOF7oDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg==", "bodyText": "Why don't you just compile newRootPackages once and pass to both dependency resolver and config resolver? Or use rootPackagesToRemove consistently?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397477852", "createdAt": "2020-03-24T21:39:46Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjAzMg==", "bodyText": "It's also not clear to me how default services will be handled. IMO it's noop in dependency resolution and parameter resolution, but they need to be included in the final dependency map.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397516032", "createdAt": "2020-03-24T23:09:47Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNjk1Mw==", "bodyText": "Could you also update the benchmark test here? https://github.com/aws/aws-greengrass-kernel/blob/master/src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java#L72 The benchmark does not need to test the removal case, so it should be straightforward to just update the existing function call.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397516953", "createdAt": "2020-03-24T23:12:26Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMDI2Nw==", "bodyText": "default dependencies are added as mains dependencies in kernel config resolver.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397520267", "createdAt": "2020-03-24T23:22:01Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzI1OQ==", "bodyText": "update: newRootPackages is used for both dependency resolver and config resolver", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397567259", "createdAt": "2020-03-25T02:00:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjUzMA==", "bodyText": "Updated benchmark tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398066530", "createdAt": "2020-03-25T18:10:08Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +44,28 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages to remove by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            Set<String> currentRootPackages = kernel.getMain().getDependencies().keySet().stream()\n+                    .filter((evergreenService) -> evergreenService instanceof GenericExternalService)\n+                    .map(EvergreenService::getName).collect(Collectors.toSet());\n+\n+            Set<String> rootPackagesToRemove = currentRootPackages.stream()\n+                    .filter(packageName -> !document.getRootPackages().contains(packageName))\n+                    .collect(Collectors.toSet());\n+\n+            List<PackageIdentifier> desiredPackages = dependencyResolver\n+                    .resolveDependencies(document, rootPackagesToRemove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3Nzg1Mg=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzk2NTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo0MzoyMFrOF7EPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTowNzoyNVrOF7qPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw==", "bodyText": "Doesn't this drop the original Service state value in the map?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397479757", "createdAt": "2020-03-24T21:43:20Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzU4Mw==", "bodyText": "No, there is no remove here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397567583", "createdAt": "2020-03-25T02:01:50Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MzE1OQ==", "bodyText": "I think what Hui is trying to point out is that since service dependencies actually are maintained in as a list of DependencyServiceName::RequiredDependencyState, you end up losing information about the required state for main service dependencies. That would apply to the earlier implementation as well but earlier it was easy to retain that information than it would be now if we were to make an incremental change to pass state information for dependencies", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397573159", "createdAt": "2020-03-25T02:23:35Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjQzMw==", "bodyText": "If you wait for Shirley's change then you can have access to richer information about the dependency (like if it is a default dependency) which is what you really need in this case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398076433", "createdAt": "2020-03-25T18:25:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NDczOQ==", "bodyText": "Yes, we need to make another pass in dependency resolution to handle default services. I will add a sim task for this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398094739", "createdAt": "2020-03-25T18:54:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEwMjQxOA==", "bodyText": "Could you clarify where you mean to have the state handled? in dependency resolver or config resolver, as part of that next pass?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398102418", "createdAt": "2020-03-25T19:07:25Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -135,19 +135,19 @@ private Object interpolate(Object configValue, Set<PackageParameter> packagePara\n \n \n     /*\n-     * Recompute main service dependencies for deployment.\n+     * Compute the config for main service\n      */\n-    private Map<Object, Object> getUpdatedMainConfig(Set<PackageIdentifier> rootPackagesToRemove,\n-                                                     DeploymentDocument document) {\n-        Set<String> kernelDependencies =\n-                kernel.getMain().getDependencies().keySet().stream().map(EvergreenService::getName)\n-                        .collect(Collectors.toSet());\n-        kernelDependencies\n-                .removeAll(rootPackagesToRemove.stream().map(PackageIdentifier::getName).collect(Collectors.toSet()));\n-        kernelDependencies.addAll(document.getRootPackages());\n-        Map<Object, Object> mainLifecycleMap = new HashMap<>();\n-        mainLifecycleMap.put(SERVICE_DEPENDENCIES_CONFIG_KEY, new ArrayList<>(kernelDependencies));\n-        return mainLifecycleMap;\n+    private Map<Object, Object> getMainConfig(Set<String> rootPackages) {\n+\n+        Map<Object, Object> mainServiceConfig = new HashMap<>();\n+        ArrayList<String> mainDependencies = new ArrayList<>(rootPackages);\n+        kernel.getMain().getDependencies().keySet().forEach(evergreenService -> {\n+            if (!(evergreenService instanceof GenericExternalService)) {\n+                mainDependencies.add(evergreenService.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3OTc1Nw=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzk3NDQwOnYy", "diffSide": "LEFT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo0NjoyM1rOF7EUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjowMzoxMFrOF7Jnrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTE0OQ==", "bodyText": "Why is this test case removed? Is the scenario tested elsewhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397481149", "createdAt": "2020-03-24T21:46:23Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTI5Mw==", "bodyText": "Yes, removed to GIVEN_active_packages_WHEN_merge_in_packages_THEN_add_or_update_or_keep_or_delete_accordingly test in dependency resolver.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397521293", "createdAt": "2020-03-24T23:24:50Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTE0OQ=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTc0OA==", "bodyText": "They one you mentioned is a unit test for a different component. I would rather be verbose here and have one test case for ConfigResolver as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397541748", "createdAt": "2020-03-25T00:27:45Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTE0OQ=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2NzkxOA==", "bodyText": "The remove functionality  was moved from ConfigResolver to dependency resolver. Hence the test case got moved to dependency resolver.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397567918", "createdAt": "2020-03-25T02:03:10Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -155,50 +152,6 @@ public void GIVEN_deployment_for_existing_package_WHEN_config_resolution_request\n                    dependencyListContains(\"main\", TEST_INPUT_PACKAGE_A, servicesConfig));\n     }\n \n-    @Test\n-    public void GIVEN_deployment_removes_root_package_WHEN_config_resolution_requested_THEN_remove_service()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTE0OQ=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA1NTYyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMzo0OFrOF7FGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoyNToxMFrOF7J9-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzgyOQ==", "bodyText": "These assertions won't work well when they fail. Use the hamcrest matchers, like equals or contains to make these work better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397493829", "createdAt": "2020-03-24T22:13:48Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -160,6 +165,49 @@ void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated\n         Log4jLogEventBuilder.removeGlobalListener(listener);\n     }\n \n+    /**\n+     * First deployment contains packages yellow and customerApp\n+     * Second deployment updates the root packages to yellow and red. Red is added, customerApp is removed\n+     * and no update for yellow\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(3)\n+    void GIVEN_services_running_WHEN_service_added_and_deleted_THEN_add_remove_service_accordingly()\n+            throws Exception {\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"CustomerAppAndYellowSignal.json\").toURI(), System.currentTimeMillis());\n+        result.get();\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        assertThat(\"Only contain main, YellowSignal, CustomerApp, Mosquitto and GreenSignal\", services.size() == 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MzYyNA==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397573624", "createdAt": "2020-03-25T02:25:10Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -160,6 +165,49 @@ void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated\n         Log4jLogEventBuilder.removeGlobalListener(listener);\n     }\n \n+    /**\n+     * First deployment contains packages yellow and customerApp\n+     * Second deployment updates the root packages to yellow and red. Red is added, customerApp is removed\n+     * and no update for yellow\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(3)\n+    void GIVEN_services_running_WHEN_service_added_and_deleted_THEN_add_remove_service_accordingly()\n+            throws Exception {\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"CustomerAppAndYellowSignal.json\").toURI(), System.currentTimeMillis());\n+        result.get();\n+        List<String> services = kernel.orderedDependencies().stream()\n+                .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        assertThat(\"Only contain main, YellowSignal, CustomerApp, Mosquitto and GreenSignal\", services.size() == 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzgyOQ=="}, "originalCommit": {"oid": "a1b1c822bdf792d18ffb8da04bb1bab9dc8b6259"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDU1ODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxMTowMlrOF7JvRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozMTo1OVrOF7L1hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2OTg2MQ==", "bodyText": "Is there a better name for this than newRootPackages? with you latest change, newRootPackages sounds a little ambiguous, for instance the first thing that comes to my mind is 'this must be any new top level packages the deployment is trying to add'", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397569861", "createdAt": "2020-03-25T02:11:02Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +45,18 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            List<String> newRootPackages = new ArrayList<>(document.getRootPackages());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3OTIyMg==", "bodyText": "Agree, any suggestions?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397579222", "createdAt": "2020-03-25T02:47:12Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +45,18 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            List<String> newRootPackages = new ArrayList<>(document.getRootPackages());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2OTg2MQ=="}, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNDIzMQ==", "bodyText": "renamed to rootPackages and updated the comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397604231", "createdAt": "2020-03-25T04:31:59Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -40,13 +45,18 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n         try {\n             logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE)\n                     .addKeyValue(\"deploymentId\", document.getDeploymentId()).log(\"Start deployment task\");\n-            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+\n+            // TODO: DA compute the root level packages by looking across root level packages\n+            //  of all groups, when multi group support is added.\n+            List<String> newRootPackages = new ArrayList<>(document.getRootPackages());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2OTg2MQ=="}, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDU3MDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjoxNzozOFrOF7J2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxNDoyNFrOF7LmXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTY3MQ==", "bodyText": "Nit- With your latest change, maybe getServiceVersion method doesn't need to return optional anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397571671", "createdAt": "2020-03-25T02:17:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -301,28 +303,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDM0OA==", "bodyText": "getPackageVersionIfActive also depends on getServiceVersion. Keeping the contract same for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r397600348", "createdAt": "2020-03-25T04:14:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -301,28 +303,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU3MTY3MQ=="}, "originalCommit": {"oid": "b17333ca2d3328157b5378f97be9f77641efc1c9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzczOTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyMTozMVrOF7og0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODozMjoxNVrOF7o7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NDA2Ng==", "bodyText": "Is this a future that you are geting? If so, we need to be careful about blocking calls like this with no timeout.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398074066", "createdAt": "2020-03-25T18:21:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4MDg3Mg==", "bodyText": "We are getting an optional, but under the circumstances that we are calling it, the optional will not be empty.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398080872", "createdAt": "2020-03-25T18:32:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n+        for (EvergreenService evergreenService : activeServices) {\n+            String serviceName = evergreenService.getName();\n+            // add version constraints for package not in deployment document but is active in device\n+            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+                String version = getServiceVersion(evergreenService).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NDA2Ng=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzc0NTk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyMzoxM1rOF7olCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODozNzoyNVrOF7pIDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTE0Ng==", "bodyText": "Why list vs set? If we don't need anything specific, how about just a Collection or even Iterable?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398075146", "createdAt": "2020-03-25T18:23:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -44,20 +45,19 @@\n      * transform it to a kernel config key-value pair.\n      *\n      * @param packagesToDeploy     package identifiers for resolved packages that are to be deployed\n-     * @param document             deployment document\n-     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @param document      deployment document\n+     * @param rootPackages  root level packages\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n     public Map<Object, Object> resolve(List<PackageIdentifier> packagesToDeploy, DeploymentDocument document,\n-                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+                                       List<String> rootPackages) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4NDEwOA==", "bodyText": "There is no difference between using set or list for rootPackages. We already compute the rootPackages as a list, so I changes the signature from set to list.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398084108", "createdAt": "2020-03-25T18:37:25Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -44,20 +45,19 @@\n      * transform it to a kernel config key-value pair.\n      *\n      * @param packagesToDeploy     package identifiers for resolved packages that are to be deployed\n-     * @param document             deployment document\n-     * @param rootPackagesToRemove top level packages that need to be removed as part of current deployment\n+     * @param document      deployment document\n+     * @param rootPackages  root level packages\n      * @return a kernel config map\n      * @throws InterruptedException when the running thread is interrupted\n      */\n     public Map<Object, Object> resolve(List<PackageIdentifier> packagesToDeploy, DeploymentDocument document,\n-                                       Set<PackageIdentifier> rootPackagesToRemove) throws InterruptedException {\n+                                       List<String> rootPackages) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTE0Ng=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzc1ODc3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyNjozOVrOF7otXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOToyMjoyNlrOF7qw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzI3OQ==", "bodyText": "For all these, if there are no root packages, why is it resolving anything? That seems incorrect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398077279", "createdAt": "2020-03-25T18:26:39Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -107,24 +113,24 @@ public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deplo\n         t.interrupt();\n         Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n         assertThat(thrown.getCause(), isA(RetryableDeploymentTaskFailureException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);\n         verify(mockPackageCache).preparePackages(anyList());\n-        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anySet());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anyList());\n         verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n     }\n \n     @Test\n     public void GIVEN_deploymentDocument_WHEN_resolve_kernel_config_interrupted_THEN_deploymentTask_aborted()\n             throws Exception {\n         when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n-        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anySet()))\n+        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anyList()))\n                 .thenThrow(new InterruptedException());\n \n         Exception thrown = assertThrows(RetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n         assertThat(thrown.getCause(), isA(InterruptedException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4NjQxMQ==", "bodyText": "DeploymentTaskTest do not verify how the resolution works, that is done in DependecyResolverTests. DeploymentTaskTest verifies if deployment task is aborted under various scenarios like:\nGIVEN_deploymentDocument_WHEN_resolveDependencies_with_conflicted_dependency_THEN_deploymentTask_aborted()\nGIVEN_deploymentDocument_WHEN_resolveDependencies_errored_THEN_deploymentTask_aborted()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398086411", "createdAt": "2020-03-25T18:41:04Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -107,24 +113,24 @@ public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deplo\n         t.interrupt();\n         Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n         assertThat(thrown.getCause(), isA(RetryableDeploymentTaskFailureException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);\n         verify(mockPackageCache).preparePackages(anyList());\n-        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anySet());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anyList());\n         verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n     }\n \n     @Test\n     public void GIVEN_deploymentDocument_WHEN_resolve_kernel_config_interrupted_THEN_deploymentTask_aborted()\n             throws Exception {\n         when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n-        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anySet()))\n+        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anyList()))\n                 .thenThrow(new InterruptedException());\n \n         Exception thrown = assertThrows(RetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n         assertThat(thrown.getCause(), isA(InterruptedException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzI3OQ=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MDQ0OA==", "bodyText": "+1. A real situation should be that rootPackages is a superset of those in deploymentDocument", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398090448", "createdAt": "2020-03-25T18:47:40Z", "author": {"login": "hui-yang"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -107,24 +113,24 @@ public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deplo\n         t.interrupt();\n         Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n         assertThat(thrown.getCause(), isA(RetryableDeploymentTaskFailureException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);\n         verify(mockPackageCache).preparePackages(anyList());\n-        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anySet());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anyList());\n         verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n     }\n \n     @Test\n     public void GIVEN_deploymentDocument_WHEN_resolve_kernel_config_interrupted_THEN_deploymentTask_aborted()\n             throws Exception {\n         when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n-        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anySet()))\n+        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anyList()))\n                 .thenThrow(new InterruptedException());\n \n         Exception thrown = assertThrows(RetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n         assertThat(thrown.getCause(), isA(InterruptedException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzI3OQ=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExMDk0Nw==", "bodyText": "The super set scenerio is tested in dependecyresolvertest GIVEN_active_packages_WHEN_merge_in_packages_THEN_add_or_update_or_keep_or_delete_accordingly", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398110947", "createdAt": "2020-03-25T19:22:26Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -107,24 +113,24 @@ public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deplo\n         t.interrupt();\n         Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n         assertThat(thrown.getCause(), isA(RetryableDeploymentTaskFailureException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);\n         verify(mockPackageCache).preparePackages(anyList());\n-        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anySet());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument), anyList());\n         verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n     }\n \n     @Test\n     public void GIVEN_deploymentDocument_WHEN_resolve_kernel_config_interrupted_THEN_deploymentTask_aborted()\n             throws Exception {\n         when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n-        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anySet()))\n+        when(mockKernelConfigResolver.resolve(anyList(), eq(deploymentDocument), anyList()))\n                 .thenThrow(new InterruptedException());\n \n         Exception thrown = assertThrows(RetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n         assertThat(thrown.getCause(), isA(InterruptedException.class));\n-        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument, Collections.EMPTY_LIST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NzI3OQ=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzk4Njk5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/CustomerAppAndYellowSignal.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOToyNzo0MFrOF7q9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDozNjo0N1rOF7tTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNDA1OA==", "bodyText": "nit: you don't have to add Mosquitto and GreenSignal here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398114058", "createdAt": "2020-03-25T19:27:40Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/CustomerAppAndYellowSignal.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"DeploymentId\": \"f7fe5b16-574a-11ea-82b4-0242ac130004\",\n+  \"RootPackages\": [\n+    \"CustomerApp\", \"YellowSignal\"\n+  ],\n+  \"Packages\": [\n+    {\n+      \"Name\": \"CustomerApp\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"Mosquitto\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"Mosquitto\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"GreenSignal\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"GreenSignal\",\n+      \"ResolvedVersion\": \"1.0.0\"\n+    },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1MjYzNg==", "bodyText": "removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398152636", "createdAt": "2020-03-25T20:36:47Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/CustomerAppAndYellowSignal.json", "diffHunk": "@@ -0,0 +1,35 @@\n+{\n+  \"DeploymentId\": \"f7fe5b16-574a-11ea-82b4-0242ac130004\",\n+  \"RootPackages\": [\n+    \"CustomerApp\", \"YellowSignal\"\n+  ],\n+  \"Packages\": [\n+    {\n+      \"Name\": \"CustomerApp\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"Mosquitto\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"Mosquitto\",\n+      \"ResolvedVersion\": \"1.0.0\",\n+      \"Dependencies\": [\n+        {\n+          \"Name\": \"GreenSignal\"\n+        }\n+      ]\n+    },\n+    {\n+      \"Name\": \"GreenSignal\",\n+      \"ResolvedVersion\": \"1.0.0\"\n+    },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNDA1OA=="}, "originalCommit": {"oid": "02925cd591c60588908e4ba64f5c829d6e6fb439"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODAxMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTozNDo1MVrOF7rM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDozNzoyNFrOF7tVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODEzMw==", "bodyText": "Instead of scanning all the active services in kernel, why don't we just check what package in rootPackagesToResolve doesn't have a pinned version in packageNameToVersionConstraints, and directly find out the package version?\nWe don't need document here at all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398118133", "createdAt": "2020-03-25T19:34:51Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91e1f69730e429f9378592271efd16170e90342"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1Mjk4MQ==", "bodyText": "Synced offline, removed document.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398152981", "createdAt": "2020-03-25T20:37:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -302,28 +304,24 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackages,\n-                                    Map<String, Map<String, String>> packageNameToVersionConstraints) {\n-        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n-        for (EvergreenService s: activeServices) {\n-            Optional<String> version = getServiceVersion(s);\n-            if (!version.isPresent()) {\n-                // Assume 1P services if version is not present. 1P services don't need resolution\n-                continue;\n-            }\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+                                         Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n-            String serviceName = s.getName();\n-            if (!rootPackages.contains(serviceName)) {\n-                // If the service package does not exist in root packages, still use the current version on the device\n-                rootPackages.add(serviceName);\n+        Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExODEzMw=="}, "originalCommit": {"oid": "a91e1f69730e429f9378592271efd16170e90342"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODI0NjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0Mjo0MFrOF7tguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0Mjo0MFrOF7tguQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1NTk2MQ==", "bodyText": "nit: .containsKey()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/132#discussion_r398155961", "createdAt": "2020-03-25T20:42:40Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -304,14 +304,15 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         return getServiceVersion(service);\n     }\n \n-    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve, DeploymentDocument document,\n+    private void mergeActiveRootPackages(Set<String> rootPackagesToResolve,\n                                          Map<String, Map<String, String>> packageNameToVersionConstraints) {\n \n         Set<EvergreenService> activeServices = kernel.getMain().getDependencies().keySet();\n         for (EvergreenService evergreenService : activeServices) {\n             String serviceName = evergreenService.getName();\n             // add version constraints for package not in deployment document but is active in device\n-            if (rootPackagesToResolve.contains(serviceName) && !document.getRootPackages().contains(serviceName)) {\n+            if (rootPackagesToResolve.contains(serviceName)\n+                    && !packageNameToVersionConstraints.keySet().contains(serviceName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d0d2a87333627a292e755d63fa13f34778f622"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4941, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}