{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTYyNjEw", "number": 240, "title": "First draft for token exchange service", "bodyText": "Issue #, if available:\nDescription of changes:\nFirst draft for Token Exchange Service\nWhy is this change necessary:\nToken Exchange Service (TES) is an evergreen service which lets components access AWS credentials in exchange for device certificates.\nHow was this change tested:\nUT for happy paths. Need to add integ tests and more negative tests.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-13T19:22:01Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240", "merged": true, "mergeCommit": {"oid": "cac25a1a2a5a0a90e615083af63da451c9f6ecea"}, "closed": true, "closedAt": "2020-05-15T03:52:30Z", "author": {"login": "prateek-y"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg9wRyAH2gAyNDE3NTYyNjEwOmM4MTY3ZWRlYTZhZDViMjlhNmM2ZDdmZmU0Mjc2MDhhMDQwNGZkNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchZdtyAFqTQxMjMyMjM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c8167edea6ad5b29a6c6d7ffe427608a0404fd55", "committedDate": "2020-05-13T19:08:36Z", "message": "First draft for token exchange service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjMwOTE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-411230919", "createdAt": "2020-05-13T19:24:27Z", "commit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToyNDoyOFrOGVAQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MzoxMVrOGVA3tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NzUxNA==", "bodyText": "nit: capitalize", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424677514", "createdAt": "2020-05-13T19:24:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODA1MQ==", "bodyText": "Is this listening to all interfaces or just the localhost? IMO it should just listen to localhost because off-box stuff shouldn't have any access to it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424678051", "createdAt": "2020-05-13T19:25:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {\n+        // TODO: validate port\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3ODkyMQ==", "bodyText": "Looks like you don't actually use DI for this, so just remove the @Inject and @Singleton.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424678921", "createdAt": "2020-05-13T19:27:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ==", "bodyText": "Why no executor? Can you add a comment explaining why we don't want one.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424679235", "createdAt": "2020-05-13T19:27:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {\n+        // TODO: validate port\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+    }\n+\n+    /**\n+     * Constructor for Unit testing.\n+     * @param port Http server port\n+     * @param credentialRequestHandler request handler for server requests\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port, HttpHandler credentialRequestHandler) throws IOException {\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+        this.credentialRequestHandler = credentialRequestHandler;\n+    }\n+\n+    @Override\n+    public void start() {\n+        httpImpl.createContext(URL, credentialRequestHandler);\n+        httpImpl.setExecutor(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MDc1Mg==", "bodyText": "Look at the preview of this file, because the formatting doesn't really make sense due to this line being split on 2 lines.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424680752", "createdAt": "2020-05-13T19:30:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/README.md", "diffHunk": "@@ -0,0 +1,10 @@\n+# TokenExchangeService is responsible for vending AWS credentials for device certificates, so that components running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTE5Mg==", "bodyText": "don't create your own logger. Use the logger from the EvergreenService.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424681192", "createdAt": "2020-05-13T19:31:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTY2Ng==", "bodyText": "setting the port isn't sufficient right? You need to restart the http server I'd assume.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424681666", "createdAt": "2020-05-13T19:32:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjA3MQ==", "bodyText": "What endpoint is this? We already have a mqtt endpoint configuration topic. If you can use that, then do. If it is a different endpoint, then that may be fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682071", "createdAt": "2020-05-13T19:32:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MjY5MA==", "bodyText": "return here, otherwise you'll report both errored and running.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682690", "createdAt": "2020-05-13T19:34:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4Mjk0MQ==", "bodyText": "How necessary is this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424682941", "createdAt": "2020-05-13T19:34:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);\n+        }\n+        reportState(State.RUNNING);\n+    }\n+\n+    @Override\n+    public void shutdown() {\n+        LOGGER.atInfo().log(\"TokenExchangeService is shutting down!\");\n+        if (server != null) {\n+            server.stop();\n+        }\n+        LOGGER.atInfo().log(\"Stopped Server at port {}\", port);\n+    }\n+\n+    public static class IotConnectionManagerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzI2Ng==", "bodyText": "Also extend with EGExtension", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683266", "createdAt": "2020-05-13T19:35:12Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/tes/CredentialRequestHandlerTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.OutputStream;\n+\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzQ2NQ==", "bodyText": "Also extend with EGExtension", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683465", "createdAt": "2020-05-13T19:35:38Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/tes/HttpServerImplTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.net.HttpURLConnection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.any;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MzkxNg==", "bodyText": "Also extend with EGExtension", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424683916", "createdAt": "2020-05-13T19:36:23Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/tes/IotCloudHelperTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NDU2Mw==", "bodyText": "Doesn't look like these files are used anywhere. If not, remove them. If they are used; we need to discuss because we should not be committing any creds.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424684563", "createdAt": "2020-05-13T19:37:31Z", "author": {"login": "MikeDombo"}, "path": "src/test/resources/com/aws/iot/evergreen/tes/root.ca", "diffHunk": "@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ==", "bodyText": "This is a bit scary to me. Is there no normal AWS SDK client that does this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424685805", "createdAt": "2020-05-13T19:39:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManagerOptions;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.SocketOptions;\n+import software.amazon.awssdk.crt.io.TlsContext;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.io.Closeable;\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class IotConnectionManager implements Closeable {\n+    // TODO: Move Iot related classes to a central location\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    // TODO: ALPN support\n+    private static final int IOT_PORT = 8443;\n+    // Max wait time for device to establish mTLS connection with IOT core\n+    private static final long TIMEOUT_FOR_CONNECTION_SETUP_SECONDS = (long) Duration.ofMinutes(1).getSeconds();\n+    private final String iotEndpoint;\n+    private final HttpClientConnectionManager connManager;\n+\n+    /**\n+     * Constructor.\n+     * @param iotEndpoint Iot cloud credentials endpoint for managing connections to.\n+     * @param deviceConfiguration Device configuration for getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    IotConnectionManager(final String iotEndpoint, final DeviceConfiguration deviceConfiguration)\n+        throws DeviceConfigurationException {\n+        this.iotEndpoint = iotEndpoint;\n+        this.connManager = initConnectionManager(deviceConfiguration);\n+    }\n+\n+    private HttpClientConnectionManager initConnectionManager(DeviceConfiguration deviceConfiguration)\n+            throws DeviceConfigurationException {\n+        final String certPath = deviceConfiguration.getCertificateFilePath();\n+        final String keyPath = deviceConfiguration.getPrivateKeyFilePath();\n+        final String caPath = deviceConfiguration.getRootCAFilePath();\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NjI1OA==", "bodyText": "dont put the {} here. The exception will be used and not interpolated into the string.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424686258", "createdAt": "2020-05-13T19:40:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();\n+\n+    /**\n+     * Sends Http request to Iot Cloud.\n+     * @param connManager underlying connection manager to use for sending requests\n+     * @param path Http url to query\n+     * @param verb Http verb for the request\n+     * @return Http response corresponding to http request for path\n+     * @throws AWSIotException when unable to send the request successfully\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public String sendHttpRequest(final IotConnectionManager connManager,\n+                                  final String path,\n+                                  final String verb) throws AWSIotException {\n+        final HttpHeader[] headers = {\n+                new HttpHeader(\"host\", connManager.getHost())\n+        };\n+        final HttpRequest request = new HttpRequest(verb, path, headers, null);\n+        final HttpClientConnection conn = connManager.getConnection();\n+        // TODO: Make it exponential backoff, create backoff util for common use.\n+        String response = \"\";\n+        int numAttempts = 0;\n+        do {\n+            numAttempts++;\n+            response = getHttpResponse(conn, request);\n+        } while (numAttempts < 1);\n+        conn.close();\n+        return response;\n+    }\n+\n+    private HttpStreamResponseHandler createResponseHandler(CompletableFuture<Integer> reqCompleted,\n+                                                            Map<String, String> responseHeaders,\n+                                                            StringBuilder responseBody) {\n+        return new HttpStreamResponseHandler() {\n+            @Override\n+            public void onResponseHeaders(HttpStream httpStream, int i, int i1, HttpHeader[] httpHeaders) {\n+                Arrays.stream(httpHeaders).forEach(header -> {\n+                    responseHeaders.put(header.getName(), header.getValue());\n+                });\n+            }\n+\n+            @Override\n+            public int onResponseBody(HttpStream stream, byte[] bodyBytes) {\n+                responseBody.append(new String(bodyBytes, StandardCharsets.UTF_8));\n+                return bodyBytes.length;\n+            }\n+\n+            @Override\n+            public void onResponseComplete(HttpStream httpStream, int errorCode) {\n+                reqCompleted.complete(errorCode);\n+                httpStream.close();\n+            }\n+        };\n+    }\n+\n+    private String getHttpResponse(HttpClientConnection conn, HttpRequest request) throws AWSIotException {\n+        final CompletableFuture<Integer> reqCompleted = new CompletableFuture<>();\n+        final Map<String, String> responseHeaders = new HashMap<>();\n+        final StringBuilder responseBody = new StringBuilder();\n+        conn.makeRequest(request, createResponseHandler(reqCompleted, responseHeaders, responseBody));\n+        // Give the request up to N seconds to complete, otherwise throw a TimeoutException\n+        // TODO: handle 4xx,5xx, timeouts and connection issues\n+        try {\n+            int error = reqCompleted.get(TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS, TimeUnit.SECONDS);\n+            if (error != 0) {\n+                throw new AWSIotException(String.format(\"Error %s(%d); RequestId: %s\",\n+                        HTTP_HEADER_ERROR_TYPE, error, HTTP_HEADER_REQUEST_ID));\n+            }\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Http request failed with error {}\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzU0Mw==", "bodyText": "Yikes. If this really needs to be this low level, I'm quite concerned.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424687543", "createdAt": "2020-05-13T19:43:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();\n+\n+    /**\n+     * Sends Http request to Iot Cloud.\n+     * @param connManager underlying connection manager to use for sending requests\n+     * @param path Http url to query\n+     * @param verb Http verb for the request\n+     * @return Http response corresponding to http request for path\n+     * @throws AWSIotException when unable to send the request successfully\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public String sendHttpRequest(final IotConnectionManager connManager,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjQ1MjA5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-411245209", "createdAt": "2020-05-13T19:45:28Z", "commit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0NToyOFrOGVA8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0NToyOFrOGVA8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4ODcwMg==", "bodyText": "Also, once running, you need to set the environment variables appropriately so that services know how to contact you.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r424688702", "createdAt": "2020-05-13T19:45:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.DeviceConfigurationHelper;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+\n+import java.io.IOException;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@ImplementsService(name = \"TokenExchangeService\", autostart = false)\n+@Singleton\n+public class TokenExchangeService extends EvergreenService {\n+    private static final Logger LOGGER = LogManager.getLogger(TokenExchangeService.class);\n+    private int port;\n+    private String iotEndpoint;\n+    private HttpServerImpl server;\n+    @Inject\n+    private DeviceConfigurationHelper deviceConfigurationHelper;\n+\n+    @Inject\n+    private IotConnectionManagerFactory iotConnectionManagerFactory;\n+\n+    /**\n+     * Constructor.\n+     * @param topics the configuration coming from kernel\n+     */\n+    public TokenExchangeService(Topics topics) {\n+        super(topics);\n+        // TODO: Add support for other params like role Aliases\n+        topics.lookup(\"port\")\n+                .dflt(6666)\n+                .subscribe((why, newv) ->\n+                        port = Coerce.toInt(newv));\n+\n+        topics.lookup(\"iotEndpoint\")\n+                .subscribe((why, newv) ->\n+                        iotEndpoint = Coerce.toString(newv));\n+    }\n+\n+    /**\n+     * Contructor for unit testing.\n+     * @param topics the configuration coming from kernel\n+     * @param deviceConfigurationHelper {@link DeviceConfigurationHelper}\n+     * @param iotConnectionManagerFactory {@link IotConnectionManagerFactory}\n+     */\n+    public TokenExchangeService(Topics topics,\n+                                DeviceConfigurationHelper deviceConfigurationHelper,\n+                                IotConnectionManagerFactory iotConnectionManagerFactory) {\n+        super(topics);\n+        this.deviceConfigurationHelper = deviceConfigurationHelper;\n+        this.iotConnectionManagerFactory = iotConnectionManagerFactory;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public void startup() {\n+        LOGGER.atInfo().addKeyValue(\"port\", port).log(\"Starting Token Server at port {}\", port);\n+        try {\n+            IotConnectionManager connManager = iotConnectionManagerFactory.getIotConnectionManager(iotEndpoint,\n+                    deviceConfigurationHelper.getDeviceConfiguration());\n+            IotCloudHelper cloudHelper = new IotCloudHelper();\n+            server = new HttpServerImpl(port, new CredentialRequestHandler(cloudHelper, connManager));\n+            server.start();\n+        } catch (IOException | DeviceConfigurationException e) {\n+            LOGGER.error(\"Caught exception...\", e);\n+            reportState(State.ERRORED);\n+        }\n+        reportState(State.RUNNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3033a6fc4e83f37a1a77e577a2e3ebb33ef973f4", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3033a6fc4e83f37a1a77e577a2e3ebb33ef973f4", "committedDate": "2020-05-13T21:08:23Z", "message": "Apply feedback comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bcd9bcdb54f3d145f60aec807a5b828b89eb4b2", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2bcd9bcdb54f3d145f60aec807a5b828b89eb4b2", "committedDate": "2020-05-13T21:14:16Z", "message": "Add EGExtension to tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7feef3939979c77aeb1b93eba77528b68abc45fa", "committedDate": "2020-05-14T01:05:13Z", "message": "Fix PMD violations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTU4OTI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-412158924", "createdAt": "2020-05-14T20:27:19Z", "commit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyNzoyMFrOGVs-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMDoyODo1M1rOGVtB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDIzMA==", "bodyText": "definitely seems too long", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425410230", "createdAt": "2020-05-14T20:27:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.NoArgsConstructor;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpHeader;\n+import software.amazon.awssdk.crt.http.HttpRequest;\n+import software.amazon.awssdk.crt.http.HttpStream;\n+import software.amazon.awssdk.crt.http.HttpStreamResponseHandler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.inject.Singleton;\n+\n+\n+@Singleton\n+@NoArgsConstructor\n+public class IotCloudHelper {\n+    private static final Logger LOGGER = LogManager.getLogger(IotCloudHelper.class);\n+    private static final String HTTP_HEADER_REQUEST_ID = \"x-amzn-RequestId\";\n+    private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n+    // TODO: revisit all timeout values\n+    // Max wait time for device to receive HTTP response from IOT CLOUD\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMTA1OA==", "bodyText": "Does this really require a threadpool? Seems like a regular HTTP request shouldn't need extra threads, it can just use the main thread. In subsequent PRs let's move to Apache HTTP client and use a Java keystore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425411058", "createdAt": "2020-05-14T20:28:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.deployment.model.DeviceConfiguration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnection;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManager;\n+import software.amazon.awssdk.crt.http.HttpClientConnectionManagerOptions;\n+import software.amazon.awssdk.crt.io.ClientBootstrap;\n+import software.amazon.awssdk.crt.io.EventLoopGroup;\n+import software.amazon.awssdk.crt.io.HostResolver;\n+import software.amazon.awssdk.crt.io.SocketOptions;\n+import software.amazon.awssdk.crt.io.TlsContext;\n+import software.amazon.awssdk.crt.io.TlsContextOptions;\n+\n+import java.io.Closeable;\n+import java.net.URI;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class IotConnectionManager implements Closeable {\n+    // TODO: Move Iot related classes to a central location\n+    private static final Logger LOGGER = LogManager.getLogger(IotConnectionManager.class);\n+    // TODO: ALPN support\n+    private static final int IOT_PORT = 8443;\n+    // Max wait time for device to establish mTLS connection with IOT core\n+    private static final long TIMEOUT_FOR_CONNECTION_SETUP_SECONDS = (long) Duration.ofMinutes(1).getSeconds();\n+    private final String iotEndpoint;\n+    private final HttpClientConnectionManager connManager;\n+\n+    /**\n+     * Constructor.\n+     * @param iotEndpoint Iot cloud credentials endpoint for managing connections to.\n+     * @param deviceConfiguration Device configuration for getting cert and keys for mTLS\n+     * @throws DeviceConfigurationException When unable to initialize this manager.\n+     */\n+    IotConnectionManager(final String iotEndpoint, final DeviceConfiguration deviceConfiguration)\n+        throws DeviceConfigurationException {\n+        this.iotEndpoint = iotEndpoint;\n+        this.connManager = initConnectionManager(deviceConfiguration);\n+    }\n+\n+    private HttpClientConnectionManager initConnectionManager(DeviceConfiguration deviceConfiguration)\n+            throws DeviceConfigurationException {\n+        final String certPath = deviceConfiguration.getCertificateFilePath();\n+        final String keyPath = deviceConfiguration.getPrivateKeyFilePath();\n+        final String caPath = deviceConfiguration.getRootCAFilePath();\n+        try (EventLoopGroup eventLoopGroup = new EventLoopGroup(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NTgwNQ=="}, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjA3NTA5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-412207509", "createdAt": "2020-05-14T21:44:35Z", "commit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0NDozNVrOGVvU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMTo0Njo1MVrOGVvYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0ODY3Ng==", "bodyText": "I don't know how true it is. But I went through a security review before and was told not to use String to store creds in memory. Use Byte[] instead. I remember the reason was due to String objects stay in memory longer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425448676", "createdAt": "2020-05-14T21:44:35Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CredentialRequestHandler implements HttpHandler {\n+\n+    public static final String IOT_CREDENTIALS_PATH = \"/greengrass/assumeRoleForGroup\";\n+    public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n+\n+    private final IotCloudHelper iotCloudHelper;\n+\n+    private final IotConnectionManager iotConnectionManager;\n+\n+    /**\n+     * Constructor.\n+     * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n+     * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     */\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper, final IotConnectionManager connectionManager) {\n+        this.iotCloudHelper = cloudHelper;\n+        this.iotConnectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String credentials = getCredentials();\n+        exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, credentials.length());\n+        exchange.getResponseBody().write(credentials.getBytes(StandardCharsets.UTF_8));\n+        exchange.close();\n+    }\n+\n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     * @return AWS credentials from cloud.\n+     */\n+    public String getCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTAzNQ==", "bodyText": "What is the purpose of initializing this to alive?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425449035", "createdAt": "2020-05-14T21:45:23Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.AWSIotException;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+\n+public class CredentialRequestHandler implements HttpHandler {\n+\n+    public static final String IOT_CREDENTIALS_PATH = \"/greengrass/assumeRoleForGroup\";\n+    public static final String IOT_CREDENTIALS_HTTP_VERB = \"GET\";\n+\n+    private final IotCloudHelper iotCloudHelper;\n+\n+    private final IotConnectionManager iotConnectionManager;\n+\n+    /**\n+     * Constructor.\n+     * @param cloudHelper {@link IotCloudHelper} for making http requests to cloud.\n+     * @param connectionManager {@link IotConnectionManager} underlying connection manager for cloud.\n+     */\n+    public CredentialRequestHandler(final IotCloudHelper cloudHelper, final IotConnectionManager connectionManager) {\n+        this.iotCloudHelper = cloudHelper;\n+        this.iotConnectionManager = connectionManager;\n+    }\n+\n+    @Override\n+    public void handle(final HttpExchange exchange) throws IOException {\n+        final String credentials = getCredentials();\n+        exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, credentials.length());\n+        exchange.getResponseBody().write(credentials.getBytes(StandardCharsets.UTF_8));\n+        exchange.close();\n+    }\n+\n+    /**\n+     * API for kernel to directly fetch credentials from TES instead of using HTTP server.\n+     * @return AWS credentials from cloud.\n+     */\n+    public String getCredentials() {\n+        String credentials = \"--alive--\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0OTY2Nw==", "bodyText": "What is the purpose of this interface?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425449667", "createdAt": "2020-05-14T21:46:51Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/tes/Server.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import java.io.IOException;\n+\n+public interface Server {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjE3ODMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-412217830", "createdAt": "2020-05-14T22:04:26Z", "commit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDoyNlrOGVv1Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNzoxMFrOGVv5og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NjkwNg==", "bodyText": "It looks like this constructor is not used. Remove?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425456906", "createdAt": "2020-05-14T22:04:26Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int TIME_TO_WAIT_BEFORE_SHUTDOWN_IN_SECONDS = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7feef3939979c77aeb1b93eba77528b68abc45fa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1ODA4Mg==", "bodyText": "Does it mean this httpImpl can only handle one request at a time?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#discussion_r425458082", "createdAt": "2020-05-14T22:07:10Z", "author": {"login": "fufranci"}, "path": "src/main/java/com/aws/iot/evergreen/tes/HttpServerImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.tes;\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+@Singleton\n+public class HttpServerImpl implements Server {\n+    public static final String URL = \"/2016-11-01/credentialprovider/\";\n+    private static final int timeToWaitBeforeShutdownInSeconds = 1;\n+    private final HttpServer httpImpl;\n+\n+    @Inject\n+    private HttpHandler credentialRequestHandler;\n+\n+    /**\n+     * Constructor.\n+     * @param port Http server port\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port) throws IOException {\n+        // TODO: validate port\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+    }\n+\n+    /**\n+     * Constructor for Unit testing.\n+     * @param port Http server port\n+     * @param credentialRequestHandler request handler for server requests\n+     * @throws IOException When server creation fails\n+     */\n+    HttpServerImpl(int port, HttpHandler credentialRequestHandler) throws IOException {\n+        httpImpl = HttpServer.create(new InetSocketAddress(port), 0);\n+        this.credentialRequestHandler = credentialRequestHandler;\n+    }\n+\n+    @Override\n+    public void start() {\n+        httpImpl.createContext(URL, credentialRequestHandler);\n+        httpImpl.setExecutor(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3OTIzNQ=="}, "originalCommit": {"oid": "c8167edea6ad5b29a6c6d7ffe427608a0404fd55"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ffeadf1516028b877d309a06b0c51b142a17c85", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ffeadf1516028b877d309a06b0c51b142a17c85", "committedDate": "2020-05-15T00:25:44Z", "message": "Apply more feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjc4NTg5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-412278589", "createdAt": "2020-05-15T00:51:37Z", "commit": {"oid": "3ffeadf1516028b877d309a06b0c51b142a17c85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a140061ac16bc2ba4a75c3ab279efcbb0c65f32e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a140061ac16bc2ba4a75c3ab279efcbb0c65f32e", "committedDate": "2020-05-15T03:24:48Z", "message": "Merge branch 'master' into tes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzIyMzk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/240#pullrequestreview-412322394", "createdAt": "2020-05-15T03:25:40Z", "commit": {"oid": "a140061ac16bc2ba4a75c3ab279efcbb0c65f32e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2197, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}