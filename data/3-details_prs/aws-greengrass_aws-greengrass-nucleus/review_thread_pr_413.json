{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwMTcwMDU5", "number": 413, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo0NzoyNVrOEgim4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjozMzoxOVrOEhb-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTU2ODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo0NzoyNVrOHNdNHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1Mzo1M1rOHNdSAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjAyOQ==", "bodyText": "just value.equalsIgnoreCase(o.getValue())?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483872029", "createdAt": "2020-09-04T22:47:25Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;\n+\n+    public CaseInsensitiveString(@NonNull String value) {\n+        this.value = value;\n+    }\n+\n+    private String getLower() {\n+        if (lower == null) {\n+            lower = value.toLowerCase();\n+        }\n+        return lower;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CaseInsensitiveString that = (CaseInsensitiveString) o;\n+        return getLower().equals(that.getLower());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjQxMw==", "bodyText": "Could do that, but I need the lowercase version anyway for hashcode, so I think that'll be more efficient.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483872413", "createdAt": "2020-09-04T22:49:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;\n+\n+    public CaseInsensitiveString(@NonNull String value) {\n+        this.value = value;\n+    }\n+\n+    private String getLower() {\n+        if (lower == null) {\n+            lower = value.toLowerCase();\n+        }\n+        return lower;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CaseInsensitiveString that = (CaseInsensitiveString) o;\n+        return getLower().equals(that.getLower());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjAyOQ=="}, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzI4MA==", "bodyText": "Make sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483873280", "createdAt": "2020-09-04T22:53:53Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;\n+\n+    public CaseInsensitiveString(@NonNull String value) {\n+        this.value = value;\n+    }\n+\n+    private String getLower() {\n+        if (lower == null) {\n+            lower = value.toLowerCase();\n+        }\n+        return lower;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        CaseInsensitiveString that = (CaseInsensitiveString) o;\n+        return getLower().equals(that.getLower());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MjAyOQ=="}, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTU3NzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1MzoyOVrOHNdRvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1NDoyOVrOHNdScQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzIxNA==", "bodyText": "nit - could also be final if wee do toLowerCase() in the constructor.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483873214", "createdAt": "2020-09-04T22:53:29Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzM5Mw==", "bodyText": "I did that first, but I think this is more efficient because it isn't guaranteed that we always need the lowercase form, like if hashcode or equals isn't called.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483873393", "createdAt": "2020-09-04T22:54:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzIxNA=="}, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTU3NzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1Mzo0N1rOHNdR8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMjo1Mzo0N1rOHNdR8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg3MzI2NA==", "bodyText": "No need for the null check if toLowerCase() in the constructor.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r483873264", "createdAt": "2020-09-04T22:53:47Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/CaseInsensitiveString.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.NonNull;\n+\n+import java.util.Objects;\n+\n+public class CaseInsensitiveString implements CharSequence {\n+    private final String value;\n+    private String lower;\n+\n+    public CaseInsensitiveString(@NonNull String value) {\n+        this.value = value;\n+    }\n+\n+    private String getLower() {\n+        if (lower == null) {\n+            lower = value.toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDk2Nzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjozMzoxOVrOHOwLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMjozNzo1OFrOHOwRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMTQ0Ng==", "bodyText": "Why have to wait here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r485231446", "createdAt": "2020-09-08T22:33:19Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -364,6 +375,7 @@ public void replaceAndWait(Map<Object, Object> newValue) {\n                 updateFromMap(System.currentTimeMillis(), newValue,\n                         new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.REPLACE))\n         );\n+        context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMzA5OQ==", "bodyText": "Because the updates run on the publish queue after this method would have exited, so there's a race and the name replaceAndWait is wrong because it doesn't wait for the updates to be done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/413#discussion_r485233099", "createdAt": "2020-09-08T22:37:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -364,6 +375,7 @@ public void replaceAndWait(Map<Object, Object> newValue) {\n                 updateFromMap(System.currentTimeMillis(), newValue,\n                         new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.REPLACE))\n         );\n+        context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzMTQ0Ng=="}, "originalCommit": {"oid": "3c8f8af3879f2e7d5cdcba9b118ee796f36f65bb"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 757, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}