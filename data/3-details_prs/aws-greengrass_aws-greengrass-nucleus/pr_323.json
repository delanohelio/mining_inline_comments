{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNjYxNDY3", "number": 323, "title": "Support removing recipe field in component recipe update", "bodyText": "Issue #, if available:\nPreviously, when a new component is updated with a removed field in lifecycle/configuration, the field will not be removed in resulting kernel config.\nDescription of changes:\nAdd hierarchy merge behavior of configuration merge.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-07-20T17:22:34Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323", "merged": true, "mergeCommit": {"oid": "47f341608029dc94f4571ba456db03b79099da14"}, "closed": true, "closedAt": "2020-07-23T22:16:02Z", "author": {"login": "ShirleyZheng92"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc21g9tAFqTQ1MTgzMzcxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc324pkAFqTQ1NDUyOTAxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODMzNzEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-451833710", "createdAt": "2020-07-20T17:56:49Z", "commit": {"oid": "367cef14054e184f583729f9331ff6293c691617"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1Njo0OVrOG0ZJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1Njo0OVrOG0ZJ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MTI1OA==", "bodyText": "WILDCARD, not WILD_CARD.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457591258", "createdAt": "2020-07-20T17:56:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -232,41 +221,101 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n      * @param lastModified last modified time\n      * @param map          map to merge in\n      */\n+    void replaceMap(long lastModified, Map<Object, Object> map) {\n+        updateFromMap(lastModified, map, MergeBehaviorTree.REPLACE_ALL);\n+    }\n+\n+    /**\n+     * Add the given map to this Topics tree.\n+     *\n+     * @param lastModified  last modified time\n+     * @param map           map to merge in\n+     * @param mergeBehavior mergeBehavior\n+     */\n     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n-    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+    public void updateFromMap(long lastModified, Map<Object, Object> map, @NonNull MergeBehaviorTree mergeBehavior) {\n         if (map == null) {\n-            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");\n+            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in updateFromMap(), ignoring.\");\n             return;\n         }\n         Set<String> childToRemove = new HashSet<>(children.keySet());\n \n         map.forEach((okey, value) -> {\n             String key = okey.toString();\n             childToRemove.remove(key);\n-            Node existingChild = children.get(key);\n-            // if new node is a container node\n-            if (value instanceof Map) {\n-                // if existing child is a leaf node\n-                // TODO: handle node type change between container/leaf node\n-                if (existingChild != null && !(existingChild instanceof Topics)) {\n-                    remove(existingChild);\n-                }\n-                createInteriorChild(key).replaceMap(lastModified, (Map) value);\n-            // if new node is a leaf node\n-            } else {\n-                // if existing child is a container node\n-                if (existingChild != null && !(existingChild instanceof Topic)) {\n-                    remove(existingChild);\n-                }\n-                createLeafChild(key).withNewerValue(lastModified, value);\n-            }\n+            updateChild(lastModified, key, value, mergeBehavior);\n         });\n \n         childToRemove.forEach(child -> {\n-            remove(children.get(child));\n+            MergeBehaviorTree childMergeBehavior = mergeBehavior.getChildOverride().get(child);\n+            if (childMergeBehavior == null) {\n+                childMergeBehavior = mergeBehavior.getChildOverride().get(MergeBehaviorTree.WILD_CARD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "367cef14054e184f583729f9331ff6293c691617"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "367cef14054e184f583729f9331ff6293c691617", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/367cef14054e184f583729f9331ff6293c691617", "committedDate": "2020-07-20T17:19:46Z", "message": "Renaming and cleanup"}, "afterCommit": {"oid": "ec0c1b08349ef70c596d5dfe87838efe2876b891", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ec0c1b08349ef70c596d5dfe87838efe2876b891", "committedDate": "2020-07-20T18:09:11Z", "message": "Renaming and cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODUxNzYw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-451851760", "createdAt": "2020-07-20T18:23:04Z", "commit": {"oid": "ec0c1b08349ef70c596d5dfe87838efe2876b891"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyMzowNFrOG0aCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyMzowNFrOG0aCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTc0Ng==", "bodyText": "Since the new 'main' service doesn't have a 'lifecycle' config, it will switch from Starting to FINISHED directly.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457605746", "createdAt": "2020-07-20T18:23:04Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -135,7 +135,7 @@ void GIVEN_kernel_running_single_service_WHEN_merge_changes_service_THEN_service\n         // WHEN\n         CountDownLatch mainRestarted = new CountDownLatch(1);\n         kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING) && oldState.equals(State.STARTING)) {\n+            if (service.getName().equals(\"main\") && newState.equals(State.FINISHED) && oldState.equals(State.STARTING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0c1b08349ef70c596d5dfe87838efe2876b891"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTQ1MzI1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-452145325", "createdAt": "2020-07-21T05:54:26Z", "commit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNTo1NDoyNlrOG0pJag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0Mzo1N1rOG0qReg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1MzI5MA==", "bodyText": "Call it childrenToRemove instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457853290", "createdAt": "2020-07-21T05:54:26Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -232,41 +221,101 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n      * @param lastModified last modified time\n      * @param map          map to merge in\n      */\n+    void replaceMap(long lastModified, Map<Object, Object> map) {\n+        updateFromMap(lastModified, map, MergeBehaviorTree.REPLACE_ALL);\n+    }\n+\n+    /**\n+     * Add the given map to this Topics tree.\n+     *\n+     * @param lastModified  last modified time\n+     * @param map           map to merge in\n+     * @param mergeBehavior mergeBehavior\n+     */\n     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n-    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+    public void updateFromMap(long lastModified, Map<Object, Object> map, @NonNull MergeBehaviorTree mergeBehavior) {\n         if (map == null) {\n-            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");\n+            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in updateFromMap(), ignoring.\");\n             return;\n         }\n         Set<String> childToRemove = new HashSet<>(children.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NDk3Mg==", "bodyText": "I would use childName in place of child as the variable name, it caused confusion and I thought its the whole node.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457854972", "createdAt": "2020-07-21T05:59:14Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -232,41 +221,101 @@ public void mergeMap(long lastModified, Map<Object, Object> map) {\n      * @param lastModified last modified time\n      * @param map          map to merge in\n      */\n+    void replaceMap(long lastModified, Map<Object, Object> map) {\n+        updateFromMap(lastModified, map, MergeBehaviorTree.REPLACE_ALL);\n+    }\n+\n+    /**\n+     * Add the given map to this Topics tree.\n+     *\n+     * @param lastModified  last modified time\n+     * @param map           map to merge in\n+     * @param mergeBehavior mergeBehavior\n+     */\n     @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n-    public void replaceMap(long lastModified, Map<Object, Object> map) {\n+    public void updateFromMap(long lastModified, Map<Object, Object> map, @NonNull MergeBehaviorTree mergeBehavior) {\n         if (map == null) {\n-            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in mergeMap(), ignoring.\");\n+            logger.atInfo().kv(\"node\", getFullName()).log(\"Null map received in updateFromMap(), ignoring.\");\n             return;\n         }\n         Set<String> childToRemove = new HashSet<>(children.keySet());\n \n         map.forEach((okey, value) -> {\n             String key = okey.toString();\n             childToRemove.remove(key);\n-            Node existingChild = children.get(key);\n-            // if new node is a container node\n-            if (value instanceof Map) {\n-                // if existing child is a leaf node\n-                // TODO: handle node type change between container/leaf node\n-                if (existingChild != null && !(existingChild instanceof Topics)) {\n-                    remove(existingChild);\n-                }\n-                createInteriorChild(key).replaceMap(lastModified, (Map) value);\n-            // if new node is a leaf node\n-            } else {\n-                // if existing child is a container node\n-                if (existingChild != null && !(existingChild instanceof Topic)) {\n-                    remove(existingChild);\n-                }\n-                createLeafChild(key).withNewerValue(lastModified, value);\n-            }\n+            updateChild(lastModified, key, value, mergeBehavior);\n         });\n \n         childToRemove.forEach(child -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MjAxMg==", "bodyText": "I like how you have implemented the merge behavior and the flexibility it provides to configure each node with different behavior. I think code in this method may not be maintainable since it depends on recipe format and kind of defines it here implicitly. Have you considered using a json/yaml file to describe the merge behavior (exactly as you have shown in the commented example) and use (parse the file and then set the behaviors accordingly) that to define the merge behavior. That might be easier to read and also modify anything when we update the recipe format.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457862012", "createdAt": "2020-07-21T06:19:41Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -435,4 +438,25 @@ void removeObsoleteServices() throws InterruptedException, ExecutionException {\n         }\n \n     }\n+\n+    private static MergeBehaviorTree createDeploymentMergeBehavior() {\n+        // root: MERGE\n+        //   services: MERGE\n+        //     *: REPLACE\n+        //       runtime: MERGE\n+        //     AUTH_TOKEN: MERGE\n+\n+        MergeBehaviorTree rootMergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.MERGE);\n+        MergeBehaviorTree servicesMergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.MERGE);\n+        MergeBehaviorTree insideServiceMergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.REPLACE);\n+        MergeBehaviorTree serviceRuntimeMergeBehavior = MergeBehaviorTree.MERGE_ALL;\n+\n+        rootMergeBehavior.getChildOverride().put(SERVICES_NAMESPACE_TOPIC, servicesMergeBehavior);\n+        servicesMergeBehavior.getChildOverride().put(MergeBehaviorTree.WILDCARD, insideServiceMergeBehavior);\n+        servicesMergeBehavior.getChildOverride().put(AUTH_TOKEN_LOOKUP_KEY, MergeBehaviorTree.MERGE_ALL);\n+        insideServiceMergeBehavior.getChildOverride().put(\n+                EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC, serviceRuntimeMergeBehavior);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2NjkzOQ==", "bodyText": "What is the purpose of this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457866939", "createdAt": "2020-07-21T06:32:18Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -386,4 +386,154 @@ public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscri\n         assertEquals(1, leafNodeUpdated.get());\n         assertFalse(nodeUnchangedNotified.get());\n     }\n+\n+    @Test\n+    public void GIVEN_config_update_WHEN_root_replace_and_child_merge_THEN_expect_merge_correct() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(System.currentTimeMillis(), initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2OTUyOQ==", "bodyText": "Do we need this method? Wouldn't it be better that caller is aware of what kind of behavior they are setting and they don't have to do much, just one additional argument.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457869529", "createdAt": "2020-07-21T06:38:35Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topics.java", "diffHunk": "@@ -210,20 +211,8 @@ protected Node findNode(String... path) {\n      * @param lastModified last modified time\n      * @param map          map to merge in\n      */\n-    @SuppressFBWarnings(\"NP_NULL_ON_SOME_PATH\")\n     public void mergeMap(long lastModified, Map<Object, Object> map) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7a1cf31bba5e0c8fecf22fa5e5b2035c6edf25"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MDkxNQ==", "bodyText": "I would add more test with one more level of nesting (3 levels of nested merge behavior).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457870915", "createdAt": "2020-07-21T06:41:57Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -386,4 +386,154 @@ public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscri\n         assertEquals(1, leafNodeUpdated.get());\n         assertFalse(nodeUnchangedNotified.get());\n     }\n+\n+    @Test\n+    public void GIVEN_config_update_WHEN_root_replace_and_child_merge_THEN_expect_merge_correct() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(System.currentTimeMillis(), initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger nodeMerged = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeMerged\").subscribe((what, c) -> {\n+            if (WhatHappened.childChanged == what && c.getName().equals(\"key2\")) {\n+                nodeMerged.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+\n+        MergeBehaviorTree mergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.REPLACE,\n+            new HashMap<String, MergeBehaviorTree>() {{\n+                put(\"foo\", new MergeBehaviorTree(\n+                    MergeBehaviorTree.MergeBehavior.REPLACE,\n+                    new HashMap<String, MergeBehaviorTree>(){{\n+                        put(\"nodeToBeMerged\", MergeBehaviorTree.MERGE_ALL);\n+                    }}\n+                ));\n+            }}\n+        );\n+        config.updateMap(System.currentTimeMillis(), updateConfigMap, mergeBehavior);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        Map<Object, Object> expectedConfig = new HashMap<>(updateConfigMap);\n+\n+        ((Map) ((Map)expectedConfig.get(\"foo\")).get(\"nodeToBeMerged\")).put(\"key1\", \"val1\");\n+\n+        // THEN\n+        assertEquals(expectedConfig, config.toPOJO());\n+\n+        assertEquals(1, nodeMerged.get());\n+    }\n+\n+    @Test\n+    public void GIVEN_config_update_WHEN_root_merge_and_child_replace_THEN_expect_merge_correct() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeReplaced:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  nodeUnchanged:\\n\"\n+                + \"    key1: val1\\n\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeReplaced:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeUnchanged:\\n\"\n+                + \"    key1: val1\\n\";\n+\n+        String expectedResult = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeReplaced:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeUnchanged:\\n\"\n+                + \"    key1: val1\\n\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(System.currentTimeMillis(), initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger nodeMerged = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeMerged\").subscribe((what, c) -> {\n+            if (WhatHappened.childChanged == what && c.getName().equals(\"key2\")) {\n+                nodeMerged.incrementAndGet();\n+            }\n+        });\n+\n+\n+        AtomicInteger nodeUnchangedCount = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeUnchanged\").subscribe((what, c) -> {\n+            if (WhatHappened.initialized != what) {\n+                nodeUnchangedCount.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+\n+        MergeBehaviorTree mergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.REPLACE,\n+            new HashMap<String, MergeBehaviorTree>() {{\n+                put(\"foo\", new MergeBehaviorTree(\n+                    MergeBehaviorTree.MergeBehavior.MERGE,\n+                    new HashMap<String, MergeBehaviorTree>(){{\n+                        put(\"nodeToBeReplaced\", MergeBehaviorTree.REPLACE_ALL);\n+                    }}\n+                ));\n+            }}\n+        );\n+\n+        config.updateMap(System.currentTimeMillis(), updateConfigMap, mergeBehavior);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        // THEN\n+        Map<Object, Object> expectedConfig;\n+        try (InputStream inputStream = new ByteArrayInputStream(expectedResult.getBytes())) {\n+            expectedConfig = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        assertEquals(expectedConfig, config.toPOJO());\n+\n+        assertEquals(1, nodeMerged.get());\n+        assertEquals(0, nodeUnchangedCount.get());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afacdf0de9366ceb4f6fae84d19652047971beb"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MDk4OA==", "bodyText": "?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457870988", "createdAt": "2020-07-21T06:42:06Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationTest.java", "diffHunk": "@@ -386,4 +386,154 @@ public void GIVEN_topics_WHEN_call_replace_map_THEN_content_replaced_and_subscri\n         assertEquals(1, leafNodeUpdated.get());\n         assertFalse(nodeUnchangedNotified.get());\n     }\n+\n+    @Test\n+    public void GIVEN_config_update_WHEN_root_replace_and_child_merge_THEN_expect_merge_correct() throws Exception {\n+        // GIVEN\n+        // set up initial config and listeners\n+        String initConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeToBeRemoved:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key1: val1\\n\"\n+                + \"  leafToBeUpdated: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeRemoved: dummy\";\n+\n+        String updateConfig = \"---\\n\"\n+                + \"foo:\\n\"\n+                + \"  nodeAdded: val1\\n\"\n+                + \"  nodeToBeMerged:\\n\"\n+                + \"    key2: val2\\n\"\n+                + \"  nodeUnchanged: unchanged\\n\"\n+                + \"  leafToBeUpdated: updatedValue\";\n+\n+        Map<Object, Object> initConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(initConfig.getBytes())) {\n+            initConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+        config.mergeMap(System.currentTimeMillis(), initConfigMap);\n+        config.context.runOnPublishQueueAndWait(() -> {});\n+\n+        AtomicInteger nodeMerged = new AtomicInteger(0);\n+        config.findTopics(\"foo\", \"nodeToBeMerged\").subscribe((what, c) -> {\n+            if (WhatHappened.childChanged == what && c.getName().equals(\"key2\")) {\n+                nodeMerged.incrementAndGet();\n+            }\n+        });\n+\n+        // WHEN\n+        Map<Object, Object> updateConfigMap;\n+        try (InputStream inputStream = new ByteArrayInputStream(updateConfig.getBytes())) {\n+            updateConfigMap = (Map) JSON.std.with(new YAMLFactory()).anyFrom(inputStream);\n+        }\n+\n+        MergeBehaviorTree mergeBehavior = new MergeBehaviorTree(MergeBehaviorTree.MergeBehavior.REPLACE,\n+            new HashMap<String, MergeBehaviorTree>() {{\n+                put(\"foo\", new MergeBehaviorTree(\n+                    MergeBehaviorTree.MergeBehavior.REPLACE,\n+                    new HashMap<String, MergeBehaviorTree>(){{\n+                        put(\"nodeToBeMerged\", MergeBehaviorTree.MERGE_ALL);\n+                    }}\n+                ));\n+            }}\n+        );\n+        config.updateMap(System.currentTimeMillis(), updateConfigMap, mergeBehavior);\n+        config.context.runOnPublishQueueAndWait(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afacdf0de9366ceb4f6fae84d19652047971beb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTczOA==", "bodyText": "Might be better named something like - GIVEN_updating_Component_WHEN_removing_field_from_recipe_THEN_kernel_config_remove_corresponding_field", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r457871738", "createdAt": "2020-07-21T06:43:57Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -344,4 +348,46 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n \n         Slf4jLogAdapter.removeGlobalListener(logListener);\n     }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_component_updated_WHEN_component_recipe_remove_a_field_THEN_kernel_config_remove_the_corresponding_field() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7afacdf0de9366ceb4f6fae84d19652047971beb"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e859c9d864fe6b0e0d82c82e3a08111f4c1409a1", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e859c9d864fe6b0e0d82c82e3a08111f4c1409a1", "committedDate": "2020-07-21T17:30:24Z", "message": "Address comments"}, "afterCommit": {"oid": "eb51a5b2db3747178eff596f4f0e5c88192efcb6", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb51a5b2db3747178eff596f4f0e5c88192efcb6", "committedDate": "2020-07-21T17:37:37Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a34658c96fadcba9395e82dfb5f65aa5c00e37a", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4a34658c96fadcba9395e82dfb5f65aa5c00e37a", "committedDate": "2020-07-21T17:41:09Z", "message": "Integrate merge/replace config merging in DeploymentConfigMerger\n\nIn updating evergreen kernel config, allow specifying different update\nbehavior (merge/replace) at different node in the config tree."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8894d7043cc4de53e89a50f3442b617a5b734c1a", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8894d7043cc4de53e89a50f3442b617a5b734c1a", "committedDate": "2020-07-21T17:41:09Z", "message": "Renaming and cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb51a5b2db3747178eff596f4f0e5c88192efcb6", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb51a5b2db3747178eff596f4f0e5c88192efcb6", "committedDate": "2020-07-21T17:37:37Z", "message": "Address comments"}, "afterCommit": {"oid": "c476956436860868bc9349f282774ee1bb136932", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c476956436860868bc9349f282774ee1bb136932", "committedDate": "2020-07-21T17:41:09Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24c4261f8ce8c18aeba2ec92f285fbda4974d51", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c24c4261f8ce8c18aeba2ec92f285fbda4974d51", "committedDate": "2020-07-21T18:17:21Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c476956436860868bc9349f282774ee1bb136932", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c476956436860868bc9349f282774ee1bb136932", "committedDate": "2020-07-21T17:41:09Z", "message": "Address comments"}, "afterCommit": {"oid": "c24c4261f8ce8c18aeba2ec92f285fbda4974d51", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c24c4261f8ce8c18aeba2ec92f285fbda4974d51", "committedDate": "2020-07-21T18:17:21Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bdb240038ae845646b784ea893fa8ba54d87ac", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/26bdb240038ae845646b784ea893fa8ba54d87ac", "committedDate": "2020-07-21T18:19:23Z", "message": "Merge branch 'master' into removeConfigField"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8e20bf24d2781f7f444247013acaeb644c1d63f8", "committedDate": "2020-07-22T19:39:51Z", "message": "Merge branch 'master' into removeConfigField"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNjYzMjQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-453663241", "createdAt": "2020-07-22T20:33:12Z", "commit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzg2OTMw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-453786930", "createdAt": "2020-07-23T01:24:54Z", "commit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyNDo1NFrOG15h8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzozOToxNVrOG2U2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MDI5MQ==", "bodyText": "[Can be a new PR] but this will be best in a README.md!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r459170291", "createdAt": "2020-07-23T01:24:54Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/MergeBehaviorTree.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** A hierarchy data structure indicating merge behavior of entire config tree.\n+ * An example looks like below:\n+ * [MERGE]\n+ *   key1: [MERGE]\n+ *     subkey1: [REPLACE]\n+ *       subkey2: [MERGE]\n+ *   *: [REPLACE]\n+ *     subkey1: [MERGE]\n+ *       subkey2: [REPLACE]\n+ * <p>\n+ * Original config:\n+ * --\n+ * key1:\n+ *   otherKey: otherVal\n+ *   subKey1:\n+ *     leafKey1:val1\n+ *     subKey2:\n+ *       leafKey2:val2\n+ * foo:\n+ *   otherKey: otherVal\n+ *   subKey1:\n+ *     leafKey1:val1\n+ *     subKey2:\n+ *       leafKey2:val2\n+ * bar:\n+ *   key1:val1\n+ * </p>\n+ * <p>\n+ * Config to merge in:\n+ * --\n+ * key1:\n+ *   subKey1:\n+ *     subKey2:\n+ *       updatedLeafKey2: updatedVal2\n+ * foo:\n+ *   subKey1:\n+ *     subKey2:\n+ *       updatedLeafKey2: updatedVal2\n+ * baz:\n+ *   key1:val1\n+ * </p>\n+ * <p>\n+ * Resulting config:\n+ * --\n+ * key1:\n+ *   otherKey: otherVal (merged from original config)\n+ *   subKey1: (leafKey1 removed)\n+ *     subKey2:\n+ *       leafKey2:val2 (merged from original config)\n+ *       updatedLeafKey2: updatedVal2\n+ * foo: (otherKey removed)\n+ *   subKey1:\n+ *     leafKey1:val1 (merged from original config)\n+ *     subKey2: (leafKey2 removed)\n+ *       updatedLeafKey2: updatedVal2\n+ * bar: (merged from original config)\n+ *   key1:val1\n+ * baz: (merged from new config)\n+ *   key1:val1\n+ * </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjA0Mw==", "bodyText": "The comment here is super helpful", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r459616043", "createdAt": "2020-07-23T17:35:48Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -344,4 +348,46 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n \n         Slf4jLogAdapter.removeGlobalListener(logListener);\n     }\n+\n+    @Timeout(value = 10, unit = TimeUnit.MINUTES)\n+    @Test\n+    void GIVEN_updating_Component_WHEN_removing_field_from_recipe_THEN_kernel_config_remove_corresponding_field() throws Exception {\n+        // CustomerApp 0.9.1 has 'startup' key in lifecycle\n+        SetConfigurationRequest setRequest1 = new SetConfigurationRequest()\n+                .withTargetName(thingGroupName)\n+                .withTargetType(THING_GROUP_TARGET_TYPE)\n+                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n+                .addPackagesEntry(\"CustomerApp\", new PackageMetaData().withRootComponent(true).withVersion(\"0.9.1\"));\n+        PublishConfigurationResult publishResult1 = setAndPublishFleetConfiguration(setRequest1);\n+\n+        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n+                Duration.ofMinutes(10), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n+\n+        EvergreenService customerApp = kernel.locate(\"CustomerApp\");\n+        assertNotNull(customerApp.getConfig().findTopics(SERVICE_LIFECYCLE_NAMESPACE_TOPIC).getChild(\"startup\"));\n+\n+        // update with some local data\n+        customerApp.getRuntimeConfig().lookup(\"runtimeKey\").withValue(\"val\");\n+\n+        // Second deployment to update CustomerApp, replace 'startup' key with 'run' key.\n+        SetConfigurationRequest setRequest2 = new SetConfigurationRequest()\n+                .withTargetName(thingGroupName)\n+                .withTargetType(THING_GROUP_TARGET_TYPE)\n+                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n+                .addPackagesEntry(\"CustomerApp\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.0\"));\n+        PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n+\n+        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo.getThingName(),\n+                Duration.ofMinutes(5), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n+\n+        // Ensure that main is finished, which is its terminal state, so this means that all updates ought to be done\n+        assertThat(kernel.getMain()::getState, eventuallyEval(is(State.FINISHED)));\n+        customerApp = kernel.locate(\"CustomerApp\");\n+        // assert local data is not affected\n+        assertEquals(\"val\", customerApp.getRuntimeConfig().findLeafChild(\"runtimeKey\").getOnce());\n+        // assert updated service have 'startup' key removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjk1OA==", "bodyText": "Can the mergeBehavior here at method level just takes a Enum and the actual tree?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r459616958", "createdAt": "2020-07-23T17:37:26Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/Configuration.java", "diffHunk": "@@ -131,11 +131,22 @@ public int size() {\n      * @param map       map to merge\n      */\n     public void mergeMap(long timestamp, Map<Object, Object> map) {\n+        this.updateMap(timestamp, map, MergeBehaviorTree.MERGE_ALL);\n+    }\n+\n+    /**\n+     * Merges a Map into this configuration. The merge will resolve platform.\n+     *\n+     * @param timestamp     last modified time for the configuration values\n+     * @param map           map to merge\n+     * @param mergeBehavior the mergeBehavior of each node to be merged in\n+     */\n+    public void updateMap(long timestamp, Map<Object, Object> map, MergeBehaviorTree mergeBehavior) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNzIzNg==", "bodyText": "This looks a bit weird... Can we simplify with just passing the Enum around?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r459617236", "createdAt": "2020-07-23T17:37:52Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/MergeBehaviorTree.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.Getter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** A hierarchy data structure indicating merge behavior of entire config tree.\n+ * An example looks like below:\n+ * [MERGE]\n+ *   key1: [MERGE]\n+ *     subkey1: [REPLACE]\n+ *       subkey2: [MERGE]\n+ *   *: [REPLACE]\n+ *     subkey1: [MERGE]\n+ *       subkey2: [REPLACE]\n+ * <p>\n+ * Original config:\n+ * --\n+ * key1:\n+ *   otherKey: otherVal\n+ *   subKey1:\n+ *     leafKey1:val1\n+ *     subKey2:\n+ *       leafKey2:val2\n+ * foo:\n+ *   otherKey: otherVal\n+ *   subKey1:\n+ *     leafKey1:val1\n+ *     subKey2:\n+ *       leafKey2:val2\n+ * bar:\n+ *   key1:val1\n+ * </p>\n+ * <p>\n+ * Config to merge in:\n+ * --\n+ * key1:\n+ *   subKey1:\n+ *     subKey2:\n+ *       updatedLeafKey2: updatedVal2\n+ * foo:\n+ *   subKey1:\n+ *     subKey2:\n+ *       updatedLeafKey2: updatedVal2\n+ * baz:\n+ *   key1:val1\n+ * </p>\n+ * <p>\n+ * Resulting config:\n+ * --\n+ * key1:\n+ *   otherKey: otherVal (merged from original config)\n+ *   subKey1: (leafKey1 removed)\n+ *     subKey2:\n+ *       leafKey2:val2 (merged from original config)\n+ *       updatedLeafKey2: updatedVal2\n+ * foo: (otherKey removed)\n+ *   subKey1:\n+ *     leafKey1:val1 (merged from original config)\n+ *     subKey2: (leafKey2 removed)\n+ *       updatedLeafKey2: updatedVal2\n+ * bar: (merged from original config)\n+ *   key1:val1\n+ * baz: (merged from new config)\n+ *   key1:val1\n+ * </p>\n+ */\n+@AllArgsConstructor\n+@Getter\n+@Data\n+public class MergeBehaviorTree {\n+    public static final String WILDCARD = \"*\";\n+    public static final MergeBehaviorTree MERGE_ALL;\n+    public static final MergeBehaviorTree REPLACE_ALL;\n+\n+    static {\n+        MERGE_ALL = new MergeBehaviorTree(MergeBehavior.MERGE);\n+        REPLACE_ALL = new MergeBehaviorTree(MergeBehavior.REPLACE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNzk4Ng==", "bodyText": "[nit] I think the name mergeMap which takes a mergeBehavior is fine. If we change to updateFromMap, then I'd also be consistent to have UpdateBehavior", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#discussion_r459617986", "createdAt": "2020-07-23T17:39:15Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/Configuration.java", "diffHunk": "@@ -131,11 +131,22 @@ public int size() {\n      * @param map       map to merge\n      */\n     public void mergeMap(long timestamp, Map<Object, Object> map) {\n+        this.updateMap(timestamp, map, MergeBehaviorTree.MERGE_ALL);\n+    }\n+\n+    /**\n+     * Merges a Map into this configuration. The merge will resolve platform.\n+     *\n+     * @param timestamp     last modified time for the configuration values\n+     * @param map           map to merge\n+     * @param mergeBehavior the mergeBehavior of each node to be merged in\n+     */\n+    public void updateMap(long timestamp, Map<Object, Object> map, MergeBehaviorTree mergeBehavior) {\n         Object resolvedPlatformMap = PlatformResolver.resolvePlatform(map);\n         if (!(resolvedPlatformMap instanceof Map)) {\n             throw new IllegalArgumentException(\"Invalid config after resolving platform: \" + resolvedPlatformMap);\n         }\n-        root.mergeMap(timestamp, (Map<Object, Object>) resolvedPlatformMap);\n+        root.updateFromMap(timestamp, (Map<Object, Object>) resolvedPlatformMap, mergeBehavior);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e20bf24d2781f7f444247013acaeb644c1d63f8"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4084a54e6f0056973867eb48f3de735727b0a59a", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4084a54e6f0056973867eb48f3de735727b0a59a", "committedDate": "2020-07-23T19:47:14Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDk2ODYw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-454496860", "createdAt": "2020-07-23T21:08:58Z", "commit": {"oid": "4084a54e6f0056973867eb48f3de735727b0a59a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTI5MDE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/323#pullrequestreview-454529018", "createdAt": "2020-07-23T22:08:40Z", "commit": {"oid": "4084a54e6f0056973867eb48f3de735727b0a59a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2912, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}