{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDYwNTU3", "number": 204, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0MjozNVrOD0lmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowODowNlrOD1AvrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDY4NjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0MjozNVrOGJl65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0MjozNVrOGJl65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMTY1Mg==", "bodyText": "Why we need an extra check here? handleCurrentStateNew() is blocking until it either succeed/fails", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412711652", "createdAt": "2020-04-22T06:42:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -288,6 +295,13 @@ private boolean handleCurrentStateNew(Optional<State> desiredState) throws Inter\n         if (!desiredState.isPresent()) {\n             return true;\n         }\n+\n+        // We're already handling the new to installed transition, so don't do anything now.\n+        if (NEW_TO_INSTALLED.equals(currentStateTransition)) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDY5MjAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0NDoxN1rOGJl-NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo0NDoxN1rOGJl-NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxMjUwMQ==", "bodyText": "both waiting dependency ready and [started but running isn't reported yet] are included in INSTALLED state. IMO a cleaner solution is to split out Starting as a separate state, and only go to STOPPING from STARTING/RUNNING", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412712501", "createdAt": "2020-04-22T06:44:17Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -464,15 +480,14 @@ private void handleCurrentStateErrored(Optional<State> desiredState) throws Inte\n         }\n \n         switch (prevState) {\n+            // For both installed and running, make sure we stop first before retrying\n+            case INSTALLED:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcxODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MTozNlrOGJmNXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MTozNlrOGJmNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNjM4MQ==", "bodyText": "should we add more Exec details here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412716381", "createdAt": "2020-04-22T06:51:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -163,26 +160,25 @@ private void handleRunScript() throws InterruptedException {\n \n     @Override\n     @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                try {\n+                    e.close();\n+                    logger.atInfo().setEventType(\"generic-service-shutdown\").log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcyNDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1MzowOFrOGJmQvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxMjo0OFrOGJ-xyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzI0NQ==", "bodyText": "If you remove inShutdown, do you need to cancel this callback in the shutdown() function?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412717245", "createdAt": "2020-04-22T06:53:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -81,70 +80,68 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void install() throws InterruptedException {\n-        if (run(\"install\", null) == RunStatus.Errored) {\n+        if (run(\"install\", null).getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in install\");\n         }\n     }\n \n+    // Synchronize startup() and shutdown() as both are non-blocking, but need to have coordination\n+    // to operate properly\n     @Override\n-    public void startup() throws InterruptedException {\n-        RunStatus result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n-            runScript = null;\n-            if (getState() == State.INSTALLED) {\n-                if (exit == 0) {\n-                    reportState(State.RUNNING);\n-                } else {\n-                    serviceErrored(\"Non-zero exit code in startup\");\n+    public synchronized void startup() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.INSTALLED.equals(getState())) {\n+                    if (exit == 0) {\n+                        reportState(State.RUNNING);\n+                    } else {\n+                        serviceErrored(\"Non-zero exit code in startup\");\n+                    }\n                 }\n             }\n         });\n \n-        runScript = currentScript;\n-        if (result == RunStatus.Errored) {\n+        if (result.getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in startup\");\n-        } else if (result == RunStatus.NothingDone) {\n+        } else if (result.getLeft() == RunStatus.NothingDone) {\n             handleRunScript();\n         }\n     }\n \n     @SuppressWarnings(\"PMD.CloseResource\")\n-    private void handleRunScript() throws InterruptedException {\n-        // sync block will ensure that the call back can execute only after\n-        // the service transition state based on RunStatus result\n-        Object lock = new Object();\n-        synchronized (lock) {\n-            RunStatus result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n-                synchronized (lock) {\n-                    runScript = null;\n-                    if (!inShutdown) {\n-                        if (exit == 0) {\n-                            this.requestStop();\n-                            logger.atInfo().setEventType(\"generic-service-stopping\")\n-                                    .log(\"Service finished running\");\n-                        } else {\n-                            reportState(State.ERRORED);\n-                            logger.atError().setEventType(\"generic-service-errored\")\n-                                    .addKeyValue(\"exitCode\", exit).log();\n-                        }\n+    private synchronized void handleRunScript() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.RUNNING.equals(getState())) {\n+                    if (exit == 0) {\n+                        this.requestStop();\n+                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n+                    } else {\n+                        reportState(State.ERRORED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExODkyMA==", "bodyText": "There is no callback in shutdown(). The callback that you added this comment to is fine because I changed it to check for current state RUNNING. When shutdown() is called the state is STOPPING.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413118920", "createdAt": "2020-04-22T16:12:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -81,70 +80,68 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void install() throws InterruptedException {\n-        if (run(\"install\", null) == RunStatus.Errored) {\n+        if (run(\"install\", null).getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in install\");\n         }\n     }\n \n+    // Synchronize startup() and shutdown() as both are non-blocking, but need to have coordination\n+    // to operate properly\n     @Override\n-    public void startup() throws InterruptedException {\n-        RunStatus result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n-            runScript = null;\n-            if (getState() == State.INSTALLED) {\n-                if (exit == 0) {\n-                    reportState(State.RUNNING);\n-                } else {\n-                    serviceErrored(\"Non-zero exit code in startup\");\n+    public synchronized void startup() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.INSTALLED.equals(getState())) {\n+                    if (exit == 0) {\n+                        reportState(State.RUNNING);\n+                    } else {\n+                        serviceErrored(\"Non-zero exit code in startup\");\n+                    }\n                 }\n             }\n         });\n \n-        runScript = currentScript;\n-        if (result == RunStatus.Errored) {\n+        if (result.getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in startup\");\n-        } else if (result == RunStatus.NothingDone) {\n+        } else if (result.getLeft() == RunStatus.NothingDone) {\n             handleRunScript();\n         }\n     }\n \n     @SuppressWarnings(\"PMD.CloseResource\")\n-    private void handleRunScript() throws InterruptedException {\n-        // sync block will ensure that the call back can execute only after\n-        // the service transition state based on RunStatus result\n-        Object lock = new Object();\n-        synchronized (lock) {\n-            RunStatus result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n-                synchronized (lock) {\n-                    runScript = null;\n-                    if (!inShutdown) {\n-                        if (exit == 0) {\n-                            this.requestStop();\n-                            logger.atInfo().setEventType(\"generic-service-stopping\")\n-                                    .log(\"Service finished running\");\n-                        } else {\n-                            reportState(State.ERRORED);\n-                            logger.atError().setEventType(\"generic-service-errored\")\n-                                    .addKeyValue(\"exitCode\", exit).log();\n-                        }\n+    private synchronized void handleRunScript() throws InterruptedException {\n+        Pair<RunStatus, Exec> result = run(LIFECYCLE_RUN_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback\n+            synchronized (this) {\n+                if (State.RUNNING.equals(getState())) {\n+                    if (exit == 0) {\n+                        this.requestStop();\n+                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n+                    } else {\n+                        reportState(State.ERRORED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzI0NQ=="}, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDczMzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NToyN1rOGJmVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjoxMzoyMVrOGJ-zhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxODUzMw==", "bodyText": "My PR https://github.com/aws/aws-greengrass-kernel/pull/189/files was trying to solve the same issue. My approach is to block the loop until a valid new desired state appears, so that we don't enter the same loop twice. I personally feel creating a hard-coded variable for this is confusing. We can discuss about this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r412718533", "createdAt": "2020-04-22T06:55:27Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -320,24 +334,27 @@ private boolean handleCurrentStateNew(Optional<State> desiredState) throws Inter\n \n     private boolean handleCurrentStateInstalled(Optional<State> desiredState,\n                                                 AtomicReference<Future> triggerTimeOutReference) {\n-        stopBackingTask();\n         if (!desiredState.isPresent()) {\n             return true;\n         }\n \n         switch (desiredState.get()) {\n-            case FINISHED:\n-                updateStateAndBroadcast(State.FINISHED);\n-                return false;\n+            // For new or finished, make sure to stop first because we may be\n+            // currently transitioning from installed to running\n             case NEW:\n-                // This happens if a restart is requested while we're currently INSTALLED\n-                updateStateAndBroadcast(State.NEW);\n+            case FINISHED:\n+                updateStateAndBroadcast(State.STOPPING);\n                 return false;\n             case RUNNING:\n-                handleStateTransitionInstalledToRunning(triggerTimeOutReference);\n+                // If we are already handling the installed to running transition, then don't do anything\n+                if (!INSTALLED_TO_RUNNING.equals(currentStateTransition)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExOTM2NQ==", "bodyText": "That's fine, I just needed a fix to pass tests. We can solve it better with your PR, but unless that is being merged soon, we need a fix for this stuff ASAP.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413119365", "createdAt": "2020-04-22T16:13:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -320,24 +334,27 @@ private boolean handleCurrentStateNew(Optional<State> desiredState) throws Inter\n \n     private boolean handleCurrentStateInstalled(Optional<State> desiredState,\n                                                 AtomicReference<Future> triggerTimeOutReference) {\n-        stopBackingTask();\n         if (!desiredState.isPresent()) {\n             return true;\n         }\n \n         switch (desiredState.get()) {\n-            case FINISHED:\n-                updateStateAndBroadcast(State.FINISHED);\n-                return false;\n+            // For new or finished, make sure to stop first because we may be\n+            // currently transitioning from installed to running\n             case NEW:\n-                // This happens if a restart is requested while we're currently INSTALLED\n-                updateStateAndBroadcast(State.NEW);\n+            case FINISHED:\n+                updateStateAndBroadcast(State.STOPPING);\n                 return false;\n             case RUNNING:\n-                handleStateTransitionInstalledToRunning(triggerTimeOutReference);\n+                // If we are already handling the installed to running transition, then don't do anything\n+                if (!INSTALLED_TO_RUNNING.equals(currentStateTransition)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxODUzMw=="}, "originalCommit": {"oid": "5cbae5bab6f6cfd1cbeb4ed0765fdda136c64944"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAyMzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzozMlrOGKFG6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMzozMlrOGKFG6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMjYzNA==", "bodyText": "Like the comment here explaining the \"why\".", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413222634", "createdAt": "2020-04-22T18:33:32Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -81,70 +81,89 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void install() throws InterruptedException {\n-        if (run(\"install\", null) == RunStatus.Errored) {\n+        try {\n+            stopAllProcesses();\n+        } catch (IOException e) {\n+            logger.atWarn().kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to stop all processes before performing install\", e);\n+        }\n+\n+        if (run(\"install\", null).getLeft() == RunStatus.Errored) {\n             serviceErrored(\"Script errored in install\");\n         }\n     }\n \n+    // Synchronize startup() and shutdown() as both are non-blocking, but need to have coordination\n+    // to operate properly\n     @Override\n-    public void startup() throws InterruptedException {\n-        RunStatus result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n-            runScript = null;\n-            if (getState() == State.INSTALLED) {\n-                if (exit == 0) {\n-                    reportState(State.RUNNING);\n-                } else {\n-                    serviceErrored(\"Non-zero exit code in startup\");\n+    public synchronized void startup() throws InterruptedException {\n+        try {\n+            stopAllProcesses();\n+        } catch (IOException e) {\n+            logger.atWarn().kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to stop all processes before performing startup\", e);\n+        }\n+\n+        Pair<RunStatus, Exec> result = run(Lifecycle.LIFECYCLE_STARTUP_NAMESPACE_TOPIC, exit -> {\n+            // Synchronize within the callback so that these reportStates don't interfere with\n+            // the reportStates outside of the callback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODA3NDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo0NToxOVrOGKFlqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowMToyOFrOGKGU7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMDUwNg==", "bodyText": "Without knowing too much about the close impl, would this close throw any exception on failure and we need to handle?\nIf close could take some time, let's add logs both before and after the statement.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413230506", "createdAt": "2020-04-22T18:45:19Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +181,33 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n+        try {\n+            stopAllProcesses();\n+            logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+        } catch (IOException ioe) {\n+            logger.atError(\"generic-service-shutdown-error\", ioe)\n+                    .kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to shutdown all processes\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() throws IOException {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n                 e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+                logger.atInfo().log(\"Shutdown process {}\", e);\n+                processes.remove(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MjYwNw==", "bodyText": "No, there's nothing to handle, it really isn't even an IOException but a timeout exception, that we tried to kill the process but it timed out.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413242607", "createdAt": "2020-04-22T19:01:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +181,33 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n+        try {\n+            stopAllProcesses();\n+            logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+        } catch (IOException ioe) {\n+            logger.atError(\"generic-service-shutdown-error\", ioe)\n+                    .kv(PROCESSES_KEY, processes)\n+                    .log(\"Unable to shutdown all processes\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() throws IOException {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n                 e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+                logger.atInfo().log(\"Shutdown process {}\", e);\n+                processes.remove(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzMDUwNg=="}, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODExNzYwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/SpawnedProcessProtector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NToxOFrOGKGASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NToxOFrOGKGASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNzMyMQ==", "bodyText": "You are very nice. lol.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413237321", "createdAt": "2020-04-22T18:55:18Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/SpawnedProcessProtector.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.testcommons.testutilities;\n+\n+import com.aws.iot.evergreen.util.Exec;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.zeroturnaround.process.PidUtil;\n+import org.zeroturnaround.process.Processes;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@SuppressWarnings(\"PMD.SystemPrintln\")\n+public class SpawnedProcessProtector implements AfterAllCallback {\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) throws Exception {\n+        // TODO: Will need a similar solution as below for windows.\n+        if (Exec.isWindows) {\n+            return;\n+        }\n+\n+        String[] cmd = {\"pgrep\", \"-P\", String.valueOf(PidUtil.getMyPid())};\n+        Process proc = Runtime.getRuntime().exec(cmd);\n+        assertTrue(proc.waitFor(5, TimeUnit.SECONDS), \"Able to run pgrep and find child processes\");\n+\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(proc.getInputStream()))) {\n+            List<String> childPids = br.lines().collect(Collectors.toList());\n+\n+            if (!childPids.isEmpty()) {\n+                System.err.println(\"Not all child PIDs were stopped before the test ended!\");\n+                System.err.println(\"Going to try killing them for you, but this is a problem which must be fixed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776cac06a2051fde32aa8c07a98f87d9fec0b8f4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODk5MzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjoyMTozOVrOGKOQ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjoyMTozOVrOGKOQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3MjY2NA==", "bodyText": "nit. It is used to determine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413372664", "createdAt": "2020-04-22T22:21:39Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -48,6 +50,21 @@\n     private static final int MAXIMUM_CONTINUAL_ERROR = 3;\n     private static final Pair<State, State> INSTALLED_TO_RUNNING = new Pair<>(State.INSTALLED, State.RUNNING);\n \n+    /*\n+     * State generation is a value representing how many times the service has been in the INSTALLED state.\n+     * It is used determine if an action should be taken when that action would be run asynchronously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d07d4481b85c4c5967ad59179b9d63891026f5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTEzMzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowODowNlrOGKPfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxNDo0NlrOGKPqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgxOA==", "bodyText": "You want to remove the process from the map anyways. This logic should be outside the if check", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413392818", "createdAt": "2020-04-22T23:08:06Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +169,32 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        stopAllProcesses();\n+        logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                logger.atInfo().log(\"Shutting down process {}\", e);\n+                try {\n+                    e.close();\n+                    logger.atInfo().log(\"Shutdown completed for process {}\", e);\n+                    processes.remove(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5Mzc5Mg==", "bodyText": "I'm not too sure about that really. In this case, since it isn't removed, it may try to be closed and removed again later which isn't such a bad idea IMO.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413393792", "createdAt": "2020-04-22T23:10:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +169,32 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        stopAllProcesses();\n+        logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                logger.atInfo().log(\"Shutting down process {}\", e);\n+                try {\n+                    e.close();\n+                    logger.atInfo().log(\"Shutdown completed for process {}\", e);\n+                    processes.remove(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgxOA=="}, "originalCommit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTQ4NQ==", "bodyText": "Sorry didn't make it clear. I mean you want to remove e from the map if (!e.isRunning())", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/204#discussion_r413395485", "createdAt": "2020-04-22T23:14:46Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -162,27 +169,32 @@ private void handleRunScript() throws InterruptedException {\n     }\n \n     @Override\n-    @SuppressWarnings(\"PMD.CloseResource\")\n-    public void shutdown() {\n+    public synchronized void shutdown() {\n         logger.atInfo().log(\"Shutdown initiated\");\n-        inShutdown = true;\n         try {\n             run(\"shutdown\", null);\n         } catch (InterruptedException ex) {\n-            inShutdown = false;\n             logger.atWarn(\"generic-service-shutdown\").log(\"Thread interrupted while shutting down service\");\n             return;\n         }\n-        Exec e = runScript;\n-        if (e != null && e.isRunning()) {\n-            try {\n-                e.close();\n-                logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n-            } catch (IOException ioe) {\n-                logger.atError().setEventType(\"generic-service-shutdown-error\").setCause(ioe).log();\n+        stopAllProcesses();\n+        logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n+    }\n+\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    private synchronized void stopAllProcesses() {\n+        for (Exec e : processes) {\n+            if (e != null && e.isRunning()) {\n+                logger.atInfo().log(\"Shutting down process {}\", e);\n+                try {\n+                    e.close();\n+                    logger.atInfo().log(\"Shutdown completed for process {}\", e);\n+                    processes.remove(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgxOA=="}, "originalCommit": {"oid": "68660fc6f20942649593a7843a443c6b46d3b641"}, "originalPosition": 185}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4633, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}