{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDg4ODQ0", "number": 116, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1NjoyN1rODof6eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNzo1MFrODpnwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkyNTA0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1NjoyN1rOF3FeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyMDoxM1rOF3KA9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNTcwMw==", "bodyText": "Can you adjust your copyright to remove the extra *?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393305703", "createdAt": "2020-03-16T20:56:27Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MDA4NQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393380085", "createdAt": "2020-03-17T00:20:13Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNTcwMw=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkyODg2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1NzozM1rOF3Fgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyMDowNlrOF3KA5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjI5NQ==", "bodyText": "Let's no do this. @JamesGosling  just added a log watcher replacement into the SDK, so use that instead of reading from the log file.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306295", "createdAt": "2020-03-16T20:57:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MDA2OA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393380068", "createdAt": "2020-03-17T00:20:06Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjI5NQ=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkyOTgwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1Nzo1MVrOF3FhUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyMTo0OFrOF3KCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjQ0OA==", "bodyText": "Don't catch and then fail, just let the method throw.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306448", "createdAt": "2020-03-16T20:57:51Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MDQ3NQ==", "bodyText": "Removed the file handling code", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393380475", "createdAt": "2020-03-17T00:21:48Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjQ0OA=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkzMTg2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1ODoyNlrOF3FilA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDowMjowMVrOF3r9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjc3Mg==", "bodyText": "Update this to use @TempDir instead of user.home and remove the -log stdout since that doesn't apply anymore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306772", "createdAt": "2020-03-16T20:58:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkzNjIxNw==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393936217", "createdAt": "2020-03-17T20:02:01Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjc3Mg=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzkzNTc0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1OTozOFrOF3FlCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDoyOTozOVrOF3KJpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzQwMA==", "bodyText": "Can we put in the order now? The ordering should be accurate, though if you're looking at the command outputs, they may not be ordered. What is guaranteed is the state transition order, not necessarily the command execution order.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393307400", "createdAt": "2020-03-16T20:59:38Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+        String logLines = new String(Files.readAllBytes(Paths.get(LogFileName)));\n+        int tickTokLogStringIndex = logLines.indexOf(TEST_TICK_TOCK_STRING);\n+        int mosquittoLogStringIndex = logLines.indexOf(TEST_MOSQUITTO_STRING);\n+        int customerAppLogStringIndex = logLines.indexOf(TEST_CUSTOMER_APP_STRING);\n+        assertTrue(tickTokLogStringIndex != -1);\n+        assertTrue(mosquittoLogStringIndex != -1);\n+        assertTrue(customerAppLogStringIndex != -1);\n+        //TODO: Check the order of indexes as per dependency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjQ3Ng==", "bodyText": "As a customer I don't want to go into finding the internal kernel logs. I should be testing only using what I expect from my applications. After adding listeners, I am not using timestamps in logs to verify this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393316476", "createdAt": "2020-03-16T21:19:37Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+        String logLines = new String(Files.readAllBytes(Paths.get(LogFileName)));\n+        int tickTokLogStringIndex = logLines.indexOf(TEST_TICK_TOCK_STRING);\n+        int mosquittoLogStringIndex = logLines.indexOf(TEST_MOSQUITTO_STRING);\n+        int customerAppLogStringIndex = logLines.indexOf(TEST_CUSTOMER_APP_STRING);\n+        assertTrue(tickTokLogStringIndex != -1);\n+        assertTrue(mosquittoLogStringIndex != -1);\n+        assertTrue(customerAppLogStringIndex != -1);\n+        //TODO: Check the order of indexes as per dependency", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzQwMA=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MjMwOQ==", "bodyText": "My point was that I know you removed order checking because it was failing. I believe this may have occurred because of what I describe here, but that's only a guess since I don't know what you implemented or what errors you were seeing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393382309", "createdAt": "2020-03-17T00:29:39Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+        String logLines = new String(Files.readAllBytes(Paths.get(LogFileName)));\n+        int tickTokLogStringIndex = logLines.indexOf(TEST_TICK_TOCK_STRING);\n+        int mosquittoLogStringIndex = logLines.indexOf(TEST_MOSQUITTO_STRING);\n+        int customerAppLogStringIndex = logLines.indexOf(TEST_CUSTOMER_APP_STRING);\n+        assertTrue(tickTokLogStringIndex != -1);\n+        assertTrue(mosquittoLogStringIndex != -1);\n+        assertTrue(customerAppLogStringIndex != -1);\n+        //TODO: Check the order of indexes as per dependency", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzQwMA=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzk0NDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTowMjo1MVrOF3Fqpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxNDoxMVrOF3F_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwODgzOQ==", "bodyText": "handling? If we're not handling it we should be rethrowing it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393308839", "createdAt": "2020-03-16T21:02:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n     /**\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n+     *\n      * @param pkgs a list of packages.\n      * @return a future to notify once this is finished.\n      */\n+    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n+            + \"implementation to be completed\")\n     public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n         // TODO: to be implemented.\n-        return null;\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+        completableFuture.complete(null);\n+        return completableFuture;\n     }\n \n     /**\n      * Retrieve the recipe of a package.\n+     *\n      * @param pkg package identifier\n      * @return package recipe\n      */\n     public Package getRecipe(PackageIdentifier pkg) {\n         // TODO: to be implemented.\n+        LocalPackageStore localPackageStore = new LocalPackageStore(LOCAL_CACHE_PATH);\n+        try {\n+            return localPackageStore.getPackage(pkg.getName(), pkg.getVersion()).get();\n+        } catch (PackagingException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNDEwNQ==", "bodyText": "This should be redone as part of package cache implementation.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393314105", "createdAt": "2020-03-16T21:14:11Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n     /**\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n+     *\n      * @param pkgs a list of packages.\n      * @return a future to notify once this is finished.\n      */\n+    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n+            + \"implementation to be completed\")\n     public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n         // TODO: to be implemented.\n-        return null;\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+        completableFuture.complete(null);\n+        return completableFuture;\n     }\n \n     /**\n      * Retrieve the recipe of a package.\n+     *\n      * @param pkg package identifier\n      * @return package recipe\n      */\n     public Package getRecipe(PackageIdentifier pkg) {\n         // TODO: to be implemented.\n+        LocalPackageStore localPackageStore = new LocalPackageStore(LOCAL_CACHE_PATH);\n+        try {\n+            return localPackageStore.getPackage(pkg.getName(), pkg.getVersion()).get();\n+        } catch (PackagingException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwODgzOQ=="}, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjE2NDU0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjowMDozM1rOF3vlSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNjoyNlrOF3xhVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTU5Mg==", "bodyText": "I don't get this one. Doesn't this work?\n@TempDir\nstatic Path sharedTempDir;", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393995592", "createdAt": "2020-03-17T22:00:33Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxMzk3Mw==", "bodyText": "I misunderstood the error. This works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394013973", "createdAt": "2020-03-17T22:45:38Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTU5Mg=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzM1MQ==", "bodyText": "This will work, but we can let it go for now. My blocked PR will take care of it!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394027351", "createdAt": "2020-03-17T23:26:26Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTU5Mg=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjE4OTM4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxMDozM1rOF3v1KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxMDozOVrOF3xOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5OTY1Nw==", "bodyText": "This doesn't look like a real end-to-end test? Why not use DeploymentService?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393999657", "createdAt": "2020-03-17T22:10:33Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);\n+        } catch (Exception e) {\n+            fail(\"Failed to create Deployment document object from sample job document\", e.getCause());\n+        }\n+        sampleDeploymentDocument.setTimestamp(System.currentTimeMillis());\n+        DeploymentTask deploymentTask = new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyMjQ4Ng==", "bodyText": "This is not end to end. It is integration test which is operating on component level testing. Deployment service calls the deployment task in an async notification handler. Invoking that handler will require mocking. And I was trying to avoid mocking in these tests. Writing end to end is a separate task and calling Deployment Servic should be covered there.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394022486", "createdAt": "2020-03-17T23:10:39Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);\n+        } catch (Exception e) {\n+            fail(\"Failed to create Deployment document object from sample job document\", e.getCause());\n+        }\n+        sampleDeploymentDocument.setTimestamp(System.currentTimeMillis());\n+        DeploymentTask deploymentTask = new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5OTY1Nw=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjE5ODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxNDozMFrOF3v7OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxODoyN1rOF3xX7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMTIwOA==", "bodyText": "Why log twice? Also usually we don't log and throw to prevent duplicate messages. If the code already throws, we can assume the caller will handle it properly (which might include logging).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394001208", "createdAt": "2020-03-17T22:14:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNDk0MA==", "bodyText": "Yes I agree. Removed it from here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394024940", "createdAt": "2020-03-17T23:18:27Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMTIwOA=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIxMzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMDoxMlrOF3wEGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyOTowOVrOF3zcxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzQ4MA==", "bodyText": "Add a log here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394003480", "createdAt": "2020-03-17T22:20:12Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1ODk1MA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394058950", "createdAt": "2020-03-18T01:29:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzQ4MA=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIyMDk0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzoxNFrOF3wI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzoxNFrOF3wI3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDcwMA==", "bodyText": "use hamcrest contain here to get a better error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394004700", "createdAt": "2020-03-17T22:23:14Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIyMjQ4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzo0MlrOF3wJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTowOTowNFrOF3zKoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDkyMQ==", "bodyText": "there ought to be a hamcrest matcher for less than also, again for better error messages.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394004921", "createdAt": "2020-03-17T22:23:42Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NDMwNA==", "bodyText": "The timestamp of the logs are not a consistent way of ensuring the order so I am removing this check for now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394054304", "createdAt": "2020-03-18T01:09:04Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDkyMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjIzNTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyODozOVrOF3wRgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoxOToyMFrOF3xY-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjkxMw==", "bodyText": "I guess cancellation is not handled here if there is a new deployment come in. Fine with it for now as long as we are aware of it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394006913", "createdAt": "2020-03-17T22:28:39Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -210,14 +258,10 @@ public void startup() {\n             try {\n                 if (currentProcessStatus != null) {\n                     logger.info(\"Getting the status of the current process\");\n-                    Boolean deploymentStatus = currentProcessStatus.get();\n-                    if (deploymentStatus) {\n-                        updateJobAsSucceded(currentJobId, currentDeploymentContext);\n-                    } else {\n-                        updateJobAsFailed(currentJobId, currentDeploymentContext);\n-                    }\n+\n+                    currentProcessStatus.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNTIwOA==", "bodyText": "Right, cancellation needs to be handled and it will be done as part of future tasks. It is captured in backlog", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394025208", "createdAt": "2020-03-17T23:19:20Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -210,14 +258,10 @@ public void startup() {\n             try {\n                 if (currentProcessStatus != null) {\n                     logger.info(\"Getting the status of the current process\");\n-                    Boolean deploymentStatus = currentProcessStatus.get();\n-                    if (deploymentStatus) {\n-                        updateJobAsSucceded(currentJobId, currentDeploymentContext);\n-                    } else {\n-                        updateJobAsFailed(currentJobId, currentDeploymentContext);\n-                    }\n+\n+                    currentProcessStatus.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjkxMw=="}, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM3NTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozMjozNFrOF3xoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NDowMVrOF4QLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTEwMw==", "bodyText": "Better to only try the createDeploymentTask line since only this throws InvalidRequestException.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try {\n          \n          \n            \n                            deploymentTask = createDeploymentTask(response.execution.jobDocument);\n          \n          \n            \n                            currentProcessStatus = executorService.submit(deploymentTask);\n          \n          \n            \n                            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n          \n          \n            \n                        } catch (InvalidRequestException e) {\n          \n          \n            \n                            //TODO: Add status details\n          \n          \n            \n                            HashMap<String, String> statusDetails = new HashMap<>();\n          \n          \n            \n                            statusDetails.put(\"error\", e.getMessage());\n          \n          \n            \n                            updateJobAsFailed(currentJobId, statusDetails);\n          \n          \n            \n                        }\n          \n          \n            \n                        try {\n          \n          \n            \n                            deploymentTask = createDeploymentTask(response.execution.jobDocument);\n          \n          \n            \n                        } catch (InvalidRequestException e) {\n          \n          \n            \n                            //TODO: Add status details\n          \n          \n            \n                            Map<String, String> statusDetails = new HashMap<>();\n          \n          \n            \n                            statusDetails.put(\"error\", e.getMessage());\n          \n          \n            \n                            updateJobAsFailed(currentJobId, statusDetails);\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                       currentProcessStatus = executorService.submit(deploymentTask);\n          \n          \n            \n                       logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394029103", "createdAt": "2020-03-17T23:32:34Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDI1NA==", "bodyText": "I agree that trys should cover minimum statements. But in this case the suggested change won't work. I want to submit the deploymentTask only when it did not get exception. I don't like adding another null check.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394060254", "createdAt": "2020-03-18T01:35:01Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTEwMw=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNTM3NA==", "bodyText": "True. But I guess we can return after catching the exception, so that the happy path code only run without exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394525374", "createdAt": "2020-03-18T17:37:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTEwMw=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyOTY4Nw==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394529687", "createdAt": "2020-03-18T17:44:01Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTEwMw=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM3NjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozMjo1NlrOF3xomg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0MDoxN1rOF3zm7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTIxMA==", "bodyText": "Map interface should be fine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394029210", "createdAt": "2020-03-17T23:32:56Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MTU0OA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394061548", "createdAt": "2020-03-18T01:40:17Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTIxMA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQwMzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0NDozMVrOF3x4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0MDozNlrOF3znVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzI2Mw==", "bodyText": "same here for Map", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394033263", "createdAt": "2020-03-17T23:44:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MTY1Mg==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394061652", "createdAt": "2020-03-18T01:40:36Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzI2Mw=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQxNTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1MTo1OFrOF3yAbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozOTo0OVrOF4QA9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA==", "bodyText": "What's error if using @Inject?\nIs it because that it doesn't work for LocalPacakgeStore(String path) since our DI right now only injects on type but not name? So String won't work... But Kernel for example works. I think PackageCache and KernelConfigResolver should work with @Inject, with my limited knowledge on this...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394035308", "createdAt": "2020-03-17T23:51:58Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NzIwOQ==", "bodyText": "Injecting these dependencies should remove a lot of boilerplate code, and besides there already is a constructor for DeploymentService that takes in these objects, why do we need these null checks and initialization code here still?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047209", "createdAt": "2020-03-18T00:38:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NzAxMQ==", "bodyText": "@leaf94 Injected dependencies are initialized after the constructor of the class is called. I need the injected dependencies for initializing these classes and so it needs to happen after the DeploymentService instance is initialized.\n@shaguptashaikh Injecting these dependencies means creating these objects in Kernel. I do not prefer that. In addition to above, the constructor you are referring to is not used by Kernel to initialize the service. So this needs to be done explicitly.\nI am not super happy with this and willing to revisit how DI works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394067011", "createdAt": "2020-03-18T02:02:31Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNjk2NA==", "bodyText": "I guess I'm still wondering what's the difference between KernelConfigResolver vs Kernel from the DI perspective.\nBut I do agree that we can revisit it later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394526964", "createdAt": "2020-03-18T17:39:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ1MDUzOnYy", "diffSide": "RIGHT", "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxMjo1N1rOF3yVrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMzowNlrOF4PxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDc0OA==", "bodyText": "Nit - Did you mean 'Now tick-tocking...'?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394040748", "createdAt": "2020-03-18T00:12:57Z", "author": {"login": "shaguptashaikh"}, "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: TickTock\n+Description: A *very* helpful periodic service\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: Period\n+    type: NUMBER\n+    value: 2\n+Lifecycle:\n+  run:\n+    \"echo No tick-tocking with period: {{params:Period.value}}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Mzc1Ng==", "bodyText": "No, I specifically want to say that this package is not periodic. Updated the description message of the package as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394053756", "createdAt": "2020-03-18T01:06:40Z", "author": {"login": "abanthiy"}, "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: TickTock\n+Description: A *very* helpful periodic service\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: Period\n+    type: NUMBER\n+    value: 2\n+Lifecycle:\n+  run:\n+    \"echo No tick-tocking with period: {{params:Period.value}}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDc0OA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NDQxOA==", "bodyText": "since this isn't actually periodic, no. But probably this should be made periodic, or have the name changed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394054418", "createdAt": "2020-03-18T01:09:32Z", "author": {"login": "MikeDombo"}, "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: TickTock\n+Description: A *very* helpful periodic service\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: Period\n+    type: NUMBER\n+    value: 2\n+Lifecycle:\n+  run:\n+    \"echo No tick-tocking with period: {{params:Period.value}}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDc0OA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMjkyMg==", "bodyText": "I have changed the name", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394522922", "createdAt": "2020-03-18T17:33:06Z", "author": {"login": "abanthiy"}, "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: TickTock\n+Description: A *very* helpful periodic service\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: Period\n+    type: NUMBER\n+    value: 2\n+Lifecycle:\n+  run:\n+    \"echo No tick-tocking with period: {{params:Period.value}}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDc0OA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2MDU4OnYy", "diffSide": "RIGHT", "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxOTowNFrOF3yb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjowODo0MVrOF4YmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ==", "bodyText": "remove the skipif as it's not necessary here. Same for other yaml files", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042331", "createdAt": "2020-03-18T00:19:04Z", "author": {"login": "ShirleyZheng92"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1MzYyNQ==", "bodyText": "Added it because kernel code was throwing invalid config error (I am fixing that). This is still a valid config right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394053625", "createdAt": "2020-03-18T01:06:07Z", "author": {"login": "abanthiy"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMTQ0Mw==", "bodyText": "Yes it's a valid config, just not necessary. Also this extra 'skipif' logic might cause test to pass/fail unexpectedly", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394511443", "createdAt": "2020-03-18T17:15:33Z", "author": {"login": "ShirleyZheng92"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMDk5NA==", "bodyText": "I am fine removing it. We will eventually need to add it to test skipif. But why would skipif cause unexpected behavior in this case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394520994", "createdAt": "2020-03-18T17:30:01Z", "author": {"login": "abanthiy"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzQ3NQ==", "bodyText": "if the test host has a '~/ ' then the command won't be run.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394667475", "createdAt": "2020-03-18T22:08:22Z", "author": {"login": "ShirleyZheng92"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2NzU5Ng==", "bodyText": "and skipif shouldn't be tested in DA", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394667596", "createdAt": "2020-03-18T22:08:41Z", "author": {"login": "ShirleyZheng92"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2MDk2OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxOToxNlrOF3ycFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozMjozNVrOF4Pv5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjM4OQ==", "bodyText": "try catch not needed here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042389", "createdAt": "2020-03-18T00:19:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1NzM2OA==", "bodyText": "I prefer explicitly capturing what does not need to happen.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394057368", "createdAt": "2020-03-18T01:22:23Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjM4OQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMTg0MQ==", "bodyText": "as Mike commented: Don't catch and then fail, just let the method throw.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394511841", "createdAt": "2020-03-18T17:16:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjM4OQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyMjU5OA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394522598", "createdAt": "2020-03-18T17:32:35Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjM4OQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2MTIwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxOToyOFrOF3ycQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyNDoxN1rOF3zYPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjQzNQ==", "bodyText": "Should this also take the timestamp? If we're going to have an integration test to ensure the same job document when submitted twice is treated as a no-op but the deployment succeeds, it'll have the same timestamp both the times", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042435", "createdAt": "2020-03-18T00:19:28Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1Nzc5MA==", "bodyText": "Yes it can be modified to take the timestamp.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394057790", "createdAt": "2020-03-18T01:24:17Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjQzNQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2NDEyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyMToxMFrOF3yeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyNjowM1rOF3zZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Mjg4MQ==", "bodyText": "This parsing logic already exists in the DA, that should also be covered by the integ tests, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042881", "createdAt": "2020-03-18T00:21:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1ODE5Ng==", "bodyText": "The point from which this integration tests start the testing the DA code is after the parsing is done, thats why need to do it here. End to end should cover the parsing happening in service", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394058196", "createdAt": "2020-03-18T01:26:03Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Mjg4MQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2NzU3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/deploymentDemo.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyMzoxNVrOF3ygFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyNjo0MlrOF3zafw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQxNA==", "bodyText": "This file is used for integ tests that will logically live forever now, so this file should be named something other than '*Demo' I think", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394043414", "createdAt": "2020-03-18T00:23:15Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/deploymentDemo.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1ODM2Nw==", "bodyText": "True.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394058367", "createdAt": "2020-03-18T01:26:42Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/deploymentDemo.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQxNA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ2ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyMzozM1rOF3ygZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNjoxMlrOF4PfgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQ5NQ==", "bodyText": "seems same as PackageManager. LOCAL_PACKAGE_SOURCE?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394043495", "createdAt": "2020-03-18T00:23:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA3MDg3NQ==", "bodyText": "Yes. This PR is not intended to address how package cache is going to be used/implemented. So you can consider this as a temporary workaround. Package cache work will be done in this sprint and will have a separate PR for it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394070875", "createdAt": "2020-03-18T02:18:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQ5NQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMjc0MQ==", "bodyText": "in this case, can we reach agreement on where to put this const string? If it belongs to package cache maybe move to PackageCache class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394512741", "createdAt": "2020-03-18T17:17:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQ5NQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODQwMQ==", "bodyText": "This is PackageCache class. PackageManager class is no longer being used. Right now DeploymentService is initializing this path as well. At this point I do not know whether there will be a PackageCache or not so I do not want to make these decisions right now as they should be made as part of separate task.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394518401", "createdAt": "2020-03-18T17:26:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQ5NQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ3NDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyNzo1MlrOF3ykkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMToyOTowMVrOF3zcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDU2Mg==", "bodyText": "seems same as PackageManager. LOCAL_PACKAGE_SOURCE?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394044562", "createdAt": "2020-03-18T00:27:52Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -46,6 +55,9 @@\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                     .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    //TODO: Change this to be taken from config or user input. Maybe as part of deployment document\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA1ODkyMA==", "bodyText": "Correct. From what I see, PackageManager class is no longer being used now. DeploymentService is currently initializing all the classes so this is needed.  PackageManager should be removed eventually", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394058920", "createdAt": "2020-03-18T01:29:01Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -46,6 +55,9 @@\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                     .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    //TODO: Change this to be taken from config or user input. Maybe as part of deployment document\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDU2Mg=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ3NzI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyOToyNVrOF3ymLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0MDo1MVrOF3znng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDk3NQ==", "bodyText": "Redundant error logs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394044975", "createdAt": "2020-03-18T00:29:25Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MTcyNg==", "bodyText": "Fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394061726", "createdAt": "2020-03-18T01:40:51Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDk3NQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ3OTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMDozN1rOF3ynQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMDozN1rOF3ynQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTI0OQ==", "bodyText": "typo: succeeded", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394045249", "createdAt": "2020-03-18T00:30:37Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -210,14 +258,10 @@ public void startup() {\n             try {\n                 if (currentProcessStatus != null) {\n                     logger.info(\"Getting the status of the current process\");\n-                    Boolean deploymentStatus = currentProcessStatus.get();\n-                    if (deploymentStatus) {\n-                        updateJobAsSucceded(currentJobId, currentDeploymentContext);\n-                    } else {\n-                        updateJobAsFailed(currentJobId, currentDeploymentContext);\n-                    }\n+\n+                    currentProcessStatus.get();\n+                    updateJobAsSucceded(currentJobId, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ4NTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozNTowNVrOF3yrRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0Njo1NVrOF3ztLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjI3OA==", "bodyText": "Not sure what value these two methods which are pretty much the same are adding, they could just be replaced by one method if you take the status as a parameter. Also, when you call these you're always passing null for statusDetails, why is that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394046278", "createdAt": "2020-03-18T00:35:05Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }\n \n-    private void updateJobAsFailed(String jobId, DeploymentContext deploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private void updateJobAsFailed(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MzE1MQ==", "bodyText": "When I wrote them, I imagined the status details will be constructed in these methods. Even though now I am passing the status details map but the resetting of jobId is specific to these two states, it should not happen for IN_PROGRESS update. At this point I would like to keep them separate and I am open to refactor them later. I am currently passing status details as null for success update because there are no additional status details. Passing null at another failure point because we have not decided what needs to be sent in status details. It should be covered in future PRs.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394063151", "createdAt": "2020-03-18T01:46:55Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }\n \n-    private void updateJobAsFailed(String jobId, DeploymentContext deploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private void updateJobAsFailed(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjI3OA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ5NTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0MToxOVrOF3yxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTo0MzoyMlrOF3zp-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzc2Mg==", "bodyText": "Why is a default key value par for JobId being cleared while trying to update the job? should it be updated right after pulling the job from cloud and cleaned up when you're done processing the deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047762", "createdAt": "2020-03-18T00:41:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MjMyOQ==", "bodyText": "This is a final update for the job, so it works equally well. If any other logs show up after this job completion, and before the next job comes, the jobId will linger on.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394062329", "createdAt": "2020-03-18T01:43:22Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzc2Mg=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjQ5Njc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0MjoxOVrOF3yx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjowNTowNFrOF3z-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzk5OA==", "bodyText": "Nit - why concatenate two string literals in the log here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047998", "createdAt": "2020-03-18T00:42:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -46,12 +49,14 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document, new HashSet<>());\n             // Block this without timeout because it can take a long time for the device to update the config\n             // (if it's not in a safe window).\n+            logger.atInfo().addKeyValue(\"Config\", newConfig.toString())\n+                    .log(\"Submitting the config to merge with \" + \"kernel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NzYwNQ==", "bodyText": "Was a debug log I was using for demo. Removed it. Long Line characters must have added the +", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394067605", "createdAt": "2020-03-18T02:05:04Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -46,12 +49,14 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document, new HashSet<>());\n             // Block this without timeout because it can take a long time for the device to update the config\n             // (if it's not in a safe window).\n+            logger.atInfo().addKeyValue(\"Config\", newConfig.toString())\n+                    .log(\"Submitting the config to merge with \" + \"kernel\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzk5OA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUwMTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0NToxMFrOF3y0mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0NToxMFrOF3y0mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0ODY2NA==", "bodyText": "Now that you're adding a Setter on this to be able to change this from the tests, I noticed that all of these members are default, could you make them private?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394048664", "createdAt": "2020-03-18T00:45:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -32,6 +37,8 @@\n     @JsonProperty(\"GroupName\")\n     String groupName;\n \n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUwMzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0NjoyOVrOF3y17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjowOTo0OFrOF30C_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTAwNQ==", "bodyText": "There are constructors and a builder and a setter for the timestamp member, some of them have to be redundant", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394049005", "createdAt": "2020-03-18T00:46:29Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -17,6 +20,8 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @Builder\n+@NoArgsConstructor\n+@AllArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2ODczMg==", "bodyText": "NoArgs is required by ObjectMapper. With builder if you want to use NoArgs then you have to add AllArgs. Issue is explained at - https://groups.google.com/forum/#!topic/project-lombok/xPgFBhWqhNA\nI need setter only to set the timestamp after the Document is Deserialized in the test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394068732", "createdAt": "2020-03-18T02:09:48Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -17,6 +20,8 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @Builder\n+@NoArgsConstructor\n+@AllArgsConstructor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTAwNQ=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjUwNTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0Nzo0MlrOF3y3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoxNjowOVrOF4PFtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTI5Mw==", "bodyText": "We could also make these private", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394049293", "createdAt": "2020-03-18T00:47:42Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -20,6 +23,7 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @AllArgsConstructor\n+@NoArgsConstructor\n public class DeploymentPackageConfiguration {\n \n     @JsonProperty(\"Name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMTc5Ng==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394511796", "createdAt": "2020-03-18T17:16:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -20,6 +23,7 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @AllArgsConstructor\n+@NoArgsConstructor\n public class DeploymentPackageConfiguration {\n \n     @JsonProperty(\"Name\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTI5Mw=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUxNDAwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1NDoyNFrOF4a3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDowN1rOF452lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDc4MA==", "bodyText": "not needed IMO, correct ordering of dependency should be tested in kernel integ test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394704780", "createdAt": "2020-03-18T23:54:24Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"Go ahead with 2 approvals\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @TempDir\n+    static Path sharedDir;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.store\", \"CONSOLE\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", sharedDir.toString(), \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                //TODO: Deduping is needed, as currently kernel is running the GreenSignal and Mosquitto dependencies\n+                // multiple times before the CustomerApp runs. This should not be the expected behavior. Sim to\n+                // capture this https://sim.amazon.com/issues/P34042537\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI(), System.currentTimeMillis());\n+\n+        result.get();\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertThat(listOfStdoutMessagesTapped, Matchers.containsInAnyOrder(Matchers.equalTo(TEST_CUSTOMER_APP_STRING)\n+                , Matchers.equalTo(TEST_MOSQUITTO_STRING), Matchers.equalTo(TEST_TICK_TOCK_STRING)));\n+        //TODO: Check the correct ordering of dependencies\n+        // Logs are not guaranteed to be in the order of dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyNDYzMQ==", "bodyText": "I can get rid of this. Anyways with these recipe files we cannot check this. But my understanding was that in order to test a feature completely it should be triggered by submitting a document. So these sample documents need to be updated continually as we develop more features.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394724631", "createdAt": "2020-03-19T00:41:54Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"Go ahead with 2 approvals\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @TempDir\n+    static Path sharedDir;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.store\", \"CONSOLE\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", sharedDir.toString(), \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                //TODO: Deduping is needed, as currently kernel is running the GreenSignal and Mosquitto dependencies\n+                // multiple times before the CustomerApp runs. This should not be the expected behavior. Sim to\n+                // capture this https://sim.amazon.com/issues/P34042537\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI(), System.currentTimeMillis());\n+\n+        result.get();\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertThat(listOfStdoutMessagesTapped, Matchers.containsInAnyOrder(Matchers.equalTo(TEST_CUSTOMER_APP_STRING)\n+                , Matchers.equalTo(TEST_MOSQUITTO_STRING), Matchers.equalTo(TEST_TICK_TOCK_STRING)));\n+        //TODO: Check the correct ordering of dependencies\n+        // Logs are not guaranteed to be in the order of dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDc4MA=="}, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjQzOQ==", "bodyText": "Sure. I'm fine with the current code here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395212439", "createdAt": "2020-03-19T17:50:07Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"Go ahead with 2 approvals\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @TempDir\n+    static Path sharedDir;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.store\", \"CONSOLE\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", sharedDir.toString(), \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                //TODO: Deduping is needed, as currently kernel is running the GreenSignal and Mosquitto dependencies\n+                // multiple times before the CustomerApp runs. This should not be the expected behavior. Sim to\n+                // capture this https://sim.amazon.com/issues/P34042537\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI(), System.currentTimeMillis());\n+\n+        result.get();\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertThat(listOfStdoutMessagesTapped, Matchers.containsInAnyOrder(Matchers.equalTo(TEST_CUSTOMER_APP_STRING)\n+                , Matchers.equalTo(TEST_MOSQUITTO_STRING), Matchers.equalTo(TEST_TICK_TOCK_STRING)));\n+        //TODO: Check the correct ordering of dependencies\n+        // Logs are not guaranteed to be in the order of dependencies", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDc4MA=="}, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUxNjI0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1NTo0MVrOF4a5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDozNzo1MlrOF4cBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTE3MQ==", "bodyText": "I guess 'true' is not supported in skipif anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394705171", "createdAt": "2020-03-18T23:55:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+---\n+services:\n+\n+  main:\n+    install:\n+      skipif: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMzYwMg==", "bodyText": "Removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394723602", "createdAt": "2020-03-19T00:37:52Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+---\n+services:\n+\n+  main:\n+    install:\n+      skipif: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTE3MQ=="}, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUyMDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1Nzo1MFrOF4a7oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDozNzoxMVrOF4cAXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTgyNQ==", "bodyText": "Are these Rahul's change? Could you do a rebase?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394705825", "createdAt": "2020-03-18T23:57:50Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -24,7 +24,8 @@\n                     \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\", \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\",\n                     \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\", \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\",\n                     \"SIGIO\", \"SIGPWR\", \"SIGSYS\",};\n-    private static final Pattern skipcmd = Pattern.compile(\"(exists|onpath) +(.+)\");\n+    private static final String SKIP_COMMAND_REGEX = \"(exists|onpath) +(.+)\";\n+    private static final Pattern skipcmd = Pattern.compile(SKIP_COMMAND_REGEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMzQyMg==", "bodyText": "I made these changes after talking to Rahul. Skip if should not be mandatory.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394723422", "createdAt": "2020-03-19T00:37:11Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -24,7 +24,8 @@\n                     \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\", \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\",\n                     \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\", \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\",\n                     \"SIGIO\", \"SIGPWR\", \"SIGSYS\",};\n-    private static final Pattern skipcmd = Pattern.compile(\"(exists|onpath) +(.+)\");\n+    private static final String SKIP_COMMAND_REGEX = \"(exists|onpath) +(.+)\";\n+    private static final Pattern skipcmd = Pattern.compile(SKIP_COMMAND_REGEX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTgyNQ=="}, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUyODgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjoyMlrOF4bAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDozNTowN1rOF4b-Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzExNQ==", "bodyText": "Minor. This could even be removed if you use @InjectMocks in the unit test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707115", "createdAt": "2020-03-19T00:02:22Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -161,26 +209,33 @@ public DeploymentService(Topics topics) {\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor fo unit testing.\n      *\n      * @param topics               The configuration coming from  kernel\n      * @param iotJobsHelperFactory Factory object for creating IotJobHelper\n      * @param executorService      Executor service coming from kernel\n      * @param kernel               The evergreen kernel\n+     * @param dependencyResolver   {@link DependencyResolver}\n+     * @param packageCache         {@link PackageCache}\n+     * @param kernelConfigResolver {@link KernelConfigResolver}\n      */\n     public DeploymentService(Topics topics, IotJobsHelperFactory iotJobsHelperFactory, ExecutorService executorService,\n-                             Kernel kernel) {\n+                             Kernel kernel, DependencyResolver dependencyResolver, PackageCache packageCache,\n+                             KernelConfigResolver kernelConfigResolver) {\n         super(topics);\n         this.iotJobsHelperFactory = iotJobsHelperFactory;\n         this.executorService = executorService;\n         this.kernel = kernel;\n+        this.dependencyResolver = dependencyResolver;\n+        this.packageCache = packageCache;\n+        this.kernelConfigResolver = kernelConfigResolver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcyMjg1OQ==", "bodyText": "As discussed separately, EvergreenService tries to use the mocked Topics during the initialization. InjectMocks does not work well in this flow.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394722859", "createdAt": "2020-03-19T00:35:07Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -161,26 +209,33 @@ public DeploymentService(Topics topics) {\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor fo unit testing.\n      *\n      * @param topics               The configuration coming from  kernel\n      * @param iotJobsHelperFactory Factory object for creating IotJobHelper\n      * @param executorService      Executor service coming from kernel\n      * @param kernel               The evergreen kernel\n+     * @param dependencyResolver   {@link DependencyResolver}\n+     * @param packageCache         {@link PackageCache}\n+     * @param kernelConfigResolver {@link KernelConfigResolver}\n      */\n     public DeploymentService(Topics topics, IotJobsHelperFactory iotJobsHelperFactory, ExecutorService executorService,\n-                             Kernel kernel) {\n+                             Kernel kernel, DependencyResolver dependencyResolver, PackageCache packageCache,\n+                             KernelConfigResolver kernelConfigResolver) {\n         super(topics);\n         this.iotJobsHelperFactory = iotJobsHelperFactory;\n         this.executorService = executorService;\n         this.kernel = kernel;\n+        this.dependencyResolver = dependencyResolver;\n+        this.packageCache = packageCache;\n+        this.kernelConfigResolver = kernelConfigResolver;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzExNQ=="}, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUzMDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjo1NFrOF4bBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjo1NFrOF4bBVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzI4NA==", "bodyText": "@InjectMocks  will do the work", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707284", "createdAt": "2020-03-19T00:02:54Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -72,14 +79,23 @@\n     @Mock\n     ExecutorService mockExecutorService;\n \n+    @Mock\n+    private DependencyResolver dependencyResolver;\n+\n+    @Mock\n+    private PackageCache packageCache;\n+\n+    @Mock\n+    private KernelConfigResolver kernelConfigResolver;\n+\n     @Captor\n     ArgumentCaptor<Consumer<JobExecutionsChangedEvent>> jobEventConsumerCaptor;\n \n     @Captor\n     ArgumentCaptor<Consumer<DescribeJobExecutionResponse>> describeJobConsumerCaptor;\n \n     DeploymentService deploymentService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUzMjA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMzo1OFrOF4bCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMzo1OFrOF4bCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzYwOA==", "bodyText": "If InjectMocks works, then this could be removed, along with the constructor in the source code :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707608", "createdAt": "2020-03-19T00:03:58Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -121,17 +137,17 @@ public void setup() {\n                     .thenReturn(mockIotJobsHelper);\n \n             //Creating the class to be tested\n-            doneSignal = new CountDownLatch(1);\n             deploymentService =\n-                    new DeploymentService(config, mockIotJobsHelperFactory, mockExecutorService, mockKernel);\n+                    new DeploymentService(config, mockIotJobsHelperFactory, mockExecutorService, mockKernel,\n+                            dependencyResolver, packageCache, kernelConfigResolver);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTU5NDQ3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MDoyMlrOF45evw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MDoyMlrOF45evw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNjMzNQ==", "bodyText": "missing lifecycle keyword", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395206335", "createdAt": "2020-03-19T17:40:22Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---\n+services:\n+\n+  main:\n+    install:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTU5OTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MToyOVrOF45hqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MzozN1rOF45_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNzA4Mw==", "bodyText": "Why are you getting the cause of the InvalidRequestException?\nAlso, nitpick, combine these strings since they're on the same line anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395207083", "createdAt": "2020-03-19T17:41:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e.getCause())\n+                        .log(\"Caught InvalidRequestException while processing a \" + \"deployment\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMzM1NQ==", "bodyText": "Because IRE can be encapsulating another Throwable as well. I have also added a message as a key value.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395213355", "createdAt": "2020-03-19T17:51:37Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e.getCause())\n+                        .log(\"Caught InvalidRequestException while processing a \" + \"deployment\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNzA4Mw=="}, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxNDU5Mg==", "bodyText": "I understand that, but that's why you should just do setCause(e). When saving the log it will give you the full cause-chain.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395214592", "createdAt": "2020-03-19T17:53:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e.getCause())\n+                        .log(\"Caught InvalidRequestException while processing a \" + \"deployment\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNzA4Mw=="}, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYwOTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NDoxMVrOF45oqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NDoxMVrOF45oqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwODg3Mw==", "bodyText": "[nit]\nfor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395208873", "createdAt": "2020-03-19T17:44:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -161,26 +209,33 @@ public DeploymentService(Topics topics) {\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor fo unit testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTYzMzIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDo0MlrOF454Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDo0MlrOF454Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjgyNw==", "bodyText": "Looks unused.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395212827", "createdAt": "2020-03-19T17:50:42Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -16,6 +20,7 @@\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n+import org.mockito.InjectMocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTY5NTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNzo1MFrOF46gpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNzo1MFrOF46gpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzIwNw==", "bodyText": "adding the \"message\" isn't really needed since it prints the message when it prints the cause.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395223207", "createdAt": "2020-03-19T18:07:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e).addKeyValue(\"message\", e.getMessage())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70c7c9102d2c137ad44b2383e4fd772c70dea47"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4909, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}