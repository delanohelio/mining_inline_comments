{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTgwNjU1", "number": 78, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0ODowOVrODjUuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxOTowNVrODjWA1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY2MjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0ODowOVrOFvEZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozMzoxNlrOFvGmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTU3OQ==", "bodyText": "Why use a custom serializer, why not just create a separate json getter which returns a string?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384899579", "createdAt": "2020-02-27T03:48:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "diffHunk": "@@ -83,4 +91,9 @@ public Package(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion reci\n         this.dependencies = dependencies;\n         this.requires = requires;\n     }\n+\n+    @JsonSerialize(using = SemverSerializer.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNTU2Ng==", "bodyText": "There are several other places in the code which broke because of that. This seemed better to avoid clashes with other people's code. We can revisit this later, I don't quite like it either but in the interest of moving forward with the demo, this just works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384935566", "createdAt": "2020-02-27T06:33:16Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/Package.java", "diffHunk": "@@ -83,4 +91,9 @@ public Package(@JsonProperty(\"RecipeTemplateVersion\") RecipeTemplateVersion reci\n         this.dependencies = dependencies;\n         this.requires = requires;\n     }\n+\n+    @JsonSerialize(using = SemverSerializer.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTU3OQ=="}, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY2NDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0OTo1OVrOFvEbWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1ODozOVrOFvHCVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTkzMA==", "bodyText": "Can artifacts be null? If so, let's change that so it can only return an empty list.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384899930", "createdAt": "2020-02-27T03:49:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "diffHunk": "@@ -145,6 +156,9 @@ public void cachePackageArtifacts(final Package curPackageRecipe) throws Packagi\n \n             // TODO: HACK HACK HACK This should get artifact providers based on key words, not just local\n             List<String> artifacts = curPackageRecipe.getArtifacts();\n+            if (artifacts == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxNzM4NQ==", "bodyText": "+1 for always returning empty collection", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384917385", "createdAt": "2020-02-27T05:16:17Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "diffHunk": "@@ -145,6 +156,9 @@ public void cachePackageArtifacts(final Package curPackageRecipe) throws Packagi\n \n             // TODO: HACK HACK HACK This should get artifact providers based on key words, not just local\n             List<String> artifacts = curPackageRecipe.getArtifacts();\n+            if (artifacts == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTkzMA=="}, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjY3Ng==", "bodyText": "Agreed, this will go away once we start adding artifact providers as well to the package object. As mentioned in the comment above, it's a hack at the moment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384942676", "createdAt": "2020-02-27T06:58:39Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "diffHunk": "@@ -145,6 +156,9 @@ public void cachePackageArtifacts(final Package curPackageRecipe) throws Packagi\n \n             // TODO: HACK HACK HACK This should get artifact providers based on key words, not just local\n             List<String> artifacts = curPackageRecipe.getArtifacts();\n+            if (artifacts == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5OTkzMA=="}, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mzg3NDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoxOTowNVrOFvGYpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1NzowNFrOFvHAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjAwNQ==", "bodyText": "It is probably better to throw a PackageNotFoundException instead of returning Optional. That way the caller doesn't need to handle another case (optional case).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384932005", "createdAt": "2020-02-27T06:19:05Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "diffHunk": "@@ -80,9 +78,22 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n             // TODO Take some corrective actions before throwing\n         }\n \n-        String packageRecipeContent = new String(Files.readAllBytes(recipePath), StandardCharsets.UTF_8);\n+        return Optional.of(new String(Files.readAllBytes(recipePath), StandardCharsets.UTF_8));\n+    }\n+\n+    /**\n+     * Get package from cache if it exists.\n+     * @return Optional containing package recipe as a String\n+     */\n+    @Override\n+    public Optional<Package> getPackage(final String packageName, final Semver packageVersion)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjE0Mg==", "bodyText": "I don't agree, the API's intended behavior is to return a package if it exists. I think returning an optional is a better representation of that then throwing exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/78#discussion_r384942142", "createdAt": "2020-02-27T06:57:04Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/LocalPackageStore.java", "diffHunk": "@@ -80,9 +78,22 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n             // TODO Take some corrective actions before throwing\n         }\n \n-        String packageRecipeContent = new String(Files.readAllBytes(recipePath), StandardCharsets.UTF_8);\n+        return Optional.of(new String(Files.readAllBytes(recipePath), StandardCharsets.UTF_8));\n+    }\n+\n+    /**\n+     * Get package from cache if it exists.\n+     * @return Optional containing package recipe as a String\n+     */\n+    @Override\n+    public Optional<Package> getPackage(final String packageName, final Semver packageVersion)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzMjAwNQ=="}, "originalCommit": {"oid": "883166164751252c29f202c4ae769f255ce2c3a5"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4812, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}