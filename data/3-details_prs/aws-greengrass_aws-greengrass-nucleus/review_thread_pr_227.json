{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Nzk5NTcx", "number": 227, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1ODoxMVrOD6Vl6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0NzowM1rOD6uSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDk3NzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1ODoxMVrOGSHuAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzozMVrOGSJAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDAxOQ==", "bodyText": "If the mergeCondition is null, then the default should be to do the merge, IMO.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421654019", "createdAt": "2020-05-07T16:58:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -69,16 +70,20 @@ public static Configuration createFromTLog(Context context, Path p) throws IOExc\n      * @param forceTimestamp should ignore if the proposed timestamp is older than current\n      * @throws IOException if reading fails\n      */\n-    public static void mergeTlogIntoConfig(Configuration config, Path tlogPath, boolean forceTimestamp)\n+    public static void mergeTlogIntoConfig(Configuration config, Path tlogPath, boolean forceTimestamp,\n+                                           Predicate<String> mergeCondition)\n             throws IOException {\n         // This can cause memory issues when the tlog files is large, use it only merge config that can fit in memory\n         // TODO : Maybe track this in benchmarking if the tlog file has the potential to cause memory issues\n         Iterator<String> logLines = Files.readAllLines(tlogPath).iterator();\n         while (logLines.hasNext()) {\n             java.util.regex.Matcher m = logLine.matcher(logLines.next());\n             if (m.matches()) {\n-                config.lookup(seperator.split(m.group(2)))\n-                        .withNewerValue(parseLong(m.group(1)), toObject(m.group(3)), forceTimestamp);\n+                String matchedValue = m.group(2);\n+                if (mergeCondition != null && mergeCondition.test(matchedValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTA0NA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421675044", "createdAt": "2020-05-07T17:33:31Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/config/ConfigurationReader.java", "diffHunk": "@@ -69,16 +70,20 @@ public static Configuration createFromTLog(Context context, Path p) throws IOExc\n      * @param forceTimestamp should ignore if the proposed timestamp is older than current\n      * @throws IOException if reading fails\n      */\n-    public static void mergeTlogIntoConfig(Configuration config, Path tlogPath, boolean forceTimestamp)\n+    public static void mergeTlogIntoConfig(Configuration config, Path tlogPath, boolean forceTimestamp,\n+                                           Predicate<String> mergeCondition)\n             throws IOException {\n         // This can cause memory issues when the tlog files is large, use it only merge config that can fit in memory\n         // TODO : Maybe track this in benchmarking if the tlog file has the potential to cause memory issues\n         Iterator<String> logLines = Files.readAllLines(tlogPath).iterator();\n         while (logLines.hasNext()) {\n             java.util.regex.Matcher m = logLine.matcher(logLines.next());\n             if (m.matches()) {\n-                config.lookup(seperator.split(m.group(2)))\n-                        .withNewerValue(parseLong(m.group(1)), toObject(m.group(3)), forceTimestamp);\n+                String matchedValue = m.group(2);\n+                if (mergeCondition != null && mergeCondition.test(matchedValue)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDAxOQ=="}, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDk4MDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1OTowMFrOGSHv-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzoxOFrOGSI_kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDUyMg==", "bodyText": "you need to escape the . in the regex, otherwise it is a wildcard.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421654522", "createdAt": "2020-05-07T16:59:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,8 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final java.util.regex.Pattern notDeployedParams =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDg5OQ==", "bodyText": "Updated to use childOf as discussed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421674899", "createdAt": "2020-05-07T17:33:18Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,8 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final java.util.regex.Pattern notDeployedParams =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDUyMg=="}, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDk5MTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzowMTo1N1rOGSH3VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzoxMlrOGSI_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NjQwNA==", "bodyText": "You should get services from the const that we have.\nAlso, not sure I like the idea of using a regex for this. I think I'd prefer to make it a Predicate<Topic> so that we can have better understanding within the predicate of the tree structure.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421656404", "createdAt": "2020-05-07T17:01:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,8 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final java.util.regex.Pattern notDeployedParams =\n+            java.util.regex.Pattern.compile(\"services.([^,.]*).notDeployed.([^,]*)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDg0MA==", "bodyText": "Updated to use childOf as discussed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421674840", "createdAt": "2020-05-07T17:33:12Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,8 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final java.util.regex.Pattern notDeployedParams =\n+            java.util.regex.Pattern.compile(\"services.([^,.]*).notDeployed.([^,]*)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NjQwNA=="}, "originalCommit": {"oid": "3205bb0370eec88134bae05685a25b8025d93df1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA5OTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMTo1MVrOGSI8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxODoxOVrOGSKofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDA2Mw==", "bodyText": "go ahead and make this public so you can use it in your tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421674063", "createdAt": "2020-05-07T17:31:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,7 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final String DEPLOYMENT_SAFE_NAMESPACE_TOPIC = \"notDeployed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwMTc1OQ==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421701759", "createdAt": "2020-05-07T18:18:19Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -43,6 +43,7 @@\n     private static final String MERGE_ERROR_LOG_EVENT_KEY = \"config-update-error\";\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n+    private static final String DEPLOYMENT_SAFE_NAMESPACE_TOPIC = \"notDeployed\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDA2Mw=="}, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTEwMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMjoxNlrOGSI9OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxODoyMlrOGSSRqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDI5Nw==", "bodyText": "nit: formatting.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421674297", "createdAt": "2020-05-07T17:32:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -148,8 +149,13 @@ private void rollback(String deploymentId, CompletableFuture<DeploymentResult> t\n         long mergeTime;\n         try {\n             mergeTime = System.currentTimeMillis();\n+            // The lambda is set up to ignore anything that is a child of DEPLOYMENT_SAFE_NAMESPACE_TOPIC\n+            // Does not necessarily have to be a child of services, customers are free to put this namespace wherever\n+            // they like in the config\n             ConfigurationReader.mergeTlogIntoConfig(kernel.getConfig(),\n-                    kernel.getConfigPath().resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)), true);\n+                    kernel.getConfigPath()\n+                          .resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)),true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxOTY2Ng==", "bodyText": "+1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421719666", "createdAt": "2020-05-07T18:49:01Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -148,8 +149,13 @@ private void rollback(String deploymentId, CompletableFuture<DeploymentResult> t\n         long mergeTime;\n         try {\n             mergeTime = System.currentTimeMillis();\n+            // The lambda is set up to ignore anything that is a child of DEPLOYMENT_SAFE_NAMESPACE_TOPIC\n+            // Does not necessarily have to be a child of services, customers are free to put this namespace wherever\n+            // they like in the config\n             ConfigurationReader.mergeTlogIntoConfig(kernel.getConfig(),\n-                    kernel.getConfigPath().resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)), true);\n+                    kernel.getConfigPath()\n+                          .resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)),true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDI5Nw=="}, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjk4NA==", "bodyText": "Formatting is still off here. Needs spaces between parameters.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421826984", "createdAt": "2020-05-07T22:18:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -148,8 +149,13 @@ private void rollback(String deploymentId, CompletableFuture<DeploymentResult> t\n         long mergeTime;\n         try {\n             mergeTime = System.currentTimeMillis();\n+            // The lambda is set up to ignore anything that is a child of DEPLOYMENT_SAFE_NAMESPACE_TOPIC\n+            // Does not necessarily have to be a child of services, customers are free to put this namespace wherever\n+            // they like in the config\n             ConfigurationReader.mergeTlogIntoConfig(kernel.getConfig(),\n-                    kernel.getConfigPath().resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)), true);\n+                    kernel.getConfigPath()\n+                          .resolve(String.format(ROLLBACK_SNAPSHOT_PATH_FORMAT, deploymentId)),true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDI5Nw=="}, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTEwNTA3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzoxOVrOGSI_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzoxOVrOGSI_oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NDkxMg==", "bodyText": "here technically \"services\" should be a param as well and get it from our const.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421674912", "createdAt": "2020-05-07T17:33:19Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -280,6 +281,10 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_do_n\n     @Order(5)\n     void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_rollback_THEN_services_are_rolled_back(\n             ExtensionContext context) throws Exception {\n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTEwNzk1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzo1OVrOGSJBXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozMzo1OVrOGSJBXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NTM1Ng==", "bodyText": "This isn't really necessary as Configuration is tested separately, but this won't slow down the test, so I guess it doesn't matter.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421675356", "createdAt": "2020-05-07T17:33:59Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -280,6 +281,10 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_do_n\n     @Order(5)\n     void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_rollback_THEN_services_are_rolled_back(\n             ExtensionContext context) throws Exception {\n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).withValue(\"Test\");\n+        assertEquals(\"Test\", kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTExMzM0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNTozOFrOGSJE3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNTozOFrOGSJE3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NjI1NQ==", "bodyText": "L300+L303 seem pointless since we know that withValue will set the value to Test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421676255", "createdAt": "2020-05-07T17:35:38Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -292,6 +297,12 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(3, services.size());\n         assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n \n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).withValue(\"Test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTEyMjIyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNzo1OVrOGSJKlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozNzo1OVrOGSJKlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3NzcxOQ==", "bodyText": "Seems like this test is misplaced, I think it makes more sense if it is in the DeploymentConfigMergerTest.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421677719", "createdAt": "2020-05-07T17:37:59Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -310,6 +321,56 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTEyNDUzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzozODo0MFrOGSJMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozNDowMFrOGSSoQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODA5NA==", "bodyText": "Why would it have changed? You never changed the value to anything else, so it shouldn't be possible for it to be different anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421678094", "createdAt": "2020-05-07T17:38:40Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -310,6 +321,56 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    /**\n+     * First deployment starts some services. Second deployment tries to add a service that breaks\n+     * and removes an existing service and the failure handling policy is to rollback\n+     * As a result, kernel should be reverted to the state before deployment\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(6)\n+    void GIVEN_services_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_safe_param_not_updated(\n+            ExtensionContext context) throws Exception {\n+        // 1. Perform forward deployment with YellowSignalService\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"YellowAndRedSignal.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                                      .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                                      .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+\n+        // 2. Add deployment safe parameter\n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).withValue(\"Test\");\n+        assertEquals(\"Test\", kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                                     DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).getOnce());\n+\n+        // 3. Perform failed deployment with rollback\n+        ignoreExceptionUltimateCauseOfType(context, ServiceUpdateException.class);\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"FailureRollbackDeployment.json\").toURI(),\n+                System.currentTimeMillis());\n+        DeploymentResult result = resultFuture.get(30, TimeUnit.SECONDS);\n+        services = kernel.orderedDependencies().stream()\n+                         .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                         .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should still contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+        assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n+\n+        // Value for deployment safe topic should not change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTAzMQ==", "bodyText": "One thing to try would be adding a globalstatelistener to listen for the service moving to ERRORED, then set the param to something other than Test, then once it rolls back the value should still be the new one. Without your change it would have been rolled back to being Test.\nWe need a test that proves your change is effective, but I'm pretty sure this test passes either way.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421679031", "createdAt": "2020-05-07T17:40:10Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -310,6 +321,56 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    /**\n+     * First deployment starts some services. Second deployment tries to add a service that breaks\n+     * and removes an existing service and the failure handling policy is to rollback\n+     * As a result, kernel should be reverted to the state before deployment\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(6)\n+    void GIVEN_services_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_safe_param_not_updated(\n+            ExtensionContext context) throws Exception {\n+        // 1. Perform forward deployment with YellowSignalService\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"YellowAndRedSignal.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                                      .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                                      .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+\n+        // 2. Add deployment safe parameter\n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).withValue(\"Test\");\n+        assertEquals(\"Test\", kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                                     DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).getOnce());\n+\n+        // 3. Perform failed deployment with rollback\n+        ignoreExceptionUltimateCauseOfType(context, ServiceUpdateException.class);\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"FailureRollbackDeployment.json\").toURI(),\n+                System.currentTimeMillis());\n+        DeploymentResult result = resultFuture.get(30, TimeUnit.SECONDS);\n+        services = kernel.orderedDependencies().stream()\n+                         .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                         .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should still contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+        assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n+\n+        // Value for deployment safe topic should not change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODA5NA=="}, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMjc3MA==", "bodyText": "Updated test, I wasn't very sure this version was adding any value either. Hopefully the new one should be better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421832770", "createdAt": "2020-05-07T22:34:00Z", "author": {"login": "chaurah"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -310,6 +321,56 @@ void GIVEN_services_running_WHEN_new_service_breaks_failure_handling_policy_roll\n         assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n     }\n \n+    /**\n+     * First deployment starts some services. Second deployment tries to add a service that breaks\n+     * and removes an existing service and the failure handling policy is to rollback\n+     * As a result, kernel should be reverted to the state before deployment\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Order(6)\n+    void GIVEN_services_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_safe_param_not_updated(\n+            ExtensionContext context) throws Exception {\n+        // 1. Perform forward deployment with YellowSignalService\n+        Future<DeploymentResult> resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"YellowAndRedSignal.json\").toURI(),\n+                System.currentTimeMillis());\n+        resultFuture.get(30, TimeUnit.SECONDS);\n+        List<String> services = kernel.orderedDependencies().stream()\n+                                      .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                                      .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+\n+        // 2. Add deployment safe parameter\n+        kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).withValue(\"Test\");\n+        assertEquals(\"Test\", kernel.getConfig().lookup(String.format(\"services.YellowSignal.%s.testTopic\",\n+                                                                     DEPLOYMENT_SAFE_NAMESPACE_TOPIC)).getOnce());\n+\n+        // 3. Perform failed deployment with rollback\n+        ignoreExceptionUltimateCauseOfType(context, ServiceUpdateException.class);\n+        resultFuture = submitSampleJobDocument(\n+                DeploymentTaskIntegrationTest.class.getResource(\"FailureRollbackDeployment.json\").toURI(),\n+                System.currentTimeMillis());\n+        DeploymentResult result = resultFuture.get(30, TimeUnit.SECONDS);\n+        services = kernel.orderedDependencies().stream()\n+                         .filter(evergreenService -> evergreenService instanceof GenericExternalService)\n+                         .map(evergreenService -> evergreenService.getName()).collect(Collectors.toList());\n+\n+        // should still contain main, YellowSignal, RedSignal\n+        assertEquals(3, services.size());\n+        assertThat(services, containsInAnyOrder(\"main\", \"YellowSignal\", \"RedSignal\"));\n+        assertEquals(DeploymentResult.DeploymentStatus.FAILED_ROLLBACK_COMPLETE, result.getDeploymentStatus());\n+\n+        // Value for deployment safe topic should not change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3ODA5NA=="}, "originalCommit": {"oid": "98fe74de3acad7fd2ebaee23d36e7af1f4365163"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA1ODc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxNzoxNVrOGSSQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyOTowOVrOGSSh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjU3OQ==", "bodyText": "nothing should be detached here, these look proper. You should try removing this supression.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421826579", "createdAt": "2020-05-07T22:17:15Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@SuppressWarnings({\"PMD.DetachedTestCase\", \"PMD.UnusedLocalVariable\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f2191911f947689d64584097889086693f61cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTE0Mw==", "bodyText": "Haven't finished updating :P Give me 10 more mins :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421831143", "createdAt": "2020-05-07T22:29:09Z", "author": {"login": "chaurah"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@SuppressWarnings({\"PMD.DetachedTestCase\", \"PMD.UnusedLocalVariable\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjU3OQ=="}, "originalCommit": {"oid": "03f2191911f947689d64584097889086693f61cc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA1OTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxNzoyNlrOGSSQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxNzoyNlrOGSSQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjY0MQ==", "bodyText": "don't copy this. Use the public const.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421826641", "createdAt": "2020-05-07T22:17:26Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/config/ConfigurationReaderTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.config;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@SuppressWarnings({\"PMD.DetachedTestCase\", \"PMD.UnusedLocalVariable\"})\n+@ExtendWith(EGExtension.class)\n+public class ConfigurationReaderTest {\n+    private static final String DEPLOYMENT_SAFE_NAMESPACE_TOPIC = \"notDeployed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f2191911f947689d64584097889086693f61cc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY4MzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzo0MTo1NVrOGSX7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo0NTo1MlrOGSsC4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxOTUzNA==", "bodyText": "The \"notDeployed\" name is confusing and seems inaccurate. Feels more accurate to say that it won't be rolled back, because it can be overwritten through a deployment; it just won't be rolled back if the deployment fails.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r421919534", "createdAt": "2020-05-08T03:41:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -44,6 +44,8 @@\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n \n+    public static final String DEPLOYMENT_SAFE_NAMESPACE_TOPIC = \"notDeployed\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9a2465fa4dbbcd0ba65cddcc77840accefe4e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTE4NQ==", "bodyText": "changed to notRolledBack", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r422249185", "createdAt": "2020-05-08T16:45:52Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -44,6 +44,8 @@\n     private static final String DEPLOYMENT_ID_LOG_KEY = \"deploymentId\";\n     private static final String ROLLBACK_SNAPSHOT_PATH_FORMAT = \"rollback_snapshot_%s.tlog\";\n \n+    public static final String DEPLOYMENT_SAFE_NAMESPACE_TOPIC = \"notDeployed\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxOTUzNA=="}, "originalCommit": {"oid": "cf9a2465fa4dbbcd0ba65cddcc77840accefe4e3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTAyMjQ5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0NjozN1rOGSt6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0NjozN1rOGSt6Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTcyMw==", "bodyText": "you don't need this here because the base class already has it. I don't think it hurts to have it though.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r422279723", "createdAt": "2020-05-08T17:46:37Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -48,6 +55,7 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+@ExtendWith(EGExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a97787415a911663277a73a3da47b187b2b093"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTAyMzgxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo0NzowM1rOGSt68w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzo1MDoyMlrOGSuBVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTkyMw==", "bodyText": "use const for lifecycle from the GenericExternalService class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r422279923", "createdAt": "2020-05-08T17:47:03Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -467,8 +475,77 @@ void GIVEN_a_running_service_is_not_disruptable_WHEN_deployed_THEN_deployment_wa\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_safe_param_not_updated(\n+            ExtensionContext context)\n+            throws Throwable {\n+\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Service sleeperB in broken state after deployment\");\n+\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"long_running_services.yaml\").toString());\n+\n+        kernel.launch();\n+\n+        Configuration config = kernel.getConfig();\n+        config.lookup(SERVICES_NAMESPACE_TOPIC, \"sleeperB\",\n+                      DEPLOYMENT_SAFE_NAMESPACE_TOPIC, \"testKey\")\n+              .withNewerValue(System.currentTimeMillis(), \"initialValue\");\n+\n+        // WHEN\n+        // merge broken config\n+        HashMap<Object, Object> brokenConfig = new HashMap<Object, Object>() {{\n+            put(SERVICES_NAMESPACE_TOPIC, new HashMap<Object, Object>() {{\n+                put(\"sleeperB\", new HashMap<Object, Object>() {{\n+                    put(\"lifecycle\", new HashMap<Object, Object>() {{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79a97787415a911663277a73a3da47b187b2b093"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4MTU1OA==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/227#discussion_r422281558", "createdAt": "2020-05-08T17:50:22Z", "author": {"login": "chaurah"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -467,8 +475,77 @@ void GIVEN_a_running_service_is_not_disruptable_WHEN_deployed_THEN_deployment_wa\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_running_with_rollback_safe_param_WHEN_rollback_THEN_rollback_safe_param_not_updated(\n+            ExtensionContext context)\n+            throws Throwable {\n+\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Service sleeperB in broken state after deployment\");\n+\n+        // GIVEN\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"long_running_services.yaml\").toString());\n+\n+        kernel.launch();\n+\n+        Configuration config = kernel.getConfig();\n+        config.lookup(SERVICES_NAMESPACE_TOPIC, \"sleeperB\",\n+                      DEPLOYMENT_SAFE_NAMESPACE_TOPIC, \"testKey\")\n+              .withNewerValue(System.currentTimeMillis(), \"initialValue\");\n+\n+        // WHEN\n+        // merge broken config\n+        HashMap<Object, Object> brokenConfig = new HashMap<Object, Object>() {{\n+            put(SERVICES_NAMESPACE_TOPIC, new HashMap<Object, Object>() {{\n+                put(\"sleeperB\", new HashMap<Object, Object>() {{\n+                    put(\"lifecycle\", new HashMap<Object, Object>() {{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTkyMw=="}, "originalCommit": {"oid": "79a97787415a911663277a73a3da47b187b2b093"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4675, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}