{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDgyOTU3", "number": 164, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1MjoyNVrODvwVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzoxNzo1M1rODwoqIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAxNjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1MjoyNVrOGCXghA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo0NjoxNlrOGCdF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNTQ5Mg==", "bodyText": "How does this work for completing with an error? Does that count as a completion? We really don't want to be get()ing with no timeout since it obviously blocks forever.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405135492", "createdAt": "2020-04-07T21:52:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -45,11 +46,11 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             //  of all groups, when multi group support is added.\n             List<String> rootPackages = new ArrayList<>(document.getRootPackages());\n \n-            List<PackageIdentifier> desiredPackages = dependencyResolver\n-                    .resolveDependencies(document, rootPackages);\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document, rootPackages);\n             // Block this without timeout because a device can be offline and it can take quite a long time\n             // to download a package.\n-            packageStore.preparePackages(desiredPackages).get();\n+            List<CompletableFuture<Boolean>> preparePackageFutures = packageStore.preparePackages(desiredPackages);\n+            CompletableFuture.allOf(preparePackageFutures.toArray(new CompletableFuture[0])).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNjk5Nw==", "bodyText": "I'm fine with get() blocking as long as DeploymentTask can cancel this when the deployment is being cancelled. My reasoning is, even if deploymentTask put a timeout on the get() call, how would it handle the timeout? fail the deployment? It's undesired because we expect the deployment can be hanging for a long time if the network is off; retry on the timeout? My preference is inside preparePackages() method, we should retry on the download packages.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405226997", "createdAt": "2020-04-08T02:46:16Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -45,11 +46,11 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             //  of all groups, when multi group support is added.\n             List<String> rootPackages = new ArrayList<>(document.getRootPackages());\n \n-            List<PackageIdentifier> desiredPackages = dependencyResolver\n-                    .resolveDependencies(document, rootPackages);\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document, rootPackages);\n             // Block this without timeout because a device can be offline and it can take quite a long time\n             // to download a package.\n-            packageStore.preparePackages(desiredPackages).get();\n+            List<CompletableFuture<Boolean>> preparePackageFutures = packageStore.preparePackages(desiredPackages);\n+            CompletableFuture.allOf(preparePackageFutures.toArray(new CompletableFuture[0])).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNTQ5Mg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAxNzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1Mjo0NFrOGCXhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTo1Njo0MVrOGC-p7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNTYyMg==", "bodyText": "If possible, remove these suppressions as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405135622", "createdAt": "2020-04-07T21:52:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MjEwMQ==", "bodyText": "sure, they can be removed now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405642101", "createdAt": "2020-04-08T16:09:40Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNTYyMg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3Njg3Nw==", "bodyText": "Sorry, I notice we can't remove it now, it still has legacy methods using it. I will remove them once we delete the legacy methods in the next round.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405776877", "createdAt": "2020-04-08T19:56:41Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNTYyMg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyMjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NDoyM1rOGCXkGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoxMjoyMlrOGC2idg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjQxMA==", "bodyText": "should this all be encapsulated into findPackageRecipe? Seems that all of these go together.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405136410", "createdAt": "2020-04-07T21:54:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0Mzg5NA==", "bodyText": "My intention is to separate elementary CRUD operations with business logic. CRUD operations can be further refactor to a separate class, and the unit tests can be more efficient.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405643894", "createdAt": "2020-04-08T16:12:22Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjQxMA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyNDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NToxMFrOGCXldA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowOTo1OFrOGC2cRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjc1Ng==", "bodyText": "Please rename e to something more meaningful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405136756", "createdAt": "2020-04-07T21:55:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MjMwOA==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405642308", "createdAt": "2020-04-08T16:09:58Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjc1Ng=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyNzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NjowNVrOGCXm3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozODoxNlrOGC8ByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzExNw==", "bodyText": "Shouldn't this exception be caught in the outside of this lambda? Since you expect that it can be thrown, I think you should rewrap it in one of your package exceptions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405137117", "createdAt": "2020-04-07T21:56:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NjU1OA==", "bodyText": "It doesn't expect URI syntax error. The recipe syntax should be validated on the cloud. So here I say if it's syntax error, fail the task.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405646558", "createdAt": "2020-04-08T16:16:19Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzExNw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3NzIwMg==", "bodyText": "We don't want to propagate errors as runtime errors, so I'd suggest to catch it outside of the lambda and then rethrow as a checked exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405677202", "createdAt": "2020-04-08T17:02:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzExNw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMzgzMg==", "bodyText": "In the current logic as you can see, checked exception will be handled instead of failing the preparePackage task. I throw RuntimeException is intentional for failing the task because URL format is not expected to be wrong, the task can't be retried/resumed given format error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405733832", "createdAt": "2020-04-08T18:38:16Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzExNw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAyOTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1Njo1OFrOGCXohw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1NDowNlrOGDItWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw==", "bodyText": "This can never return a meaningful error message, right? All it can tell you is that if failed? I don't think that's a very good interface. We want the user to get the error all the way back up in the console when possible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405137543", "createdAt": "2020-04-07T21:56:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTM4Nw==", "bodyText": "From the caller perspective, does it care what errors of preparing a package? Or it only cares whether it succeeds or not.\nYou are right, the error should surface to the customer when possible. I am thinking package store should report its error like kernel does. Kernel doesn't need to report its errors to DA, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405671387", "createdAt": "2020-04-08T16:54:13Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3NzcxMg==", "bodyText": "Without an exception or returned error, how can the caller learn what went wrong? Yes, kernel does need to report errors to DA if the errors will cause the deployment to fail.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405677712", "createdAt": "2020-04-08T17:03:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNzE0Mg==", "bodyText": "Can you explain what DA will do given preparePacakge checked exceptions? Does it expect multiple states return in order to drive different error handling strategies or it only expect bi-states - prepared or not? If bi-states, I think boolean return can represent it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405737142", "createdAt": "2020-04-08T18:43:48Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTUwNw==", "bodyText": "No, it needs much more information. We need to know what went wrong. \"Unable to download package Stream Manager due to corrupted checksum\" or whatever.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405739507", "createdAt": "2020-04-08T18:47:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0OTE3OA==", "bodyText": "What actions will DA do per exception? Can you give a few concrete strategies examples?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405749178", "createdAt": "2020-04-08T19:04:31Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1MTc3Ng==", "bodyText": "It depends on the exception. But broadly there are 2 classes: retryable and non-retryable. If it is retryable, then it should retry a certain number of times before giving up. If it is non-retryable then it should give up immediately and report back the exception all the way to the customer through the console.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405751776", "createdAt": "2020-04-08T19:09:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzOTQxOA==", "bodyText": "Checked exception usually described method return state that shouldn't fail the program, in most case the program can retry on the task. Package store checked exceptions are in such case, mostly retryable. Unchecked exception, such as artifact URI syntax error, are given up immediately and report to the caller the program can't proceed. In terms of the caller DA, I don't think it needs to distinguish different checked exception types now, it only cares about whether package is prepared or not after possible retry inside package store.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405839418", "createdAt": "2020-04-08T21:58:32Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTU5Mw==", "bodyText": "Feng raised a good point on DA reporting deployment failure. In such situation, it needs exception info. So I change to populate the exceptions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405941593", "createdAt": "2020-04-09T03:54:06Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzU0Mw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAzMDc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzoyMlrOGCXpIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0MDowOFrOGC3p-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzY5Nw==", "bodyText": "Prefer Optional instead of returning null.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405137697", "createdAt": "2020-04-07T21:57:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MjIwMA==", "bodyText": "I am fine with optional. The intention is to distinguish between 'get' and 'find' cases. We can have a convention on query method naming, for example:\nget - throw exception if not exist\nfind - return empty if not exist\nIn the find returning empty case, do we need to distinguish null with empty? If we do, it's a good reason to use optional.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405662200", "createdAt": "2020-04-08T16:40:08Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzY5Nw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAzNjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1OToyM1rOGCXs2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyNzo0OFrOGC7pOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODY0OA==", "bodyText": "LOCAL_CACHE_PATH needs to be a variable, doesn't it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405138648", "createdAt": "2020-04-07T21:59:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NzgzMg==", "bodyText": "It's actually mocked repository location. It will be deleted once connecting to cloud. So I leave it there now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405647832", "createdAt": "2020-04-08T16:18:17Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODY0OA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3ODcyNA==", "bodyText": "Why would this be removed? You will always need a location to store the package recipes. Some of our tests set this path to something different, so please keep it as a variable so those tests/benchmarks don't break.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405678724", "createdAt": "2020-04-08T17:05:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODY0OA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNzU0Ng==", "bodyText": "It's static final, I didn't change it. You said we are setting it in unit tests, are we doing through reflection? And why do we need it? If talking about recipes for testing, it can be placed into test resource folder.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405727546", "createdAt": "2020-04-08T18:27:48Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzODY0OA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAzOTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowMDozM1rOGCXuzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyMDoyNFrOGC23iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTE0OA==", "bodyText": "Use Path.toFile()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405139148", "createdAt": "2020-04-07T22:00:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())\n+                    .resolve(packageIdentifier.getVersion().getValue()).resolve(\"recipe.yaml\"));\n+        } catch (PackageLoadingException e) {\n+            throw new PackageDownloadException(String.format(\"Failed to download package %s recipe\", packageIdentifier),\n+                    e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {\n+        try {\n+            OBJECT_MAPPER.writeValue(new File(saveToFile.toString()), pkg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0OTI4OA==", "bodyText": "sure, thanks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405649288", "createdAt": "2020-04-08T16:20:24Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working\n+        try {\n+            return findPackageRecipe(LOCAL_CACHE_PATH.resolve(packageIdentifier.getName())\n+                    .resolve(packageIdentifier.getVersion().getValue()).resolve(\"recipe.yaml\"));\n+        } catch (PackageLoadingException e) {\n+            throw new PackageDownloadException(String.format(\"Failed to download package %s recipe\", packageIdentifier),\n+                    e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {\n+        try {\n+            OBJECT_MAPPER.writeValue(new File(saveToFile.toString()), pkg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTE0OA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA1NDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowNjowMVrOGCX3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzo1MjoxOVrOGDIrnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ0OQ==", "bodyText": "Why do you return a list of futures instead of one future? The caller of this method shouldn't be concerned about which package is prepared or not.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405141449", "createdAt": "2020-04-07T22:06:01Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NDUzMA==", "bodyText": "I am thinking the opposite. If the caller gives the method a list of package id, it probably want to know whether they are prepared or not, and when they are done. The caller can choose to wait all of them finished before proceeding like we are doing now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405684530", "createdAt": "2020-04-08T17:14:58Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ0OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNTQwNg==", "bodyText": "What would the caller do if some of them are not completed? The retry is handled in preaparePackages(). The caller cannot do anything except waiting (with the current design).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405725406", "createdAt": "2020-04-08T18:24:09Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ0OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1Njk5Mw==", "bodyText": "Yes, they need to wait them finished before proceeding. But returning individual future can given the caller control of individual tasks, and deployment can try to re-prepare the packages not prepared successfully if the deployment choose to retry in a later time (of course, preparePackage itself can retry on error as well).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405756993", "createdAt": "2020-04-08T19:19:06Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ0OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk0MTE1MQ==", "bodyText": "Discussed offline, there is no strong reason to have packages preparation running in parallel, so keep it simple as running sequentially and one fail as the whole task fail.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405941151", "createdAt": "2020-04-09T03:52:19Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ0OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA1NDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowNjowNlrOGCX36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozODoxMlrOGC3lTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ4MQ==", "bodyText": "This can be greatly simplified.\nFiles.copy(\n      inputStream, \n      saveToPath.resolve(filename),\n      StandardCopyOption.REPLACE_EXISTING);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405141481", "createdAt": "2020-04-07T22:06:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MTAwNA==", "bodyText": "Yeah, it's much better. Thanks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405661004", "createdAt": "2020-04-08T16:38:12Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTQ4MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA1NjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowNjo1OFrOGCX5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxMTowNFrOGC9LHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTgzOQ==", "bodyText": "Instead of taking two paths as input, why not just take one path as the package root path and create recipe and artifact sub directories?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405141839", "createdAt": "2020-04-07T22:06:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n public class PackageStore {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n \n+    private final Path recipeDirectory;\n+\n+    private final Path artifactDirectory;\n+\n+    public PackageStore(@Named(\"RecipeDirectory\") Path recipeDirectory,\n+                        @Named(\"ArtifactDirectory\") Path artifactDirectory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NTc2Ng==", "bodyText": "The thought is just to give more flexibility. Although I am not sure whether it's valid case to place recipe and artifact caches in the different volumes, having kernel initializer decided it is my intention. The initializer can initialize them to be the sub-directories of the same directory.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405685766", "createdAt": "2020-04-08T17:17:05Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n public class PackageStore {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n \n+    private final Path recipeDirectory;\n+\n+    private final Path artifactDirectory;\n+\n+    public PackageStore(@Named(\"RecipeDirectory\") Path recipeDirectory,\n+                        @Named(\"ArtifactDirectory\") Path artifactDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTgzOQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNDMxNw==", "bodyText": "I cannot think of a reason that customers would want to have recipe and artifact in separate volumes. My concern is the two parameters are of the type and it's error-prone that the caller can initialize this object with the parameters reversed and cause runtime error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405724317", "createdAt": "2020-04-08T18:22:22Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n public class PackageStore {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n \n+    private final Path recipeDirectory;\n+\n+    private final Path artifactDirectory;\n+\n+    public PackageStore(@Named(\"RecipeDirectory\") Path recipeDirectory,\n+                        @Named(\"ArtifactDirectory\") Path artifactDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTgzOQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1MjYwNw==", "bodyText": "Ok, there is no need to do things we are not sure. I will combine them.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405752607", "createdAt": "2020-04-08T19:11:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,21 +35,34 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n public class PackageStore {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n \n+    private final Path recipeDirectory;\n+\n+    private final Path artifactDirectory;\n+\n+    public PackageStore(@Named(\"RecipeDirectory\") Path recipeDirectory,\n+                        @Named(\"ArtifactDirectory\") Path artifactDirectory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTgzOQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA1ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowNzo0NFrOGCX6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNjowNFrOGC3f3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjEyOQ==", "bodyText": "extract filename= to a variable and then use .length() on it instead of hardcoding the 10. Also, are we positive we want to read all the way to the end? I believe headers like this may be comma or semicolon separated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405142129", "createdAt": "2020-04-07T22:07:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1OTYxMw==", "bodyText": "Disposition header has protocol on the content, so I think we can read to the end.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\nYeah, I will remove hard-coded 10 though.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405659613", "createdAt": "2020-04-08T16:36:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjEyOQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA2MTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowOTowM1rOGCX8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMzoxNVrOGC72Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjcxMQ==", "bodyText": "I would rather throw a PackageLoadingException if the package does not exist instead of returning null. Here you're forcing the caller to both check the exception and null.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405142711", "createdAt": "2020-04-07T22:09:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4ODI5OQ==", "bodyText": "As stated in the Michael's comment, I would suggest to distinguish method throw exception with method return null for retrieving item. It's usually through a conventional naming pattern, such as 'get' vs 'find'. So the lib caller can choose the one for its use case.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405688299", "createdAt": "2020-04-08T17:21:19Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjcxMQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNTMyMg==", "bodyText": "This is the place I prefer consistency. In the code base, we already use optional at a number of places.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405715322", "createdAt": "2020-04-08T18:07:12Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjcxMQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMDg0Ng==", "bodyText": "Sure, I will follow the convention. Find return Optional.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405730846", "createdAt": "2020-04-08T18:33:15Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MjcxMQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA2MzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowOTo0MFrOGCX9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNDowN1rOGDvyCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mjk0MQ==", "bodyText": "This is assuming too much about the format of the URL. Try something like\nx = uri.getPath().split(\"/\");\nlastPath = x[x.length - 1];", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405142941", "createdAt": "2020-04-07T22:09:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);\n+            }\n+        }\n+        int startIndex = preSignedUrl.lastIndexOf('/') + 1;\n+        int endIndex = preSignedUrl.indexOf('?');\n+        return endIndex == -1 ? preSignedUrl.substring(startIndex) : preSignedUrl.substring(startIndex, endIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMzI4MQ==", "bodyText": "What case are we handling here? I'm assuming url with query string? Something like /filename.txt?sessionId=value so that we still extract filename.txt.\nAdd an example in the comment would be very helpful!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405203281", "createdAt": "2020-04-08T01:16:22Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);\n+            }\n+        }\n+        int startIndex = preSignedUrl.lastIndexOf('/') + 1;\n+        int endIndex = preSignedUrl.indexOf('?');\n+        return endIndex == -1 ? preSignedUrl.substring(startIndex) : preSignedUrl.substring(startIndex, endIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mjk0MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjM1Mg==", "bodyText": "Yeah, Ethan gives a good example, the URL can contain parameters. I will add some comments.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405656352", "createdAt": "2020-04-08T16:30:55Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);\n+            }\n+        }\n+        int startIndex = preSignedUrl.lastIndexOf('/') + 1;\n+        int endIndex = preSignedUrl.indexOf('?');\n+        return endIndex == -1 ? preSignedUrl.substring(startIndex) : preSignedUrl.substring(startIndex, endIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mjk0MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4Mjg0NQ==", "bodyText": "You're manipulating a URL as a string, but Java has builtins to do this for you which will work properly when given a malformed string. Try the solution I gave in my first comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406482845", "createdAt": "2020-04-09T21:17:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);\n+            }\n+        }\n+        int startIndex = preSignedUrl.lastIndexOf('/') + 1;\n+        int endIndex = preSignedUrl.indexOf('?');\n+        return endIndex == -1 ? preSignedUrl.substring(startIndex) : preSignedUrl.substring(startIndex, endIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mjk0MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MTc2OQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406581769", "createdAt": "2020-04-10T03:04:07Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream();\n+                     OutputStream outputStream = Files.newOutputStream(saveToPath.resolve(filename))) {\n+                    int bytesRead;\n+                    byte[] buffer = new byte[BUFFER_SIZE];\n+                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                        outputStream.write(buffer, 0, bytesRead);\n+                    }\n+                }\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n+    }\n+\n+    HttpURLConnection create(URL url) throws IOException {\n+        return (HttpURLConnection) url.openConnection();\n+    }\n+\n+    String getArtifactDownloadURL(String packageArn, String artifactName) {\n+        //TODO retrieve artifact presigned download URL from cloud as redirection\n+        return \"placeholder\";\n+    }\n+\n+    String extractFilename(String preSignedUrl, String contentDisposition) {\n+        if (contentDisposition != null) {\n+            int index = contentDisposition.indexOf(\"filename=\");\n+            if (index > 0) {\n+                return contentDisposition.substring(index + 10, contentDisposition.length() - 1);\n+            }\n+        }\n+        int startIndex = preSignedUrl.lastIndexOf('/') + 1;\n+        int endIndex = preSignedUrl.indexOf('?');\n+        return endIndex == -1 ? preSignedUrl.substring(startIndex) : preSignedUrl.substring(startIndex, endIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mjk0MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA2OTcyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/TestHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxMjoxNFrOGCYBtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyMjo1OFrOGC7eEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mzk4OQ==", "bodyText": "This can be simplified.\nFiles.walk(pathToBeDeleted)\n      .sorted(Comparator.reverseOrder())\n      .map(Path::toFile)\n      .forEach(File::delete);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405143989", "createdAt": "2020-04-07T22:12:14Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/TestHelper.java", "diffHunk": "@@ -75,4 +78,22 @@ public static String getPackageRecipeFromMockRepository(String testPackageName,\n         String recipeFmt = new String(Files.readAllBytes(path));\n         return String.format(recipeFmt, rootPath.toString());\n     }\n+\n+    public static void cleanDirectory(Path pathToDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1MjQ2MQ==", "bodyText": "The directory will contain sub-directories. Will the above method recursively clean sub-directories?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405652461", "createdAt": "2020-04-08T16:25:10Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/TestHelper.java", "diffHunk": "@@ -75,4 +78,22 @@ public static String getPackageRecipeFromMockRepository(String testPackageName,\n         String recipeFmt = new String(Files.readAllBytes(path));\n         return String.format(recipeFmt, rootPath.toString());\n     }\n+\n+    public static void cleanDirectory(Path pathToDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mzk4OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MDUyNw==", "bodyText": "I think you can switch it to walkFileTree https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#walkFileTree-java.nio.file.Path-java.nio.file.FileVisitor-", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405680527", "createdAt": "2020-04-08T17:08:25Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/TestHelper.java", "diffHunk": "@@ -75,4 +78,22 @@ public static String getPackageRecipeFromMockRepository(String testPackageName,\n         String recipeFmt = new String(Files.readAllBytes(path));\n         return String.format(recipeFmt, rootPath.toString());\n     }\n+\n+    public static void cleanDirectory(Path pathToDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mzk4OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNDY4OQ==", "bodyText": "Yeah, it's what I am using.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405724689", "createdAt": "2020-04-08T18:22:58Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/TestHelper.java", "diffHunk": "@@ -75,4 +78,22 @@ public static String getPackageRecipeFromMockRepository(String testPackageName,\n         String recipeFmt = new String(Files.readAllBytes(path));\n         return String.format(recipeFmt, rootPath.toString());\n     }\n+\n+    public static void cleanDirectory(Path pathToDirectory) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0Mzk4OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA3ODM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNToyMlrOGCYGxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyNToyMlrOGC3Eaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTI4Nw==", "bodyText": "typo: filename", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405145287", "createdAt": "2020-04-07T22:15:22Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloaderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GreengrassRepositoryDownloaderTest {\n+\n+    @Spy\n+    private GreengrassRepositoryDownloader downloader;\n+\n+    @Mock\n+    private HttpURLConnection connection;\n+\n+    @Test\n+    void GIVEN_artifact_url_WHEN_attempt_download_THEN_task_succeed() throws Exception {\n+        doReturn(\"https://www.amazon.com/artifact.txt\").when(downloader)\n+                .getArtifactDownloadURL(anyString(), anyString());\n+        doReturn(connection).when(downloader).create(any());\n+        when(connection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n+        Path mockArtifactPath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.0.0\")\n+                .resolve(\"monitor_artifact_100.txt\");\n+        when(connection.getInputStream()).thenReturn(new FileInputStream(mockArtifactPath.toString()));\n+\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(\"CoolService\").resolve(\"1.0.0\");\n+        Files.createDirectories(saveToPath);\n+        downloader.downloadArtifactToPath(pkgId, new URI(\"greengrass:binary\"), saveToPath);\n+\n+        byte[] originalFile = Files.readAllBytes(mockArtifactPath);\n+        byte[] downloadFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(Arrays.equals(originalFile, downloadFile), is(true));\n+\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_http_connection_error_WHEN_attempt_download_THEN_return_exception() throws Exception {\n+        doReturn(\"https://www.amazon.com/artifact.txt\").when(downloader)\n+                .getArtifactDownloadURL(anyString(), anyString());\n+        doReturn(connection).when(downloader).create(any());\n+        when(connection.getResponseCode()).thenThrow(IOException.class);\n+\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+        assertThrows(IOException.class,\n+                () -> downloader.downloadArtifactToPath(pkgId, new URI(\"greengrass:binary\"), null));\n+    }\n+\n+    @Test\n+    void GIVEN_filename_in_disposition_WHEN_attempt_resolve_filename_THEN_parse_filename() {\n+        String filename = downloader\n+                .extractFilename(\"https://www.amazon.com/artifact.txt\", \"attachment; \" + \"filename=\\\"filename.jpg\\\"\");\n+\n+        assertThat(filename, is(\"filename.jpg\"));\n+    }\n+\n+    @Test\n+    void GIVEN_filename_in_url_WHEN_attempt_resolve_filenmae_THEN_parse_filename() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1MjU4Nw==", "bodyText": "Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405652587", "createdAt": "2020-04-08T16:25:22Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloaderTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.packagemanager.TestHelper;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GreengrassRepositoryDownloaderTest {\n+\n+    @Spy\n+    private GreengrassRepositoryDownloader downloader;\n+\n+    @Mock\n+    private HttpURLConnection connection;\n+\n+    @Test\n+    void GIVEN_artifact_url_WHEN_attempt_download_THEN_task_succeed() throws Exception {\n+        doReturn(\"https://www.amazon.com/artifact.txt\").when(downloader)\n+                .getArtifactDownloadURL(anyString(), anyString());\n+        doReturn(connection).when(downloader).create(any());\n+        when(connection.getResponseCode()).thenReturn(HttpURLConnection.HTTP_OK);\n+        Path mockArtifactPath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.0.0\")\n+                .resolve(\"monitor_artifact_100.txt\");\n+        when(connection.getInputStream()).thenReturn(new FileInputStream(mockArtifactPath.toString()));\n+\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+        Path testCache = TestHelper.getPathForLocalTestCache();\n+        Path saveToPath = testCache.resolve(\"CoolService\").resolve(\"1.0.0\");\n+        Files.createDirectories(saveToPath);\n+        downloader.downloadArtifactToPath(pkgId, new URI(\"greengrass:binary\"), saveToPath);\n+\n+        byte[] originalFile = Files.readAllBytes(mockArtifactPath);\n+        byte[] downloadFile = Files.readAllBytes(saveToPath.resolve(\"artifact.txt\"));\n+        assertThat(Arrays.equals(originalFile, downloadFile), is(true));\n+\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_http_connection_error_WHEN_attempt_download_THEN_return_exception() throws Exception {\n+        doReturn(\"https://www.amazon.com/artifact.txt\").when(downloader)\n+                .getArtifactDownloadURL(anyString(), anyString());\n+        doReturn(connection).when(downloader).create(any());\n+        when(connection.getResponseCode()).thenThrow(IOException.class);\n+\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+        assertThrows(IOException.class,\n+                () -> downloader.downloadArtifactToPath(pkgId, new URI(\"greengrass:binary\"), null));\n+    }\n+\n+    @Test\n+    void GIVEN_filename_in_disposition_WHEN_attempt_resolve_filename_THEN_parse_filename() {\n+        String filename = downloader\n+                .extractFilename(\"https://www.amazon.com/artifact.txt\", \"attachment; \" + \"filename=\\\"filename.jpg\\\"\");\n+\n+        assertThat(filename, is(\"filename.jpg\"));\n+    }\n+\n+    @Test\n+    void GIVEN_filename_in_url_WHEN_attempt_resolve_filenmae_THEN_parse_filename() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTI4Nw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA4MTg1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/recipe.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNjo1MlrOGCYJDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjoyODoxNVrOGC3MAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTg2OQ==", "bodyText": "URL format? greengrass://", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405145869", "createdAt": "2020-04-07T22:16:52Z", "author": {"login": "MikeDombo"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/recipe.yaml", "diffHunk": "@@ -16,7 +16,7 @@ Lifecycle:\n       skipif: onpath git\n       script: brew install git\n Artifacts:\n-  - %s/MonitoringService-1.1.0/monitor_artifact_100.txt\n+  - greengrass:monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NDUyOA==", "bodyText": "It is actually URI. For instance artifacts in greengrass repository, the customer will 'greengrass:artifact name' to identify it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405654528", "createdAt": "2020-04-08T16:28:15Z", "author": {"login": "wikimonkey"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/recipe.yaml", "diffHunk": "@@ -16,7 +16,7 @@ Lifecycle:\n       skipif: onpath git\n       script: brew install git\n Artifacts:\n-  - %s/MonitoringService-1.1.0/monitor_artifact_100.txt\n+  - greengrass:monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NTg2OQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5MDM3OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/bad_recipe.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNjoyM1rOGCbADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NDozMlrOGC4OxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjcxNw==", "bodyText": "I'm assuming this is the bad part? Could we put a comment here to indicate about the \"bad\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405192717", "createdAt": "2020-04-08T00:36:23Z", "author": {"login": "leaf94"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/bad_recipe.yaml", "diffHunk": "@@ -0,0 +1,34 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: MonitoringService\n+Description: Test recipe for Evergreen packages\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: TestParam\n+    value: TestVal\n+    type: String\n+Lifecycle:\n+  all:\n+    install:\n+      skipif: onpath git\n+      script: sudo apt-get install git\n+  debian:\n+    install:\n+      skipif: onpath git\n+      script: sudo apt-get install git\n+  macos:\n+    install:\n+      skipif: onpath git\n+      script: brew install git\n+    run: git status\n+Artifacts:\n+  - %s/MonitoringService-1.0.0/monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTYyMA==", "bodyText": "will do", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405671620", "createdAt": "2020-04-08T16:54:32Z", "author": {"login": "wikimonkey"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/bad_recipe.yaml", "diffHunk": "@@ -0,0 +1,34 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: MonitoringService\n+Description: Test recipe for Evergreen packages\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: TestParam\n+    value: TestVal\n+    type: String\n+Lifecycle:\n+  all:\n+    install:\n+      skipif: onpath git\n+      script: sudo apt-get install git\n+  debian:\n+    install:\n+      skipif: onpath git\n+      script: sudo apt-get install git\n+  macos:\n+    install:\n+      skipif: onpath git\n+      script: brew install git\n+    run: git status\n+Artifacts:\n+  - %s/MonitoringService-1.0.0/monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjcxNw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5NzA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDowMFrOGCbD7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NTowNFrOGC4QIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzcwOQ==", "bodyText": "remove +", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405193709", "createdAt": "2020-04-08T00:40:00Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }\n+\n+    @AfterEach\n+    void cleanTestCache() throws Exception {\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_valid_package_recipe_WHEN_attempt_find_package_THEN_package_model_is_returned()\n+            throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe\" + \".yaml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MTk2OA==", "bodyText": "Thanks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405671968", "createdAt": "2020-04-08T16:55:04Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }\n+\n+    @AfterEach\n+    void cleanTestCache() throws Exception {\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_valid_package_recipe_WHEN_attempt_find_package_THEN_package_model_is_returned()\n+            throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe\" + \".yaml\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzcwOQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQwMTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0Mjo0M1rOGCbGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NToxMlrOGC4Qfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NDQzOA==", "bodyText": "I will simplify to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n          \n          \n            \n                void downloadToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405194438", "createdAt": "2020-04-08T00:42:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+\n+public interface ArtifactDownloader {\n+\n+    void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MjA2Mw==", "bodyText": "will rename", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405672063", "createdAt": "2020-04-08T16:55:12Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+\n+public interface ArtifactDownloader {\n+\n+    void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NDQzOA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQwOTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0NzoxOVrOGCbLWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NToxOVrOGC4QyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NTYxMA==", "bodyText": "connect might be better than create", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405195610", "createdAt": "2020-04-08T00:47:19Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MjEzNw==", "bodyText": "yeah", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405672137", "createdAt": "2020-04-08T16:55:19Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5NTYxMA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ1MDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToxMDozM1rOGCbjjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NzowMlrOGC4U_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTgwNw==", "bodyText": "nit - I know we probably don't have and don't want to have guava lib - so \"Content-Dispsoition\" probably deserve a constant...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405201807", "createdAt": "2020-04-08T01:10:33Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MzIxNQ==", "bodyText": "Yes", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405673215", "createdAt": "2020-04-08T16:57:02Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final int BUFFER_SIZE = 4096;\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadArtifactToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = create(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(\"Content-Disposition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTgwNw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDQ4NjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTozMDoxOFrOGCb4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1Njo1NFrOGC4UoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNzExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n          \n          \n            \n                Package findPackageRecipe(Path recipePath) throws PackageLoadingException {", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405207112", "createdAt": "2020-04-08T01:30:18Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MzEyMQ==", "bodyText": "yeah", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405673121", "createdAt": "2020-04-08T16:56:54Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNzExMg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDU1MzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjoxMDowMFrOGCchDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyMTozM1rOGC5Qdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzU1MQ==", "bodyText": "This private method seems unnecessary. You merge it back to findPackageRecipe method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405217551", "createdAt": "2020-04-08T02:10:00Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4ODQzOA==", "bodyText": "Yeah, it can be merged.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405688438", "createdAt": "2020-04-08T17:21:33Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzU1MQ=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDU4OTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjozMDoyMVrOGCc2fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoyNTozNFrOGC5alg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMzAzOA==", "bodyText": "Why break these two lines to two methods?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405223038", "createdAt": "2020-04-08T02:30:21Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5MTAzMA==", "bodyText": "As stated in Michael's comment, I tries to separate storage CRUD methods with business logic, so we can further refactor them to another layer of encapsulations. I recommend we do that, because it will make unit test easier and we have multiple places using these CRUD methods.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405691030", "createdAt": "2020-04-08T17:25:34Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyMzAzOA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDYxODk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo0Nzo1MVrOGCdHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NDowOFrOGC6FKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzQ0OA==", "bodyText": "I don't think we should handle these exceptions together. This whole try catch block can be better organized. I agree with Michael that we can have findPackageRecipe() encapsulate the logic of reading and downloading package recipes.\nPackage findPackageRecipe() throws PackageRecipeUnavailableException {\n     // find the package on the device;\n     // if not found or encounter exception;\n     //      then download from the cloud and save on device;\n     //      if encounter exception again\n     //      retry or populate the exception up\n}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405227448", "createdAt": "2020-04-08T02:47:51Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMTkyOQ==", "bodyText": "Agree, this find-download-if-not-exist logic can be encapsulated into one function. But I would still keep elementary CRUD methods separated for reusability. And I like the proposal of download-if-find-encounter-exception, I thought about it, forget why I didn't do that way.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405701929", "createdAt": "2020-04-08T17:44:08Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzQ0OA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDYyMTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo0OTowNFrOGCdI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxMzo0NVrOGC9Q3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzc1Nw==", "bodyText": "Can you have a stub cloud client instead of just calling \"findPackageRecipe\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405227757", "createdAt": "2020-04-08T02:49:04Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4OTQxOQ==", "bodyText": "Can you clarify it a bit? It will be replaced by client from SDK to call cloud. But I am not sure what to put there given SDK is not there yet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405689419", "createdAt": "2020-04-08T17:23:07Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzc1Nw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMjM0OQ==", "bodyText": "We can have a stub wrapper that wraps the future client, such as GreengrassPackageServiceHelper.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405722349", "createdAt": "2020-04-08T18:18:55Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzc1Nw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NDA3OQ==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405754079", "createdAt": "2020-04-08T19:13:45Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -56,15 +76,144 @@\n      * they don't exist.\n      *\n      * @param pkgs a list of packages.\n-     * @return a future to notify once this is finished.\n+     * @return a list of future to notify packages are prepared or not.\n      */\n-    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n-            + \"implementation to be completed\")\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public List<CompletableFuture<Boolean>> preparePackages(List<PackageIdentifier> pkgs) {\n+        return pkgs.stream().map(pkg -> CompletableFuture.supplyAsync(() -> preparePackage(pkg)))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private boolean preparePackage(PackageIdentifier packageIdentifier) {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        boolean prepared = true;\n+        try {\n+            Package pkg = findPackageRecipe(recipePath);\n+            if (pkg == null) {\n+                pkg = downloadPackageRecipe(packageIdentifier);\n+                savePackageToFile(pkg, recipePath);\n+            }\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(e -> {\n+                try {\n+                    return new URI(e);\n+                } catch (URISyntaxException ex) {\n+                    String message = String.format(\"artifact URI %s is invalid\", e);\n+                    logger.atError().log(message, ex);\n+                    throw new RuntimeException(message, ex);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            prepared = false;\n+        }\n+        logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                .addKeyValue(\"succeed\", prepared).log();\n+        return prepared;\n+    }\n+\n+    Package findPackageRecipe(Path packageRecipe) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", packageRecipe).log();\n+        byte[] recipeContent = loadPackageRecipeContent(packageRecipe);\n+        if (recipeContent.length == 0) {\n+            return null;\n+        }\n+\n+        try {\n+            return OBJECT_MAPPER.readValue(recipeContent, Package.class);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private byte[] loadPackageRecipeContent(Path packageRecipe) throws PackageLoadingException {\n+        if (!Files.exists(packageRecipe) || !Files.isRegularFile(packageRecipe)) {\n+            return new byte[0];\n+        }\n+\n+        try {\n+            return Files.readAllBytes(packageRecipe);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", packageRecipe), e);\n+        }\n+    }\n+\n+    private Package downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n+        logger.atInfo().setEventType(\"downloading-package-recipe\").addKeyValue(\"packageIdentifier\",\n+                packageIdentifier).log();\n+        //TODO retrieve package recipe from cloud\n+        //load from local now to pretend it working", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyNzc1Nw=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDYzMTI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1NToxM1rOGCdO7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxMjozNFrOGC9OJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyOTI5Mg==", "bodyText": "This seems a code smell to me. Why do we need to use reflection for unit test? How can we refactor the code so that we can properly mock dependencies?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405229292", "createdAt": "2020-04-08T02:55:13Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNTE2NA==", "bodyText": "I think we want to encapsulate downloader(s) inside package store, downloaders are not necessarily injected into package store, so downloaders could be private fields, then unit tests mocking them have to use reflection, it's a bit smell, but I think it has a good reason to justify it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405715164", "createdAt": "2020-04-08T18:06:54Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyOTI5Mg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMTM0Mg==", "bodyText": "I disagree. Downloader bridges to the external remote services and should be injected. For example, we might want to reuse the same HTTP client for all the HTTP traffic and apply the same configuration (e.g. retry, cred, etc). It's much cleaner to inject the client instead of initialize it inside PackageStore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405721342", "createdAt": "2020-04-08T18:17:15Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyOTI5Mg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1MzM4MQ==", "bodyText": "Good point, downloaders might be same. I will do simplest thing, having just one downloader now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405753381", "createdAt": "2020-04-08T19:12:34Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.ArtifactDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.lang.reflect.Field;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.hamcrest.core.IsNull.notNullValue;\n+import static org.hamcrest.core.IsNull.nullValue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private PackageStore packageStore;\n+\n+    private Path testCache;\n+\n+    @Mock\n+    private static ArtifactDownloader artifactDownloader;\n+\n+    @BeforeEach\n+    void beforeEach() throws Exception {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, testCache);\n+\n+        Field downloaderField = PackageStore.ArtifactProvider.class.getDeclaredField(\"artifactDownloader\");\n+        downloaderField.setAccessible(true);\n+        for (PackageStore.ArtifactProvider artifactProvider : PackageStore.ArtifactProvider.values()) {\n+            downloaderField.set(artifactProvider, artifactDownloader);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyOTI5Mg=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDYzODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1OTozMVrOGCdTTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTowMToxNFrOGC82EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMDQxNA==", "bodyText": "Why do we need this? Can't we assume the majority of the respository endpoint is HTTP based? How would the Greengrass repository be different from a docker repository in terms of downloading?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405230414", "createdAt": "2020-04-08T02:59:31Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -167,4 +314,18 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n                                                      final Path cacheFolder) {\n         return getPackageStorageRoot(packageName, cacheFolder).resolve(packageVersion);\n     }\n+\n+    enum ArtifactProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NTE2Mw==", "bodyText": "I assume processing logic for different registries/repos are more or less different. For example, greengrass artifact repo URI will look like 'greengrass:artifact.bin', docker's may/may not have image URL. Also in terms of downloading, for our repo we utilize s3 presigned URL, I am not sure whether it will be same for docker/github/CodeArtifact.\nIf they turn out to be the same, we definitely should make this simpler. But IMO can be refactored later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405695163", "createdAt": "2020-04-08T17:32:32Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -167,4 +314,18 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n                                                      final Path cacheFolder) {\n         return getPackageStorageRoot(packageName, cacheFolder).resolve(packageVersion);\n     }\n+\n+    enum ArtifactProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMDQxNA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjgwNw==", "bodyText": "I prefer we start simple and refactor later to accommodate different cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405716807", "createdAt": "2020-04-08T18:09:42Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -167,4 +314,18 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n                                                      final Path cacheFolder) {\n         return getPackageStorageRoot(packageName, cacheFolder).resolve(packageVersion);\n     }\n+\n+    enum ArtifactProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMDQxNA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NzIxNg==", "bodyText": "I can go with simple approach now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r405747216", "createdAt": "2020-04-08T19:01:14Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -167,4 +314,18 @@ private static Path getPackageVersionStorageRoot(final String packageName, final\n                                                      final Path cacheFolder) {\n         return getPackageStorageRoot(packageName, cacheFolder).resolve(packageVersion);\n     }\n+\n+    enum ArtifactProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzMDQxNA=="}, "originalCommit": {"oid": "8fa440347feb757342db7dbcaf4e688fb206387d"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ3NjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MjowOVrOGDo-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo1NTowNVrOGDsDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDE5MA==", "bodyText": "nit: use plural, package -> packages.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406470190", "createdAt": "2020-04-09T20:52:09Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -81,9 +81,11 @@\n     public Path configPath;\n     public Path clitoolPath;\n     public Path workPath;\n+    public Path packageStorePath;\n     public String configPathName = \"~root/config\";\n     public String clitoolPathName = \"~root/bin\";\n     public String workPathName = \"~root/work\";\n+    public String packageStorePathName = \"~root/package\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxOTkxMg==", "bodyText": "Ok, as both of you prefer plural. Meant to be same as the others, such as ~root/config", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406519912", "createdAt": "2020-04-09T22:52:23Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -81,9 +81,11 @@\n     public Path configPath;\n     public Path clitoolPath;\n     public Path workPath;\n+    public Path packageStorePath;\n     public String configPathName = \"~root/config\";\n     public String clitoolPathName = \"~root/bin\";\n     public String workPathName = \"~root/work\";\n+    public String packageStorePathName = \"~root/package\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDE5MA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMDc4Mg==", "bodyText": "there isn't just one package, so it should be plural. There is only 1 config, and bin and work don't make any sense as bins and works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406520782", "createdAt": "2020-04-09T22:55:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -81,9 +81,11 @@\n     public Path configPath;\n     public Path clitoolPath;\n     public Path workPath;\n+    public Path packageStorePath;\n     public String configPathName = \"~root/config\";\n     public String clitoolPathName = \"~root/bin\";\n     public String workPathName = \"~root/work\";\n+    public String packageStorePathName = \"~root/package\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDE5MA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ4MDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1MzoxMVrOGDpAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzowNjo0OFrOGDsRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDc4NQ==", "bodyText": "I suppose this should be packageStorePath?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406470785", "createdAt": "2020-04-09T20:53:11Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class GreengrassPackageServiceHelper {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxODg4MQ==", "bodyText": "Hard-coded a pre-loaded local folder as the source for downloading package now. Will remove once connect to cloud.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406518881", "createdAt": "2020-04-09T22:49:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class GreengrassPackageServiceHelper {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDc4NQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNDE4OA==", "bodyText": "This should be removed together as the E2E and Integration test change. But now they are relying on it....", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406524188", "createdAt": "2020-04-09T23:06:48Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class GreengrassPackageServiceHelper {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MDc4NQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ4ODA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1NTozOFrOGDpFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo0OToxMVrOGDr8mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjAzMg==", "bodyText": "greenGrassArtifactDownloader -> greengrassArtifactDownloader", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406472032", "createdAt": "2020-04-09T20:55:38Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxODkzNg==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406518936", "createdAt": "2020-04-09T22:49:11Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjAzMg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUwNjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowMTo0MlrOGDpRbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoxNjo1MlrOGDrSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NTExOA==", "bodyText": "nit\nI'd prefer packages", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406475118", "createdAt": "2020-04-09T21:01:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -81,9 +81,11 @@\n     public Path configPath;\n     public Path clitoolPath;\n     public Path workPath;\n+    public Path packageStorePath;\n     public String configPathName = \"~root/config\";\n     public String clitoolPathName = \"~root/bin\";\n     public String workPathName = \"~root/work\";\n+    public String packageStorePathName = \"~root/package\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwODA4Mg==", "bodyText": "Try to be same as the others, so use package", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406508082", "createdAt": "2020-04-09T22:16:52Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -81,9 +81,11 @@\n     public Path configPath;\n     public Path clitoolPath;\n     public Path workPath;\n+    public Path packageStorePath;\n     public String configPathName = \"~root/config\";\n     public String clitoolPathName = \"~root/bin\";\n     public String workPathName = \"~root/work\";\n+    public String packageStorePathName = \"~root/package\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NTExOA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUxMDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowMzowMVrOGDpT_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyMDowNlrOGDrWww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NTc3NQ==", "bodyText": "Can we get rid of this? Shouldn't this be under the package directory that you setup in the Kernel?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406475775", "createdAt": "2020-04-09T21:03:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class GreengrassPackageServiceHelper {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTI1MQ==", "bodyText": "This class will be used to integrate with cloud. For now, mock retrieving packages from a local pre-loaded directory for integration tests. It will connect to cloud next sprint.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406509251", "createdAt": "2020-04-09T22:20:06Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class GreengrassPackageServiceHelper {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NTc3NQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUxMTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowMzoyOFrOGDpU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToxNDowNFrOGDuQmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjAwMQ==", "bodyText": "How would this RuntimeException be handled?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406476001", "createdAt": "2020-04-09T21:03:28Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {\n+                throw new RuntimeException(String.format(\"Failed to create recipe directory %s\", recipeDirectory), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMDY4Ng==", "bodyText": "DI would catch the exception, report as service error I believe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406520686", "createdAt": "2020-04-09T22:54:46Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {\n+                throw new RuntimeException(String.format(\"Failed to create recipe directory %s\", recipeDirectory), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjAwMQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0ODQ1MQ==", "bodyText": "Only if it's a service. Since PackageStore is not a service, the exception is logged and swallowed.\nSince later you uses Files.createDirectories(), which automatically creates missing directories. I think you can just remove the initializeSubDirectories() method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406548451", "createdAt": "2020-04-10T00:37:43Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {\n+                throw new RuntimeException(String.format(\"Failed to create recipe directory %s\", recipeDirectory), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjAwMQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1NjgyNg==", "bodyText": "I think it works for service dependency class too.\nFor artifacts, it will create its sub-folder subsequently. But for recipe, it's better to create its folder if not existed in constructor.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406556826", "createdAt": "2020-04-10T01:14:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {\n+                throw new RuntimeException(String.format(\"Failed to create recipe directory %s\", recipeDirectory), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjAwMQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUxNTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowNDozNVrOGDpW-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyMToxOFrOGDrYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjUzOQ==", "bodyText": "unused now? Get rid of it if so.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406476539", "createdAt": "2020-04-09T21:04:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwOTY0MA==", "bodyText": "No, still in use. E2E test uses this path as package store cache. That is what I said, we need to consolidate them.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406509640", "createdAt": "2020-04-09T22:21:18Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NjUzOQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUxODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowNTozN1rOGDpY1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyMzoyMFrOGDrbAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzAxNQ==", "bodyText": "is this constructor only for testing? If so, make it package-private and say in the comment that it is only for testing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406477015", "createdAt": "2020-04-09T21:05:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMDMzOQ==", "bodyText": "I'd like to have this constructor as the only constructor which can be used in kernel DI as well as unit test. But kernel DI doesn't support named constructor injection, so I give it a no args one. Will be cleaned up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406510339", "createdAt": "2020-04-09T22:23:20Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzAxNQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUyMjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowNzowMFrOGDpbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowNTowN1rOGDtPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzcwNg==", "bodyText": "Why are we doing this? If we can't create the directories we can't do anything. It needs to quit, but this exception should be handled by the caller so it doesn't take down the whole thread.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406477706", "createdAt": "2020-04-09T21:07:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxNDE5MQ==", "bodyText": "Yeah, it's unexpected error. The initialization happens at the start of the kernel, the kernel should handle the initialization error and properly shutdown or transit the service to the error state.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406514191", "createdAt": "2020-04-09T22:34:21Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzcwNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMTc5NA==", "bodyText": "Please propagate the error as a checked IOException. We always prefer checked exceptions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406521794", "createdAt": "2020-04-09T22:58:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzcwNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MDA4Nw==", "bodyText": "I need to use InjectionActions::postInject for initializing the directory before we have DI working with constructor named parameter. postInject doesn't define checked exception, so if I throw checked exception here, I have to convert to runtime exception over there, so the outcome to DI is same. And the current DI handles exception generically, so either one will be handled properly.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406540087", "createdAt": "2020-04-10T00:05:07Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -28,28 +39,82 @@\n import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n \n /**\n  * TODO Implement public methods.\n  */\n @SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n-public class PackageStore {\n+@NoArgsConstructor // for dependency injection\n+public class PackageStore implements InjectionActions {\n+    private static final Logger logger = LogManager.getLogger(PackageStore.class);\n     private static final Path LOCAL_CACHE_PATH =\n             Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+    private static final String RECIPE_DIRECTORY = \"recipe\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifact\";\n+    private static final String GREENGRASS_SCHEME = \"GREENGRASS\";\n \n     private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n-    private Path packageStorePath = LOCAL_CACHE_PATH;\n \n-    public PackageStore() {\n+    private Path recipeDirectory;\n+\n+    private Path artifactDirectory;\n+\n+    @Inject\n+    private GreengrassRepositoryDownloader greenGrassArtifactDownloader;\n+\n+    @Inject\n+    private GreengrassPackageServiceHelper greengrassPackageServiceHelper;\n+\n+    // Workaround using InjectionActions since constructor named pattern injection is not supported yet\n+    @Inject\n+    @Named(\"packageStoreDirectory\")\n+    private Path packageStoreDirectory;\n+\n+    /**\n+     * PackageStore constructor.\n+     * @param packageStoreDirectory directory for caching package recipes and artifacts\n+     * @param packageServiceHelper  greengrass package service client helper\n+     * @param artifactDownloader    artifact downloader\n+     */\n+    public PackageStore(Path packageStoreDirectory, GreengrassPackageServiceHelper packageServiceHelper,\n+                        GreengrassRepositoryDownloader artifactDownloader) {\n+        initializeSubDirectories(packageStoreDirectory);\n+        this.greengrassPackageServiceHelper = packageServiceHelper;\n+        this.greenGrassArtifactDownloader = artifactDownloader;\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        initializeSubDirectories(packageStoreDirectory);\n     }\n \n-    public PackageStore(Path packageStorePath) {\n-        this.packageStorePath = packageStorePath;\n+    private void initializeSubDirectories(Path packageStoreDirectory) {\n+        this.recipeDirectory = packageStoreDirectory.resolve(RECIPE_DIRECTORY);\n+        if (!Files.exists(recipeDirectory)) {\n+            try {\n+                Files.createDirectories(recipeDirectory);\n+            } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzcwNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUzMzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxMDoxOVrOGDph3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowMzo0MFrOGDvxaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTMyNQ==", "bodyText": "This can be a lambda", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406479325", "createdAt": "2020-04-09T21:10:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMTA5OA==", "bodyText": "Lambda doesn't like checked exception. So I use lombok @SneakyThrows to work with it. But it needs to declare this runnable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406511098", "createdAt": "2020-04-09T22:25:21Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTMyNQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMjAwNg==", "bodyText": "Don't use sneaky throws. If you need to wrap with a runtime exception just use a lambda and perform the wrapping yourself.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406522006", "createdAt": "2020-04-09T22:58:56Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTMyNQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MTYxMQ==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406581611", "createdAt": "2020-04-10T03:03:40Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTMyNQ=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUzNjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxMTozOFrOGDpkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDowMDowM1rOGDtKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTkyMg==", "bodyText": "This runs the task in the ForkJoin common pool. Please use our own threadpool from the Context.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406479922", "createdAt": "2020-04-09T21:11:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODgwOQ==", "bodyText": "will use executor service in context", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406538809", "createdAt": "2020-04-10T00:00:03Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3OTkyMg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjUzOTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxMjoyMFrOGDplmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxMjoyMFrOGDplmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MDI4Mw==", "bodyText": "This is a big code smell to me. Let's be explicit about what we're throwing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406480283", "createdAt": "2020-04-09T21:12:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU0NTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxNDoxOVrOGDppmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyNTo1OVrOGDre0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MTMwNA==", "bodyText": "remove the concatenation since this string is on a single line.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406481304", "createdAt": "2020-04-09T21:14:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();\n+        if (!Files.exists(recipePath) || !Files.isRegularFile(recipePath)) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] recipeContent;\n+        try {\n+            recipeContent = Files.readAllBytes(recipePath);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", recipePath), e);\n+        }\n+\n+        try {\n+            return Optional.of(OBJECT_MAPPER.readValue(recipeContent, Package.class));\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", recipePath), e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {\n+        try {\n+            OBJECT_MAPPER.writeValue(saveToFile.toFile(), pkg);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to save package recipe to %s\", saveToFile), e);\n+        }\n+    }\n+\n+    private Path resolveRecipePath(String packageName, Semver packageVersion) {\n+        return recipeDirectory.resolve(String.format(\"%s-%s.yaml\", packageName, packageVersion.getValue()));\n+    }\n+\n+    void downloadArtifactsIfNecessary(PackageIdentifier packageIdentifier, List<URI> artifactList)\n+            throws PackageLoadingException, PackageDownloadException {\n+        Path packageArtifactDirectory =\n+                resolveArtifactDirectoryPath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        if (!Files.exists(packageArtifactDirectory) || !Files.isDirectory(packageArtifactDirectory)) {\n+            try {\n+                Files.createDirectories(packageArtifactDirectory);\n+            } catch (IOException e) {\n+                throw new PackageLoadingException(\n+                        String.format(\"Failed to create package artifact cache directory \" + \"%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMTMxNQ==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406511315", "createdAt": "2020-04-09T22:25:59Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();\n+        if (!Files.exists(recipePath) || !Files.isRegularFile(recipePath)) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] recipeContent;\n+        try {\n+            recipeContent = Files.readAllBytes(recipePath);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", recipePath), e);\n+        }\n+\n+        try {\n+            return Optional.of(OBJECT_MAPPER.readValue(recipeContent, Package.class));\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", recipePath), e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {\n+        try {\n+            OBJECT_MAPPER.writeValue(saveToFile.toFile(), pkg);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to save package recipe to %s\", saveToFile), e);\n+        }\n+    }\n+\n+    private Path resolveRecipePath(String packageName, Semver packageVersion) {\n+        return recipeDirectory.resolve(String.format(\"%s-%s.yaml\", packageName, packageVersion.getValue()));\n+    }\n+\n+    void downloadArtifactsIfNecessary(PackageIdentifier packageIdentifier, List<URI> artifactList)\n+            throws PackageLoadingException, PackageDownloadException {\n+        Path packageArtifactDirectory =\n+                resolveArtifactDirectoryPath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        if (!Files.exists(packageArtifactDirectory) || !Files.isDirectory(packageArtifactDirectory)) {\n+            try {\n+                Files.createDirectories(packageArtifactDirectory);\n+            } catch (IOException e) {\n+                throw new PackageLoadingException(\n+                        String.format(\"Failed to create package artifact cache directory \" + \"%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MTMwNA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU0OTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxNTozN1rOGDpsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyOTowNFrOGDrjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MTkzOA==", "bodyText": "Why aren't these using the variable path?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406481938", "createdAt": "2020-04-09T21:15:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -93,11 +287,9 @@ public Package getRecipe(PackageIdentifier pkg) {\n \n     /**\n      * Get package from cache if it exists.\n-     *\n-     *\n      */\n     List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n-        Path srcPkgRoot = getPackageStorageRoot(packageName, packageStorePath);\n+        Path srcPkgRoot = getPackageStorageRoot(packageName, LOCAL_CACHE_PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMjM4NQ==", "bodyText": "This is to work with the existing tests. Package store directory structure is changed. Will remove this implementation once we refactored the client.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406512385", "createdAt": "2020-04-09T22:29:04Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -93,11 +287,9 @@ public Package getRecipe(PackageIdentifier pkg) {\n \n     /**\n      * Get package from cache if it exists.\n-     *\n-     *\n      */\n     List<Semver> getPackageVersionsIfExists(final String packageName) throws UnexpectedPackagingException {\n-        Path srcPkgRoot = getPackageStorageRoot(packageName, packageStorePath);\n+        Path srcPkgRoot = getPackageStorageRoot(packageName, LOCAL_CACHE_PATH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MTkzOA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU2OTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMjoyNlrOGDp4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo1MTowMVrOGDr-qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTA1Nw==", "bodyText": "setCause in the log?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406485057", "createdAt": "2020-04-09T21:22:26Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxOTQ2Nw==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406519467", "createdAt": "2020-04-09T22:51:01Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTA1Nw=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU3MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMjo1OFrOGDp5YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzowODoxNFrOGDsStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTM0NA==", "bodyText": "also setCause", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406485344", "createdAt": "2020-04-09T21:22:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxOTQ0Nw==", "bodyText": "sure", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406519447", "createdAt": "2020-04-09T22:50:58Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTM0NA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyMDA0Nw==", "bodyText": "Error as last argument to .log() will set the cause for you just like Log4j.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406520047", "createdAt": "2020-04-09T22:52:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTM0NA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNDU5Nw==", "bodyText": "Error as last argument to .log() will set the cause for you just like Log4j.\n\nSo which way do we prefer to be consistent? I've seen both are used in the code.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406524597", "createdAt": "2020-04-09T23:08:14Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NTM0NA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU4MjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyNjoyM1rOGDp_lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjo0OTo0MlrOGDr9Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NjkzMg==", "bodyText": "Info level is too high, I would set it to Debug.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406486932", "createdAt": "2020-04-09T21:26:23Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxOTA4Mg==", "bodyText": "ok", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406519082", "createdAt": "2020-04-09T22:49:42Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +127,143 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        Runnable preparePackageTask = new Runnable() {\n+            @SneakyThrows\n+            @Override\n+            public void run() {\n+                for (PackageIdentifier packageIdentifier :  pkgIds) {\n+                    preparePackage(packageIdentifier);\n+                }\n+            }\n+        };\n+\n+        return CompletableFuture.runAsync(preparePackageTask);\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().log(message, e);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().log(String.format(\"Failed to prepare package %s\", packageIdentifier), e);\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atInfo().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NjkzMg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjY2NTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo1NTowNVrOGDqx5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoxMzo0MlrOGDrNow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5OTgxNA==", "bodyText": "Maybe add a TODO for dealing with unhappy response code?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406499814", "createdAt": "2020-04-09T21:55:05Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\")\n+                .addKeyValue(\"packageIdentifier\", packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(CONTENT_DISPOSITION);\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream()) {\n+                    Files.copy(inputStream, saveToPath.resolve(filename), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNjkxNQ==", "bodyText": "Yeah.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406506915", "createdAt": "2020-04-09T22:13:42Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.aws.iot.evergreen.packagemanager.plugins;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+\n+public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n+    private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+\n+    @SuppressWarnings(\"PMD.AssignmentInOperand\")\n+    @Override\n+    public void downloadToPath(PackageIdentifier packageIdentifier, URI artifactUri, Path saveToPath)\n+            throws IOException {\n+        logger.atInfo().setEventType(\"download-artifact-from-greengrass-repo\")\n+                .addKeyValue(\"packageIdentifier\", packageIdentifier).addKeyValue(\"artifactUri\", artifactUri).log();\n+        String preSignedUrl = getArtifactDownloadURL(packageIdentifier.getArn(), artifactUri.getSchemeSpecificPart());\n+        URL url = new URL(preSignedUrl);\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                String disposition = httpConn.getHeaderField(CONTENT_DISPOSITION);\n+                String filename = extractFilename(preSignedUrl, disposition);\n+\n+                try (InputStream inputStream = httpConn.getInputStream()) {\n+                    Files.copy(inputStream, saveToPath.resolve(filename), StandardCopyOption.REPLACE_EXISTING);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5OTgxNA=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjY3Mjk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo1ODowMlrOGDq2iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTo1ODowMlrOGDq2iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMTAwMA==", "bodyText": "Just FYI, I'm creating a new test root folder and I was just initializing the path inside the test. We could consolidate these two later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406501000", "createdAt": "2020-04-09T21:58:02Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.GreengrassRepositoryDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private Path testCache;\n+\n+    private PackageStore packageStore;\n+\n+    @Mock\n+    private GreengrassRepositoryDownloader artifactDownloader;\n+\n+    @Mock\n+    private GreengrassPackageServiceHelper packageServiceHelper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        testCache = TestHelper.getPathForLocalTestCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjY4MDA3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjowMDo0OVrOGDq67g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzo1ODo1MFrOGDtI7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjEyNg==", "bodyText": "I think this could be removed now with the proper DI?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406502126", "createdAt": "2020-04-09T22:00:49Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -221,6 +221,6 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n \n     private void injectKernelPackageManagementDependencies() {\n         kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(LOCAL_CACHE_PATH), kernel));\n+                .put(new DependencyResolver(new PackageStore(), kernel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNjg2NA==", "bodyText": "Can't yet. Because the e2e test assumes package existed in a pre-loaded folder in working directory.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406506864", "createdAt": "2020-04-09T22:13:34Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -221,6 +221,6 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n \n     private void injectKernelPackageManagementDependencies() {\n         kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(LOCAL_CACHE_PATH), kernel));\n+                .put(new DependencyResolver(new PackageStore(), kernel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjEyNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNzY2NQ==", "bodyText": "Why not have the e2e test inject/set the proper values?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406507665", "createdAt": "2020-04-09T22:15:44Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -221,6 +221,6 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n \n     private void injectKernelPackageManagementDependencies() {\n         kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(LOCAL_CACHE_PATH), kernel));\n+                .put(new DependencyResolver(new PackageStore(), kernel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjEyNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzODQ3Ng==", "bodyText": "Yeah, once we switch to use new directory structure. It will be injectable. This is just to have e2e still running. Will refactor it shortly", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406538476", "createdAt": "2020-04-09T23:58:50Z", "author": {"login": "wikimonkey"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -221,6 +221,6 @@ private void setupIotResourcesAndInjectIntoKernel() throws IOException {\n \n     private void injectKernelPackageManagementDependencies() {\n         kernel.context.getv(DependencyResolver.class)\n-                .put(new DependencyResolver(new PackageStore(LOCAL_CACHE_PATH), kernel));\n+                .put(new DependencyResolver(new PackageStore(), kernel));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMjEyNg=="}, "originalCommit": {"oid": "5b04c91702627047e23b2b100a2aec7ecba56cd7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjk5ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MTowMFrOGDtzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMToxODozMlrOGDuUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTMzNA==", "bodyText": "No need to wrap. Just throw URISyntaxException so that the caller of preparePackages() can unwrap the ExecutionException and see what's the cause.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406549334", "createdAt": "2020-04-10T00:41:00Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c57b6fe5e8741814b3bb58c7f39b51115a72a11"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1NzgxOQ==", "bodyText": "I would think we should be more careful on declaring checked exception, and decide whether we need to convert lib threw checked exception to our defined checked exception.\nI will schedule sometime to discuss.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406557819", "createdAt": "2020-04-10T01:18:32Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTMzNA=="}, "originalCommit": {"oid": "5c57b6fe5e8741814b3bb58c7f39b51115a72a11"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzAwMjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MzoxOVrOGDt1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MzoxOVrOGDt1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTg3Mg==", "bodyText": "saveRecipeToFile or savePackageRecipeToFile is better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406549872", "createdAt": "2020-04-10T00:43:19Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().setCause(e).log(String.format(\"Failed to prepare package %s\", packageIdentifier));\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atDebug().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();\n+        if (!Files.exists(recipePath) || !Files.isRegularFile(recipePath)) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] recipeContent;\n+        try {\n+            recipeContent = Files.readAllBytes(recipePath);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", recipePath), e);\n+        }\n+\n+        try {\n+            return Optional.of(OBJECT_MAPPER.readValue(recipeContent, Package.class));\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", recipePath), e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c57b6fe5e8741814b3bb58c7f39b51115a72a11"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzAwMzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0NDoxOVrOGDt2Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0NDoxOVrOGDt2Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MDExNA==", "bodyText": "Log at debug level.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406550114", "createdAt": "2020-04-10T00:44:19Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().setCause(e).log(String.format(\"Failed to prepare package %s\", packageIdentifier));\n+            throw e;\n+        }\n+    }\n+\n+    private Package findRecipeDownloadIfNotExisted(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        Path recipePath = resolveRecipePath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        Optional<Package> packageOptional = Optional.empty();\n+        try {\n+            packageOptional = findPackageRecipe(recipePath);\n+        } catch (PackageLoadingException e) {\n+            logger.atWarn().log(String.format(\"Failed to load package from %s\", recipePath), e);\n+        }\n+        if (packageOptional.isPresent()) {\n+            return packageOptional.get();\n+        } else {\n+            Package pkg = greengrassPackageServiceHelper.downloadPackageRecipe(packageIdentifier);\n+            savePackageToFile(pkg, recipePath);\n+            return pkg;\n+        }\n+    }\n+\n+    Optional<Package> findPackageRecipe(Path recipePath) throws PackageLoadingException {\n+        logger.atDebug().setEventType(\"finding-package-recipe\").addKeyValue(\"packageRecipePath\", recipePath).log();\n+        if (!Files.exists(recipePath) || !Files.isRegularFile(recipePath)) {\n+            return Optional.empty();\n+        }\n+\n+        byte[] recipeContent;\n+        try {\n+            recipeContent = Files.readAllBytes(recipePath);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to load package recipe at %s\", recipePath), e);\n+        }\n+\n+        try {\n+            return Optional.of(OBJECT_MAPPER.readValue(recipeContent, Package.class));\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to parse package recipe at %s\", recipePath), e);\n+        }\n+    }\n+\n+    void savePackageToFile(Package pkg, Path saveToFile) throws PackageLoadingException {\n+        try {\n+            OBJECT_MAPPER.writeValue(saveToFile.toFile(), pkg);\n+        } catch (IOException e) {\n+            throw new PackageLoadingException(String.format(\"Failed to save package recipe to %s\", saveToFile), e);\n+        }\n+    }\n+\n+    private Path resolveRecipePath(String packageName, Semver packageVersion) {\n+        return recipeDirectory.resolve(String.format(\"%s-%s.yaml\", packageName, packageVersion.getValue()));\n+    }\n+\n+    void downloadArtifactsIfNecessary(PackageIdentifier packageIdentifier, List<URI> artifactList)\n+            throws PackageLoadingException, PackageDownloadException {\n+        Path packageArtifactDirectory =\n+                resolveArtifactDirectoryPath(packageIdentifier.getName(), packageIdentifier.getVersion());\n+        if (!Files.exists(packageArtifactDirectory) || !Files.isDirectory(packageArtifactDirectory)) {\n+            try {\n+                Files.createDirectories(packageArtifactDirectory);\n+            } catch (IOException e) {\n+                throw new PackageLoadingException(\n+                        String.format(\"Failed to create package artifact cache directory %s\", packageArtifactDirectory),\n+                        e);\n+            }\n+        }\n+\n+        List<URI> artifactsNeedToDownload = determineArtifactsNeedToDownload(packageArtifactDirectory, artifactList);\n+        logger.atInfo().setEventType(\"downloading-package-artifacts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c57b6fe5e8741814b3bb58c7f39b51115a72a11"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzAxMTg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0OTozMlrOGDt7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0OTozMlrOGDt7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MTI5Ng==", "bodyText": "Can you also assert the exception message? There are a number of places throwing PackageLoadingException.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406551296", "createdAt": "2020-04-10T00:49:32Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.GreengrassRepositoryDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private Path testCache;\n+\n+    private PackageStore packageStore;\n+\n+    @Mock\n+    private GreengrassRepositoryDownloader artifactDownloader;\n+\n+    @Mock\n+    private GreengrassPackageServiceHelper packageServiceHelper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, packageServiceHelper, artifactDownloader,\n+                Executors.newSingleThreadExecutor());\n+    }\n+\n+    @AfterEach\n+    void cleanTestCache() throws Exception {\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_valid_package_recipe_WHEN_attempt_find_package_THEN_package_model_is_returned()\n+            throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe.yaml\");\n+        Optional<Package> pkg = packageStore.findPackageRecipe(recipePath);\n+        assertThat(pkg.isPresent(), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_invalid_package_recipe_WHEN_attempt_find_package_THEN_get_loading_exception() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"bad_recipe.yaml\");\n+\n+        assertThrows(PackageLoadingException.class, () -> packageStore.findPackageRecipe(recipePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c57b6fe5e8741814b3bb58c7f39b51115a72a11"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzAyMTgxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo1NTo0MFrOGDuAjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTozMzo0OFrOGDuiOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjcxNw==", "bodyText": "The test coverage is a bit thin. I would like to see a few more unit tests on preparePackages() method that hits all the branches.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406552717", "createdAt": "2020-04-10T00:55:40Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.GreengrassRepositoryDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private Path testCache;\n+\n+    private PackageStore packageStore;\n+\n+    @Mock\n+    private GreengrassRepositoryDownloader artifactDownloader;\n+\n+    @Mock\n+    private GreengrassPackageServiceHelper packageServiceHelper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, packageServiceHelper, artifactDownloader,\n+                Executors.newSingleThreadExecutor());\n+    }\n+\n+    @AfterEach\n+    void cleanTestCache() throws Exception {\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_valid_package_recipe_WHEN_attempt_find_package_THEN_package_model_is_returned()\n+            throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe.yaml\");\n+        Optional<Package> pkg = packageStore.findPackageRecipe(recipePath);\n+        assertThat(pkg.isPresent(), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_invalid_package_recipe_WHEN_attempt_find_package_THEN_get_loading_exception() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"bad_recipe.yaml\");\n+\n+        assertThrows(PackageLoadingException.class, () -> packageStore.findPackageRecipe(recipePath));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_path_to_package_recipe_WHEN_attempt_find_package_THEN_null_is_returned() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"not_exist_recipe.yaml\");\n+\n+        Optional<Package> pkg = packageStore.findPackageRecipe(recipePath);\n+        assertThat(pkg.isPresent(), is(false));\n+    }\n+\n+    @Test\n+    void GIVEN_package_in_memory_WHEN_attempt_save_package_THEN_successfully_save_to_file() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe.yaml\");\n+        Package pkg = packageStore.findPackageRecipe(recipePath).get();\n+\n+        Path saveToFile =\n+                testCache.resolve(String.format(\"%s-%s.yaml\", TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\"));\n+        packageStore.savePackageToFile(pkg, saveToFile);\n+\n+        Package savedPackage = packageStore.findPackageRecipe(saveToFile).get();\n+        assertThat(savedPackage, is(pkg));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_list_empty_WHEN_attempt_download_artifact_THEN_do_nothing() throws Exception {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        packageStore.downloadArtifactsIfNecessary(pkgId, Collections.emptyList());\n+\n+        verify(artifactDownloader, never()).downloadToPath(any(), any(), any());\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_list_WHEN_attempt_download_artifact_THEN_invoke_downloader() throws Exception {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        packageStore.downloadArtifactsIfNecessary(pkgId,\n+                Arrays.asList(new URI(\"greengrass:binary1\"), new URI(\"greengrass:binary2\")));\n+\n+        ArgumentCaptor<URI> uriArgumentCaptor = ArgumentCaptor.forClass(URI.class);\n+        verify(artifactDownloader, times(2)).downloadToPath(eq(pkgId), uriArgumentCaptor.capture(),\n+                eq(testCache.resolve(\"artifact\").resolve(\"CoolService\").resolve(\"1.0.0\")));\n+        List<URI> uriList = uriArgumentCaptor.getAllValues();\n+        assertThat(uriList.size(), is(2));\n+        assertThat(uriList.get(0).getSchemeSpecificPart(), is(\"binary1\"));\n+        assertThat(uriList.get(1).getSchemeSpecificPart(), is(\"binary2\"));\n+    }\n+\n+\n+    @Test\n+    void GIVEN_artifact_provider_not_supported_WHEN_attempt_download_THEN_throw_package_exception() {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        assertThrows(PackageLoadingException.class, () -> packageStore\n+                .downloadArtifactsIfNecessary(pkgId, Collections.singletonList(new URI(\"docker:image1\"))));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_url_no_scheme_WHEN_attempt_download_THEN_throw_package_exception() {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0\" + \".0\"), \"CoolServiceARN\");\n+\n+        assertThrows(PackageLoadingException.class,\n+                () -> packageStore.downloadArtifactsIfNecessary(pkgId, Collections.singletonList(new URI(\"binary1\"))));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af1dad8171e3bf82a92f914bfa4b2b213bd5123"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2MTMzNg==", "bodyText": "will add more during refactoring.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406561336", "createdAt": "2020-04-10T01:33:48Z", "author": {"login": "wikimonkey"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/PackageStoreTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.GreengrassRepositoryDownloader;\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PackageStoreTest {\n+\n+    private Path testCache;\n+\n+    private PackageStore packageStore;\n+\n+    @Mock\n+    private GreengrassRepositoryDownloader artifactDownloader;\n+\n+    @Mock\n+    private GreengrassPackageServiceHelper packageServiceHelper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        testCache = TestHelper.getPathForLocalTestCache();\n+        packageStore = new PackageStore(testCache, packageServiceHelper, artifactDownloader,\n+                Executors.newSingleThreadExecutor());\n+    }\n+\n+    @AfterEach\n+    void cleanTestCache() throws Exception {\n+        TestHelper.cleanDirectory(testCache);\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_valid_package_recipe_WHEN_attempt_find_package_THEN_package_model_is_returned()\n+            throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe.yaml\");\n+        Optional<Package> pkg = packageStore.findPackageRecipe(recipePath);\n+        assertThat(pkg.isPresent(), is(true));\n+    }\n+\n+    @Test\n+    void GIVEN_path_to_invalid_package_recipe_WHEN_attempt_find_package_THEN_get_loading_exception() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"bad_recipe.yaml\");\n+\n+        assertThrows(PackageLoadingException.class, () -> packageStore.findPackageRecipe(recipePath));\n+    }\n+\n+    @Test\n+    void GIVEN_invalid_path_to_package_recipe_WHEN_attempt_find_package_THEN_null_is_returned() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"not_exist_recipe.yaml\");\n+\n+        Optional<Package> pkg = packageStore.findPackageRecipe(recipePath);\n+        assertThat(pkg.isPresent(), is(false));\n+    }\n+\n+    @Test\n+    void GIVEN_package_in_memory_WHEN_attempt_save_package_THEN_successfully_save_to_file() throws Exception {\n+        Path recipePath = TestHelper.getPathForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\")\n+                .resolve(\"recipe.yaml\");\n+        Package pkg = packageStore.findPackageRecipe(recipePath).get();\n+\n+        Path saveToFile =\n+                testCache.resolve(String.format(\"%s-%s.yaml\", TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.1.0\"));\n+        packageStore.savePackageToFile(pkg, saveToFile);\n+\n+        Package savedPackage = packageStore.findPackageRecipe(saveToFile).get();\n+        assertThat(savedPackage, is(pkg));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_list_empty_WHEN_attempt_download_artifact_THEN_do_nothing() throws Exception {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        packageStore.downloadArtifactsIfNecessary(pkgId, Collections.emptyList());\n+\n+        verify(artifactDownloader, never()).downloadToPath(any(), any(), any());\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_list_WHEN_attempt_download_artifact_THEN_invoke_downloader() throws Exception {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        packageStore.downloadArtifactsIfNecessary(pkgId,\n+                Arrays.asList(new URI(\"greengrass:binary1\"), new URI(\"greengrass:binary2\")));\n+\n+        ArgumentCaptor<URI> uriArgumentCaptor = ArgumentCaptor.forClass(URI.class);\n+        verify(artifactDownloader, times(2)).downloadToPath(eq(pkgId), uriArgumentCaptor.capture(),\n+                eq(testCache.resolve(\"artifact\").resolve(\"CoolService\").resolve(\"1.0.0\")));\n+        List<URI> uriList = uriArgumentCaptor.getAllValues();\n+        assertThat(uriList.size(), is(2));\n+        assertThat(uriList.get(0).getSchemeSpecificPart(), is(\"binary1\"));\n+        assertThat(uriList.get(1).getSchemeSpecificPart(), is(\"binary2\"));\n+    }\n+\n+\n+    @Test\n+    void GIVEN_artifact_provider_not_supported_WHEN_attempt_download_THEN_throw_package_exception() {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0.0\"), \"CoolServiceARN\");\n+\n+        assertThrows(PackageLoadingException.class, () -> packageStore\n+                .downloadArtifactsIfNecessary(pkgId, Collections.singletonList(new URI(\"docker:image1\"))));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_url_no_scheme_WHEN_attempt_download_THEN_throw_package_exception() {\n+        PackageIdentifier pkgId = new PackageIdentifier(\"CoolService\", new Semver(\"1.0\" + \".0\"), \"CoolServiceARN\");\n+\n+        assertThrows(PackageLoadingException.class,\n+                () -> packageStore.downloadArtifactsIfNecessary(pkgId, Collections.singletonList(new URI(\"binary1\"))));\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU1MjcxNw=="}, "originalCommit": {"oid": "4af1dad8171e3bf82a92f914bfa4b2b213bd5123"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzI0MjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzoxNzoxMVrOGDv7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzoxNzoxMVrOGDv7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4NDE4MQ==", "bodyText": "Generally we should not be both logging and throwing within the same catch.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406584181", "createdAt": "2020-04-10T03:17:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13af016555afcee5a8836855ed1cb7d2c93877e1"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzI0Mzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzoxNzo1M1rOGDv8Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzoxNzo1M1rOGDv8Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4NDMzMQ==", "bodyText": "Same here, to prevent duplicate logging, our standard is to only log when the exception is handled.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/164#discussion_r406584331", "createdAt": "2020-04-10T03:17:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -62,14 +132,138 @@ public PackageStore(Path packageStorePath) {\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n      *\n-     * @param pkgs a list of packages.\n+     * @param pkgIds a list of packages.\n      * @return a future to notify once this is finished.\n      */\n-    public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n-        // TODO: to be implemented.\n-        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n-        completableFuture.complete(null);\n-        return completableFuture;\n+    public Future<Void> preparePackages(List<PackageIdentifier> pkgIds) {\n+        return executorService.submit(() -> {\n+            for (PackageIdentifier packageIdentifier : pkgIds) {\n+                    preparePackage(packageIdentifier);\n+            }\n+            return null;\n+        });\n+    }\n+\n+    private void preparePackage(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException, PackageDownloadException {\n+        logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n+        try {\n+            Package pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n+            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n+                try {\n+                    return new URI(artifactStr);\n+                } catch (URISyntaxException e) {\n+                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n+                    logger.atError().setCause(e).log(message);\n+                    throw new RuntimeException(message, e);\n+                }\n+            }).collect(Collectors.toList());\n+            downloadArtifactsIfNecessary(packageIdentifier, artifactURIList);\n+            logger.atInfo().setEventType(\"prepare-package-finished\").addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                    .log();\n+        } catch (PackageLoadingException | PackageDownloadException e) {\n+            logger.atError().setCause(e).log(String.format(\"Failed to prepare package %s\", packageIdentifier));\n+            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13af016555afcee5a8836855ed1cb7d2c93877e1"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 19, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}