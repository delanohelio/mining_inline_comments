{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzUzMDMx", "number": 103, "title": "Refactor the deployment workflow", "bodyText": "Remove the state machine and make the deployment workflow simpler.\nIssue #, if available:\nDescription of changes:\n\nPropose a new deploymentTask that manages a deployment task.\nEnsure a deploymentTask can be aborted when the running thread is interrupted by asking its dependencies handling interrupt explicitly.\nRename listOfPackagesToDeploy to rootPackages under DeploymentDocument.\n\nWhy is this change necessary:\nSimplify the deployment workflow and make the code more maintainable.\nHow was this change tested:\nPassed all tests on my dev desktop.\nAny additional information or context required to review the change:\nWill look into how mergeInNewConfig handles interrupt separately.\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-09T18:35:52Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103", "merged": true, "mergeCommit": {"oid": "3078fd4fcf8c2942abdc9f4091913216f2a5daf9"}, "closed": true, "closedAt": "2020-03-10T18:12:08Z", "author": {"login": "fengwang666"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMCKjxgH2gAyMzg1NzUzMDMxOmU2OGQzNTgzMDZhY2ExYzFkYmMxZTc5YTY4N2QxODE2NjBhYmZhNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMWPIqgH2gAyMzg1NzUzMDMxOjYxMTQ2N2RmMTQ3Mjk0MTBjMTM2ZTg1NzJjOTc2YzNmNDRlMDFhMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e68d358306aca1c1dbc1e79a687d181660abfa62", "committedDate": "2020-03-09T18:24:31Z", "message": "Refactor the deployment workflow\n\nRemove the state machine and make the deployment workflow simpler."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf", "committedDate": "2020-03-09T18:47:29Z", "message": "Add comments and wait mergeInNewConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNDM0NzM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371434734", "createdAt": "2020-03-09T18:39:24Z", "commit": {"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODozOToyNFrOFz0x8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODo0ODoxOFrOFz1E5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg4NjQ0OQ==", "bodyText": "just use lombok?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389886449", "createdAt": "2020-03-09T18:39:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    /**\n+     * DeploymentTask Constructor.\n+     * @param dependencyResolver dependency resolver\n+     * @param packageCache package cache\n+     * @param kernelConfigResolver kernel config resolver\n+     * @param kernel kernel\n+     * @param logger logger\n+     * @param document deployment document\n+     */\n+    public DeploymentTask(DependencyResolver dependencyResolver, PackageCache packageCache,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDI1NA==", "bodyText": "if the name matches, you don't need @JsonProperty.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389890254", "createdAt": "2020-03-09T18:46:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -15,13 +16,14 @@\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n+@Builder\n public class DeploymentDocument {\n \n     @JsonProperty(\"DeploymentId\")\n     String deploymentId;\n \n-    @JsonProperty(\"ListOfPackagesToDeploy\")\n-    List<String> listOfPackagesToDeploy;\n+    @JsonProperty(\"rootPackages\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MDc4NA==", "bodyText": "What does \"commit a state\" mean?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389890784", "createdAt": "2020-03-09T18:47:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -573,6 +573,7 @@ private void addServiceSearchURL(Object url) {\n      * @param newConfig    the map of new configuration\n      * @return future which completes only once the config is merged and all the services in the config are running\n      */\n+    // TODO: mergeInNewConfig should also commit a state to indicate the deployment succeeds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68d358306aca1c1dbc1e79a687d181660abfa62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg5MTMwMw==", "bodyText": "Do we need this class? Don't we have one which does this already?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389891303", "createdAt": "2020-03-09T18:48:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.vdurmont.semver4j.Semver;\n+\n+// TODO: temporarily suppress this warning which will be gone after these fields get used.\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+public class PackageIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTY0MDg3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371564087", "createdAt": "2020-03-09T22:12:15Z", "commit": {"oid": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMjoxNVrOFz7Ilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoxMjoxNVrOFz7Ilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5MDU1MQ==", "bodyText": "We also want event types I believe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r389990551", "createdAt": "2020-03-09T22:12:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    /**\n+     * DeploymentTask Constructor.\n+     * @param dependencyResolver dependency resolver\n+     * @param packageCache package cache\n+     * @param kernelConfigResolver kernel config resolver\n+     * @param kernel kernel\n+     * @param logger logger\n+     * @param document deployment document\n+     */\n+    public DeploymentTask(DependencyResolver dependencyResolver, PackageCache packageCache,\n+                          KernelConfigResolver kernelConfigResolver, Kernel kernel,\n+                          Logger logger, DeploymentDocument document) {\n+        this.dependencyResolver = dependencyResolver;\n+        this.packageCache = packageCache;\n+        this.kernelConfigResolver = kernelConfigResolver;\n+        this.kernel = kernel;\n+        this.logger = logger;\n+        this.document = document;\n+    }\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().addKeyValue(\"deploymentId\", document.getDeploymentId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41bf2ded2cd0f241f8b8ad9ed9fc99f15c70aaf"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f54a4fdf668034fbb040a39744662fc99f3630bb", "committedDate": "2020-03-09T22:58:04Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTg0NTM3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371584537", "createdAt": "2020-03-09T23:04:05Z", "commit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowNDowNVrOFz8OFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzowNDozMlrOFz8OsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODM0Mw==", "bodyText": "Should this have a timeout + retry instead of blocking forever? Thinking about the offline scenario, that means that the preparePackages itself will need to have timeouts and retries to deal with not having a network.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390008343", "createdAt": "2020-03-09T23:04:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw==", "bodyText": "Future here? If resolving dependencies might need a network connection (which I think it may).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390008497", "createdAt": "2020-03-09T23:04:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTg5ODU5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371589859", "createdAt": "2020-03-09T23:19:16Z", "commit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxOToxNlrOFz8hOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDowMToyM1rOFz9RQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzI0MQ==", "bodyText": "Might be good idea to add debug logs before these two steps to indicate that package downloading and kernel update steps have been started", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390013241", "createdAt": "2020-03-09T23:19:16Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNTUzNA==", "bodyText": "The JsonProperty name should be defined as \"Name\" and \"Version\" to match with current convention being used in DeploymentDocument? I believe this will be used in the DeploymentDocument", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390015534", "createdAt": "2020-03-09T23:26:46Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageIdentifier.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.packagemanager.models;\n+\n+import com.vdurmont.semver4j.Semver;\n+\n+// TODO: temporarily suppress this warning which will be gone after these fields get used.\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"UUF_UNUSED_FIELD\")\n+public class PackageIdentifier {\n+    String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxNjQ3Nw==", "bodyText": "Where is this class intended to be used now? DeploymentProcess will be replaced by DeploymentTask now, right?\nSo this parsing needs to happen in DeploymentService ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390016477", "createdAt": "2020-03-09T23:30:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/state/ParseAndValidateState.java", "diffHunk": "@@ -80,7 +80,7 @@ public void proceed() throws DeploymentFailureException {\n                     }\n                 }\n             }\n-            if (deploymentDocument.getListOfPackagesToDeploy().contains(packageName)) {\n+            if (deploymentDocument.getRootPackages().contains(packageName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTAwNw==", "bodyText": "While we check that this is executed, is it guaranteed that this test will not be flaky? Can it get interrupted before this is called and lead to failure of this test?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390021007", "createdAt": "2020-03-09T23:45:28Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeploymentTaskTest {\n+    @Mock\n+    private DependencyResolver mockDependencyResolver;\n+    @Mock\n+    private PackageCache mockPackageCache;\n+    @Mock\n+    private KernelConfigResolver mockKernelConfigResolver;\n+    @Mock\n+    private Kernel mockKernel;\n+    private DeploymentDocument deploymentDocument =\n+            DeploymentDocument.builder().deploymentId(\"TestDeployment\").timestamp(System.currentTimeMillis()).build();\n+\n+    private Logger logger = LogManager.getLogger(\"unit test\");\n+\n+    private DeploymentTask deploymentTask;\n+\n+    @BeforeEach\n+    public void setup() {\n+        deploymentTask = new DeploymentTask(mockDependencyResolver, mockPackageCache, mockKernelConfigResolver,\n+                mockKernel, logger, deploymentDocument);\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_start_deploymentTask_THEN_succeeds() throws Exception {\n+        when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n+        when(mockKernel.mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap()))\n+                .thenReturn(CompletableFuture.completedFuture(null));\n+        deploymentTask.call();\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache).preparePackages(anyList());\n+        verify(mockKernelConfigResolver).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_resolveDependencies_interrupted_THEN_deploymentTask_aborted() throws Exception {\n+        when(mockDependencyResolver.resolveDependencies(deploymentDocument)).thenThrow(new InterruptedException());\n+        Exception thrown = assertThrows(DeploymentTaskFailureException.class, () -> deploymentTask.call());\n+        assertTrue(thrown.getCause() instanceof InterruptedException);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache, times(0)).preparePackages(anyList());\n+        verify(mockKernelConfigResolver, times(0)).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel, times(0)).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_preparePackages_interrupted_THEN_deploymentTask_aborted() throws Exception {\n+        lenient().when(mockPackageCache.preparePackages(anyList())).thenReturn(new CompletableFuture<>());\n+        FutureTask<Void> futureTask = new FutureTask<>(deploymentTask);\n+        Thread t = new Thread(futureTask);\n+        t.start();\n+\n+        t.interrupt();\n+        Exception thrown = assertThrows(ExecutionException.class, () -> futureTask.get());\n+        assertTrue(thrown.getCause() instanceof DeploymentTaskFailureException);\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNTUzNg==", "bodyText": "Should we separate InterruptException handling and Interrupt inside ExecutionException?\nAn interrupt does not mean a failure (it is a cancelled action triggered by the deployment service) in DeploymentTask and should be indicated so?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390025536", "createdAt": "2020-03-10T00:01:23Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();\n+            Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document);\n+            // Block this without timeout because it can take a long time for the device to update the config\n+            // (if it's not in a safe window).\n+            kernel.mergeInNewConfig(document.getDeploymentId(), document.getTimestamp(), newConfig).get();\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\", document.getDeploymentId())\n+                    .log(\"Finish deployment task\");\n+        } catch (PackageVersionConflictException | ExecutionException | InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjA1NTEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371605512", "createdAt": "2020-03-10T00:07:31Z", "commit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDowNzozMVrOFz9XvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDowNzozMVrOFz9XvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNzE5Ng==", "bodyText": "Might not be part of this CR, but this needs to be put in library which cloud can reuse. Adding TODO should suffice for this CR maybe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390027196", "createdAt": "2020-03-10T00:07:31Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -15,13 +16,14 @@\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n+@Builder\n public class DeploymentDocument {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjIwODAx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-371620801", "createdAt": "2020-03-10T01:00:44Z", "commit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTowMDo0NFrOFz-NXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTowMDo0NFrOFz-NXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MDkyNA==", "bodyText": "From my understanding, PackageRegistry will be removed and replaced by directly getting active package information from Kernel. But this can be changed later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390040924", "createdAt": "2020-03-10T01:00:44Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DependencyResolver {\n+    // TODO: temporarily suppress this warning which will be gone after these fields get used.\n+    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+    private final PackageRegistry packageRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f890bc4b42fefe0c333647da045a2afe6e598d2", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1f890bc4b42fefe0c333647da045a2afe6e598d2", "committedDate": "2020-03-10T01:07:55Z", "message": "address comments, separate retryable and nonretryable falures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDgyMDky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-372082092", "createdAt": "2020-03-10T15:48:44Z", "commit": {"oid": "1f890bc4b42fefe0c333647da045a2afe6e598d2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo0ODo0NVrOF0VJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1MTo0OFrOF0VSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNjcxMg==", "bodyText": "nitpick: why not use hamcrest matchers:\nassertThat(thrown.getCause()).isa(PackageVersionConflictException.class)?\nThat way you get nice error messages on failure, instead of: expected true, was false", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390416712", "createdAt": "2020-03-10T15:48:45Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentTaskTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.NonRetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.exceptions.RetryableDeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.FutureTask;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyMap;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DeploymentTaskTest {\n+    @Mock\n+    private DependencyResolver mockDependencyResolver;\n+    @Mock\n+    private PackageCache mockPackageCache;\n+    @Mock\n+    private KernelConfigResolver mockKernelConfigResolver;\n+    @Mock\n+    private Kernel mockKernel;\n+    private DeploymentDocument deploymentDocument =\n+            DeploymentDocument.builder().deploymentId(\"TestDeployment\").timestamp(System.currentTimeMillis()).build();\n+\n+    private Logger logger = LogManager.getLogger(\"unit test\");\n+\n+    private DeploymentTask deploymentTask;\n+\n+    @BeforeEach\n+    public void setup() {\n+        deploymentTask = new DeploymentTask(mockDependencyResolver, mockPackageCache, mockKernelConfigResolver,\n+                mockKernel, logger, deploymentDocument);\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_start_deploymentTask_THEN_succeeds() throws Exception {\n+        when(mockPackageCache.preparePackages(anyList())).thenReturn(CompletableFuture.completedFuture(null));\n+        when(mockKernel.mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap()))\n+                .thenReturn(CompletableFuture.completedFuture(null));\n+        deploymentTask.call();\n+        verify(mockDependencyResolver).resolveDependencies(deploymentDocument);\n+        verify(mockPackageCache).preparePackages(anyList());\n+        verify(mockKernelConfigResolver).resolve(anyList(), eq(deploymentDocument));\n+        verify(mockKernel).mergeInNewConfig(eq(\"TestDeployment\"), anyLong(), anyMap());\n+    }\n+\n+    @Test\n+    public void GIVEN_deploymentDocument_WHEN_resolveDependencies_with_conflicted_dependency_THEN_deploymentTask_aborted()\n+            throws Exception {\n+        when(mockDependencyResolver.resolveDependencies(deploymentDocument))\n+                .thenThrow(new PackageVersionConflictException(\"\"));\n+        Exception thrown = assertThrows(NonRetryableDeploymentTaskFailureException.class, () -> deploymentTask.call());\n+        assertTrue(thrown.getCause() instanceof PackageVersionConflictException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f890bc4b42fefe0c333647da045a2afe6e598d2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxNzI3Nw==", "bodyText": "yeah - the api calls themselves may log - we don't want to double log things", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390417277", "createdAt": "2020-03-10T15:49:32Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);\n+            // Block this without timeout because a device can be offline and it can take quite a long time\n+            // to download a package.\n+            packageCache.preparePackages(desiredPackages).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMzI0MQ=="}, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxOTAyMw==", "bodyText": "In the case of a local deployment where you've added a dependency on something not on disk, is it the responsibility of the local deployment call to cancel the task and retry?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#discussion_r390419023", "createdAt": "2020-03-10T15:51:48Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.deployment.exceptions.DeploymentTaskFailureException;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+/**\n+ * A task of deploying a configuration specified by a deployment document to a Greengrass device.\n+ */\n+@AllArgsConstructor\n+public class DeploymentTask implements Callable<Void> {\n+    private final DependencyResolver dependencyResolver;\n+    private final PackageCache packageCache;\n+    private final KernelConfigResolver kernelConfigResolver;\n+    private final Kernel kernel;\n+    private final Logger logger;\n+    private final DeploymentDocument document;\n+\n+    private static final String DEPLOYMENT_TASK_EVENT_TYPE = \"deployment-task-execution\";\n+\n+    @Override\n+    public Void call() throws DeploymentTaskFailureException {\n+        try {\n+            logger.atInfo().setEventType(DEPLOYMENT_TASK_EVENT_TYPE).addKeyValue(\"deploymentId\",\n+                    document.getDeploymentId())\n+                    .log(\"Start deployment task\");\n+            List<PackageIdentifier> desiredPackages = dependencyResolver.resolveDependencies(document);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwODQ5Nw=="}, "originalCommit": {"oid": "f54a4fdf668034fbb040a39744662fc99f3630bb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8", "committedDate": "2020-03-10T16:57:49Z", "message": "update to use hamcrest matcher in unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTY0ODc5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/103#pullrequestreview-372164879", "createdAt": "2020-03-10T17:22:29Z", "commit": {"oid": "9a1e2f3f70c92fb64c6f9d071ced428c0594a6b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611467df14729410c136e8572c976c3f44e01a13", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/611467df14729410c136e8572c976c3f44e01a13", "committedDate": "2020-03-10T17:47:37Z", "message": "Merge branch 'master' into refactor-deployment-workflow"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2318, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}