{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MzIzNTU5", "number": 149, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjo0MjoxNlrODtxmUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjo0NjoyOFrODtxpNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzI1MTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjo0MjoxNlrOF_ZYNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTowNDozNlrOF_bYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyMDQwNg==", "bodyText": "This needs to be injected from Config or something.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/149#discussion_r402020406", "createdAt": "2020-04-02T02:42:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.config.Constants;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.UnexpectedPackagingException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.UnsupportedRecipeFormatException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.SemverException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+@SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n+public class PackageStore {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa54b13d22fb9fc8052e8fd9e8031df274e12dba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1MzMxNQ==", "bodyText": "Correct! That's the plan. Just keeping it as a local constant as is.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/149#discussion_r402053315", "createdAt": "2020-04-02T05:04:36Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageStore.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.config.Constants;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.UnexpectedPackagingException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.UnsupportedRecipeFormatException;\n+import com.aws.iot.evergreen.packagemanager.models.Package;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStoreDeprecated;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.SemverException;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+@SuppressWarnings({\"PMD.AvoidPrintStackTrace\", \"PMD.IdenticalCatchBranches\"})\n+public class PackageStore {\n+    private static final Path LOCAL_CACHE_PATH =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyMDQwNg=="}, "originalCommit": {"oid": "fa54b13d22fb9fc8052e8fd9e8031df274e12dba"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzI1ODc3OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMjo0NjoyOVrOF_ZcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTowMjoxOVrOF_bWig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyMTQ4MA==", "bodyText": "Where did all this go? Looks like this hasn't been copied over to PackageStore. Feels like we still need it, or am I wrong?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/149#discussion_r402021480", "createdAt": "2020-04-02T02:46:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -1,282 +0,0 @@\n-/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0 */\n-\n-package com.aws.iot.evergreen.packagemanager;\n-\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n-import com.aws.iot.evergreen.packagemanager.models.Package;\n-import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n-import com.aws.iot.evergreen.packagemanager.models.PackageRegistryEntry;\n-import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n-import com.aws.iot.evergreen.packagemanager.plugins.PackageStore;\n-import com.vdurmont.semver4j.Semver;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Queue;\n-import java.util.Set;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-public class PackageManager {\n-\n-    // TODO: Temporary hard coding, this should be initialized from config\n-    private static final Path CACHE_DIRECTORY = Paths.get(System.getProperty(\"user.dir\")).resolve(\"artifact_cache\");\n-    private static final Path LOCAL_PACKAGE_SOURCE =\n-            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n-\n-    private final ExecutorService executorService = Executors.newSingleThreadExecutor();\n-\n-    private final PackageRegistry packageRegistry;\n-\n-    private final PackageStore localCache;\n-\n-    // TODO: Temporary, should be list of stores\n-    private final PackageStore mockPackageRepository;\n-\n-    /**\n-     * Constructor with hardcoded local cache and mock source paths.\n-     */\n-    public PackageManager() {\n-        this.localCache = new LocalPackageStore(CACHE_DIRECTORY);\n-        this.mockPackageRepository = new LocalPackageStore(LOCAL_PACKAGE_SOURCE);\n-        this.packageRegistry = new PackageRegistryImpl();\n-    }\n-\n-    //TODO mock package store in unit tests, remove this constructor\n-    @Deprecated\n-    PackageManager(final PackageRegistry packageRegistry, final Path cacheDirPath, final Path mockDirPath) {\n-        this.localCache = new LocalPackageStore(cacheDirPath);\n-        this.mockPackageRepository = new LocalPackageStore(mockDirPath);\n-        this.packageRegistry = packageRegistry;\n-    }\n-\n-    PackageManager(final PackageRegistry packageRegistry, PackageStore localCache, PackageStore mockRepository) {\n-        this.localCache = localCache;\n-        this.packageRegistry = packageRegistry;\n-        this.mockPackageRepository = mockRepository;\n-    }\n-\n-    /**\n-     * Given a set of proposed package dependency trees.\n-     *\n-     * @param proposedPackages The set of proposed packages to resolve dependencies for\n-     * @return the local resolved dependency tress in the future\n-     */\n-    public Future<Set<Package>> resolvePackages(Set<PackageMetadata> proposedPackages) {\n-        return executorService.submit(() -> resolveDependencies(proposedPackages));\n-    }\n-\n-    private Set<Package> resolveDependencies(Set<PackageMetadata> proposedPackages)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd3ccec9f5612e93eab8f313d6e9226eb23a2cf"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1Mjc0Ng==", "bodyText": "I've synced with Jason and Feng and this is essentially get broken down into PackageStore + DependencyResolver so we don't need this class anymore... You are right that a small amount of code for downloading are not copied over. Jason will probably just refer to it when implementing the downloading functions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/149#discussion_r402052746", "createdAt": "2020-04-02T05:02:19Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -1,282 +0,0 @@\n-/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- * SPDX-License-Identifier: Apache-2.0 */\n-\n-package com.aws.iot.evergreen.packagemanager;\n-\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackageVersionConflictException;\n-import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n-import com.aws.iot.evergreen.packagemanager.models.Package;\n-import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n-import com.aws.iot.evergreen.packagemanager.models.PackageRegistryEntry;\n-import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n-import com.aws.iot.evergreen.packagemanager.plugins.PackageStore;\n-import com.vdurmont.semver4j.Semver;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Queue;\n-import java.util.Set;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.Future;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-public class PackageManager {\n-\n-    // TODO: Temporary hard coding, this should be initialized from config\n-    private static final Path CACHE_DIRECTORY = Paths.get(System.getProperty(\"user.dir\")).resolve(\"artifact_cache\");\n-    private static final Path LOCAL_PACKAGE_SOURCE =\n-            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n-\n-    private final ExecutorService executorService = Executors.newSingleThreadExecutor();\n-\n-    private final PackageRegistry packageRegistry;\n-\n-    private final PackageStore localCache;\n-\n-    // TODO: Temporary, should be list of stores\n-    private final PackageStore mockPackageRepository;\n-\n-    /**\n-     * Constructor with hardcoded local cache and mock source paths.\n-     */\n-    public PackageManager() {\n-        this.localCache = new LocalPackageStore(CACHE_DIRECTORY);\n-        this.mockPackageRepository = new LocalPackageStore(LOCAL_PACKAGE_SOURCE);\n-        this.packageRegistry = new PackageRegistryImpl();\n-    }\n-\n-    //TODO mock package store in unit tests, remove this constructor\n-    @Deprecated\n-    PackageManager(final PackageRegistry packageRegistry, final Path cacheDirPath, final Path mockDirPath) {\n-        this.localCache = new LocalPackageStore(cacheDirPath);\n-        this.mockPackageRepository = new LocalPackageStore(mockDirPath);\n-        this.packageRegistry = packageRegistry;\n-    }\n-\n-    PackageManager(final PackageRegistry packageRegistry, PackageStore localCache, PackageStore mockRepository) {\n-        this.localCache = localCache;\n-        this.packageRegistry = packageRegistry;\n-        this.mockPackageRepository = mockRepository;\n-    }\n-\n-    /**\n-     * Given a set of proposed package dependency trees.\n-     *\n-     * @param proposedPackages The set of proposed packages to resolve dependencies for\n-     * @return the local resolved dependency tress in the future\n-     */\n-    public Future<Set<Package>> resolvePackages(Set<PackageMetadata> proposedPackages) {\n-        return executorService.submit(() -> resolveDependencies(proposedPackages));\n-    }\n-\n-    private Set<Package> resolveDependencies(Set<PackageMetadata> proposedPackages)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAyMTQ4MA=="}, "originalCommit": {"oid": "2fd3ccec9f5612e93eab8f313d6e9226eb23a2cf"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4973, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}