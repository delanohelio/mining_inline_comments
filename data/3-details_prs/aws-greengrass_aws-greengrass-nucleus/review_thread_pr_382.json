{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODY1NjQw", "number": 382, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToyOToyOFrOEb01hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozNTo0NFrOEb7ChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjEyNjc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentArtifact.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToyOToyOFrOHF_JjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowMzowMlrOHGHqkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzOTU2NA==", "bodyText": "What's the intention here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476039564", "createdAt": "2020-08-25T01:29:28Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.net.URI;\n+\n+@JsonDeserialize(builder = ComponentArtifact.ComponentArtifactBuilder.class)\n+@Value\n+@Builder\n+public class ComponentArtifact {\n+    URI uri;\n+\n+    String digest;\n+\n+    String algorithm;\n+\n+    String unarchive;\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTA5MQ==", "bodyText": "This is the jackson annotation for using Builder\u2019s method to deserialize. Jackson uses the withPrefix to identify what builder methods to call when deserialize. If not set, the default prefix is \u201cwith\u201d, but we used lombok\u2019s @builder and didn\u2019t specify a prefix, that\u2019s why withPrefix=\"\" (Which I know looks almost like a hack or something. \ud83d\ude06 )", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476179091", "createdAt": "2020-08-25T05:03:02Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.net.URI;\n+\n+@JsonDeserialize(builder = ComponentArtifact.ComponentArtifactBuilder.class)\n+@Value\n+@Builder\n+public class ComponentArtifact {\n+    URI uri;\n+\n+    String digest;\n+\n+    String algorithm;\n+\n+    String unarchive;\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzOTU2NA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjEzNDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentParameter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTozMToyMlrOHF_OoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowMToxM1rOHGHosA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MDg2NA==", "bodyText": "Will we support nested param?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476040864", "createdAt": "2020-08-25T01:31:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentParameter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@JsonDeserialize(builder = ComponentParameter.ComponentParameterBuilder.class)\n+@Value\n+@Builder\n+public class ComponentParameter {\n+\n+    String name;\n+\n+    String value;\n+\n+    ParameterType type;\n+\n+    public enum ParameterType {\n+        NUMBER, STRING, BOOLEAN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3ODYwOA==", "bodyText": "Yes. Long story short, before M2, nested structure will be supported with JSON String so the type will be \"STRING\". Afterwards, we will revisit to probably remove this type from the recipe syntax perspective and switch to use a separate JSON/YAML schema file for validation (current favorable direction). But it can change depending on the actual design decision.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476178608", "createdAt": "2020-08-25T05:01:13Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentParameter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@JsonDeserialize(builder = ComponentParameter.ComponentParameterBuilder.class)\n+@Value\n+@Builder\n+public class ComponentParameter {\n+\n+    String name;\n+\n+    String value;\n+\n+    ParameterType type;\n+\n+    public enum ParameterType {\n+        NUMBER, STRING, BOOLEAN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MDg2NA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE0MTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/SerializerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTozMzoyN1rOHF_TlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo1OTowN1rOHGHmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MjEzMg==", "bodyText": "I think there's one in util", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476042132", "createdAt": "2020-08-25T01:33:27Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/SerializerFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SerializerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3ODA2Mg==", "bodyText": "Right. That one could be removed after we migrated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476178062", "createdAt": "2020-08-25T04:59:07Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/SerializerFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SerializerFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MjEzMg=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE1MTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTozNjoyMVrOHF_arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo1NzoyOFrOHGHj-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0Mzk0OA==", "bodyText": "Do we keep these models along with common/* ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476043948", "createdAt": "2020-08-25T01:36:21Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -13,6 +14,7 @@\n @Getter\n @AllArgsConstructor\n @NoArgsConstructor\n+@Builder\n public class ComponentArtifact {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3NzQwMg==", "bodyText": "Yes. Note the common/* is temporarily copied from Brazil pkg EvergreenComponentCommon. It will be removed after maven dependency is setup. For why we are not using it directly across our codebase, the main reason is that we don't want to tie our core models to the recipe file contract. The maintainability benefit wins over the cost of \"duplicating\" it.\nSee detailed comparison and the winner from the this doc", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476177402", "createdAt": "2020-08-25T04:57:28Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -13,6 +14,7 @@\n @Getter\n @AllArgsConstructor\n @NoArgsConstructor\n+@Builder\n public class ComponentArtifact {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0Mzk0OA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjE3NzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MzowMFrOHF_r4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo1NDowNVrOHGHarw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODM1NA==", "bodyText": "Does platformSpecificManifest only have details of the resolved platform?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476048354", "createdAt": "2020-08-25T01:43:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3NTAyMw==", "bodyText": "The object type holds one platform's manifest, which may be multiple instances in a recipe file. But it resolved to the best match when loading to our PackageRecipe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476175023", "createdAt": "2020-08-25T04:54:05Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODM1NA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njg4MDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo0NToyMlrOHGHCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MDoxMFrOHGehKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA==", "bodyText": "Is this a placeholder that in the future the POJO field name might be different than json field name?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476168818", "createdAt": "2020-08-25T04:45:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODc5Mg==", "bodyText": "I'd need @wikimonkey 's help as he implemented in the Brazil side.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476188792", "createdAt": "2020-08-25T05:36:37Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MzgwNw==", "bodyText": "I guess eventually we'll need to seek for tools to auto generate these pojo (like swagger ) in the common model. This LGTM for now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476193807", "createdAt": "2020-08-25T05:52:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNTE5NA==", "bodyText": "Manually declaring builder class PlatformSpecificManifestBuilder is purely for annotation purpose so Jackson can use generated builder to deserialize. @JsonPOJOBuilder recognized default prefix is with.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476205194", "createdAt": "2020-08-25T06:25:39Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MzUxNA==", "bodyText": "@ShirleyZheng92 Correct! That's where we want to get to!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476553514", "createdAt": "2020-08-25T15:50:10Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njg4MjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo0NTo0MVrOHGHDcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozNDoyOVrOHGINzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTA3NA==", "bodyText": "NIT: double copyright", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476169074", "createdAt": "2020-08-25T04:45:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODExMA==", "bodyText": "Thanks!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476188110", "createdAt": "2020-08-25T05:34:29Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTA3NA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk0NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowNTowM1rOHGHssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozNDoyNFrOHGINtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTYzNA==", "bodyText": "why the name is FromFile?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476179634", "createdAt": "2020-08-25T05:05:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODA4NQ==", "bodyText": "Because it's from the file contract of recipe. I hesitated when naming it... Looking for a better name. Didn't like convertXyzFromRecipe or convertXyzFromCommonModel...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476188085", "createdAt": "2020-08-25T05:34:24Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTYzNA=="}, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njk0NzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowNjo0NVrOHGHugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozNToxOVrOHGIO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MDA5Nw==", "bodyText": "Curious, why not use the existing PackageParameter and ComponentArtifact class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476180097", "createdAt": "2020-08-25T05:06:45Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4ODM4Mw==", "bodyText": "See: #382 (comment).\nThey are very similar now, but they could change at different time for different reasons.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476188383", "createdAt": "2020-08-25T05:35:19Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MDA5Nw=="}, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzA0ODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1NjozM1rOHGIo9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo0OTowN1rOHGeeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NTA2MQ==", "bodyText": "which part should be moved to common model?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476195061", "createdAt": "2020-08-25T05:56:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjI3Nw==", "bodyText": "I guess Ethan means deserialization part. Then common model needs to define exception(s) as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476206277", "createdAt": "2020-08-25T06:28:24Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NTA2MQ=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1MjgwMg==", "bodyText": "Yes. Something like RecipeParseException maybe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476552802", "createdAt": "2020-08-25T15:49:07Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NTA2MQ=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzA5NTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoxNzo1NFrOHGJFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1MDo1M1rOHGejNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwMjI3MA==", "bodyText": "Why isn't it final? Also is the class singleton?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476202270", "createdAt": "2020-08-25T06:17:54Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -13,25 +14,22 @@\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public final class PlatformResolver {\n+public class PlatformResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NDAzNg==", "bodyText": "It was static utils before but I added an instance method and used it with our DI. Removed final so that I can easily mock it in tests. It's singleton.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476554036", "createdAt": "2020-08-25T15:50:53Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -13,25 +14,22 @@\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public final class PlatformResolver {\n+public class PlatformResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwMjI3MA=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzEyMzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoyODo1NlrOHGJVaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjozNjo1NVrOHGgcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjQ0MA==", "bodyText": "Can you proceed if no match? Should it throw exception here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476206440", "createdAt": "2020-08-25T06:28:56Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NTg2MQ==", "bodyText": "Hmm. I thought we could probably be able to... In this case it's find, the recipe file may exist but can't be used for this platform, so we just log a warn and then go to another usable version, etc. But we can refine it later.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476555861", "createdAt": "2020-08-25T15:53:35Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjQ0MA=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4NTAwOA==", "bodyText": "The situation is not supposed to happen in cloud interaction because cloud is supposed to resolve to a platform compatible one, but it could happen in local dev - developer uses a recipe that no applicable platform config, in such case, I think deployment should fail fast. We can refactor this when we do DR overhaul.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476585008", "createdAt": "2020-08-25T16:36:55Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjQ0MA=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzEzMTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMTo0M1rOHGJaWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1NDoxMlrOHGesBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNzcwNg==", "bodyText": "Shouldn't we rename it to 'component...'? The name probably should avoid conflicting with file model", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476207706", "createdAt": "2020-08-25T06:31:43Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -29,6 +31,8 @@\n @Getter\n @NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n @EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+@Builder\n+@AllArgsConstructor\n public class PackageRecipe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1NjI5Mg==", "bodyText": "Yes. I will do them in one shot after we cleaned things up.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476556292", "createdAt": "2020-08-25T15:54:12Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -29,6 +31,8 @@\n @Getter\n @NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n @EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+@Builder\n+@AllArgsConstructor\n public class PackageRecipe {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNzcwNg=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzE0MzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozNTo0NFrOHGJgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTo1ODoyNFrOHGe3hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwOTM1NA==", "bodyText": "nit: probably it will never happen, but can we ensure no null element in the result list by doing a filter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476209354", "createdAt": "2020-08-25T06:35:44Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {\n+        if (parameter == null) {\n+            return null;\n+        }\n+        return PackageParameter.builder()\n+                               .name(parameter.getName())\n+                               .value(parameter.getValue())\n+                               .type(PackageParameter.ParameterType.valueOf(parameter.getType().name()))\n+                               .build();\n+\n+    }\n+\n+    private List<ComponentArtifact> convertArtifactsFromFile(\n+            List<com.aws.iot.evergreen.packagemanager.common.ComponentArtifact> artifacts) {\n+        if (artifacts == null || artifacts.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return artifacts.stream().map(this::convertArtifactFromFile).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU1OTIzOA==", "bodyText": "Great suggestion. I added filter nonnull before doing map and removed the null check in the convertX method. Cleaner!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476559238", "createdAt": "2020-08-25T15:58:24Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {\n+        if (parameter == null) {\n+            return null;\n+        }\n+        return PackageParameter.builder()\n+                               .name(parameter.getName())\n+                               .value(parameter.getValue())\n+                               .type(PackageParameter.ParameterType.valueOf(parameter.getType().name()))\n+                               .build();\n+\n+    }\n+\n+    private List<ComponentArtifact> convertArtifactsFromFile(\n+            List<com.aws.iot.evergreen.packagemanager.common.ComponentArtifact> artifacts) {\n+        if (artifacts == null || artifacts.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return artifacts.stream().map(this::convertArtifactFromFile).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwOTM1NA=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 706, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}