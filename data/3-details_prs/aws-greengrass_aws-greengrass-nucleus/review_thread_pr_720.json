{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDc1MDQw", "number": 720, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozNjoyN1rOE8c8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozODoxN1rOE8c9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI0MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozNjoyN1rOH4k4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozNjoyN1rOH4k4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NjQ5NQ==", "bodyText": "I try to make it a habit of not calling a get method multiple times. Here it makes no difference, but there are other places where data can change between get calls. Of course, I didn't follow my own rule above, but just worth a note :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/720#discussion_r529086495", "createdAt": "2020-11-24T00:36:27Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -170,39 +170,26 @@ private static ComponentArtifact convertArtifactFromFile(\n             @Nonnull PlatformSpecificManifest manifest,\n             @Nonnull Set<String> allSelectors) {\n \n-        Map<String, Object> effectiveLifecycleMap = lifecycleMap;\n-\n-        if (manifest.getSelections() == null || manifest.getSelections().isEmpty()) {\n-            // BEGIN BETA Compatibility code\n-            // TODO: These need to be removed for re:Invent\n-            // We might be running with old lifecycle\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                effectiveLifecycleMap = manifest.getLifecycle();\n-            }\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after (old style) platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n-\n-            return effectiveLifecycleMap;\n-            // END BETA Compatibility code\n+        // If there is manifest level lifecycle\n+        if (manifest.getLifecycle() != null && !manifest.getLifecycle().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a71bb4e2bc1ef093b0dd170e9456be77191489b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODI0NTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDozODoxN1rOH4k6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1Nzo1MFrOH5U49Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzExNQ==", "bodyText": "This warning will occur if the lifecycle was empty / not provided.\nIt's important to only give this warning if a non-empty lifecyle was turned into an empty lifecycle else it will be confusing for a valid scenario.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/720#discussion_r529087115", "createdAt": "2020-11-24T00:38:17Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -170,39 +170,26 @@ private static ComponentArtifact convertArtifactFromFile(\n             @Nonnull PlatformSpecificManifest manifest,\n             @Nonnull Set<String> allSelectors) {\n \n-        Map<String, Object> effectiveLifecycleMap = lifecycleMap;\n-\n-        if (manifest.getSelections() == null || manifest.getSelections().isEmpty()) {\n-            // BEGIN BETA Compatibility code\n-            // TODO: These need to be removed for re:Invent\n-            // We might be running with old lifecycle\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                effectiveLifecycleMap = manifest.getLifecycle();\n-            }\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after (old style) platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n-\n-            return effectiveLifecycleMap;\n-            // END BETA Compatibility code\n+        // If there is manifest level lifecycle\n+        if (manifest.getLifecycle() != null && !manifest.getLifecycle().isEmpty()) {\n+            return manifest.getLifecycle();\n+        }\n+\n+        // selections were applied to the lifecycle section\n+        // we allow the following syntax forms (combined)\n+        //\n+        // Lifecycle:\n+        //    <selector>: (optional)\n+        //       Section:\n+        //          <selector>: (optional)\n+        //              body\n+        Object filtered = PlatformResolver.filterPlatform(lifecycleMap, allSelectors,\n+                manifest.getSelections()).orElse(Collections.emptyMap());\n+        if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n+            return (Map<String, Object>) filtered;\n         } else {\n-            // selections were applied to the lifecycle section\n-            // we allow the following syntax forms (combined)\n-            //\n-            // Lifecycle:\n-            //    <selector>: (optional)\n-            //       Section:\n-            //          <selector>: (optional)\n-            //              body\n-            Object filtered = PlatformResolver.filterPlatform(effectiveLifecycleMap, allSelectors,\n-                    manifest.getSelections()).orElse(Collections.emptyMap());\n-            if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n-                return (Map<String, Object>) filtered;\n-            } else {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n+            LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a71bb4e2bc1ef093b0dd170e9456be77191489b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTEwMDE0Nw==", "bodyText": "What is the use case of a lifecycle is intended to be empty?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/720#discussion_r529100147", "createdAt": "2020-11-24T01:17:31Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -170,39 +170,26 @@ private static ComponentArtifact convertArtifactFromFile(\n             @Nonnull PlatformSpecificManifest manifest,\n             @Nonnull Set<String> allSelectors) {\n \n-        Map<String, Object> effectiveLifecycleMap = lifecycleMap;\n-\n-        if (manifest.getSelections() == null || manifest.getSelections().isEmpty()) {\n-            // BEGIN BETA Compatibility code\n-            // TODO: These need to be removed for re:Invent\n-            // We might be running with old lifecycle\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                effectiveLifecycleMap = manifest.getLifecycle();\n-            }\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after (old style) platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n-\n-            return effectiveLifecycleMap;\n-            // END BETA Compatibility code\n+        // If there is manifest level lifecycle\n+        if (manifest.getLifecycle() != null && !manifest.getLifecycle().isEmpty()) {\n+            return manifest.getLifecycle();\n+        }\n+\n+        // selections were applied to the lifecycle section\n+        // we allow the following syntax forms (combined)\n+        //\n+        // Lifecycle:\n+        //    <selector>: (optional)\n+        //       Section:\n+        //          <selector>: (optional)\n+        //              body\n+        Object filtered = PlatformResolver.filterPlatform(lifecycleMap, allSelectors,\n+                manifest.getSelections()).orElse(Collections.emptyMap());\n+        if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n+            return (Map<String, Object>) filtered;\n         } else {\n-            // selections were applied to the lifecycle section\n-            // we allow the following syntax forms (combined)\n-            //\n-            // Lifecycle:\n-            //    <selector>: (optional)\n-            //       Section:\n-            //          <selector>: (optional)\n-            //              body\n-            Object filtered = PlatformResolver.filterPlatform(effectiveLifecycleMap, allSelectors,\n-                    manifest.getSelections()).orElse(Collections.emptyMap());\n-            if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n-                return (Map<String, Object>) filtered;\n-            } else {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n+            LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzExNQ=="}, "originalCommit": {"oid": "8a71bb4e2bc1ef093b0dd170e9456be77191489b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MzE0MQ==", "bodyText": "Just providing artifacts is one scenario. I expect when we support other recipe types, we're more likely to see lifecycle implied rather than explicit.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/720#discussion_r529873141", "createdAt": "2020-11-24T20:57:50Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/componentmanager/converter/RecipeLoader.java", "diffHunk": "@@ -170,39 +170,26 @@ private static ComponentArtifact convertArtifactFromFile(\n             @Nonnull PlatformSpecificManifest manifest,\n             @Nonnull Set<String> allSelectors) {\n \n-        Map<String, Object> effectiveLifecycleMap = lifecycleMap;\n-\n-        if (manifest.getSelections() == null || manifest.getSelections().isEmpty()) {\n-            // BEGIN BETA Compatibility code\n-            // TODO: These need to be removed for re:Invent\n-            // We might be running with old lifecycle\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                effectiveLifecycleMap = manifest.getLifecycle();\n-            }\n-            if (effectiveLifecycleMap.isEmpty()) {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after (old style) platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n-\n-            return effectiveLifecycleMap;\n-            // END BETA Compatibility code\n+        // If there is manifest level lifecycle\n+        if (manifest.getLifecycle() != null && !manifest.getLifecycle().isEmpty()) {\n+            return manifest.getLifecycle();\n+        }\n+\n+        // selections were applied to the lifecycle section\n+        // we allow the following syntax forms (combined)\n+        //\n+        // Lifecycle:\n+        //    <selector>: (optional)\n+        //       Section:\n+        //          <selector>: (optional)\n+        //              body\n+        Object filtered = PlatformResolver.filterPlatform(lifecycleMap, allSelectors,\n+                manifest.getSelections()).orElse(Collections.emptyMap());\n+        if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n+            return (Map<String, Object>) filtered;\n         } else {\n-            // selections were applied to the lifecycle section\n-            // we allow the following syntax forms (combined)\n-            //\n-            // Lifecycle:\n-            //    <selector>: (optional)\n-            //       Section:\n-            //          <selector>: (optional)\n-            //              body\n-            Object filtered = PlatformResolver.filterPlatform(effectiveLifecycleMap, allSelectors,\n-                    manifest.getSelections()).orElse(Collections.emptyMap());\n-            if (filtered instanceof Map && !((Map<?, ?>) filtered).isEmpty()) {\n-                return (Map<String, Object>) filtered;\n-            } else {\n-                LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");\n-                return Collections.emptyMap();\n-            }\n+            LOGGER.warn(\"Non-empty lifecycle section ignored after platform selection filtering\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzExNQ=="}, "originalCommit": {"oid": "8a71bb4e2bc1ef093b0dd170e9456be77191489b"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 296, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}