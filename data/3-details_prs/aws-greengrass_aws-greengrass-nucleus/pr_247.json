{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjU1MTE3", "number": 247, "title": "Add role alias parameter for TES", "bodyText": "Issue #, if available:\nDescription of changes:\nAdd roleAlias as parameter for TES and other changes to make it work with IOT TES\nWhy is this change necessary:\nThis change would let applications query AWS credentials corresponding to their roleAlias in IOT account.\nHow was this change tested:\nTested manually by running kernel locally, launched a sample app which was able to get credentials from tes.\n   TokenExchangeService:\n     port: 2009\n     iotRoleAlias: \"ptk_role_alias\"\n   printenv:\n     dependencies:\n     - \"TokenExchangeService\"\n     lifecycle:\n       run: \"python3 /Users/prateeky/printos.py\"\n   DeploymentService:\n\n~ \u276f\u276f\u276f cat printos.py                                                                                                                                                               \u23ce\nimport boto3\n\ns3 = boto3.client('s3')\nprint(s3.list_buckets())\n~ \u276f\u276f\u276f\n\n2020 May 19 01:13:13,967-0700 [INFO] (Copier) printenv: shell-runner-stdout. {stdout={'ResponseMetadata': {'RequestId': '0E88ECCB50BC9C54', 'HostId': 've3BoiczgrKVO91HP6U4oU1UjMwMN6orkWvM6ERtKfqI1aF1TN4eHHS5ZpJbROqv9htx5zZ5LeY=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': 've3BoiczgrKVO91HP6U4oU1UjMwMN6orkWvM6ERtKfqI1aF1TN4eHHS5ZpJbROqv9htx5zZ5LeY=', 'x-amz-request-id': '0E88ECCB50BC9C54', 'date': 'Tue, 19 May 2020 08:12:49 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 0}, 'Buckets': [{'Name': '068336977227-feedback-ctr-data-us-west-2', 'CreationDate': datetime.datetime(2019, 7, 17, 20, 56, 7, tzinfo=tzutc())}, {'Name': '068336977227-greengrass-test-mlmodels-us-west-2', 'CreationDate': datetime.datetime(2019, 7, 17, 20, 56, 6, tzinfo=tzutc())}, {'Name': '068336977227-greenlight-tmp-bones', 'CreationDate': datetime.datetime(2019, 7, 17, 20, 56, 6, tzinfo=tzutc())}, {'Name': 'ap-northeast-1-greengrass-sdk-cwl-export-logs-ptk', 'CreationDate': datetime.datetime(2018, 12, 20, 2, 51, 50, tzinfo=tzutc())}, {'Name': 'ap-northeast-1-s3access-logs-ptk', 'CreationDate': datetime.datetime(2018, 12, 20, 2, 51, 27, tzinfo=tzutc())}, {'Name': 'athena-ptk-results', 'CreationDate': datetime.datetime(2019, 10, 31, 21, 27, 53, tzinfo=tzutc())}, {'Name': 'beta-us-east-1-tapplication-information', 'CreationDate': datetime.datetime(2018, 9, 19, 21, 41, 37, tzinfo=tzutc())}, {'Name': 'bulk-deploy-test', 'CreationDate': datetime.datetime(2018, 9, 17, 19, 34, 40, tzinfo=tzutc())}, {'Name': 'cbr-gameday-no-oai-dub', 'CreationDate': datetime.datetime(2017, 11, 17, 23, 19, 26, tzinfo=tzutc())}, {'Name': 'cbr-gameday-no-oai-iad', 'CreationDate': datetime.datetime(2017, 11, 17, 23, 18, 38, tzinfo=tzutc())}, {'Name': 'cbr-gameday-no-oai-iad-2', 'CreationDate': datetime.datetime(2017, 11, 18, 0, 22, 36, tzinfo=tzutc())}, {'Name': 'cbr-gameday-oai-1', 'CreationDate': datetime.datetime(2017, 11, 17, 23, 18, 14, tzinfo=tzutc())}, {'Name': 'cbr-gameday-oai-1-dub', 'CreationDate': datetime.datetime(2017, 11, 17, 23, 19, 2, tzinfo=tzutc())}, {'Name': 'cbr-gameday-oai-2', 'CreationDate': datetime.datetime(2017, 11, 17, 23, 18, 24, tzinfo=tzutc())}, {'Name': 'cf-templates-xj8cm0mqb5lc-us-east-1', 'CreationDate': datetime.datetime(2018, 3, 22, 22, 21, 58, tzinfo=tzutc())}, {'Name': 'cf-templates-xj8cm0mqb5lc-us-west-2', 'CreationDate': datetime.datetime(2018, 9, 26, 19, 26, 16, tzinfo=tzutc())}, {'Name': 'ctail-lambda', 'CreationDate': datetime.datetime(2017, 5, 12, 20, 17, 17, tzinfo=tzutc())}, {'Name': 'do-not-delete-gatedgarden-audit-068336977227', 'CreationDate': datetime.datetime(2018, 8, 31, 7, 55, 47, tzinfo=tzutc())}, {'Name': 'ggc-e2e-test-logs-068336977227-us-west-2', 'CreationDate': datetime.datetime(2019, 7, 17, 20, 56, 7, tzinfo=tzutc())}, {'Name': 'ggc-e2e-test-metrics-068336977227-us-west-2', 'CreationDate': datetime.datetime(2019, 7, 17, 20, 56, 7, tzinfo=tzutc())}, {'Name': 'ggc-e2e-test-s3accesslogs', 'CreationDate': datetime.datetime(2018, 10, 31, 18, 46, 4, tzinfo=tzutc())}, {'Name': 'hook-rec-test', 'CreationDate': datetime.datetime(2017, 7, 13, 19, 13, 17, tzinfo=tzutc())}, {'Name': 'iot-analytics-ptk', 'CreationDate': datetime.datetime(2019, 5, 31, 0, 39, 34, tzinfo=tzutc())}, {'Name': 'prateeky', 'CreationDate': datetime.datetime(2017, 9, 28, 21, 54, 31, tzinfo=tzutc())}, {'Name': 'prateeky-devdsk-backup', 'CreationDate': datetime.datetime(2018, 8, 28, 18, 18, 16, tzinfo=tzutc())}, {'Name': 'prateeky-test', 'CreationDate': datetime.datetime(2016, 1, 12, 18, 50, 12, tzinfo=tzutc())}, {'Name': 'prateekytest-s3test-1c7721f4bxfe2', 'CreationDate': datetime.datetime(2018, 3, 22, 22, 28, 59, tzinfo=tzutc())}, {'Name': 'ptk-cf-logs', 'CreationDate': datetime.datetime(2016, 12, 8, 22, 22, 32, tzinfo=tzutc())}, {'Name': 'region-syd', 'CreationDate': datetime.datetime(2017, 10, 16, 2, 2, 25, tzinfo=tzutc())}, {'Name': 's3-cloudtrail-logs-ptk', 'CreationDate': datetime.datetime(2018, 12, 10, 19, 33, 20, tzinfo=tzutc())}, {'Name': 's3-logs-for-all-buckets', 'CreationDate': datetime.datetime(2018, 10, 31, 17, 35, 59, tzinfo=tzutc())}, {'Name': 's3-logs-ll', 'CreationDate': datetime.datetime(2017, 7, 13, 23, 40, 13, tzinfo=tzutc())}, {'Name': 'sam-dev-us-east-1-prateeky-068336977227', 'CreationDate': datetime.datetime(2019, 3, 14, 18, 54, 58, tzinfo=tzutc())}, {'Name': 'sam-dev-us-west-2-prateeky-068336977227', 'CreationDate': datetime.datetime(2018, 9, 26, 20, 11, 31, tzinfo=tzutc())}, {'Name': 'shsushtest', 'CreationDate': datetime.datetime(2019, 6, 20, 19, 54, 16, tzinfo=tzutc())}, {'Name': 'test-bucket-ptk-1-us-east-1', 'CreationDate': datetime.datetime(2018, 12, 14, 0, 34, 19, tzinfo=tzutc())}, {'Name': 'test-bucket-ptk-idk-letss', 'CreationDate': datetime.datetime(2018, 12, 19, 23, 52, 44, tzinfo=tzutc())}, {'Name': 'test-us-east-1-s3access-logs', 'CreationDate': datetime.datetime(2018, 11, 6, 0, 26, 7, tzinfo=tzutc())}, {'Name': 'ttt-connector-information', 'CreationDate': datetime.datetime(2018, 11, 13, 0, 29, 23, tzinfo=tzutc())}, {'Name': 'us-east-1-grggg-updates', 'CreationDate': datetime.datetime(2018, 11, 6, 0, 30, 47, tzinfo=tzutc())}, {'Name': 'ws-lambda-at-edge-3d0c0b90', 'CreationDate': datetime.datetime(2017, 11, 21, 23, 18, 35, tzinfo=tzutc())}], 'Owner': {'DisplayName': 'prateeky', 'ID': '113881c349d41812132df949e1ffc8a8bf3ce6c7d7d13a2ab83a0a99681693b6'}}, scriptName=services.printenv.lifecycle.run, serviceName=printenv, currentState=RUNNING}\n2020 May 19 01:13:14,095-0700 [INFO] (Copier) printenv: Run script exited. {exitCode=0,\n\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-19T17:16:39Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247", "merged": true, "mergeCommit": {"oid": "8702fe20ce4a3f824d7f6cb7a52af8d95f6aaa80"}, "closed": true, "closedAt": "2020-05-26T19:09:52Z", "author": {"login": "prateek-y"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABciwBOGgH2gAyNDIwMjU1MTE3OjQzZWMzNTJkMTg0ODBhMjNmZTJiNDdlMTFiMmM1NTE3ZGY0MzhlMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclI7mOgFqTQxODU2NDM0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43ec352d18480a23fe2b47e11b2c5517df438e17", "committedDate": "2020-05-19T08:16:17Z", "message": "Add role alias parameter for TES"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjYzMzk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-414663398", "createdAt": "2020-05-19T17:21:35Z", "commit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMTozNVrOGXquOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMjo1OFrOGXqxyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MDM5NQ==", "bodyText": "read tree as case insensitive maybe? Should make it a bit easier.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#discussion_r427470395", "createdAt": "2020-05-19T17:21:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -43,15 +65,33 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        String credentials = \"--alive--\";\n+        byte[] response = {};\n+        LOGGER.debug(\"Got request for credentials\");\n         // TODO: Add cache\n         try {\n-            credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    IOT_CREDENTIALS_PATH,\n+            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n+                    iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB);\n+            response = translateToAwsSdkFormat(credentials);\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scnearios\n+            LOGGER.error(\"Encountered error while fetching credentials\", e);\n+        }\n+        return response;\n+    }\n+\n+    private byte[] translateToAwsSdkFormat(final String credentials) throws AWSIotException {\n+        try {\n+            JsonNode jsonNode = OBJECT_MAPPER.readTree(credentials).get(CREDENTIALS_UPSTREAM_STR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTExOA==", "bodyText": "WTF. 30 minutes!? Shouldn't this be more like 5 seconds?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#discussion_r427471118", "createdAt": "2020-05-19T17:22:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotCloudHelper.java", "diffHunk": "@@ -33,7 +33,7 @@\n     private static final String HTTP_HEADER_ERROR_TYPE = \"x-amzn-ErrorType\";\n     // TODO: revisit all timeout values\n     // Max wait time for device to receive HTTP response from IOT CLOUD\n-    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(5).getSeconds();\n+    private static final long TIMEOUT_FOR_RESPONSE_FROM_IOT_CLOUD_SECONDS = (long) Duration.ofMinutes(30).getSeconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTMwNQ==", "bodyText": "make the string a public const.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#discussion_r427471305", "createdAt": "2020-05-19T17:22:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/TokenExchangeService.java", "diffHunk": "@@ -40,17 +41,22 @@ public TokenExchangeService(Topics topics,\n                 .subscribe((why, newv) ->\n                         port = Coerce.toInt(newv));\n \n+        topics.lookup(\"iotRoleAlias\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NzgxMjAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-414781202", "createdAt": "2020-05-19T20:03:36Z", "commit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODU4NTA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-414858505", "createdAt": "2020-05-19T22:08:15Z", "commit": {"oid": "43ec352d18480a23fe2b47e11b2c5517df438e17"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c88756beb907a1ab635779f6fb21f3f7a8a9738", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0c88756beb907a1ab635779f6fb21f3f7a8a9738", "committedDate": "2020-05-22T05:06:00Z", "message": "Apply feedback"}, "afterCommit": {"oid": "fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf", "committedDate": "2020-05-22T17:17:18Z", "message": "Apply feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDcxMjIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-417071223", "createdAt": "2020-05-22T17:21:20Z", "commit": {"oid": "fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyMToyMFrOGZed2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzoyMjozNVrOGZef_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Njc0NA==", "bodyText": "you can configure your IDE to add a blank line at the end of files which is preferred.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#discussion_r429366744", "createdAt": "2020-05-22T17:21:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -43,15 +65,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        String credentials = \"--alive--\";\n+        byte[] response = {};\n+        LOGGER.debug(\"Got request for credentials\");\n         // TODO: Add cache\n         try {\n-            credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n-                    IOT_CREDENTIALS_PATH,\n+            final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n+                    iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB);\n+            response = translateToAwsSdkFormat(credentials);\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scnearios\n+            LOGGER.error(\"Encountered error while fetching credentials\", e);\n+        }\n+        return response;\n+    }\n+\n+    private byte[] translateToAwsSdkFormat(final String credentials) throws AWSIotException {\n+        try {\n+            // TODO: Validate if lowercase lookup can make this simpler\n+            JsonNode jsonNode = OBJECT_MAPPER.readTree(credentials).get(CREDENTIALS_UPSTREAM_STR);\n+            Map<String, String> response = new HashMap<>();\n+            response.put(ACCESS_KEY_DOWNSTREAM_STR, jsonNode.get(ACCESS_KEY_UPSTREAM_STR).asText());\n+            response.put(SECRET_ACCESS_DOWNSTREAM_STR, jsonNode.get(SECRET_ACCESS_UPSTREAM_STR).asText());\n+            response.put(SESSION_TOKEN_DOWNSTREAM_STR, jsonNode.get(SESSION_TOKEN_UPSTREAM_STR).asText());\n+            response.put(EXPIRATION_DOWNSTREAM_STR, jsonNode.get(EXPIRATION_UPSTREAM_STR).asText());\n+            return OBJECT_MAPPER.writeValueAsBytes(response);\n+        } catch (JsonProcessingException e) {\n+            LOGGER.error(\"Received malformed credential input\", e);\n+            throw new AWSIotException(e);\n         }\n-        return credentials.getBytes(StandardCharsets.UTF_8);\n     }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2NzI5NQ==", "bodyText": "For next PR, would be nice to have the ability to get credentials for use within the kernel, so maybe implement a credential provider which can return these credentials. I say to use a credential provider specifically because it would need to handle expiration and refreshing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#discussion_r429367295", "createdAt": "2020-05-22T17:22:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -43,15 +65,34 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDc0Mjg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-417074284", "createdAt": "2020-05-22T17:26:43Z", "commit": {"oid": "fc44bcb930b0de1a2d16a6b13b80fcbe12b2dedf"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d45ed4d0470d397c8d666198be995464d1717c", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9d45ed4d0470d397c8d666198be995464d1717c", "committedDate": "2020-05-26T18:20:43Z", "message": "Apply changes for feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfa116b8d65d9ea12fae942c66df81e56db6bc00", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dfa116b8d65d9ea12fae942c66df81e56db6bc00", "committedDate": "2020-05-22T17:27:10Z", "message": "Merge branch 'master' into iot_tes"}, "afterCommit": {"oid": "b9d45ed4d0470d397c8d666198be995464d1717c", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b9d45ed4d0470d397c8d666198be995464d1717c", "committedDate": "2020-05-26T18:20:43Z", "message": "Apply changes for feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTYyMDA1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-418562005", "createdAt": "2020-05-26T18:22:27Z", "commit": {"oid": "b9d45ed4d0470d397c8d666198be995464d1717c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6ab7a40961c9e110f408457cf0e0a801db6550", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fa6ab7a40961c9e110f408457cf0e0a801db6550", "committedDate": "2020-05-26T18:22:44Z", "message": "Merge branch 'master' into iot_tes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTY0MzQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/247#pullrequestreview-418564347", "createdAt": "2020-05-26T18:25:37Z", "commit": {"oid": "fa6ab7a40961c9e110f408457cf0e0a801db6550"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2210, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}