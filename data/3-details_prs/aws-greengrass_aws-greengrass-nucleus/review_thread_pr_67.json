{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDU4NzI5", "number": 67, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyODoyM1rODhvIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNjo1OFrODi0mpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAxODIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMToyODoyM1rOFso6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0NDozN1rOFtFe7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MTk0Ng==", "bodyText": "Like the other apps, this should be read from the sdk as a public static", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382351946", "createdAt": "2020-02-21T01:28:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "diffHunk": "@@ -30,6 +28,7 @@\n public class AuthHandler implements InjectionActions {\n     public static final String AUTH_TOKEN_LOOKUP_KEY = \"_AUTH_TOKENS\";\n     public static final String SERVICE_UNIQUE_ID_KEY = \"_UID\";\n+    public static final int AUTH_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTU5OA==", "bodyText": "Will kernel depend on client SDK as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382819598", "createdAt": "2020-02-21T21:43:12Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "diffHunk": "@@ -30,6 +28,7 @@\n public class AuthHandler implements InjectionActions {\n     public static final String AUTH_TOKEN_LOOKUP_KEY = \"_AUTH_TOKENS\";\n     public static final String SERVICE_UNIQUE_ID_KEY = \"_UID\";\n+    public static final int AUTH_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MTk0Ng=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDA3OQ==", "bodyText": "Yes, it already does depend on it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382820079", "createdAt": "2020-02-21T21:44:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthHandler.java", "diffHunk": "@@ -30,6 +28,7 @@\n public class AuthHandler implements InjectionActions {\n     public static final String AUTH_TOKEN_LOOKUP_KEY = \"_AUTH_TOKENS\";\n     public static final String SERVICE_UNIQUE_ID_KEY = \"_UID\";\n+    public static final int AUTH_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MTk0Ng=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAyMTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTozMDoxNVrOFso8Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo1NjoyNlrOFtC33Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjQyNw==", "bodyText": "Read this from the sdk.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382352427", "createdAt": "2020-02-21T01:30:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -33,6 +31,7 @@\n //TODO: see if this needs to be a GGService\n @ImplementsService(name = \"lifecycleipc\", autostart = true)\n public class LifecycleIPCService extends EvergreenService {\n+    public static final int LIFECYCLE_SERVICE_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NDE3OA==", "bodyText": "Shouldn't this be decoupled from the SDK version?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382354178", "createdAt": "2020-02-21T01:37:00Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -33,6 +31,7 @@\n //TODO: see if this needs to be a GGService\n @ImplementsService(name = \"lifecycleipc\", autostart = true)\n public class LifecycleIPCService extends EvergreenService {\n+    public static final int LIFECYCLE_SERVICE_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjQyNw=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTU4MA==", "bodyText": "Not necessarily since the server is compiled with a certain version of the SDK (so it is coupled anyway).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382355580", "createdAt": "2020-02-21T01:42:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -33,6 +31,7 @@\n //TODO: see if this needs to be a GGService\n @ImplementsService(name = \"lifecycleipc\", autostart = true)\n public class LifecycleIPCService extends EvergreenService {\n+    public static final int LIFECYCLE_SERVICE_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjQyNw=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3NzMwOQ==", "bodyText": "Removed api version, added todo to implement a version compatibility check. Service might support multiple version of the sdk to be backward compatible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382777309", "createdAt": "2020-02-21T19:56:26Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -33,6 +31,7 @@\n //TODO: see if this needs to be a GGService\n @ImplementsService(name = \"lifecycleipc\", autostart = true)\n public class LifecycleIPCService extends EvergreenService {\n+    public static final int LIFECYCLE_SERVICE_API_VERSION = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjQyNw=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzAyMjgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/ipc/AuthHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTozMTowM1rOFso9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMTo0MTowM1rOFspG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjY2Mg==", "bodyText": "No * imports.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382352662", "createdAt": "2020-02-21T01:31:03Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/ipc/AuthHandlerTest.java", "diffHunk": "@@ -27,13 +28,10 @@\n import java.net.SocketAddress;\n import java.nio.charset.StandardCharsets;\n \n-import static com.aws.iot.evergreen.ipc.AuthHandler.AUTH_TOKEN_LOOKUP_KEY;\n-import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static com.aws.iot.evergreen.ipc.AuthHandler.*;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NTE2MQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382355161", "createdAt": "2020-02-21T01:41:03Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/ipc/AuthHandlerTest.java", "diffHunk": "@@ -27,13 +28,10 @@\n import java.net.SocketAddress;\n import java.nio.charset.StandardCharsets;\n \n-import static com.aws.iot.evergreen.ipc.AuthHandler.AUTH_TOKEN_LOOKUP_KEY;\n-import static com.aws.iot.evergreen.ipc.AuthHandler.SERVICE_UNIQUE_ID_KEY;\n+import static com.aws.iot.evergreen.ipc.AuthHandler.*;\n import static org.hamcrest.CoreMatchers.containsString;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1MjY2Mg=="}, "originalCommit": {"oid": "2c10f92d19fd539f02bbb0c4b76493fc7f52cc1b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTcyNjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTo1NToxNVrOFtC10Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMDowMDoxM1rOFtC-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Njc4NQ==", "bodyText": "Why is this todo? It should be done in this pull.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382776785", "createdAt": "2020-02-21T19:55:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -68,12 +68,9 @@ public void postInject() {\n     public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n-            if (applicationMessage.getVersion() != LIFECYCLE_SERVICE_API_VERSION) {\n-                throw new IllegalArgumentException(\"Unknown API Version\");\n-            }\n-\n+            //TODO: add version compatibility check", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTA0NQ==", "bodyText": "updated comments above", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382779045", "createdAt": "2020-02-21T20:00:13Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -68,12 +68,9 @@ public void postInject() {\n     public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n-            if (applicationMessage.getVersion() != LIFECYCLE_SERVICE_API_VERSION) {\n-                throw new IllegalArgumentException(\"Unknown API Version\");\n-            }\n-\n+            //TODO: add version compatibility check", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3Njc4NQ=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDAwNDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0NTozOVrOFtFgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxNDoyNFrOFtqsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA==", "bodyText": "I'm wondering that if we are completing the future here, why return a Future of this method instead of Message directly?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382820478", "createdAt": "2020-02-21T21:45:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNDI3Mw==", "bodyText": "I feel IPCService should handle the Future<> part and the handler function of IPC module should just do blocking calls.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382824273", "createdAt": "2020-02-21T21:55:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNTk0Nw==", "bodyText": "We want to be able to add timeouts in the future, which Futures will let us do easily.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382825947", "createdAt": "2020-02-21T22:00:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNjAxNw==", "bodyText": "But that can be in a separate PR", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382826017", "createdAt": "2020-02-21T22:00:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNjY4Nw==", "bodyText": "Timeouts aren't implemented, but the Future handling already exists; there's no reason to remove it now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382826687", "createdAt": "2020-02-21T22:02:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyOTQ3OQ==", "bodyText": "However this function is completing a Future before returning it.\nSupporting timeout needs to be be something like below:\n// In IPC Service:\nFuture<Message> fut = new Future<>\n// put fut in response map\nhandler = router.getHandler(dest);\nthreadPool.submit(() -> {\n  fut.complete(handler(clientContext, message));\n);\n\nif (fut.get(timeout)) {\n  thread.cancel();\n}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382829479", "createdAt": "2020-02-21T22:09:27Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyOTY4OA==", "bodyText": "The current implementation is synchronous and always returns a completed future. Having futures now allows us to make this async going forward. This was the intent in making IPCCallback interface return a Future", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r383429688", "createdAt": "2020-02-24T18:14:24Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -62,55 +61,56 @@ public void postInject() {\n     /**\n      * Handle all requests from the client.\n      *\n-     * @param request the incoming request\n+     * @param message the incoming request\n      * @param context caller request context\n      * @return future containing our response\n      */\n-    public Future<Message> handleMessage(Message request, ConnectionContext context) {\n+    public Future<Message> handleMessage(Message message, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n \n+        ApplicationMessage applicationMessage = new ApplicationMessage(message.getPayload());\n         try {\n-            GeneralRequest<Object, LifecycleRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, LifecycleRequestTypes>>() {\n-                    });\n-\n-            GeneralResponse<?, LifecycleResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case listen:\n+            //TODO: add version compatibility check\n+            LifecycleServiceOpCodes lifecycleServiceOpCodes =\n+                    LifecycleServiceOpCodes.values()[applicationMessage.getOpCode()];\n+            LifecycleGenericResponse lifecycleGenericResponse = new LifecycleGenericResponse();\n+            switch (lifecycleServiceOpCodes) {\n+                case REGISTER_LISTENER:\n                     LifecycleListenRequest listenRequest =\n-                            mapper.convertValue(obj.getRequest(), LifecycleListenRequest.class);\n-                    genResp = agent.listenToStateChanges(listenRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), LifecycleListenRequest.class);\n+                    lifecycleGenericResponse = agent.listenToStateChanges(listenRequest, context);\n                     break;\n-                case setState:\n+                case REPORT_STATE:\n                     StateChangeRequest stateChangeRequest =\n-                            mapper.convertValue(obj.getRequest(), StateChangeRequest.class);\n-                    genResp = agent.reportState(stateChangeRequest, context);\n+                            mapper.readValue(applicationMessage.getPayload(), StateChangeRequest.class);\n+                    lifecycleGenericResponse = agent.reportState(stateChangeRequest, context);\n                     break;\n                 default:\n-                    genResp.setError(LifecycleResponseStatus.InvalidRequest);\n-                    genResp.setErrorMessage(\"Unknown request type \" + obj.getType());\n+                    lifecycleGenericResponse.setStatus(LifecycleResponseStatus.InvalidRequest);\n+                    lifecycleGenericResponse.setErrorMessage(\"Unknown request type \"\n+                            + lifecycleServiceOpCodes.toString());\n                     break;\n             }\n-            fut.complete(new Message(IPCUtil.encode(genResp)));\n \n+            ApplicationMessage responseMessage = ApplicationMessage.builder().version(applicationMessage.getVersion())\n+                    .payload(mapper.writeValueAsBytes(lifecycleGenericResponse)).build();\n+            fut.complete(new Message(responseMessage.toByteArray()));\n         } catch (Throwable e) {\n             log.log(Level.Error, \"Failed to respond to handleMessage\", e);\n-\n-            GeneralResponse<Void, LifecycleResponseStatus> errorResponse =\n-                    GeneralResponse.<Void, LifecycleResponseStatus>builder()\n-                            .error(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n-\n             try {\n-                fut.complete(new Message(IPCUtil.encode(errorResponse)));\n+                LifecycleGenericResponse response = LifecycleGenericResponse.builder()\n+                        .status(LifecycleResponseStatus.InternalError).errorMessage(e.getMessage()).build();\n+                ApplicationMessage responseMessage = ApplicationMessage.builder()\n+                        .version(applicationMessage.getVersion())\n+                        .payload(mapper.writeValueAsBytes(response)).build();\n+                fut.complete(new Message(responseMessage.toByteArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDQ3OA=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDAwOTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMTo0Nzo1MVrOFtFjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOTozNjozMlrOFttOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMTI3Mw==", "bodyText": "Missing version?\nShould add @Notnull to the fields in ApplicationMessage so that the builder will fail for missing fields.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382821273", "createdAt": "2020-02-21T21:47:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -108,18 +108,17 @@ public void postInject() {\n             executor.submit(() -> {\n                 // Synchronize on context so that we only try to send 1 update at a time to a given client\n                 synchronized (context) {\n-                    StateTransitionEvent trans =\n-                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n-                                    .service(listenRequest.getServiceName()).build();\n-\n-                    GeneralRequest<StateTransitionEvent, LifecycleRequestTypes> req =\n-                            GeneralRequest.<StateTransitionEvent, LifecycleRequestTypes>builder()\n-                                    .type(LifecycleRequestTypes.transition).request(trans).build();\n+                    StateTransitionEvent stateTransitionEvent =\n+                            StateTransitionEvent.builder().newState(newState.toString())\n+                                    .oldState(oldState.toString()).service(listenRequest.getServiceName()).build();\n \n                     try {\n+                        ApplicationMessage applicationMessage = ApplicationMessage.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyNzUxNQ==", "bodyText": "+1. Also lifecycle (and probably any IPC module that does a server push) need to keep a map of clientContext -> AppVersion if we are making server response version equals to client version", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r382827515", "createdAt": "2020-02-21T22:04:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -108,18 +108,17 @@ public void postInject() {\n             executor.submit(() -> {\n                 // Synchronize on context so that we only try to send 1 update at a time to a given client\n                 synchronized (context) {\n-                    StateTransitionEvent trans =\n-                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n-                                    .service(listenRequest.getServiceName()).build();\n-\n-                    GeneralRequest<StateTransitionEvent, LifecycleRequestTypes> req =\n-                            GeneralRequest.<StateTransitionEvent, LifecycleRequestTypes>builder()\n-                                    .type(LifecycleRequestTypes.transition).request(trans).build();\n+                    StateTransitionEvent stateTransitionEvent =\n+                            StateTransitionEvent.builder().newState(newState.toString())\n+                                    .oldState(oldState.toString()).service(listenRequest.getServiceName()).build();\n \n                     try {\n+                        ApplicationMessage applicationMessage = ApplicationMessage.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMTI3Mw=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ3MTI2MA==", "bodyText": "Added @nonnull to version and payload in ApplicationMessage (in the SDK PR). We do not have validation for a lot of API inputs, there should be PR addressing that as the API are getting mature now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r383471260", "createdAt": "2020-02-24T19:36:32Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -108,18 +108,17 @@ public void postInject() {\n             executor.submit(() -> {\n                 // Synchronize on context so that we only try to send 1 update at a time to a given client\n                 synchronized (context) {\n-                    StateTransitionEvent trans =\n-                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n-                                    .service(listenRequest.getServiceName()).build();\n-\n-                    GeneralRequest<StateTransitionEvent, LifecycleRequestTypes> req =\n-                            GeneralRequest.<StateTransitionEvent, LifecycleRequestTypes>builder()\n-                                    .type(LifecycleRequestTypes.transition).request(trans).build();\n+                    StateTransitionEvent stateTransitionEvent =\n+                            StateTransitionEvent.builder().newState(newState.toString())\n+                                    .oldState(oldState.toString()).service(listenRequest.getServiceName()).build();\n \n                     try {\n+                        ApplicationMessage applicationMessage = ApplicationMessage.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMTI3Mw=="}, "originalCommit": {"oid": "4299437600afc92ce6a3258e9fa8717c12e8f088"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk4NDY4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMTozN1rOFtxv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoxMTozN1rOFtxv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0NTI5OA==", "bodyText": "Remember to undo this change before merging.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r383545298", "createdAt": "2020-02-24T22:11:37Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -72,7 +72,8 @@\n         <dependency>\n             <groupId>com.aws.iot</groupId>\n             <artifactId>evergreen-java-sdk</artifactId>\n-            <version>0.0.0-SNAPSHOT</version>\n+            <version>0.0.0-add_validation-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7e4d490071f95e194055cacab72592033a416a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODQwMDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/ServiceDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNjo1OFrOFuSKIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNjo1OFrOFuSKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjMyMQ==", "bodyText": "[Minor] I would put the static import here directly for easy reading...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/67#discussion_r384076321", "createdAt": "2020-02-25T19:26:58Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/ServiceDiscoveryService.java", "diffHunk": "@@ -68,49 +67,50 @@ public void postInject() {\n      */\n     public Future<Message> handleMessage(Message request, ConnectionContext context) {\n         CompletableFuture<Message> fut = new CompletableFuture<>();\n+        ApplicationMessage message = ApplicationMessage.fromBytes(request.getPayload());\n         try {\n-            GeneralRequest<Object, ServiceDiscoveryRequestTypes> obj =\n-                    IPCUtil.decode(request, new TypeReference<GeneralRequest<Object, ServiceDiscoveryRequestTypes>>() {\n-                    });\n+            //TODO: add version compatibility check\n \n-            GeneralResponse<?, ServiceDiscoveryResponseStatus> genResp = new GeneralResponse<>();\n-            switch (obj.getType()) {\n-                case lookup:\n-                    LookupResourceRequest lookup = mapper.convertValue(obj.getRequest(), LookupResourceRequest.class);\n+            ServiceDiscoveryOpCodes opCode = values()[message.getOpCode()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94fbe400e8d733985bfd548aff22f1ea28597723"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4783, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}