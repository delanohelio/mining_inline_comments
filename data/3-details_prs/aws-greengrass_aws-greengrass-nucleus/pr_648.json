{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTkxMDE2", "number": 648, "title": "Updating the IPC API UpdateConfiguration as per new interface", "bodyText": "Issue #, if available:\nDescription of changes:\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-11-10T04:00:50Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648", "merged": true, "mergeCommit": {"oid": "acd472029d652ef4b50fb3017f7ea617c80897b6"}, "closed": true, "closedAt": "2020-11-11T22:42:05Z", "author": {"login": "abanthiy"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbBSsjgBqjM5NzY4NjIxMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdblpatgH2gAyNTE4MTkxMDE2OjQ2M2U2MDlkNjI3NjBlMmY3MTI5ZmRkNTc3NzdmODc4NzgzMjYyMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "198b45e88dc16931edcd6020e6a3a3d81e372dfd", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/198b45e88dc16931edcd6020e6a3a3d81e372dfd", "committedDate": "2020-11-10T03:40:10Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}, "afterCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b47172693cbcfae543d06154070c26b138350ebc", "committedDate": "2020-11-10T04:03:01Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODM3MDUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-526837050", "createdAt": "2020-11-10T04:04:54Z", "commit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDowNDo1NFrOHwK7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDowOToxOFrOHwLANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MjgwOQ==", "bodyText": "what if it has no timestamp in the request? Should be using the current time.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520272809", "createdAt": "2020-11-10T04:04:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -256,60 +257,32 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n-\n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n-                }\n-\n+                validateRequest(request);\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n                 Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n                 String[] keyPath = request.getKeyPath().toArray(new String[0]);\n                 Node node = configTopics.findNode(keyPath);\n-                if (node == null) {\n+\n+                if (node == null || node instanceof Topic) {\n                     try {\n-                        configTopics.lookup(keyPath)\n-                                .withValueChecked(request.getNewValue().get(keyPath[keyPath.length - 1]));\n+                        Topic updatedNode = configTopics.lookup(keyPath)\n+                                .withValueChecked(request.getTimestamp().toEpochMilli(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MzQ0Nw==", "bodyText": "what if the value is a map and not a terminal value?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273447", "createdAt": "2020-11-10T04:07:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -256,60 +257,32 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n-\n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n-                }\n-\n+                validateRequest(request);\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n                 Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n                 String[] keyPath = request.getKeyPath().toArray(new String[0]);\n                 Node node = configTopics.findNode(keyPath);\n-                if (node == null) {\n+\n+                if (node == null || node instanceof Topic) {\n                     try {\n-                        configTopics.lookup(keyPath)\n-                                .withValueChecked(request.getNewValue().get(keyPath[keyPath.length - 1]));\n+                        Topic updatedNode = configTopics.lookup(keyPath)\n+                                .withValueChecked(request.getTimestamp().toEpochMilli(),\n+                                        request.getValueToMerge().get(keyPath[keyPath.length - 1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MzU3NA==", "bodyText": "use the configuration key instead of parameter", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273574", "createdAt": "2020-11-10T04:07:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -318,6 +291,27 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Key is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Service config not found for service \" + serviceName);\n+            }\n+            Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MzU5Ng==", "bodyText": "Component, not service", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273596", "createdAt": "2020-11-10T04:08:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -318,6 +291,27 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Key is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Service config not found for service \" + serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MzY0NA==", "bodyText": "Key path is required", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273644", "createdAt": "2020-11-10T04:08:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -318,6 +291,27 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Key is required\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3Mzc1Mw==", "bodyText": "space before has", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273753", "createdAt": "2020-11-10T04:08:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -318,6 +291,27 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Key is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Service config not found for service \" + serviceName);\n+            }\n+            Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n+            String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+            Node node = configTopics.findNode(keyPath);\n+            if (node != null && !(node instanceof Topic) && !(node instanceof Topics)) {\n+                logger.atError().kv(SERVICE_NAME, serviceName)\n+                        .log(\"Somehow Node has an unknown type {}\", node.getClass());\n+                throw new InvalidArgumentsError(\"Node corresponding to keypath \"\n+                        + request.getKeyPath().toString() + \"has an unknown type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3Mzk3NA==", "bodyText": "remove", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520273974", "createdAt": "2020-11-10T04:09:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/IpcServer.java", "diffHunk": "@@ -58,6 +58,7 @@ public void runServer() {\n         }\n         serverBootstrap = new ServerBootstrap(eventLoopGroup);\n         tlsContext = tlsContextOptions != null ? new ServerTlsContext(tlsContextOptions) : null;\n+        System.out.println(\"Hostname: \" + hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODQzNjIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-526843620", "createdAt": "2020-11-10T04:26:34Z", "commit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b47172693cbcfae543d06154070c26b138350ebc", "committedDate": "2020-11-10T04:03:01Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}, "afterCommit": {"oid": "eab8b23c30e85399ddfe17a25d587694f507b27b", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eab8b23c30e85399ddfe17a25d587694f507b27b", "committedDate": "2020-11-10T21:13:22Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjgxMjE4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-527681218", "createdAt": "2020-11-10T23:09:39Z", "commit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzowOTozOVrOHwzL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoxNToyOFrOHwzUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMjM1MQ==", "bodyText": "should match not be match", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520932351", "createdAt": "2020-11-10T23:09:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +258,70 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                // The top level key is expected to be same as keyPath[keyPath.length - 1]\n+                Object value = request.getValueToMerge().get(keyPath[keyPath.length - 1]);\n+                if (value == null) {\n+                    throw new InvalidArgumentsError(\"Top level key in valueToMerge map should be match \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMjUwMg==", "bodyText": "check for null, the service might not exist", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520932502", "createdAt": "2020-11-10T23:09:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +258,70 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                // The top level key is expected to be same as keyPath[keyPath.length - 1]\n+                Object value = request.getValueToMerge().get(keyPath[keyPath.length - 1]);\n+                if (value == null) {\n+                    throw new InvalidArgumentsError(\"Top level key in valueToMerge map should be match \"\n+                            + \"the last node in keypath ( \" + keyPath[keyPath.length - 1] + \" )\");\n                 }\n-\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMjY5Ng==", "bodyText": "you can just use mergeMap, it does the same thing with less work for you.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520932696", "createdAt": "2020-11-10T23:10:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +258,70 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                // The top level key is expected to be same as keyPath[keyPath.length - 1]\n+                Object value = request.getValueToMerge().get(keyPath[keyPath.length - 1]);\n+                if (value == null) {\n+                    throw new InvalidArgumentsError(\"Top level key in valueToMerge map should be match \"\n+                            + \"the last node in keypath ( \" + keyPath[keyPath.length - 1] + \" )\");\n                 }\n-\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n-                Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n-                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                Topics configTopics = serviceTopics.lookupTopics(CONFIGURATION_CONFIG_KEY);\n                 Node node = configTopics.findNode(keyPath);\n                 if (node == null) {\n+                    if (value instanceof Map) {\n+                        configTopics.lookupTopics(keyPath).updateFromMap((Map)value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNDMxOA==", "bodyText": "component, not service", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520934318", "createdAt": "2020-11-10T23:14:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -317,6 +330,33 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Keypath is required\");\n+            }\n+            if (request.getTimestamp() == null) {\n+                throw new InvalidArgumentsError(\"Timestamp is required\");\n+            }\n+            if (request.getValueToMerge() == null) {\n+                throw new InvalidArgumentsError(\"ValueToMerge is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Component config not found for service \" + serviceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNDM3OQ==", "bodyText": "^", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520934379", "createdAt": "2020-11-10T23:14:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -318,6 +291,27 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Key is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Service config not found for service \" + serviceName);\n+            }\n+            Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3MzU3NA=="}, "originalCommit": {"oid": "b47172693cbcfae543d06154070c26b138350ebc"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNDU5Mg==", "bodyText": "should work now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520934592", "createdAt": "2020-11-10T23:15:28Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgentTest.java", "diffHunk": "@@ -267,92 +266,87 @@ void GIVEN_update_config_request_WHEN_update_key_does_not_exist_THEN_create_key(\n     }\n \n     @Test\n-    void GIVEN_update_config_request_WHEN_current_value_in_request_matches_current_value_for_node_THEN_update() {\n-        when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_A);\n-        when(kernel.findServiceTopic(TEST_COMPONENT_A))\n-                .thenReturn(configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A));\n-        UpdateConfigurationRequest request = new UpdateConfigurationRequest();\n-        request.setComponentName(TEST_COMPONENT_A);\n-        request.setKeyPath(Collections.singletonList(TEST_CONFIG_KEY_1));\n-        request.setNewValue(Collections.singletonMap(TEST_CONFIG_KEY_1, 30));\n-        request.setTimestamp(Instant.now());\n-        request.setOldValue(Collections.singletonMap(TEST_CONFIG_KEY_1, TEST_CONFIG_KEY_1_INITIAL_VALUE));\n-        UpdateConfigurationResponse response = agent.getUpdateConfigurationHandler(mockContext).handleRequest(request);\n-        assertNotNull(response);\n-\n-        assertEquals(30,\n-                kernel.findServiceTopic(TEST_COMPONENT_A).find(PARAMETERS_CONFIG_KEY, TEST_CONFIG_KEY_1).getOnce());\n-    }\n-\n-    @Test\n-    void GIVEN_update_config_request_WHEN_current_value_in_request_does_not_match_current_value_for_node_THEN_fail() {\n+    void GIVEN_update_config_request_WHEN_proposed_timestamp_is_stale_THEN_fail() {\n         when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_A);\n-        when(kernel.findServiceTopic(TEST_COMPONENT_A))\n-                .thenReturn(configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A));\n+        Topics componentAConfiguration =\n+                configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A);\n+        when(kernel.findServiceTopic(TEST_COMPONENT_A)).thenReturn(componentAConfiguration);\n+        long actualModTime = componentAConfiguration.lookup(PARAMETERS_CONFIG_KEY, TEST_CONFIG_KEY_1).getModtime();\n         UpdateConfigurationRequest request = new UpdateConfigurationRequest();\n-        request.setComponentName(TEST_COMPONENT_A);\n         request.setKeyPath(Collections.singletonList(TEST_CONFIG_KEY_1));\n-        request.setNewValue(Collections.singletonMap(TEST_CONFIG_KEY_1, 30));\n-        request.setTimestamp(Instant.now());\n-        request.setOldValue(Collections.singletonMap(TEST_CONFIG_KEY_1, 100));\n+        request.setValueToMerge(Collections.singletonMap(TEST_CONFIG_KEY_1, 30));\n+        request.setTimestamp(Instant.ofEpochMilli(actualModTime - 10));\n         FailedUpdateConditionCheckError error = assertThrows(FailedUpdateConditionCheckError.class, () ->\n                 agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n-        assertEquals(\"Current value for config is different from the current value needed for the update\",\n+        assertEquals(\"Proposed timestamp is older than the config's latest modified timestamp\",\n                 error.getMessage());\n     }\n \n     @Test\n-    void GIVEN_update_config_request_WHEN_proposed_timestamp_is_stale_THEN_fail() {\n+    void GIVEN_update_config_request_WHEN_requested_node_is_container_THEN_update_is_successful() {\n         when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_A);\n         Topics componentAConfiguration =\n                 configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A);\n+        componentAConfiguration.lookup(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\", \"SomeLeafKey\").withValue(\"SomeValue\");\n         when(kernel.findServiceTopic(TEST_COMPONENT_A)).thenReturn(componentAConfiguration);\n-        long actualModTime = componentAConfiguration.lookup(PARAMETERS_CONFIG_KEY, TEST_CONFIG_KEY_1).getModtime();\n+\n         UpdateConfigurationRequest request = new UpdateConfigurationRequest();\n-        request.setComponentName(TEST_COMPONENT_A);\n-        request.setKeyPath(Collections.singletonList(TEST_CONFIG_KEY_1));\n-        request.setNewValue(Collections.singletonMap(TEST_CONFIG_KEY_1, 30));\n-        request.setTimestamp(Instant.ofEpochMilli(actualModTime - 10));\n-        FailedUpdateConditionCheckError error = assertThrows(FailedUpdateConditionCheckError.class, () ->\n-                agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n-        assertEquals(\"Proposed timestamp is older than the config's latest modified timestamp\",\n-                error.getMessage());\n+        request.setKeyPath(Arrays.asList(\"SomeContainerKey\"));\n+        request.setValueToMerge(Collections.singletonMap(\"SomeContainerKey\", Collections.singletonMap(\"SomeLeafKey\",\n+                \"SomeOtherValue\")));\n+        request.setTimestamp(Instant.now());\n+        agent.getUpdateConfigurationHandler(mockContext).handleRequest(request);\n+        Topics updateTopics = componentAConfiguration.findTopics(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\");\n+        assertNotNull(updateTopics);\n+        assertEquals(\"SomeOtherValue\", Coerce.toString(((Topic)updateTopics.getChild(\"SomeLeafKey\")).getOnce()));\n     }\n \n     @Test\n-    void GIVEN_update_config_request_WHEN_requested_node_is_container_THEN_fail() {\n+    void GIVEN_update_config_request_WHEN_requested_node_is_leaf_THEN_update_to_convert_to_container_is_successful() {\n         when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_A);\n         Topics componentAConfiguration =\n                 configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A);\n         componentAConfiguration.lookup(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\", \"SomeLeafKey\").withValue(\"SomeValue\");\n         when(kernel.findServiceTopic(TEST_COMPONENT_A)).thenReturn(componentAConfiguration);\n \n         UpdateConfigurationRequest request = new UpdateConfigurationRequest();\n-        request.setComponentName(TEST_COMPONENT_A);\n-        request.setKeyPath(Collections.singletonList(\"SomeContainerKey\"));\n-        request.setNewValue(Collections.singletonMap(\"SomeContainerKey\", \"SomeOtherValue\"));\n+        request.setKeyPath(Arrays.asList(\"SomeContainerKey\", \"SomeLeafKey\"));\n+        request.setValueToMerge(Collections.singletonMap(\"SomeLeafKey\", Collections.singletonMap(\"newKey\",\n+                \"SomeOtherValue\")));\n         request.setTimestamp(Instant.now());\n+        assertThrows(InvalidArgumentsError.class,\n+                () -> agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n \n-        InvalidArgumentsError error = assertThrows(InvalidArgumentsError.class, () ->\n-                agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n-        assertEquals(\"Cannot update a non-leaf config node\",\n-                error.getMessage());\n+        //TODO: Uncomment this when node conversion from leaf to container is supported\n+\n+        //        Topics updateTopics = componentAConfiguration.findTopics(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\");\n+        //        assertNotNull(updateTopics);\n+        //        Topics convertedNode = (Topics)updateTopics.getChild(\"SomeLeafKey\");\n+        //        assertEquals(\"SomeOtherValue\",\n+        //                Coerce.toString(((Topic)convertedNode.getChild(\"newKey\")).getOnce()));\n     }\n \n     @Test\n-    void GIVEN_update_config_request_WHEN_requested_component_is_not_self_THEN_fail() {\n-        when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_B);\n+    void GIVEN_update_config_request_WHEN_requested_node_is_container_THEN_update_to_convert_to_leaf_is_successful() {\n+        when(mockAuthenticationData.getIdentityLabel()).thenReturn(TEST_COMPONENT_A);\n+        Topics componentAConfiguration =\n+                configuration.getRoot().lookupTopics(SERVICES_NAMESPACE_TOPIC, TEST_COMPONENT_A);\n+        componentAConfiguration.lookup(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\", \"SomeLeafKey\").withValue(\"SomeValue\");\n+        when(kernel.findServiceTopic(TEST_COMPONENT_A)).thenReturn(componentAConfiguration);\n \n         UpdateConfigurationRequest request = new UpdateConfigurationRequest();\n-        request.setComponentName(TEST_COMPONENT_A);\n-        request.setKeyPath(Collections.singletonList(TEST_CONFIG_KEY_1));\n-        request.setNewValue(Collections.singletonMap(TEST_CONFIG_KEY_1, 20));\n+        request.setKeyPath(Arrays.asList(\"SomeContainerKey\"));\n+        request.setValueToMerge(Collections.singletonMap(\"SomeContainerKey\", \"SomeOtherValue\"));\n         request.setTimestamp(Instant.now());\n+        assertThrows(InvalidArgumentsError.class,\n+                () -> agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n \n-        InvalidArgumentsError error = assertThrows(InvalidArgumentsError.class, () ->\n-                agent.getUpdateConfigurationHandler(mockContext).handleRequest(request));\n-        assertEquals(\"Cross component updates are not allowed\",\n-                error.getMessage());\n+        //TODO: Uncomment this when node conversion from container to leaf is supported\n+\n+        //        Topic updateTopic = componentAConfiguration.find(PARAMETERS_CONFIG_KEY, \"SomeContainerKey\");\n+        //        assertNotNull(updateTopic);\n+        //        assertEquals(\"SomeOtherValue\",\n+        //                Coerce.toString(updateTopic.getOnce()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66"}, "originalPosition": 167}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3986bb6dce3c3a5403ef7b0b80ffc7ac90a7df66", "committedDate": "2020-11-10T23:08:00Z", "message": "Merge branch 'master' into updateConfigIpc"}, "afterCommit": {"oid": "b6fa8f77ad8242e9e91804ed2b6c157759993268", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b6fa8f77ad8242e9e91804ed2b6c157759993268", "committedDate": "2020-11-10T23:24:59Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3447a77c683196ddec29a0989e4f3eff9f79784", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b3447a77c683196ddec29a0989e4f3eff9f79784", "committedDate": "2020-11-10T23:54:21Z", "message": "Addressing review comments"}, "afterCommit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/29d71cac0a04b45c6f9928fa96dbc3e531f90bab", "committedDate": "2020-11-10T23:55:33Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzE1NTA4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-527715508", "createdAt": "2020-11-11T00:22:00Z", "commit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NzYxNjEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-527761610", "createdAt": "2020-11-11T00:50:19Z", "commit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo1MDoxOVrOHw1ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTowMjowOVrOHw127g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2ODkwNg==", "bodyText": "nit: remove?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520968906", "createdAt": "2020-11-11T00:50:19Z", "author": {"login": "hui-yang"}, "path": "src/main/java/software/amazon/awssdk/eventstreamrpc/EventStreamRPCClient.java", "diffHunk": "@@ -100,6 +100,7 @@ protected void onContinuationMessage(List<Header> headers, byte[] payload, Messa\n                     if (messageFlags == MessageFlags.TerminateStream.getByteValue()) {\n                         try {\n                             this.close();\n+                            //is this call needed?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MTM2OQ==", "bodyText": "Is it possible a valid config node is null here? How does configuration without default value (not in recipes but in documentation) translate into config topics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520971369", "createdAt": "2020-11-11T00:55:07Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -317,6 +329,33 @@ public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest requ\n         public void handleStreamEvent(EventStreamJsonMessage streamRequestEvent) {\n \n         }\n+\n+        private void validateRequest(UpdateConfigurationRequest request) {\n+            if (Utils.isEmpty(request.getKeyPath())) {\n+                throw new InvalidArgumentsError(\"Keypath is required\");\n+            }\n+            if (request.getTimestamp() == null) {\n+                throw new InvalidArgumentsError(\"Timestamp is required\");\n+            }\n+            if (request.getValueToMerge() == null) {\n+                throw new InvalidArgumentsError(\"ValueToMerge is required\");\n+            }\n+\n+            Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+            if (serviceTopics == null) {\n+                throw new InvalidArgumentsError(\"Component config not found for component \" + serviceName);\n+            }\n+            Topics configTopics = serviceTopics.lookupTopics(CONFIGURATION_CONFIG_KEY);\n+            String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+            Node node = configTopics.findNode(keyPath);\n+            if (node != null && !(node instanceof Topic) && !(node instanceof Topics)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3MzgyNA==", "bodyText": "should this be in validateRequest()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520973824", "createdAt": "2020-11-11T00:58:46Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +257,70 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                // The top level key is expected to be same as keyPath[keyPath.length - 1]\n+                Object value = request.getValueToMerge().get(keyPath[keyPath.length - 1]);\n+                if (value == null) {\n+                    throw new InvalidArgumentsError(\"Top level key in valueToMerge map should match \"\n+                            + \"the last node in keypath ( \" + keyPath[keyPath.length - 1] + \" )\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3NjExMA==", "bodyText": "Not sure if I understand all the different branches here. Why .parent.updateFromMap in this case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r520976110", "createdAt": "2020-11-11T01:02:09Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +257,70 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                // The top level key is expected to be same as keyPath[keyPath.length - 1]\n+                Object value = request.getValueToMerge().get(keyPath[keyPath.length - 1]);\n+                if (value == null) {\n+                    throw new InvalidArgumentsError(\"Top level key in valueToMerge map should match \"\n+                            + \"the last node in keypath ( \" + keyPath[keyPath.length - 1] + \" )\");\n                 }\n-\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n-                Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n-                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                Topics configTopics = serviceTopics.lookupTopics(CONFIGURATION_CONFIG_KEY);\n                 Node node = configTopics.findNode(keyPath);\n                 if (node == null) {\n-                    try {\n-                        configTopics.lookup(keyPath)\n-                                .withValueChecked(request.getNewValue().get(keyPath[keyPath.length - 1]));\n-                    } catch (UnsupportedInputTypeException e) {\n-                        throw new InvalidArgumentsError(e.getMessage());\n+                    if (value instanceof Map) {\n+                        configTopics.lookupTopics(keyPath).updateFromMap((Map)value,\n+                                new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE,\n+                                request.getTimestamp().toEpochMilli()));\n+                    } else {\n+                        try {\n+                            configTopics.lookup(keyPath)\n+                                    .withValueChecked(request.getTimestamp().toEpochMilli(), value);\n+                        } catch (UnsupportedInputTypeException e) {\n+                            throw new InvalidArgumentsError(e.getMessage());\n+                        }\n+                    }\n+                } else if (node instanceof Topic) {\n+                    if (value instanceof Map) {\n+                        Topic topic = (Topic)node;\n+                        try {\n+                            topic.parent.updateFromMap(Collections.singletonMap(topic.getName(), value),\n+                                    new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE,\n+                                            request.getTimestamp().toEpochMilli()));\n+                        } catch (IllegalArgumentException e) {\n+                            throw new InvalidArgumentsError(e.getMessage());\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29d71cac0a04b45c6f9928fa96dbc3e531f90bab"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDIxNDgw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528421480", "createdAt": "2020-11-11T18:15:17Z", "commit": {"oid": "e15c64e77a696921cb09f2db5d8db9b26c3b0d47"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDM4MTc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528438177", "createdAt": "2020-11-11T18:39:05Z", "commit": {"oid": "e15c64e77a696921cb09f2db5d8db9b26c3b0d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozOTowNlrOHxZpNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODozOTowNlrOHxZpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU2MjQyMA==", "bodyText": "Use lookupTopics here to simplify the if else block below?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r521562420", "createdAt": "2020-11-11T18:39:06Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +256,44 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = new String[0];\n+                // Keypath is expected to denote the container node\n+                if (request.getKeyPath() != null) {\n+                    keyPath = request.getKeyPath().toArray(new String[0]);\n                 }\n \n+                Object value = request.getValueToMerge();\n+\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n-                Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n-                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                Topics configTopics = serviceTopics.lookupTopics(CONFIGURATION_CONFIG_KEY);\n                 Node node = configTopics.findNode(keyPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e15c64e77a696921cb09f2db5d8db9b26c3b0d47"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDQwNDUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528440450", "createdAt": "2020-11-11T18:42:28Z", "commit": {"oid": "e15c64e77a696921cb09f2db5d8db9b26c3b0d47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODo0MjoyOFrOHxZwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODo0MjoyOFrOHxZwVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU2NDI0NQ==", "bodyText": "What happens when this condition is true for the updatedNode but not true for one of its sub nodes. Wouldn't the update go through but the api throw back an error?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#discussion_r521564245", "createdAt": "2020-11-11T18:42:28Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCEventStreamAgent.java", "diffHunk": "@@ -255,60 +256,44 @@ protected void onStreamClosed() {\n         public UpdateConfigurationResponse handleRequest(UpdateConfigurationRequest request) {\n             return translateExceptions(() -> {\n                 logger.atDebug().kv(SERVICE_NAME, serviceName).log(\"Config IPC config update request\");\n-                if (Utils.isEmpty(request.getKeyPath())) {\n-                    throw new InvalidArgumentsError(\"Key is required\");\n-                }\n+                validateRequest(request);\n \n-                if (request.getComponentName() != null && !serviceName.equals(request.getComponentName())) {\n-                    throw new InvalidArgumentsError(\"Cross component updates are not allowed\");\n+                String[] keyPath = new String[0];\n+                // Keypath is expected to denote the container node\n+                if (request.getKeyPath() != null) {\n+                    keyPath = request.getKeyPath().toArray(new String[0]);\n                 }\n \n+                Object value = request.getValueToMerge();\n+\n                 Topics serviceTopics = kernel.findServiceTopic(serviceName);\n-                if (serviceTopics == null) {\n-                    throw new InvalidArgumentsError(\"Service config not found\");\n-                }\n-                Topics configTopics = serviceTopics.lookupTopics(PARAMETERS_CONFIG_KEY);\n-                String[] keyPath = request.getKeyPath().toArray(new String[0]);\n+                Topics configTopics = serviceTopics.lookupTopics(CONFIGURATION_CONFIG_KEY);\n                 Node node = configTopics.findNode(keyPath);\n+\n                 if (node == null) {\n+                    configTopics.lookupTopics(keyPath)\n+                            .updateFromMap((Map) value, new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE,\n+                                    request.getTimestamp().toEpochMilli()));\n+                } else if (node instanceof Topic) {\n+                    Topic topic = (Topic)node;\n                     try {\n-                        configTopics.lookup(keyPath)\n-                                .withValueChecked(request.getNewValue().get(keyPath[keyPath.length - 1]));\n-                    } catch (UnsupportedInputTypeException e) {\n+                        topic.parent.updateFromMap(Collections.singletonMap(topic.getName(), value),\n+                                new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE,\n+                                        request.getTimestamp().toEpochMilli()));\n+                    } catch (IllegalArgumentException e) {\n                         throw new InvalidArgumentsError(e.getMessage());\n                     }\n-                    return new UpdateConfigurationResponse();\n-                }\n-                // TODO :[P41210581]: UpdateConfiguration API should support updating nested configuration\n-                if (node instanceof Topics) {\n-                    throw new InvalidArgumentsError(\"Cannot update a non-leaf config node\");\n-                }\n-                if (!(node instanceof Topic)) {\n-                    logger.atError().kv(SERVICE_NAME, serviceName)\n-                            .log(\"Somehow Node has an unknown type {}\", node.getClass());\n-                    throw new InvalidArgumentsError(\"Node has an unknown type\");\n+                } else {\n+                    Topics topics = (Topics)node;\n+                    topics.updateFromMap((Map)value,\n+                            new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE, request\n+                            .getTimestamp().toEpochMilli()));\n                 }\n-                Topic topic = (Topic) node;\n-\n-                // Perform compare and swap if the customer has specified current value to compare\n-                if (request.getOldValue() != null && request.getOldValue().get(topic.getName()) != null && !request\n-                        .getOldValue().get(topic.getName()).equals(topic.getOnce())) {\n+                Node updatedNode = configTopics.findNode(keyPath);\n+                if (request.getTimestamp().toEpochMilli() < updatedNode.getModtime()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e15c64e77a696921cb09f2db5d8db9b26c3b0d47"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDkzNDg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528493485", "createdAt": "2020-11-11T20:01:44Z", "commit": {"oid": "9bd9ff25680c466dee107e98787bb848cb6562c9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd14226f0b7d6bd5879e0cafe930b1a2b295a98", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0fd14226f0b7d6bd5879e0cafe930b1a2b295a98", "committedDate": "2020-11-11T20:22:39Z", "message": "Updating the IPC API UpdateConfiguration as per new interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16e04255ae7702d34df233fb3c51741d58f2b70", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d16e04255ae7702d34df233fb3c51741d58f2b70", "committedDate": "2020-11-11T20:22:39Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8366479bbfb84225f1961ffab820425fb97a601", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d8366479bbfb84225f1961ffab820425fb97a601", "committedDate": "2020-11-11T20:22:39Z", "message": "Changing the design of UpdateConfiguration API. Now node specifed by keypath is expected to be a container node always"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12f5debceb7b1d057faf4a08347de57fe3cb56c", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e12f5debceb7b1d057faf4a08347de57fe3cb56c", "committedDate": "2020-11-11T21:04:55Z", "message": "Adding a fix to UpdateConfiguration API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bd9ff25680c466dee107e98787bb848cb6562c9", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9bd9ff25680c466dee107e98787bb848cb6562c9", "committedDate": "2020-11-11T19:54:01Z", "message": "Merge branch 'master' into updateConfigIpc"}, "afterCommit": {"oid": "e12f5debceb7b1d057faf4a08347de57fe3cb56c", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e12f5debceb7b1d057faf4a08347de57fe3cb56c", "committedDate": "2020-11-11T21:04:55Z", "message": "Adding a fix to UpdateConfiguration API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTcxNDky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528571492", "createdAt": "2020-11-11T22:09:34Z", "commit": {"oid": "e12f5debceb7b1d057faf4a08347de57fe3cb56c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTc5MjUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/648#pullrequestreview-528579251", "createdAt": "2020-11-11T22:23:36Z", "commit": {"oid": "e12f5debceb7b1d057faf4a08347de57fe3cb56c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "463e609d62760e2f7129fdd57777f87878326205", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/463e609d62760e2f7129fdd57777f87878326205", "committedDate": "2020-11-11T22:24:55Z", "message": "Merge branch 'master' into updateConfigIpc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}