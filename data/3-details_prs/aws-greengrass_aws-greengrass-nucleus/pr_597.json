{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNDkyNzY4", "number": 597, "title": "Fix flaky integration tests.", "bodyText": "Issue #, if available:\nDescription of changes:\nRan the following tests a 100 times locally with the changes.\n\nGIVEN_deployment_in_progress_WHEN_deployment_task_is_cancelled_THEN_stop_processing\nGIVEN_deployment_changes_component_config_WHEN_component_invalidates_config_THEN_deployment_fails\nGIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status_is_uploaded_to_cloud\nGIVEN_a_running_service_is_not_disruptable_WHEN_deployed_THEN_deployment_waits\n\nWhy is this change necessary:\nThese tests were flaky.\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-31T20:21:55Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597", "merged": true, "mergeCommit": {"oid": "8758be0b08ee889e8a93675319ae497e49bee787"}, "closed": true, "closedAt": "2020-10-31T22:19:13Z", "author": {"login": "nikkhilmuthye"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYBYg_AH2gAyNTEzNDkyNzY4OjE0NjU4OTU3ZTMxNGY3YWNhMWMxZTNhMjc5YTE4ODRlYjNjYTAwZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYCzRlAFqTUyMTE3NDQxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14658957e314f7aca1c1e3a279a1884eb3ca00d2", "author": {"user": {"login": "nikkhilmuthye", "name": "Nikkhil Muthye"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/14658957e314f7aca1c1e3a279a1884eb3ca00d2", "committedDate": "2020-10-31T20:28:06Z", "message": "Fix flaky integ tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e13d66fda961c25db2f836afdd58a2d8a418076", "author": {"user": {"login": "nikkhilmuthye", "name": "Nikkhil Muthye"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7e13d66fda961c25db2f836afdd58a2d8a418076", "committedDate": "2020-10-31T20:17:00Z", "message": "Fix flaky integ tests."}, "afterCommit": {"oid": "14658957e314f7aca1c1e3a279a1884eb3ca00d2", "author": {"user": {"login": "nikkhilmuthye", "name": "Nikkhil Muthye"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/14658957e314f7aca1c1e3a279a1884eb3ca00d2", "committedDate": "2020-10-31T20:28:06Z", "message": "Fix flaky integ tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426", "committedDate": "2020-10-31T21:07:09Z", "message": "Merge branch 'master' into fixFlakyTests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTcwMzAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#pullrequestreview-521170303", "createdAt": "2020-10-31T21:09:06Z", "commit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTcxOTI5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#pullrequestreview-521171929", "createdAt": "2020-10-31T21:31:32Z", "commit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozMTozMlrOHrqL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTozODo1N1rOHrqOlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjAxNQ==", "bodyText": "does the countdown latch ever get reset? It's initialized in a field but used countdown happens in before each", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542015", "createdAt": "2020-10-31T21:31:32Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {\n+                    allComponentsInFssUpdate.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjExNg==", "bodyText": "when would this not be the case that the fleet status details isn't reporting all of the ordered dependencies?\nshould this check more than just size?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542116", "createdAt": "2020-10-31T21:32:38Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -70,6 +65,19 @@ void setupKernel(ExtensionContext context) throws DeviceConfigurationException,\n         kernel.parseArgs(\"-i\", IotJobsFleetStatusServiceTest.class.getResource(\"smallPeriodicIntervalConfig.yaml\").toString());\n         kernel.getContext().put(MqttClient.class, mqttClient);\n \n+        when(mqttClient.publish(any(PublishRequest.class))).thenAnswer(i -> {\n+            Object argument = i.getArgument(0);\n+            PublishRequest publishRequest = (PublishRequest) argument;\n+            try {\n+                fleetStatusDetails.set(OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n+                        FleetStatusDetails.class));\n+                if (kernel.orderedDependencies().size() == fleetStatusDetails.get().getComponentStatusDetails().size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjI2MQ==", "bodyText": "should you also assert on the size, or that it at least isn't empty?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542261", "createdAt": "2020-10-31T21:34:16Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MjY3OA==", "bodyText": "does it check anywhere that the components that are reported are actually the ones that you expect?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#discussion_r515542678", "createdAt": "2020-10-31T21:38:57Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/status/PeriodicFleetStatusServiceTest.java", "diffHunk": "@@ -102,42 +109,17 @@ void GIVEN_config_with_small_periodic_interval_WHEN_interval_elapses_THEN_status\n         ((Map) kernel.getContext().getvIfExists(Kernel.SERVICE_TYPE_TO_CLASS_MAP_KEY).get()).put(\"plugin\",\n                 GreengrassService.class.getName());\n         assertNotNull(deviceConfiguration.getThingName());\n-        CountDownLatch allComponentsInFssUpdate = new CountDownLatch(1);\n-\n-        when(mqttClient.publish(captor.capture())).thenAnswer(i -> {\n-            Object argument = i.getArgument(0);\n-            PublishRequest publishRequest = (PublishRequest) argument;\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(publishRequest.getPayload(),\n-                    FleetStatusDetails.class);\n-            if (componentNamesToCheck.size() == fleetStatusDetails.getComponentStatusDetails().size()) {\n-                allComponentsInFssUpdate.countDown();\n-            }\n-            return CompletableFuture.completedFuture(0);\n-        });\n-\n         // Wait for some time for the publish request to have all the components update.\n         assertTrue(allComponentsInFssUpdate.await(30, TimeUnit.SECONDS), \"component publish requests\");\n-\n-        List<PublishRequest> prs = captor.getAllValues();\n-        // Get the last FSS publish request which should have all the components information.\n-        PublishRequest pr = prs.get(prs.size() - 1);\n-        try {\n-            FleetStatusDetails fleetStatusDetails = OBJECT_MAPPER.readValue(pr.getPayload(),\n-                    FleetStatusDetails.class);\n-            assertEquals(\"ThingName\", fleetStatusDetails.getThing());\n-            assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.getOverallStatus());\n-            assertNotNull(fleetStatusDetails.getComponentStatusDetails());\n-            String allUpdatedComponentNames = fleetStatusDetails.getComponentStatusDetails().stream()\n-                    .map(ComponentStatusDetails::getComponentName).collect(Collectors.joining(\", \"));\n-            assertEquals(componentNamesToCheck.size(), fleetStatusDetails.getComponentStatusDetails().size(),\n-                    \"Not all components were updated. Updated Components names are: \"\n-                            + allUpdatedComponentNames + \". All Components: \" +\n-                            String.join(\", \", componentNamesToCheck));\n-            fleetStatusDetails.getComponentStatusDetails().forEach(componentStatusDetails -> {\n-                componentNamesToCheck.remove(componentStatusDetails.getComponentName());\n-            });\n-        } catch (UnrecognizedPropertyException ignored) {\n+        assertNotNull(fleetStatusDetails);\n+        assertNotNull(fleetStatusDetails.get());\n+        assertEquals(\"ThingName\", fleetStatusDetails.get().getThing());\n+        assertEquals(OverallStatus.HEALTHY, fleetStatusDetails.get().getOverallStatus());\n+        assertNotNull(fleetStatusDetails.get().getComponentStatusDetails());\n+        for (ComponentStatusDetails componentStatusDetail : fleetStatusDetails.get().getComponentStatusDetails()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7643556a4e9ae09ee29d29fe7a9b18d3ce3e426"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079ae3ee9ad4b40e94bb31cfa37152af1c03cf3e", "author": {"user": {"login": "nikkhilmuthye", "name": "Nikkhil Muthye"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/079ae3ee9ad4b40e94bb31cfa37152af1c03cf3e", "committedDate": "2020-10-31T21:49:12Z", "message": "Move initialization into before each."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c06b7dc84d786546179389a9611aa57f6e0c6b1", "author": {"user": {"login": "nikkhilmuthye", "name": "Nikkhil Muthye"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c06b7dc84d786546179389a9611aa57f6e0c6b1", "committedDate": "2020-10-31T21:58:59Z", "message": "Assert all components are in FSS update message."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTc0MjQy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#pullrequestreview-521174242", "createdAt": "2020-10-31T22:04:47Z", "commit": {"oid": "7c06b7dc84d786546179389a9611aa57f6e0c6b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTc0NDEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/597#pullrequestreview-521174413", "createdAt": "2020-10-31T22:07:14Z", "commit": {"oid": "7c06b7dc84d786546179389a9611aa57f6e0c6b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2883, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}