{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTcwMTE4", "number": 256, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyNToyNVrOD_y5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowMzoyNlrOD_2LyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjIwNzExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyNToyNVrOGaq3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODo1Nzo1OFrOGasB4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODU1NQ==", "bodyText": "Why can't this return string directly? Same for the other fields. We can provide an API for topic update in this class, instead of exposing topics to Util", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430618555", "createdAt": "2020-05-26T18:25:25Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMjE4MQ==", "bodyText": "I don't want to reinvent the subscription system that Topic already has.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430622181", "createdAt": "2020-05-26T18:31:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODU1NQ=="}, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNDk0Ng==", "bodyText": "From the code it seems nothing is subscribing these topics. Will we have subscribers in the future?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430634946", "createdAt": "2020-05-26T18:53:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODU1NQ=="}, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzNzUzOA==", "bodyText": "Yes, future changes should switch to be subscribers.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430637538", "createdAt": "2020-05-26T18:57:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODU1NQ=="}, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjIyMzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyOTo0OFrOGarCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozMjowMVrOGarHPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMTI1NQ==", "bodyText": "Does this mean every time user call getAWSRegion() , a validator will be added? This may cause duplicated validators", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430621255", "createdAt": "2020-05-26T18:29:48Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {\n+        return getTopic(DEVICE_PARAM_PRIVATE_KEY_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getRootCAFilePath() {\n+        return getTopic(DEVICE_PARAM_ROOT_CA_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getIotDataEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_DATA_ENDPOINT);\n+    }\n+\n+    public Topic getIotCredentialEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n+    }\n+\n+    public Topic getAWSRegion() {\n+        return getTopic(DEVICE_PARAM_AWS_REGION).addValidator(regionValidator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMjUyNQ==", "bodyText": "no, it is a set so it won't be duplicated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430622525", "createdAt": "2020-05-26T18:32:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {\n+        return getTopic(DEVICE_PARAM_PRIVATE_KEY_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getRootCAFilePath() {\n+        return getTopic(DEVICE_PARAM_ROOT_CA_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getIotDataEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_DATA_ENDPOINT);\n+    }\n+\n+    public Topic getIotCredentialEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n+    }\n+\n+    public Topic getAWSRegion() {\n+        return getTopic(DEVICE_PARAM_AWS_REGION).addValidator(regionValidator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMTI1NQ=="}, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjcwNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MDo0MlrOGav2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1NTowNVrOGav--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDExMg==", "bodyText": "Can we extract the region from endpoints?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430700112", "createdAt": "2020-05-26T20:50:42Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMjMyOA==", "bodyText": "I was thinking more like the other way around; build the endpoint URL from region + unique id, but in any case I think we'll get rid of this region eventually; once the Greengrass services get setup with proper endpoints and auth.\nBut not sure.\nAlso, we're not guaranteed to have those endpoints setup yet anyway, like if we use this method to get the region for the setup script.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430702328", "createdAt": "2020-05-26T20:55:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDExMg=="}, "originalCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mjc0NjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowMzoyNlrOGawPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowMzoyNlrOGawPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNjUxMQ==", "bodyText": "nit:change the name of the argument to deviceConfiguration", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430706511", "createdAt": "2020-05-26T21:03:26Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "diffHunk": "@@ -43,16 +43,15 @@\n      * @throws DeviceConfigurationException When unable to initialize this manager.\n      */\n     @Inject\n-    IotConnectionManager(final DeviceConfigurationHelper helper) throws DeviceConfigurationException {\n+    IotConnectionManager(final DeviceConfiguration helper) throws DeviceConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4743, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}