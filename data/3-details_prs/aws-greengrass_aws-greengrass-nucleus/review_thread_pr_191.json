{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjYyMzY5", "number": 191, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1MzozOVrOD1bPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyNjozN1rOD2zi8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzQ3NDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1MzozOVrOGK3NUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOToxNDo1OVrOGK4CSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0MzQ3NQ==", "bodyText": "Why set this here? Why not just set it in the field?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414043475", "createdAt": "2020-04-23T18:53:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA1NzAzMw==", "bodyText": "Fixing in update", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414057033", "createdAt": "2020-04-23T19:14:59Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0MzQ3NQ=="}, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzQ3OTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODo1NDo1M1rOGK3Qhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTowMjoxM1rOGK3jRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NDI5NQ==", "bodyText": "I could be wrong, but I thought that the object mapper had a bytebuffer overload so you don't need to copy it into a byte[].", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414044295", "createdAt": "2020-04-23T18:54:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(PACKAGE_RECIPE_TYPE_YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            byte [] recipe = new byte[recipeBuf.remaining()];\n+            recipeBuf.get(recipe);\n+            return OBJECT_MAPPER.readValue(recipe, PackageRecipe.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0OTA5NA==", "bodyText": "No I checked for that, not an option unfortunately.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414049094", "createdAt": "2020-04-23T19:02:13Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,76 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_TYPE_YAML = \"YAML\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger;\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(PACKAGE_RECIPE_TYPE_YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            byte [] recipe = new byte[recipeBuf.remaining()];\n+            recipeBuf.get(recipe);\n+            return OBJECT_MAPPER.readValue(recipe, PackageRecipe.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NDI5NQ=="}, "originalCommit": {"oid": "5c9486b3825354fb8afea977e6b85d7a9e91823b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ4OTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNzo1MFrOGLAYdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNzo0MlrOGLBfJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5Mzc4Mg==", "bodyText": ".log()?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414193782", "createdAt": "2020-04-23T23:37:50Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTg3OA==", "bodyText": "Fixing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211878", "createdAt": "2020-04-24T00:27:42Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5Mzc4Mg=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ5MDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozODoxMFrOGLAY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNzo0MFrOGLBfGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzkxOQ==", "bodyText": "same", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414193919", "createdAt": "2020-04-23T23:38:10Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTg2Nw==", "bodyText": "Fixing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211867", "createdAt": "2020-04-24T00:27:40Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\");\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MzkxOQ=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ5NTEzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozOTozMVrOGLAbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNjo1N1rOGLBeSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDU3Ng==", "bodyText": "Is this a dependency of SDK? Why is it added explicitly if so?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414194576", "createdAt": "2020-04-23T23:39:31Z", "author": {"login": "abanthiy"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>\n+            <version>1.11.1-SNAPSHOT</version>\n+        </dependency>\n+        <!-- TODO: This is temporary, adding because there is some confusion about which version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTY1OQ==", "bodyText": "The pom file for the SDK is not pulling this in correctly. Working on a fix, this is a workaround.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211659", "createdAt": "2020-04-24T00:26:57Z", "author": {"login": "chaurah"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>\n+            <version>1.11.1-SNAPSHOT</version>\n+        </dependency>\n+        <!-- TODO: This is temporary, adding because there is some confusion about which version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDU3Ng=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUwMDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0MToyMlrOGLAebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNzozN1rOGLBfEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTMwOA==", "bodyText": "Do we need setter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414195308", "createdAt": "2020-04-23T23:41:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTg1OQ==", "bodyText": "Removing", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211859", "createdAt": "2020-04-24T00:27:37Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTMwOA=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUwNTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0MzoxMVrOGLAg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNzozMlrOGLBe_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTk2Mg==", "bodyText": "same", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414195962", "createdAt": "2020-04-23T23:43:11Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-artifact-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTgzOA==", "bodyText": "Fixing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211838", "createdAt": "2020-04-24T00:27:32Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-artifact-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NTk2Mg=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0ODozNFrOGLApBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNzoxN1rOGLBetg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODAyMg==", "bodyText": "This is not an exception in downloading the recipe. The received recipe is of invalid format right? So I think the message should be changed indicate that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198022", "createdAt": "2020-04-23T23:48:34Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTc2Ng==", "bodyText": "Good catch, fixing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211766", "createdAt": "2020-04-24T00:27:17Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found\n+         */\n+        /*int responseStatus = getPackageResult.getStatusCode();\n+        if (responseStatus != HttpURLConnection.HTTP_SEE_OTHER) {\n+            logger.atError(\"download-recipe-from-greengrass-repo\")\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"failureCode\", responseStatus)\n+                  .log();\n+            throw new PackageDownloadException(String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n+                                                             packageIdentifier.getArn());\n+        }*/\n+\n+        try {\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODAyMg=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyNDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0OTo1NlrOGLAq4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMjoxMzo0NFrOGLDVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODQ5Ng==", "bodyText": "How does client handle timeout?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198496", "createdAt": "2020-04-23T23:49:56Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTQwMg==", "bodyText": "Default AWS SDK behavior for retries and timeouts (I believe it's 30 seconds and 3 retries)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211402", "createdAt": "2020-04-24T00:26:14Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODQ5Ng=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzMjYxMw==", "bodyText": "So we expect to get a 408 response code in response here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414232613", "createdAt": "2020-04-24T01:39:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODQ5Ng=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI0MjE4MQ==", "bodyText": "Handled by AmazonClientException catch block. The SDK tries to throw exceptions for almost all cases. It's only when the service returns a 2xx with some separate response code in status body that you will need explicit status code parsing. In theory. Heavily depends on modelling.\nThink LambdaInvokeResponse and LambdaProxyResponse from v1.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414242181", "createdAt": "2020-04-24T02:13:44Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODQ5Ng=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyNDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MDoxMlrOGLArRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNToxM1rOGLBbxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODU5Nw==", "bodyText": "5XX?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414198597", "createdAt": "2020-04-23T23:50:12Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTAxMg==", "bodyText": "None yet, service only returns the above. Still WIP from their side.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211012", "createdAt": "2020-04-24T00:25:13Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,75 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+        GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+\n+        // TODO: Currently getPackageResult doesn't have http status code in the object.\n+        // Uncomment below code once the model is updated\n+\n+        /*\n+            Potential responses:\n+            - 302: See Other (Redirects to pre-signed S3 URL)\n+            - 400: Invalid Input\n+            - 403: Forbidden\n+            - 404: Resource Not Found", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5ODU5Nw=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDUyOTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo1MTo1N1rOGLAtuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDoyNTo0M1rOGLBcXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTIyNQ==", "bodyText": "Why is there no client in the name of this type? Is this standard?\nThis is a REST client I believe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414199225", "createdAt": "2020-04-23T23:51:57Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMTE2Nw==", "bodyText": "WIP client, subject to change if the service client changes. I would except the final client is just called AWSGreengrassClient", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414211167", "createdAt": "2020-04-24T00:25:43Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+@Setter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5OTIyNQ=="}, "originalCommit": {"oid": "53934839fa7b27b39284705dd288f011ab984eef"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDk0NjEzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowMzo0M1rOGLERkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzowNjo0OFrOGLEVaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NzU1NA==", "bodyText": "Is this public or is it pulling from our private cloudfront?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414257554", "createdAt": "2020-04-24T03:03:43Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1ODUzNw==", "bodyText": "Our cloudfront distribution at the moment. Long term am going to propose the sdk team maintains a pipeline to set something up in their own account. Had an initial discussion with Jason and he seemed open to the idea.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414258537", "createdAt": "2020-04-24T03:06:48Z", "author": {"login": "chaurah"}, "path": "pom.xml", "diffHunk": "@@ -85,6 +85,21 @@\n             <artifactId>evergreen-java-sdk</artifactId>\n             <version>0.0.0-SNAPSHOT</version>\n         </dependency>\n+        <dependency>\n+            <groupId>com.amazonaws.services</groupId>\n+            <artifactId>greengrasspackagemanagement</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1NzU1NA=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDk2MTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxMDo0NlrOGLEZ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxOToyNlrOGLEkew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1OTY4OA==", "bodyText": "For unit testing keep this package private if possible.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414259688", "createdAt": "2020-04-24T03:10:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MjM5NQ==", "bodyText": "Makes sense, going to check if doable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414262395", "createdAt": "2020-04-24T03:19:26Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI1OTY4OA=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDk2NTc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzoxMjoxOFrOGLEb_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowOTozNlrOGLjZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MDIyMg==", "bodyText": "Never seen this before, is this from the new client or is this in our code?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414260222", "createdAt": "2020-04-24T03:12:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MjY3NQ==", "bodyText": "New for us, discovered it myself while working on this PR. Located here : https://github.com/aws/aws-greengrass-kernel/blob/1f1808f9175d3b22169286e4c309d6a628d7490f/src/main/java/com/aws/iot/evergreen/util/SerializerFactory.java", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414262675", "createdAt": "2020-04-24T03:20:29Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MDIyMg=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NDM0Ng==", "bodyText": "Better if renaming it to RECIPE_SERIALIZER because it is configured as an recipe serializer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414744346", "createdAt": "2020-04-24T17:31:10Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MDIyMg=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NzQ5Ng==", "bodyText": "Makes sense, updating", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414767496", "createdAt": "2020-04-24T18:09:36Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2MDIyMg=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI0NTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzozMzoxN1rOGLiD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNjo1MDo1OFrOGMtZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NTU5OA==", "bodyText": "We should be able to avoid creating this. Let's sync up offline.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414745598", "createdAt": "2020-04-24T17:33:17Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3OTk2NA==", "bodyText": "Removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r415979964", "createdAt": "2020-04-27T16:50:58Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.amazonaws.client.builder.AwsClientBuilder;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagementClientBuilder;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Utils;\n+import lombok.Getter;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+@Getter\n+public class GreengrassPackageServiceClientFactory {\n+\n+    private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n+\n+    private final AWSGreengrassPackageManagement pmsClient;\n+\n+    /**\n+     * Constructor with custom endpoint/region configuration.\n+     *\n+     * @param greengrassServiceEndpoint String containing service endpoint\n+     * @param greengrassServiceRegion String containing service region\n+     */\n+    @Inject\n+    public GreengrassPackageServiceClientFactory(\n+            @Named(\"greengrassServiceEndpoint\") String greengrassServiceEndpoint,\n+            @Named(\"greengrassServiceRegion\") String greengrassServiceRegion) {\n+\n+        if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n+            // Initialize default client, client builder determines endpoint configuration\n+            // Will try to use default credential provider and environment region configuration\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", \"default\")\n+                  .addKeyValue(\"service-region\", \"default\")\n+                  .log();\n+            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+        } else {\n+            AWSGreengrassPackageManagementClientBuilder clientBuilder\n+                    = AWSGreengrassPackageManagementClientBuilder.standard();\n+            logger.atInfo(\"initialize-pms-client\")\n+                  .addKeyValue(\"service-endpoint\", greengrassServiceEndpoint)\n+                  .addKeyValue(\"service-region\", greengrassServiceRegion)\n+                  .log();\n+            clientBuilder.withEndpointConfiguration(\n+                    new AwsClientBuilder.EndpointConfiguration(greengrassServiceEndpoint, greengrassServiceRegion));\n+            this.pmsClient = clientBuilder.build();\n+        }\n+        // TODO: Might need to retrieve AWS credentials from custom credential provider\n+    }\n+\n+    /**\n+     * Constructor for unit testing.\n+     * @param client AWSGreengrassPackageManagement object\n+     */\n+    public GreengrassPackageServiceClientFactory(AWSGreengrassPackageManagement client) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NTU5OA=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI2NDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzozODoxMlrOGLiPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxMDo0NlrOGLjcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODQ4OQ==", "bodyText": "Try only the line\nGetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n\nfor catching exceptions for calling PMS.\nThen try parsing logic for handling parsing/loading exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414748489", "createdAt": "2020-04-24T17:38:12Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2ODE4NA==", "bodyText": "Split the two basically? Sounds good", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414768184", "createdAt": "2020-04-24T18:10:46Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODQ4OQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI2NTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzozODozMVrOGLiQAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozNzoyMVrOGLmZ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODY3Mw==", "bodyText": "No need to implement fully but what about Service Exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414748673", "createdAt": "2020-04-24T17:38:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2ODAyOQ==", "bodyText": "Service Exception is child of client exception. When we have a stable sdk, we can expand into various handlers, didn't seem warranted at the moment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414768029", "createdAt": "2020-04-24T18:10:29Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODY3Mw=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMzI0Nw==", "bodyText": "I'm referring to AmazonServiceException. Other than catching client exception, which indicates error in java client, we should probably also catch AmazonServiceException to handle error from service side.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414803247", "createdAt": "2020-04-24T19:11:55Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODY3Mw=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNjc1MQ==", "bodyText": "yes, that's a child of the client exception. Ideally the SDK should specify exceptions to be caught in the service model. There are some but the model is not complete yet. The hierarchy is\nAmazonClientException <- AmazonServiceException <- Service model defined exceptions.\nAs mentioned, I can break down into catching specific exceptions, I just don't see the point at the moment with the service and service models not fully implemented yet.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414816751", "createdAt": "2020-04-24T19:37:21Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,70 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper OBJECT_MAPPER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})\n-    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier) throws PackageDownloadException {\n-        // TODO: to be implemented.\n-        return null;\n+    PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageDownloadException, PackageLoadingException {\n+        GetPackageRequest getPackageRequest =\n+                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n+                                       .withType(RecipeFormatType.YAML);\n+\n+        try {\n+            GetPackageResult getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            ByteBuffer recipeBuf = getPackageResult.getRecipe();\n+            return OBJECT_MAPPER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n+                                           PackageRecipe.class);\n+        } catch (IOException e) {\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n+                                            packageIdentifier.getArn());\n+            logger.atError(\"download-package-from-greengrass-repo\", e)\n+                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n+                  .addKeyValue(\"errorMessage\", errorMsg)\n+                  .log();\n+            throw new PackageLoadingException(errorMsg, e);\n+        } catch (AmazonClientException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0ODY3Mw=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI3MjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MDoxMVrOGLiT1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTozODo0NVrOGLmc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTY1NQ==", "bodyText": "Let's not check this in, shall we? Cloud team should be able to return a 200 instead of 302 easily...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414749655", "createdAt": "2020-04-24T17:40:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -50,9 +71,45 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) {\n-        //TODO retrieve artifact presigned download URL from cloud as redirection\n-        return \"placeholder\";\n+    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n+        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n+                                                                        .withPackageARN(packageArn);\n+\n+        GetArtifactResult getArtifactResult = null;\n+        // TODO: This is horribly bad code, but unfortunately, the service is configured to return 302 redirect and\n+        // the auto-generated SDK does NOT like that. The only way to handle this at the moment is to catch the\n+        // exception for the redirect. This response code needs a revisit from the service side either to change the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2ODk4Mg==", "bodyText": "There's going to be an api discussion, will take time. I think the preferred approach will be to see if we can improve the default auto-generated behavior and not throw an exception. Either way will take 2-3 weeks while they're working on the service code, no point holding off on this.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414768982", "createdAt": "2020-04-24T18:12:02Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -50,9 +71,45 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) {\n-        //TODO retrieve artifact presigned download URL from cloud as redirection\n-        return \"placeholder\";\n+    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n+        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n+                                                                        .withPackageARN(packageArn);\n+\n+        GetArtifactResult getArtifactResult = null;\n+        // TODO: This is horribly bad code, but unfortunately, the service is configured to return 302 redirect and\n+        // the auto-generated SDK does NOT like that. The only way to handle this at the moment is to catch the\n+        // exception for the redirect. This response code needs a revisit from the service side either to change the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTY1NQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMzc5MA==", "bodyText": "If it is 2-3 weeks, then let's merge this in. Maybe I'm missing some context, but getArtifact should just return 200. Even if is returning a \"redirectUrl\", but has nothing to do with returning a 302 for this API... I think it could be easily communicated with them.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414803790", "createdAt": "2020-04-24T19:13:01Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -50,9 +71,45 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) {\n-        //TODO retrieve artifact presigned download URL from cloud as redirection\n-        return \"placeholder\";\n+    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n+        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n+                                                                        .withPackageARN(packageArn);\n+\n+        GetArtifactResult getArtifactResult = null;\n+        // TODO: This is horribly bad code, but unfortunately, the service is configured to return 302 redirect and\n+        // the auto-generated SDK does NOT like that. The only way to handle this at the moment is to catch the\n+        // exception for the redirect. This response code needs a revisit from the service side either to change the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTY1NQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxNzQ5MQ==", "bodyText": "They had a design reviewed for the API already. I obviously already communicated the issue to them, but in the end they have to reach the stage where they will be implementing the API in the first place. Sending you the API design doc for reference :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414817491", "createdAt": "2020-04-24T19:38:45Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -50,9 +71,45 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) {\n-        //TODO retrieve artifact presigned download URL from cloud as redirection\n-        return \"placeholder\";\n+    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n+        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n+                                                                        .withPackageARN(packageArn);\n+\n+        GetArtifactResult getArtifactResult = null;\n+        // TODO: This is horribly bad code, but unfortunately, the service is configured to return 302 redirect and\n+        // the auto-generated SDK does NOT like that. The only way to handle this at the moment is to catch the\n+        // exception for the redirect. This response code needs a revisit from the service side either to change the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTY1NQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI4NDQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MzowMlrOGLia6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxMzoyNlrOGLjilA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTQ2NQ==", "bodyText": "One of the point of having clientFactory is that you could mock it.\nIf you do:\nclientFactory = mock(ClientFactory);\nwhen(clientFactory.getClient()).thenReturn(mockClient);\n\nthis.helper = new Helper(clientFactory);\n\nThen you could remove both spy and constructor for unit test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414751465", "createdAt": "2020-04-24T17:43:02Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2OTgxMg==", "bodyText": "Tried that, need spy because of the connection object responses. I can do the other one though probably, but felt kinda redundant to mock.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414769812", "createdAt": "2020-04-24T18:13:26Z", "author": {"login": "chaurah"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTQ2NQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODI4ODUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0Mzo1OVrOGLidJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODoxNDowOFrOGLjkMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MjAzOQ==", "bodyText": "If we do getPackage(any()) here, we need to verify the argument to ensure client is called with the argument we expect.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414752039", "createdAt": "2020-04-24T17:43:59Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_url_WHEN_attempt_download_THEN_task_succeed() throws Exception {\n+        String recipeContents =\n+                TestHelper.getPackageRecipeForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.0.0\");\n+        ByteBuffer testRecipeBytes = ByteBuffer.wrap(recipeContents.getBytes());\n+        GetPackageResult testResult = new GetPackageResult().withRecipe(testRecipeBytes);\n+        doReturn(testResult).when(client).getPackage(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3MDIyNA==", "bodyText": "Can improve that, need a captor. Sounds good.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r414770224", "createdAt": "2020-04-24T18:14:08Z", "author": {"login": "chaurah"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelperTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.aws.iot.evergreen.packagemanager;\n+\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+\n+import com.vdurmont.semver4j.Semver;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+import java.nio.ByteBuffer;\n+\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+\n+@ExtendWith({MockitoExtension.class, EGExtension.class})\n+class GreengrassPackageServiceHelperTest {\n+\n+    @Mock\n+    private AWSGreengrassPackageManagement client;\n+\n+    private GreengrassPackageServiceClientFactory clientFactory;\n+    private GreengrassPackageServiceHelper helper;\n+\n+    @BeforeEach\n+    void beforeEach() {\n+        this.clientFactory = new GreengrassPackageServiceClientFactory(client);\n+        this.helper = spy(new GreengrassPackageServiceHelper(clientFactory));\n+    }\n+\n+    @Test\n+    void GIVEN_artifact_url_WHEN_attempt_download_THEN_task_succeed() throws Exception {\n+        String recipeContents =\n+                TestHelper.getPackageRecipeForTestPackage(TestHelper.MONITORING_SERVICE_PACKAGE_NAME, \"1.0.0\");\n+        ByteBuffer testRecipeBytes = ByteBuffer.wrap(recipeContents.getBytes());\n+        GetPackageResult testResult = new GetPackageResult().withRecipe(testRecipeBytes);\n+        doReturn(testResult).when(client).getPackage(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MjAzOQ=="}, "originalCommit": {"oid": "a298d4d7ab36f552996997fdbddea2f5c997a310"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzkxMDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxOTo1NlrOGMurRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0MDo0MlrOGMvn6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMDgzNg==", "bodyText": "remove this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416000836", "createdAt": "2020-04-27T17:19:56Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,74 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNjM2Mw==", "bodyText": "Not storing the client factory in a variable, need a constructor to get the PMS client from the factory. Otherwise could directly Inject in the variable itself. It's also needed for unit testing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416016363", "createdAt": "2020-04-27T17:40:42Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,15 +1,74 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.amazonaws.AmazonClientException;\n+import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n+import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n+import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.util.SerializerFactory;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    //TODO connect to cloud service\n+    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n+    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n+\n+    private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n+\n+    // Service logger instance\n+    protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n+\n     @SuppressWarnings({\"PMD.UnusedLocalVariable\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwMDgzNg=="}, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Nzk0MjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoyNjozN1rOGMu99A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo0MDo1MFrOGMvoUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTYyMA==", "bodyText": "remove the first one?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416005620", "createdAt": "2020-04-27T17:26:37Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -12,22 +19,36 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n+import java.util.Map;\n+import javax.inject.Inject;\n \n public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n     private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n     private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String HTTP_HEADER_LOCATION = \"Location\";\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT\n+            = \"Failed to download artifact %s for package %s, http response from server was %d\";\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassRepositoryDownloader(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n \n     @SuppressWarnings({\"PMD.AssignmentInOperand\", \"AvoidFileStream\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxNjQ2NQ==", "bodyText": "Same as above", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/191#discussion_r416016465", "createdAt": "2020-04-27T17:40:50Z", "author": {"login": "chaurah"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -12,22 +19,36 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.StandardCopyOption;\n+import java.util.Map;\n+import javax.inject.Inject;\n \n public class GreengrassRepositoryDownloader implements ArtifactDownloader {\n     private static final Logger logger = LogManager.getLogger(GreengrassRepositoryDownloader.class);\n     private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String HTTP_HEADER_LOCATION = \"Location\";\n+    private static final String ARTIFACT_DOWNLOAD_EXCEPTION_PMS_FMT\n+            = \"Failed to download artifact %s for package %s, http response from server was %d\";\n+\n+    private final AWSGreengrassPackageManagement evgPmsClient;\n+\n+    @Inject\n+    public GreengrassRepositoryDownloader(GreengrassPackageServiceClientFactory clientFactory) {\n+        this.evgPmsClient = clientFactory.getPmsClient();\n+    }\n \n     @SuppressWarnings({\"PMD.AssignmentInOperand\", \"AvoidFileStream\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwNTYyMA=="}, "originalCommit": {"oid": "64279c0608b329430f4769076456f9d26ad81775"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4617, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}