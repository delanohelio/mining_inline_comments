{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NDUwNTY0", "number": 105, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDowOVrODm62iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToyMTo0NlrODpVhdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM2NzE1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMDowOVrOF0nUnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0NTo1NlrOF0ni_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDUyNA==", "bodyText": "Can we have multiple beforealls? Like if a class that extends this abstract test wants to use a beforeall, do both work?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390714524", "createdAt": "2020-03-11T02:30:09Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractItTestCase {\n+\n+    @TempDir\n+    protected static Path tempRootDir;\n+\n+    @BeforeAll", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODIwNg==", "bodyText": "Yes we can and subclasses's beforeAll runs after the base class's beforeAll. KernelTest overrides storage from console to a file since it currently relies on watching the file for verification", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390718206", "createdAt": "2020-03-11T02:45:56Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractItTestCase {\n+\n+    @TempDir\n+    protected static Path tempRootDir;\n+\n+    @BeforeAll", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDUyNA=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM2OTQzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMTozNVrOF0nV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0ODoxM1rOF0nlCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDg3Ng==", "bodyText": "Get rid of the catch and fail. Just throw from the test.\nWhy did you make this change, maybe I'm missing something?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390714876", "createdAt": "2020-03-11T02:31:35Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -192,27 +170,29 @@ void testSomeMethod() throws Exception {\n         Thread thread = new Thread(runnable);\n         thread.start();\n \n-        Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-r\", tempRootDir.toString(), \"-log\", \"stdout\", \"-i\",\n-                KernelTest.class.getResource(\"config.yaml\").toString());\n-        kernel.launch();\n-        boolean ok = OK[0].await(200, TimeUnit.SECONDS);\n-        assertTrue(ok);\n-        testGroup(0);\n-        System.out.println(\"First phase passed, now for the harder stuff\");\n-\n-        kernel.find(\"main\", \"run\")\n-                .setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" + \"   done\");\n-        //            kernel.writeConfig(new OutputStreamWriter(System.out));\n-        testGroup(1);\n-\n-        System.out.println(\"Now merging delta.yaml\");\n-        kernel.mergeInNewConfig(\"ID\", System.currentTimeMillis(),\n-                (Map<Object, Object>) JSON.std.with(new YAMLFactory()).anyFrom(getClass().getResource(\"delta\"\n-                        + \".yaml\")))\n-                .get(60, TimeUnit.SECONDS);\n-        testGroup(2);\n-        kernel.shutdown();\n+        try {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+            kernel.launch();\n+            boolean ok = OK[0].await(200, TimeUnit.SECONDS);\n+            assertTrue(ok);\n+            testGroup(0);\n+            System.out.println(\"First phase passed, now for the harder stuff\");\n+\n+            kernel.find(\"main\", \"run\").setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" +\n+                    \"   done\");\n+            //            kernel.writeConfig(new OutputStreamWriter(System.out));\n+            testGroup(1);\n+            System.out.println(\"Now merging delta.yaml\");\n+\n+            kernel.context.get(UpdateSystemSafelyService.class).addUpdateAction(\"test\",\n+                    () -> kernel.readMerge(this.getClass().getResource(\"delta.yaml\"), false));\n+            testGroup(2);\n+            kernel.shutdown();\n+        } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODczMA==", "bodyText": "Good catch. I think I copied the old version when changing it... Will get rid of it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390718730", "createdAt": "2020-03-11T02:48:13Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -192,27 +170,29 @@ void testSomeMethod() throws Exception {\n         Thread thread = new Thread(runnable);\n         thread.start();\n \n-        Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-r\", tempRootDir.toString(), \"-log\", \"stdout\", \"-i\",\n-                KernelTest.class.getResource(\"config.yaml\").toString());\n-        kernel.launch();\n-        boolean ok = OK[0].await(200, TimeUnit.SECONDS);\n-        assertTrue(ok);\n-        testGroup(0);\n-        System.out.println(\"First phase passed, now for the harder stuff\");\n-\n-        kernel.find(\"main\", \"run\")\n-                .setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" + \"   done\");\n-        //            kernel.writeConfig(new OutputStreamWriter(System.out));\n-        testGroup(1);\n-\n-        System.out.println(\"Now merging delta.yaml\");\n-        kernel.mergeInNewConfig(\"ID\", System.currentTimeMillis(),\n-                (Map<Object, Object>) JSON.std.with(new YAMLFactory()).anyFrom(getClass().getResource(\"delta\"\n-                        + \".yaml\")))\n-                .get(60, TimeUnit.SECONDS);\n-        testGroup(2);\n-        kernel.shutdown();\n+        try {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", this.getClass().getResource(\"config.yaml\").toString());\n+            kernel.launch();\n+            boolean ok = OK[0].await(200, TimeUnit.SECONDS);\n+            assertTrue(ok);\n+            testGroup(0);\n+            System.out.println(\"First phase passed, now for the harder stuff\");\n+\n+            kernel.find(\"main\", \"run\").setValue(\"while true; do\\n\" + \"        date; sleep 5; echo NEWMAIN\\n\" + \"     \" +\n+                    \"   done\");\n+            //            kernel.writeConfig(new OutputStreamWriter(System.out));\n+            testGroup(1);\n+            System.out.println(\"Now merging delta.yaml\");\n+\n+            kernel.context.get(UpdateSystemSafelyService.class).addUpdateAction(\"test\",\n+                    () -> kernel.readMerge(this.getClass().getResource(\"delta.yaml\"), false));\n+            testGroup(2);\n+            kernel.shutdown();\n+        } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNDg3Ng=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM3MDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozMjoyOFrOF0nWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0OTowMlrOF0nl3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTA0Ng==", "bodyText": "quit? Since this is a property that can't be fixed by a deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390715046", "createdAt": "2020-03-11T02:32:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });\n+\n+\n+        // Initialize root path from System Property/JVM argument\n+        String rootAbsolutePath = System.getProperty(\"root\");\n+        if (Utils.isEmpty(rootAbsolutePath) || !ensureCreated(Paths.get(rootAbsolutePath))) {\n+            System.err.println(rootAbsolutePath + \": not a valid root directory\");\n+            broken = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODk0MA==", "bodyText": "Yeah, I thought about just System.exit(1) but there are other logic related to this broken so I didn't bother changing it now...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390718940", "createdAt": "2020-03-11T02:49:02Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });\n+\n+\n+        // Initialize root path from System Property/JVM argument\n+        String rootAbsolutePath = System.getProperty(\"root\");\n+        if (Utils.isEmpty(rootAbsolutePath) || !ensureCreated(Paths.get(rootAbsolutePath))) {\n+            System.err.println(rootAbsolutePath + \": not a valid root directory\");\n+            broken = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTA0Ng=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM3MzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozNDoyMFrOF0nYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToxMDoyOVrOF4cpHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTUxMg==", "bodyText": "Seems like you should be setting the value as the dflt on line 121 from the system property?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390715512", "createdAt": "2020-03-11T02:34:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODU5MQ==", "bodyText": "Yeah. Line 144 sets it and Line 145 updates the prefs", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390718591", "createdAt": "2020-03-11T02:47:40Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTUxMg=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxOTI4Mw==", "bodyText": "Right, maybe just remove the dflt then? Since it will never be used.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390719283", "createdAt": "2020-03-11T02:50:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTUxMg=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczMzg1NQ==", "bodyText": "Removed. I also removed the \"stickiness\" with Preference, because now it is a required when starting JVM every time. But I'm not sure how James thinks about it....but I guess we can always add it back.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r394733855", "createdAt": "2020-03-19T01:10:29Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -133,6 +133,18 @@ public Kernel parseArgs(String... args) {\n                         ensureCreated(workPath);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTUxMg=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM3MzkyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozNDo1NlrOF0nY8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0OToxNVrOF0nmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTYzMg==", "bodyText": "Not a big deal, but I don't like this class name. Can we just go with AbstractTest? or similar", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390715632", "createdAt": "2020-03-11T02:34:56Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractItTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxODk4OQ==", "bodyText": "See the updated name!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390718989", "createdAt": "2020-03-11T02:49:15Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractItTestCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractItTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTYzMg=="}, "originalCommit": {"oid": "093125693449b8d1906f0231796a6a4050dfb462"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM3NDQ1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractBaseITCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjozNToyOFrOF0nZTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0Mjo0NFrOF0nf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTcyNA==", "bodyText": "What is the IT in the name?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390715724", "createdAt": "2020-03-11T02:35:28Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractBaseITCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractBaseITCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a98184c4bddf9a8b734ada2fda7336d27c8459"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNzQxOA==", "bodyText": "Great question. IT stands for \"Integration Test\" per maven's standard. Added this to the PR description!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r390717418", "createdAt": "2020-03-11T02:42:44Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/AbstractBaseITCase.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.aws.iot.evergreen.integrationtests;\n+\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.nio.file.Path;\n+\n+public abstract class AbstractBaseITCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNTcyNA=="}, "originalCommit": {"oid": "f6a98184c4bddf9a8b734ada2fda7336d27c8459"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTg3MzkzOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0NjoyM1rOF2M-UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToxMjo1NlrOF4crfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3OTk4NA==", "bodyText": "This can be refactored now after James added the log listener. But I'm fine with addressing this in a separate PR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r392379984", "createdAt": "2020-03-13T17:46:23Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -44,44 +37,30 @@\n             new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n             new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n             new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    static final String LogFileName = \"test.log\";\n+    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n+    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n     static {\n         for (int i = gc.length; --i >= 0; ) {\n             OK[i] = new CountDownLatch(gc[i]);\n         }\n     }\n \n-    @TempDir\n-    Path tempRootDir;\n-\n     @BeforeAll\n-    static void setup() {\n+    static void beforeAll () {\n+        // TODO Migrate off verification through logging\n+        // override log store to a file for legacy kernel test to verify logs\n         System.setProperty(\"log.fmt\", \"JSON\");\n-        System.setProperty(\"log.storeName\", LogFileName);\n         System.setProperty(\"log.store\", \"FILE\");\n         System.setProperty(\"log.level\", \"INFO\");\n-        try {\n-            Files.deleteIfExists(Paths.get(LogFileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @AfterAll\n-    static void cleanup() {\n-        try {\n-            Files.deleteIfExists(Paths.get(LogFileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+        System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n+        System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a98184c4bddf9a8b734ada2fda7336d27c8459"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNDQ2MQ==", "bodyText": "Will be done in the next PR of \"Refactor KernelTest\"!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r394734461", "createdAt": "2020-03-19T01:12:56Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -44,44 +37,30 @@\n             new Expected(1, \"\\\"stdout\\\":\\\"NEWMAIN\\\"\", \"Assignment to 'run' script'\"),\n             new Expected(2, \"\\\"stdout\\\":\\\"JUSTME=fancy a spot of coffee?\\\"\", \"merge yaml\"),\n             new Expected(2, \"\\\"stdout\\\":\\\"I'm Frodo\\\"\", \"merge adding dependency\")};\n-    static final String LogFileName = \"test.log\";\n+    private static final String LOG_FILE_NAME = \"KernelTest.log\";\n+    private static final String LOG_FILE_PATH_NAME = tempRootDir.resolve(LOG_FILE_NAME).toAbsolutePath().toString();\n \n     static {\n         for (int i = gc.length; --i >= 0; ) {\n             OK[i] = new CountDownLatch(gc[i]);\n         }\n     }\n \n-    @TempDir\n-    Path tempRootDir;\n-\n     @BeforeAll\n-    static void setup() {\n+    static void beforeAll () {\n+        // TODO Migrate off verification through logging\n+        // override log store to a file for legacy kernel test to verify logs\n         System.setProperty(\"log.fmt\", \"JSON\");\n-        System.setProperty(\"log.storeName\", LogFileName);\n         System.setProperty(\"log.store\", \"FILE\");\n         System.setProperty(\"log.level\", \"INFO\");\n-        try {\n-            Files.deleteIfExists(Paths.get(LogFileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    @AfterAll\n-    static void cleanup() {\n-        try {\n-            Files.deleteIfExists(Paths.get(LogFileName));\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+        System.setProperty(\"log.storeName\", LOG_FILE_PATH_NAME);\n+        System.out.println(\"Storing log to: \" + LOG_FILE_PATH_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3OTk4NA=="}, "originalCommit": {"oid": "f6a98184c4bddf9a8b734ada2fda7336d27c8459"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjcwODM3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToyMTo0NlrOF4c0Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToyNjo1NVrOF4c5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNjY5NQ==", "bodyText": "When you rebase, I believe you'll have a lot of additional cleanup to remove all the -rs and -logs.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r394736695", "createdAt": "2020-03-19T01:21:46Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java", "diffHunk": "@@ -37,8 +33,7 @@ void setup() {\n \n         // start kernel\n         kernel = new Kernel();\n-        kernel.parseArgs(\"-r\", tempRootDir.toString(), \"-i\",\n-                getClass().getResource(\"ipc_aware_main.yaml\").toString());\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"ipc_aware_main.yaml\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20e73da1ffc0f61402431248831cb3ce4c0795c9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNzk4OQ==", "bodyText": "I already rebased the latest master... around 5pm... So hopefully I don't have to...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/105#discussion_r394737989", "createdAt": "2020-03-19T01:26:55Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java", "diffHunk": "@@ -37,8 +33,7 @@ void setup() {\n \n         // start kernel\n         kernel = new Kernel();\n-        kernel.parseArgs(\"-r\", tempRootDir.toString(), \"-i\",\n-                getClass().getResource(\"ipc_aware_main.yaml\").toString());\n+        kernel.parseArgs(\"-i\", this.getClass().getResource(\"ipc_aware_main.yaml\").toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczNjY5NQ=="}, "originalCommit": {"oid": "20e73da1ffc0f61402431248831cb3ce4c0795c9"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}