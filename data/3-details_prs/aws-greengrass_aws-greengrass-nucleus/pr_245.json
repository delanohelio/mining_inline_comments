{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODIwNTYy", "number": 245, "title": "Refactored deployment service/added support for local deployment", "bodyText": "Issue #, if available:\nDescription of changes:\nMade the following changes to Deployment service to reduce dependency on IotJobsHelper\n\nDeployment queue is exposed to all parties via dependency injection.\nMoved persistence of deployment status to DeploymentStatusKeeper. Deployment service will push deployment status updates to DeploymentStatusKeeper. Consumers of deployment status updates will register callbacks with DeploymentStatusKeeper.\nMoved connectToAWSIot/subscribeToJobsTopics and mqtt-callbacks from deployment service to IotJobsHelper.\n\nAdded LocalDeploymentListener which can submit jobs to deployment helper. For M1 demo, httpd will interact with LocalDeploymentListener directly to schedule local deployments.\nWhy is this change necessary:\nSupport local deployment\nHow was this change tested:\nIntegration tests passes.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-15T21:17:22Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245", "merged": true, "mergeCommit": {"oid": "33a1f8b90dd49bf88ae3ac34f7de192ab0acfb66"}, "closed": true, "closedAt": "2020-05-20T00:56:27Z", "author": {"login": "fahadmohammed01"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchpW8UgFqTQxMjk3NjI4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABci-JzqAFqTQxNDkxODU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTc2Mjgw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-412976280", "createdAt": "2020-05-15T21:23:00Z", "commit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyMzowMFrOGWUPjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMTo1NTo1NFrOGWU5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MzUxOQ==", "bodyText": "Not sure I'd remove this. It will throw runtime exceptions if it can't inject or find the class, etc.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426053519", "createdAt": "2020-05-15T21:23:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -110,7 +110,7 @@ public boolean remove(Object tag) {\n         return parts.computeIfAbsent(tag, c -> new Value(clazz, null));\n     }\n \n-    public <T> T newInstance(Class<T> cl) throws Throwable {\n+    public <T> T newInstance(Class<T> cl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1NDM2NQ==", "bodyText": "probably drop this down to debug.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426054365", "createdAt": "2020-05-15T21:25:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.Setter;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.model.Deployment.DeploymentType;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+public class DeploymentStatusKeeper {\n+\n+    public static final String PROCESSED_DEPLOYMENTS_TOPICS = \"ProcessedDeployments\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID = \"JobId\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS = \"JobStatus\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE = \"JobType\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS = \"StatusDetails\";\n+    private static final String JOB_ID_LOG_KEY_NAME = \"JobId\";\n+    private static Logger logger = LogManager.getLogger(DeploymentStatusKeeper.class);\n+\n+    @Inject\n+    @Setter\n+    private Configuration config;\n+\n+    private Topics processedDeployments;\n+\n+    private Map<DeploymentType, Function<Map<String, Object>, Boolean>> deploymentStatusConsumer\n+            = new ConcurrentHashMap<>();\n+\n+    /**\n+     * Register call backs for receiving deployment status updates for a particular deployment type .\n+     * @param type determines which deployment type the call back consumes\n+     * @param consumer deployment status details\n+     * @return true if call back is registered.\n+     */\n+    public boolean registerDeploymentStatusConsumer(DeploymentType type, Function<Map<String, Object>,\n+            Boolean> consumer) {\n+        return deploymentStatusConsumer.putIfAbsent(type, consumer) == null;\n+    }\n+\n+    /**\n+     * Persist deployment status in kernel config.\n+     * @param jobId id for the deployment.\n+     * @param deploymentType type of deployment.\n+     * @param status status of deployment.\n+     * @param statusDetails other details of deployment status.\n+     */\n+    public void persistAndUpdateDeploymentStatus(String jobId, DeploymentType deploymentType,\n+                                                 JobStatus status, Map<String, String> statusDetails) {\n+        // no need to persist status for local deployment\n+        if (deploymentType.equals(DeploymentType.LOCAL)) {\n+            return;\n+        }\n+\n+        Topics processedDeployments = getProcessedDeployments();\n+        //While this method is being run, another thread could be running the updateStatusOfPersistedDeployments\n+        // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n+        synchronized (processedDeployments) {\n+            logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, jobId).kv(\"JobStatus\", status).log(\"Storing job status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MjUzOA==", "bodyText": "What if there's no consumer? NPE.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426062538", "createdAt": "2020-05-15T21:50:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.Setter;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.model.Deployment.DeploymentType;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+public class DeploymentStatusKeeper {\n+\n+    public static final String PROCESSED_DEPLOYMENTS_TOPICS = \"ProcessedDeployments\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID = \"JobId\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS = \"JobStatus\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE = \"JobType\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS = \"StatusDetails\";\n+    private static final String JOB_ID_LOG_KEY_NAME = \"JobId\";\n+    private static Logger logger = LogManager.getLogger(DeploymentStatusKeeper.class);\n+\n+    @Inject\n+    @Setter\n+    private Configuration config;\n+\n+    private Topics processedDeployments;\n+\n+    private Map<DeploymentType, Function<Map<String, Object>, Boolean>> deploymentStatusConsumer\n+            = new ConcurrentHashMap<>();\n+\n+    /**\n+     * Register call backs for receiving deployment status updates for a particular deployment type .\n+     * @param type determines which deployment type the call back consumes\n+     * @param consumer deployment status details\n+     * @return true if call back is registered.\n+     */\n+    public boolean registerDeploymentStatusConsumer(DeploymentType type, Function<Map<String, Object>,\n+            Boolean> consumer) {\n+        return deploymentStatusConsumer.putIfAbsent(type, consumer) == null;\n+    }\n+\n+    /**\n+     * Persist deployment status in kernel config.\n+     * @param jobId id for the deployment.\n+     * @param deploymentType type of deployment.\n+     * @param status status of deployment.\n+     * @param statusDetails other details of deployment status.\n+     */\n+    public void persistAndUpdateDeploymentStatus(String jobId, DeploymentType deploymentType,\n+                                                 JobStatus status, Map<String, String> statusDetails) {\n+        // no need to persist status for local deployment\n+        if (deploymentType.equals(DeploymentType.LOCAL)) {\n+            return;\n+        }\n+\n+        Topics processedDeployments = getProcessedDeployments();\n+        //While this method is being run, another thread could be running the updateStatusOfPersistedDeployments\n+        // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n+        synchronized (processedDeployments) {\n+            logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, jobId).kv(\"JobStatus\", status).log(\"Storing job status\");\n+            Map<String, Object> deploymentDetails = new HashMap<>();\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID, jobId);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS, status);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS, statusDetails);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE, deploymentType);\n+            //Each status update is uniquely stored\n+            Topic thisJob = processedDeployments.createLeafChild(String.valueOf(System.currentTimeMillis()));\n+            thisJob.withValue(deploymentDetails);\n+\n+            if (deploymentStatusConsumer.get(deploymentType).apply(deploymentDetails)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MzA2Mg==", "bodyText": "just remove the parentheses.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426063062", "createdAt": "2020-05-15T21:52:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -152,12 +173,35 @@\n             return;\n         }\n         Deployment deployment =\n-                new Deployment(documentString, Deployment.DeploymentType.IOT_JOBS, jobExecutionData.jobId);\n+                new Deployment(documentString, DeploymentType.IOT_JOBS, jobExecutionData.jobId);\n         if (!deploymentsQueue.contains(deployment) && deploymentsQueue.offer(deployment)) {\n             logger.atInfo().kv(JOB_ID_LOG_KEY_NAME, jobExecutionData.jobId).log(\"Added the job to the queue\");\n         }\n     };\n \n+    @Setter\n+    private MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n+        @Override\n+        public void onConnectionInterrupted(int errorCode) {\n+            //TODO: what about error code 0\n+            if (errorCode != 0) {\n+                logger.atWarn().kv(\"error\", CRT.awsErrorString(errorCode)).log(\"Connection interrupted\");\n+                //TODO: Detect this using secondary mechanisms like checking if internet is availalble\n+                // instead of using ping to Mqtt server. Mqtt ping is expensive and should be used as the last resort.\n+            }\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"PMD.UselessParentheses\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MzQwMw==", "bodyText": "this is uncontrolled, ie. it happens at a random time during JVM shutdown. Does this need to be more controlled, like after all services have shutdown?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426063403", "createdAt": "2020-05-15T21:53:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -186,6 +230,58 @@ public IotJobsHelper(LinkedBlockingQueue<Deployment> deploymentsQueue,\n         this.thingName = deviceConfigurationHelper.getDeviceConfiguration().getThingName();\n     }\n \n+    @Override\n+    @SuppressFBWarnings\n+    public void postInject() {\n+        executorService.submit(() -> {\n+            try {\n+                connectToAWSIot();\n+            } catch (InterruptedException e) {\n+               //TODO: re-evaluate the retry strategy,\n+               // re-connection attempts are made only for ConnectionUnavailableException\n+               logger.error(\"Failed to connect to IoT cloud\");\n+            }\n+        });\n+\n+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2MzY5Mw==", "bodyText": "postinject can be called many times. make sure that these actions only ever run once.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426063693", "createdAt": "2020-05-15T21:54:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -186,6 +230,58 @@ public IotJobsHelper(LinkedBlockingQueue<Deployment> deploymentsQueue,\n         this.thingName = deviceConfigurationHelper.getDeviceConfiguration().getThingName();\n     }\n \n+    @Override\n+    @SuppressFBWarnings\n+    public void postInject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NDE5Nw==", "bodyText": "you're injecting this, but where is it created concretely?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426064197", "createdAt": "2020-05-15T21:55:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -87,11 +101,18 @@\n     @Inject\n     private IotJobsClientFactory iotJobsClientFactory;\n \n+    @Inject\n+    private ExecutorService executorService;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n     @Setter\n+    @Inject\n+    @Named(\"deploymentsQueue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDMyMDA2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-413032006", "createdAt": "2020-05-16T00:59:07Z", "commit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMDo1OTowN1rOGWXJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwMTozMDowOVrOGWXVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTA1OA==", "bodyText": "This logic needs to change. In case when deployment type is not same, it should continue executing the current job. Also in that case, we need to peek() instead of poll(). It should look something like:\nDeployment deployment = deploymentQueue.peek();\n...\nif (!currentDeploymentType.equals(deployment.getDeploymentType()) ||\n    (deployment.getId().equals(currentDeploymentId) && deployment.getDeploymentType().equals(currentDeploymentType))) {\ncontinue;\n} else {\n...//cancel\n}\ndeploymentsQueue.remove(deployment);\ncreateNewDeployment(deployment);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426101058", "createdAt": "2020-05-16T00:59:07Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -178,64 +152,31 @@ public void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentsQueue.poll();\n             if (deployment != null) {\n-                if (currentJobId != null) {\n-                    if (deployment.getId().equals(currentJobId)) {\n+                if (currentDeploymentId != null) {\n+                    if (deployment.getId().equals(currentDeploymentId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMTQ3MA==", "bodyText": "JobStatus.IN_PROGRESS should be replaced by custom enum which will then be mapped to JobStatus.IN_PROGRESS in the deploymentStatusKeeper when deployment type is IOT_JOBS. For other types it must map to other expected statuses. Same applies to FAILED and SUCCEED status updates", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426101470", "createdAt": "2020-05-16T01:02:48Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -305,125 +250,22 @@ private void createNewDeployment(Deployment deployment) {\n                     .log(\"Invalid document for deployment\");\n             HashMap<String, String> statusDetails = new HashMap<>();\n             statusDetails.put(\"error\", e.getMessage());\n-            storeDeploymentStatusInConfig(deployment.getId(), JobStatus.FAILED, statusDetails);\n+            deploymentStatusKeeper.persistAndUpdateDeploymentStatus(deployment.getId(), deployment.getDeploymentType(),\n+                    JobStatus.FAILED, statusDetails);\n             return;\n         }\n         currentDeploymentTask =\n                 new DeploymentTask(dependencyResolver, packageManager, kernelConfigResolver, deploymentConfigMerger,\n                         logger, deploymentDocument);\n-        storeDeploymentStatusInConfig(deployment.getId(), JobStatus.IN_PROGRESS, new HashMap<>());\n-        updateStatusOfPersistedDeployments();\n+        deploymentStatusKeeper.persistAndUpdateDeploymentStatus(deployment.getId(), deployment.getDeploymentType(),\n+                JobStatus.IN_PROGRESS, new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMzU4MA==", "bodyText": "If the connectToAWSIot get a device configuration exception because device was not configured to communicate with Iot cloud then this step should not happen. We can argue that it does not hurt, but it is not clean.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426103580", "createdAt": "2020-05-16T01:24:45Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -186,6 +230,58 @@ public IotJobsHelper(LinkedBlockingQueue<Deployment> deploymentsQueue,\n         this.thingName = deviceConfigurationHelper.getDeviceConfiguration().getThingName();\n     }\n \n+    @Override\n+    @SuppressFBWarnings\n+    public void postInject() {\n+        executorService.submit(() -> {\n+            try {\n+                connectToAWSIot();\n+            } catch (InterruptedException e) {\n+               //TODO: re-evaluate the retry strategy,\n+               // re-connection attempts are made only for ConnectionUnavailableException\n+               logger.error(\"Failed to connect to IoT cloud\");\n+            }\n+        });\n+\n+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+            try {\n+                closeConnection();\n+            } catch (ExecutionException | InterruptedException e) {\n+                logger.atError().log(\"Error while closing IoT client\", e);\n+            }\n+        }));\n+\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.IOT_JOBS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMzcyMA==", "bodyText": "How does this thread continue to live? If the thread dies then the subscription/communication with Iot cloud will also die right? Have you tested this E2E?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426103720", "createdAt": "2020-05-16T01:26:05Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -186,6 +230,58 @@ public IotJobsHelper(LinkedBlockingQueue<Deployment> deploymentsQueue,\n         this.thingName = deviceConfigurationHelper.getDeviceConfiguration().getThingName();\n     }\n \n+    @Override\n+    @SuppressFBWarnings\n+    public void postInject() {\n+        executorService.submit(() -> {\n+            try {\n+                connectToAWSIot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwMzk5OA==", "bodyText": "How does this gets initialized?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426103998", "createdAt": "2020-05-16T01:29:29Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -80,48 +63,33 @@\n     private KernelConfigResolver kernelConfigResolver;\n     @Inject\n     private DeploymentConfigMerger deploymentConfigMerger;\n+\n+    @Inject\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+\n     @Inject\n-    private IotJobsHelper iotJobsHelper;\n+    private Context context;\n \n     @Getter\n     private Future<DeploymentResult> currentProcessStatus = null;\n \n     // This is very likely not thread safe. If the Deployment Service is split into multiple threads in a re-design\n     // as mentioned in some other comments, this will need an update as well\n-    private String currentJobId = null;\n+    private String currentDeploymentId = null;\n+    private Deployment.DeploymentType currentDeploymentType = null;\n+\n     private final AtomicInteger currentJobAttemptCount = new AtomicInteger(0);\n     private DeploymentTask currentDeploymentTask = null;\n \n     @Getter\n     private final AtomicBoolean receivedShutdown = new AtomicBoolean(false);\n-    // If a device is unable to connect to AWS Iot upon starting due to network availability this flag will be set\n-    // which will indicate the device to retry connecting to AWS Iot cloud after polling frequency\n-    private final AtomicBoolean retryConnectingToAWSIot = new AtomicBoolean(false);\n+\n     @Setter\n     private long pollingFrequency = DEPLOYMENT_POLLING_FREQUENCY;\n-    private LinkedBlockingQueue<Deployment> deploymentsQueue = new LinkedBlockingQueue<>();\n-\n-    final MqttClientConnectionEvents callbacks = new MqttClientConnectionEvents() {\n-        @Override\n-        public void onConnectionInterrupted(int errorCode) {\n-            //TODO: what about error code 0\n-            if (errorCode != 0) {\n-                logger.atWarn().kv(\"error\", CRT.awsErrorString(errorCode)).log(\"Connection interrupted\");\n-                //TODO: Detect this using secondary mechanisms like checking if internet is availalble\n-                // instead of using ping to Mqtt server. Mqtt ping is expensive and should be used as the last resort.\n-            }\n-        }\n \n-        @Override\n-        @SuppressWarnings(\"PMD.UselessParentheses\")\n-        public void onConnectionResumed(boolean sessionPresent) {\n-            logger.atInfo().kv(\"sessionPresent\", (sessionPresent ? \"true\" : \"false\")).log(\"Connection resumed\");\n-            runInSeparateThread(() -> {\n-                subscribeToIotJobTopics();\n-                updateStatusOfPersistedDeployments();\n-            });\n-        }\n-    };\n+    @Inject\n+    @Named(\"deploymentsQueue\")\n+    private LinkedBlockingQueue<Deployment> deploymentsQueue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEwNDA4MA==", "bodyText": "Where are they used?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r426104080", "createdAt": "2020-05-16T01:30:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -9,6 +9,8 @@\n import com.aws.iot.evergreen.config.Topics;\n import com.aws.iot.evergreen.dependency.Context;\n import com.aws.iot.evergreen.deployment.DeploymentConfigMerger;\n+import com.aws.iot.evergreen.deployment.IotJobsHelper;\n+import com.aws.iot.evergreen.deployment.LocalDeploymentListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7253927e9c386b0c89f4f325138e06e7b2c424"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea56d25c66765b5eccbf2867d4408717f502ab5a", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea56d25c66765b5eccbf2867d4408717f502ab5a", "committedDate": "2020-05-18T23:57:03Z", "message": "initial changes to support local deployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3956cfea642c25f5ce93113afa9ee9234ccdd715", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3956cfea642c25f5ce93113afa9ee9234ccdd715", "committedDate": "2020-05-18T23:57:03Z", "message": "refactored deployment service to reduce the coupling with iotjobshelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdbef8e4f22f15e78f3cc925c15806030914cea5", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bdbef8e4f22f15e78f3cc925c15806030914cea5", "committedDate": "2020-05-18T23:57:03Z", "message": "added/updaed unit tests\n\n(cherry picked from commit 3b31b5a00a2d3d47193f178f5af18884fe0cb9eb)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33263353e1d9d576b3c775da20c7122b80f6b95c", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33263353e1d9d576b3c775da20c7122b80f6b95c", "committedDate": "2020-05-19T00:07:42Z", "message": "addressed pr comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b31b5a00a2d3d47193f178f5af18884fe0cb9eb", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3b31b5a00a2d3d47193f178f5af18884fe0cb9eb", "committedDate": "2020-05-18T23:29:18Z", "message": "added/updaed unit tests"}, "afterCommit": {"oid": "33263353e1d9d576b3c775da20c7122b80f6b95c", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33263353e1d9d576b3c775da20c7122b80f6b95c", "committedDate": "2020-05-19T00:07:42Z", "message": "addressed pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2148bc6b40c3083a9592516a6d96ca873f519ffc", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2148bc6b40c3083a9592516a6d96ca873f519ffc", "committedDate": "2020-05-19T00:12:41Z", "message": "addressed pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b26308becd4a516206c12594803882374177d530", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b26308becd4a516206c12594803882374177d530", "committedDate": "2020-05-19T00:32:40Z", "message": "fixed formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4608963602318dc28f6d5535d74ea14d1383f02b", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4608963602318dc28f6d5535d74ea14d1383f02b", "committedDate": "2020-05-19T07:26:37Z", "message": "added tests/ addressed pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f", "committedDate": "2020-05-19T07:43:00Z", "message": "addressed pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjMyODg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414632884", "createdAt": "2020-05-19T16:42:48Z", "commit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0Mjo0OVrOGXpO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0Mjo0OVrOGXpO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NjAxNA==", "bodyText": "after all to close the kernel.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427446014", "createdAt": "2020-05-19T16:42:49Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/LocalDeploymentListenerTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.LocalDeploymentListener;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.FileUtils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class LocalDeploymentListenerTest {\n+\n+    private static Kernel kernel;\n+    private static LocalDeploymentListener localDeploymentListener;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException {\n+        kernel = new Kernel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjM1NzM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414635734", "createdAt": "2020-05-19T16:46:23Z", "commit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0NjoyM1rOGXpYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0NjoyM1rOGXpYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0ODMyMQ==", "bodyText": "Use string interpolation and add a space after type.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427448321", "createdAt": "2020-05-19T16:46:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeper.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.Setter;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentService.DEPLOYMENT_SERVICE_TOPICS;\n+import static com.aws.iot.evergreen.deployment.model.Deployment.DeploymentType;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+public class DeploymentStatusKeeper {\n+\n+    public static final String PROCESSED_DEPLOYMENTS_TOPICS = \"ProcessedDeployments\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID = \"JobId\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS = \"JobStatus\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE = \"JobType\";\n+    public static final String PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS = \"StatusDetails\";\n+    private static final String JOB_ID_LOG_KEY_NAME = \"JobId\";\n+    private static Logger logger = LogManager.getLogger(DeploymentStatusKeeper.class);\n+\n+    @Inject\n+    @Setter\n+    private Configuration config;\n+\n+    private Topics processedDeployments;\n+\n+    private final Map<DeploymentType, Function<Map<String, Object>, Boolean>> deploymentStatusConsumer\n+            = new ConcurrentHashMap<>();\n+\n+    /**\n+     * Register call backs for receiving deployment status updates for a particular deployment type .\n+     * @param type determines which deployment type the call back consumes\n+     * @param consumer deployment status details\n+     * @return true if call back is registered.\n+     */\n+    public boolean registerDeploymentStatusConsumer(DeploymentType type, Function<Map<String, Object>,\n+            Boolean> consumer) {\n+        return deploymentStatusConsumer.putIfAbsent(type, consumer) == null;\n+    }\n+\n+    /**\n+     * Persist deployment status in kernel config.\n+     * @param jobId id for the deployment.\n+     * @param deploymentType type of deployment.\n+     * @param status status of deployment.\n+     * @param statusDetails other details of deployment status.\n+     */\n+    public void persistAndPublishDeploymentStatus(String jobId, DeploymentType deploymentType,\n+                                                  JobStatus status, Map<String, String> statusDetails) {\n+        // no need to persist status for local deployment\n+        if (deploymentType.equals(DeploymentType.LOCAL)) {\n+            return;\n+        }\n+\n+        Topics processedDeployments = getProcessedDeployments();\n+        //While this method is being run, another thread could be running the publishPersistedStatusUpdates\n+        // method which consumes the data in config from the same topics. These two thread needs to be synchronized\n+        synchronized (processedDeployments) {\n+            logger.atDebug().kv(JOB_ID_LOG_KEY_NAME, jobId).kv(\"JobStatus\", status).log(\"Storing job status\");\n+            Map<String, Object> deploymentDetails = new HashMap<>();\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID, jobId);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS, status);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS, statusDetails);\n+            deploymentDetails.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE, deploymentType);\n+            //Each status update is uniquely stored\n+            Topic thisJob = processedDeployments.createLeafChild(String.valueOf(System.currentTimeMillis()));\n+            thisJob.withValue(deploymentDetails);\n+\n+            if (getConsumerForDeploymentType(deploymentType).apply(deploymentDetails)) {\n+                processedDeployments.remove(thisJob);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Invokes the call-backs with persisted deployment status updates for deployments with specified type.\n+     * This is called by IotJobsHelper/MqttJobsHelper when connection is re-established to update cloud of all\n+     * all deployments the device performed when offline\n+     * @param type deployment type\n+     */\n+    public void publishPersistedStatusUpdates(DeploymentType type) {\n+        Topics processedDeployments = getProcessedDeployments();\n+        //TODO: better sync approach.\n+        synchronized (processedDeployments) {\n+            ArrayList<Topic> deployments = new ArrayList<>();\n+            processedDeployments.forEach(topic -> {\n+\n+                Map<String, Object> deploymentDetails = (HashMap) ((Topic) topic).getOnce();\n+                DeploymentType deploymentType = (DeploymentType)\n+                        deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n+                if (deploymentType.equals(type)) {\n+                    deployments.add((Topic) topic);\n+                }\n+            });\n+            // Topics are stored as ConcurrentHashMaps which do not guarantee ordering of elements\n+            // We want the statuses to be updated in the cloud in the order in which they were processed on the device.\n+            // This will be accurate representation of what happened on the device, especially when deployment service\n+            // processes multiple deployments in the order in which they come. Additionally, a customer workflow can\n+            // depend on this order. If Group2 gets successfully updated before Group1 then customer workflow may\n+            // error out.\n+            List<Topic> sortedByTimestamp = deployments.stream().sorted((o1, o2) -> {\n+                if (Long.valueOf(o1.getModtime()) > Long.valueOf(o2.getModtime())) {\n+                    return 1;\n+                }\n+                return -1;\n+            }).collect(Collectors.toList());\n+\n+            Iterator iterator = sortedByTimestamp.iterator();\n+            while (iterator.hasNext()) {\n+                Topic topic = (Topic) iterator.next();\n+                Map<String, Object> deploymentDetails = (HashMap) topic.getOnce();\n+                DeploymentType deploymentType = (DeploymentType)\n+                        deploymentDetails.get(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE);\n+\n+                if (getConsumerForDeploymentType(deploymentType).apply(deploymentDetails)) {\n+                    processedDeployments.remove(topic);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected Function<Map<String, Object>, Boolean> getConsumerForDeploymentType(DeploymentType type) {\n+        return deploymentStatusConsumer.computeIfAbsent(type, deploymentType -> {\n+            logger.atDebug().log(\"Consumer not found, Dropping status update for type\" + deploymentType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjM3Mjcw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414637270", "createdAt": "2020-05-19T16:48:12Z", "commit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0ODoxMlrOGXpcsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0ODoxMlrOGXpcsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0OTUyMA==", "bodyText": "you need to close any context that you make in the after.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427449520", "createdAt": "2020-05-19T16:48:12Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentStatusKeeperTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.Context;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Function;\n+\n+import static com.aws.iot.evergreen.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID;\n+import static com.aws.iot.evergreen.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS;\n+import static com.aws.iot.evergreen.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_TYPE;\n+import static com.aws.iot.evergreen.deployment.DeploymentStatusKeeper.PERSISTED_DEPLOYMENT_STATUS_KEY_STATUS_DETAILS;\n+import static com.aws.iot.evergreen.deployment.model.Deployment.DeploymentType.IOT_JOBS;\n+import static com.aws.iot.evergreen.deployment.model.Deployment.DeploymentType.LOCAL;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class DeploymentStatusKeeperTest {\n+\n+    private static final Function<Map<String, Object>, Boolean> DUMMY_CONSUMER = (details) -> false;\n+    private DeploymentStatusKeeper deploymentStatusKeeper;\n+    private Topics processedDeployments;\n+\n+    @BeforeEach\n+    public void setup() {\n+        Configuration config = new Configuration(new Context());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74bc1faa8d68a8d8a8971a4c5d762ba380c1b19f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b21718bd6bd944ab460d22d23395ef78ec4a7f95", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b21718bd6bd944ab460d22d23395ef78ec4a7f95", "committedDate": "2020-05-19T16:52:27Z", "message": "addressed pmd violation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ef39e1f61c56d5a55449ced343ac5df9385953", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77ef39e1f61c56d5a55449ced343ac5df9385953", "committedDate": "2020-05-19T17:10:08Z", "message": "addressed pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjU5Nzc2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414659776", "createdAt": "2020-05-19T17:16:41Z", "commit": {"oid": "77ef39e1f61c56d5a55449ced343ac5df9385953"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxNjo0MVrOGXqiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxNjo0MVrOGXqiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2NzM2NA==", "bodyText": "missing spaces in logs.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427467364", "createdAt": "2020-05-19T17:16:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/IotJobsHelper.java", "diffHunk": "@@ -177,13 +213,77 @@ public IotJobsHelper(LinkedBlockingQueue<Deployment> deploymentsQueue,\n                   AWSIotMqttConnectionFactory awsIotMqttConnectionFactory,\n                   IotJobsClientFactory iotJobsClientFactory,\n                   LinkedBlockingQueue<Deployment> deploymentsQueue,\n-                  MqttClientConnectionEvents callbacks) throws DeviceConfigurationException {\n+                  DeploymentStatusKeeper deploymentStatusKeeper,\n+                  ExecutorService executorService) throws DeviceConfigurationException {\n         this.deviceConfigurationHelper = deviceConfigurationHelper;\n         this.awsIotMqttConnectionFactory = awsIotMqttConnectionFactory;\n         this.iotJobsClientFactory = iotJobsClientFactory;\n         this.deploymentsQueue = deploymentsQueue;\n-        this.callbacks = callbacks;\n         this.thingName = deviceConfigurationHelper.getDeviceConfiguration().getThingName();\n+        this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.executorService = executorService;\n+    }\n+\n+    @Override\n+    @SuppressFBWarnings\n+    public void postInject() {\n+\n+        //TODO: once connectToAWSIot and closeConnection is removed from post inject\n+        // this check should be removed\n+        if (postInjectInProgress.get()) {\n+            return;\n+        }\n+        postInjectInProgress.set(true);\n+\n+        //TODO: remove establishing mqtt connection logic when when MQTT proxy is implemented.\n+        executorService.submit(() -> {\n+            try {\n+                connectToAWSIot();\n+            } catch (InterruptedException e) {\n+               //TODO: re-evaluate the retry strategy,\n+               // re-connection attempts are made only for ConnectionUnavailableException\n+               logger.error(\"Failed to connect to IoT cloud\");\n+            }\n+        });\n+\n+        //TODO: remove closing mqtt connection logic from iot jobs handler when MQTT proxy is implemented.\n+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+            try {\n+                closeConnection();\n+            } catch (ExecutionException | InterruptedException e) {\n+                logger.atError().log(\"Error while closing IoT client\", e);\n+            }\n+        }));\n+\n+        deploymentStatusKeeper.registerDeploymentStatusConsumer(DeploymentType.IOT_JOBS,\n+                this::deploymentStatusChanged);\n+    }\n+\n+    private void connectToAWSIot() throws InterruptedException {\n+        // If a device is unable to connect to AWS Iot upon starting due to network availability,\n+        // the device will retry connecting to AWS Iot cloud. Retry frequency used is the same as frequency\n+        // used by deployment service to poll for new deployments.\n+        boolean shouldRetry = true;\n+        while (shouldRetry && !receivedShutdown.get()) {\n+            shouldRetry = false;\n+            try {\n+                //TODO: Separate out making MQTT connection and IotJobs helper when MQTT proxy is used.\n+                connect();\n+            } catch (DeviceConfigurationException e) {\n+                //Since there is no device configuration, device should still be able to perform local deploymentsQueue\n+                logger.atWarn().setCause(e).log(\"Device not configured to communicate with AWS Iot Cloud\"\n+                        + \"Device will now operate in offline mode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77ef39e1f61c56d5a55449ced343ac5df9385953"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7f17c3a59ba70d7296f099c1d7fa22274776989b", "committedDate": "2020-05-19T17:45:17Z", "message": "added space to logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Nzg2MzI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414786324", "createdAt": "2020-05-19T20:11:12Z", "commit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODQ4Nzc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414848777", "createdAt": "2020-05-19T21:49:38Z", "commit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo0OTozOFrOGXz5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjowMDoyMlrOGX0Lxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMDY0Mg==", "bodyText": "You need to reset the currentDeploymentType to null as well. The if conditions in the main DeploymentService loop depends on these checks. If this was not caught in tests , then we need to make sure we have tests that catch these things.\nI am trying to think if we can have one object representing the current deployment. Whether that will be overkill or simplification.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427620642", "createdAt": "2020-05-19T21:49:38Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -275,8 +225,7 @@ private void finishCurrentDeployment() throws InterruptedException {\n         // Setting this to null to indicate there is not current deployment being processed\n         // Did not use optionals over null due to performance\n         currentProcessStatus = null;\n-        currentJobId = null;\n-        updateStatusOfPersistedDeployments();\n+        currentDeploymentId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyMTk0MQ==", "bodyText": "Reset the currentDeploymentType to null.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427621941", "createdAt": "2020-05-19T21:52:28Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -286,14 +235,16 @@ private void cancelCurrentDeployment() {\n         if (currentProcessStatus != null) {\n             currentProcessStatus.cancel(true);\n             currentProcessStatus = null;\n-            currentJobId = null;\n+            currentDeploymentId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNTQxNQ==", "bodyText": "Remove?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#discussion_r427625415", "createdAt": "2020-05-19T22:00:22Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -67,33 +52,27 @@\n public class DeploymentServiceTest extends EGServiceTestUtil {\n \n     private static final String TEST_JOB_ID_1 = \"TEST_JOB_1\";\n-    private static final String TEST_JOB_ID_2 = \"TEST_JOB_2\";\n-    private static final String CONNECTION_ERROR = \"Connection error\";\n+    //private static final String TEST_JOB_ID_2 = \"TEST_JOB_2\";\n+    //private static final String CONNECTION_ERROR = \"Connection error\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f17c3a59ba70d7296f099c1d7fa22274776989b"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78956dee521c5668cfa597d34b69828e166fcc5b", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/78956dee521c5668cfa597d34b69828e166fcc5b", "committedDate": "2020-05-19T22:52:38Z", "message": "addressed pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c17d949ef1af3bea9a2cd51637fda194b83a08", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a9c17d949ef1af3bea9a2cd51637fda194b83a08", "committedDate": "2020-05-19T22:57:28Z", "message": "Merge branch 'master' into local_deployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTE2ODIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414916820", "createdAt": "2020-05-20T00:39:00Z", "commit": {"oid": "a9c17d949ef1af3bea9a2cd51637fda194b83a08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTE4NTU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/245#pullrequestreview-414918556", "createdAt": "2020-05-20T00:44:20Z", "commit": {"oid": "a9c17d949ef1af3bea9a2cd51637fda194b83a08"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2206, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}