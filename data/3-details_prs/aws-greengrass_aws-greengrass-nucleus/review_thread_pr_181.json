{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDE4NDgz", "number": 181, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo0ODoyMFrODx1ddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NzoyNVrODyLbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTgyNzA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo0ODoyMFrOGFiMig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxMDozNVrOGFnSFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA==", "bodyText": "Nit- this deTilde method here has nothing to do with command line arg passing, it's finding more use then we could move it to the Utils class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408456330", "createdAt": "2020-04-14T21:48:20Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(\n+                getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n+        String privateKeyPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n+        String rootCAPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MDU3NQ==", "bodyText": "Since it cannot be static, I don't think it should move to utils. Unless I changed the signature to take in a kernel reference. What do you think?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408490575", "createdAt": "2020-04-14T23:18:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(\n+                getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n+        String privateKeyPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n+        String rootCAPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA=="}, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzOTY3MA==", "bodyText": "Right, it is using non static members, maybe leave it as it is then", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408539670", "createdAt": "2020-04-15T02:10:35Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(\n+                getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n+        String privateKeyPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n+        String rootCAPath = kernelCommandLine.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1NjMzMA=="}, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjAyMDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowNToyM1rOGFkBzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzoxODo1OVrOGFkTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjM0OA==", "bodyText": "Does it need to return this? it is essentially taking a kernel instance in the constructor and modifying it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408486348", "createdAt": "2020-04-14T23:05:23Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.ConfigurationWriter;\n+import com.aws.iot.evergreen.dependency.EZPlugins;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.aws.iot.evergreen.util.Utils.close;\n+import static com.aws.iot.evergreen.util.Utils.deepToString;\n+\n+public class KernelLifecycle {\n+    private static final Logger logger = LogManager.getLogger(KernelLifecycle.class);\n+\n+    private final Kernel kernel;\n+    private final KernelCommandLine kernelCommandLine;\n+    private final Map<String, Class<?>> serviceImplementors = new HashMap<>();\n+    private ConfigurationWriter tlog;\n+    private EvergreenService mainService;\n+    private final AtomicBoolean isShutdownInitiated = new AtomicBoolean(false);\n+\n+    public KernelLifecycle(Kernel kernel, KernelCommandLine kernelCommandLine) {\n+        this.kernel = kernel;\n+        this.kernelCommandLine = kernelCommandLine;\n+    }\n+\n+    /**\n+     * Startup the Kernel and all services.\n+     */\n+    public Kernel launch() {\n+        logger.atInfo().log(\"root path = {}. config path = {}\", kernel.rootPath,\n+                kernel.configPath);\n+        kernelCommandLine.installCliTool(getClass().getClassLoader().getResource(\"evergreen-launch\"));\n+        Exec.setDefaultEnv(\"EVERGREEN_HOME\", kernel.rootPath.toString());\n+\n+        try {\n+            mainService = kernel.locate(kernelCommandLine.mainServiceName);\n+        } catch (ServiceLoadException sle) {\n+            RuntimeException rte =\n+                    new RuntimeException(\"Cannot load main service\", sle);\n+            logger.atError(\"system-boot-error\", rte).log();\n+            throw rte;\n+        }\n+        Path transactionLogPath = kernel.configPath.resolve(\"config.tlog\");\n+        Path configurationFile = kernel.configPath.resolve(\"config.yaml\");\n+        try {\n+            if (kernelCommandLine.haveRead) {\n+                // new config file came in from the outside\n+                kernel.writeEffectiveConfig(configurationFile);\n+                Files.deleteIfExists(transactionLogPath);\n+            } else {\n+                if (Files.exists(configurationFile)) {\n+                    kernel.config.read(configurationFile);\n+                }\n+                if (Files.exists(transactionLogPath)) {\n+                    kernel.config.read(transactionLogPath);\n+                }\n+            }\n+            tlog = ConfigurationWriter.logTransactionsTo(kernel.config, transactionLogPath);\n+            tlog.flushImmediately(true);\n+        } catch (IOException ioe) {\n+            logger.atError().setEventType(\"system-config-error\").setCause(ioe).log();\n+            throw new RuntimeException(ioe);\n+        }\n+\n+        if (!kernelCommandLine.forReal) {\n+            kernel.context.put(ShellRunner.class, kernel.context.get(ShellRunner.Dryrun.class));\n+        }\n+\n+        Queue<String> autostart = findBuiltInServicesAndPlugins();\n+        autostart.forEach(s -> {\n+            try {\n+                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+            } catch (ServiceLoadException se) {\n+                logger.atError().setCause(se).log(\"Unable to load service {}\", s);\n+            } catch (InputValidationException e) {\n+                logger.atError().setCause(e).log(\"Unable to add auto-starting dependency {} to main\", s);\n+            }\n+        });\n+        kernel.writeEffectiveConfig();\n+        logger.atInfo().setEventType(\"system-start\").addKeyValue(\"main\", kernel.getMain()).log();\n+        startupAllServices();\n+\n+        return kernel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MDc4MA==", "bodyText": "Technically sure, this is just there to keep the signature the same. I can remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408490780", "createdAt": "2020-04-14T23:18:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelLifecycle.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.ConfigurationWriter;\n+import com.aws.iot.evergreen.dependency.EZPlugins;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.kernel.exceptions.InputValidationException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Exec;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.aws.iot.evergreen.util.Utils.close;\n+import static com.aws.iot.evergreen.util.Utils.deepToString;\n+\n+public class KernelLifecycle {\n+    private static final Logger logger = LogManager.getLogger(KernelLifecycle.class);\n+\n+    private final Kernel kernel;\n+    private final KernelCommandLine kernelCommandLine;\n+    private final Map<String, Class<?>> serviceImplementors = new HashMap<>();\n+    private ConfigurationWriter tlog;\n+    private EvergreenService mainService;\n+    private final AtomicBoolean isShutdownInitiated = new AtomicBoolean(false);\n+\n+    public KernelLifecycle(Kernel kernel, KernelCommandLine kernelCommandLine) {\n+        this.kernel = kernel;\n+        this.kernelCommandLine = kernelCommandLine;\n+    }\n+\n+    /**\n+     * Startup the Kernel and all services.\n+     */\n+    public Kernel launch() {\n+        logger.atInfo().log(\"root path = {}. config path = {}\", kernel.rootPath,\n+                kernel.configPath);\n+        kernelCommandLine.installCliTool(getClass().getClassLoader().getResource(\"evergreen-launch\"));\n+        Exec.setDefaultEnv(\"EVERGREEN_HOME\", kernel.rootPath.toString());\n+\n+        try {\n+            mainService = kernel.locate(kernelCommandLine.mainServiceName);\n+        } catch (ServiceLoadException sle) {\n+            RuntimeException rte =\n+                    new RuntimeException(\"Cannot load main service\", sle);\n+            logger.atError(\"system-boot-error\", rte).log();\n+            throw rte;\n+        }\n+        Path transactionLogPath = kernel.configPath.resolve(\"config.tlog\");\n+        Path configurationFile = kernel.configPath.resolve(\"config.yaml\");\n+        try {\n+            if (kernelCommandLine.haveRead) {\n+                // new config file came in from the outside\n+                kernel.writeEffectiveConfig(configurationFile);\n+                Files.deleteIfExists(transactionLogPath);\n+            } else {\n+                if (Files.exists(configurationFile)) {\n+                    kernel.config.read(configurationFile);\n+                }\n+                if (Files.exists(transactionLogPath)) {\n+                    kernel.config.read(transactionLogPath);\n+                }\n+            }\n+            tlog = ConfigurationWriter.logTransactionsTo(kernel.config, transactionLogPath);\n+            tlog.flushImmediately(true);\n+        } catch (IOException ioe) {\n+            logger.atError().setEventType(\"system-config-error\").setCause(ioe).log();\n+            throw new RuntimeException(ioe);\n+        }\n+\n+        if (!kernelCommandLine.forReal) {\n+            kernel.context.put(ShellRunner.class, kernel.context.get(ShellRunner.Dryrun.class));\n+        }\n+\n+        Queue<String> autostart = findBuiltInServicesAndPlugins();\n+        autostart.forEach(s -> {\n+            try {\n+                mainService.addOrUpdateDependency(kernel.locate(s), State.RUNNING, true);\n+            } catch (ServiceLoadException se) {\n+                logger.atError().setCause(se).log(\"Unable to load service {}\", s);\n+            } catch (InputValidationException e) {\n+                logger.atError().setCause(e).log(\"Unable to add auto-starting dependency {} to main\", s);\n+            }\n+        });\n+        kernel.writeEffectiveConfig();\n+        logger.atInfo().setEventType(\"system-start\").addKeyValue(\"main\", kernel.getMain()).log();\n+        startupAllServices();\n+\n+        return kernel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NjM0OA=="}, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjAzMDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzowOTozNlrOGFkHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMzoxOTozOFrOGFkUGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NzczMg==", "bodyText": "Nit- I would name it something that is more specific and suits better as a class name, say DeploymentConfigMerger, and if this is only intended to be used for deployments, should we move it to the deployment package?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408487732", "createdAt": "2020-04-14T23:09:36Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+@AllArgsConstructor\n+public class DeploymentMerge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MTAzMw==", "bodyText": "Thanks for the better name. Yes, I thought about moving it into deployment package. I can definitely move it over.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r408491033", "createdAt": "2020-04-14T23:19:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/DeploymentMerge.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+@AllArgsConstructor\n+public class DeploymentMerge {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NzczMg=="}, "originalCommit": {"oid": "5976f0bd0956d5faa1f7ac9e0c336414ddcf645f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQxNzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NTowNVrOGGEu1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1Mzo0MlrOGGFCyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjE2Ng==", "bodyText": "This seems weird, we call kernel.parseArgs from KernelCommandLine and then kernel.parseArgs() calls parseArgs() method in KernelCommandLine class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409022166", "createdAt": "2020-04-15T17:45:05Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Objects;\n+\n+import static com.aws.iot.evergreen.util.Utils.HOME_PATH;\n+\n+public class KernelCommandLine {\n+    private static final Logger logger = LogManager.getLogger(KernelCommandLine.class);\n+    private static final String done = \" missing \"; // unique marker\n+    private final Kernel kernel;\n+    boolean forReal = true;\n+    boolean haveRead = false;\n+    String mainServiceName = \"main\";\n+    private String[] args;\n+    private String arg;\n+    private int argpos = 0;\n+\n+    private static final String configPathName = \"~root/config\";\n+    private static final String clitoolPathName = \"~root/bin\";\n+    private static final String workPathName = \"~root/work\";\n+    private static final String packageStorePathName = \"~root/packages\";\n+\n+    public static void main(String[] args) {\n+        new Kernel().parseArgs(args).launch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNzI3NQ==", "bodyText": "I would say that that isn't exactly the point, since this is just the main entrypoint, and our main needs to be starting with a Kernel.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409027275", "createdAt": "2020-04-15T17:53:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/KernelCommandLine.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Exec;\n+import com.aws.iot.evergreen.util.Utils;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Objects;\n+\n+import static com.aws.iot.evergreen.util.Utils.HOME_PATH;\n+\n+public class KernelCommandLine {\n+    private static final Logger logger = LogManager.getLogger(KernelCommandLine.class);\n+    private static final String done = \" missing \"; // unique marker\n+    private final Kernel kernel;\n+    boolean forReal = true;\n+    boolean haveRead = false;\n+    String mainServiceName = \"main\";\n+    private String[] args;\n+    private String arg;\n+    private int argpos = 0;\n+\n+    private static final String configPathName = \"~root/config\";\n+    private static final String clitoolPathName = \"~root/bin\";\n+    private static final String workPathName = \"~root/work\";\n+    private static final String packageStorePathName = \"~root/packages\";\n+\n+    public static void main(String[] args) {\n+        new Kernel().parseArgs(args).launch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjE2Ng=="}, "originalCommit": {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQyMjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NjoyMFrOGGExpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo1MTowOFrOGGE8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjg4NA==", "bodyText": "move deTilde to a util?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409022884", "createdAt": "2020-04-15T17:46:20Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNTczNw==", "bodyText": "Shagupta said the same. It can't be moved because it isn't static, unless I change it to have kernel as a parameter.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409025737", "createdAt": "2020-04-15T17:51:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfigurationHelper.java", "diffHunk": "@@ -30,16 +31,20 @@\n     @Inject\n     private Kernel kernel;\n \n+    @Inject\n+    private KernelCommandLine kernelCommandLine;\n+\n     /**\n      * Retrieves the device configuration information from kernel config to communicate with Iot Cloud.\n      * @return {@link DeviceConfiguration}\n      * @throws DeviceConfigurationException when configuration is not available for the device.\n      */\n     public DeviceConfiguration getDeviceConfiguration() throws DeviceConfigurationException {\n         String thingName = getStringParameterFromConfig(DEVICE_PARAM_THING_NAME);\n-        String certificateFilePath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_CERTIFICATE_FILE_PATH));\n-        String privateKeyPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_PRIVATE_KEY_PATH));\n-        String rootCAPath = kernel.deTilde(getStringParameterFromConfig(DEVICE_PARAM_ROOT_CA_PATH));\n+        String certificateFilePath = kernelCommandLine.deTilde(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjg4NA=="}, "originalCommit": {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQyNjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NzoyNVrOGGE0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NzoyNVrOGGE0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMzUzNA==", "bodyText": "Moving all this to DeploymentConfigMerger makes a lot of sense, nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/181#discussion_r409023534", "createdAt": "2020-04-15T17:47:25Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.deployment.exceptions.ServiceUpdateException;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.GenericExternalService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.kernel.UpdateSystemSafelyService;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import lombok.AllArgsConstructor;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+\n+@AllArgsConstructor\n+public class DeploymentConfigMerger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9497fcc3ebad603e2eb970411e8cf5ca90426749"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4584, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}