{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NjI0NTcy", "number": 364, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0ODozM1rOEYOwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDo1M1rOEZGwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQzMTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/EZPlugins.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0ODozM1rOHAdIgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMToxMTozMVrOHAd1bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzOTM2MQ==", "bodyText": "Recommendation generated by Amazon CodeGuru Reviewer. Leave feedback on this recommendation by replying to the comment or by reacting to the comment using emoji.\nProblem\nThis line of code contains a resource that might not be closed properly. Resource leaks can cause your system to slow down or crash.\nFix\nConsider closing the following resource: cl. The resource is referenced in statements at the following line: 96. The resource is returned at line: 99. There are other execution paths that don't close the resource or return it, for example, when FastClasspathScanner constructor throws an exception. To prevent this resource leak, close cl along these other paths before you exit this method.\nMore info\nView resource management guidelines at oracle.com (external link).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r470239361", "createdAt": "2020-08-13T20:48:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/EZPlugins.java", "diffHunk": "@@ -82,6 +82,23 @@ private void loadPlugins(boolean trusted, Path p) throws IOException {\n         loadPlugins(trusted, cl);\n     }\n \n+    /**\n+     * Load a single plugin with the classpath scanner.\n+     * @param p path to jar file\n+     * @param matcher matcher to use\n+     * @throws IOException if loading the class fails\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public ClassLoader loadPlugin(Path p, Consumer<FastClasspathScanner> matcher) throws IOException {\n+        URLClassLoader cl = new URLClassLoader(new URL[]{p.toUri().toURL()});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1e0cd50d6f9a8d51cbf3403f0b081bc090c0ee4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI1MDg2MQ==", "bodyText": "The class loader cannot be closed because we need to continue loading classes from it after this method exits. It cannot even be closed after we initialize the service class because we may need more classes from the loaded jar dynamically.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r470250861", "createdAt": "2020-08-13T21:11:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/EZPlugins.java", "diffHunk": "@@ -82,6 +82,23 @@ private void loadPlugins(boolean trusted, Path p) throws IOException {\n         loadPlugins(trusted, cl);\n     }\n \n+    /**\n+     * Load a single plugin with the classpath scanner.\n+     * @param p path to jar file\n+     * @param matcher matcher to use\n+     * @throws IOException if loading the class fails\n+     */\n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    public ClassLoader loadPlugin(Path p, Consumer<FastClasspathScanner> matcher) throws IOException {\n+        URLClassLoader cl = new URLClassLoader(new URL[]{p.toUri().toURL()});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzOTM2MQ=="}, "originalCommit": {"oid": "e1e0cd50d6f9a8d51cbf3403f0b081bc090c0ee4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQ4NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToyNzoxNlrOHBtk9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoyNTowM1rOHBv1sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NzM2Ng==", "bodyText": "So every in jvm component has to be built as plugin.jar? Why can't we use the component name to infer the jar name instead of using hardcoded plugin.jar?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471557366", "createdAt": "2020-08-17T15:27:16Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4ODYxMw==", "bodyText": "Yes, that's correct. In my proof of concept I had added a field to specify the jar name, but I decided against that because it requires a recipe change. I think that it is reasonable to force the artifact to be named plugin.jar.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471588613", "createdAt": "2020-08-17T16:15:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NzM2Ng=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NDQxOA==", "bodyText": "Why can't we just infer the jar name from the component name? It seems hacky to require every component building plugin.jar.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471594418", "createdAt": "2020-08-17T16:25:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NzM2Ng=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzQ4OTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToyODoxNVrOHBtnZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNToyODoxNVrOHBtnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1Nzk4OA==", "bodyText": "nit: ident seems an odd abbreviation. Maybe just id or pkgId?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471557988", "createdAt": "2020-08-17T15:28:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU0ODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0MTo1NFrOHBuLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0MTo1NFrOHBuLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2NzI0OQ==", "bodyText": "Extract plugin to a constant?\nAlso this whole if..else block is getting a bit difficult to read. Maybe add some comments or refactor to private methods with more clear name?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471567249", "createdAt": "2020-08-17T15:41:54Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -355,6 +359,9 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n                     if (n != null) {\n                         cn = ((Map<String, String>) context.getvIfExists(SERVICE_TYPE_TO_CLASS_MAP_KEY).get())\n                                 .get(Coerce.toString(n).toLowerCase());\n+                        if (cn == null && Coerce.toString(n).toLowerCase().equals(\"plugin\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzU2ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo0NjowMVrOHBuXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjoxMzoyNFrOHBvbLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDIwOQ==", "bodyText": "Why change to 0 timestamp?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471570209", "createdAt": "2020-08-17T15:46:01Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -400,7 +407,7 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n                     }\n                     if (clazz.getAnnotation(ImplementsService.class) != null) {\n                         topics.createLeafChild(VERSION_CONFIG_KEY)\n-                                .withValue(clazz.getAnnotation(ImplementsService.class).version());\n+                                .withNewerValue(0L, clazz.getAnnotation(ImplementsService.class).version());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NzYyOA==", "bodyText": "The purpose is so that the version which is in the recipe file will overwrite this. This is just in case the version in the annotation isn't updated; but we know that the recipe will have the proper version because cloud won't allow it otherwise.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471587628", "createdAt": "2020-08-17T16:13:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -400,7 +407,7 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n                     }\n                     if (clazz.getAnnotation(ImplementsService.class) != null) {\n                         topics.createLeafChild(VERSION_CONFIG_KEY)\n-                                .withValue(clazz.getAnnotation(ImplementsService.class).version());\n+                                .withNewerValue(0L, clazz.getAnnotation(ImplementsService.class).version());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3MDIwOQ=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzYwNjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNTo1NDo1M1rOHBuuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0MDo1MlrOHBwY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjEwNA==", "bodyText": "This pretty much allows everyone create a plugin jar and run it in evergreen kernel jvm.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471576104", "createdAt": "2020-08-17T15:54:53Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);\n+        Path pluginJar = context.get(PackageStore.class).resolveArtifactDirectoryPath(ident)\n+                .resolve(jarName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4OTQzNw==", "bodyText": "Yes it does. I won't change anything in this PR to keep it smaller, but we can add more security around this. I think the idea was going to be to add code signing, right? What else do you think should be added for security other than code signing?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471589437", "createdAt": "2020-08-17T16:16:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);\n+        Path pluginJar = context.get(PackageStore.class).resolveArtifactDirectoryPath(ident)\n+                .resolve(jarName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjEwNA=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5ODIxMg==", "bodyText": "How would code signing help in this case? A couple ideas:\n\nKernel has a list of hardcoded whitelisted components that are allowed to run inside kernel JVM;\nThe plugin directory is protected by file system permission and only kernel runas can access.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471598212", "createdAt": "2020-08-17T16:31:44Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);\n+        Path pluginJar = context.get(PackageStore.class).resolveArtifactDirectoryPath(ident)\n+                .resolve(jarName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjEwNA=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMjM0MA==", "bodyText": "Code signing would work by checking the signature against a set of trusted CAs. In our kernel only the Evergreen root CA would be trusted by default.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471602340", "createdAt": "2020-08-17T16:39:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);\n+        Path pluginJar = context.get(PackageStore.class).resolveArtifactDirectoryPath(ident)\n+                .resolve(jarName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjEwNA=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwMzQyMQ==", "bodyText": "A list could work, but I'd prefer to not have a list so that it is actually extensible. Anupam suggested maybe going by the publisher, so if it is \"AWS\", then it can be trusted.\nPermissions won't help at all since these components are coming from the cloud and not the disk", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/364#discussion_r471603421", "createdAt": "2020-08-17T16:40:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -427,6 +434,40 @@ public EvergreenService locate(String name) throws ServiceLoadException {\n         });\n     }\n \n+    @SuppressWarnings(\"PMD.AvoidCatchingThrowable\")\n+    private Class<?> locateExternalPlugin(String name, Topics serviceRootTopics) throws ServiceLoadException {\n+        String jarName = \"plugin.jar\";\n+        PackageIdentifier ident = PackageIdentifier.fromServiceTopics(serviceRootTopics);\n+        Path pluginJar = context.get(PackageStore.class).resolveArtifactDirectoryPath(ident)\n+                .resolve(jarName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjEwNA=="}, "originalCommit": {"oid": "11564cb6b5ea3334f4ea49df67409560188fa1aa"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4537, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}