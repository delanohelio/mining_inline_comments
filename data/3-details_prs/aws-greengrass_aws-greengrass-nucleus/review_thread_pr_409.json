{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MDYxOTMx", "number": 409, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxODoyN1rOEgFe4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxOTo1OVrOEgFg_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc5NzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxODoyN1rOHMwTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyMjowMlrOHMwbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNjQxOQ==", "bodyText": "Is this needed for debugging?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483136419", "createdAt": "2020-09-03T17:18:27Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -273,6 +274,7 @@ private AwsCredentials getCredentialsFromByte(byte[] data) {\n                             credentials.get(SESSION_TOKEN_DOWNSTREAM_STR));\n         } catch (IOException e) {\n             LOGGER.atError().kv(IOT_CRED_PATH_KEY, iotCredentialsPath)\n+                    .kv(\"credentialData\", new String(data, StandardCharsets.UTF_8))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODQ1MQ==", "bodyText": "Yes, otherwise we don't know what was the data that it couldn't parse. It normally contains an error from TES which is useful for the customer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483138451", "createdAt": "2020-09-03T17:22:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -273,6 +274,7 @@ private AwsCredentials getCredentialsFromByte(byte[] data) {\n                             credentials.get(SESSION_TOKEN_DOWNSTREAM_STR));\n         } catch (IOException e) {\n             LOGGER.atError().kv(IOT_CRED_PATH_KEY, iotCredentialsPath)\n+                    .kv(\"credentialData\", new String(data, StandardCharsets.UTF_8))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNjQxOQ=="}, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDgwMjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyMDowMFrOHMwW_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzo1NDoyNVrOHMxgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNzI3Nw==", "bodyText": "nit: it's possible that customers run a private build. What are the use cases of builtin component metadata?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483137277", "createdAt": "2020-09-03T17:20:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -318,7 +323,34 @@ Semver getPackageVersionFromService(final EvergreenService service) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        // If the component is builtin, then we won't be able to get the metadata from the filesystem,\n+        // so in that case we will try getting it from builtin. If that fails too, then we just rethrow.\n+        try {\n+            return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        } catch (PackagingException e) {\n+            PackageMetadata md = getBuiltinComponentMetadata(packageName, activeVersion);\n+            if (md != null) {\n+                return Optional.of(md);\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    @Nullable\n+    private PackageMetadata getBuiltinComponentMetadata(String packageName, Semver activeVersion) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            if (!service.isBuiltin()) {\n+                return null;\n+            }\n+\n+            Map<String, String> deps = new HashMap<>();\n+            service.forAllDependencies(d -> deps.put(d.getServiceName(), ANY_VERSION));\n+\n+            return new PackageMetadata(new PackageIdentifier(packageName, activeVersion, PUBLIC_SCOPE), deps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODgwMA==", "bodyText": "This is why I changed the recipe download to look for private components first. So it will check for that before falling back to public.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483138800", "createdAt": "2020-09-03T17:22:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -318,7 +323,34 @@ Semver getPackageVersionFromService(final EvergreenService service) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        // If the component is builtin, then we won't be able to get the metadata from the filesystem,\n+        // so in that case we will try getting it from builtin. If that fails too, then we just rethrow.\n+        try {\n+            return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        } catch (PackagingException e) {\n+            PackageMetadata md = getBuiltinComponentMetadata(packageName, activeVersion);\n+            if (md != null) {\n+                return Optional.of(md);\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    @Nullable\n+    private PackageMetadata getBuiltinComponentMetadata(String packageName, Semver activeVersion) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            if (!service.isBuiltin()) {\n+                return null;\n+            }\n+\n+            Map<String, String> deps = new HashMap<>();\n+            service.forAllDependencies(d -> deps.put(d.getServiceName(), ANY_VERSION));\n+\n+            return new PackageMetadata(new PackageIdentifier(packageName, activeVersion, PUBLIC_SCOPE), deps);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNzI3Nw=="}, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE0MDU4Mg==", "bodyText": "I meant the existing builtin components could be private, but I'm fine with this implementation until we have enough information", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483140582", "createdAt": "2020-09-03T17:25:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -318,7 +323,34 @@ Semver getPackageVersionFromService(final EvergreenService service) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        // If the component is builtin, then we won't be able to get the metadata from the filesystem,\n+        // so in that case we will try getting it from builtin. If that fails too, then we just rethrow.\n+        try {\n+            return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        } catch (PackagingException e) {\n+            PackageMetadata md = getBuiltinComponentMetadata(packageName, activeVersion);\n+            if (md != null) {\n+                return Optional.of(md);\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    @Nullable\n+    private PackageMetadata getBuiltinComponentMetadata(String packageName, Semver activeVersion) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            if (!service.isBuiltin()) {\n+                return null;\n+            }\n+\n+            Map<String, String> deps = new HashMap<>();\n+            service.forAllDependencies(d -> deps.put(d.getServiceName(), ANY_VERSION));\n+\n+            return new PackageMetadata(new PackageIdentifier(packageName, activeVersion, PUBLIC_SCOPE), deps);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNzI3Nw=="}, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1NjEzMA==", "bodyText": "Yes, exactly. If it is private then when we go to look it up in the cloud it will be found first.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/409#discussion_r483156130", "createdAt": "2020-09-03T17:54:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -318,7 +323,34 @@ Semver getPackageVersionFromService(final EvergreenService service) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        // If the component is builtin, then we won't be able to get the metadata from the filesystem,\n+        // so in that case we will try getting it from builtin. If that fails too, then we just rethrow.\n+        try {\n+            return Optional.of(packageStore.getPackageMetadata(new PackageIdentifier(packageName, activeVersion)));\n+        } catch (PackagingException e) {\n+            PackageMetadata md = getBuiltinComponentMetadata(packageName, activeVersion);\n+            if (md != null) {\n+                return Optional.of(md);\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    @Nullable\n+    private PackageMetadata getBuiltinComponentMetadata(String packageName, Semver activeVersion) {\n+        try {\n+            EvergreenService service = kernel.locate(packageName);\n+            if (!service.isBuiltin()) {\n+                return null;\n+            }\n+\n+            Map<String, String> deps = new HashMap<>();\n+            service.forAllDependencies(d -> deps.put(d.getServiceName(), ANY_VERSION));\n+\n+            return new PackageMetadata(new PackageIdentifier(packageName, activeVersion, PUBLIC_SCOPE), deps);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNzI3Nw=="}, "originalCommit": {"oid": "f5eb4c8dd9daae0e1627ac65682a3fc22e0b0389"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}