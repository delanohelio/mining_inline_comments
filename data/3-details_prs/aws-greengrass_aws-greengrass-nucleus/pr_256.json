{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTcwMTE4", "number": 256, "title": "Rewrite DeviceConfiguration to be dynamic and move configs under \"system\" namespace", "bodyText": "Issue #, if available:\nDescription of changes:\nMoves device configuration topics out from under the \"DeploymentService\" to be under \"system\". Also allows AWS region to be set by the user from the config instead of relying on the environment, but will fallback to the environment if the user hasn't set a value.\nFixes logging from AWS SDK v1 which uses apache commons logging - now uses the slf4j binding so that we capture and format them appropriately.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-22T23:19:16Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256", "merged": true, "mergeCommit": {"oid": "f6946aa3742544b0ec001539d300e99e706d6145"}, "closed": true, "closedAt": "2020-05-26T23:03:48Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj7UfsgBqjMzNjY0NTEwNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclM3XggFqTQxODczNTM2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6e8b0fbde13d436e69f99ae0e235573799f1580", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b6e8b0fbde13d436e69f99ae0e235573799f1580", "committedDate": "2020-05-22T22:41:36Z", "message": "Clean DeviceConfiguration to be dynamic"}, "afterCommit": {"oid": "4b21f3f95c65bf3e4545b919fb3a93b5823cb9af", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4b21f3f95c65bf3e4545b919fb3a93b5823cb9af", "committedDate": "2020-05-23T00:00:00Z", "message": "Clean DeviceConfiguration to be dynamic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTY0MTk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#pullrequestreview-418564194", "createdAt": "2020-05-26T18:25:25Z", "commit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyNToyNVrOGaq3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODoyOTo0OFrOGarCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODU1NQ==", "bodyText": "Why can't this return string directly? Same for the other fields. We can provide an API for topic update in this class, instead of exposing topics to Util", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430618555", "createdAt": "2020-05-26T18:25:25Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMTI1NQ==", "bodyText": "Does this mean every time user call getAWSRegion() , a validator will be added? This may cause duplicated validators", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430621255", "createdAt": "2020-05-26T18:29:48Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {\n+                logger.atWarn().log(\"No AWS region found, falling back to default: {}\", FALLBACK_DEFAULT_REGION);\n+                newV = FALLBACK_DEFAULT_REGION;\n+            }\n+            return newV;\n+        };\n+        validate();\n+    }\n+\n+    public Topic getThingName() {\n+        return getTopic(DEVICE_PARAM_THING_NAME);\n+    }\n+\n+    public Topic getCertificateFilePath() {\n+        return getTopic(DEVICE_PARAM_CERTIFICATE_FILE_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getPrivateKeyFilePath() {\n+        return getTopic(DEVICE_PARAM_PRIVATE_KEY_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getRootCAFilePath() {\n+        return getTopic(DEVICE_PARAM_ROOT_CA_PATH).addValidator(deTildeValidator);\n+    }\n+\n+    public Topic getIotDataEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_DATA_ENDPOINT);\n+    }\n+\n+    public Topic getIotCredentialEndpoint() {\n+        return getTopic(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n+    }\n+\n+    public Topic getAWSRegion() {\n+        return getTopic(DEVICE_PARAM_AWS_REGION).addValidator(regionValidator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c"}, "originalPosition": 102}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5779c92ebdc77998fc19c35746fb7612bcb030c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b5779c92ebdc77998fc19c35746fb7612bcb030c", "committedDate": "2020-05-26T18:10:05Z", "message": "Merge branch 'master' into move-iot"}, "afterCommit": {"oid": "01e312f120988e25fc3d76d8477b70ff24134da0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01e312f120988e25fc3d76d8477b70ff24134da0", "committedDate": "2020-05-26T19:11:16Z", "message": "Clean DeviceConfiguration to be dynamic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01e312f120988e25fc3d76d8477b70ff24134da0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/01e312f120988e25fc3d76d8477b70ff24134da0", "committedDate": "2020-05-26T19:11:16Z", "message": "Clean DeviceConfiguration to be dynamic"}, "afterCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/280a510dfa4b07c346e3b6fc4790f15f106cdb62", "committedDate": "2020-05-26T19:42:12Z", "message": "Clean DeviceConfiguration to be dynamic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjY5MjMz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#pullrequestreview-418669233", "createdAt": "2020-05-26T20:50:42Z", "commit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MDo0MlrOGav2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo1MDo0MlrOGav2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDExMg==", "bodyText": "Can we extract the region from endpoints?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430700112", "createdAt": "2020-05-26T20:50:42Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.deployment;\n+\n+import com.amazonaws.SdkClientException;\n+import com.amazonaws.regions.DefaultAwsRegionProviderChain;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Validator;\n+import com.aws.iot.evergreen.deployment.exceptions.DeviceConfigurationException;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.util.Coerce;\n+import com.aws.iot.evergreen.util.Utils;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.inject.Inject;\n+\n+/**\n+ * Class for providing device configuration information.\n+ */\n+@SuppressWarnings(\"PMD.DataClass\")\n+@SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+public class DeviceConfiguration {\n+\n+    public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n+    public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n+    public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n+    public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n+    public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n+    public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n+    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n+    private static final String CANNOT_BE_EMPTY = \" cannot be empty\";\n+    private static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n+    private static final Logger logger = LogManager.getLogger(DeviceConfiguration.class);\n+    private static final String FALLBACK_DEFAULT_REGION = \"us-east-1\";\n+\n+    private final Kernel kernel;\n+\n+    private final Validator deTildeValidator;\n+    private final Validator regionValidator;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param kernel Kernel to get config from\n+     */\n+    @Inject\n+    @SuppressWarnings(\"PMD.NullAssignment\")\n+    public DeviceConfiguration(Kernel kernel) {\n+        this.kernel = kernel;\n+        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n+        regionValidator = (newV, old) -> {\n+            // If the region value is empty/null, then try to get the region from the SDK lookup path\n+            if (!(newV instanceof String) || Utils.isEmpty((String) newV)) {\n+                try {\n+                    newV = new DefaultAwsRegionProviderChain().getRegion();\n+                } catch (SdkClientException ex) {\n+                    newV = null;\n+                    logger.atWarn().log(\"Error looking up AWS region\", ex);\n+                }\n+            }\n+            if (Utils.isEmpty((String) newV)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4Njc3NDI5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#pullrequestreview-418677429", "createdAt": "2020-05-26T21:03:26Z", "commit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowMzoyNlrOGawPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMTowMzoyNlrOGawPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwNjUxMQ==", "bodyText": "nit:change the name of the argument to deviceConfiguration", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#discussion_r430706511", "createdAt": "2020-05-26T21:03:26Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/tes/IotConnectionManager.java", "diffHunk": "@@ -43,16 +43,15 @@\n      * @throws DeviceConfigurationException When unable to initialize this manager.\n      */\n     @Inject\n-    IotConnectionManager(final DeviceConfigurationHelper helper) throws DeviceConfigurationException {\n+    IotConnectionManager(final DeviceConfiguration helper) throws DeviceConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6064588975621042f4fad0c117aef04756a3352", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a6064588975621042f4fad0c117aef04756a3352", "committedDate": "2020-05-26T21:51:45Z", "message": "Clean DeviceConfiguration to be dynamic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "280a510dfa4b07c346e3b6fc4790f15f106cdb62", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/280a510dfa4b07c346e3b6fc4790f15f106cdb62", "committedDate": "2020-05-26T19:42:12Z", "message": "Clean DeviceConfiguration to be dynamic"}, "afterCommit": {"oid": "a6064588975621042f4fad0c117aef04756a3352", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a6064588975621042f4fad0c117aef04756a3352", "committedDate": "2020-05-26T21:51:45Z", "message": "Clean DeviceConfiguration to be dynamic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzMzNDkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#pullrequestreview-418733491", "createdAt": "2020-05-26T22:55:57Z", "commit": {"oid": "a6064588975621042f4fad0c117aef04756a3352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzM1MzYx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/256#pullrequestreview-418735361", "createdAt": "2020-05-26T23:00:37Z", "commit": {"oid": "a6064588975621042f4fad0c117aef04756a3352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2229, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}