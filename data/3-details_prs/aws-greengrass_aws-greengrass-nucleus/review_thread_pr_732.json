{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4ODk0NjYz", "number": 732, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTozMTowMlrOE-LpnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNjoyMzoyOVrOE-M9Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjM4MDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTozMTowMlrOH7QZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTozMTowMlrOH7QZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTg5Njc5MQ==", "bodyText": "can this be removed? are we sending JSON right now?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531896791", "createdAt": "2020-11-28T05:31:02Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -207,22 +186,19 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         ComponentIdentifier resolvedComponentId = new ComponentIdentifier(resolvedComponentVersion.getComponentName(),\n                 new Semver(resolvedComponentVersion.getComponentVersion()));\n         String downloadedRecipeContent = StandardCharsets.UTF_8.decode(resolvedComponentVersion.getRecipe()).toString();\n-        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe downloadedRecipe;\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe cloudResolvedRecipe;\n         try {\n-            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n+            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.JSON);\n         } catch (PackageLoadingException e) {\n             // TODO remove this backoff operation once cloud switch to send JSON recipe\n-            downloadedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);\n+            cloudResolvedRecipe = RecipeLoader.parseRecipe(downloadedRecipeContent, RecipeLoader.RecipeFormat.YAML);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjQ0MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo0NjowMlrOH7REWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo0NjowMlrOH7REWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkwNzY3Mw==", "bodyText": "Can this be simplified so instead of:\nboolean recipeShouldbeSaved = true;\n\nif (<some long expression that is a boolean>) {\n  recipeShouldbeSaved = false\n}\n\nif (recipeShouldbeSaved) {\n\nto\nif (!<some long boolean expression>) {", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531907673", "createdAt": "2020-11-28T05:46:02Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -232,11 +208,15 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                 return null;\n             }\n         }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            saveContent = false;\n+            recipeShouldbeSaved = false;\n         }\n \n-        if (saveContent) {\n-            componentStore.saveComponentRecipe(downloadedRecipe);\n+        if (recipeShouldbeSaved) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjQ1NTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo0OToyOVrOH7ROIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo0OToyOVrOH7ROIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMDE3Ng==", "bodyText": "why info? will this be called for every downloaded component?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531910176", "createdAt": "2020-11-28T05:49:29Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -245,6 +225,28 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         return resolvedComponentId;\n     }\n \n+\n+    private void storeRecipeDigestInConfigStoreForPlugin(\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe, String recipeContent)\n+            throws PackageLoadingException {\n+        ComponentIdentifier componentIdentifier =\n+                new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getComponentVersion());\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjQ1ODA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo1MDoxMVrOH7RQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo1MDoxMVrOH7RQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMDY3MA==", "bodyText": "nit: add a kv(\"digest\", digest) and change the log to \"Save plugin digest\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531910670", "createdAt": "2020-11-28T05:50:11Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -245,6 +225,28 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n         return resolvedComponentId;\n     }\n \n+\n+    private void storeRecipeDigestInConfigStoreForPlugin(\n+            com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe, String recipeContent)\n+            throws PackageLoadingException {\n+        ComponentIdentifier componentIdentifier =\n+                new ComponentIdentifier(componentRecipe.getComponentName(), componentRecipe.getComponentVersion());\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString())\n+                    .withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Save calculated digest: \" + digest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjQ2MTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo1MTowNFrOH7RSwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNTo1MTowNFrOH7RSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkxMTM2MQ==", "bodyText": "nit: Nucleus", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531911361", "createdAt": "2020-11-28T05:51:04Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -232,11 +208,15 @@ private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n                 return null;\n             }\n         }).filter(recipe -> recipe.equals(finalDownloadedRecipe)).isPresent()) {\n-            saveContent = false;\n+            recipeShouldbeSaved = false;\n         }\n \n-        if (saveContent) {\n-            componentStore.saveComponentRecipe(downloadedRecipe);\n+        if (recipeShouldbeSaved) {\n+            String savedRecipeContent = componentStore.saveComponentRecipe(cloudResolvedRecipe);\n+\n+            // Since plugin runs in the same JVM as Nuleus does, we need to calculate the digest for its recipe and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "909a9eefa9ae06cff1e3c530ff91ed352ad26c28"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNjU5Mzk1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNjoyMzoyOVrOH7SvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQwNjoyNjoyMVrOH7S4RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTE3Nw==", "bodyText": "remove this (p.s. sorry you had to do that in the first place)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531935177", "createdAt": "2020-11-28T06:23:29Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -219,11 +219,11 @@ protected BaseE2ETestCase() throws Exception {\n     }\n \n     public static void setDefaultRunWithUser(Kernel kernel) {\n-        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"nobody\");\n+        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"shuyeh\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce9b00e478a2d3ba70e37335197937a3754c138"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNzM0OQ==", "bodyText": "lol. Yeah was for a local test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/732#discussion_r531937349", "createdAt": "2020-11-28T06:26:21Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -219,11 +219,11 @@ protected BaseE2ETestCase() throws Exception {\n     }\n \n     public static void setDefaultRunWithUser(Kernel kernel) {\n-        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"nobody\");\n+        new DeviceConfiguration(kernel).getRunWithDefaultPosixUser().dflt(\"shuyeh\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTkzNTE3Nw=="}, "originalCommit": {"oid": "7ce9b00e478a2d3ba70e37335197937a3754c138"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 319, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}