{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTY2NDk0", "number": 55, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMDo1NDozNFrODfsflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoyMzowM1rODfz0yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTYxNDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMDo1NDozNFrOFpjNxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTozNDo1MFrOFpkVoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExMjkwMw==", "bodyText": "Also add super.postInject();", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379112903", "createdAt": "2020-02-13T20:54:34Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExOTcxMg==", "bodyText": "Can do, although the super doesn't do anything.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379119712", "createdAt": "2020-02-13T21:09:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExMjkwMw=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMTI5Ng==", "bodyText": "Oh my bad. I thought this extends EvergreenService, the that is essential. No need to do it here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379131296", "createdAt": "2020-02-13T21:34:50Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExMjkwMw=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY0NDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowNToyOVrOFpjg6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo0Mzo1MlrOFpkl7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNzgwMg==", "bodyText": "Any specific reason for using context here as key, instead of sourceServiceName?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379117802", "createdAt": "2020-02-13T21:05:29Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMDAxNA==", "bodyText": "Yes, because the source service could have created multiple IPC clients. The context is unique to a single connection, whereas the service name is not.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379120014", "createdAt": "2020-02-13T21:10:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNzgwMg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNzUzMg==", "bodyText": "I'd prefer renaming RequestContext into something like IPCClientConnectionContext", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379127532", "createdAt": "2020-02-13T21:26:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNzgwMg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzAyNQ==", "bodyText": "Makes sense. So RequestContext always 1 to 1 maps to a IPC Connection? I feel a connection may have multiple request context... Maybe just naming... We can leave it for now...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379133025", "createdAt": "2020-02-13T21:38:44Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNzgwMg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNTQ2OA==", "bodyText": "Yes, Ethan, it is 1:1. Shirley's suggested name may be a better idea. I'd probably go with just ConnectionContext.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379135468", "createdAt": "2020-02-13T21:43:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNzgwMg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY0NjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/ConnectionHandle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowNTo1OVrOFpjh2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMToyMTo1MFrOFppC5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExODA0Mg==", "bodyText": "[Minor] maybe ConnectionHandler?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379118042", "createdAt": "2020-02-13T21:05:59Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/ConnectionHandle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.ipc;\n+\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+\n+import java.util.concurrent.Future;\n+\n+@FunctionalInterface\n+public interface ConnectionHandle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMDI3Ng==", "bodyText": "It isn't a handler though, it is a handle to a connection, or perhaps some other phrasing. But definitely not a connection handler.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379120276", "createdAt": "2020-02-13T21:10:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/ConnectionHandle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.ipc;\n+\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+\n+import java.util.concurrent.Future;\n+\n+@FunctionalInterface\n+public interface ConnectionHandle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExODA0Mg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwODQyMA==", "bodyText": "I feel ConnectionHandle can be merged with ClientContext , sendAndReceive() is a method of ClientContext", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379208420", "createdAt": "2020-02-14T01:21:50Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/ConnectionHandle.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.aws.iot.evergreen.ipc;\n+\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+\n+import java.util.concurrent.Future;\n+\n+@FunctionalInterface\n+public interface ConnectionHandle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExODA0Mg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY0ODkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowNzowM1rOFpjjtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowNzowM1rOFpjjtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExODUxNg==", "bodyText": "super.postInject", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379118516", "createdAt": "2020-02-13T21:07:03Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/LifecycleIPCService.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.aws.iot.evergreen.ipc.modules;\n+\n+\n+import com.aws.iot.evergreen.builtin.services.lifecycle.LifecycleIPCAgent;\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.dependency.ImplementsService;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader.Message;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.exceptions.IPCException;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.util.Log;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.cbor.databind.CBORMapper;\n+\n+import java.io.IOException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+import static com.aws.iot.evergreen.util.Log.Level;\n+\n+\n+//TODO: see if this needs to be a GGService\n+@ImplementsService(name = \"lifecycleipc\", autostart = true)\n+public class LifecycleIPCService extends EvergreenService {\n+    private ObjectMapper mapper = new CBORMapper();\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    Log log;\n+\n+    @Inject\n+    private LifecycleIPCAgent agent;\n+\n+    public LifecycleIPCService(Topics c) {\n+        super(c);\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        try {\n+            router.registerServiceCallback(LIFECYCLE_SERVICE_NAME, this::handleMessage);\n+        } catch (IPCException e) {\n+            log.log(Level.Error, \"Error registering callback for service \" + LIFECYCLE_SERVICE_NAME);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY1MzU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Pair.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTowODo0MFrOFpjmmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo0MDowMlrOFpkexA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExOTI1OA==", "bodyText": "[Minor] Any reason for not using: https://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/Pair.html ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379119258", "createdAt": "2020-02-13T21:08:40Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/Pair.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Pair<L, R> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMDUwMw==", "bodyText": "No need for more dependencies for such a simple class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379120503", "createdAt": "2020-02-13T21:11:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/Pair.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Pair<L, R> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExOTI1OA=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzYzNg==", "bodyText": "Got it. But I think we will definitely need the lang3 lib one day...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379133636", "createdAt": "2020-02-13T21:40:02Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/Pair.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.aws.iot.evergreen.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+\n+@Data\n+@AllArgsConstructor\n+public class Pair<L, R> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExOTI1OA=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTcwMjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyNTowN1rOFpkEpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo0Mjo0MVrOFpkjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk1MA==", "bodyText": "Why the value of this map needs to be a map?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379126950", "createdAt": "2020-02-13T21:25:07Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDc2Mg==", "bodyText": "nvm", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379134762", "createdAt": "2020-02-13T21:42:21Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk1MA=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDg4OQ==", "bodyText": "I'll add a comment. This is mapping from service we're listening to --> connection --> function to call when the service changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379134889", "createdAt": "2020-02-13T21:42:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNjk1MA=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTcxMjE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToyODozM1rOFpkKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1NjozM1rOFpk9TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyODUyNg==", "bodyText": "I feel this should be a method of RequestContext , like Future<> requestContext.sendMessage, and you can do synchronize on the object inside the method", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379128526", "createdAt": "2020-02-13T21:28:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));\n+            return old;\n+        });\n+\n+        return GeneralResponse.<Void, LifecycleResponseStatus>builder().error(LifecycleResponseStatus.Success).build();\n+    }\n+\n+    private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n+                                                               RequestContext context) {\n+        return (oldState, newState) -> {\n+            executor.submit(() -> {\n+                // Synchronize on context so that we only try to send 1 update at a time to a given client\n+                synchronized (context) {\n+                    StateTransitionEvent trans =\n+                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n+                                    .service(listenRequest.getServiceName()).build();\n+\n+                    GeneralRequest<StateTransitionEvent, LifecycleRequestTypes> req =\n+                            GeneralRequest.<StateTransitionEvent, LifecycleRequestTypes>builder()\n+                                    .type(LifecycleRequestTypes.transition).request(trans).build();\n+\n+                    try {\n+                        // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+                        ConnectionHandle connectionHandle =\n+                                router.getConnectionHandle(context, this::handleConnectionClosed);\n+                        if (connectionHandle != null) {\n+                            connectionHandle.sendAndReceive(LIFECYCLE_SERVICE_NAME,\n+                                    new FrameReader.Message(IPCUtil.encode(req))).get();\n+                        }\n+                        // TODO: Check the response message and make sure it was successful. https://sim.amazon.com/issues/P32541289", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MTQ1Mw==", "bodyText": "I'll talk to you soon about this, I'm not sure exactly what part you think would be abstracted since all this is entirely specific to lifecycle.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379141453", "createdAt": "2020-02-13T21:56:33Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listen(LifecycleListenRequest listenRequest,\n+                                                                 RequestContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));\n+            return old;\n+        });\n+\n+        return GeneralResponse.<Void, LifecycleResponseStatus>builder().error(LifecycleResponseStatus.Success).build();\n+    }\n+\n+    private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n+                                                               RequestContext context) {\n+        return (oldState, newState) -> {\n+            executor.submit(() -> {\n+                // Synchronize on context so that we only try to send 1 update at a time to a given client\n+                synchronized (context) {\n+                    StateTransitionEvent trans =\n+                            StateTransitionEvent.builder().newState(newState.toString()).oldState(oldState.toString())\n+                                    .service(listenRequest.getServiceName()).build();\n+\n+                    GeneralRequest<StateTransitionEvent, LifecycleRequestTypes> req =\n+                            GeneralRequest.<StateTransitionEvent, LifecycleRequestTypes>builder()\n+                                    .type(LifecycleRequestTypes.transition).request(trans).build();\n+\n+                    try {\n+                        // TODO: Add timeout and retry to make sure the client got the request. https://sim.amazon.com/issues/P32541289\n+                        ConnectionHandle connectionHandle =\n+                                router.getConnectionHandle(context, this::handleConnectionClosed);\n+                        if (connectionHandle != null) {\n+                            connectionHandle.sendAndReceive(LIFECYCLE_SERVICE_NAME,\n+                                    new FrameReader.Message(IPCUtil.encode(req))).get();\n+                        }\n+                        // TODO: Check the response message and make sure it was successful. https://sim.amazon.com/issues/P32541289", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyODUyNg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTc0ODE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/handler/MessageRouter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo0MTo1MFrOFpkiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxNjoxN1rOFplfpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDUxNw==", "bodyText": "Haven't look too detailed into the code. I feel having both IPCRouter and MessageRouter is confusing", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379134517", "createdAt": "2020-02-13T21:41:50Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/handler/MessageRouter.java", "diffHunk": "@@ -57,7 +57,7 @@ public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n     @Override\n     public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n         super.channelUnregistered(ctx);\n-        // TODO: Handle de-registration of any listeners such as Lifecycle https://issues.amazon.com/issues/P32808717\n+        router.clientDisconnected(ctx.channel().attr(CONNECTION_CONTEXT_KEY).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MTU4Ng==", "bodyText": "Renamed MessageRouter to IPCChannelHandler", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379141586", "createdAt": "2020-02-13T21:56:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/handler/MessageRouter.java", "diffHunk": "@@ -57,7 +57,7 @@ public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n     @Override\n     public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n         super.channelUnregistered(ctx);\n-        // TODO: Handle de-registration of any listeners such as Lifecycle https://issues.amazon.com/issues/P32808717\n+        router.clientDisconnected(ctx.channel().attr(CONNECTION_CONTEXT_KEY).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDUxNw=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MDI0NA==", "bodyText": "Actually I feel that IPCRouter can be removed. registerCallback(dest, callback) can be put into LifecycleService, the new functions you added like connect/disconnect/sendResponseMessage can be methods in RequestContext", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379150244", "createdAt": "2020-02-13T22:16:17Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/handler/MessageRouter.java", "diffHunk": "@@ -57,7 +57,7 @@ public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n     @Override\n     public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n         super.channelUnregistered(ctx);\n-        // TODO: Handle de-registration of any listeners such as Lifecycle https://issues.amazon.com/issues/P32808717\n+        router.clientDisconnected(ctx.channel().attr(CONNECTION_CONTEXT_KEY).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNDUxNw=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTgyOTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxMDoxMFrOFplVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxOToxOVrOFplkjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzY0Mg==", "bodyText": "The naming is a little confusing to me. reportState() ( and listen() below) , both means 'handleReportStateFromClient' and 'handlListenFromClient' .", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379147642", "createdAt": "2020-02-13T22:10:10Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTUwMg==", "bodyText": "These are named to match the client API names. (except for listen which need to be updated to listenToStateChanges.)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379151502", "createdAt": "2020-02-13T22:19:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.common.RequestContext;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    private static final Map<String, Map<RequestContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<RequestContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req, RequestContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0NzY0Mg=="}, "originalCommit": {"oid": "0206eb5c791c46b96dea20fef8a6a6f7377692ab"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjIxOTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMToyMjoyNlrOFppDfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMToyNTo0NVrOFppGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwODU3NA==", "bodyText": "I feel add disconnect handler doesn't fit in the function name getConnectionHandle()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379208574", "createdAt": "2020-02-14T01:22:26Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fade2a9fcf5726b66f1e8cdddbfbc18854bf33cf"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwOTMyNw==", "bodyText": "The idea is to force the user to register what happens on disconnection. Without it, the user could forget that they need to do cleanup when the client disconnects.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379209327", "createdAt": "2020-02-14T01:25:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwODU3NA=="}, "originalCommit": {"oid": "fade2a9fcf5726b66f1e8cdddbfbc18854bf33cf"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjY4MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzoxNjowOFrOFptaiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTo1ODozOFrOFqCEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDAwOA==", "bodyText": "why so we need to store Client and SequenceNumber instead of just the sequence number and future", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379280008", "createdAt": "2020-02-14T07:16:08Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n+            if (value == null) {\n+                value = new ArrayList<>();\n+            }\n+            value.add(disconnectCallback);\n+            return value;\n+        });\n+\n+        return (destination, message) -> {\n+            FrameReader.MessageFrame requestFrame =\n+                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+\n+            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+            sequenceNumberToCallbackMap\n+                    .put(new ClientAndSequenceNumber(requestFrame.sequenceNumber, connectionContext), fut);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNDk1Ng==", "bodyText": "Since the sequence number may not be unique. The sequence number should be unique per-connection, but not necessarily across multiple connections.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379534956", "createdAt": "2020-02-14T16:46:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n+            if (value == null) {\n+                value = new ArrayList<>();\n+            }\n+            value.add(disconnectCallback);\n+            return value;\n+        });\n+\n+        return (destination, message) -> {\n+            FrameReader.MessageFrame requestFrame =\n+                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+\n+            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+            sequenceNumberToCallbackMap\n+                    .put(new ClientAndSequenceNumber(requestFrame.sequenceNumber, connectionContext), fut);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDAwOA=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxODM0Nw==", "bodyText": "I agree that having sequencenumber:clientId is stronger but is there a use case where we need to do that. Having a unique sequencenumber(as implemented ) should be strong enough for our uses cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379618347", "createdAt": "2020-02-14T19:58:38Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n+            if (value == null) {\n+                value = new ArrayList<>();\n+            }\n+            value.add(disconnectCallback);\n+            return value;\n+        });\n+\n+        return (destination, message) -> {\n+            FrameReader.MessageFrame requestFrame =\n+                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+\n+            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+            sequenceNumberToCallbackMap\n+                    .put(new ClientAndSequenceNumber(requestFrame.sequenceNumber, connectionContext), fut);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDAwOA=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjY4NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzoxNzo0M1rOFptcTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjo0ODozOVrOFp9B_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDQ2Mw==", "bodyText": "lets first remove the context from clientToChannelMap before going through the list of call backs", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379280463", "createdAt": "2020-02-14T07:17:43Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n+            if (value == null) {\n+                value = new ArrayList<>();\n+            }\n+            value.add(disconnectCallback);\n+            return value;\n+        });\n+\n+        return (destination, message) -> {\n+            FrameReader.MessageFrame requestFrame =\n+                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+\n+            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+            sequenceNumberToCallbackMap\n+                    .put(new ClientAndSequenceNumber(requestFrame.sequenceNumber, connectionContext), fut);\n+\n+            channel.writeAndFlush(requestFrame);\n+\n+            return fut;\n+        };\n+    }\n+\n+    /**\n+     * Only called by MessageRouter, do not call in any other place.\n+     * Called when a client disconnects from the server.\n+     *\n+     * @param context client which disconnected's context\n+     */\n+    public void clientDisconnected(ConnectionContext context) {\n+        List<Consumer<ConnectionContext>> disconnectors = clientToDisconnectorsMap.get(context);\n+        if (disconnectors != null) {\n+            disconnectors.forEach(d -> d.accept(context));\n+        }\n+\n+        clientToChannelMap.remove(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNTg2OQ==", "bodyText": "Sure.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379535869", "createdAt": "2020-02-14T16:48:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/IPCRouter.java", "diffHunk": "@@ -50,4 +66,103 @@ public void registerServiceCallback(String destination, IPCCallback callback) th\n     public IPCCallback getCallbackForDestination(String destination) {\n         return destinationCallbackMap.get(destination);\n     }\n+\n+    /**\n+     * Tries to get a connection handle from a context. The connection handle can be used to send\n+     * requests to the client and then wait for a response.\n+     *\n+     * @param connectionContext  The request context of the client that you want the handle to.\n+     * @param disconnectCallback Function to be called when the client disconnects. Use for cleaning up\n+     *                           extra listeners.\n+     * @return\n+     */\n+    @Nullable\n+    public ConnectionHandle getConnectionHandle(ConnectionContext connectionContext,\n+                                                Consumer<ConnectionContext> disconnectCallback) {\n+        Channel channel = clientToChannelMap.get(connectionContext);\n+        if (channel == null) {\n+            return null;\n+        }\n+\n+        clientToDisconnectorsMap.compute(connectionContext, (key, value) -> {\n+            if (value == null) {\n+                value = new ArrayList<>();\n+            }\n+            value.add(disconnectCallback);\n+            return value;\n+        });\n+\n+        return (destination, message) -> {\n+            FrameReader.MessageFrame requestFrame =\n+                    new FrameReader.MessageFrame(destination, message, FrameReader.FrameType.REQUEST);\n+\n+            CompletableFuture<FrameReader.Message> fut = new CompletableFuture<>();\n+            sequenceNumberToCallbackMap\n+                    .put(new ClientAndSequenceNumber(requestFrame.sequenceNumber, connectionContext), fut);\n+\n+            channel.writeAndFlush(requestFrame);\n+\n+            return fut;\n+        };\n+    }\n+\n+    /**\n+     * Only called by MessageRouter, do not call in any other place.\n+     * Called when a client disconnects from the server.\n+     *\n+     * @param context client which disconnected's context\n+     */\n+    public void clientDisconnected(ConnectionContext context) {\n+        List<Consumer<ConnectionContext>> disconnectors = clientToDisconnectorsMap.get(context);\n+        if (disconnectors != null) {\n+            disconnectors.forEach(d -> d.accept(context));\n+        }\n+\n+        clientToChannelMap.remove(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI4MDQ2Mw=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Njc1MjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/common/ConnectionContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzo1Mjo1N1rOFpuDrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTo1Njo0OVrOFqCBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5MDU0Mg==", "bodyText": "We need to uniquely identify each connection at-least for logging and debugging purposes. May be a client Id?\nAlso add equals() and hashcode(), relying on the object itself for uniqueness is fragile.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379290542", "createdAt": "2020-02-14T07:52:57Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/common/ConnectionContext.java", "diffHunk": "@@ -7,6 +7,6 @@\n @AllArgsConstructor\n @Data\n @ToString\n-public class RequestContext {\n+public class ConnectionContext {\n     private String serviceName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNTgwNQ==", "bodyText": "For logging, we don't need any of that. The service name along with the connection itself (the remote ip address and port) is enough to identify a single connection.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379535805", "createdAt": "2020-02-14T16:48:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/common/ConnectionContext.java", "diffHunk": "@@ -7,6 +7,6 @@\n @AllArgsConstructor\n @Data\n @ToString\n-public class RequestContext {\n+public class ConnectionContext {\n     private String serviceName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5MDU0Mg=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYxNzU2OA==", "bodyText": "We need a unique way to identify each client, to track request from client to server and back. A unique client id would serve that purpose and the client id should be shared with the client on initial hand shake.\nremote ip and port does not cut it as the client might see a different ip/port from what the server sees, if they are behind a nat gateway (wifi router in the M1 example)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379617568", "createdAt": "2020-02-14T19:56:49Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/common/ConnectionContext.java", "diffHunk": "@@ -7,6 +7,6 @@\n @AllArgsConstructor\n @Data\n @ToString\n-public class RequestContext {\n+public class ConnectionContext {\n     private String serviceName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5MDU0Mg=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjgwODkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoyMDoyOVrOFpul5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDowNDoyNlrOFqCNzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTMwMw==", "bodyText": "do we need this synchronization? even if we limit this here, there would be another service trying to send a message to the client at the same time. IPCService should be support multiple code paths sending message to a client concurrently.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379299303", "createdAt": "2020-02-14T08:20:29Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    // Map from service that is listened to --> Map of connection --> Function to call when service state changes\n+    private static final Map<String, Map<ConnectionContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req     incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req,\n+                                                                      ConnectionContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context       caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listenToStateChanges(LifecycleListenRequest listenRequest,\n+                                                                               ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));\n+            return old;\n+        });\n+\n+        return GeneralResponse.<Void, LifecycleResponseStatus>builder().error(LifecycleResponseStatus.Success).build();\n+    }\n+\n+    private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n+                                                               ConnectionContext context) {\n+        return (oldState, newState) -> {\n+            executor.submit(() -> {\n+                // Synchronize on context so that we only try to send 1 update at a time to a given client\n+                synchronized (context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNzA0Mw==", "bodyText": "This locking is not for threadsafety, it is already safe. The purpose is so that we only send a single state transition at a time and wait for the response to come back before sending the next state transition. This emulates the kernel's publish queue where it is blocking and strictly ordered.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379537043", "createdAt": "2020-02-14T16:51:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    // Map from service that is listened to --> Map of connection --> Function to call when service state changes\n+    private static final Map<String, Map<ConnectionContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req     incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req,\n+                                                                      ConnectionContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context       caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listenToStateChanges(LifecycleListenRequest listenRequest,\n+                                                                               ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));\n+            return old;\n+        });\n+\n+        return GeneralResponse.<Void, LifecycleResponseStatus>builder().error(LifecycleResponseStatus.Success).build();\n+    }\n+\n+    private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n+                                                               ConnectionContext context) {\n+        return (oldState, newState) -> {\n+            executor.submit(() -> {\n+                // Synchronize on context so that we only try to send 1 update at a time to a given client\n+                synchronized (context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTMwMw=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMDgxNA==", "bodyText": "Agreed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379620814", "createdAt": "2020-02-14T20:04:26Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    // Map from service that is listened to --> Map of connection --> Function to call when service state changes\n+    private static final Map<String, Map<ConnectionContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req     incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req,\n+                                                                      ConnectionContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context       caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listenToStateChanges(LifecycleListenRequest listenRequest,\n+                                                                               ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {\n+            if (old == null) {\n+                old = new ConcurrentHashMap<>();\n+            }\n+            old.put(context, sendStateUpdateToListener(listenRequest, context));\n+            return old;\n+        });\n+\n+        return GeneralResponse.<Void, LifecycleResponseStatus>builder().error(LifecycleResponseStatus.Success).build();\n+    }\n+\n+    private BiConsumer<State, State> sendStateUpdateToListener(LifecycleListenRequest listenRequest,\n+                                                               ConnectionContext context) {\n+        return (oldState, newState) -> {\n+            executor.submit(() -> {\n+                // Synchronize on context so that we only try to send 1 update at a time to a given client\n+                synchronized (context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTMwMw=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjgxNTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwODoyMzowM1rOFpupwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjo1Mjo0NVrOFp9J1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMDI4OA==", "bodyText": "if the same connections listens to state changes for the same service n times, do we need to send n state change messages?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379300288", "createdAt": "2020-02-14T08:23:03Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    // Map from service that is listened to --> Map of connection --> Function to call when service state changes\n+    private static final Map<String, Map<ConnectionContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req     incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req,\n+                                                                      ConnectionContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context       caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listenToStateChanges(LifecycleListenRequest listenRequest,\n+                                                                               ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUzNzg3OA==", "bodyText": "No, since the client would receive the exact same message if it was multiply registered. The client keeps a list of callbacks for each service it is listening to, but the server does not need that since the request that it sends to the server is just saying that some service changed into some state.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/55#discussion_r379537878", "createdAt": "2020-02-14T16:52:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/builtin/services/lifecycle/LifecycleIPCAgent.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package com.aws.iot.evergreen.builtin.services.lifecycle;\n+\n+import com.aws.iot.evergreen.dependency.InjectionActions;\n+import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.ipc.ConnectionHandle;\n+import com.aws.iot.evergreen.ipc.IPCRouter;\n+import com.aws.iot.evergreen.ipc.common.ConnectionContext;\n+import com.aws.iot.evergreen.ipc.common.FrameReader;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralRequest;\n+import com.aws.iot.evergreen.ipc.services.common.GeneralResponse;\n+import com.aws.iot.evergreen.ipc.services.common.IPCUtil;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleListenRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleRequestTypes;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.LifecycleResponseStatus;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateChangeRequest;\n+import com.aws.iot.evergreen.ipc.services.lifecycle.StateTransitionEvent;\n+import com.aws.iot.evergreen.kernel.EvergreenService;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.BiConsumer;\n+import javax.inject.Inject;\n+\n+import static com.aws.iot.evergreen.ipc.services.lifecycle.Lifecycle.LIFECYCLE_SERVICE_NAME;\n+\n+/**\n+ * Class to handle business logic for all Lifecycle requests over IPC.\n+ */\n+public class LifecycleIPCAgent implements InjectionActions {\n+    // Map from service that is listened to --> Map of connection --> Function to call when service state changes\n+    private static final Map<String, Map<ConnectionContext, BiConsumer<State, State>>> listeners =\n+            new ConcurrentHashMap<>();\n+\n+    @Inject\n+    private Kernel kernel;\n+\n+    @Inject\n+    private IPCRouter router;\n+\n+    @Inject\n+    private ExecutorService executor;\n+\n+    private EvergreenService.GlobalStateChangeListener onServiceChange = (service, prev) -> {\n+        Map<ConnectionContext, BiConsumer<State, State>> callbacks = listeners.get(service.getName());\n+        if (callbacks != null) {\n+            callbacks.values().forEach(x -> x.accept(prev, service.getState()));\n+        }\n+    };\n+\n+    public LifecycleIPCAgent() {\n+    }\n+\n+    @Override\n+    public void postInject() {\n+        kernel.context.addGlobalStateChangeListener(onServiceChange);\n+    }\n+\n+    /**\n+     * Report the state of the service which the request is coming from.\n+     *\n+     * @param req     incoming request\n+     * @param context caller context\n+     * @return response for setting state\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> reportState(StateChangeRequest req,\n+                                                                      ConnectionContext context) {\n+        State s = State.valueOf(req.getState());\n+        Optional<EvergreenService> service =\n+                Optional.ofNullable(kernel.context.get(EvergreenService.class, context.getServiceName()));\n+\n+        GeneralResponse<Void, LifecycleResponseStatus> resp = new GeneralResponse<>();\n+        if (service.isPresent()) {\n+            service.get().setState(s);\n+            resp.setError(LifecycleResponseStatus.Success);\n+        } else {\n+            resp.setError(LifecycleResponseStatus.InvalidRequest);\n+            resp.setErrorMessage(\"Service could not be found\");\n+        }\n+\n+        return resp;\n+    }\n+\n+    /**\n+     * Set up a listener for state changes for a requested service. (Currently any service can listen to any other\n+     * service's lifecyle changes).\n+     *\n+     * @param listenRequest incoming listen request\n+     * @param context       caller context\n+     * @return response\n+     */\n+    public GeneralResponse<Void, LifecycleResponseStatus> listenToStateChanges(LifecycleListenRequest listenRequest,\n+                                                                               ConnectionContext context) {\n+        // TODO: Input validation. https://sim.amazon.com/issues/P32540011\n+        listeners.compute(listenRequest.getServiceName(), (key, old) -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMDI4OA=="}, "originalCommit": {"oid": "baaf591f729be7db0fec921787b0bba4b6e6e805"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 71, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}