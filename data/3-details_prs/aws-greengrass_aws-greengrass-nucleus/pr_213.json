{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjU2MDcx", "number": 213, "title": "Cleanup all threads during tests", "bodyText": "Issue #, if available:\nDescription of changes:\nCreated a new JUnit extension to make sure that we don't leak threads between tests. Currently the extension only prints out errors instead of enforcing it, as sometimes there are stray threads from Netty which are harder to deal with. This change includes many fixes to actually shutdown all the threads that we use, including importantly shutting down the publish thread in Context.\nAdditionally reverts a change from a while ago which used .clear() in clearODcache instead of setting to null. This is a race condition and concurrent modification problem because the .clear() will be clearing an object which another thread may have a live reference to. This has been causing rare test failures (as far as I can tell anyway, I wasn't able to replicate the problem).\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-23T23:48:12Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213", "merged": true, "mergeCommit": {"oid": "ba54f687db4dec73378b2170510aeff0368b1591"}, "closed": true, "closedAt": "2020-04-24T18:09:45Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcalzUJgBqjMyNjczMDA3ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca1g4mAFqTQwMDE2NTcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e5de1cf6636c307ecb7aa3a61ac2eae099c6875", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e5de1cf6636c307ecb7aa3a61ac2eae099c6875", "committedDate": "2020-04-23T23:44:00Z", "message": "Cleanup all threads during tests"}, "afterCommit": {"oid": "35fd1cf1f39e24fe7eef67d1a4da216d14248cde", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35fd1cf1f39e24fe7eef67d1a4da216d14248cde", "committedDate": "2020-04-23T23:50:31Z", "message": "Cleanup all threads during tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35fd1cf1f39e24fe7eef67d1a4da216d14248cde", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35fd1cf1f39e24fe7eef67d1a4da216d14248cde", "committedDate": "2020-04-23T23:50:31Z", "message": "Cleanup all threads during tests"}, "afterCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/55653ca44d71da3e58345ac6d79b48ac86c988a1", "committedDate": "2020-04-23T23:53:37Z", "message": "Cleanup all threads during tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTc5MjI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#pullrequestreview-399579226", "createdAt": "2020-04-24T01:17:14Z", "commit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToxNzoxNFrOGLCXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMToyMDoxNVrOGLCbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjM3NQ==", "bodyText": "Great!!! What about in context.close(), we try to find these and call shutdownNow?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226375", "createdAt": "2020-04-24T01:17:14Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/dependency/LifecycleTest.java", "diffHunk": "@@ -25,24 +29,39 @@\n import static org.junit.jupiter.api.Assertions.assertSame;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.Mockito.mock;\n \n @SuppressWarnings({\"PMD.CloseResource\", \"PMD.NonStaticInitializer\"})\n @ExtendWith(EGExtension.class)\n public class LifecycleTest {\n     static int seq;\n     static CountDownLatch cd;\n+    private Context context;\n \n-    @Test\n-    public void T1() {\n-        cd = new CountDownLatch(2);\n-        Context context = new Context();\n+    @BeforeEach\n+    void beforeEach() {\n+        context = new Context();\n         ScheduledThreadPoolExecutor ses = new ScheduledThreadPoolExecutor(2);\n         ExecutorService cachedPool = Executors.newCachedThreadPool();\n         context.put(ScheduledThreadPoolExecutor.class, ses);\n         context.put(ScheduledExecutorService.class, ses);\n         context.put(Executor.class, cachedPool);\n         context.put(ExecutorService.class, cachedPool);\n         context.put(ThreadPoolExecutor.class, ses);\n+        context.put(Kernel.class, mock(Kernel.class));\n+    }\n+\n+    @AfterEach\n+    void afterEach() throws IOException {\n+        context.get(ScheduledThreadPoolExecutor.class).shutdownNow();\n+        context.get(ExecutorService.class).shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjM4Mw==", "bodyText": "Good job. I've seen you added this so many times...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226383", "createdAt": "2020-04-24T01:17:17Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -102,11 +101,12 @@ public void setup() {\n     }\n \n     @AfterEach\n-    void afterEach() {\n+    void afterEach() throws InterruptedException {\n         deploymentService.shutdown();\n         if (deploymentServiceThread != null && deploymentServiceThread.isAlive()) {\n             deploymentServiceThread.interrupt();\n         }\n+        mockKernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjc1MQ==", "bodyText": "Did mock cause issue?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226751", "createdAt": "2020-04-24T01:18:35Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/KernelTest.java", "diffHunk": "@@ -128,7 +128,7 @@ void GIVEN_kernel_and_services_WHEN_orderedDependencies_THEN_dependencies_are_re\n     @Test\n     void GIVEN_kernel_and_services_WHEN_orderedDependencies_with_a_cycle_THEN_no_dependencies_returned()\n             throws InputValidationException {\n-        KernelLifecycle kernelLifecycle = mock(KernelLifecycle.class);\n+        KernelLifecycle kernelLifecycle = spy(new KernelLifecycle(kernel, mock(KernelCommandLine.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNjgxMA==", "bodyText": "nit: format", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414226810", "createdAt": "2020-04-24T01:18:46Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/MergeTest.java", "diffHunk": "@@ -42,10 +42,12 @@ public void setup() {\n \n     @Test\n     public void testSomeMethod() throws Exception {\n-        Configuration c = new Configuration(new Context());\n-        c.read(Kernel.class.getResource(\"config.yaml\"), false);\n-        Configuration b = new Configuration(new Context()).copyFrom(c);\n-        assertEquals(c.getRoot(), b.getRoot());\n+        try(Context context = new Context()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyNzI0Mg==", "bodyText": "Nice!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414227242", "createdAt": "2020-04-24T01:20:15Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/ThreadProtector.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.testcommons.testutilities;\n+\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@SuppressWarnings(\"PMD.SystemPrintln\")\n+public class ThreadProtector implements AfterAllCallback {\n+    private static final Set<String> ALLOWED_THREAD_NAMES = new HashSet<>(Arrays.asList(\"main\", \"Monitor Ctrl-Break\"));\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) throws Exception {\n+        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();\n+        List<String> liveThreads =\n+                threadSet.stream().filter(Thread::isAlive).filter(t -> t.getThreadGroup().getName().equals(\"main\"))\n+                        .map(Thread::getName).filter(Objects::nonNull)\n+                        .filter(name -> !ALLOWED_THREAD_NAMES.contains(name)).collect(Collectors.toList());\n+        if (!liveThreads.isEmpty()) {\n+            // Don't fail tests right now. Too many things would break.\n+            // fail(\"Threads are still running: \" + liveThreads);\n+            System.err.println(\"Threads are still running: \" + liveThreads);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55653ca44d71da3e58345ac6d79b48ac86c988a1"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f95030b9f09bca09693d23bf9756e65c256a101c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f95030b9f09bca09693d23bf9756e65c256a101c", "committedDate": "2020-04-24T15:29:25Z", "message": "Revert clearODcache so that it sets null instead of clearing"}, "afterCommit": {"oid": "1de52e02247992d8357b2bff64883aae413dcd54", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1de52e02247992d8357b2bff64883aae413dcd54", "committedDate": "2020-04-24T15:32:15Z", "message": "Revert clearODcache so that it sets null instead of clearing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1de52e02247992d8357b2bff64883aae413dcd54", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1de52e02247992d8357b2bff64883aae413dcd54", "committedDate": "2020-04-24T15:32:15Z", "message": "Revert clearODcache so that it sets null instead of clearing"}, "afterCommit": {"oid": "b71d6f9ea3a73595cf7c9b71fbc9f2cc5fc09ced", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b71d6f9ea3a73595cf7c9b71fbc9f2cc5fc09ced", "committedDate": "2020-04-24T15:33:17Z", "message": "Revert clearODcache so that it sets null instead of clearing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b71d6f9ea3a73595cf7c9b71fbc9f2cc5fc09ced", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b71d6f9ea3a73595cf7c9b71fbc9f2cc5fc09ced", "committedDate": "2020-04-24T15:33:17Z", "message": "Revert clearODcache so that it sets null instead of clearing"}, "afterCommit": {"oid": "237d67d30cfdf3aac45368a321337811df6215b5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/237d67d30cfdf3aac45368a321337811df6215b5", "committedDate": "2020-04-24T16:05:41Z", "message": "Revert clearODcache so that it sets null instead of clearing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d8de3ea4080952156bedd4d08741378345cef10", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7d8de3ea4080952156bedd4d08741378345cef10", "committedDate": "2020-04-24T17:11:55Z", "message": "Cleanup all threads during tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fce204078f5197d1398c9e6ed1d41314a937e1ec", "committedDate": "2020-04-24T17:13:27Z", "message": "Revert clearODcache so that it sets null instead of clearing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "237d67d30cfdf3aac45368a321337811df6215b5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/237d67d30cfdf3aac45368a321337811df6215b5", "committedDate": "2020-04-24T16:05:41Z", "message": "Revert clearODcache so that it sets null instead of clearing"}, "afterCommit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fce204078f5197d1398c9e6ed1d41314a937e1ec", "committedDate": "2020-04-24T17:13:27Z", "message": "Revert clearODcache so that it sets null instead of clearing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTM0NjQ4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#pullrequestreview-400134648", "createdAt": "2020-04-24T17:23:02Z", "commit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyMzowMlrOGLhrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzoyMzowMlrOGLhrJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDczOTIzOQ==", "bodyText": "Why do we need this new condition?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#discussion_r414739239", "createdAt": "2020-04-24T17:23:02Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -131,7 +131,7 @@ private Topic initStateTopic(final Topics topics) {\n \n     private synchronized void initDependenciesTopic() {\n         externalDependenciesTopic.subscribe((what, node) -> {\n-            if (!WhatHappened.changed.equals(what)) {\n+            if (!WhatHappened.changed.equals(what) || node.getModtime() <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTUxNTk5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#pullrequestreview-400151599", "createdAt": "2020-04-24T17:47:59Z", "commit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTY1NzEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/213#pullrequestreview-400165713", "createdAt": "2020-04-24T18:09:00Z", "commit": {"oid": "fce204078f5197d1398c9e6ed1d41314a937e1ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2160, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}