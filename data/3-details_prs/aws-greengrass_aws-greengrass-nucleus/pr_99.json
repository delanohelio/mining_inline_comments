{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTUzMzc2", "number": 99, "title": "Add JMH incredibly basic benchmark", "bodyText": "Issue #, if available:\nDescription of changes:\nAdds JMH maven project under our test directory. Includes very very basic test that just starts the Kernel with one service. Also adds a couple profilers to collect measurements.\nThese profilers were taken from cache2k and modified to streamline the provided metrics as well as adding a few more metrics from jcmd. Currently JMH results are not ingested to anything, this will change in future PRs.\nWhy is this change necessary:\nThis change will enable our future benchmarking using JMH. In future PRs we will expand our CloudWatch uploader to take results from JMH and upload them. Also, proper benchmarks will need to be written.\nHow was this change tested:\nI've been manually building and running the benchmarks by doing mvn install on the benchmark package, then running it using java -jar <benchmark.jar> ... <args>.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.\nExample output:\n| Benchmark                                                           Mode  Cnt           Score           Error  Units\n| MyBenchmark.testMethod                                             thrpt    5           0.021 ?         0.003  ops/s\n| MyBenchmark.testMethod:+forced-gc-mem.codeCacheUsed                thrpt    5     4725964.800 ?    241993.876  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.compressedClassSpaceUsed     thrpt    5     3015598.400 ?     59077.263  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.gcTimeMillis                 thrpt    5        2270.000 ?      3310.602     ms\n| MyBenchmark.testMethod:+forced-gc-mem.heapUsed                     thrpt    5     5450915.200 ?    296294.103  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.heapUsed.jmap                thrpt    5     5577771.200 ?    295906.258  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.heapUsed.settled             thrpt    5     5452708.800 ?    287861.498  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Arena Chunk             thrpt    5     1720320.000 ?   3406803.307  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Class                   thrpt    5    27886592.000 ?   2901940.355  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Code                    thrpt    5     5464473.600 ?    320124.459  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Compiler                thrpt    5      155852.800 ?     17277.621  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.GC                      thrpt    5    20977868.800 ?     17277.621  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Internal                thrpt    5     4796416.000 ?     75589.590  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Java Heap               thrpt    5    12897484.800 ?   1805711.118  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Native Memory Tracking  thrpt    5      799334.400 ?     10653.560  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Symbol                  thrpt    5     6383411.200 ?    597385.859  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Thread                  thrpt    5    12326502.400 ?    417923.374  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.jcmd.Total                   thrpt    5    93408665.600 ?   8003879.091  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmData               thrpt    5   175309619.200 ?   3072701.477  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmExe                thrpt    5        4096.000 ?         0.001  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmHWM                thrpt    5   108103270.400 ?  13311126.546  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmLck                thrpt    5             ? 0                  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmLib                thrpt    5    18477056.000 ?         0.001  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmPTE                thrpt    5      469401.600 ?     23919.783  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmPeak               thrpt    5  3068456960.000 ? 116777241.937  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmPin                thrpt    5             ? 0                  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmRSS                thrpt    5   101030297.600 ?   8143093.360  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmSize               thrpt    5  3035125350.400 ?   1519776.013  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmStk                thrpt    5      135168.000 ?         0.001  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.linuxVm.VmSwap               thrpt    5             ? 0                  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.metaspaceUsed                thrpt    5    24084329.600 ?    452708.596  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.nonHeapUsed                  thrpt    5    30313387.200 ?   2479548.182  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.nonHeapUsed.settled          thrpt    5    30315713.600 ?   2480244.705  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.totalCommitted               thrpt    5    42480435.200 ?   4365098.882  bytes\n| MyBenchmark.testMethod:+forced-gc-mem.totalCommitted.settled       thrpt    5    42795008.000 ?   2942949.066  bytes", "createdAt": "2020-03-05T23:35:33Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99", "merged": true, "mergeCommit": {"oid": "22261612dac373e53a698bb59009063f8ab8ea23"}, "closed": true, "closedAt": "2020-03-10T16:11:37Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLFM8pgBqjMxMDY1Njc3NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMUs6iAH2gAyMzg0NTUzMzc2OjdmOTAyMjljOWJhZmE5MzMzMjM5Mzg0Y2QyMmVkN2RjM2FmMDEzMmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b14a5b15b4f3d47c75c913434778b426f210d02", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3b14a5b15b4f3d47c75c913434778b426f210d02", "committedDate": "2020-03-05T23:32:02Z", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs."}, "afterCommit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc71d10def7923b34dfeb9093e1f46581dde6feb", "committedDate": "2020-03-06T19:13:46Z", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjUyNTYz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#pullrequestreview-370652563", "createdAt": "2020-03-06T21:59:12Z", "commit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1OToxMlrOFzIuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjowMjo1NlrOFzIzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDYyMg==", "bodyText": "I don't think \"-log\" works any more", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389164622", "createdAt": "2020-03-06T21:59:12Z", "author": {"login": "hui-yang"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NTkwOQ==", "bodyText": "Not sure about this magic number.\nAre we directly using this library file? Maybe document any modifications?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r389165909", "createdAt": "2020-03-06T22:02:56Z", "author": {"login": "hui-yang"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/profilers/ForcedGcMemoryProfiler.java", "diffHunk": "@@ -0,0 +1,378 @@\n+/*\n+ * #%L\n+ * Benchmarks: JMH suite.\n+ * %%\n+ * Copyright (C) 2013 - 2019 headissue GmbH, Munich\n+ * %%\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * #L%\n+ *\n+ * Modifications copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.profilers;\n+\n+import com.aws.iot.evergreen.util.Pair;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+import org.openjdk.jmh.infra.IterationParams;\n+import org.openjdk.jmh.profile.InternalProfiler;\n+import org.openjdk.jmh.results.AggregationPolicy;\n+import org.openjdk.jmh.results.IterationResult;\n+import org.openjdk.jmh.results.Result;\n+import org.openjdk.jmh.runner.IterationType;\n+import org.openjdk.jmh.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.LineNumberReader;\n+import java.io.PrintStream;\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Record the used heap memory of a benchmark iteration by forcing a full garbage collection.\n+ *\n+ * @author Jens Wilke\n+ */\n+public class ForcedGcMemoryProfiler implements InternalProfiler {\n+    // Extracts memory pool name and amount of committed memory from jcmd output\n+    // Example output:\n+    /*\n+    42:\n+\n+ Native Memory Tracking:\n+\n+ Total: reserved=1840MB, committed=91MB\n+ -                 Java Heap (reserved=498MB, committed=12MB)\n+                             (mmap: reserved=498MB, committed=12MB)\n+\n+ -                     Class (reserved=1050MB, committed=28MB)\n+                             (classes #4094)\n+                             (malloc=4MB #3323)\n+                             (mmap: reserved=1046MB, committed=24MB)\n+     */\n+    private static final Pattern JCMD_NATIVE_COMMITTED_MEMORY_PATTERN =\n+            Pattern.compile(\"^[\\\\-\\\\s]*(\\\\w+[\\\\w\\\\s]+)[: ].*committed=([\\\\d]+)\\\\w+\\\\)?$\", Pattern.MULTILINE);\n+\n+    private static boolean runOnlyAfterLastIteration = true;\n+    @SuppressWarnings(\"unused\")\n+    private static Object keepReference;\n+    private static long gcTimeMillis = -1;\n+    private static long usedHeapViaHistogram = -1;\n+    private static List<Pair<String, Long>> nativeMemoryUsage;\n+    private static volatile boolean enabled = false;\n+    private static UsageTuple usageAfterIteration;\n+    private static UsageTuple usageAfterSettled;\n+\n+    /**\n+     * The benchmark needs to hand over the reference so the memory is kept after\n+     * the shutdown of the benchmark and can be measured.\n+     */\n+    public static void keepReference(Object _rootReferenceToKeep) {\n+        if (enabled) {\n+            keepReference = _rootReferenceToKeep;\n+        }\n+    }\n+\n+    public static UsageTuple getUsage() {\n+        MemoryMXBean bean = ManagementFactory.getMemoryMXBean();\n+        MemoryUsage heapUsage = bean.getHeapMemoryUsage();\n+        MemoryUsage nonHeapUsage = bean.getNonHeapMemoryUsage();\n+        return new UsageTuple(heapUsage, nonHeapUsage);\n+    }\n+\n+    /**\n+     * Called from the benchmark when the objects are still referenced to record the\n+     * used memory. Enforces a full garbage collection and records memory usage.\n+     * Waits and triggers GC again, as long as the memory is still reducing. Some workloads\n+     * needs some time until they drain queues and finish all the work.\n+     */\n+    public static void recordUsedMemory() {\n+        long t0 = System.currentTimeMillis();\n+        long usedMemorySettled;\n+        if (runSystemGC()) {\n+            usageAfterIteration = getUsage();\n+            long m2 = usageAfterIteration.getTotalUsed();\n+            do {\n+                try {\n+                    Thread.sleep(567);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTkzNTM5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#pullrequestreview-371593539", "createdAt": "2020-03-09T23:30:30Z", "commit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58c10f6fbaa7f697d9a6398989aa61737791166", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a58c10f6fbaa7f697d9a6398989aa61737791166", "committedDate": "2020-03-09T23:33:46Z", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "committedDate": "2020-03-09T23:37:51Z", "message": "Addressing comments, removed settled measurement"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc71d10def7923b34dfeb9093e1f46581dde6feb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc71d10def7923b34dfeb9093e1f46581dde6feb", "committedDate": "2020-03-06T19:13:46Z", "message": "Add JMH incredibly basic benchmark.\n\nCurrently JMH results are not ingested to anything,\nthis will change in future PRs."}, "afterCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06c178b669e7c1ba28efd6c5c7d61a93fa35a321", "committedDate": "2020-03-09T23:37:51Z", "message": "Addressing comments, removed settled measurement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTk5MDEw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#pullrequestreview-371599010", "createdAt": "2020-03-09T23:46:48Z", "commit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzo0Njo0OFrOFz9BIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoxOTozMFrOFz9kQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyMTQwOQ==", "bodyText": "Why increase the time to 60 seconds?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390021409", "createdAt": "2020-03-09T23:46:48Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCAwareServicesTest.java", "diffHunk": "@@ -59,7 +59,7 @@ void GIVEN_ipc_aware_service_WHEN_report_state_as_running_THEN_kernel_updates_st\n         kernel.context.addGlobalStateChangeListener(listener);\n \n         // waiting for main to transition to running\n-        boolean isRunning = serviceRunning.await(30, TimeUnit.SECONDS);\n+        boolean isRunning = serviceRunning.await(60, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyNDQwNg==", "bodyText": "why is netty removed?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390024406", "createdAt": "2020-03-09T23:57:32Z", "author": {"login": "fengwang666"}, "path": "pom.xml", "diffHunk": "@@ -86,11 +86,6 @@\n             <version>3.0.1u2</version>\n             <scope>provided</scope>\n         </dependency>\n-        <dependency>\n-            <groupId>io.netty</groupId>\n-            <artifactId>netty-all</artifactId>\n-            <version>4.1.44.Final</version>\n-        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAyOTk1NA==", "bodyText": "So this is measuring one data point?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390029954", "createdAt": "2020-03-10T00:17:46Z", "author": {"login": "fengwang666"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",\n+                \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n+        );\n+        kernel.launch();\n+        Thread.sleep(20000);\n+        ForcedGcMemoryProfiler.recordUsedMemory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDA4Mg==", "bodyText": "Why 60 seconds instead of default value?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390030082", "createdAt": "2020-03-10T00:18:14Z", "author": {"login": "fengwang666"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/BasicExampleBenchmark.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh;\n+\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import org.openjdk.jmh.annotations.Benchmark;\n+\n+public class BasicExampleBenchmark {\n+\n+    @Benchmark\n+    public void testMethod() throws Exception {\n+        String tdir = System.getProperty(\"user.home\")+\"/kernelTest\";\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tdir,\n+                \"-log\", \"stdout\",\n+                \"-i\", BasicExampleBenchmark.class.getResource(\"config.yaml\").toString()\n+        );\n+        kernel.launch();\n+        Thread.sleep(20000);\n+        ForcedGcMemoryProfiler.recordUsedMemory();\n+        kernel.shutdown(60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDQwMg==", "bodyText": "Is this the file containing the profile data?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#discussion_r390030402", "createdAt": "2020-03-10T00:19:30Z", "author": {"login": "fengwang666"}, "path": ".gitignore", "diffHunk": "@@ -10,3 +10,5 @@ core\n artifact_cache\n package.db\n coverage\n+*.iml\n+jmh-result.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c178b669e7c1ba28efd6c5c7d61a93fa35a321"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb060e581e711de86d8927565da46574dbce33ed", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cb060e581e711de86d8927565da46574dbce33ed", "committedDate": "2020-03-10T01:13:12Z", "message": "Addressing PR comments. Adds readme. Allows multiple calls to record"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjU1NjQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/99#pullrequestreview-371655647", "createdAt": "2020-03-10T03:09:51Z", "commit": {"oid": "cb060e581e711de86d8927565da46574dbce33ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f90229c9bafa9333239384cd22ed7dc3af0132b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7f90229c9bafa9333239384cd22ed7dc3af0132b", "committedDate": "2020-03-10T16:00:20Z", "message": "Merge branch 'master' into jmh"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2309, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}