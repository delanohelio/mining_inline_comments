{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDIwMjE1", "number": 582, "title": "Restrict loading of external plugins to cloud based recipes", "bodyText": "With this change, only recipes which are from cloud are trusted and loaded as plugins. This aims to create development friction for customers as they cannot create a local plugin recipe and load it.\nIssue #, if available:\nDescription of changes:\nChange works by calculating recipe digest when it is downloaded from cloud. This is done before persisting recipe on disk. Recipe digest is stored securely. We use config store to store it but it could be moved to secret store in the future. Before loading any external plugin, recipe digest is calculated and validated against the stored one. If the recipe is modified after its written to disk then plugin loading fails. Since the recipe contains digest for the artifacts it references, if the artifacts are modified, then we have an existing mechanism which validates artifact digests match the recipe. Therefore it is not possible to modify an existing recipe/artifact or create a new recipe which is unknown to nucleus.\nWhy is this change necessary:\n\nOur plugin interface is not final and is subject to changes with later greengrass releases. This change aims to create friction by only allowing plugins from cloud.\nA malicious user can modify existing plugin on the disk or load a new one. This change would prevent that scenario.\n\nHow was this change tested:\nUT. Ran an existing UAT to validate that cloud plugins are loaded fine.\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-29T16:53:57Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582", "merged": true, "mergeCommit": {"oid": "966322a0372c0d95447fdcda4f05e8ec3acc6c95"}, "closed": true, "closedAt": "2020-10-31T00:11:32Z", "author": {"login": "prateek-y"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXVCSgAH2gAyNTEyNDIwMjE1OmQ0NWRhODE0OTk0Y2VjZmQ0YjE4OWNhNDk0MTM1NGM3YzA0YWM4ZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXvpL2gH2gAyNTEyNDIwMjE1OjRmYzc4YTliMjFjNDRkMTA5NGE3MDRiNTBiM2I0MTBiZjAyMTY2NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d45da814994cecfd4b189ca4941354c7c04ac8e7", "committedDate": "2020-10-29T16:48:00Z", "message": "Restrict loading of external plugins to cloud based recipes\n\nWith this change, only recipes which are from cloud are trusted and\nloaded as plugins. This aims to create development friction for customers as\nthey cannot create a local plugin recipe and load it. We want to do this\nfor 2 reasons. 1. Our plugin interface is not final and is subject to changes\nwith later greengrass releases. 2. A malicious user cannot modify existing plugin\non the disk or load a new one."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5ODg3NjIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-519887620", "createdAt": "2020-10-29T17:04:15Z", "commit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNDoxNlrOHql3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzowNjoyMFrOHql8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMjU3NA==", "bodyText": "not sure where, but we must deserialize somewhere else, can you dedupe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514422574", "createdAt": "2020-10-29T17:04:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzY1OQ==", "bodyText": "Why check for null, just remove it. A node with a null value is still a node which can be removed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423659", "createdAt": "2020-10-29T17:05:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                componentIdentifier.toString());\n+        if (digestTopic.getOnce() != null) {\n+            digestTopic.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQyMzg5Nw==", "bodyText": "use find instead of lookup, then check for null on the returned topic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514423897", "createdAt": "2020-10-29T17:06:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -133,6 +140,46 @@ ComponentMetadata resolveComponentVersion(String componentName, Map<String, Requ\n         return getComponentMetadata(resolvedComponentId);\n     }\n \n+    private void storeRecipeDigestSecurely(ComponentIdentifier componentIdentifier, String recipeContent)\n+            throws PackageLoadingException {\n+        com.amazon.aws.iot.greengrass.component.common.ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\n+                            .readValue(recipeContent,\n+                                    com.amazon.aws.iot.greengrass.component.common.ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            // GG_NEEDS_REVIEW: TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeContent), e);\n+        }\n+        if (componentRecipe.getComponentType() != ComponentType.PLUGIN) {\n+            logger.atInfo().kv(COMPONENT_STR, componentIdentifier)\n+                    .log(\"Skip storing digest as component is not plugin\");\n+            return;\n+        }\n+        try {\n+            String digest = Digest.calculate(recipeContent);\n+            kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,\n+                            componentIdentifier.toString()).withValue(digest);\n+            logger.atDebug().kv(COMPONENT_STR, recipeContent).log(\"Save calculated digest: \" + digest);\n+        } catch (NoSuchAlgorithmException e) {\n+            // This should never happen as SHA-256 is mandatory for every default JVM provider\n+            throw new PackageLoadingException(\"No security provider found for message digest\", e);\n+        }\n+    }\n+\n+    private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier) {\n+        // clean up digest from store\n+        Topic digestTopic = kernel.getMain().getRuntimeConfig().lookup(Kernel.SERVICE_DIGEST_TOPIC_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTEzOTU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-519913954", "createdAt": "2020-10-29T17:34:00Z", "commit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNDowMFrOHqnF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNDowMFrOHqnF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MjcxOQ==", "bodyText": "why isn't string comparison enough given that both strings are already b64 encoded?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514442719", "createdAt": "2020-10-29T17:34:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Digest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+\n+/**\n+ * Set of methods for digest operations but with Strings.\n+ */\n+public final class Digest {\n+    // Every implementation of the Java platform is required to support SHA-256.\n+    public static final String DIGEST_ALGO = \"SHA-256\";\n+    \n+    private Digest() {\n+    }\n+\n+    /**\n+     * Calculate digest for a UTF_8 encoded string input.\n+     * @param utfInput String to calculate digest for\n+     * @return the base64 encoded digest value for the string\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     * @throws IllegalArgumentException if input is invalid\n+     */\n+    public static String calculate(String utfInput) throws NoSuchAlgorithmException {\n+        if (Utils.isEmpty(utfInput)) {\n+            throw new IllegalArgumentException(\"Invalid input to calculate digest\");\n+        }\n+        MessageDigest messageDigest = MessageDigest.getInstance(DIGEST_ALGO);\n+        return Base64.getEncoder().encodeToString(messageDigest.digest(utfInput.getBytes(StandardCharsets.UTF_8)));\n+    }\n+\n+    /**\n+     * Compare two utf8 encoded digest strings.\n+     * @param digest1 first digest to compare\n+     * @param digest2 second digest to compare\n+     * @return whether two digests are equal\n+     * @throws NoSuchAlgorithmException when no implementation for message digest is available\n+     */\n+    public static boolean isEqual(String digest1, String digest2) throws NoSuchAlgorithmException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTE2Njc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-519916678", "createdAt": "2020-10-29T17:37:04Z", "commit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNzowNVrOHqnN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzozNzowNVrOHqnN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NDc5OA==", "bodyText": "don't call new. Just use context.get(ComponentStore.class)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r514444798", "createdAt": "2020-10-29T17:37:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -128,6 +133,8 @@ public Kernel() {\n         context.put(NucleusPaths.class, nucleusPaths);\n         kernelCommandLine = new KernelCommandLine(this);\n         kernelLifecycle = new KernelLifecycle(this, kernelCommandLine, nucleusPaths);\n+        componentStore = new ComponentStore(nucleusPaths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d45da814994cecfd4b189ca4941354c7c04ac8e7"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e39e2759f5cc3eb7870231fdf4a33823f6e46870", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e39e2759f5cc3eb7870231fdf4a33823f6e46870", "committedDate": "2020-10-30T00:06:16Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6209f1c326baf1c22213b362a32f062da459fc47", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6209f1c326baf1c22213b362a32f062da459fc47", "committedDate": "2020-10-30T01:01:30Z", "message": "Merge branch 'master' into secure_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0314984898f18d970fbfb9199e705b40636063c9", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0314984898f18d970fbfb9199e705b40636063c9", "committedDate": "2020-10-30T05:56:10Z", "message": "Fix config topic to read"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d65dcf877691f1aafc84a3786f59b04b9ca146", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f5d65dcf877691f1aafc84a3786f59b04b9ca146", "committedDate": "2020-10-30T06:25:52Z", "message": "Merge branch 'master' into secure_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145f83f6f80d41699951039af8db1b62e5b8c8b1", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/145f83f6f80d41699951039af8db1b62e5b8c8b1", "committedDate": "2020-10-30T06:51:59Z", "message": "Fix log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0", "committedDate": "2020-10-30T18:18:09Z", "message": "Merge branch 'master' into secure_plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTk1Nzk1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-520995795", "createdAt": "2020-10-30T20:00:35Z", "commit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMDozNlrOHreVUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMDozNlrOHreVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0Nzc5Mg==", "bodyText": "instead of using main, let's use the nucleus name\n@shaguptashaikh any preference?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515347792", "createdAt": "2020-10-30T20:00:36Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/PluginComponentTest.java", "diffHunk": "@@ -251,6 +273,29 @@ private void setupPackageStore() throws IOException, PackagingException, URISynt\n         FileUtils.copyFile(jarFilePath.toFile(), artifactPath1_0_0.toFile());\n     }\n \n+    private void setDigestInConfig() throws IOException, URISyntaxException {\n+        Path localStoreContentPath = Paths.get(getClass().getResource(\"local_store_content\").toURI());\n+        Path recipePath = localStoreContentPath.resolve(\"recipes\");\n+        try (Stream<Path> paths = Files.walk(recipePath)) {\n+                paths.filter(Files::isRegularFile).forEach(path -> {\n+                    try {\n+                        String digest = Digest.calculate(FileUtils.readFileToString(path.toFile()));\n+                        String filename = FilenameUtils.removeExtension(path.getFileName().toString());\n+                        String componentId =\n+                                String.format(\"%s-v%s\", filename.split(\"-\")[0], filename.split(\"-\")[1]);\n+                        kernel.getConfig()\n+                                .lookupTopics(GreengrassService.SERVICES_NAMESPACE_TOPIC,\n+                                        KernelCommandLine.MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTk3OTUx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-520997951", "createdAt": "2020-10-30T20:03:55Z", "commit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMzo1NVrOHrebug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNToxNlrOHred6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTQzNA==", "bodyText": "remove this, we have a bit too much logging in locate", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349434", "createdAt": "2020-10-30T20:03:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0OTk5NQ==", "bodyText": "use findTopics otherwise this will create the topic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#discussion_r515349995", "createdAt": "2020-10-30T20:05:16Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -458,6 +460,26 @@ public GreengrassService locate(String name) throws ServiceLoadException {\n             throw new ServiceLoadException(\n                     String.format(\"Unable to find %s because %s does not exist\", name, pluginJar));\n         }\n+\n+        logger.atInfo(\"plugin-load-external\").kv(GreengrassService.SERVICE_NAME_KEY, name)\n+                .log(\"Trying to load a custom plugin\");\n+\n+\n+        Topic storedDigest = config.lookupTopics(SERVICES_NAMESPACE_TOPIC, MAIN_SERVICE_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6acc9bebd1679643bdadeeb8f39b07ddf4d7a6c0"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53d6feabb05a6692b87533d5bb570c82ac19d0a", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a53d6feabb05a6692b87533d5bb570c82ac19d0a", "committedDate": "2020-10-30T20:36:35Z", "message": "Merge branch 'master' into secure_plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19f8c0681f049078af92df6bd7419665078abaa", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f19f8c0681f049078af92df6bd7419665078abaa", "committedDate": "2020-10-30T22:25:14Z", "message": "Modify log statements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDY5NTc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-521069575", "createdAt": "2020-10-30T22:30:24Z", "commit": {"oid": "f19f8c0681f049078af92df6bd7419665078abaa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75340f341645edae640a6f98f1e6b0ac7119e7dd", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/75340f341645edae640a6f98f1e6b0ac7119e7dd", "committedDate": "2020-10-30T22:51:44Z", "message": "Merge branch 'master' into secure_plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDc1Njc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/582#pullrequestreview-521075675", "createdAt": "2020-10-30T22:52:27Z", "commit": {"oid": "f19f8c0681f049078af92df6bd7419665078abaa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc78a9b21c44d1094a704b50b3b410bf0216658", "author": {"user": {"login": "prateek-y", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4fc78a9b21c44d1094a704b50b3b410bf0216658", "committedDate": "2020-10-30T23:48:01Z", "message": "Merge branch 'master' into secure_plugin"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2856, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}