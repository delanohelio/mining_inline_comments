{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjAyMjUy", "number": 741, "title": "local deployment bug fix", "bodyText": "Local deployment happen in 2 steps:\n\nUpdateRecipesAndArtifacts copy the recipes and artifacts to local store\nSchedule the local deployment\n\nBug:\nIf there is an ongoing deployment when a local deployment is being scheduled, when the ongoing deployment finishes it cleans up un-used recipes/artifacts. This might remove the recipes/artifacts required for the local deployment.\nFix: Move the copy recipes/artifacts step into deployment service such that the copy happens before the local deployment is being processed.\nCorresponding changes in CLI : aws-greengrass/aws-greengrass-cli#88\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n[ X] Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-12-01T22:03:26Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741", "merged": true, "mergeCommit": {"oid": "cec5cfcbb4da22e71a83dfa5c88d7d3785e85659"}, "closed": true, "closedAt": "2020-12-02T18:12:42Z", "author": {"login": "fahadmohammed01"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiBTl_AH2gAyNTMwNjAyMjUyOmVhNDRmYzNmNTkyODZlMjVjZTNmZTAzZDY2MjcxY2YyMzE4NWM3Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiSXMSgFqTU0MzA5NDk1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ea44fc3f59286e25ce3fe03d66271cf23185c777", "committedDate": "2020-12-01T22:01:58Z", "message": "local deployment bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzQxODkw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-542341890", "createdAt": "2020-12-01T22:15:21Z", "commit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxNToyMVrOH9B9bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoyMjoxNVrOH9CLYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzI5Mw==", "bodyText": "What is the logic behind special casing an empty file? I'm guessing some intent here, but intent is not described. If there isn't a legitimate reason to do this, we should treat this as an error instead as it would indicate customer made a mistake.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533757293", "createdAt": "2020-12-01T22:15:21Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzY4Ng==", "bodyText": "Is the assumption here to validate?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533757686", "createdAt": "2020-12-01T22:16:08Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                continue;\n+            }\n+\n+            try {\n+                switch (ext.toLowerCase()) {\n+                    case \"yaml\":\n+                    case \"yml\":\n+                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODQ1MA==", "bodyText": "Why is this neither logged nor an error?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533758450", "createdAt": "2020-12-01T22:17:36Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                continue;\n+            }\n+\n+            try {\n+                switch (ext.toLowerCase()) {\n+                    case \"yaml\":\n+                    case \"yml\":\n+                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    case \"json\":\n+                        recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    default:\n+                        break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODk1Mg==", "bodyText": "There's multiple code paths to the same effect - maybe empty file should log here. But is this really Info level? If only recipe files expected in that directory, error. Otherwise... comment comment comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533758952", "createdAt": "2020-12-01T22:18:37Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                continue;\n+            }\n+\n+            try {\n+                switch (ext.toLowerCase()) {\n+                    case \"yaml\":\n+                    case \"yml\":\n+                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    case \"json\":\n+                        recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (IOException e) {\n+                // Throw on error so that the user will receive this message and we will stop the deployment.\n+                // This is to fail fast while providing actionable feedback.\n+                throw new IOException(\n+                        String.format(\"Unable to parse %s as a recipe due to: %s\", r.toString(), e.getMessage()),\n+                        e);\n+            }\n+            if (recipe == null) {\n+                logger.atInfo().log(\"Skipping file {} because it was not recognized as a recipe\", r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1OTQ1Ng==", "bodyText": "Why YAML, not JSON? We should be using JSON for intermediate storage due to issues with YAML (truncated YAML files are valid files). I thought we had decided this based on Lore review.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533759456", "createdAt": "2020-12-01T22:19:36Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                continue;\n+            }\n+\n+            try {\n+                switch (ext.toLowerCase()) {\n+                    case \"yaml\":\n+                    case \"yml\":\n+                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    case \"json\":\n+                        recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (IOException e) {\n+                // Throw on error so that the user will receive this message and we will stop the deployment.\n+                // This is to fail fast while providing actionable feedback.\n+                throw new IOException(\n+                        String.format(\"Unable to parse %s as a recipe due to: %s\", r.toString(), e.getMessage()),\n+                        e);\n+            }\n+            if (recipe == null) {\n+                logger.atInfo().log(\"Skipping file {} because it was not recognized as a recipe\", r);\n+                continue;\n+            }\n+\n+            // Write the recipe as YAML with the proper filename into the store\n+            ComponentIdentifier componentIdentifier =\n+                    new ComponentIdentifier(recipe.getComponentName(), recipe.getComponentVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2MDExNQ==", "bodyText": "Do we log two errors if the file is bad?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533760115", "createdAt": "2020-12-01T22:20:46Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n+                continue;\n+            }\n+\n+            try {\n+                switch (ext.toLowerCase()) {\n+                    case \"yaml\":\n+                    case \"yml\":\n+                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    case \"json\":\n+                        recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            } catch (IOException e) {\n+                // Throw on error so that the user will receive this message and we will stop the deployment.\n+                // This is to fail fast while providing actionable feedback.\n+                throw new IOException(\n+                        String.format(\"Unable to parse %s as a recipe due to: %s\", r.toString(), e.getMessage()),\n+                        e);\n+            }\n+            if (recipe == null) {\n+                logger.atInfo().log(\"Skipping file {} because it was not recognized as a recipe\", r);\n+                continue;\n+            }\n+\n+            // Write the recipe as YAML with the proper filename into the store\n+            ComponentIdentifier componentIdentifier =\n+                    new ComponentIdentifier(recipe.getComponentName(), recipe.getComponentVersion());\n+\n+            try {\n+                componentStore.savePackageRecipe(componentIdentifier,\n+                        getRecipeSerializer().writeValueAsString(recipe));\n+            } catch (PackageLoadingException e) {\n+                // Throw on error so that the user will receive this message and we will stop the deployment.\n+                // This is to fail fast while providing actionable feedback.\n+                throw new IOException(String.format(\"Unable to copy recipe for '%s' to component store due to: %s\",\n+                        componentIdentifier.toString(), e.getMessage()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2MDg2Ng==", "bodyText": "Is this supposed to be an immutable class? All these fields should be final else we may have threading memory access issues.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533760866", "createdAt": "2020-12-01T22:22:15Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/model/LocalOverrideRequest.java", "diffHunk": "@@ -37,4 +37,8 @@\n     Map<String, ConfigurationUpdateOperation> configurationUpdate;\n \n     Map<String, RunWithInfo> componentToRunWithInfo;\n+\n+    String recipeDirectoryPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzkwMTYz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-542390163", "createdAt": "2020-12-01T23:46:45Z", "commit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebf8b15183b79b7f2a93d3c08c93a138bae5eea7", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ebf8b15183b79b7f2a93d3c08c93a138bae5eea7", "committedDate": "2020-12-01T23:54:14Z", "message": "added comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/adb1a466da13aa431eb56a42f8b80aaf0790ddcb", "committedDate": "2020-12-01T23:55:28Z", "message": "Merge branch 'master' into local-deployment-bug-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDA2NTYz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-542406563", "createdAt": "2020-12-02T00:27:05Z", "commit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDoyNzowNVrOH9FVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0NjoyNlrOH9Fwfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxMjY0Mg==", "bodyText": "is it a valid request to have an empty recipe directory path and empty artifacts path?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533812642", "createdAt": "2020-12-02T00:27:05Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,87 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxMzE0MA==", "bodyText": "I think in that case then, we only care about empty files if the extension is one of the \"yaml/yml/json\" then", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533813140", "createdAt": "2020-12-02T00:28:34Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,84 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);\n+        }\n+    }\n+\n+\n+    private void copyRecipesToComponentStore(Path from) throws IOException {\n+        for (Path r : Files.walk(from).collect(Collectors.toList())) {\n+            String ext = Utils.extension(r.toString());\n+            ComponentRecipe recipe = null;\n+            if (r.toFile().length() == 0) {\n+                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzI5Mw=="}, "originalCommit": {"oid": "ea44fc3f59286e25ce3fe03d66271cf23185c777"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxNzM4Nw==", "bodyText": "why do you populate the messages for IOExceptions, but not here?\nIt seems like you want to return a \"fancy\" exception so you send it to the deployment status keeper.\nWhy not have a custom exception that does this for you instead of rebuilding messages in IOException?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533817387", "createdAt": "2020-12-02T00:40:15Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,87 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxOTUxOA==", "bodyText": "For the case of a local deployment, do customers provide the job document?\nShould this say 'Unable to parse the deployment' instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r533819518", "createdAt": "2020-12-02T00:46:26Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -444,6 +472,87 @@ private void createNewDeployment(Deployment deployment) {\n                                            new AtomicInteger(1), deployment.getDeploymentDocumentObj(), cancellable);\n     }\n \n+    @SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n+    private void copyRecipesAndArtifacts(Deployment deployment) throws InvalidRequestException, IOException {\n+        try {\n+            LocalOverrideRequest localOverrideRequest = SerializerFactory.getFailSafeJsonObjectMapper()\n+                    .readValue(deployment.getDeploymentDocument(), LocalOverrideRequest.class);\n+            if (!Utils.isEmpty(localOverrideRequest.getRecipeDirectoryPath())) {\n+                Path recipeDirectoryPath = Paths.get(localOverrideRequest.getRecipeDirectoryPath());\n+                copyRecipesToComponentStore(recipeDirectoryPath);\n+\n+            }\n+\n+            if (!Utils.isEmpty(localOverrideRequest.getArtifactsDirectoryPath())) {\n+                Path kernelArtifactsDirectoryPath = kernel.getNucleusPaths().componentStorePath()\n+                        .resolve(ComponentStore.ARTIFACT_DIRECTORY);\n+                Path artifactsDirectoryPath = Paths.get(localOverrideRequest.getArtifactsDirectoryPath());\n+                try {\n+                    Utils.copyFolderRecursively(artifactsDirectoryPath, kernelArtifactsDirectoryPath,\n+                            StandardCopyOption.REPLACE_EXISTING);\n+                } catch (IOException e) {\n+                    throw new IOException(String.format(\"Unable to copy artifacts from  %s due to: %s\",\n+                            artifactsDirectoryPath.toString(), e.getMessage()), e);\n+                }\n+            }\n+        } catch (JsonProcessingException e) {\n+            throw new InvalidRequestException(\"Unable to parse the job document\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxNzM4Nw=="}, "originalCommit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNDIxMDY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-542421066", "createdAt": "2020-12-02T01:04:59Z", "commit": {"oid": "adb1a466da13aa431eb56a42f8b80aaf0790ddcb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c220e5d01f7d79d43aa6bb2150030145807a7b3", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8c220e5d01f7d79d43aa6bb2150030145807a7b3", "committedDate": "2020-12-02T01:16:59Z", "message": "updated log level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce136cf6c29ed101b52da32a5f62039952291f40", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ce136cf6c29ed101b52da32a5f62039952291f40", "committedDate": "2020-12-02T04:51:39Z", "message": "Merge branch 'master' into local-deployment-bug-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be2e7931b036a778eb6e2b65457004169526d968", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/be2e7931b036a778eb6e2b65457004169526d968", "committedDate": "2020-12-02T07:32:43Z", "message": "addressed comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTgxOTE3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-542981917", "createdAt": "2020-12-02T15:56:10Z", "commit": {"oid": "be2e7931b036a778eb6e2b65457004169526d968"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTo1NjoxMFrOH9h14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTo1NjoxMFrOH9h14A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI3OTY0OA==", "bodyText": "this is unnecessary since you already check above - the length should not be 0 here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#discussion_r534279648", "createdAt": "2020-12-02T15:56:10Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -505,32 +505,31 @@ private void copyRecipesToComponentStore(Path from) throws IOException {\n         for (Path r : Files.walk(from).collect(Collectors.toList())) {\n             String ext = Utils.extension(r.toString());\n             ComponentRecipe recipe = null;\n-            if (r.toFile().length() == 0) {\n-                logger.atInfo().log(\"Skipping recipe file {} because it is empty\", r);\n-                continue;\n-            }\n \n             //reading it in as a recipe, so that will fail if it is malformed with a good error.\n             //The second reason to do this is to parse the name and version so that we can properly name\n             //the file when writing it into the local recipe store.\n             try {\n-                switch (ext.toLowerCase()) {\n-                    case \"yaml\":\n-                    case \"yml\":\n-                        recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n-                        break;\n-                    case \"json\":\n-                        recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n-                        break;\n-                    default:\n-                        break;\n+                if (r.toFile().length() > 0) {\n+                    switch (ext.toLowerCase()) {\n+                        case \"yaml\":\n+                        case \"yml\":\n+                            recipe = getRecipeSerializer().readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        case \"json\":\n+                            recipe = getRecipeSerializerJson().readValue(r.toFile(), ComponentRecipe.class);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n                 }\n             } catch (IOException e) {\n                 // Throw on error so that the user will receive this message and we will stop the deployment.\n                 // This is to fail fast while providing actionable feedback.\n-                throw new IOException(\n-                        String.format(\"Unable to parse %s as a recipe due to: %s\", r.toString(), e.getMessage()),\n-                        e);\n+                if (r.toFile().length() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be2e7931b036a778eb6e2b65457004169526d968"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d738c590eb78c988c54d69394dc654bdad36db", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f5d738c590eb78c988c54d69394dc654bdad36db", "committedDate": "2020-12-02T17:28:07Z", "message": "removed reduntant check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5c22721792917550a3123f78e35aaf195df311", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2b5c22721792917550a3123f78e35aaf195df311", "committedDate": "2020-12-02T17:34:24Z", "message": "Merge branch 'master' into local-deployment-bug-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDg5MzEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-543089311", "createdAt": "2020-12-02T17:47:30Z", "commit": {"oid": "2b5c22721792917550a3123f78e35aaf195df311"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c1af116c4f77b86832da6d6dd624674d65a895e", "author": {"user": {"login": "fahadmohammed01", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3c1af116c4f77b86832da6d6dd624674d65a895e", "committedDate": "2020-12-02T17:48:45Z", "message": "Merge branch 'master' into local-deployment-bug-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDk0OTU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/741#pullrequestreview-543094955", "createdAt": "2020-12-02T17:54:17Z", "commit": {"oid": "3c1af116c4f77b86832da6d6dd624674d65a895e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2508, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}