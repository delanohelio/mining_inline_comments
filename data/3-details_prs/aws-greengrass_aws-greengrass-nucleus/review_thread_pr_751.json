{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNTY4MDAx", "number": 751, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NjoyNFrOFAB65Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoxNlrOFCJWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTc1NzgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NjoyNFrOH-E3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1NjoyNFrOH-E3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1MzUyOA==", "bodyText": "do you want to pull this out so it can be reused?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534853528", "createdAt": "2020-12-03T07:56:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -157,30 +161,50 @@ private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier)\n                 .find(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString());\n         if (digestTopic != null) {\n             digestTopic.remove();\n-            logger.atInfo().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n         }\n     }\n \n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n-                                                          Map<String, Requirement> versionRequirements,\n-                                                          ComponentIdentifier localCandidate)\n-            throws PackagingException {\n+            Map<String, Requirement> versionRequirements,\n+            ComponentIdentifier localCandidate)\n+            throws PackagingException, InterruptedException {\n         ResolvedComponentVersion resolvedComponentVersion;\n-        try {\n-            resolvedComponentVersion = componentServiceHelper\n-                    .resolveComponentVersion(componentName, localCandidate == null ? null : localCandidate.getVersion(),\n-                            versionRequirements);\n-        } catch (ComponentVersionNegotiationException | NoAvailableComponentVersionException e) {\n-            logger.atInfo().setCause(e).kv(\"componentName\", componentName).kv(\"versionRequirement\", versionRequirements)\n-                    .kv(\"localVersion\", localCandidate)\n-                    .log(\"Failed to negotiate version with cloud due to a exception and trying to fall back \"\n-                            + \"to use the available local version\");\n-            if (localCandidate != null) {\n+\n+        if (localCandidate == null) {\n+            try {\n+                RetryUtils.RetryConfig clientExceptionRetryConfig =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTc2MjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo1Njo0OVrOH-E6mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODowNzowOFrOH_cGQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1NDI5Nw==", "bodyText": "infinite retries? Maybe, but I'd want to be sure of what types of error fall under SdkClientException", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534854297", "createdAt": "2020-12-03T07:56:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -157,30 +161,50 @@ private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier)\n                 .find(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString());\n         if (digestTopic != null) {\n             digestTopic.remove();\n-            logger.atInfo().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n         }\n     }\n \n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n-                                                          Map<String, Requirement> versionRequirements,\n-                                                          ComponentIdentifier localCandidate)\n-            throws PackagingException {\n+            Map<String, Requirement> versionRequirements,\n+            ComponentIdentifier localCandidate)\n+            throws PackagingException, InterruptedException {\n         ResolvedComponentVersion resolvedComponentVersion;\n-        try {\n-            resolvedComponentVersion = componentServiceHelper\n-                    .resolveComponentVersion(componentName, localCandidate == null ? null : localCandidate.getVersion(),\n-                            versionRequirements);\n-        } catch (ComponentVersionNegotiationException | NoAvailableComponentVersionException e) {\n-            logger.atInfo().setCause(e).kv(\"componentName\", componentName).kv(\"versionRequirement\", versionRequirements)\n-                    .kv(\"localVersion\", localCandidate)\n-                    .log(\"Failed to negotiate version with cloud due to a exception and trying to fall back \"\n-                            + \"to use the available local version\");\n-            if (localCandidate != null) {\n+\n+        if (localCandidate == null) {\n+            try {\n+                RetryUtils.RetryConfig clientExceptionRetryConfig =\n+                        RetryUtils.RetryConfig.builder().initialRetryInterval(Duration.ofMinutes(1))\n+                                .maxRetryInterval(Duration.ofMinutes(1)).maxAttempt(Integer.MAX_VALUE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4MjY4OA==", "bodyText": "From the java doc:\nBase type for all client exceptions thrown by the SDK. This exception is thrown when service could not be contacted for a response, or when client is unable to parse the response from service. All exceptions that extend SdkClientException are assumed to be not retryable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536282688", "createdAt": "2020-12-04T18:07:08Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -157,30 +161,50 @@ private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier)\n                 .find(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString());\n         if (digestTopic != null) {\n             digestTopic.remove();\n-            logger.atInfo().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n         }\n     }\n \n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n-                                                          Map<String, Requirement> versionRequirements,\n-                                                          ComponentIdentifier localCandidate)\n-            throws PackagingException {\n+            Map<String, Requirement> versionRequirements,\n+            ComponentIdentifier localCandidate)\n+            throws PackagingException, InterruptedException {\n         ResolvedComponentVersion resolvedComponentVersion;\n-        try {\n-            resolvedComponentVersion = componentServiceHelper\n-                    .resolveComponentVersion(componentName, localCandidate == null ? null : localCandidate.getVersion(),\n-                            versionRequirements);\n-        } catch (ComponentVersionNegotiationException | NoAvailableComponentVersionException e) {\n-            logger.atInfo().setCause(e).kv(\"componentName\", componentName).kv(\"versionRequirement\", versionRequirements)\n-                    .kv(\"localVersion\", localCandidate)\n-                    .log(\"Failed to negotiate version with cloud due to a exception and trying to fall back \"\n-                            + \"to use the available local version\");\n-            if (localCandidate != null) {\n+\n+        if (localCandidate == null) {\n+            try {\n+                RetryUtils.RetryConfig clientExceptionRetryConfig =\n+                        RetryUtils.RetryConfig.builder().initialRetryInterval(Duration.ofMinutes(1))\n+                                .maxRetryInterval(Duration.ofMinutes(1)).maxAttempt(Integer.MAX_VALUE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg1NDI5Nw=="}, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTg2MjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNzowMVrOH-GAtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNzowMVrOH-GAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg3MjI0NQ==", "bodyText": "cache the size. This gets called multiple times.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534872245", "createdAt": "2020-12-03T08:07:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,115 +58,138 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n-        if (artifactSize != null) {\n-            return artifactSize;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTg3MDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNzo0NlrOH-GGvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowNzo0NlrOH-GGvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg3Mzc4OA==", "bodyText": "space after period", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534873788", "createdAt": "2020-12-03T08:07:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,115 +58,138 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n-        if (artifactSize != null) {\n-            return artifactSize;\n+        try {\n+            return RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n         }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        }\n     }\n \n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Fail to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch.\" + \"Expected artifact size %d. HTTP contentLength %d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTg3MzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowODowM1rOH-GI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowODowM1rOH-GI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg3NDMzNg==", "bodyText": "space after period", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534874336", "createdAt": "2020-12-03T08:08:03Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,115 +58,138 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n-        if (artifactSize != null) {\n-            return artifactSize;\n+        try {\n+            return RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n         }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n+            }\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        }\n     }\n \n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Fail to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch.\" + \"Expected artifact size %d. HTTP contentLength %d\",\n+                                    rangeEnd, httpConn.getContentLengthLong());\n+                            throw new PackageDownloadException(errMsg);\n+                        }\n+                        // 200 means server doesn't recognize the Range header and returns all contents.\n+                        // try to discard the offset number of bytes.\n+                        InputStream inputStream = httpConn.getInputStream();\n+                        long byteSkipped = inputStream.skip(rangeStart);\n+                        // If number of bytes skipped is less than declared, throw error.\n+                        if (byteSkipped != rangeStart) {\n+                            throw new PackageDownloadException(getErrorString(\"Reach the end of the stream\"));\n+                        }\n+                        long downloaded = download(inputStream, messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Fail to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else {\n+                        throw new PackageDownloadException(getErrorString(\n+                                \"Unable to download greengrass artifact. \" + \"HTTP Error: \" + responseCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTg4NzQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowOToyMVrOH-GSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowOToyMVrOH-GSZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg3Njc3NQ==", "bodyText": "Failed to read", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r534876775", "createdAt": "2020-12-03T08:09:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -57,44 +64,63 @@ protected String getArtifactFilename() {\n         return pathStrings[pathStrings.length - 1];\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n-            throws PackageDownloadException, InterruptedException {\n+            throws InterruptedException, PackageDownloadException {\n         String bucket = s3ObjectPath.bucket;\n         String key = s3ObjectPath.key;\n \n         S3Client regionClient = getRegionClientForBucket(bucket);\n         GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucket).key(key)\n                 .range(String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd)).build();\n-        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket())\n-                .kv(\"s3-key\", getObjectRequest.key())\n+        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket()).kv(\"s3-key\", getObjectRequest.key())\n                 .kv(\"range\", getObjectRequest.range()).log(\"Getting s3 object request\");\n \n-        return runWithRetry(\"download-S3-artifact\", MAX_RETRY,() -> {\n-            try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n-                return download(inputStream, messageDigest);\n-            } catch (SdkClientException | S3Exception e) {\n-                String errorMsg = getErrorString(\"Failed to get artifact object from S3\");\n-                throw new PackageDownloadException(errorMsg, e);\n+        try {\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n+                    long downloaded = download(inputStream, messageDigest);\n+                    if (downloaded == 0) {\n+                        // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                        // Therefore throw IOException to trigger the retry logic.\n+                        throw new IOException(\"Fail to read any byte from the inputStream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8d59eede294b3703e997427f1e03d4399f94bb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgwNzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNToxN1rOH_Z2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNToxN1rOH_Z2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0NTg5Mg==", "bodyText": "NIT: remove \" + \"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536245892", "createdAt": "2020-12-04T17:05:17Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,141 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch. \" + \"Expected artifact size %d. HTTP contentLength %d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgyNzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMjoxOVrOH_aDUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMjoxOVrOH_aDUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTE2OQ==", "bodyText": "why do some exceptions use getErrorString and some don't? This looks identical to line 76 but one without using getErrorString", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536249169", "createdAt": "2020-12-04T17:12:19Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,141 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgzMDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzowMFrOH_aEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzowMFrOH_aEpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTUxMQ==", "bodyText": "nit: formatting", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536249511", "createdAt": "2020-12-04T17:13:00Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,141 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch. \" + \"Expected artifact size %d. HTTP contentLength %d\",\n+                                    rangeEnd, httpConn.getContentLengthLong());\n+                            throw new PackageDownloadException(errMsg);\n+                        }\n+                        // 200 means server doesn't recognize the Range header and returns all contents.\n+                        // try to discard the offset number of bytes.\n+                        InputStream inputStream = httpConn.getInputStream();\n+                        long byteSkipped = inputStream.skip(rangeStart);\n+                        // If number of bytes skipped is less than declared, throw error.\n+                        if (byteSkipped != rangeStart) {\n+                            throw new PackageDownloadException(getErrorString(\"Reach the end of the stream\"));\n+                        }\n+                        long downloaded = download(inputStream, messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else {\n+                        throw new PackageDownloadException(getErrorString(\n+                                \"Unable to download Greengrass artifact. \" + \"HTTP Error: \" + responseCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgzMDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzoxMlrOH_aFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzoxMlrOH_aFEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTYxNg==", "bodyText": "nit: stream", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536249616", "createdAt": "2020-12-04T17:13:12Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,141 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch. \" + \"Expected artifact size %d. HTTP contentLength %d\",\n+                                    rangeEnd, httpConn.getContentLengthLong());\n+                            throw new PackageDownloadException(errMsg);\n+                        }\n+                        // 200 means server doesn't recognize the Range header and returns all contents.\n+                        // try to discard the offset number of bytes.\n+                        InputStream inputStream = httpConn.getInputStream();\n+                        long byteSkipped = inputStream.skip(rangeStart);\n+                        // If number of bytes skipped is less than declared, throw error.\n+                        if (byteSkipped != rangeStart) {\n+                            throw new PackageDownloadException(getErrorString(\"Reach the end of the stream\"));\n+                        }\n+                        long downloaded = download(inputStream, messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgzMTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzozMFrOH_aFvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxMzozMFrOH_aFvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTc4OA==", "bodyText": "nit: stream", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536249788", "createdAt": "2020-12-04T17:13:30Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,141 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(\"Failed to get download size\");\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\"Failed to get download size. HTTP response: \" + responseCode);\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDg0NDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxNjo1MlrOH_aNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODowMDowMlrOH_b1ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTc1MQ==", "bodyText": "you have this in 3 places. Should download(inputStream, messageDigest); just throw the exception itself so you don't have to do it everywhere you call it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536251751", "createdAt": "2020-12-04T17:16:52Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -57,44 +64,63 @@ protected String getArtifactFilename() {\n         return pathStrings[pathStrings.length - 1];\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n-            throws PackageDownloadException, InterruptedException {\n+            throws InterruptedException, PackageDownloadException {\n         String bucket = s3ObjectPath.bucket;\n         String key = s3ObjectPath.key;\n \n         S3Client regionClient = getRegionClientForBucket(bucket);\n         GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucket).key(key)\n                 .range(String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd)).build();\n-        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket())\n-                .kv(\"s3-key\", getObjectRequest.key())\n+        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket()).kv(\"s3-key\", getObjectRequest.key())\n                 .kv(\"range\", getObjectRequest.range()).log(\"Getting s3 object request\");\n \n-        return runWithRetry(\"download-S3-artifact\", MAX_RETRY,() -> {\n-            try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n-                return download(inputStream, messageDigest);\n-            } catch (SdkClientException | S3Exception e) {\n-                String errorMsg = getErrorString(\"Failed to get artifact object from S3\");\n-                throw new PackageDownloadException(errorMsg, e);\n+        try {\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n+                    long downloaded = download(inputStream, messageDigest);\n+                    if (downloaded == 0) {\n+                        // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                        // Therefore throw IOException to trigger the retry logic.\n+                        throw new IOException(\"Failed to read any byte from the inputStream\");\n+                    } else {\n+                        return downloaded;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI3ODM3Mw==", "bodyText": "download(inputStream, messageDigest) can succeed partially and the caller needs to know how many bytes has been read successfully before the exception. That's why it's a bit awkward.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536278373", "createdAt": "2020-12-04T18:00:02Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -57,44 +64,63 @@ protected String getArtifactFilename() {\n         return pathStrings[pathStrings.length - 1];\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n-            throws PackageDownloadException, InterruptedException {\n+            throws InterruptedException, PackageDownloadException {\n         String bucket = s3ObjectPath.bucket;\n         String key = s3ObjectPath.key;\n \n         S3Client regionClient = getRegionClientForBucket(bucket);\n         GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucket).key(key)\n                 .range(String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd)).build();\n-        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket())\n-                .kv(\"s3-key\", getObjectRequest.key())\n+        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket()).kv(\"s3-key\", getObjectRequest.key())\n                 .kv(\"range\", getObjectRequest.range()).log(\"Getting s3 object request\");\n \n-        return runWithRetry(\"download-S3-artifact\", MAX_RETRY,() -> {\n-            try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n-                return download(inputStream, messageDigest);\n-            } catch (SdkClientException | S3Exception e) {\n-                String errorMsg = getErrorString(\"Failed to get artifact object from S3\");\n-                throw new PackageDownloadException(errorMsg, e);\n+        try {\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n+                    long downloaded = download(inputStream, messageDigest);\n+                    if (downloaded == 0) {\n+                        // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                        // Therefore throw IOException to trigger the retry logic.\n+                        throw new IOException(\"Failed to read any byte from the inputStream\");\n+                    } else {\n+                        return downloaded;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTc1MQ=="}, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDg3NDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoyNDozN1rOH_afxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoyNDozN1rOH_afxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1NjQ1NA==", "bodyText": "nit: break\nor can you do:\nretryable = retryConfig.retryableExceptions.stream().anyMatch(c -> c.isInstance(e))\ncan retryable be local to this catch block? I don't see it being used outside of here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536256454", "createdAt": "2020-12-04T17:24:37Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+public class RetryUtils {\n+\n+    // Need this to make spotbug check happy\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Run a task with retry. Only exceptions in the retryable exception list are retried. Stop the retry when\n+     * interrupted.\n+     *\n+     * @param retryConfig     retry configuration\n+     * @param task            task to run\n+     * @param taskDescription task description\n+     * @param logger          logger\n+     * @param <T>             return type\n+     * @return return value\n+     * @throws Exception Exception\n+     */\n+    @SuppressWarnings({\"PMD.SignatureDeclareThrowsException\", \"PMD.AvoidCatchingGenericException\",\n+            \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public static <T> T runWithRetry(RetryConfig retryConfig, CrashableSupplier<T, Exception> task,\n+            String taskDescription, Logger logger) throws Exception {\n+        long retryInterval = retryConfig.getInitialRetryInterval().toMillis();\n+        int attempt = 1;\n+        Exception lastException = null;\n+        boolean retryable = false;\n+        while (attempt <= retryConfig.maxAttempt) {\n+            if (Thread.currentThread().isInterrupted()) {\n+                throw new InterruptedException(taskDescription + \" task is interrupted\");\n+            }\n+            try {\n+                return task.apply();\n+            } catch (Exception e) {\n+                if (e instanceof InterruptedException) {\n+                    throw e;\n+                }\n+\n+                for (Class retryableException : retryConfig.retryableExceptions) {\n+                    if (retryableException.isInstance(e)) {\n+                        retryable = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4210e74143e77bf5378a4e0976cf13e6f57da4b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQ4NzAzOnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowMDozOFrOH_gC4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo0Mjo0OVrOH_jCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0NzM2Mw==", "bodyText": "Can we add back SemverException? new Semver() can throw this error. compVersion is parsed from file names so it may not be reliable", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536347363", "createdAt": "2020-12-04T20:00:38Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -417,13 +438,14 @@ public void cleanupStaleVersions() throws PackageLoadingException {\n                     ComponentIdentifier identifier = new ComponentIdentifier(compName, new Semver(compVersion));\n                     removeRecipeDigestIfExists(identifier);\n                     componentStore.deleteComponent(identifier);\n-                } catch (SemverException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5NjQ4MQ==", "bodyText": "Thanks! I didn't know SemverException is an unchecked exception.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536396481", "createdAt": "2020-12-04T21:42:49Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -417,13 +438,14 @@ public void cleanupStaleVersions() throws PackageLoadingException {\n                     ComponentIdentifier identifier = new ComponentIdentifier(compName, new Semver(compVersion));\n                     removeRecipeDigestIfExists(identifier);\n                     componentStore.deleteComponent(identifier);\n-                } catch (SemverException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0NzM2Mw=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTQ5NzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowMzo1MFrOH_gJNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozNzowMlrOH_i4hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0ODk4Mw==", "bodyText": "I'm yet to read logic in RetryUtils but resolveComponentVersion wraps SdkClientException into a ComponentVersionNegotiationException. Need to make sure this retry logic works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536348983", "createdAt": "2020-12-04T20:03:50Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -157,30 +165,45 @@ private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier)\n                 .find(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString());\n         if (digestTopic != null) {\n             digestTopic.remove();\n-            logger.atInfo().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n         }\n     }\n \n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n-                                                          Map<String, Requirement> versionRequirements,\n-                                                          ComponentIdentifier localCandidate)\n-            throws PackagingException {\n+            Map<String, Requirement> versionRequirements,\n+            ComponentIdentifier localCandidate)\n+            throws PackagingException, InterruptedException {\n         ResolvedComponentVersion resolvedComponentVersion;\n-        try {\n-            resolvedComponentVersion = componentServiceHelper\n-                    .resolveComponentVersion(componentName, localCandidate == null ? null : localCandidate.getVersion(),\n-                            versionRequirements);\n-        } catch (ComponentVersionNegotiationException | NoAvailableComponentVersionException e) {\n-            logger.atInfo().setCause(e).kv(\"componentName\", componentName).kv(\"versionRequirement\", versionRequirements)\n-                    .kv(\"localVersion\", localCandidate)\n-                    .log(\"Failed to negotiate version with cloud due to a exception and trying to fall back \"\n-                            + \"to use the available local version\");\n-            if (localCandidate != null) {\n+\n+        if (localCandidate == null) {\n+            try {\n+                resolvedComponentVersion = RetryUtils.runWithRetry(clientExceptionRetryConfig,\n+                        () -> componentServiceHelper.resolveComponentVersion(componentName, null, versionRequirements),\n+                        \"resolve-component-version\", logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5Mzg2Mw==", "bodyText": "Good catch.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536393863", "createdAt": "2020-12-04T21:37:02Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -157,30 +165,45 @@ private void removeRecipeDigestIfExists(ComponentIdentifier componentIdentifier)\n                 .find(Kernel.SERVICE_DIGEST_TOPIC_KEY, componentIdentifier.toString());\n         if (digestTopic != null) {\n             digestTopic.remove();\n-            logger.atInfo().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n+            logger.atDebug().kv(COMPONENT_STR, componentIdentifier).log(\"Remove digest from store\");\n         }\n     }\n \n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     private ComponentIdentifier negotiateVersionWithCloud(String componentName,\n-                                                          Map<String, Requirement> versionRequirements,\n-                                                          ComponentIdentifier localCandidate)\n-            throws PackagingException {\n+            Map<String, Requirement> versionRequirements,\n+            ComponentIdentifier localCandidate)\n+            throws PackagingException, InterruptedException {\n         ResolvedComponentVersion resolvedComponentVersion;\n-        try {\n-            resolvedComponentVersion = componentServiceHelper\n-                    .resolveComponentVersion(componentName, localCandidate == null ? null : localCandidate.getVersion(),\n-                            versionRequirements);\n-        } catch (ComponentVersionNegotiationException | NoAvailableComponentVersionException e) {\n-            logger.atInfo().setCause(e).kv(\"componentName\", componentName).kv(\"versionRequirement\", versionRequirements)\n-                    .kv(\"localVersion\", localCandidate)\n-                    .log(\"Failed to negotiate version with cloud due to a exception and trying to fall back \"\n-                            + \"to use the available local version\");\n-            if (localCandidate != null) {\n+\n+        if (localCandidate == null) {\n+            try {\n+                resolvedComponentVersion = RetryUtils.runWithRetry(clientExceptionRetryConfig,\n+                        () -> componentServiceHelper.resolveComponentVersion(componentName, null, versionRequirements),\n+                        \"resolve-component-version\", logger);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0ODk4Mw=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUwODg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowNjo1NVrOH_gPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowMDoxNFrOH_jydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MDYxNw==", "bodyText": "Does the 2nd PackageDownloadException need to be retried? depending on response code?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536350617", "createdAt": "2020-12-04T20:06:55Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(getErrorString(\"Failed to get download size\"));\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\n+                        getErrorString(\"Failed to get download size. HTTP response: \" + responseCode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwODY5Mg==", "bodyText": "hmmm....I decided to put it off for now. It's a bit convoluted to handle the different HTTP response codes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536408692", "createdAt": "2020-12-04T22:00:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(getErrorString(\"Failed to get download size\"));\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\n+                        getErrorString(\"Failed to get download size. HTTP response: \" + responseCode));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MDYxNw=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUxNDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowODo1MVrOH_gTFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjozMzozM1rOH_krOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MTUxMQ==", "bodyText": "same. SdkClientException is wrapped into PackageDownloadException", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536351511", "createdAt": "2020-12-04T20:08:51Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwMDU0Ng==", "bodyText": "Can you point me to the code? I think I already handled it correctly. The SdkClientException is only wrapped after retry.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536400546", "createdAt": "2020-12-04T21:50:18Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MTUxMQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzIyNg==", "bodyText": "You're right. I missed that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536423226", "createdAt": "2020-12-04T22:33:33Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MTUxMQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUzNzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNToxM1rOH_gf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjowMjo0N1rOH_j2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDc3MQ==", "bodyText": "Seems this merged two case compared to before. Does this need retry?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536354771", "createdAt": "2020-12-04T20:15:13Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(getErrorString(\"Failed to get download size\"));\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\n+                        getErrorString(\"Failed to get download size. HTTP response: \" + responseCode));\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the input stream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(getErrorString(\"Failed to read any byte from the stream\"));\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch. Expected artifact size %d. HTTP contentLength %d\",\n+                                    rangeEnd, httpConn.getContentLengthLong());\n+                            throw new PackageDownloadException(getErrorString(errMsg));\n+                        }\n+                        // 200 means server doesn't recognize the Range header and returns all contents.\n+                        // try to discard the offset number of bytes.\n+                        InputStream inputStream = httpConn.getInputStream();\n+                        long byteSkipped = inputStream.skip(rangeStart);\n+                        // If number of bytes skipped is less than declared, throw error.\n+                        if (byteSkipped != rangeStart) {\n+                            throw new PackageDownloadException(getErrorString(\"Reach the end of the stream\"));\n+                        }\n+                        long downloaded = download(inputStream, messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else {\n+                        throw new PackageDownloadException(getErrorString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwOTc4Ng==", "bodyText": "Similar to the previous comment. I decided to put off handling retry server side errors for raw HTTP client.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536409786", "createdAt": "2020-12-04T22:02:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -49,114 +59,142 @@ protected String getArtifactFilename() {\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     public Long getDownloadSize() throws PackageDownloadException, InterruptedException {\n         if (artifactSize != null) {\n             return artifactSize;\n         }\n+        try {\n+            artifactSize = RetryUtils\n+                    .runWithRetry(clientExceptionRetryConfig, () -> getDownloadSizeWithoutRetry(), \"get-artifact-size\",\n+                            logger);\n+            return artifactSize;\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to get download size\"), e);\n+            }\n+        }\n+    }\n \n+    private Long getDownloadSizeWithoutRetry() throws InterruptedException, PackageDownloadException, IOException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        runWithRetry(\"get-artifact-info\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                httpConn = connect(url);\n-                int responseCode = httpConn.getResponseCode();\n-                if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    long length = httpConn.getContentLengthLong();\n-                    if (length == -1) {\n-                        throw new PackageDownloadException(\"Failed to get download size\");\n-                    }\n-                    this.artifactSize = length;\n-                } else {\n-                    throw new PackageDownloadException(\"Failed to check greengrass artifact. HTTP response: \"\n-                            + responseCode);\n-                }\n-            } finally {\n-                if (httpConn != null) {\n-                    httpConn.disconnect();\n+        HttpURLConnection httpConn = null;\n+        try {\n+            httpConn = connect(url);\n+            int responseCode = httpConn.getResponseCode();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                long length = httpConn.getContentLengthLong();\n+                if (length == -1) {\n+                    throw new PackageDownloadException(getErrorString(\"Failed to get download size\"));\n                 }\n+                return length;\n+            } else {\n+                throw new PackageDownloadException(\n+                        getErrorString(\"Failed to get download size. HTTP response: \" + responseCode));\n             }\n-            return null;\n-        });\n-        return artifactSize;\n+        } finally {\n+            if (httpConn != null) {\n+                httpConn.disconnect();\n+            }\n+        }\n     }\n \n     @Override\n+    @SuppressWarnings({\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n             throws PackageDownloadException, InterruptedException {\n         URL url = getArtifactDownloadURL(identifier, artifact.getArtifactUri().getSchemeSpecificPart());\n \n-        return runWithRetry(\"establish HTTP connection\", MAX_RETRY, () -> {\n-            HttpURLConnection httpConn = null;\n-            try {\n-                // establish http connection\n-                httpConn = connect(url);\n-                httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n-                        String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n-                int responseCode = httpConn.getResponseCode();\n-\n-                // check response code\n-                if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n-                    return download(httpConn.getInputStream(), messageDigest);\n-                } else if (responseCode == HttpURLConnection.HTTP_OK) {\n-                    if (httpConn.getContentLengthLong() < rangeEnd) {\n-                        String errMsg = String.format(\"Artifact size mismatch.\"\n-                               + \"Expected artifact size %d. HTTP contentLength %d\",\n-                               rangeEnd, httpConn.getContentLengthLong());\n-                        throw new PackageDownloadException(errMsg);\n+        try {\n+            return RetryUtils.runWithRetry(clientExceptionRetryConfig, () -> {\n+                HttpURLConnection httpConn = null;\n+                try {\n+                    // establish http connection\n+                    httpConn = connect(url);\n+                    httpConn.setRequestProperty(HTTP_RANGE_HEADER_KEY,\n+                            String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd));\n+                    int responseCode = httpConn.getResponseCode();\n+\n+                    // check response code\n+                    if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n+                        long downloaded = download(httpConn.getInputStream(), messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the input stream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(getErrorString(\"Failed to read any byte from the stream\"));\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else if (responseCode == HttpURLConnection.HTTP_OK) {\n+                        if (httpConn.getContentLengthLong() < rangeEnd) {\n+                            String errMsg = String.format(\n+                                    \"Artifact size mismatch. Expected artifact size %d. HTTP contentLength %d\",\n+                                    rangeEnd, httpConn.getContentLengthLong());\n+                            throw new PackageDownloadException(getErrorString(errMsg));\n+                        }\n+                        // 200 means server doesn't recognize the Range header and returns all contents.\n+                        // try to discard the offset number of bytes.\n+                        InputStream inputStream = httpConn.getInputStream();\n+                        long byteSkipped = inputStream.skip(rangeStart);\n+                        // If number of bytes skipped is less than declared, throw error.\n+                        if (byteSkipped != rangeStart) {\n+                            throw new PackageDownloadException(getErrorString(\"Reach the end of the stream\"));\n+                        }\n+                        long downloaded = download(inputStream, messageDigest);\n+                        if (downloaded == 0) {\n+                            // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                            // Therefore throw IOException to trigger the retry logic.\n+                            throw new IOException(\"Failed to read any byte from the inputStream\");\n+                        } else {\n+                            return downloaded;\n+                        }\n+                    } else {\n+                        throw new PackageDownloadException(getErrorString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDc3MQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYwMDE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMzo0NFrOH_hDWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjoxNToxMVrOH_kMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2Mzg2NQ==", "bodyText": "Seems createNewDeployment is skipped for local deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536363865", "createdAt": "2020-12-04T20:33:44Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,50 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n+                            .equals(deployment.getDeploymentType()) && currentDeploymentTaskMetadata.isCancellable()) {\n                         logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling current device deployment\");\n+                                .log(\"Canceling current deployment\");\n+                        // Send interrupt signal to the deployment task.\n                         cancelCurrentDeployment();\n-                        continue;\n+                    } else if (currentDeploymentTaskMetadata != null && !currentDeploymentTaskMetadata\n+                            .isCancellable()) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"The current deployment cannot be cancelled\");\n                     }\n+                } else if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n                     // On device start up, Shadow listener will fetch the shadow and schedule a shadow deployment\n                     // Discard the deployment if Kernel starts up from a tlog file and has already processed deployment\n                     if (deployment.getId()\n                             .equals(Coerce.toString(config.lookup(LAST_SUCCESSFUL_SHADOW_DEPLOYMENT_ID_TOPIC)))) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, deployment.getId())\n+                                .log(\"Skip the already processed shadow deployment\");\n+                        deploymentQueue.remove();\n+                    } else if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        // A new device deployment invalidates the previous deployment, cancel the ongoing device\n+                        //deployment and wait till the new device deployment can be picked up.\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"Canceling current device deployment\");\n+                        cancelCurrentDeployment();\n+                    } else if (currentDeploymentTaskMetadata == null) {\n                         deploymentQueue.remove();\n-                        continue;\n+                        createNewDeployment(deployment);\n+                    }\n+                } else if (deployment.getDeploymentType().equals(DeploymentType.IOT_JOBS)) {\n+                    if (currentDeploymentTaskMetadata != null && deployment.getId()\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentQueue.remove();\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, deployment.getId())\n+                                .log(\"Skip the duplicated IoT Jobs deployment\");\n+                    } else if (currentDeploymentTaskMetadata == null) {\n+                        deploymentQueue.remove();\n+                        createNewDeployment(deployment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNTI5Mg==", "bodyText": "Good catch! Unfortunately we don't have a unit test catching this :(", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536415292", "createdAt": "2020-12-04T22:15:11Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,50 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n+                            .equals(deployment.getDeploymentType()) && currentDeploymentTaskMetadata.isCancellable()) {\n                         logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling current device deployment\");\n+                                .log(\"Canceling current deployment\");\n+                        // Send interrupt signal to the deployment task.\n                         cancelCurrentDeployment();\n-                        continue;\n+                    } else if (currentDeploymentTaskMetadata != null && !currentDeploymentTaskMetadata\n+                            .isCancellable()) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"The current deployment cannot be cancelled\");\n                     }\n+                } else if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n                     // On device start up, Shadow listener will fetch the shadow and schedule a shadow deployment\n                     // Discard the deployment if Kernel starts up from a tlog file and has already processed deployment\n                     if (deployment.getId()\n                             .equals(Coerce.toString(config.lookup(LAST_SUCCESSFUL_SHADOW_DEPLOYMENT_ID_TOPIC)))) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, deployment.getId())\n+                                .log(\"Skip the already processed shadow deployment\");\n+                        deploymentQueue.remove();\n+                    } else if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        // A new device deployment invalidates the previous deployment, cancel the ongoing device\n+                        //deployment and wait till the new device deployment can be picked up.\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"Canceling current device deployment\");\n+                        cancelCurrentDeployment();\n+                    } else if (currentDeploymentTaskMetadata == null) {\n                         deploymentQueue.remove();\n-                        continue;\n+                        createNewDeployment(deployment);\n+                    }\n+                } else if (deployment.getDeploymentType().equals(DeploymentType.IOT_JOBS)) {\n+                    if (currentDeploymentTaskMetadata != null && deployment.getId()\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n+                            .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentQueue.remove();\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, deployment.getId())\n+                                .log(\"Skip the duplicated IoT Jobs deployment\");\n+                    } else if (currentDeploymentTaskMetadata == null) {\n+                        deploymentQueue.remove();\n+                        createNewDeployment(deployment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2Mzg2NQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYxOTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MDowNFrOH_hOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MDowNFrOH_hOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2Njc3MQ==", "bodyText": "Nit - This code is very similar to an existing class https://github.com/aws/aws-greengrass-nucleus/blob/master/src/main/java/com/aws/greengrass/util/BaseRetryableAccessor.java Would be nice to consolidate if we have the time", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536366771", "createdAt": "2020-12-04T20:40:04Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+public class RetryUtils {\n+\n+    // Need this to make spotbug check happy\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Run a task with retry. Only exceptions in the retryable exception list are retried. Stop the retry when\n+     * interrupted.\n+     *\n+     * @param retryConfig     retry configuration\n+     * @param task            task to run\n+     * @param taskDescription task description\n+     * @param logger          logger\n+     * @param <T>             return type\n+     * @return return value\n+     * @throws Exception Exception\n+     */\n+    @SuppressWarnings({\"PMD.SignatureDeclareThrowsException\", \"PMD.AvoidCatchingGenericException\",\n+            \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public static <T> T runWithRetry(RetryConfig retryConfig, CrashableSupplier<T, Exception> task,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYzNDAwOnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0NDowNlrOH_hWtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzowMDowM1rOH_lUgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2ODgyMQ==", "bodyText": "Why do we remove this? If we don't wait for currentDeploymentTaskMetadata.getDeploymentResultFuture to finish and remove the pointer, will we start processing a new deployment before this one finishes?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536368821", "createdAt": "2020-12-04T20:44:06Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +384,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n                                          + \" need to wait for it to finish\");\n-                    try {\n-                        currentDeploymentTaskMetadata.getDeploymentResultFuture().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzM0Mg==", "bodyText": "The idea is to make cancelCurrentDeployment not block any more. Since currentDeploymentTaskMetadata is not set null (line409 is removed), a new deployment will be waited in the queue until the current deployment is finished.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536417342", "createdAt": "2020-12-04T22:19:39Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +384,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n                                          + \" need to wait for it to finish\");\n-                    try {\n-                        currentDeploymentTaskMetadata.getDeploymentResultFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2ODgyMQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNTg2NA==", "bodyText": "Does it mean if deployment is cancelled from cloud, we still wait for deployment to finish and report status back?\nNot a concern, but the status report will be rejected in iot jobs.\nI'm not sure about shadow deployment reporting.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536425864", "createdAt": "2020-12-04T22:39:40Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +384,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n                                          + \" need to wait for it to finish\");\n-                    try {\n-                        currentDeploymentTaskMetadata.getDeploymentResultFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2ODgyMQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzMzc5Mw==", "bodyText": "When a deployment is cancelled from cloud, the main thread of deploymentService will call cancelCurrentDeployment, which then cancels the deployment result future. The cancellation of the future will send an interrupt signal to the DeploymentTask thread. The deployment task thread will exit as soon as it get notified with the interrupt. In the deployment task code path, all the blocking operations and while loops should check interrupt flag periodically. Once deployment task exits, finishCurrentDeployment will also return with a CancellationException when next time the deployment service main loop gets there.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536433793", "createdAt": "2020-12-04T23:00:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +384,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n                                          + \" need to wait for it to finish\");\n-                    try {\n-                        currentDeploymentTaskMetadata.getDeploymentResultFuture().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2ODgyMQ=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTY2NTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo1MzozNlrOH_hoZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMjozNTowNFrOH_ktpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MzM0OA==", "bodyText": "Does isInstance check cause of an exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536373348", "createdAt": "2020-12-04T20:53:36Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+public class RetryUtils {\n+\n+    // Need this to make spotbug check happy\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Run a task with retry. Only exceptions in the retryable exception list are retried. Stop the retry when\n+     * interrupted.\n+     *\n+     * @param retryConfig     retry configuration\n+     * @param task            task to run\n+     * @param taskDescription task description\n+     * @param logger          logger\n+     * @param <T>             return type\n+     * @return return value\n+     * @throws Exception Exception\n+     */\n+    @SuppressWarnings({\"PMD.SignatureDeclareThrowsException\", \"PMD.AvoidCatchingGenericException\",\n+            \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public static <T> T runWithRetry(RetryConfig retryConfig, CrashableSupplier<T, Exception> task,\n+            String taskDescription, Logger logger) throws Exception {\n+        long retryInterval = retryConfig.getInitialRetryInterval().toMillis();\n+        int attempt = 1;\n+        Exception lastException = null;\n+        while (attempt <= retryConfig.maxAttempt) {\n+            if (Thread.currentThread().isInterrupted()) {\n+                throw new InterruptedException(taskDescription + \" task is interrupted\");\n+            }\n+            try {\n+                return task.apply();\n+            } catch (Exception e) {\n+                if (e instanceof InterruptedException) {\n+                    throw e;\n+                }\n+                if (retryConfig.retryableExceptions.stream().anyMatch(c -> c.isInstance(e))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQxNzgxMw==", "bodyText": "It doesn't. Does it need to be?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536417813", "createdAt": "2020-12-04T22:20:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+public class RetryUtils {\n+\n+    // Need this to make spotbug check happy\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Run a task with retry. Only exceptions in the retryable exception list are retried. Stop the retry when\n+     * interrupted.\n+     *\n+     * @param retryConfig     retry configuration\n+     * @param task            task to run\n+     * @param taskDescription task description\n+     * @param logger          logger\n+     * @param <T>             return type\n+     * @return return value\n+     * @throws Exception Exception\n+     */\n+    @SuppressWarnings({\"PMD.SignatureDeclareThrowsException\", \"PMD.AvoidCatchingGenericException\",\n+            \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public static <T> T runWithRetry(RetryConfig retryConfig, CrashableSupplier<T, Exception> task,\n+            String taskDescription, Logger logger) throws Exception {\n+        long retryInterval = retryConfig.getInitialRetryInterval().toMillis();\n+        int attempt = 1;\n+        Exception lastException = null;\n+        while (attempt <= retryConfig.maxAttempt) {\n+            if (Thread.currentThread().isInterrupted()) {\n+                throw new InterruptedException(taskDescription + \" task is interrupted\");\n+            }\n+            try {\n+                return task.apply();\n+            } catch (Exception e) {\n+                if (e instanceof InterruptedException) {\n+                    throw e;\n+                }\n+                if (retryConfig.retryableExceptions.stream().anyMatch(c -> c.isInstance(e))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MzM0OA=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzg0NQ==", "bodyText": "If we handle it here #751 (comment), it should be fine too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r536423845", "createdAt": "2020-12-04T22:35:04Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/util/RetryUtils.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import com.aws.greengrass.logging.api.Logger;\n+import lombok.Builder;\n+import lombok.Getter;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+public class RetryUtils {\n+\n+    // Need this to make spotbug check happy\n+    private RetryUtils() {\n+    }\n+\n+    /**\n+     * Run a task with retry. Only exceptions in the retryable exception list are retried. Stop the retry when\n+     * interrupted.\n+     *\n+     * @param retryConfig     retry configuration\n+     * @param task            task to run\n+     * @param taskDescription task description\n+     * @param logger          logger\n+     * @param <T>             return type\n+     * @return return value\n+     * @throws Exception Exception\n+     */\n+    @SuppressWarnings({\"PMD.SignatureDeclareThrowsException\", \"PMD.AvoidCatchingGenericException\",\n+            \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    public static <T> T runWithRetry(RetryConfig retryConfig, CrashableSupplier<T, Exception> task,\n+            String taskDescription, Logger logger) throws Exception {\n+        long retryInterval = retryConfig.getInitialRetryInterval().toMillis();\n+        int attempt = 1;\n+        Exception lastException = null;\n+        while (attempt <= retryConfig.maxAttempt) {\n+            if (Thread.currentThread().isInterrupted()) {\n+                throw new InterruptedException(taskDescription + \" task is interrupted\");\n+            }\n+            try {\n+                return task.apply();\n+            } catch (Exception e) {\n+                if (e instanceof InterruptedException) {\n+                    throw e;\n+                }\n+                if (retryConfig.retryableExceptions.stream().anyMatch(c -> c.isInstance(e))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM3MzM0OA=="}, "originalCommit": {"oid": "57584c1934859b972a05905b1e6e3fbc2cb06190"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIyNTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0NDoyNFrOIBC85g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNDoyNzowMlrOIBGdmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2Nzg0Ng==", "bodyText": "this seems awkward - why not\ntry {\n} catch (InterruptedException e) {\n// rethrow\n} catch (S3Exception e) {\n// get the region\n} catch (Exception e) {\n  throw new PackageDwonloadingException\n}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537967846", "createdAt": "2020-12-08T01:44:24Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -57,59 +64,90 @@ protected String getArtifactFilename() {\n         return pathStrings[pathStrings.length - 1];\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n-            throws PackageDownloadException, InterruptedException {\n+            throws InterruptedException, PackageDownloadException {\n         String bucket = s3ObjectPath.bucket;\n         String key = s3ObjectPath.key;\n \n         S3Client regionClient = getRegionClientForBucket(bucket);\n         GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucket).key(key)\n                 .range(String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd)).build();\n-        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket())\n-                .kv(\"s3-key\", getObjectRequest.key())\n+        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket()).kv(\"s3-key\", getObjectRequest.key())\n                 .kv(\"range\", getObjectRequest.range()).log(\"Getting s3 object request\");\n \n-        return runWithRetry(\"download-S3-artifact\", MAX_RETRY,() -> {\n-            try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n-                return download(inputStream, messageDigest);\n-            } catch (SdkClientException | S3Exception e) {\n-                String errorMsg = getErrorString(\"Failed to get artifact object from S3\");\n-                throw new PackageDownloadException(errorMsg, e);\n+        try {\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n+                    long downloaded = download(inputStream, messageDigest);\n+                    if (downloaded == 0) {\n+                        // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                        // Therefore throw IOException to trigger the retry logic.\n+                        throw new IOException(\"Failed to read any byte from the inputStream\");\n+                    } else {\n+                        return downloaded;\n+                    }\n+                }\n+            }, \"download-S3-artifact\", logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to download object from S3\"), e);\n             }\n-        });\n+        }\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n-    public Long getDownloadSize() throws PackageDownloadException {\n+    public Long getDownloadSize() throws InterruptedException, PackageDownloadException {\n         logger.atInfo().setEventType(\"get-download-size-from-s3\").log();\n         // Parse artifact path\n         String key = s3ObjectPath.key;\n         String bucket = s3ObjectPath.bucket;\n         try {\n             S3Client regionClient = getRegionClientForBucket(bucket);\n             HeadObjectRequest headObjectRequest = HeadObjectRequest.builder().bucket(bucket).key(key).build();\n-            HeadObjectResponse headObjectResponse = regionClient.headObject(headObjectRequest);\n-            return headObjectResponse.contentLength();\n-        } catch (SdkClientException | S3Exception e) {\n-            throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                HeadObjectResponse headObjectResponse = regionClient.headObject(headObjectRequest);\n+                return headObjectResponse.contentLength();\n+            }, \"get-download-size-from-s3\", logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n+            }\n         }\n     }\n \n-    private S3Client getRegionClientForBucket(String bucket) {\n+    @SuppressWarnings(\n+            {\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    private S3Client getRegionClientForBucket(String bucket) throws InterruptedException, PackageDownloadException {\n         GetBucketLocationRequest getBucketLocationRequest = GetBucketLocationRequest.builder().bucket(bucket).build();\n         String region = null;\n         try {\n+            region = RetryUtils.runWithRetry(s3ClientExceptionRetryConfig,\n+                    () -> s3ClientFactory.getS3Client().getBucketLocation(getBucketLocationRequest)\n+                            .locationConstraintAsString(), \"get-bucket-location\", logger);\n             region = s3ClientFactory.getS3Client().getBucketLocation(getBucketLocationRequest)\n                     .locationConstraintAsString();\n-        } catch (S3Exception e) {\n-            String message = e.getMessage();\n-            if (message.contains(REGION_EXPECTING_STRING)) {\n-                message =\n-                        message.substring(message.indexOf(REGION_EXPECTING_STRING) + REGION_EXPECTING_STRING.length());\n-                region = message.substring(0, message.indexOf('\\''));\n+        } catch (Exception e) {\n+            if (e instanceof S3Exception) {\n+                String message = e.getMessage();\n+                if (message.contains(REGION_EXPECTING_STRING)) {\n+                    message =\n+                            message.substring(\n+                                    message.indexOf(REGION_EXPECTING_STRING) + REGION_EXPECTING_STRING.length());\n+                    region = message.substring(0, message.indexOf('\\''));\n+                }\n+            } else if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyNTM2OQ==", "bodyText": "I don't know what I was thinking...updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r538025369", "createdAt": "2020-12-08T04:27:02Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/S3Downloader.java", "diffHunk": "@@ -57,59 +64,90 @@ protected String getArtifactFilename() {\n         return pathStrings[pathStrings.length - 1];\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n     protected long download(long rangeStart, long rangeEnd, MessageDigest messageDigest)\n-            throws PackageDownloadException, InterruptedException {\n+            throws InterruptedException, PackageDownloadException {\n         String bucket = s3ObjectPath.bucket;\n         String key = s3ObjectPath.key;\n \n         S3Client regionClient = getRegionClientForBucket(bucket);\n         GetObjectRequest getObjectRequest = GetObjectRequest.builder().bucket(bucket).key(key)\n                 .range(String.format(HTTP_RANGE_HEADER_FORMAT, rangeStart, rangeEnd)).build();\n-        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket())\n-                .kv(\"s3-key\", getObjectRequest.key())\n+        logger.atDebug().kv(\"bucket\", getObjectRequest.bucket()).kv(\"s3-key\", getObjectRequest.key())\n                 .kv(\"range\", getObjectRequest.range()).log(\"Getting s3 object request\");\n \n-        return runWithRetry(\"download-S3-artifact\", MAX_RETRY,() -> {\n-            try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n-                return download(inputStream, messageDigest);\n-            } catch (SdkClientException | S3Exception e) {\n-                String errorMsg = getErrorString(\"Failed to get artifact object from S3\");\n-                throw new PackageDownloadException(errorMsg, e);\n+        try {\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                try (InputStream inputStream = regionClient.getObject(getObjectRequest)) {\n+                    long downloaded = download(inputStream, messageDigest);\n+                    if (downloaded == 0) {\n+                        // If 0 byte is read, it's fairly certain that the inputStream is closed.\n+                        // Therefore throw IOException to trigger the retry logic.\n+                        throw new IOException(\"Failed to read any byte from the inputStream\");\n+                    } else {\n+                        return downloaded;\n+                    }\n+                }\n+            }, \"download-S3-artifact\", logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to download object from S3\"), e);\n             }\n-        });\n+        }\n     }\n \n-    @SuppressWarnings(\"PMD.CloseResource\")\n+    @SuppressWarnings(\n+            {\"PMD.CloseResource\", \"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n     @Override\n-    public Long getDownloadSize() throws PackageDownloadException {\n+    public Long getDownloadSize() throws InterruptedException, PackageDownloadException {\n         logger.atInfo().setEventType(\"get-download-size-from-s3\").log();\n         // Parse artifact path\n         String key = s3ObjectPath.key;\n         String bucket = s3ObjectPath.bucket;\n         try {\n             S3Client regionClient = getRegionClientForBucket(bucket);\n             HeadObjectRequest headObjectRequest = HeadObjectRequest.builder().bucket(bucket).key(key).build();\n-            HeadObjectResponse headObjectResponse = regionClient.headObject(headObjectRequest);\n-            return headObjectResponse.contentLength();\n-        } catch (SdkClientException | S3Exception e) {\n-            throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n+            return RetryUtils.runWithRetry(s3ClientExceptionRetryConfig, () -> {\n+                HeadObjectResponse headObjectResponse = regionClient.headObject(headObjectRequest);\n+                return headObjectResponse.contentLength();\n+            }, \"get-download-size-from-s3\", logger);\n+        } catch (Exception e) {\n+            if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n+            }\n         }\n     }\n \n-    private S3Client getRegionClientForBucket(String bucket) {\n+    @SuppressWarnings(\n+            {\"PMD.AvoidCatchingGenericException\", \"PMD.AvoidInstanceofChecksInCatchClause\"})\n+    private S3Client getRegionClientForBucket(String bucket) throws InterruptedException, PackageDownloadException {\n         GetBucketLocationRequest getBucketLocationRequest = GetBucketLocationRequest.builder().bucket(bucket).build();\n         String region = null;\n         try {\n+            region = RetryUtils.runWithRetry(s3ClientExceptionRetryConfig,\n+                    () -> s3ClientFactory.getS3Client().getBucketLocation(getBucketLocationRequest)\n+                            .locationConstraintAsString(), \"get-bucket-location\", logger);\n             region = s3ClientFactory.getS3Client().getBucketLocation(getBucketLocationRequest)\n                     .locationConstraintAsString();\n-        } catch (S3Exception e) {\n-            String message = e.getMessage();\n-            if (message.contains(REGION_EXPECTING_STRING)) {\n-                message =\n-                        message.substring(message.indexOf(REGION_EXPECTING_STRING) + REGION_EXPECTING_STRING.length());\n-                region = message.substring(0, message.indexOf('\\''));\n+        } catch (Exception e) {\n+            if (e instanceof S3Exception) {\n+                String message = e.getMessage();\n+                if (message.contains(REGION_EXPECTING_STRING)) {\n+                    message =\n+                            message.substring(\n+                                    message.indexOf(REGION_EXPECTING_STRING) + REGION_EXPECTING_STRING.length());\n+                    region = message.substring(0, message.indexOf('\\''));\n+                }\n+            } else if (e instanceof InterruptedException) {\n+                throw (InterruptedException) e;\n+            } else {\n+                throw new PackageDownloadException(getErrorString(\"Failed to head artifact object from S3\"), e);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2Nzg0Ng=="}, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIzNDkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0NzoyMlrOIBDBoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNToyNDozNFrOIBHofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTA1Ng==", "bodyText": "super super nit: canceling has one \"l\" while cancelled has two-  should be \"cancelling\" or \"canceled\"\nUS English tends to use one \"l\" so I'd probably use that, while the British speaking world does 2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537969056", "createdAt": "2020-12-08T01:47:22Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,56 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n+                            .equals(deployment.getDeploymentType()) && currentDeploymentTaskMetadata.isCancellable()) {\n                         logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling current device deployment\");\n+                                .log(\"Canceling current deployment\");\n+                        // Send interrupt signal to the deployment task.\n                         cancelCurrentDeployment();\n-                        continue;\n+                    } else if (currentDeploymentTaskMetadata != null && !currentDeploymentTaskMetadata\n+                            .isCancellable()) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"The current deployment cannot be cancelled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAyMDMxNA==", "bodyText": "Tough choice...I was going to change all the cancelled to canceled in the code but then I found Java standard library also uses cancelled. Either we'll be inconsistent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r538020314", "createdAt": "2020-12-08T04:11:44Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,56 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n+                            .equals(deployment.getDeploymentType()) && currentDeploymentTaskMetadata.isCancellable()) {\n                         logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling current device deployment\");\n+                                .log(\"Canceling current deployment\");\n+                        // Send interrupt signal to the deployment task.\n                         cancelCurrentDeployment();\n-                        continue;\n+                    } else if (currentDeploymentTaskMetadata != null && !currentDeploymentTaskMetadata\n+                            .isCancellable()) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"The current deployment cannot be cancelled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTA1Ng=="}, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA0NDU0MQ==", "bodyText": "\ud83e\udd2f", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r538044541", "createdAt": "2020-12-08T05:24:34Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,56 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n+                            .equals(deployment.getDeploymentType()) && currentDeploymentTaskMetadata.isCancellable()) {\n                         logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                                .log(\"Canceling current device deployment\");\n+                                .log(\"Canceling current deployment\");\n+                        // Send interrupt signal to the deployment task.\n                         cancelCurrentDeployment();\n-                        continue;\n+                    } else if (currentDeploymentTaskMetadata != null && !currentDeploymentTaskMetadata\n+                            .isCancellable()) {\n+                        logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                                .log(\"The current deployment cannot be cancelled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTA1Ng=="}, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIzODM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0ODo0NFrOIBDDlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0ODo0NFrOIBDDlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTU1OQ==", "bodyText": "same nit - our JobStatus is \"Canceled\" so we should use 1 'L\" here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537969559", "createdAt": "2020-12-08T01:48:44Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -331,25 +340,25 @@ private void finishCurrentDeployment() throws InterruptedException {\n                 }\n             }\n         } catch (ExecutionException e) {\n-            logger.atError().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId()).setCause(e)\n-                    .log(\"Caught exception while getting the status of the Job\");\n             Throwable t = e.getCause();\n-            HashMap<String, String> statusDetails = new HashMap<>();\n-            statusDetails.put(\"error\", t.getMessage());\n-            if (t instanceof NonRetryableDeploymentTaskFailureException\n-                    || currentDeploymentTaskMetadata.getDeploymentAttemptCount().get() >= DEPLOYMENT_MAX_ATTEMPTS) {\n+            if (t instanceof InterruptedException) {\n+                logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                        .log(\"Deployment task is interrupted\");\n+            } else {\n+                // This code path can only occur when DeploymentTask throws unchecked exception.\n+                logger.atError().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                        .setCause(t).log(\"Deployment task throws unknown exception\");\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", t.getMessage());\n                 deploymentStatusKeeper\n                         .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n-                                                           currentDeploymentTaskMetadata.getDeploymentType(),\n-                                                           JobStatus.FAILED.toString(), statusDetails);\n+                                currentDeploymentTaskMetadata.getDeploymentType(), JobStatus.FAILED.toString(),\n+                                statusDetails);\n                 deploymentDirectoryManager.persistLastFailedDeployment();\n-            } else if (t instanceof RetryableDeploymentTaskFailureException) {\n-                // Resubmit task, increment attempt count and return\n-                currentDeploymentTaskMetadata.setDeploymentResultFuture(\n-                        executorService.submit(currentDeploymentTaskMetadata.getDeploymentTask()));\n-                currentDeploymentTaskMetadata.getDeploymentAttemptCount().incrementAndGet();\n-                return;\n             }\n+        } catch (CancellationException e) {\n+            logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n+                    .log(\"Deployment task is cancelled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIzODc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0ODo1NlrOIBDD1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0ODo1NlrOIBDD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTYyMw==", "bodyText": "\"canceled\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537969623", "createdAt": "2020-12-08T01:48:56Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +390,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzIzOTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0OToxMVrOIBDENw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo0OToxMVrOIBDENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2OTcxOQ==", "bodyText": "\"canceled\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537969719", "createdAt": "2020-12-08T01:49:11Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -381,32 +390,20 @@ private void cancelCurrentDeployment() {\n                                 .getDeploymentDocumentObj().getDeploymentId());\n                 if (canCancelDeployment) {\n                     currentDeploymentTaskMetadata.getDeploymentResultFuture().cancel(true);\n+                    if (DeploymentType.SHADOW.equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n+                        deploymentStatusKeeper\n+                                .persistAndPublishDeploymentStatus(currentDeploymentTaskMetadata.getDeploymentId(),\n+                                        currentDeploymentTaskMetadata.getDeploymentType(),\n+                                        JobStatus.CANCELED.toString(), new HashMap<>());\n+                    }\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment was cancelled\");\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzI1MjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTo1MzoyOFrOIBDLYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNzoxNjozNFrOIBKbvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3MTU1NA==", "bodyText": "this whole section is pretty tough to get through - so many nested ifs - can you add some more comments in here around under what circumstances the currentDeploymentTaskMetadata is null or not - is it the case that if something is in progress and you get another deployment, the currentDeploymentTaskMetadata will not be null?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r537971554", "createdAt": "2020-12-08T01:53:28Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,56 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA5MDQzMA==", "bodyText": "added more comments.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r538090430", "createdAt": "2020-12-08T07:16:34Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -191,46 +190,56 @@ protected void startup() throws InterruptedException {\n             // the waiting on currentProcessStatus in its own thread. I currently choose to not do this.\n             Deployment deployment = deploymentQueue.peek();\n             if (deployment != null) {\n-                if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()\n-                        .equals(deployment.getDeploymentType()) && deployment.isCancelled()\n-                        && currentDeploymentTaskMetadata.isCancellable()) {\n-                    logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n-                            .log(\"Canceling current deployment\");\n-                    // Assuming cancel will either cancel the current deployment or wait till it finishes\n-                    cancelCurrentDeployment();\n-                }\n-                if (currentDeploymentTaskMetadata != null && deployment.getId()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentId()) && deployment.getDeploymentType()\n-                        .equals(currentDeploymentTaskMetadata.getDeploymentType())) {\n-                    // Duplicate message and already processing this deployment so nothing is needed\n+                if (deployment.isCancelled()) {\n+                    // Handle IoT Jobs cancellation\n                     deploymentQueue.remove();\n-                    continue;\n-                }\n-                if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n-                    // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n-                    // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null && DeploymentType.SHADOW.equals(\n-                            currentDeploymentTaskMetadata.getDeploymentType())) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3MTU1NA=="}, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzk0Njk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoxNlrOIBJApw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjoyNjoxNlrOIBJApw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NzExMQ==", "bodyText": "Nit - combine string", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/751#discussion_r538067111", "createdAt": "2020-12-08T06:26:16Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/componentmanager/plugins/ArtifactDownloader.java", "diffHunk": "@@ -148,35 +113,45 @@ public final File downloadToPath() throws PackageDownloadException, IOException,\n             }\n         }\n \n-        return runWithRetry(\"download-artifact\", MAX_RETRY,\n-                Collections.singletonList(ArtifactChecksumMismatchException.class),\n-                () -> {\n-                    while (offset.get() < artifactSize) {\n-                        long downloadedBytes = download(offset.get(), artifactSize - 1, messageDigest);\n-                        offset.addAndGet(downloadedBytes);\n-                    }\n+        try {\n+            // A checksum mismatch probably means the downloaded artifact is corrupted, Greengrass will retry the\n+            //download for 10 times before giving up.\n+            return RetryUtils.runWithRetry(checksumMismatchRetryConfig, () -> {\n+                while (offset.get() < artifactSize) {\n+                    long downloadedBytes = download(offset.get(), artifactSize - 1, messageDigest);\n+                    offset.addAndGet(downloadedBytes);\n+                }\n \n-                    String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n-                    if (!digest.equals(artifact.getChecksum())) {\n-                        // Handle failure in integrity check, delete bad file then throw\n-                        Files.deleteIfExists(saveToPath);\n-                        offset.set(0);\n-                        messageDigest.reset();\n-                        throw new ArtifactChecksumMismatchException(\"Integrity check for downloaded artifact failed. \"\n-                                + \"Probably due to file corruption.\");\n-                    }\n-                    logger.atDebug().setEventType(\"download-artifact\").log(\"Passed integrity check\");\n-                    return saveToPath.toFile();\n-                });\n+                String digest = Base64.getEncoder().encodeToString(messageDigest.digest());\n+                if (!digest.equals(artifact.getChecksum())) {\n+                    // Handle failure in integrity check, delete bad file then throw\n+                    Files.deleteIfExists(saveToPath);\n+                    offset.set(0);\n+                    messageDigest.reset();\n+                    throw new ArtifactChecksumMismatchException(\n+                            \"Integrity check for downloaded artifact failed. \" + \"Probably due to file corruption.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1915d4e8b42bec422ccb6a32cfa3fcb6256c21b"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 118, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}