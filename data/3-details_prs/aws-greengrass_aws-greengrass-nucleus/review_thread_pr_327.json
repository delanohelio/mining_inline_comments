{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTkxNTEw", "number": 327, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozOToxMVrOER7Wzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMToxNFrOESkuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjMzNzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozOToxMVrOG255VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMDo1M1rOG26xpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDg1Mw==", "bodyText": "update the map instances?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460224853", "createdAt": "2020-07-24T18:39:11Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNDc5MA==", "bodyText": "Not sure what you mean.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460234790", "createdAt": "2020-07-24T19:00:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDg1Mw=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTI2OA==", "bodyText": "The comment's outdated. Noticed it's updated in createInstance", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460239268", "createdAt": "2020-07-24T19:10:53Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDg1Mw=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjM0MjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0MDozOVrOG258MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTowMDo0NFrOG26f0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTU4NA==", "bodyText": "When to call MultiInstanceEvergreenService or createNewInstance? should this constructor be protected?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460225584", "createdAt": "2020-07-24T18:40:39Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzNDcwNw==", "bodyText": "It shouldn't be called which is why it is package-private, but I need it available for unit testing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460234707", "createdAt": "2020-07-24T19:00:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTU4NA=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjM1NTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0NToyM1rOG26EVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToxMTowN1rOG26x_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzY2OA==", "bodyText": "If the keys are incremental integers, why not using list?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460227668", "createdAt": "2020-07-24T18:45:23Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMjkyMQ==", "bodyText": "Because a user can remove an instance at any time, so we can end up with holes, and a list will shift the elements to fill the holes which would screw up our indexing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460232921", "createdAt": "2020-07-24T18:56:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzY2OA=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzODY0Mg==", "bodyText": "Is this a map for all instances but the base one?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460238642", "createdAt": "2020-07-24T19:09:24Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzY2OA=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzOTM1OA==", "bodyText": "Yes, that's right", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460239358", "createdAt": "2020-07-24T19:11:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzY2OA=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjM3MTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo1MDo1NFrOG26OGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo1NzoyM1rOG26Ztg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMDE2OA==", "bodyText": "Should check BASE_INSTANCE_ID here as well as in removeInstance/putDependenciesIntoSet?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460230168", "createdAt": "2020-07-24T18:50:54Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            return getClass().getConstructor(Topics.class, int.class)\n+                    .newInstance(config, lastInstanceId.incrementAndGet());\n+        } catch (NoSuchMethodException | InstantiationException\n+                | IllegalAccessException | InvocationTargetException e) {\n+            throw new ServiceLoadException(\"Unable to create new instance of \" + getClass().getName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Get an instance by ID.\n+     *\n+     * @param instanceId ID to lookup\n+     * @return instance or null if not found\n+     */\n+    @Nullable\n+    public MultiInstanceEvergreenService getInstance(int instanceId) {\n+        if (instances == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMzE0Mg==", "bodyText": "Not any point. The instances == null check is equivalent because it is only non-null for the base instance.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460233142", "createdAt": "2020-07-24T18:57:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public abstract class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    private AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics);\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            return getClass().getConstructor(Topics.class, int.class)\n+                    .newInstance(config, lastInstanceId.incrementAndGet());\n+        } catch (NoSuchMethodException | InstantiationException\n+                | IllegalAccessException | InvocationTargetException e) {\n+            throw new ServiceLoadException(\"Unable to create new instance of \" + getClass().getName(), e);\n+        }\n+    }\n+\n+    /**\n+     * Get an instance by ID.\n+     *\n+     * @param instanceId ID to lookup\n+     * @return instance or null if not found\n+     */\n+    @Nullable\n+    public MultiInstanceEvergreenService getInstance(int instanceId) {\n+        if (instances == null) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMDE2OA=="}, "originalCommit": {"oid": "a682f9c5ec1146f8ad9526db57ac11e5205e20a5"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEwNjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0Mjo0M1rOG3BB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMjowNDowOFrOG3Bl5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTc0Mg==", "bodyText": "Are there side effects of keeping state topic(and the rest of the private topics) in the runtime namespace? If Service A is listening to runtime config changes for Service B (serving the shared config requirement), it will get notified when state topic changes when it shouldn't, there is a way to filter those notifications in the IPC agent layer, but scattering this logic upto there doesn't sound like a good idea to me", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460341742", "createdAt": "2020-07-25T00:42:43Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -123,10 +123,11 @@\n      *\n      * @param evergreenService service that this is the lifecycle for\n      * @param logger           service's logger\n+     * @param topics           config namespace for storing the state topic\n      */\n-    public Lifecycle(EvergreenService evergreenService, Logger logger) {\n+    public Lifecycle(EvergreenService evergreenService, Logger logger, Topics topics) {\n         this.evergreenService = evergreenService;\n-        this.stateTopic = initStateTopic(evergreenService.getConfig());\n+        this.stateTopic = initStateTopic(topics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTk2Nw==", "bodyText": "The changes won't bubble up because the state topic is set to not notify the parent. Anything else private (which the only other thing is the auth token), is also set to not notify the parent of changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460341967", "createdAt": "2020-07-25T00:44:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -123,10 +123,11 @@\n      *\n      * @param evergreenService service that this is the lifecycle for\n      * @param logger           service's logger\n+     * @param topics           config namespace for storing the state topic\n      */\n-    public Lifecycle(EvergreenService evergreenService, Logger logger) {\n+    public Lifecycle(EvergreenService evergreenService, Logger logger, Topics topics) {\n         this.evergreenService = evergreenService;\n-        this.stateTopic = initStateTopic(evergreenService.getConfig());\n+        this.stateTopic = initStateTopic(topics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTc0Mg=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MDk1MQ==", "bodyText": "I can create a new namespace for private stuff outside of runtime if you think that's better.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460350951", "createdAt": "2020-07-25T02:04:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Lifecycle.java", "diffHunk": "@@ -123,10 +123,11 @@\n      *\n      * @param evergreenService service that this is the lifecycle for\n      * @param logger           service's logger\n+     * @param topics           config namespace for storing the state topic\n      */\n-    public Lifecycle(EvergreenService evergreenService, Logger logger) {\n+    public Lifecycle(EvergreenService evergreenService, Logger logger, Topics topics) {\n         this.evergreenService = evergreenService;\n-        this.stateTopic = initStateTopic(evergreenService.getConfig());\n+        this.stateTopic = initStateTopic(topics);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTc0Mg=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEyMDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo1NToyN1rOG3BJFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo1NzoyN1rOG3BKAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MzU3Mw==", "bodyText": "This logic really doesn't belong here, it should logically be inside the context get() and injectField() methods", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460343573", "createdAt": "2020-07-25T00:55:27Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            int id = lastInstanceId.incrementAndGet();\n+            Constructor<? extends MultiInstanceEvergreenService> constructor =\n+                    getClass().getDeclaredConstructor(Topics.class, int.class);\n+            constructor.setAccessible(true);\n+            MultiInstanceEvergreenService newService = constructor.newInstance(config, id);\n+            context.injectFields(newService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MzgxMA==", "bodyText": "context can't do this because it doesn't know what to construct or what ID to use. This class is a special case and its logic shouldn't affect the context or anything else, as much as possible anyway. Additionally, we don't use context because I don't want the result to be stored in the context as that is just another thing that needs to be properly cleaned up when stopping/closing an instance of a service.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460343810", "createdAt": "2020-07-25T00:57:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {\n+        if (instanceId != BASE_INSTANCE_ID) {\n+            throw new ServiceLoadException(\"New instances may only be created from the base instance\");\n+        }\n+        try {\n+            int id = lastInstanceId.incrementAndGet();\n+            Constructor<? extends MultiInstanceEvergreenService> constructor =\n+                    getClass().getDeclaredConstructor(Topics.class, int.class);\n+            constructor.setAccessible(true);\n+            MultiInstanceEvergreenService newService = constructor.newInstance(config, id);\n+            context.injectFields(newService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MzU3Mw=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEyNTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTowMDozOFrOG3BLqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTowMToyMVrOG3BL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NDIzMg==", "bodyText": "Do you need a utility method to return a list/set of all instances of an object of this class, currently the lambda manager will need to keep track of instances on its own when calling createNewInstance()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460344232", "createdAt": "2020-07-25T01:00:38Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NDMwOA==", "bodyText": "Not currently, though it wouldn't be hard to add given that we are keeping a map of all the instances.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460344308", "createdAt": "2020-07-25T01:01:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));\n+        this.instanceId = instanceId;\n+\n+        // Only allocate these objects when they're needed, which is when this is the base instance\n+        if (instanceId == BASE_INSTANCE_ID) {\n+            lastInstanceId = new AtomicInteger(BASE_INSTANCE_ID);\n+            instances = new ConcurrentHashMap<>();\n+        }\n+        logger.dfltKv(\"serviceInstance\", String.valueOf(instanceId));\n+    }\n+\n+    /**\n+     * Create a new sub-instance of this service. Must be called on the \"base\" service instance. Subclasses can choose\n+     * to override this method if they have a different constructor than just {@link Topics} and {@code int}.\n+     *\n+     * @return the newly created instance\n+     * @throws ServiceLoadException thrown if not called on the base instance, or if constructing the new instance\n+     *                              fails\n+     */\n+    public MultiInstanceEvergreenService createNewInstance() throws ServiceLoadException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0NDIzMg=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc4MzkxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NTo0MFrOG3ocYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoxOToyMVrOG3pytA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NzQ5MQ==", "bodyText": "Do you need to add a test case for remove instances as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460987491", "createdAt": "2020-07-27T15:45:40Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -248,4 +249,34 @@ void GIVEN_running_service_WHEN_setenv_config_changes_THEN_service_restarts() th\n \n         assertTrue(serviceRestarted.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_running_service_WHEN_createNewInstance_THEN_service_has_new_instance() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_dynamic_config.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        GenericExternalService service = (GenericExternalService) kernel.locate(\"service_with_dynamic_config\");\n+        assertEquals(State.RUNNING, service.getState());\n+\n+        CountDownLatch clonedServiceRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((serviceToListenTo, oldState, newState) -> {\n+            if (\"service_with_dynamic_config-1\".equals(serviceToListenTo.getName()) && State.RUNNING.equals(newState)) {\n+                clonedServiceRunning.countDown();\n+            }\n+        });\n+\n+        MultiInstanceEvergreenService clonedService = service.createNewInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwOTU4OA==", "bodyText": "Remove is unit tested and given that all it is doing is removing it from the map, it doesn't seem necessary at all.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461009588", "createdAt": "2020-07-27T16:19:21Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/GenericExternalServiceTest.java", "diffHunk": "@@ -248,4 +249,34 @@ void GIVEN_running_service_WHEN_setenv_config_changes_THEN_service_restarts() th\n \n         assertTrue(serviceRestarted.await(5, TimeUnit.SECONDS));\n     }\n+\n+    @Test\n+    void GIVEN_running_service_WHEN_createNewInstance_THEN_service_has_new_instance() throws Exception {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"service_with_dynamic_config.yaml\").toString());\n+        CountDownLatch mainRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"main\") && newState.equals(State.RUNNING)) {\n+                mainRunning.countDown();\n+            }\n+        });\n+        kernel.launch();\n+\n+        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n+\n+        GenericExternalService service = (GenericExternalService) kernel.locate(\"service_with_dynamic_config\");\n+        assertEquals(State.RUNNING, service.getState());\n+\n+        CountDownLatch clonedServiceRunning = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((serviceToListenTo, oldState, newState) -> {\n+            if (\"service_with_dynamic_config-1\".equals(serviceToListenTo.getName()) && State.RUNNING.equals(newState)) {\n+                clonedServiceRunning.countDown();\n+            }\n+        });\n+\n+        MultiInstanceEvergreenService clonedService = service.createNewInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NzQ5MQ=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc4NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NjozNlrOG3oeug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDowNzo0MVrOG333sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA==", "bodyText": "What needs to be revisited?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r460988090", "createdAt": "2020-07-27T15:46:36Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwODMzNg==", "bodyText": "Not sure, this was just moved as-is from the inside of the Value class", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461008336", "createdAt": "2020-07-27T16:17:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMTM3Mg==", "bodyText": "I added the revisit TODO - Other methods were revisited/refactored except this one was from james' original prototype stage...\nWhy are we moving it out to Context? Any method needs to call from Context?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461231372", "createdAt": "2020-07-27T23:40:10Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNDQ4Mg==", "bodyText": "We need it in the lambda manager to create new instances of the service. Each instances has fields which need to get injected.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461234482", "createdAt": "2020-07-27T23:49:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODc1Mg==", "bodyText": "I imagine that we could add a new method like context.getNewInstance(ObjectA.class) to provide prototype injection, over the current singleton injection capability.\nI bet you need the power of injectFields but I still think it's better to keep the InjectFields private since it mutates the object internals with reflections. Exposing this as a public method seems very dangerous...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461238752", "createdAt": "2020-07-28T00:03:02Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDI0MQ==", "bodyText": "Can't do it because I need to give the constructor extra parameters that the context won't have.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461240241", "createdAt": "2020-07-28T00:07:41Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/dependency/Context.java", "diffHunk": "@@ -300,6 +300,97 @@ private boolean onPublishThread() {\n         return Thread.currentThread() == publishThread;\n     }\n \n+    /**\n+     * Use to manually inject dependencies into the fields of a class using the values in the\n+     * current Context. Use with caution because you should not inject fields into a class multiple times\n+     * as it will trigger the pre and post lifecycle methods each time.\n+     *\n+     * @param object Object to inject fields into\n+     */\n+    @SuppressFBWarnings(\"DP_DO_INSIDE_DO_PRIVILEGED\")\n+    @SuppressWarnings({\"PMD.AvoidCatchingThrowable\"})\n+    public void injectFields(Object object) {\n+        // TODO Revisit this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODA5MA=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzg2NjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowNToxOVrOG3pPrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxNzoxMVrOG3uE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDYyMg==", "bodyText": "Does this mean, for non-pinned lambdas, there will be always at least one service instance running? How would the base instance get started? Similar to other components?\nAlso, it's a bit wasteful if at least one instance of the non-pinned lambdas are always running. It kinda defeats the purpose of having non-pinned lambdas.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461000622", "createdAt": "2020-07-27T16:05:19Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwODY0Ng==", "bodyText": "No, if you don't want a service to run, then just requestStop.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461008646", "createdAt": "2020-07-27T16:17:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDYyMg=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTgwNQ==", "bodyText": "As discussed offline this is still an issue, will resolve in follow-up PR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461079805", "createdAt": "2020-07-27T18:17:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDYyMg=="}, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIyNzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNjo1OVrOG3ssPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNjo1OVrOG3ssPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA4NQ==", "bodyText": "Curious how does lifecycle work for the child instances?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461057085", "createdAt": "2020-07-27T17:36:59Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIzMjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozODoyMVrOG3svGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozODoyMVrOG3svGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzgxNw==", "bodyText": "Is it that all service instances share the same root topics ( and state topic) ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461057817", "createdAt": "2020-07-27T17:38:21Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/MultiInstanceEvergreenService.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Amazon.com Inc. or its affiliates.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topics;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n+import lombok.Getter;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import javax.annotation.Nullable;\n+\n+public class MultiInstanceEvergreenService extends EvergreenService {\n+    protected static final int BASE_INSTANCE_ID = 0;\n+    public static final String INSTANCES_NAMESPACE_KEY = \"instances\";\n+    protected AtomicInteger lastInstanceId;\n+    @Getter\n+    private final int instanceId;\n+    private Map<Integer, MultiInstanceEvergreenService> instances;\n+\n+    MultiInstanceEvergreenService(Topics topics, int instanceId) {\n+        super(topics, topics.lookupTopics(RUNTIME_STORE_NAMESPACE_TOPIC, INSTANCES_NAMESPACE_KEY,\n+                String.valueOf(instanceId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "049198e507791f7f0c9ddfb79e196b7c1568b6c7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODc2NzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxMzoxNFrOG3x3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxMzoxNFrOG3x3tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0MTk0Mg==", "bodyText": "lifecycle can get privateConfig from EvergreenService.getPrivateConfig(), probably no need to pass everything around", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461141942", "createdAt": "2020-07-27T20:13:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {\n         this.config = topics;\n+        this.privateConfig = privateConfig;\n         this.context = topics.getContext();\n \n         // TODO: Validate syntax for lifecycle keywords and fail early\n         // skipif will require validation for onpath/exists etc. keywords\n \n-        this.logger = LogManager.getLogger(getName());\n-        logger.dfltKv(SERVICE_NAME_KEY, getName());\n+        this.logger = LogManager.getLogger(getServiceName()).createChild();\n+        logger.dfltKv(SERVICE_NAME_KEY, getServiceName());\n         logger.dfltKv(CURRENT_STATE_METRIC_NAME, (Supplier<State>) this::getState);\n \n         this.externalDependenciesTopic =\n                 topics.createLeafChild(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC).dflt(new ArrayList<String>());\n         this.externalDependenciesTopic.withParentNeedsToKnow(false);\n-        this.lifecycle = new Lifecycle(this, logger);\n+        this.lifecycle = new Lifecycle(this, logger, privateConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODc4NzU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxOTozNlrOG3yEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxOTozNlrOG3yEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTE3OA==", "bodyText": "shouldn't this be private store topic?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461145178", "createdAt": "2020-07-27T20:19:36Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -41,7 +41,7 @@ void GIVEN_a_config_WHEN_constructor_is_called_THEN_service_is_initialized() {\n         // THEN\n         // verify config\n         Assertions.assertSame(config, evergreenService.config);\n-        Mockito.verify(config).createLeafChild(STATE_TOPIC_NAME);\n+        Mockito.verify(runtimeStoreTopic).createLeafChild(STATE_TOPIC_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODc5MzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/LifecycleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyMTowOFrOG3yH9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyMTowOFrOG3yH9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NjEwMw==", "bodyText": "In  EvergreenService you initialize this.lifecycle = new Lifecycle(this, logger, privateConfig);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461146103", "createdAt": "2020-07-27T20:21:08Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/LifecycleTest.java", "diffHunk": "@@ -111,7 +113,7 @@ void stop() throws IOException {\n \n     @Test\n     public void GIVEN_state_new_WHEN_requestStart_called_THEN_install_invoked() throws InterruptedException {\n-        lifecycle = new Lifecycle(evergreenService, logger);\n+        lifecycle = new Lifecycle(evergreenService, logger, evergreenService.getRuntimeConfig());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070054fd001c5b7c5c5630bda13bc1a3bd0556f9"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODg3MDI4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MzowNlrOG3y1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDo0MzowNlrOG3y1nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1Nzc4OA==", "bodyText": "NIT: i know tests can pass, but it'll be confusing later. Can you update this to privateConfigTopics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461157788", "createdAt": "2020-07-27T20:43:06Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/ShellRunnerTest.java", "diffHunk": "@@ -41,9 +43,15 @@\n     void beforeEach() {\n         Topics config = initializeMockedConfig();\n         Topics serviceRuntimeTopics = mock(Topics.class);\n+        Topic mockTopic = mock(Topic.class);\n \n-        when(config.lookupTopics(EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC)).thenReturn(serviceRuntimeTopics);\n+        when(config.lookupTopics(EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC)).thenReturn(serviceRuntimeTopics);\n         when(serviceRuntimeTopics.findLeafChild(SERVICE_UNIQUE_ID_KEY)).thenReturn(uniqueId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56bf227e33e5fd44b1d28eddf16627810a5c94bd"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA4NzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MTozN1rOG305zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowNzozNlrOG31UHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTYzMA==", "bodyText": "For lack of documentation elsewhere, update the comment at the top of this method to reflect the changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461191630", "createdAt": "2020-07-27T21:51:37Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -289,13 +289,17 @@ private static UpdateBehaviorTree createDeploymentMergeBehavior() {\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.REPLACE);\n         UpdateBehaviorTree serviceRuntimeMergeBehavior =\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n+        UpdateBehaviorTree servicePrivateMergeBehavior =\n+                new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n \n         rootMergeBehavior.getChildOverride().put(SERVICES_NAMESPACE_TOPIC, servicesMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(UpdateBehaviorTree.WILDCARD, insideServiceMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(AUTH_TOKEN_LOOKUP_KEY,\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE));\n         insideServiceMergeBehavior.getChildOverride().put(\n                 EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC, serviceRuntimeMergeBehavior);\n+        insideServiceMergeBehavior.getChildOverride().put(\n+                EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC, servicePrivateMergeBehavior);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5ODM2Nw==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461198367", "createdAt": "2020-07-27T22:07:36Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentConfigMerger.java", "diffHunk": "@@ -289,13 +289,17 @@ private static UpdateBehaviorTree createDeploymentMergeBehavior() {\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.REPLACE);\n         UpdateBehaviorTree serviceRuntimeMergeBehavior =\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n+        UpdateBehaviorTree servicePrivateMergeBehavior =\n+                new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE);\n \n         rootMergeBehavior.getChildOverride().put(SERVICES_NAMESPACE_TOPIC, servicesMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(UpdateBehaviorTree.WILDCARD, insideServiceMergeBehavior);\n         servicesMergeBehavior.getChildOverride().put(AUTH_TOKEN_LOOKUP_KEY,\n                 new UpdateBehaviorTree(UpdateBehaviorTree.UpdateBehavior.MERGE));\n         insideServiceMergeBehavior.getChildOverride().put(\n                 EvergreenService.RUNTIME_STORE_NAMESPACE_TOPIC, serviceRuntimeMergeBehavior);\n+        insideServiceMergeBehavior.getChildOverride().put(\n+                EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC, servicePrivateMergeBehavior);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTYzMA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTExMjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMDoyOFrOG31I9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowODoyMlrOG31VMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTUwOQ==", "bodyText": "I believe this will be used for creating the 'main' instance of the service. Update the comments to highlight the same if it makes sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461195509", "createdAt": "2020-07-27T22:00:28Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5ODY0MQ==", "bodyText": "Yes and no. I moved the multi-instance stuff out of the kernel, so in theory the kernel has no knowledge about multiple instances, so I'd not necessarily want to update the comment to reflect something that the kernel doesn't actually do.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461198641", "createdAt": "2020-07-27T22:08:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTUwOQ=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTExNDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMToxNFrOG31KQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzo1MToyM1rOG33jUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA==", "bodyText": "Would it be better to call it instanceConfig?\nThat's what I understand this is being used to facilitate.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461195840", "createdAt": "2020-07-27T22:01:14Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5ODgxOQ==", "bodyText": "Likewise here, kernel doesn't actually know about instances in theory. I can update it you think that makes more sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461198819", "createdAt": "2020-07-27T22:08:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjczOA==", "bodyText": "If kernel does not know then why such a constructor? What is privateConfig from kernel perspective and how is it different from topics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461226738", "createdAt": "2020-07-27T23:25:17Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNzY0OA==", "bodyText": "\"Why such a constructor\" because there's no other way to do this given the way Java constructs classes.\nIdeally this change wouldn't have been necessary, but it was. So, I think that \"privateConfig\" is more clear that these topics are entirely private vs. \"instanceConfig\" which brings in an idea which is outside of the kernel.\nThe primary use for the private config is that that is where the state topic is stored for the Lifecycle class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461227648", "createdAt": "2020-07-27T23:28:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMzIxMg==", "bodyText": "Could privateConfig store things other than the data for instanceConfig?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461233212", "createdAt": "2020-07-27T23:45:41Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNTAyNA==", "bodyText": "It should store anything that can't be shared between 2 instances of the same service, which I'm considering private in the kernel.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/327#discussion_r461235024", "createdAt": "2020-07-27T23:51:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -68,27 +70,37 @@\n     // Service logger instance\n     protected final Logger logger;\n \n-\n     /**\n      * Constructor for EvergreenService.\n      *\n      * @param topics root Configuration topic for this service\n      */\n     public EvergreenService(Topics topics) {\n+        this(topics, topics.lookupTopics(PRIVATE_STORE_NAMESPACE_TOPIC));\n+    }\n+\n+    /**\n+     * Constructor for EvergreenService.\n+     *\n+     * @param topics        root Configuration topic for this service\n+     * @param privateConfig root configuration topic for the service's private config which must not be shared\n+     */\n+    public EvergreenService(Topics topics, Topics privateConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTg0MA=="}, "originalCommit": {"oid": "2803f39be07bea18c4d9b65526ac12e84c7d0a51"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}