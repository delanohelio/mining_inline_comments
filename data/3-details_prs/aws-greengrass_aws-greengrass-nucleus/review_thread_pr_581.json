{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDg1ODg1", "number": 581, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzowOTo1OFrOE0rhCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1OTo1NVrOE1C4iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjc0Mzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzowOTo1OFrOHsiNlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo0Mzo1NFrOHtBhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1OTkyNw==", "bodyText": "Too many auto formatting :) Here is the real change.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516459927", "createdAt": "2020-11-03T07:09:58Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -465,9 +467,24 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n                     break;\n                 case IOT_JOBS:\n                 case SHADOW:\n-                    FleetConfiguration config = SerializerFactory.getJsonObjectMapper()\n-                            .readValue(jobDocumentString, FleetConfiguration.class);\n-                    document = DeploymentDocumentConverter.convertFromFleetConfiguration(config);\n+                    JsonNode jsonNode =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a167e0d9c24e52026044c77b3d6ca39ed5be1d6"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MjgwNg==", "bodyText": "hah thanks", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516972806", "createdAt": "2020-11-03T21:43:54Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -465,9 +467,24 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n                     break;\n                 case IOT_JOBS:\n                 case SHADOW:\n-                    FleetConfiguration config = SerializerFactory.getJsonObjectMapper()\n-                            .readValue(jobDocumentString, FleetConfiguration.class);\n-                    document = DeploymentDocumentConverter.convertFromFleetConfiguration(config);\n+                    JsonNode jsonNode =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1OTkyNw=="}, "originalCommit": {"oid": "4a167e0d9c24e52026044c77b3d6ca39ed5be1d6"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTgxODY5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo0MToxMlrOHs_suA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMTozOVrOHtBLow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0MzAzMg==", "bodyText": "Do we have an enum yet for these target types?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516943032", "createdAt": "2020-11-03T20:41:12Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -372,38 +370,34 @@ private static void cleanUpTestComponentArtifactsFromS3() {\n     }\n \n     @SuppressWarnings(\"PMD.LinguisticNaming\")\n-    protected PublishConfigurationResult setAndPublishFleetConfiguration(SetConfigurationRequest setRequest) {\n+    protected CreateDeploymentResult draftAndCreateDeployment(CreateDeploymentRequest createDeploymentRequest) {\n \n         // update package name with random suffix to avoid conflict in cloud\n-        Map<String, PackageMetaData> updatedPkgMetadata = new HashMap<>();\n-        setRequest.getPackages().forEach((key, val) -> updatedPkgMetadata.put(getTestComponentNameInCloud(key), val));\n-        setRequest.setPackages(updatedPkgMetadata);\n+        Map<String, ComponentInfo> updatedPkgMetadata = new HashMap<>();\n+        createDeploymentRequest.getComponents().forEach((key, val) -> updatedPkgMetadata.put(getTestComponentNameInCloud(key), val));\n+        createDeploymentRequest.setComponents(updatedPkgMetadata);\n \n         // set default value\n-        if (setRequest.getDeploymentPolicies() == null) {\n-            setRequest.withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                    .withComponentUpdatePolicy(\n-                            new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                    .withTimeout(120))\n-                    .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING));\n+        if (createDeploymentRequest.getTargetName() == null) {\n+            createDeploymentRequest.withTargetName(thingGroupName);\n         }\n-\n-        logger.atInfo().kv(\"setRequest\", setRequest).log();\n-        SetConfigurationResult setResult = greengrassClient.setConfiguration(setRequest);\n-        logger.atInfo().kv(\"setResult\", setResult).log();\n-\n-        PublishConfigurationRequest publishRequest = new PublishConfigurationRequest()\n-                .withTargetName(setRequest.getTargetName())\n-                .withTargetType(setRequest.getTargetType())\n-                .withRevisionId(setResult.getRevisionId());\n-        logger.atInfo().kv(\"publishRequest\", publishRequest).log();\n-        PublishConfigurationResult publishResult = greengrassClient.publishConfiguration(publishRequest);\n-        logger.atInfo().kv(\"publishResult\", publishResult).log();\n-        if (setRequest.getTargetType().equals(THING_GROUP_TARGET_TYPE)) {\n-            createdIotJobIds.add(publishResult.getJobId());\n+        if (createDeploymentRequest.getTargetType() == null) {\n+            createDeploymentRequest.withTargetType(THING_GROUP_TARGET_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NzMzMQ==", "bodyText": "Nah. Will open a thread to ask when we will have it. https://code.amazon.com/packages/EvergreenFleetConfigurationServiceModel/blobs/7f3d14a8495f9706bbc17c9bbfdbebd6a0b5aa44/--/model/CreateDeployment.xml#L24", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516967331", "createdAt": "2020-11-03T21:31:39Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -372,38 +370,34 @@ private static void cleanUpTestComponentArtifactsFromS3() {\n     }\n \n     @SuppressWarnings(\"PMD.LinguisticNaming\")\n-    protected PublishConfigurationResult setAndPublishFleetConfiguration(SetConfigurationRequest setRequest) {\n+    protected CreateDeploymentResult draftAndCreateDeployment(CreateDeploymentRequest createDeploymentRequest) {\n \n         // update package name with random suffix to avoid conflict in cloud\n-        Map<String, PackageMetaData> updatedPkgMetadata = new HashMap<>();\n-        setRequest.getPackages().forEach((key, val) -> updatedPkgMetadata.put(getTestComponentNameInCloud(key), val));\n-        setRequest.setPackages(updatedPkgMetadata);\n+        Map<String, ComponentInfo> updatedPkgMetadata = new HashMap<>();\n+        createDeploymentRequest.getComponents().forEach((key, val) -> updatedPkgMetadata.put(getTestComponentNameInCloud(key), val));\n+        createDeploymentRequest.setComponents(updatedPkgMetadata);\n \n         // set default value\n-        if (setRequest.getDeploymentPolicies() == null) {\n-            setRequest.withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                    .withComponentUpdatePolicy(\n-                            new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                    .withTimeout(120))\n-                    .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING));\n+        if (createDeploymentRequest.getTargetName() == null) {\n+            createDeploymentRequest.withTargetName(thingGroupName);\n         }\n-\n-        logger.atInfo().kv(\"setRequest\", setRequest).log();\n-        SetConfigurationResult setResult = greengrassClient.setConfiguration(setRequest);\n-        logger.atInfo().kv(\"setResult\", setResult).log();\n-\n-        PublishConfigurationRequest publishRequest = new PublishConfigurationRequest()\n-                .withTargetName(setRequest.getTargetName())\n-                .withTargetType(setRequest.getTargetType())\n-                .withRevisionId(setResult.getRevisionId());\n-        logger.atInfo().kv(\"publishRequest\", publishRequest).log();\n-        PublishConfigurationResult publishResult = greengrassClient.publishConfiguration(publishRequest);\n-        logger.atInfo().kv(\"publishResult\", publishResult).log();\n-        if (setRequest.getTargetType().equals(THING_GROUP_TARGET_TYPE)) {\n-            createdIotJobIds.add(publishResult.getJobId());\n+        if (createDeploymentRequest.getTargetType() == null) {\n+            createDeploymentRequest.withTargetType(THING_GROUP_TARGET_TYPE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0MzAzMg=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTgzMzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/model/ComponentUpdatePolicy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo0NjowMFrOHs_1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxMjo0MFrOHtDxow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTMxMQ==", "bodyText": "why is this the default? Should the default be to wait forever?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516945311", "createdAt": "2020-11-03T20:46:00Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -23,8 +23,9 @@\n @EqualsAndHashCode\n @ToString\n public class ComponentUpdatePolicy {\n+\n     @JsonProperty(\"Timeout\")\n-    private Integer timeout;\n+    private Integer timeout = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2Mzc2Nw==", "bodyText": "Good catch. Got these from @shaguptashaikh . Could you help?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516963767", "createdAt": "2020-11-03T21:24:08Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -23,8 +23,9 @@\n @EqualsAndHashCode\n @ToString\n public class ComponentUpdatePolicy {\n+\n     @JsonProperty(\"Timeout\")\n-    private Integer timeout;\n+    private Integer timeout = 60;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTMxMQ=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwOTgyNw==", "bodyText": "The default is 60s based on an old conversation between me, Fahad and Finn, Fahad knows more. We can't wait forever because components can only report if they want to DEFER the update and for how long, they don't have a way of saying they are okay with the deployment, them not responding within the timeout is taken as a go ahead from them, so can't wait forever", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517009827", "createdAt": "2020-11-03T23:12:40Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/model/ComponentUpdatePolicy.java", "diffHunk": "@@ -23,8 +23,9 @@\n @EqualsAndHashCode\n @ToString\n public class ComponentUpdatePolicy {\n+\n     @JsonProperty(\"Timeout\")\n-    private Integer timeout;\n+    private Integer timeout = 60;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTMxMQ=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTgzNDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/model/DeploymentDocument.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo0NjoyNVrOHs_2Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzoxMzoyNlrOHtDykQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTUwMw==", "bodyText": "not sure this is the correct default.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516945503", "createdAt": "2020-11-03T20:46:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -51,10 +51,12 @@\n     private Long timestamp;\n \n     @JsonProperty(\"FailureHandlingPolicy\")\n-    private FailureHandlingPolicy failureHandlingPolicy;\n+    @Builder.Default\n+    private FailureHandlingPolicy failureHandlingPolicy = FailureHandlingPolicy.ROLLBACK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2MzgzOA==", "bodyText": "same as above", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516963838", "createdAt": "2020-11-03T21:24:15Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -51,10 +51,12 @@\n     private Long timestamp;\n \n     @JsonProperty(\"FailureHandlingPolicy\")\n-    private FailureHandlingPolicy failureHandlingPolicy;\n+    @Builder.Default\n+    private FailureHandlingPolicy failureHandlingPolicy = FailureHandlingPolicy.ROLLBACK;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTUwMw=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxMDA2NQ==", "bodyText": "This default should be ROLLBACK, and customers can change it to DO_NOTHING if they want to", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517010065", "createdAt": "2020-11-03T23:13:26Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -51,10 +51,12 @@\n     private Long timestamp;\n \n     @JsonProperty(\"FailureHandlingPolicy\")\n-    private FailureHandlingPolicy failureHandlingPolicy;\n+    @Builder.Default\n+    private FailureHandlingPolicy failureHandlingPolicy = FailureHandlingPolicy.ROLLBACK;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NTUwMw=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTg0NjUwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/ipc/recipes/Component1-1.0.0.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1MDowMFrOHs_9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozMDowMFrOHtBImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzI4OQ==", "bodyText": "change these to the new format too: {artifacts:path} so we can get rid of the old format soon.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516947289", "createdAt": "2020-11-03T20:50:00Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/ipc/recipes/Component1-1.0.0.yaml", "diffHunk": "@@ -3,19 +3,22 @@ ComponentName: Component1\n ComponentDescription: Test Component\n ComponentPublisher: Me\n ComponentVersion: '1.0.0'\n+ComponentConfiguration:\n+  DefaultConfiguration:\n+    Message: 'World'\n+\n Manifests:\n+  - Platform:\n+      os: windows\n+    Lifecycle:\n+      run: |-\n+        powershell -command echo {configuration:/Message}; sleep -m 100\n+    Artifacts:\n+      - URI: greengrass:run.sh\n   - Platform:\n       os: all\n-    Parameters:\n-      - name: Message\n-        value: 'World'\n-        type: STRING\n     Lifecycle:\n-      run:\n-        windows:\n-          powershell -command echo {{params:Message.value}}; sleep -m 100\n-        posix:\n-          sh {{artifacts:path}}/run.sh; echo {{params:Message.value}}; sleep 100\n-\n+      run: |-\n+        sh {{artifacts:path}}/run.sh; echo {configuration:/Message}; sleep 100", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NjU1Mg==", "bodyText": "good catch. done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516966552", "createdAt": "2020-11-03T21:30:00Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/ipc/recipes/Component1-1.0.0.yaml", "diffHunk": "@@ -3,19 +3,22 @@ ComponentName: Component1\n ComponentDescription: Test Component\n ComponentPublisher: Me\n ComponentVersion: '1.0.0'\n+ComponentConfiguration:\n+  DefaultConfiguration:\n+    Message: 'World'\n+\n Manifests:\n+  - Platform:\n+      os: windows\n+    Lifecycle:\n+      run: |-\n+        powershell -command echo {configuration:/Message}; sleep -m 100\n+    Artifacts:\n+      - URI: greengrass:run.sh\n   - Platform:\n       os: all\n-    Parameters:\n-      - name: Message\n-        value: 'World'\n-        type: STRING\n     Lifecycle:\n-      run:\n-        windows:\n-          powershell -command echo {{params:Message.value}}; sleep -m 100\n-        posix:\n-          sh {{artifacts:path}}/run.sh; echo {{params:Message.value}}; sleep 100\n-\n+      run: |-\n+        sh {{artifacts:path}}/run.sh; echo {configuration:/Message}; sleep 100", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzI4OQ=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTg0ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1MDo0OVrOHs_-0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToyODoyNVrOHtBFiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzY2Nw==", "bodyText": "flip this .equals so that a NPE isn't possible", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516947667", "createdAt": "2020-11-03T20:50:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -197,17 +200,17 @@ protected void startup() throws InterruptedException {\n                 if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n                     // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n                     // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null\n-                            && currentDeploymentTaskMetadata.getDeploymentType().equals(DeploymentType.SHADOW)) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NTc2OA==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516965768", "createdAt": "2020-11-03T21:28:25Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -197,17 +200,17 @@ protected void startup() throws InterruptedException {\n                 if (deployment.getDeploymentType().equals(DeploymentType.SHADOW)) {\n                     // A new device deployment invalidates the previous deployment, cancel the ongoing device deployment\n                     // and wait till the new device deployment can be picked up.\n-                    if (currentDeploymentTaskMetadata != null\n-                            && currentDeploymentTaskMetadata.getDeploymentType().equals(DeploymentType.SHADOW)) {\n+                    if (currentDeploymentTaskMetadata != null && currentDeploymentTaskMetadata.getDeploymentType()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0NzY2Nw=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTg1MDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMDo1MToyNVrOHtAAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToyNzo1NVrOHtBEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0Nzk5Mw==", "bodyText": "needs a space before the need", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516947993", "createdAt": "2020-11-03T20:51:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -356,13 +358,13 @@ private void cancelCurrentDeployment() {\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n-                                    + \"need to wait for it to finish\");\n+                                         + \"need to wait for it to finish\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2NTU2OA==", "bodyText": "done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r516965568", "createdAt": "2020-11-03T21:27:55Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -356,13 +358,13 @@ private void cancelCurrentDeployment() {\n                 } else {\n                     logger.atInfo().kv(DEPLOYMENT_ID_LOG_KEY_NAME, currentDeploymentTaskMetadata.getDeploymentId())\n                             .log(\"Deployment is in a stage where it cannot be cancelled,\"\n-                                    + \"need to wait for it to finish\");\n+                                         + \"need to wait for it to finish\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk0Nzk5Mw=="}, "originalCommit": {"oid": "d1335d897d18367668cc3895bc6a2b26e5358067"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDUwNTUwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMToyMjoyM1rOHtGBZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMToyNjowOFrOHtGFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0NjYzMA==", "bodyText": "DeploymentConfiguration -> camel case", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517046630", "createdAt": "2020-11-04T01:22:23Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -177,10 +177,10 @@ public void onStreamClosed() {\n     }\n \n     private void submitSampleJobDocument(URI uri, String arn, DeploymentType type) throws Exception {\n-        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.readValue(new File(uri), FleetConfiguration.class);\n-        fleetConfiguration.setCreationTimestamp(System.currentTimeMillis());\n-        fleetConfiguration.setConfigurationArn(arn);\n-        Deployment deployment = new Deployment(OBJECT_MAPPER.writeValueAsString(fleetConfiguration), type, fleetConfiguration.getConfigurationArn());\n+        Configuration DeploymentConfiguration = OBJECT_MAPPER.readValue(new File(uri), Configuration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0NzY0Mw==", "bodyText": "oh god. Thanks. Let me know if anything else. Build passes and hopefully we can merge it in after one more build and only 20 min.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517047643", "createdAt": "2020-11-04T01:26:08Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -177,10 +177,10 @@ public void onStreamClosed() {\n     }\n \n     private void submitSampleJobDocument(URI uri, String arn, DeploymentType type) throws Exception {\n-        FleetConfiguration fleetConfiguration = OBJECT_MAPPER.readValue(new File(uri), FleetConfiguration.class);\n-        fleetConfiguration.setCreationTimestamp(System.currentTimeMillis());\n-        fleetConfiguration.setConfigurationArn(arn);\n-        Deployment deployment = new Deployment(OBJECT_MAPPER.writeValueAsString(fleetConfiguration), type, fleetConfiguration.getConfigurationArn());\n+        Configuration DeploymentConfiguration = OBJECT_MAPPER.readValue(new File(uri), Configuration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0NjYzMA=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU0MDA1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo0MDo1OFrOHtGVVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1NjoyMVrOHtGkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1MTczNA==", "bodyText": "why is this needed? and the string is an identifier / tag for the update action so it's just the deployment id", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517051734", "createdAt": "2020-11-04T01:40:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -674,44 +657,62 @@ public void onStreamClosed() {\n \n             // Second deployment to update the service which is currently running an important task so deployment should\n             // keep waiting for a safe time to update\n-            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo\n-                    .getThingName(), Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+            CreateDeploymentRequest createDeploymentRequest2 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result2 = draftAndCreateDeployment(createDeploymentRequest2);\n+            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, result2.getJobId(), thingInfo.getThingName(),\n+                    Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n \n             // Create one more deployment so that it's queued in cloud\n-            SetConfigurationRequest setRequest3 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+            CreateDeploymentRequest createDeploymentRequest3 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result3 = draftAndCreateDeployment(createDeploymentRequest3);\n \n             // Wait for the second deployment to start waiting for safe time to update and\n             // then cancel it's corresponding job from cloud\n             assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-            assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            UpdateSystemSafelyService updateSystemSafelyService = kernel.getContext().get(UpdateSystemSafelyService.class);\n+            assertThat(\"The UpdateSystemService should have one pending action.\",\n+                    updateSystemSafelyService.getPendingActions(),\n+                    IsCollectionWithSize.hasSize(1));\n+            // Get the value of the pending Action\n+            String pendingAction = updateSystemSafelyService.getPendingActions().iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 517}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NTU3Mg==", "bodyText": "Not sure as we just migrated it. My guess is that it wants to verify as a double check so that it doesn't only rely on the log text matching.\nAnd the deployment id is a different story.  In short, cloud now returns an obfuscated UUID from control plane, but passes the original fleetConfigArn via data plane, which will be the tag. So we can't verify here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517055572", "createdAt": "2020-11-04T01:56:21Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -674,44 +657,62 @@ public void onStreamClosed() {\n \n             // Second deployment to update the service which is currently running an important task so deployment should\n             // keep waiting for a safe time to update\n-            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo\n-                    .getThingName(), Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+            CreateDeploymentRequest createDeploymentRequest2 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result2 = draftAndCreateDeployment(createDeploymentRequest2);\n+            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, result2.getJobId(), thingInfo.getThingName(),\n+                    Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n \n             // Create one more deployment so that it's queued in cloud\n-            SetConfigurationRequest setRequest3 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+            CreateDeploymentRequest createDeploymentRequest3 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result3 = draftAndCreateDeployment(createDeploymentRequest3);\n \n             // Wait for the second deployment to start waiting for safe time to update and\n             // then cancel it's corresponding job from cloud\n             assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-            assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            UpdateSystemSafelyService updateSystemSafelyService = kernel.getContext().get(UpdateSystemSafelyService.class);\n+            assertThat(\"The UpdateSystemService should have one pending action.\",\n+                    updateSystemSafelyService.getPendingActions(),\n+                    IsCollectionWithSize.hasSize(1));\n+            // Get the value of the pending Action\n+            String pendingAction = updateSystemSafelyService.getPendingActions().iterator().next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1MTczNA=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 517}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU0MTAwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo0MTozMVrOHtGV3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1NjoyOFrOHtGkcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1MTg2OA==", "bodyText": "Same here, why do we need it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517051868", "createdAt": "2020-11-04T01:41:31Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -674,44 +657,62 @@ public void onStreamClosed() {\n \n             // Second deployment to update the service which is currently running an important task so deployment should\n             // keep waiting for a safe time to update\n-            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo\n-                    .getThingName(), Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+            CreateDeploymentRequest createDeploymentRequest2 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result2 = draftAndCreateDeployment(createDeploymentRequest2);\n+            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, result2.getJobId(), thingInfo.getThingName(),\n+                    Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n \n             // Create one more deployment so that it's queued in cloud\n-            SetConfigurationRequest setRequest3 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+            CreateDeploymentRequest createDeploymentRequest3 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result3 = draftAndCreateDeployment(createDeploymentRequest3);\n \n             // Wait for the second deployment to start waiting for safe time to update and\n             // then cancel it's corresponding job from cloud\n             assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-            assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            UpdateSystemSafelyService updateSystemSafelyService = kernel.getContext().get(UpdateSystemSafelyService.class);\n+            assertThat(\"The UpdateSystemService should have one pending action.\",\n+                    updateSystemSafelyService.getPendingActions(),\n+                    IsCollectionWithSize.hasSize(1));\n+            // Get the value of the pending Action\n+            String pendingAction = updateSystemSafelyService.getPendingActions().iterator().next();\n \n             // GG_NEEDS_REVIEW: TODO : Call Fleet configuration service's cancel API when ready instead of calling IoT Jobs API\n-            IotJobsUtils.cancelJob(iotClient, publishResult2.getJobId());\n+            IotJobsUtils.cancelJob(iotClient, result2.getJobId());\n \n             // Wait for indication that cancellation has gone through\n             assertTrue(deploymentCancelled.await(240, TimeUnit.SECONDS));\n-            assertFalse(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            // the third deployment may have reached device.\n+            Set<String> pendingActions = updateSystemSafelyService.getPendingActions();\n+            if (pendingActions.size() == 1) {\n+                String newPendingAction = pendingActions.iterator().next();\n+                assertNotEquals(pendingAction, newPendingAction, \"The UpdateSystemService's one pending action should be be replaced.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 530}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NTYwMg==", "bodyText": "same as above.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517055602", "createdAt": "2020-11-04T01:56:28Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -674,44 +657,62 @@ public void onStreamClosed() {\n \n             // Second deployment to update the service which is currently running an important task so deployment should\n             // keep waiting for a safe time to update\n-            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo\n-                    .getThingName(), Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+            CreateDeploymentRequest createDeploymentRequest2 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result2 = draftAndCreateDeployment(createDeploymentRequest2);\n+            IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, result2.getJobId(), thingInfo.getThingName(),\n+                    Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n \n             // Create one more deployment so that it's queued in cloud\n-            SetConfigurationRequest setRequest3 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n-                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120)).withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING)\n-                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-            PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+            CreateDeploymentRequest createDeploymentRequest3 = new CreateDeploymentRequest()\n+                    .withDeploymentPolicies(new DeploymentPolicies()\n+                            .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                            .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n+                                    new ComponentUpdatePolicy()\n+                                            .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n+                                            .withTimeout(120)))\n+                    .addComponentsEntry(\"NonDisruptableService\", new ComponentInfo().withVersion(\"1.0.1\"));\n+            CreateDeploymentResult result3 = draftAndCreateDeployment(createDeploymentRequest3);\n \n             // Wait for the second deployment to start waiting for safe time to update and\n             // then cancel it's corresponding job from cloud\n             assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-            assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            UpdateSystemSafelyService updateSystemSafelyService = kernel.getContext().get(UpdateSystemSafelyService.class);\n+            assertThat(\"The UpdateSystemService should have one pending action.\",\n+                    updateSystemSafelyService.getPendingActions(),\n+                    IsCollectionWithSize.hasSize(1));\n+            // Get the value of the pending Action\n+            String pendingAction = updateSystemSafelyService.getPendingActions().iterator().next();\n \n             // GG_NEEDS_REVIEW: TODO : Call Fleet configuration service's cancel API when ready instead of calling IoT Jobs API\n-            IotJobsUtils.cancelJob(iotClient, publishResult2.getJobId());\n+            IotJobsUtils.cancelJob(iotClient, result2.getJobId());\n \n             // Wait for indication that cancellation has gone through\n             assertTrue(deploymentCancelled.await(240, TimeUnit.SECONDS));\n-            assertFalse(kernel.getContext().get(UpdateSystemSafelyService.class).hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            // the third deployment may have reached device.\n+            Set<String> pendingActions = updateSystemSafelyService.getPendingActions();\n+            if (pendingActions.size() == 1) {\n+                String newPendingAction = pendingActions.iterator().next();\n+                assertNotEquals(pendingAction, newPendingAction, \"The UpdateSystemService's one pending action should be be replaced.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1MTg2OA=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 530}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU1NTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo0OTo1MFrOHtGeEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowNTo0MlrOHtGtzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1Mzk2OQ==", "bodyText": "For TODOs we need to create SIMs in this folder for tracking them appropriately if they are release blockers, and this does sound like something we should clean up before release? https://issues.amazon.com/issues/search?q=status%3A(Open)+in%3A(09c8bedb-c771-4a5b-a8a8-409bc1758e3d)&sort=lastUpdatedDate+desc&selectedDocument=54e3fb2d-e2d0-48db-a2db-067d4121c09d Not blocking the CR but a SIM needs to be created for it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517053969", "createdAt": "2020-11-04T01:49:50Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -472,9 +475,24 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n                     break;\n                 case IOT_JOBS:\n                 case SHADOW:\n-                    FleetConfiguration config = SerializerFactory.getJsonObjectMapper()\n-                            .readValue(jobDocumentString, FleetConfiguration.class);\n-                    document = DeploymentDocumentConverter.convertFromFleetConfiguration(config);\n+                    JsonNode jsonNode =\n+                            SerializerFactory.getJsonObjectMapper().readValue(jobDocumentString, JsonNode.class);\n+\n+                    if (jsonNode.has(\"packages\")) {\n+                        // If \"packages\" exists, the document is in the old format, which is\n+                        // the result of Set/PublishConfiguration\n+                        // TODO remove after migrating off Set/PublishConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1Nzk5Nw==", "bodyText": "done: https://issues.amazon.com/issues/P41383716", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517057997", "createdAt": "2020-11-04T02:05:42Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -472,9 +475,24 @@ private DeploymentDocument parseAndValidateJobDocument(Deployment deployment) th\n                     break;\n                 case IOT_JOBS:\n                 case SHADOW:\n-                    FleetConfiguration config = SerializerFactory.getJsonObjectMapper()\n-                            .readValue(jobDocumentString, FleetConfiguration.class);\n-                    document = DeploymentDocumentConverter.convertFromFleetConfiguration(config);\n+                    JsonNode jsonNode =\n+                            SerializerFactory.getJsonObjectMapper().readValue(jobDocumentString, JsonNode.class);\n+\n+                    if (jsonNode.has(\"packages\")) {\n+                        // If \"packages\" exists, the document is in the old format, which is\n+                        // the result of Set/PublishConfiguration\n+                        // TODO remove after migrating off Set/PublishConfiguration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1Mzk2OQ=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU2MDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1MzoxM1rOHtGhTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1ODoxNlrOHtGmZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NDc5OQ==", "bodyText": "I don't think this warning log should be added, it's should be at debug level at best, it's not going to be uncommon for customers to rely on defaults unless they have to change to some other value", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517054799", "createdAt": "2020-11-04T01:53:13Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjEwMA==", "bodyText": "No. The cloud would give the default. This would only log when cloud is not providing, which is a warning.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517056100", "createdAt": "2020-11-04T01:58:16Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NDc5OQ=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU2MDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1MzoyMVrOHtGhbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowNjowNVrOHtGuGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NDgyOA==", "bodyText": "Same as above", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517054828", "createdAt": "2020-11-04T01:53:21Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1ODA3Mg==", "bodyText": "same", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517058072", "createdAt": "2020-11-04T02:06:05Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NDgyOA=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU2OTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1ODoxOVrOHtGmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1OToxMVrOHtGnWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjExMg==", "bodyText": "Not sure if this is okay to do, thing group name and configuration arn are different strings, more importantly, this has to be some problem with our code on the cloud side if this arn is not present in the document, it's not a user error, so swallowing it is bad because it will not reveal service side issues but might mess up FSS metrics for customers. Also about using the thing name as group name, is that how we treat single device deployments? I thought we were using the default group for shadow deployments right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517056112", "createdAt": "2020-11-04T01:58:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.componentUpdatePolicy(convertComponentUpdatePolicy(config.getComponentUpdatePolicy()));\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static String parseGroupNameFromConfigurationArn(Configuration config) {\n+        String groupName;\n+        try {\n+            // ConfigurationArn formats:\n+            // configuration:thing/<thing-name>\n+            // configuration:thinggroup/<thing-group-name>\n+            groupName = Arn.fromString(config.getConfigurationArn()).getResource().getResource();\n+        } catch (IllegalArgumentException e) {\n+            // so that it can proceed, rather than fail, when the format of configurationArn is wrong.\n+            groupName = config.getConfigurationArn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjM0Nw==", "bodyText": "This is migrated from previous logic which passes all UATs. Checked with @abanthiy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517056347", "createdAt": "2020-11-04T01:59:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.componentUpdatePolicy(convertComponentUpdatePolicy(config.getComponentUpdatePolicy()));\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static String parseGroupNameFromConfigurationArn(Configuration config) {\n+        String groupName;\n+        try {\n+            // ConfigurationArn formats:\n+            // configuration:thing/<thing-name>\n+            // configuration:thinggroup/<thing-group-name>\n+            groupName = Arn.fromString(config.getConfigurationArn()).getResource().getResource();\n+        } catch (IllegalArgumentException e) {\n+            // so that it can proceed, rather than fail, when the format of configurationArn is wrong.\n+            groupName = config.getConfigurationArn();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjExMg=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDU3MjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTo1OTo1NVrOHtGoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjowMTowOFrOHtGpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjU0Ng==", "bodyText": "So no non root components even if they have just configuration changes ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517056546", "createdAt": "2020-11-04T01:59:55Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.componentUpdatePolicy(convertComponentUpdatePolicy(config.getComponentUpdatePolicy()));\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static String parseGroupNameFromConfigurationArn(Configuration config) {\n+        String groupName;\n+        try {\n+            // ConfigurationArn formats:\n+            // configuration:thing/<thing-name>\n+            // configuration:thinggroup/<thing-group-name>\n+            groupName = Arn.fromString(config.getConfigurationArn()).getResource().getResource();\n+        } catch (IllegalArgumentException e) {\n+            // so that it can proceed, rather than fail, when the format of configurationArn is wrong.\n+            groupName = config.getConfigurationArn();\n+        }\n+        return groupName;\n+    }\n+\n+    private static List<DeploymentPackageConfiguration> convertComponents(\n+            @Nonnull Map<String, ComponentUpdate> components) {\n+        return components.entrySet().stream().map(e -> convertComponent(e.getKey(), e.getValue()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static DeploymentPackageConfiguration convertComponent(String componentName,\n+            ComponentUpdate componentUpdate) {\n+\n+        return DeploymentPackageConfiguration.builder().packageName(componentName)\n+                .resolvedVersion(componentUpdate.getVersion().getValue())\n+                .rootComponent(true) // As of now, CreateDeployment API only gives root component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1Njg0Mg==", "bodyText": "Correct.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/581#discussion_r517056842", "createdAt": "2020-11-04T02:01:08Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/greengrass/deployment/converter/DeploymentDocumentConverter.java", "diffHunk": "@@ -185,4 +197,116 @@ public static DeploymentDocument convertFromFleetConfiguration(FleetConfiguratio\n         });\n         return new ArrayList<>(packageConfigurations.values());\n     }\n+\n+    /**\n+     * Converts deployment configuration {@link Configuration} that is generated by CreateDeployment and gets sent down\n+     * via IoT Job and shadow to the Nucleus's core {@link DeploymentDocument}.\n+     *\n+     * @param config Fleet configuration that is generated by CreateDeployment and gets sent down via IoT Job and\n+     *               shadow\n+     * @return Nucleus's core {@link DeploymentDocument}\n+     * @throws InvalidRequestException if the deployment configuration is invalid\n+     */\n+    public static DeploymentDocument convertFromDeploymentConfiguration(Configuration config)\n+            throws InvalidRequestException {\n+\n+        Map<String, ComponentUpdate> components = config.getComponents();\n+        if (components == null || components.isEmpty()) {\n+            throw new InvalidRequestException(\"The deployment configuration doesn't specified components to deploy.\");\n+        }\n+\n+        DeploymentDocument.DeploymentDocumentBuilder builder =\n+                DeploymentDocument.builder().deploymentId(config.getConfigurationArn())\n+                        .deploymentPackageConfigurationList(convertComponents(config.getComponents()))\n+                        .groupName(parseGroupNameFromConfigurationArn(config)).timestamp(config.getCreationTimestamp());\n+\n+\n+        if (config.getFailureHandlingPolicy() == null) {\n+            // FailureHandlingPolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"FailureHandlingPolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.failureHandlingPolicy(convertFailureHandlingPolicy(config.getFailureHandlingPolicy()));\n+        }\n+\n+        if (config.getComponentUpdatePolicy() == null) {\n+            // ComponentUpdatePolicy should be provided per contract with CreateDeployment API.\n+            // However if it is not, device could proceed with default for resilience.\n+            logger.atWarn().log(\"ComponentUpdatePolicy should be provided but is not provided. \"\n+                                        + \"Proceeding with default failure handling policy.\");\n+        } else {\n+            builder.componentUpdatePolicy(convertComponentUpdatePolicy(config.getComponentUpdatePolicy()));\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private static String parseGroupNameFromConfigurationArn(Configuration config) {\n+        String groupName;\n+        try {\n+            // ConfigurationArn formats:\n+            // configuration:thing/<thing-name>\n+            // configuration:thinggroup/<thing-group-name>\n+            groupName = Arn.fromString(config.getConfigurationArn()).getResource().getResource();\n+        } catch (IllegalArgumentException e) {\n+            // so that it can proceed, rather than fail, when the format of configurationArn is wrong.\n+            groupName = config.getConfigurationArn();\n+        }\n+        return groupName;\n+    }\n+\n+    private static List<DeploymentPackageConfiguration> convertComponents(\n+            @Nonnull Map<String, ComponentUpdate> components) {\n+        return components.entrySet().stream().map(e -> convertComponent(e.getKey(), e.getValue()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static DeploymentPackageConfiguration convertComponent(String componentName,\n+            ComponentUpdate componentUpdate) {\n+\n+        return DeploymentPackageConfiguration.builder().packageName(componentName)\n+                .resolvedVersion(componentUpdate.getVersion().getValue())\n+                .rootComponent(true) // As of now, CreateDeployment API only gives root component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA1NjU0Ng=="}, "originalCommit": {"oid": "ebdbca049716460c9d8c344232001eb4e9d4b410"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 409, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}