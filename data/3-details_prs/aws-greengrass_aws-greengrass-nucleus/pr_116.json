{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDg4ODQ0", "number": 116, "title": "Deployment integ tests", "bodyText": "Issue #, if available:\nDescription of changes:\nDeployment service integration with new code workflow (DA without state machine, refatored package manager components). Adding integration tests for submitting job document and seeing updated parameters being picked up by kernel.\nThis code mocks the package cache implementation. Package cache implementation will be done separately. This code add fixes which may be revisited as part of separate PRs. This is done to make this code working and not wait on other changes. The deployment service integration should be complete as part of this PR.\nWhy is this change necessary:\nRequired for end to end working of device code.\nHow was this change tested:\nIntegration tests were run\nManually tested end to end by creating a job document from AWS iot Console and verify the starting of services.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-16T20:51:01Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116", "merged": true, "mergeCommit": {"oid": "3734e35255eef45fb62b6cc0a64898d7e7663653"}, "closed": true, "closedAt": "2020-03-19T22:56:21Z", "author": {"login": "abanthiy"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOUorIgFqTM3NTU3Njc1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPTEfjgH2gAyMzg5NDg4ODQ0OjBmNzY1ZjkzZjk2ZTViMmFhZmY3ZWFlMjRiMjNhMTNkMmNlNzY1NGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTc2NzUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-375576750", "createdAt": "2020-03-16T20:56:26Z", "commit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMDo1NjoyN1rOF3FeZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTowMjo1MVrOF3Fqpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNTcwMw==", "bodyText": "Can you adjust your copyright to remove the extra *?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393305703", "createdAt": "2020-03-16T20:56:27Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjI5NQ==", "bodyText": "Let's no do this. @JamesGosling  just added a log watcher replacement into the SDK, so use that instead of reading from the log file.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306295", "createdAt": "2020-03-16T20:57:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjQ0OA==", "bodyText": "Don't catch and then fail, just let the method throw.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306448", "createdAt": "2020-03-16T20:57:51Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNjc3Mg==", "bodyText": "Update this to use @TempDir instead of user.home and remove the -log stdout since that doesn't apply anymore.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393306772", "createdAt": "2020-03-16T20:58:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwNzQwMA==", "bodyText": "Can we put in the order now? The ordering should be accurate, though if you're looking at the command outputs, they may not be ordered. What is guaranteed is the state transition order, not necessarily the command execution order.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393307400", "createdAt": "2020-03-16T20:59:38Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    static ObjectMapper OBJECT_MAPPER = new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    static Logger logger;\n+    static final String LogFileName = \"deploymentIntegTest.log\";\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    DeploymentDocument sampleDeploymentDocument;\n+    Kernel kernel;\n+\n+    @BeforeAll\n+    static void setupLogFile() {\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.storeName\", LogFileName);\n+        System.setProperty(\"log.store\", \"FILE\");\n+        System.setProperty(\"log.level\", \"INFO\");\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+            Files.createFile(Paths.get(LogFileName));\n+            logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+        } catch (IOException e) {\n+            fail(\"Failed to create log file\", e);\n+        }\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        try {\n+            Files.deleteIfExists(Paths.get(LogFileName));\n+        } catch (IOException e) {\n+            fail(\"Failed to delete log file\", e);\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void setupKernelAndLogFile() {\n+\n+        try {\n+            String tdir = System.getProperty(\"user.home\");\n+            kernel = new Kernel();\n+            kernel.parseArgs(\"-r\", tdir, \"-log\", \"stdout\", \"-i\",\n+                    DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+            kernel.launch();\n+            dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+            packageCache = new PackageCache();\n+            kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+\n+            File fileToWatch = new File(LogFileName);\n+            while (!fileToWatch.exists()) {\n+                Thread.sleep(1000);\n+            }\n+        } catch(Exception e) {\n+            fail(\"Caught exception while setting up test\");\n+        }\n+    }\n+\n+    @Test\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+        String logLines = new String(Files.readAllBytes(Paths.get(LogFileName)));\n+        int tickTokLogStringIndex = logLines.indexOf(TEST_TICK_TOCK_STRING);\n+        int mosquittoLogStringIndex = logLines.indexOf(TEST_MOSQUITTO_STRING);\n+        int customerAppLogStringIndex = logLines.indexOf(TEST_CUSTOMER_APP_STRING);\n+        assertTrue(tickTokLogStringIndex != -1);\n+        assertTrue(mosquittoLogStringIndex != -1);\n+        assertTrue(customerAppLogStringIndex != -1);\n+        //TODO: Check the order of indexes as per dependency", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMwODgzOQ==", "bodyText": "handling? If we're not handling it we should be rethrowing it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393308839", "createdAt": "2020-03-16T21:02:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n     /**\n      * Make sure all the specified packages exist in the package cache. Download them from remote repository if\n      * they don't exist.\n+     *\n      * @param pkgs a list of packages.\n      * @return a future to notify once this is finished.\n      */\n+    @SuppressFBWarnings(value = \"NP_NONNULL_PARAM_VIOLATION\", justification = \"Waiting for package cache \"\n+            + \"implementation to be completed\")\n     public Future<Void> preparePackages(List<PackageIdentifier> pkgs) {\n         // TODO: to be implemented.\n-        return null;\n+        CompletableFuture<Void> completableFuture = new CompletableFuture<>();\n+        completableFuture.complete(null);\n+        return completableFuture;\n     }\n \n     /**\n      * Retrieve the recipe of a package.\n+     *\n      * @param pkg package identifier\n      * @return package recipe\n      */\n     public Package getRecipe(PackageIdentifier pkg) {\n         // TODO: to be implemented.\n+        LocalPackageStore localPackageStore = new LocalPackageStore(LOCAL_CACHE_PATH);\n+        try {\n+            return localPackageStore.getPackage(pkg.getName(), pkg.getVersion()).get();\n+        } catch (PackagingException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b665837ba0c3e73c80741a6d352083e66ae8a6a3"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cb291442360026ffd89253ee41dafcdefbc9428", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8cb291442360026ffd89253ee41dafcdefbc9428", "committedDate": "2020-03-17T00:32:53Z", "message": "Addressing review comments. Adding listener to logger in integration tests"}, "afterCommit": {"oid": "6090b0462f67f02d924cd23861ae0107feb89104", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6090b0462f67f02d924cd23861ae0107feb89104", "committedDate": "2020-03-17T06:19:54Z", "message": "Addressing review comments. Adding listener to logger in integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a9f027fb42eb25c15cadd1727b140dfbc3cd87d", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4a9f027fb42eb25c15cadd1727b140dfbc3cd87d", "committedDate": "2020-03-17T19:57:16Z", "message": "Fixing Mosquitto recipe for ubuntu"}, "afterCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2e7b577c640ae179f5e82d1e37adda7921863c0b", "committedDate": "2020-03-17T20:46:00Z", "message": "Fixing Mosquitto recipe for ubuntu"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ2Mzkz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-376446393", "createdAt": "2020-03-17T22:23:14Z", "commit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzoxNFrOF3wI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzo0MlrOF3wJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDcwMA==", "bodyText": "use hamcrest contain here to get a better error.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394004700", "createdAt": "2020-03-17T22:23:14Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDkyMQ==", "bodyText": "there ought to be a hamcrest matcher for less than also, again for better error messages.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394004921", "createdAt": "2020-03-17T22:23:42Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDM1Njk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-376435698", "createdAt": "2020-03-17T22:00:32Z", "commit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjowMDozM1rOF3vlSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyODozOVrOF3wRgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTU5Mg==", "bodyText": "I don't get this one. Doesn't this work?\n@TempDir\nstatic Path sharedTempDir;", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393995592", "createdAt": "2020-03-17T22:00:33Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5OTY1Nw==", "bodyText": "This doesn't look like a real end-to-end test? Why not use DeploymentService?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r393999657", "createdAt": "2020-03-17T22:10:33Z", "author": {"login": "fengwang666"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);\n+        } catch (Exception e) {\n+            fail(\"Failed to create Deployment document object from sample job document\", e.getCause());\n+        }\n+        sampleDeploymentDocument.setTimestamp(System.currentTimeMillis());\n+        DeploymentTask deploymentTask = new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMTIwOA==", "bodyText": "Why log twice? Also usually we don't log and throw to prevent duplicate messages. If the code already throws, we can assume the caller will handle it properly (which might include logging).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394001208", "createdAt": "2020-03-17T22:14:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzQ4MA==", "bodyText": "Add a log here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394003480", "createdAt": "2020-03-17T22:20:12Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNjkxMw==", "bodyText": "I guess cancellation is not handled here if there is a new deployment come in. Fine with it for now as long as we are aware of it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394006913", "createdAt": "2020-03-17T22:28:39Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -210,14 +258,10 @@ public void startup() {\n             try {\n                 if (currentProcessStatus != null) {\n                     logger.info(\"Getting the status of the current process\");\n-                    Boolean deploymentStatus = currentProcessStatus.get();\n-                    if (deploymentStatus) {\n-                        updateJobAsSucceded(currentJobId, currentDeploymentContext);\n-                    } else {\n-                        updateJobAsFailed(currentJobId, currentDeploymentContext);\n-                    }\n+\n+                    currentProcessStatus.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7b577c640ae179f5e82d1e37adda7921863c0b"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDczNjg0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-376473684", "createdAt": "2020-03-17T23:32:33Z", "commit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozMjozNFrOF3xoLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1MTo1OFrOF3yAbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTEwMw==", "bodyText": "Better to only try the createDeploymentTask line since only this throws InvalidRequestException.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try {\n          \n          \n            \n                            deploymentTask = createDeploymentTask(response.execution.jobDocument);\n          \n          \n            \n                            currentProcessStatus = executorService.submit(deploymentTask);\n          \n          \n            \n                            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n          \n          \n            \n                        } catch (InvalidRequestException e) {\n          \n          \n            \n                            //TODO: Add status details\n          \n          \n            \n                            HashMap<String, String> statusDetails = new HashMap<>();\n          \n          \n            \n                            statusDetails.put(\"error\", e.getMessage());\n          \n          \n            \n                            updateJobAsFailed(currentJobId, statusDetails);\n          \n          \n            \n                        }\n          \n          \n            \n                        try {\n          \n          \n            \n                            deploymentTask = createDeploymentTask(response.execution.jobDocument);\n          \n          \n            \n                        } catch (InvalidRequestException e) {\n          \n          \n            \n                            //TODO: Add status details\n          \n          \n            \n                            Map<String, String> statusDetails = new HashMap<>();\n          \n          \n            \n                            statusDetails.put(\"error\", e.getMessage());\n          \n          \n            \n                            updateJobAsFailed(currentJobId, statusDetails);\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                       currentProcessStatus = executorService.submit(deploymentTask);\n          \n          \n            \n                       logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394029103", "createdAt": "2020-03-17T23:32:34Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTIxMA==", "bodyText": "Map interface should be fine", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394029210", "createdAt": "2020-03-17T23:32:56Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzI2Mw==", "bodyText": "same here for Map", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394033263", "createdAt": "2020-03-17T23:44:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA==", "bodyText": "What's error if using @Inject?\nIs it because that it doesn't work for LocalPacakgeStore(String path) since our DI right now only injects on type but not name? So String won't work... But Kernel for example works. I think PackageCache and KernelConfigResolver should work with @Inject, with my limited knowledge on this...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394035308", "createdAt": "2020-03-17T23:51:58Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDg4Njc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-376488674", "createdAt": "2020-03-18T00:19:04Z", "commit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxOTowNFrOF3yb2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMDozN1rOF3ynQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjMzMQ==", "bodyText": "remove the skipif as it's not necessary here. Same for other yaml files", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042331", "createdAt": "2020-03-18T00:19:04Z", "author": {"login": "ShirleyZheng92"}, "path": "local_artifact_source/Mosquitto/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,25 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: Mosquitto\n+Description: Mosquitto MQTT Server\n+Publisher: Eclipse Foundation\n+Version: '1.0.0'\n+Lifecycle:\n+  startup:\n+    macos: echo \"Hello this is mosquitto getting started\"\n+    ubuntu: echo \"Hello this is mosquitto getting started\"\n+  install:\n+    macos:\n+      skipif: exists ~/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjM4OQ==", "bodyText": "try catch not needed here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042389", "createdAt": "2020-03-18T00:19:16Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQ5NQ==", "bodyText": "seems same as PackageManager. LOCAL_PACKAGE_SOURCE?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394043495", "createdAt": "2020-03-18T00:23:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageCache.java", "diffHunk": "@@ -1,31 +1,55 @@\n package com.aws.iot.evergreen.packagemanager;\n \n+import com.aws.iot.evergreen.packagemanager.exceptions.PackagingException;\n import com.aws.iot.evergreen.packagemanager.models.Package;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Future;\n \n public class PackageCache {\n \n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDU2Mg==", "bodyText": "seems same as PackageManager. LOCAL_PACKAGE_SOURCE?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394044562", "createdAt": "2020-03-18T00:27:52Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -46,6 +55,9 @@\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n                     .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     private static final long DEPLOYMENT_POLLING_FREQUENCY = Duration.ofSeconds(30).toMillis();\n+    //TODO: Change this to be taken from config or user input. Maybe as part of deployment document\n+    private static final Path LOCAL_CACHE_PATH =\n+            Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTI0OQ==", "bodyText": "typo: succeeded", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394045249", "createdAt": "2020-03-18T00:30:37Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -210,14 +258,10 @@ public void startup() {\n             try {\n                 if (currentProcessStatus != null) {\n                     logger.info(\"Getting the status of the current process\");\n-                    Boolean deploymentStatus = currentProcessStatus.get();\n-                    if (deploymentStatus) {\n-                        updateJobAsSucceded(currentJobId, currentDeploymentContext);\n-                    } else {\n-                        updateJobAsFailed(currentJobId, currentDeploymentContext);\n-                    }\n+\n+                    currentProcessStatus.get();\n+                    updateJobAsSucceded(currentJobId, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDg2NzUy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-376486752", "createdAt": "2020-03-18T00:12:56Z", "commit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoxMjo1N1rOF3yVrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDo0Nzo0MlrOF3y3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MDc0OA==", "bodyText": "Nit - Did you mean 'Now tick-tocking...'?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394040748", "createdAt": "2020-03-18T00:12:57Z", "author": {"login": "shaguptashaikh"}, "path": "local_artifact_source/TickTock/1.0.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: TickTock\n+Description: A *very* helpful periodic service\n+Publisher: Me\n+Version: '1.0.0'\n+Parameters:\n+  - name: Period\n+    type: NUMBER\n+    value: 2\n+Lifecycle:\n+  run:\n+    \"echo No tick-tocking with period: {{params:Period.value}}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MjQzNQ==", "bodyText": "Should this also take the timestamp? If we're going to have an integration test to ensure the same job document when submitted twice is treated as a no-op but the deployment succeeds, it'll have the same timestamp both the times", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042435", "createdAt": "2020-03-18T00:19:28Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Mjg4MQ==", "bodyText": "This parsing logic already exists in the DA, that should also be covered by the integ tests, right?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394042881", "createdAt": "2020-03-18T00:21:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.Log4jLoggerAdapter;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"No tick-tocking with period: 2\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() throws InterruptedException {\n+        //Cannot use @TempDir since it does not work with static variables\n+        String tempRootDir = \"~/deploymentIntegTest\";\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", tempRootDir, \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"deploymentDemo.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel.context);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI());\n+\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the deployment task\", e.getCause());\n+        }\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertTrue(listOfStdoutMessagesTapped.containsAll(listOfExpectedMessages));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_TICK_TOCK_STRING) <\n+                outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING));\n+        assertTrue(outputMessagesToTimestamp.get(TEST_MOSQUITTO_STRING) <\n+                outputMessagesToTimestamp.get(TEST_CUSTOMER_APP_STRING));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    public void GIVEN_services_running_WHEN_updated_params_THEN_services_start_with_updated_params_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        countDownLatch = new CountDownLatch(1);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && messageOnStdout.equals(TEST_CUSTOMER_APP_STRING_UPDATED)) {\n+                outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument_updated.json\").toURI());\n+        try {\n+            result.get();\n+        } catch (ExecutionException e) {\n+            fail(\"Failed executing the updated deployment task\", e.getCause());\n+        }\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        assertTrue(outputMessagesToTimestamp.containsKey(TEST_CUSTOMER_APP_STRING_UPDATED));\n+        Log4jLogEventBuilder.removeGlobalListener(listener);\n+    }\n+\n+    private Future<?> submitSampleJobDocument(URI uri) {\n+\n+        try {\n+            sampleDeploymentDocument = OBJECT_MAPPER.readValue(new File(uri), DeploymentDocument.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzQxNA==", "bodyText": "This file is used for integ tests that will logically live forever now, so this file should be named something other than '*Demo' I think", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394043414", "createdAt": "2020-03-18T00:23:15Z", "author": {"login": "shaguptashaikh"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/deploymentDemo.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDk3NQ==", "bodyText": "Redundant error logs?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394044975", "createdAt": "2020-03-18T00:29:25Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NjI3OA==", "bodyText": "Not sure what value these two methods which are pretty much the same are adding, they could just be replaced by one method if you take the status as a parameter. Also, when you call these you're always passing null for statusDetails, why is that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394046278", "createdAt": "2020-03-18T00:35:05Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }\n \n-    private void updateJobAsFailed(String jobId, DeploymentContext deploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private void updateJobAsFailed(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.FAILED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NzIwOQ==", "bodyText": "Injecting these dependencies should remove a lot of boilerplate code, and besides there already is a constructor for DeploymentService that takes in these objects, why do we need these null checks and initialization code here still?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047209", "createdAt": "2020-03-18T00:38:58Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -241,6 +289,19 @@ public void shutdown() {\n         }\n     }\n \n+    private void initialize() {\n+        //Cannot do this in constructor because of how dependency injection works\n+        if (dependencyResolver == null) {\n+            this.dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNTMwOA=="}, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzc2Mg==", "bodyText": "Why is a default key value par for JobId being cleared while trying to update the job? should it be updated right after pulling the job from cloud and cleaned up when you're done processing the deployment?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047762", "createdAt": "2020-03-18T00:41:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +141,58 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n             //Starting the job processing in another thread\n-            currentProcessStatus = executorService\n-                    .submit(new DeploymentProcess(currentDeploymentContext, OBJECT_MAPPER, kernel,\n-                            context.get(PackageManager.class), logger));\n-            logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+                currentProcessStatus = executorService.submit(deploymentTask);\n+                logger.atInfo().log(\"Submitted the job with jobId {}\", jobExecutionData.jobId);\n+            } catch (InvalidRequestException e) {\n+                //TODO: Add status details\n+                HashMap<String, String> statusDetails = new HashMap<>();\n+                statusDetails.put(\"error\", e.getMessage());\n+                updateJobAsFailed(currentJobId, statusDetails);\n+            }\n         }\n \n     };\n \n-    private void updateJobAsSucceded(String jobId, DeploymentContext currentDeploymentContext)\n-            throws ExecutionException, InterruptedException {\n+    private DeploymentTask createDeploymentTask(HashMap<String, Object> jobDocument) throws InvalidRequestException {\n+\n+        DeploymentDocument deploymentDocument = parseAndValidateJobDocument(jobDocument);\n+        return new DeploymentTask(dependencyResolver, packageCache, kernelConfigResolver, kernel, logger,\n+                deploymentDocument);\n+    }\n+\n+    private DeploymentDocument parseAndValidateJobDocument(HashMap<String, Object> jobDocument)\n+            throws InvalidRequestException {\n+        if (jobDocument == null) {\n+            String errorMessage = \"Job document cannot be empty\";\n+            throw new InvalidRequestException(errorMessage);\n+        }\n+        DeploymentDocument deploymentDocument = null;\n+        try {\n+            String jobDocumentString = OBJECT_MAPPER.writeValueAsString(jobDocument);\n+            deploymentDocument = OBJECT_MAPPER.readValue(jobDocumentString, DeploymentDocument.class);\n+            return deploymentDocument;\n+        } catch (JsonProcessingException e) {\n+            String errorMessage = \"Unable to parse the job document\";\n+            logger.error(errorMessage, e);\n+            logger.error(e.getMessage());\n+            throw new InvalidRequestException(errorMessage, e);\n+        }\n+    }\n+\n+    private void updateJobAsSucceded(String jobId, HashMap<String, String> statusDetails) {\n         //TODO: Fill in status details from the deployment packet\n-        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, null);\n+        iotJobsHelper.updateJobStatus(jobId, JobStatus.SUCCEEDED, statusDetails);\n         logger.addDefaultKeyValue(\"JobId\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Nzk5OA==", "bodyText": "Nit - why concatenate two string literals in the log here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394047998", "createdAt": "2020-03-18T00:42:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentTask.java", "diffHunk": "@@ -46,12 +49,14 @@ public Void call() throws NonRetryableDeploymentTaskFailureException, RetryableD\n             Map<Object, Object> newConfig = kernelConfigResolver.resolve(desiredPackages, document, new HashSet<>());\n             // Block this without timeout because it can take a long time for the device to update the config\n             // (if it's not in a safe window).\n+            logger.atInfo().addKeyValue(\"Config\", newConfig.toString())\n+                    .log(\"Submitting the config to merge with \" + \"kernel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0ODY2NA==", "bodyText": "Now that you're adding a Setter on this to be able to change this from the tests, I noticed that all of these members are default, could you make them private?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394048664", "createdAt": "2020-03-18T00:45:10Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -32,6 +37,8 @@\n     @JsonProperty(\"GroupName\")\n     String groupName;\n \n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTAwNQ==", "bodyText": "There are constructors and a builder and a setter for the timestamp member, some of them have to be redundant", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394049005", "createdAt": "2020-03-18T00:46:29Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentDocument.java", "diffHunk": "@@ -17,6 +20,8 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @Builder\n+@NoArgsConstructor\n+@AllArgsConstructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0OTI5Mw==", "bodyText": "We could also make these private", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394049293", "createdAt": "2020-03-18T00:47:42Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/model/DeploymentPackageConfiguration.java", "diffHunk": "@@ -20,6 +23,7 @@\n @JsonInclude(JsonInclude.Include.NON_NULL)\n @Getter\n @AllArgsConstructor\n+@NoArgsConstructor\n public class DeploymentPackageConfiguration {\n \n     @JsonProperty(\"Name\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e99486bd0ae7d15839d7698ae3b52a34f71f7d6", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5e99486bd0ae7d15839d7698ae3b52a34f71f7d6", "committedDate": "2020-03-17T22:09:36Z", "message": "Fixing typo in recipe"}, "afterCommit": {"oid": "eb826d109da8b1fa02bda51577d77324dcec3a96", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/eb826d109da8b1fa02bda51577d77324dcec3a96", "committedDate": "2020-03-18T02:37:27Z", "message": "Addressing review comments. Changing test package from TickTock to GreenSignal. Fixing skipif handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzE5NzY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377319767", "createdAt": "2020-03-19T00:02:22Z", "commit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjoyMlrOF4bAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjoyMlrOF4bAqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzExNQ==", "bodyText": "Minor. This could even be removed if you use @InjectMocks in the unit test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707115", "createdAt": "2020-03-19T00:02:22Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -161,26 +209,33 @@ public DeploymentService(Topics topics) {\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor fo unit testing.\n      *\n      * @param topics               The configuration coming from  kernel\n      * @param iotJobsHelperFactory Factory object for creating IotJobHelper\n      * @param executorService      Executor service coming from kernel\n      * @param kernel               The evergreen kernel\n+     * @param dependencyResolver   {@link DependencyResolver}\n+     * @param packageCache         {@link PackageCache}\n+     * @param kernelConfigResolver {@link KernelConfigResolver}\n      */\n     public DeploymentService(Topics topics, IotJobsHelperFactory iotJobsHelperFactory, ExecutorService executorService,\n-                             Kernel kernel) {\n+                             Kernel kernel, DependencyResolver dependencyResolver, PackageCache packageCache,\n+                             KernelConfigResolver kernelConfigResolver) {\n         super(topics);\n         this.iotJobsHelperFactory = iotJobsHelperFactory;\n         this.executorService = executorService;\n         this.kernel = kernel;\n+        this.dependencyResolver = dependencyResolver;\n+        this.packageCache = packageCache;\n+        this.kernelConfigResolver = kernelConfigResolver;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzE5OTQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377319947", "createdAt": "2020-03-19T00:02:53Z", "commit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjo1NFrOF4bBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMjo1NFrOF4bBVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzI4NA==", "bodyText": "@InjectMocks  will do the work", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707284", "createdAt": "2020-03-19T00:02:54Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -72,14 +79,23 @@\n     @Mock\n     ExecutorService mockExecutorService;\n \n+    @Mock\n+    private DependencyResolver dependencyResolver;\n+\n+    @Mock\n+    private PackageCache packageCache;\n+\n+    @Mock\n+    private KernelConfigResolver kernelConfigResolver;\n+\n     @Captor\n     ArgumentCaptor<Consumer<JobExecutionsChangedEvent>> jobEventConsumerCaptor;\n \n     @Captor\n     ArgumentCaptor<Consumer<DescribeJobExecutionResponse>> describeJobConsumerCaptor;\n \n     DeploymentService deploymentService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzIwMjg1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377320285", "createdAt": "2020-03-19T00:03:58Z", "commit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMzo1OFrOF4bCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMDowMzo1OFrOF4bCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNzYwOA==", "bodyText": "If InjectMocks works, then this could be removed, along with the constructor in the source code :)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394707608", "createdAt": "2020-03-19T00:03:58Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -121,17 +137,17 @@ public void setup() {\n                     .thenReturn(mockIotJobsHelper);\n \n             //Creating the class to be tested\n-            doneSignal = new CountDownLatch(1);\n             deploymentService =\n-                    new DeploymentService(config, mockIotJobsHelperFactory, mockExecutorService, mockKernel);\n+                    new DeploymentService(config, mockIotJobsHelperFactory, mockExecutorService, mockKernel,\n+                            dependencyResolver, packageCache, kernelConfigResolver);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzE3MTQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377317145", "createdAt": "2020-03-18T23:54:24Z", "commit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1NDoyNFrOF4a3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1Nzo1MFrOF4a7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDc4MA==", "bodyText": "not needed IMO, correct ordering of dependency should be tested in kernel integ test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394704780", "createdAt": "2020-03-18T23:54:24Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.deployment;\n+\n+import com.aws.iot.evergreen.deployment.DeploymentTask;\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.EvergreenStructuredLogMessage;\n+import com.aws.iot.evergreen.logging.impl.Log4jLogEventBuilder;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.KernelConfigResolver;\n+import com.aws.iot.evergreen.packagemanager.PackageCache;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import com.aws.iot.evergreen.testcommons.extensions.PerformanceReporting;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@ExtendWith(PerformanceReporting.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class DeploymentServiceIntegrationTest {\n+\n+    private static final String TEST_CUSTOMER_APP_STRING = \"Hello evergreen. This is a test\";\n+\n+    //Based on the recipe files of the packages in sample job document\n+    private static final String TEST_CUSTOMER_APP_STRING_UPDATED = \"Hello evergreen. This is a new value\";\n+    private static final String TEST_MOSQUITTO_STRING = \"Hello this is mosquitto getting started\";\n+    private static final String TEST_TICK_TOCK_STRING = \"Go ahead with 2 approvals\";\n+    private static final Path LOCAL_CACHE_PATH = Paths.get(System.getProperty(\"user.dir\")).resolve(\"local_artifact_source\");\n+\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,\n+            false)\n+            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\n+    private static Logger logger;\n+\n+    private static DependencyResolver dependencyResolver;\n+    private static PackageCache packageCache;\n+    private static KernelConfigResolver kernelConfigResolver;\n+\n+    private DeploymentDocument sampleDeploymentDocument;\n+    private static Kernel kernel;\n+\n+    private static Map<String, Long> outputMessagesToTimestamp;\n+    private CountDownLatch countDownLatch;\n+\n+    @TempDir\n+    static Path sharedDir;\n+\n+    @BeforeAll\n+    static void setupLogger() {\n+        System.setProperty(\"log.level\", \"INFO\");\n+        System.setProperty(\"log.fmt\", \"JSON\");\n+        System.setProperty(\"log.store\", \"CONSOLE\");\n+        outputMessagesToTimestamp = new HashMap<>();\n+        logger = LogManager.getLogger(DeploymentServiceIntegrationTest.class);\n+    }\n+\n+    @BeforeAll\n+    public static void setupKernel() {\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-r\", sharedDir.toString(), \"-i\",\n+                DeploymentServiceIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.launch();\n+        dependencyResolver = new DependencyResolver(new LocalPackageStore(LOCAL_CACHE_PATH), kernel);\n+        packageCache = new PackageCache();\n+        kernelConfigResolver = new KernelConfigResolver(packageCache, kernel);\n+    }\n+\n+    @AfterAll\n+    public static void tearDown() {\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    @Order(1)\n+    public void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        outputMessagesToTimestamp.clear();\n+        final List<String> listOfExpectedMessages = Arrays.asList(TEST_TICK_TOCK_STRING, TEST_MOSQUITTO_STRING,\n+                TEST_CUSTOMER_APP_STRING);\n+        countDownLatch = new CountDownLatch(3);\n+        Consumer<EvergreenStructuredLogMessage> listener = m->{\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if(messageOnStdout != null && listOfExpectedMessages.contains(messageOnStdout)) {\n+                //TODO: Deduping is needed, as currently kernel is running the GreenSignal and Mosquitto dependencies\n+                // multiple times before the CustomerApp runs. This should not be the expected behavior. Sim to\n+                // capture this https://sim.amazon.com/issues/P34042537\n+                if(!outputMessagesToTimestamp.containsKey(messageOnStdout)) {\n+                    outputMessagesToTimestamp.put(messageOnStdout, m.getTimestamp());\n+                    countDownLatch.countDown();\n+                }\n+            }\n+        };\n+        Log4jLogEventBuilder.addGlobalListener(listener);\n+        Future<?> result = submitSampleJobDocument(DeploymentServiceIntegrationTest.class.getResource(\n+                \"SampleJobDocument.json\").toURI(), System.currentTimeMillis());\n+\n+        result.get();\n+\n+        countDownLatch.await(60, TimeUnit.SECONDS);\n+        Set<String> listOfStdoutMessagesTapped = outputMessagesToTimestamp.keySet();\n+        assertThat(listOfStdoutMessagesTapped, Matchers.containsInAnyOrder(Matchers.equalTo(TEST_CUSTOMER_APP_STRING)\n+                , Matchers.equalTo(TEST_MOSQUITTO_STRING), Matchers.equalTo(TEST_TICK_TOCK_STRING)));\n+        //TODO: Check the correct ordering of dependencies\n+        // Logs are not guaranteed to be in the order of dependencies", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTE3MQ==", "bodyText": "I guess 'true' is not supported in skipif anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394705171", "createdAt": "2020-03-18T23:55:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "diffHunk": "@@ -0,0 +1,17 @@\n+---\n+services:\n+\n+  main:\n+    install:\n+      skipif: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTgyNQ==", "bodyText": "Are these Rahul's change? Could you do a rebase?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r394705825", "createdAt": "2020-03-18T23:57:50Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -24,7 +24,8 @@\n                     \"SIGSEGV\", \"SIGUSR2\", \"SIGPIPE\", \"SIGALRM\", \"SIGTERM\", \"SIGSTKFLT\", \"SIGCHLD\", \"SIGCONT\", \"SIGSTOP\",\n                     \"SIGTSTP\", \"SIGTTIN\", \"SIGTTOU\", \"SIGURG\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGVTALRM\", \"SIGPROF\", \"SIGWINCH\",\n                     \"SIGIO\", \"SIGPWR\", \"SIGSYS\",};\n-    private static final Pattern skipcmd = Pattern.compile(\"(exists|onpath) +(.+)\");\n+    private static final String SKIP_COMMAND_REGEX = \"(exists|onpath) +(.+)\";\n+    private static final Pattern skipcmd = Pattern.compile(SKIP_COMMAND_REGEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzUzNTM0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377353534", "createdAt": "2020-03-19T01:19:42Z", "commit": {"oid": "f1673eddedc01c0523e62d36f42efd29e494bb40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTUwNDU3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377950457", "createdAt": "2020-03-19T17:40:21Z", "commit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MDoyMlrOF45evw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MDoyMlrOF45evw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNjMzNQ==", "bodyText": "missing lifecycle keyword", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395206335", "createdAt": "2020-03-19T17:40:22Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/iot/evergreen/integrationtests/deployment/onlyMain.yaml", "diffHunk": "@@ -0,0 +1,16 @@\n+---\n+services:\n+\n+  main:\n+    install:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTUxMzUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377951350", "createdAt": "2020-03-19T17:41:29Z", "commit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MToyOVrOF45hqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0MToyOVrOF45hqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwNzA4Mw==", "bodyText": "Why are you getting the cause of the InvalidRequestException?\nAlso, nitpick, combine these strings since they're on the same line anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395207083", "createdAt": "2020-03-19T17:41:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e.getCause())\n+                        .log(\"Caught InvalidRequestException while processing a \" + \"deployment\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTUzNTY0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377953564", "createdAt": "2020-03-19T17:44:11Z", "commit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo0NDoxMVrOF45oqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzo1MDo0MlrOF454Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwODg3Mw==", "bodyText": "[nit]\nfor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395208873", "createdAt": "2020-03-19T17:44:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -161,26 +209,33 @@ public DeploymentService(Topics topics) {\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor fo unit testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxMjgyNw==", "bodyText": "Looks unused.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395212827", "createdAt": "2020-03-19T17:50:42Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/deployment/DeploymentServiceTest.java", "diffHunk": "@@ -16,6 +20,7 @@\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n+import org.mockito.InjectMocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0054228ec5caedbe0e26c9970c1ed86ff0ce8f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e96a762f98bb726c0f00f139dbd9574e678551", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/52e96a762f98bb726c0f00f139dbd9574e678551", "committedDate": "2020-03-19T18:06:54Z", "message": "Adding integration test for submitting a sample job document and starting the services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a06c434d321d108e79383a4765fbf2dbed2a3d5", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8a06c434d321d108e79383a4765fbf2dbed2a3d5", "committedDate": "2020-03-19T18:06:54Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTcyMjA4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377972208", "createdAt": "2020-03-19T18:07:50Z", "commit": {"oid": "e70c7c9102d2c137ad44b2383e4fd772c70dea47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNzo1MFrOF46gpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODowNzo1MFrOF46gpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIyMzIwNw==", "bodyText": "adding the \"message\" isn't really needed since it prints the message when it prints the cause.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#discussion_r395223207", "createdAt": "2020-03-19T18:07:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -125,29 +145,57 @@ public void onConnectionResumed(boolean sessionPresent) {\n             iotJobsHelper.updateJobStatus(currentJobId, JobStatus.IN_PROGRESS, null);\n \n             logger.info(\"Updated the status of JobsId {} to {}\", currentJobId, JobStatus.IN_PROGRESS);\n-            currentDeploymentContext = DeploymentContext.builder().jobDocument(response.execution.jobDocument)\n-                    .proposedPackagesFromDeployment(new HashSet<>()).resolvedPackagesToDeploy(new HashSet<>())\n-                    .removedTopLevelPackageNames(new HashSet<>()).build();\n+\n+\n+            DeploymentTask deploymentTask;\n+            try {\n+                deploymentTask = createDeploymentTask(response.execution.jobDocument);\n+            } catch (InvalidRequestException e) {\n+                logger.atError().setCause(e).addKeyValue(\"message\", e.getMessage())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70c7c9102d2c137ad44b2383e4fd772c70dea47"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTcyNTEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/116#pullrequestreview-377972513", "createdAt": "2020-03-19T18:08:17Z", "commit": {"oid": "e70c7c9102d2c137ad44b2383e4fd772c70dea47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c5db0bd5c72c916eb28bdc5fb7d5111d052c37", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e5c5db0bd5c72c916eb28bdc5fb7d5111d052c37", "committedDate": "2020-03-19T18:09:30Z", "message": "Refactor dependency resolution for packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "338c8db97bbf3f437a1812349ec7bafdd5e4ae65", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/338c8db97bbf3f437a1812349ec7bafdd5e4ae65", "committedDate": "2020-03-19T18:09:30Z", "message": "Integrating deployment service with new code workflow in Da, package manager and kernel. Adding integration tests. Removing old workflow code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b0a71427e764d9bed75e697f8d01cd9e9209239", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b0a71427e764d9bed75e697f8d01cd9e9209239", "committedDate": "2020-03-19T18:09:30Z", "message": "Addressing review comments. Adding listener to logger in integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0a2aadae668fbb1f2acfbcd8f662e72419009e", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/df0a2aadae668fbb1f2acfbcd8f662e72419009e", "committedDate": "2020-03-19T18:09:30Z", "message": "Adding countdown latch to wait till log listener captures the message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a60b3d2f794aa058ac7e07330dca185469465f1", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5a60b3d2f794aa058ac7e07330dca185469465f1", "committedDate": "2020-03-19T18:09:30Z", "message": "Changing the integ tests to run kernel only once, before starting any tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc408040807b71e46f46fe870d10d95f16b41c45", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc408040807b71e46f46fe870d10d95f16b41c45", "committedDate": "2020-03-19T18:09:30Z", "message": "Changing Mosquitto recipe file to include echo for ubuntu platform as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac52d84ac1f1b97d7933b883bac83b953973a88", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4ac52d84ac1f1b97d7933b883bac83b953973a88", "committedDate": "2020-03-19T18:09:31Z", "message": "Fixing Mosquitto recipe for ubuntu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1321ec4729e20a2c36d19c19f4988b6a81da4579", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1321ec4729e20a2c36d19c19f4988b6a81da4579", "committedDate": "2020-03-19T18:09:31Z", "message": "Adding skipif to install section of mosquitto recipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936225feca859e340eb401b947b9d974c1ff7923", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/936225feca859e340eb401b947b9d974c1ff7923", "committedDate": "2020-03-19T18:09:31Z", "message": "Fixing typo in recipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f100eb5a66dfde73e4231943aeac09426af2d52", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f100eb5a66dfde73e4231943aeac09426af2d52", "committedDate": "2020-03-19T18:09:31Z", "message": "Addressing review comments. Changing test package from TickTock to GreenSignal. Fixing skipif handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9e47d1efec65038ba577c63fc7abb5c24a2659", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8b9e47d1efec65038ba577c63fc7abb5c24a2659", "committedDate": "2020-03-19T18:09:31Z", "message": "Changing the dependency injection in DeploymentService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05acd3b8da48ef007268ee520807a36d1d96590", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a05acd3b8da48ef007268ee520807a36d1d96590", "committedDate": "2020-03-19T18:09:31Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "688459147e63263b019f98dcd3c6bae10b2c5afc", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/688459147e63263b019f98dcd3c6bae10b2c5afc", "committedDate": "2020-03-19T18:09:31Z", "message": "Addressing more review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e70c7c9102d2c137ad44b2383e4fd772c70dea47", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e70c7c9102d2c137ad44b2383e4fd772c70dea47", "committedDate": "2020-03-19T18:04:06Z", "message": "Addressing more review comments"}, "afterCommit": {"oid": "688459147e63263b019f98dcd3c6bae10b2c5afc", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/688459147e63263b019f98dcd3c6bae10b2c5afc", "committedDate": "2020-03-19T18:09:31Z", "message": "Addressing more review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0473aac4edef52fdc72b7d646b9806bee732b52c", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0473aac4edef52fdc72b7d646b9806bee732b52c", "committedDate": "2020-03-19T21:38:15Z", "message": "Attempting to fix transient error in ServiceConfigMerge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f765f93f96e5b2aaff7eae24b23a13d2ce7654c", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0f765f93f96e5b2aaff7eae24b23a13d2ce7654c", "committedDate": "2020-03-19T21:48:03Z", "message": "Setting up the rootPath in BeforeEach for ServiceConfigMerge"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2342, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}