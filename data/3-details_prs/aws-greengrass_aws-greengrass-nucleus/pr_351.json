{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDgyNTE3", "number": 351, "title": "Support cross-component parameters", "bodyText": "Issue #, if available:\nDescription of changes:\nSupports cross-component parameters in the format of {{<other component name>:<namespace>:<key>}}, such as {{lambda-launcher:artifacts:path}} which should give me the artifact path for the active version of the lambda launcher.\nFor security, reading of parameters is limited to direct dependencies, such that a component can read the parameters of any of its dependencies, but not their dependencies.\nWhy is this change necessary:\nThis change is needed for a few customer use cases, but it is needed immediately to support lambda. Lambda uses a start command of the form {{lambda-launcher:artifacts:path}}/eg start to use the binary provided in lambda launcher to start the lambda function; instead of shipping the lambda launcher binary with every single lambda.\nHow was this change tested:\nAdded unit test to verify that cross-component parameters including system parameters are properly interpolated.\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-05T00:50:46Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351", "merged": true, "mergeCommit": {"oid": "95e36a8c19ba4280b61eb57ca8e52a6cda655afb"}, "closed": true, "closedAt": "2020-08-06T17:23:38Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7xNlaABqjM2MjI2NTAxNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8TMa3AFqTQ2MjcyNzMzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4319be8e1fd54acfb6b6385f283ee2461d039b88", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4319be8e1fd54acfb6b6385f283ee2461d039b88", "committedDate": "2020-08-05T01:44:48Z", "message": "Add auth so that components can only read from their direct dependencies"}, "afterCommit": {"oid": "5db21eb3256559426a93983ff76345de14c42461", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5db21eb3256559426a93983ff76345de14c42461", "committedDate": "2020-08-05T01:47:40Z", "message": "Add auth so that components can only read from their direct dependencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5db21eb3256559426a93983ff76345de14c42461", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5db21eb3256559426a93983ff76345de14c42461", "committedDate": "2020-08-05T01:47:40Z", "message": "Add auth so that components can only read from their direct dependencies"}, "afterCommit": {"oid": "af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "committedDate": "2020-08-05T01:50:14Z", "message": "Add auth so that components can only read from their direct dependencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/af8123cd0aad3fe0f4febb81046e9b679b8c43b0", "committedDate": "2020-08-05T01:50:14Z", "message": "Add auth so that components can only read from their direct dependencies"}, "afterCommit": {"oid": "11c6dcffc754ca2b932bc814a54f06874dfc85af", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/11c6dcffc754ca2b932bc814a54f06874dfc85af", "committedDate": "2020-08-05T01:55:01Z", "message": "Add auth so that components can only read from their direct dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTk1MDI4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-461995028", "createdAt": "2020-08-05T20:21:34Z", "commit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoyMTozNFrOG8ZOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoyMTozNFrOG8ZOng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng==", "bodyText": "Saves duplicate file writes but any main memory concerns in case of large number of packages in one configuration? It may get complicated but hybrid would be to cache only the needed information (system parameters and params).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465981086", "createdAt": "2020-08-05T20:21:34Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,12 +40,18 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n+    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b807d81a5ce574cf1e5796311d5cfde16f1ccb68", "committedDate": "2020-08-05T17:32:14Z", "message": "Merge branch 'master' into cross-component"}, "afterCommit": {"oid": "46a9c0ae9fa30712729da0d37e35110b4f867301", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/46a9c0ae9fa30712729da0d37e35110b4f867301", "committedDate": "2020-08-05T02:16:23Z", "message": "Do not tlog items under private namespaces"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46a9c0ae9fa30712729da0d37e35110b4f867301", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/46a9c0ae9fa30712729da0d37e35110b4f867301", "committedDate": "2020-08-05T02:16:23Z", "message": "Do not tlog items under private namespaces"}, "afterCommit": {"oid": "123c0506a108e8509e21d0ee81c52fc94e51e733", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/123c0506a108e8509e21d0ee81c52fc94e51e733", "committedDate": "2020-08-05T21:59:48Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "123c0506a108e8509e21d0ee81c52fc94e51e733", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/123c0506a108e8509e21d0ee81c52fc94e51e733", "committedDate": "2020-08-05T21:59:48Z", "message": "Cache only parameters and dependencies"}, "afterCommit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "committedDate": "2020-08-05T22:01:43Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDYzNzM5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462063739", "createdAt": "2020-08-05T22:21:13Z", "commit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMToxM1rOG8cnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMToxM1rOG8cnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNjU1MQ==", "bodyText": "Nit: Would rename method to indicate this is using cache. Overloading reduces readability for me.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466036551", "createdAt": "2020-08-05T22:21:13Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +282,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUse(PackageIdentifier packageIdentifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDYzODg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462063888", "createdAt": "2020-08-05T22:21:33Z", "commit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ae7a2e6fb91e3e2b9543510c63dd7baf633f922c", "committedDate": "2020-08-05T22:01:43Z", "message": "Cache only parameters and dependencies"}, "afterCommit": {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e4c3078e131d10ba13eb996929a17d316a82163", "committedDate": "2020-08-05T22:22:31Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDAwNTI5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462000529", "createdAt": "2020-08-05T20:30:02Z", "commit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDowMlrOG8Zfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1NTo0MlrOG8aSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTQ3NA==", "bodyText": "NIT: can you have a comment of what the cross platform param would look like?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465985474", "createdAt": "2020-08-05T20:30:02Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg==", "bodyText": "Does this expose to all components? Are we having authz issues?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465995852", "createdAt": "2020-08-05T20:50:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5ODM2MA==", "bodyText": "can we use computeIfAbsent? also does this function have to synchronize on the entire kernelConfigResolver?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465998360", "createdAt": "2020-08-05T20:55:42Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -123,22 +140,32 @@ public KernelConfigResolver(PackageStore packageStore, Kernel kernel) {\n         return resolvedServiceConfig;\n     }\n \n+    private synchronized PackageRecipe getPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException {\n+        if (!recipeCache.containsKey(packageIdentifier)) {\n+            recipeCache.put(packageIdentifier, packageStore.getPackageRecipe(packageIdentifier));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDgwNDIw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462080420", "createdAt": "2020-08-05T23:01:48Z", "commit": {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDg0MDQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462084041", "createdAt": "2020-08-05T23:11:39Z", "commit": {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDk3Mjc3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462097277", "createdAt": "2020-08-05T23:49:27Z", "commit": {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e4c3078e131d10ba13eb996929a17d316a82163", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9e4c3078e131d10ba13eb996929a17d316a82163", "committedDate": "2020-08-05T22:22:31Z", "message": "Cache only parameters and dependencies"}, "afterCommit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c247e7638f6a0da5069766f76f139ba0167d945", "committedDate": "2020-08-05T23:15:04Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDk4MzQw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462098340", "createdAt": "2020-08-05T23:52:34Z", "commit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1MjozNFrOG8ecNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1MjozNFrOG8ecNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjQ4Nw==", "bodyText": "Thanks for adding the comment!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466066487", "createdAt": "2020-08-05T23:52:34Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Patter matches {{otherComponentName:parameterNamespace:parameterKey}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7c247e7638f6a0da5069766f76f139ba0167d945", "committedDate": "2020-08-05T23:15:04Z", "message": "Cache only parameters and dependencies"}, "afterCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/185c21cf47dba46af807b9a607aafd00b4a06795", "committedDate": "2020-08-05T23:53:53Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDk5ODMy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462099832", "createdAt": "2020-08-05T23:57:03Z", "commit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTEyODAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462112803", "createdAt": "2020-08-06T00:39:40Z", "commit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDk5NDkw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462099490", "createdAt": "2020-08-05T23:56:00Z", "commit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1NzozOVrOG8eiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MjowM1rOG8fSDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODAwOQ==", "bodyText": "The PackageIdentifier constructor is labeled as deprecated. Why using a deprecated constructor?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466068009", "createdAt": "2020-08-05T23:57:39Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MTU0NQ==", "bodyText": "This is due to my lack of knowledge in kernel. What are the prameterNamespace?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466071545", "createdAt": "2020-08-06T00:10:22Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA==", "bodyText": "When would the code run in the else block? Shouldn' t the condition check in if branch be always true?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466075160", "createdAt": "2020-08-06T00:23:35Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA==", "bodyText": "getName() can throw NPE potentially?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076268", "createdAt": "2020-08-06T00:27:13Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjQzOQ==", "bodyText": "Shouldn't it log an error if it throws an exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076439", "createdAt": "2020-08-06T00:27:50Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ==", "bodyText": "Curious why we choose a function as the value? Is the intend to compute the value at dynamically? What if the compute is expensive?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466077909", "createdAt": "2020-08-06T00:32:59Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODQ1NA==", "bodyText": "Can you extract path and artifact to constants? I cannot comment on the lines that are from previous merge.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078454", "createdAt": "2020-08-06T00:35:04Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -52,8 +55,11 @@\n             \"echo installing service in Package %s with param {{params:%s_Param_1.value}}\";\n     private static final String LIFECYCLE_MOCK_RUN_COMMAND_FORMAT =\n             \"echo running service in Package %s with param {{params:%s_Param_2.value}}\";\n+    private static final String LIFECYCLE_MOCK_CROSS_COMPONENT_FORMAT =\n+            \"Package %s with param {{%s:params:%s_Param_1.value}} {{%s:artifacts:path}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODkxMg==", "bodyText": "Also is systemParameters accessible from IPC? Why is defined here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078912", "createdAt": "2020-08-06T00:36:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDA4NQ==", "bodyText": "Same here. Which case is not covered in the if block?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080085", "createdAt": "2020-08-06T00:41:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();\n+        }\n+        return resolveParameterValuesToUse(document, packageStore.getPackageRecipe(packageIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDI3MQ==", "bodyText": "If the getLeft() is an empty set, do you still return it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080271", "createdAt": "2020-08-06T00:42:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTI4NTk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462128598", "createdAt": "2020-08-06T01:33:34Z", "commit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozMzozNFrOG8gHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozMzozNFrOG8gHHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5Mzg1NQ==", "bodyText": "Is the exception expected? Wouldn't you want to log the exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466093855", "createdAt": "2020-08-06T01:33:34Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;\n+            }\n+        }\n+        return depSet.contains(canReadFrom.getName());\n+    }\n+\n+    @Nullable\n+    private String crossComponentLookup(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            DeploymentDocument document, PackageIdentifier crossedComponent, String namespace, String key) {\n+        // Handle cross-component system parameters\n+        Map<String, Function<PackageIdentifier, String>> systemParams =\n+                systemParameters.getOrDefault(namespace, Collections.emptyMap());\n+        if (systemParams.containsKey(key)) {\n+            return systemParams.get(key).apply(crossedComponent);\n+        }\n+\n+        // Handle cross-component component parameters\n+        if (namespace.equals(PARAM_NAMESPACE)) {\n+            try {\n+                Set<PackageParameter> resolvedParams =\n+                        resolveParameterValuesToUseWithCache(parameterAndDependencyCache, crossedComponent, document);\n+                Optional<PackageParameter> potentialParameter =\n+                        resolvedParams.stream().filter(p -> (p.getName() + PARAM_VALUE_SUFFIX).equals(key)).findFirst();\n+                if (potentialParameter.isPresent()) {\n+                    return potentialParameter.get().getValue();\n+                }\n+            } catch (PackageLoadingException e) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTI5Mjcy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462129272", "createdAt": "2020-08-06T01:35:36Z", "commit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozNTozNlrOG8gJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozNTozNlrOG8gJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5NDU1Mg==", "bodyText": "Do we want to add some additional test cases that cover error scenarios? e.g. the parameter value is not provided, or a wrong format of the placeholder is provided.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466094552", "createdAt": "2020-08-06T01:35:36Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81772a8787b50d0649a0656d9fdd6562c2a49a61", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/81772a8787b50d0649a0656d9fdd6562c2a49a61", "committedDate": "2020-08-06T02:32:21Z", "message": "Support cross-component parameters (no auth)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c66a0e5a3657dc63d325624f8111cdb22f4a00b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9c66a0e5a3657dc63d325624f8111cdb22f4a00b", "committedDate": "2020-08-06T02:32:21Z", "message": "Add auth so that components can only read from their direct dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9dee2a66b4fda6161bcaec5e841bbab2b4d1f2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5b9dee2a66b4fda6161bcaec5e841bbab2b4d1f2", "committedDate": "2020-08-06T02:32:21Z", "message": "Cache only parameters and dependencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/185c21cf47dba46af807b9a607aafd00b4a06795", "committedDate": "2020-08-05T23:53:53Z", "message": "Cache only parameters and dependencies"}, "afterCommit": {"oid": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "committedDate": "2020-08-06T02:32:22Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6ca7be6e05982b16ceea3dc7ccfcdefd0d98706a", "committedDate": "2020-08-06T02:32:22Z", "message": "Address comments"}, "afterCommit": {"oid": "76d92bf9760a204c14f4ad52edb244dc61cd17d3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/76d92bf9760a204c14f4ad52edb244dc61cd17d3", "committedDate": "2020-08-06T02:36:18Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76d92bf9760a204c14f4ad52edb244dc61cd17d3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/76d92bf9760a204c14f4ad52edb244dc61cd17d3", "committedDate": "2020-08-06T02:36:18Z", "message": "Address comments"}, "afterCommit": {"oid": "97c21544d9ec07ed6e879d56486821cdd49918fd", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97c21544d9ec07ed6e879d56486821cdd49918fd", "committedDate": "2020-08-06T02:41:42Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f152e8d2b104978f279b153f41994ad0db2206da", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f152e8d2b104978f279b153f41994ad0db2206da", "committedDate": "2020-08-06T02:49:45Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97c21544d9ec07ed6e879d56486821cdd49918fd", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/97c21544d9ec07ed6e879d56486821cdd49918fd", "committedDate": "2020-08-06T02:41:42Z", "message": "Address comments"}, "afterCommit": {"oid": "f152e8d2b104978f279b153f41994ad0db2206da", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f152e8d2b104978f279b153f41994ad0db2206da", "committedDate": "2020-08-06T02:49:45Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "515a342b1abbbdb9f61f34b4259ed8fb42fb31d3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/515a342b1abbbdb9f61f34b4259ed8fb42fb31d3", "committedDate": "2020-08-06T03:25:21Z", "message": "Simplify parameter interpolation"}, "afterCommit": {"oid": "98c76de68811ec205a17b74b359a8a4f9fcb8707", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/98c76de68811ec205a17b74b359a8a4f9fcb8707", "committedDate": "2020-08-06T03:27:44Z", "message": "Simplify parameter interpolation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ade2b48870b099b95ccb0bec035f53d8b46c37ff", "committedDate": "2020-08-06T03:45:43Z", "message": "Simplify parameter interpolation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98c76de68811ec205a17b74b359a8a4f9fcb8707", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/98c76de68811ec205a17b74b359a8a4f9fcb8707", "committedDate": "2020-08-06T03:27:44Z", "message": "Simplify parameter interpolation"}, "afterCommit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ade2b48870b099b95ccb0bec035f53d8b46c37ff", "committedDate": "2020-08-06T03:45:43Z", "message": "Simplify parameter interpolation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTc5NTUw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462179550", "createdAt": "2020-08-06T04:31:10Z", "commit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMToxMFrOG8i4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMToxMFrOG8i4uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzOTMyMA==", "bodyText": "Thanks for fixing it!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466139320", "createdAt": "2020-08-06T04:31:10Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -102,8 +102,10 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void postInject() {\n-        super.postInject();\n+        // Register token before calling super so that the token is available when the lifecyle thread\n+        // starts running\n         AuthenticationHandler.registerAuthToken(this);\n+        super.postInject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTgxNTYw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462181560", "createdAt": "2020-08-06T04:38:01Z", "commit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzI3MzM4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#pullrequestreview-462727338", "createdAt": "2020-08-06T17:23:18Z", "commit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2067, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}