{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzE1MzY1", "number": 513, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyNToyNFrOEsyJZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozNToxOVrOEw-wJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzk0NDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyNToyNFrOHgNnqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyODo0NFrOHgprXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzOTYyNA==", "bodyText": "Coerce.toLong here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503539624", "createdAt": "2020-10-12T21:25:24Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -213,10 +213,14 @@ protected void startup() throws InterruptedException {\n                     createNewDeployment(deployment);\n                 }\n             }\n-            Thread.sleep(pollingFrequency);\n+            Thread.sleep(getPollingFrequency());\n         }\n     }\n \n+    private long getPollingFrequency() {\n+        return Duration.ofSeconds((Long) deviceConfiguration.getDeploymentPollingFrequency().getOnce()).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5OTMyNQ==", "bodyText": "Done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503999325", "createdAt": "2020-10-13T14:28:44Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -213,10 +213,14 @@ protected void startup() throws InterruptedException {\n                     createNewDeployment(deployment);\n                 }\n             }\n-            Thread.sleep(pollingFrequency);\n+            Thread.sleep(getPollingFrequency());\n         }\n     }\n \n+    private long getPollingFrequency() {\n+        return Duration.ofSeconds((Long) deviceConfiguration.getDeploymentPollingFrequency().getOnce()).toMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUzOTYyNA=="}, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzk0OTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyNzozNVrOHgNq1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyNzozNVrOHgNq1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MDQzNw==", "bodyText": "remove the comment if we don't need to set a default value here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503540437", "createdAt": "2020-10-12T21:27:35Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -206,11 +248,14 @@ public boolean isDeviceConfiguredToTalkToCloud() {\n     }\n \n     private Topic getTopic(String parameterName) {\n-        return kernel.getConfig().lookup(SYSTEM_NAMESPACE_KEY, parameterName).dflt(\"\");\n+        return kernel.getConfig()\n+                .lookup(SERVICES_NAMESPACE_TOPIC, KERNEL_COMPONENT_NAME, PARAMETERS_CONFIG_KEY, parameterName);\n+        //return topic.dflt(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzk1NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyOToxOVrOHgNthw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyOToxOVrOHgNthw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTEyNw==", "bodyText": "is this bytes?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503541127", "createdAt": "2020-10-12T21:29:19Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -32,17 +35,22 @@\n @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n public class DeviceConfiguration {\n \n+    public static final String KERNEL_COMPONENT_NAME = \"aws.greengrass.Nucleus\";\n     public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n     public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n     public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n     public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n     public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n     public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n-    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n     public static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n     public static final String DEVICE_MQTT_NAMESPACE = \"mqtt\";\n+    public static final String IOT_ROLE_ALIAS_TOPIC = \"iotRoleAlias\";\n+    public static final String COMPONENT_STORE_MAX_SIZE = \"componentStoreMaxSize\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzk1NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMToyOToyOFrOHgNtxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyOTozNFrOHgpt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTE5MA==", "bodyText": "is this seconds?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503541190", "createdAt": "2020-10-12T21:29:28Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -32,17 +35,22 @@\n @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n public class DeviceConfiguration {\n \n+    public static final String KERNEL_COMPONENT_NAME = \"aws.greengrass.Nucleus\";\n     public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n     public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n     public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n     public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n     public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n     public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n-    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n     public static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n     public static final String DEVICE_MQTT_NAMESPACE = \"mqtt\";\n+    public static final String IOT_ROLE_ALIAS_TOPIC = \"iotRoleAlias\";\n+    public static final String COMPONENT_STORE_MAX_SIZE = \"componentStoreMaxSize\";\n+    public static final String DEPLOYMENT_POLLING_FREQUENCY = \"deploymentPollingFrequency\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5OTk2MA==", "bodyText": "Yes, renamed to reflect that", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r503999960", "createdAt": "2020-10-13T14:29:34Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -32,17 +35,22 @@\n @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n public class DeviceConfiguration {\n \n+    public static final String KERNEL_COMPONENT_NAME = \"aws.greengrass.Nucleus\";\n     public static final String DEVICE_PARAM_THING_NAME = \"thingName\";\n     public static final String DEVICE_PARAM_IOT_DATA_ENDPOINT = \"iotDataEndpoint\";\n     public static final String DEVICE_PARAM_IOT_CRED_ENDPOINT = \"iotCredEndpoint\";\n     public static final String DEVICE_PARAM_PRIVATE_KEY_PATH = \"privateKeyPath\";\n     public static final String DEVICE_PARAM_CERTIFICATE_FILE_PATH = \"certificateFilePath\";\n     public static final String DEVICE_PARAM_ROOT_CA_PATH = \"rootCaPath\";\n-    public static final String SYSTEM_NAMESPACE_KEY = \"system\";\n     public static final String DEVICE_PARAM_AWS_REGION = \"awsRegion\";\n     public static final String DEVICE_MQTT_NAMESPACE = \"mqtt\";\n+    public static final String IOT_ROLE_ALIAS_TOPIC = \"iotRoleAlias\";\n+    public static final String COMPONENT_STORE_MAX_SIZE = \"componentStoreMaxSize\";\n+    public static final String DEPLOYMENT_POLLING_FREQUENCY = \"deploymentPollingFrequency\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0MTE5MA=="}, "originalCommit": {"oid": "6ee9c12f987c9bfec38b4ce8f78c361e16039482"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk0MTc1OnYy", "diffSide": "RIGHT", "path": "aws.greengrass.Nucleus.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyOTowOFrOHg8-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoyOTowOFrOHg8-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxNTQ2OA==", "bodyText": "new syntax. https://github.com/aws/aws-greengrass-kernel/pull/518/files I will try to get this PR merged once build passes\nDo we need allow changing iot thing settings? It might get complicated, e.g. do we migrate local component store if rootpath changes? will we be able to report deployment status after thing info changes?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r504315468", "createdAt": "2020-10-13T23:29:08Z", "author": {"login": "hui-yang"}, "path": "aws.greengrass.Nucleus.yaml", "diffHunk": "@@ -4,14 +4,25 @@ ComponentName: aws.greengrass.Nucleus\n ComponentDescription: Core functionality for device side orchestration of deployments and lifecycle management for execution of Greengrass components and applications.\n ComponentPublisher: AWS\n ComponentVersion: '0.0.0'\n+ComponentType: aws.greengrass.nucleus\n Manifests:\n   - Platform:\n       os: macos\n-    Parameters:\n-      - name: jvmOptions\n-        # TODO: consider change to nested structure\n-        value: -Xms512m -Xmx512m\n-        type: STRING\n+    ComponentConfiguration:\n+      DefaultConfiguration:\n+        jvmOptions: -Xms512m -Xmx512m\n+        thingName: \"MyIotThing\"\n+        iotDataEndpoint: \"\"\n+        iotCredEndpoint: \"\"\n+        privateKeyPath: \"privKey.key\"\n+        certificateFilePath: \"thingCert.crt\"\n+        rootCaPath: \"rootCA.pem\"\n+        awsRegion: \"us-east-1\"\n+        rootpath: \"\"\n+        iotRoleAlias: \"MyIoTRoleAlias\"\n+        mqtt: \"\"\n+        deploymentPollingFrequencySeconds: 15L\n+        componentStoreMaxSizeBytes: 10_000_000_000L", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDEyOTExOnYy", "diffSide": "RIGHT", "path": "aws.greengrass.Nucleus.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0Mzo1M1rOHhuw4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0Mzo1M1rOHhuw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMTIzNA==", "bodyText": "this goes at the top level, not under manifest", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505131234", "createdAt": "2020-10-15T02:43:53Z", "author": {"login": "MikeDombo"}, "path": "aws.greengrass.Nucleus.yaml", "diffHunk": "@@ -4,14 +4,25 @@ ComponentName: aws.greengrass.Nucleus\n ComponentDescription: Core functionality for device side orchestration of deployments and lifecycle management for execution of Greengrass components and applications.\n ComponentPublisher: AWS\n ComponentVersion: '0.0.0'\n+ComponentType: aws.greengrass.nucleus\n Manifests:\n   - Platform:\n       os: macos\n-    Parameters:\n-      - name: jvmOptions\n-        # TODO: consider change to nested structure\n-        value: -Xms512m -Xmx512m\n-        type: STRING\n+    ComponentConfiguration:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDEyOTY5OnYy", "diffSide": "RIGHT", "path": "aws.greengrass.Nucleus.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0NDowOVrOHhuxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0NDowOVrOHhuxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMTMxMg==", "bodyText": "not a string, should be {}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505131312", "createdAt": "2020-10-15T02:44:09Z", "author": {"login": "MikeDombo"}, "path": "aws.greengrass.Nucleus.yaml", "diffHunk": "@@ -4,14 +4,25 @@ ComponentName: aws.greengrass.Nucleus\n ComponentDescription: Core functionality for device side orchestration of deployments and lifecycle management for execution of Greengrass components and applications.\n ComponentPublisher: AWS\n ComponentVersion: '0.0.0'\n+ComponentType: aws.greengrass.nucleus\n Manifests:\n   - Platform:\n       os: macos\n-    Parameters:\n-      - name: jvmOptions\n-        # TODO: consider change to nested structure\n-        value: -Xms512m -Xmx512m\n-        type: STRING\n+    ComponentConfiguration:\n+      DefaultConfiguration:\n+        jvmOptions: -Xms512m -Xmx512m\n+        thingName: \"MyIotThing\"\n+        iotDataEndpoint: \"\"\n+        iotCredEndpoint: \"\"\n+        privateKeyPath: \"privKey.key\"\n+        certificateFilePath: \"thingCert.crt\"\n+        rootCaPath: \"rootCA.pem\"\n+        awsRegion: \"us-east-1\"\n+        rootpath: \"\"\n+        iotRoleAlias: \"MyIoTRoleAlias\"\n+        mqtt: \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDEzMTAwOnYy", "diffSide": "RIGHT", "path": "aws.greengrass.Nucleus.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0NDozNlrOHhux4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0NDozNlrOHhux4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMTQ4OQ==", "bodyText": "some of these are bad defaults, so they just shouldn't have default values.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505131489", "createdAt": "2020-10-15T02:44:36Z", "author": {"login": "MikeDombo"}, "path": "aws.greengrass.Nucleus.yaml", "diffHunk": "@@ -4,14 +4,25 @@ ComponentName: aws.greengrass.Nucleus\n ComponentDescription: Core functionality for device side orchestration of deployments and lifecycle management for execution of Greengrass components and applications.\n ComponentPublisher: AWS\n ComponentVersion: '0.0.0'\n+ComponentType: aws.greengrass.nucleus\n Manifests:\n   - Platform:\n       os: macos\n-    Parameters:\n-      - name: jvmOptions\n-        # TODO: consider change to nested structure\n-        value: -Xms512m -Xmx512m\n-        type: STRING\n+    ComponentConfiguration:\n+      DefaultConfiguration:\n+        jvmOptions: -Xms512m -Xmx512m\n+        thingName: \"MyIotThing\"\n+        iotDataEndpoint: \"\"\n+        iotCredEndpoint: \"\"\n+        privateKeyPath: \"privKey.key\"\n+        certificateFilePath: \"thingCert.crt\"\n+        rootCaPath: \"rootCA.pem\"\n+        awsRegion: \"us-east-1\"\n+        rootpath: \"\"\n+        iotRoleAlias: \"MyIoTRoleAlias\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDEzOTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0ODowN1rOHhu2IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0ODowN1rOHhu2IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMjU3Ng==", "bodyText": "use Coerce.toLong", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505132576", "createdAt": "2020-10-15T02:48:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -388,6 +387,10 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n         }\n     }\n \n+    private long getConfiguredMaxSize() {\n+        return (long) deviceConfiguration.getComponentStoreMaxSizeBytes().getOnce();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0MDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0ODo1NVrOHhu24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0ODo1NVrOHhu24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMjc2OQ==", "bodyText": "how about all our other builtin components? It seems their configs are still deleted during deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505132769", "createdAt": "2020-10-15T02:48:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/componentmanager/KernelConfigResolver.java", "diffHunk": "@@ -170,7 +173,9 @@ public KernelConfigResolver(ComponentStore componentStore, Kernel kernel, Nucleu\n                     .put(SERVICE_LIFECYCLE_NAMESPACE_TOPIC, interpolatedLifecycle);\n         }\n \n-        servicesConfig.put(kernel.getMain().getName(), getMainConfig(rootPackages));\n+        String nucleusComponentName = getNucleusComponentName(servicesConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0NDcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MDo1N1rOHhu5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MDo1N1rOHhu5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzQwNA==", "bodyText": "The type which is written into the config store is typically the short name plugin, lambda, and so on. Not the full name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505133404", "createdAt": "2020-10-15T02:50:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0NjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MjowOVrOHhu6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODowODowOFrOHiT7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ==", "bodyText": "why add a dependency? doesn't seem helpful and may break stuff", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505133705", "createdAt": "2020-10-15T02:52:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5OTc0NA==", "bodyText": "We need to make sure it doesn't get wiped out on deployments", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505699744", "createdAt": "2020-10-15T17:01:08Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwMjIzMg==", "bodyText": "This isn't the way to fix it. We need a better fix to not remove builtin/nucleus components and their configurations. As I posted in the slack room, we still have topics getting removed during deployment. All CLI, Deployment, FSS, etc topics are removed which is very bad.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505702232", "createdAt": "2020-10-15T17:05:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNDg2MA==", "bodyText": "Are all topics being removed for builtin/plugins or was it just parameters? Also, the nucleus is neither of them, so we still need a way to persist it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505704860", "createdAt": "2020-10-15T17:08:57Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNTg2MA==", "bodyText": "The service root is being removed for builtins, so everything", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505705860", "createdAt": "2020-10-15T17:10:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNjU0Nw==", "bodyText": "That's why I said \"builtin/nucleus\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505706547", "createdAt": "2020-10-15T17:11:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxMTQ4Mg==", "bodyText": "That wasn't always happening, if service topics are removed shouldn't tests be failing?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505711482", "createdAt": "2020-10-15T17:20:09Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxNzQzMg==", "bodyText": "You would think so... but apparently not. It is definitely still happening", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505717432", "createdAt": "2020-10-15T17:30:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODA1NQ==", "bodyText": "I think it may not fail because all our services create the node if it doesn't exist. I'd expect it to fail with something else, but again, apparently not", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505718055", "createdAt": "2020-10-15T17:31:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcxODI4Ng==", "bodyText": "Even if the service topics are being removed right now which we of course have to fix but all builtin/plugin services are dependencies of main aren't they? So even if we solve that doesn't mean persisting this nucleus component will just work", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505718286", "createdAt": "2020-10-15T17:31:54Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcyMTE1Nw==", "bodyText": "the dependencies of main has nothing to do with persistence. They aren't in the new config map, so that's why they get removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505721157", "createdAt": "2020-10-15T17:36:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczMzEyMQ==", "bodyText": "My understanding was that if something isn't a dependency of main it won't be started up on nucleus startup/restart, Nucleus component probably will never need service lifecycle so it might be okay for that but it's just useless to have anything else as a service but not in main's dependency tree", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505733121", "createdAt": "2020-10-15T17:56:07Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTczNTEyMg==", "bodyText": "Anyway, the way you're adding the dependency isn't correct. Main could already have a dependency list present which you aren't accounting for.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505735122", "createdAt": "2020-10-15T17:59:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MDExNA==", "bodyText": "That I can address", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505740114", "createdAt": "2020-10-15T18:08:08Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -76,25 +97,55 @@ public DeviceConfiguration(Kernel kernel) {\n      * @param certificateFilePath certificate location on device\n      * @param rootCaFilePath      downloaded RootCA location on device\n      * @param awsRegion           aws region for the device\n+     * @param tesRoleAliasName    aws region for the device\n      * @throws DeviceConfigurationException when the configuration parameters are not valid\n      */\n     public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n                                String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n-                               String awsRegion) throws DeviceConfigurationException {\n-        this.kernel = kernel;\n-        deTildeValidator = getDeTildeValidator();\n-        regionValidator = getRegionValidator();\n+                               String awsRegion, String tesRoleAliasName) throws DeviceConfigurationException {\n+        this(kernel);\n         getThingName().withValue(thingName);\n         getIotDataEndpoint().withValue(iotDataEndpoint);\n         getIotCredentialEndpoint().withValue(iotCredEndpoint);\n         getPrivateKeyFilePath().withValue(privateKeyPath);\n         getCertificateFilePath().withValue(certificateFilePath);\n         getRootCAFilePath().withValue(rootCaFilePath);\n         getAWSRegion().withValue(awsRegion);\n+        getIotRoleAlias().withValue(tesRoleAliasName);\n \n         validate();\n     }\n \n+    /**\n+     * Get the Nucleus component name to lookup the configuration in the right place. If no component of type Nucleus\n+     * exists, create service config for the default Nucleus component.\n+     */\n+    private String getNucleusComponentName() {\n+        Optional<CaseInsensitiveString> nucleusComponent =\n+                kernel.getConfig().lookupTopics(SERVICES_NAMESPACE_TOPIC).children.keySet().stream()\n+                        .filter(s -> NUCLEUS_COMPONENT_TYPE.equals(getComponentType(s.toString()))).findAny();\n+        if (nucleusComponent.isPresent()) {\n+            return nucleusComponent.get().toString();\n+        } else {\n+            initializeNucleusComponentConfig();\n+            return DEFAULT_NUCLEUS_COMPONENT_NAME;\n+        }\n+    }\n+\n+    private void initializeNucleusComponentConfig() {\n+        this.kernel.getConfig().lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, SERVICE_TYPE_TOPIC_KEY,\n+                NUCLEUS_COMPONENT_TYPE);\n+        ArrayList<String> mainDependencies = new ArrayList<>();\n+        mainDependencies.add(DEFAULT_NUCLEUS_COMPONENT_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzcwNQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0ODU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MzoxMlrOHhu7qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxNTozNVrOHiSBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzk5NA==", "bodyText": "no default", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505133994", "createdAt": "2020-10-15T02:53:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -171,12 +222,44 @@ public Topics getMQTTNamespace() {\n         return getTopics(DEVICE_MQTT_NAMESPACE);\n     }\n \n+    public Topic getIotRoleAlias() {\n+        return getTopicWithDefault(IOT_ROLE_ALIAS_TOPIC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNTY2OQ==", "bodyText": "Do you mean there shouldn't be a default for this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505705669", "createdAt": "2020-10-15T17:10:11Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -171,12 +222,44 @@ public Topics getMQTTNamespace() {\n         return getTopics(DEVICE_MQTT_NAMESPACE);\n     }\n \n+    public Topic getIotRoleAlias() {\n+        return getTopicWithDefault(IOT_ROLE_ALIAS_TOPIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzk5NA=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwODkxMQ==", "bodyText": "Yes, there shouldn't be a default. If it isn't set, it should be null instead of empty string", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505708911", "createdAt": "2020-10-15T17:15:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -171,12 +222,44 @@ public Topics getMQTTNamespace() {\n         return getTopics(DEVICE_MQTT_NAMESPACE);\n     }\n \n+    public Topic getIotRoleAlias() {\n+        return getTopicWithDefault(IOT_ROLE_ALIAS_TOPIC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMzk5NA=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0ODcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MzoyMlrOHhu7xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MzoyMlrOHhu7xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNDAyMQ==", "bodyText": "no default", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505134021", "createdAt": "2020-10-15T02:53:22Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -149,11 +200,11 @@ public Topic getIotDataEndpoint() {\n     }\n \n     public Topic getIotCredentialEndpoint() {\n-        return getTopic(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n+        return getTopicWithDefault(DEVICE_PARAM_IOT_CRED_ENDPOINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE0ODk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MzozMFrOHhu76A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1MzozMFrOHhu76A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNDA1Ng==", "bodyText": "no default", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505134056", "createdAt": "2020-10-15T02:53:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -149,11 +200,11 @@ public Topic getIotDataEndpoint() {\n     }\n \n     public Topic getIotCredentialEndpoint() {\n-        return getTopic(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n+        return getTopicWithDefault(DEVICE_PARAM_IOT_CRED_ENDPOINT);\n     }\n \n     public Topic getAWSRegion() {\n-        return getTopic(DEVICE_PARAM_AWS_REGION).addValidator(regionValidator);\n+        return getTopicWithDefault(DEVICE_PARAM_AWS_REGION).addValidator(regionValidator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE1MTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/KernelUpdateDeploymentTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1NDo0NVrOHhu9NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNzoxMToxOVrOHiR3gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNDM4OQ==", "bodyText": "use NucleusPaths instead of using config store.\nWait why are we getting the modtime of the root path? The root shouldn't be changing ever.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505134389", "createdAt": "2020-10-15T02:54:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/KernelUpdateDeploymentTask.java", "diffHunk": "@@ -50,8 +54,9 @@ public DeploymentResult call() {\n         Deployment.DeploymentStage stage = deployment.getDeploymentStage();\n         KernelAlternatives kernelAlts = kernel.getContext().get(KernelAlternatives.class);\n         try {\n-            DeploymentConfigMerger.waitForServicesToStart(kernel.orderedDependencies(),\n-                    kernel.getConfig().lookup(\"system\", \"rootpath\").getModtime());\n+            DeploymentConfigMerger.waitForServicesToStart(kernel.orderedDependencies(), kernel.getConfig()\n+                    .lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, CONFIGURATION_CONFIG_KEY,\n+                            NUCLEUS_ROOT_PATH).getModtime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTcwNjM2OQ==", "bodyText": "It was always like that, not sure why. Anyway this will be changed in the next revision and I'll need to move out rootpath and possibly some other configs from the Nucleus recipe per Jamie's recommendation", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505706369", "createdAt": "2020-10-15T17:11:19Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/KernelUpdateDeploymentTask.java", "diffHunk": "@@ -50,8 +54,9 @@ public DeploymentResult call() {\n         Deployment.DeploymentStage stage = deployment.getDeploymentStage();\n         KernelAlternatives kernelAlts = kernel.getContext().get(KernelAlternatives.class);\n         try {\n-            DeploymentConfigMerger.waitForServicesToStart(kernel.orderedDependencies(),\n-                    kernel.getConfig().lookup(\"system\", \"rootpath\").getModtime());\n+            DeploymentConfigMerger.waitForServicesToStart(kernel.orderedDependencies(), kernel.getConfig()\n+                    .lookup(SERVICES_NAMESPACE_TOPIC, DEFAULT_NUCLEUS_COMPONENT_NAME, CONFIGURATION_CONFIG_KEY,\n+                            NUCLEUS_ROOT_PATH).getModtime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNDM4OQ=="}, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE1NjQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/componentmanager/KernelConfigResolverTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1NzoyMVrOHhvADA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1NzoyMVrOHhvADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNTExNg==", "bodyText": "we should remove kernel root path. It shouldn't ever be used by components. They won't have permissions to read/write anyway", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505135116", "createdAt": "2020-10-15T02:57:21Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/componentmanager/KernelConfigResolverTest.java", "diffHunk": "@@ -66,10 +67,10 @@\n     private static final String LIFECYCLE_SCRIPT_KEY = \"script\";\n     private static final String LIFECYCLE_MOCK_INSTALL_COMMAND_FORMAT =\n             \"echo installing service in Package %s with param {{\" + KernelConfigResolver.PARAM_NAMESPACE + \":%s_Param_1\" + KernelConfigResolver.PARAM_VALUE_SUFFIX\n-                    + \"}}, kernel rootPath as {{\" + KernelConfigResolver.KERNEL_NAMESPACE + \":\" + KernelConfigResolver.KERNEL_ROOT_PATH + \"}} and \"\n+                    + \"}}, kernel rootPath as {{\" + KernelConfigResolver.KERNEL_NAMESPACE + \":\" + DeviceConfiguration.NUCLEUS_ROOT_PATH + \"}} and \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE1Nzg5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/lifecyclemanager/KernelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1ODoxN1rOHhvA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1ODoxN1rOHhvA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNTM0NQ==", "bodyText": "use const for name", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505135345", "createdAt": "2020-10-15T02:58:17Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -115,42 +115,50 @@ void GIVEN_kernel_and_services_WHEN_orderedDependencies_THEN_dependencies_are_re\n         GreengrassService service2 = new GreengrassService(\n                 kernel.getConfig().lookupTopics(GreengrassService.SERVICES_NAMESPACE_TOPIC, \"service2\"));\n         service2.postInject();\n+        GreengrassService nucleus = kernel.locate(\"aws.greengrass.Nucleus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDE1OTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1OToxMlrOHhvB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo1OToxMlrOHhvB2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNTU3Nw==", "bodyText": "no getOnce when using coerce", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r505135577", "createdAt": "2020-10-15T02:59:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeploymentService.java", "diffHunk": "@@ -213,10 +219,20 @@ protected void startup() throws InterruptedException {\n                     createNewDeployment(deployment);\n                 }\n             }\n-            Thread.sleep(pollingFrequency);\n+            Thread.sleep(pollingFrequency.get());\n         }\n     }\n \n+    private void subscribeToPollingFrequencyAndGet() {\n+        deviceConfiguration.onTopicChange(DEPLOYMENT_POLLING_FREQUENCY_SECONDS, (whatHappened, frequency) -> {\n+            pollingFrequency.set(getPollingFrequency(frequency));\n+        });\n+    }\n+\n+    private Long getPollingFrequency(Topic pollingFrequencyTopic) {\n+        return Duration.ofSeconds(Coerce.toLong(pollingFrequencyTopic.getOnce())).toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4704665b27370b81549a578922264806499ece1b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTgzNTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoxMDo1MFrOHkbmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNjoyMFrOHl3zqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2Mjk2NQ==", "bodyText": "We don't need defaults for these two settings?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r507962965", "createdAt": "2020-10-19T18:10:50Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -202,12 +255,40 @@ public String getProxyPassword() {\n         return Coerce.toString(getProxyNamespace().findOrDefault(\"\", DEVICE_PARAM_PROXY_PASSWORD));\n     }\n \n+    public Topic getIotRoleAlias() {\n+        return getTopic(IOT_ROLE_ALIAS_TOPIC).dflt(\"\");\n+    }\n+\n+    public Topic getComponentStoreMaxSizeBytes() {\n+        return getTopic(COMPONENT_STORE_MAX_SIZE_BYTES);\n+    }\n+\n+    public Topic getDeploymentPollingFrequencySeconds() {\n+        return getTopic(DEPLOYMENT_POLLING_FREQUENCY_SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8283d980d5bffe5c869ddabb61aa268fdb48d4"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MzcwNQ==", "bodyText": "No they're being initialized with their defaults in the constructor", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r509473705", "createdAt": "2020-10-21T17:26:20Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -202,12 +255,40 @@ public String getProxyPassword() {\n         return Coerce.toString(getProxyNamespace().findOrDefault(\"\", DEVICE_PARAM_PROXY_PASSWORD));\n     }\n \n+    public Topic getIotRoleAlias() {\n+        return getTopic(IOT_ROLE_ALIAS_TOPIC).dflt(\"\");\n+    }\n+\n+    public Topic getComponentStoreMaxSizeBytes() {\n+        return getTopic(COMPONENT_STORE_MAX_SIZE_BYTES);\n+    }\n+\n+    public Topic getDeploymentPollingFrequencySeconds() {\n+        return getTopic(DEPLOYMENT_POLLING_FREQUENCY_SECONDS);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2Mjk2NQ=="}, "originalCommit": {"oid": "bc8283d980d5bffe5c869ddabb61aa268fdb48d4"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTg0MjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/tes/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODoxMjo0M1rOHkbqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNDozMFrOHl3sVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2NDAzNw==", "bodyText": "Is port still a param of TES?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r507964037", "createdAt": "2020-10-19T18:12:43Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/tes/README.md", "diffHunk": "@@ -13,23 +13,23 @@ Service lifecycle is managed by kernel and as part of kernel shutdown it stops t\n \n # Sample Configuration\n ```\n-system:\n-  awsRegion: \"us-east-1\"\n-  certificateFilePath: \"root/thingCert.crt\"\n-  iotCredEndpoint: \"c13im2gfya04ip.credentials.iot.us-east-1.amazonaws.com\"\n-  iotDataEndpoint: \"aun2g37imm74n-ats.iot.us-east-1.amazonaws.com\"\n-  privateKeyPath: \"root/privKey.key\"\n-  rootCaPath: \"root/rootCA.pem\"\n-  rootpath: \"root\"\n-  thingName: \"tes_thing\"\n services:\n   main:\n     lifecycle:\n     dependencies:\n       - TokenExchangeService\n+  aws.greengrass.Nucleus:\n+    parameters:\n+      awsRegion: \"us-east-1\"\n+      certificateFilePath: \"root/thingCert.crt\"\n+      iotCredEndpoint: \"c13im2gfya04ip.credentials.iot.us-east-1.amazonaws.com\"\n+      iotDataEndpoint: \"aun2g37imm74n-ats.iot.us-east-1.amazonaws.com\"\n+      privateKeyPath: \"root/privKey.key\"\n+      rootCaPath: \"root/rootCA.pem\"\n+      thingName: \"tes_thing\"\n+      iotRoleAlias: \"tes_alias\"\n   TokenExchangeService:\n     parameters:\n       port: 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8283d980d5bffe5c869ddabb61aa268fdb48d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MTgyOQ==", "bodyText": "Yes, it's still a param in TES because it's needed only if TES needs to run as a service and launch the http server, which is going to be a plugin and will have a recipe", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r509471829", "createdAt": "2020-10-21T17:24:30Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/tes/README.md", "diffHunk": "@@ -13,23 +13,23 @@ Service lifecycle is managed by kernel and as part of kernel shutdown it stops t\n \n # Sample Configuration\n ```\n-system:\n-  awsRegion: \"us-east-1\"\n-  certificateFilePath: \"root/thingCert.crt\"\n-  iotCredEndpoint: \"c13im2gfya04ip.credentials.iot.us-east-1.amazonaws.com\"\n-  iotDataEndpoint: \"aun2g37imm74n-ats.iot.us-east-1.amazonaws.com\"\n-  privateKeyPath: \"root/privKey.key\"\n-  rootCaPath: \"root/rootCA.pem\"\n-  rootpath: \"root\"\n-  thingName: \"tes_thing\"\n services:\n   main:\n     lifecycle:\n     dependencies:\n       - TokenExchangeService\n+  aws.greengrass.Nucleus:\n+    parameters:\n+      awsRegion: \"us-east-1\"\n+      certificateFilePath: \"root/thingCert.crt\"\n+      iotCredEndpoint: \"c13im2gfya04ip.credentials.iot.us-east-1.amazonaws.com\"\n+      iotDataEndpoint: \"aun2g37imm74n-ats.iot.us-east-1.amazonaws.com\"\n+      privateKeyPath: \"root/privKey.key\"\n+      rootCaPath: \"root/rootCA.pem\"\n+      thingName: \"tes_thing\"\n+      iotRoleAlias: \"tes_alias\"\n   TokenExchangeService:\n     parameters:\n       port: 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk2NDAzNw=="}, "originalCommit": {"oid": "bc8283d980d5bffe5c869ddabb61aa268fdb48d4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzk1MjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozNToxOVrOHm3Vvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozNToxOVrOHm3Vvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDYyMg==", "bodyText": "Thanks. With this, we can deprecate KernelVersion later", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/513#discussion_r510514622", "createdAt": "2020-10-22T23:35:19Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -41,15 +43,16 @@\n public class DeviceConfiguration {\n \n     public static final String DEFAULT_NUCLEUS_COMPONENT_NAME = \"aws.greengrass.Nucleus\";\n-    // TODO : The type should come from common model, remove these once it's available\n-    public static final String NUCLEUS_COMPONENT_TYPE = \"aws.greengrass.nucleus\";\n-    public static final String NUCLEUS_COMPONENT_TYPE_SHORT = \"Nucleus\";\n+    // TODO : Version should come from the installer based on which nucleus version it installed\n+    public static final String NUCLEUS_COMPONENT_VERSION = \"0.0.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56250b7435a9907cfb19dd58a3dcdfbe7a10f9bd"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 641, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}