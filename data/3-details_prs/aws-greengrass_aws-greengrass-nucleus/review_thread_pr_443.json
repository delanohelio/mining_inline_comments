{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjA2OTMx", "number": 443, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo0NzozMVrOEkPADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo0NzozMVrOEkPADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDI5OTY1OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo0NzozMVrOHTDpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo0NzozMVrOHTDpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NDY0MQ==", "bodyText": "nit: break; afterwards?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/443#discussion_r489744641", "createdAt": "2020-09-16T20:47:31Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -38,15 +38,19 @@ public static KernelIPCClientConfig getIPCConfigForService(String serviceName, K\n                         .getOnce())).build();\n     }\n \n-    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException {\n+    public static Kernel prepareKernelFromConfigFile(String configFile, Class testClass, String... serviceNames) throws InterruptedException {\n         Kernel kernel = new Kernel();\n         kernel.parseArgs(\"-i\", testClass.getResource(configFile).toString());\n \n         // ensure awaitIpcServiceLatch starts\n-        CountDownLatch awaitIpcServiceLatch = new CountDownLatch(1);\n+        CountDownLatch awaitIpcServiceLatch = new CountDownLatch(serviceNames.length);\n         kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(serviceName) && newState.equals(State.RUNNING)) {\n-                awaitIpcServiceLatch.countDown();\n+            if (serviceNames != null && serviceNames.length != 0) {\n+                for (String serviceName:serviceNames) {\n+                    if (service.getName().equals(serviceName) && newState.equals(State.RUNNING)) {\n+                        awaitIpcServiceLatch.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2032ea8c66f055651ac19fffc83857c69a2789df"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 508, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}