{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MjYwOTY5", "number": 780, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowMTowMlrOFDtAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1MjoxNVrOFDweog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDI3NTI4OnYy", "diffSide": "LEFT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowMTowMlrOIDfPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNDozMlrOIDfXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODQ2MQ==", "bodyText": "Kernel update uses this to override the config file to read. It has to be either getProvidedConfigPathName or transactionLogPath, and in order", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540528461", "createdAt": "2020-12-10T22:01:02Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -143,21 +142,14 @@ void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n             Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n-            if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n-                // If a config file is provided, kernel will use the provided file as a new base\n-                // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n-                kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7898983e34d26ea0a460b0e5b7e0c183b8cbb76b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDQ2Ng==", "bodyText": "See this recent change 9e7bd4a#diff-cb3183decf6725a896e16eba3ccf01fa10f8d8f08835204e4f1f7c56b7be6ae5 which resolves config file in kernel launch (instead of loader before)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540530466", "createdAt": "2020-12-10T22:04:32Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -143,21 +142,14 @@ void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n             Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n-            if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n-                // If a config file is provided, kernel will use the provided file as a new base\n-                // and ignore existing config and tlog files.\n-                // This ideally should only used for testing and not in production\n-                kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODQ2MQ=="}, "originalCommit": {"oid": "7898983e34d26ea0a460b0e5b7e0c183b8cbb76b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDM5NTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjozMjoxNVrOIDgSqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoxNzoyNlrOIDjaCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NTcwNw==", "bodyText": "remove? Or do you intend to keep it for internal use?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540545707", "createdAt": "2020-12-10T22:32:15Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -116,6 +116,8 @@\n \n     private static final String KERNEL_CONFIG_ARG = \"--config\";\n     private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5Njc0Ng==", "bodyText": "Same question. Where are they kept?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540596746", "createdAt": "2020-12-11T00:17:26Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -116,6 +116,8 @@\n \n     private static final String KERNEL_CONFIG_ARG = \"--config\";\n     private static final String KERNEL_CONFIG_ARG_SHORT = \"-i\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU0NTcwNw=="}, "originalCommit": {"oid": "8d6b1bbc5d61c52a659c37ff9de0e8c62a574db8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDc2NjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDoyMzoxM1rOIDjiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1NDo0NVrOIDkOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODg0Nw==", "bodyText": "is the original --config kept for our UAT?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540598847", "createdAt": "2020-12-11T00:23:13Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "diffHunk": "@@ -93,6 +95,12 @@ public void parseArgs(String... args) {\n                     Objects.requireNonNull(configArg, \"-i or --config requires an argument\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDIwNQ==", "bodyText": "It is kept for tests inside the kernel which use it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610205", "createdAt": "2020-12-11T00:54:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "diffHunk": "@@ -93,6 +95,12 @@ public void parseArgs(String... args) {\n                     Objects.requireNonNull(configArg, \"-i or --config requires an argument\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODg0Nw=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDgwNTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDozNzo0NFrOIDj2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1OTowOVrOIDkVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDA4Mw==", "bodyText": "Remove this comment? It doesn't sound accurate. This branch seems being used in kernel update.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540604083", "createdAt": "2020-12-11T00:37:44Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMTk1OA==", "bodyText": "Updating comment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540611958", "createdAt": "2020-12-11T00:59:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNDA4Mw=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDgxNjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo0MjowNFrOIDj8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1NToyM1rOIDkPrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNTU4Ng==", "bodyText": "What's in the default config.yaml? Do we want to rename it to defaultConfig.yaml?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540605586", "createdAt": "2020-12-11T00:42:04Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -87,7 +87,8 @@\n     public static final String SERVICE_TYPE_TOPIC_KEY = \"componentType\";\n     public static final String SERVICE_TYPE_TO_CLASS_MAP_KEY = \"componentTypeToClassMap\";\n     private static final String PLUGIN_SERVICE_TYPE_NAME = \"plugin\";\n-    static final String DEFAULT_CONFIG_YAML_FILE = \"config.yaml\";\n+    static final String DEFAULT_CONFIG_YAML_FILE_READ = \"config.yaml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDQ3OQ==", "bodyText": "What is in the file is determined by the user. It is config.yaml so that our uats can use it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610479", "createdAt": "2020-12-11T00:55:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Kernel.java", "diffHunk": "@@ -87,7 +87,8 @@\n     public static final String SERVICE_TYPE_TOPIC_KEY = \"componentType\";\n     public static final String SERVICE_TYPE_TO_CLASS_MAP_KEY = \"componentTypeToClassMap\";\n     private static final String PLUGIN_SERVICE_TYPE_NAME = \"plugin\";\n-    static final String DEFAULT_CONFIG_YAML_FILE = \"config.yaml\";\n+    static final String DEFAULT_CONFIG_YAML_FILE_READ = \"config.yaml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNTU4Ng=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDgyOTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo0Njo0N1rOIDkDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTowMTo1M1rOIDkZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA==", "bodyText": "Isn't this duplicate of line174?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540607430", "createdAt": "2020-12-11T00:46:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n                 }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDYyOQ==", "bodyText": "No. Write effective config writes it as YAML, not TLOG.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610629", "createdAt": "2020-12-11T00:55:44Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n                 }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMjI3OQ==", "bodyText": "kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n\nThis is writing to a tlog, right?\nAnd line 178 is also writing a tlog.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540612279", "createdAt": "2020-12-11T00:59:54Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n                 }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMzAwOQ==", "bodyText": "No, that's different. That's hooking up the tlog so that it will write to it with all the changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540613009", "createdAt": "2020-12-11T01:01:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file\n+                if ((externalConfigFromCmd || !tlogExists) && externalConfigExists) {\n+                    kernel.getConfig().read(externalConfig);\n                 }\n             }\n \n             // write new tlog and config files\n             kernel.writeEffectiveConfigAsTransactionLog(transactionLogPath);\n-            kernel.writeEffectiveConfig(configurationFile);\n+            kernel.writeEffectiveConfig();\n \n             // hook tlog to config\n             tlog = ConfigurationWriter.logTransactionsTo(kernel.getConfig(), transactionLogPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwNzQzMA=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDgzNzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo0OTo0NFrOIDkHtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1NTo1OFrOIDkQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwODQzNw==", "bodyText": "What if none of these three exists? Do we handle that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540608437", "createdAt": "2020-12-11T00:49:44Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDcwNQ==", "bodyText": "We do. We don't need to do anything, we just startup", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610705", "createdAt": "2020-12-11T00:55:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelLifecycle.java", "diffHunk": "@@ -142,27 +143,36 @@ void initConfigAndTlog(String configFilePath) {\n     void initConfigAndTlog() {\n         try {\n             Path transactionLogPath = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_TLOG_FILE);\n-            Path configurationFile = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE);\n+\n             if (Objects.nonNull(kernelCommandLine.getProvidedConfigPathName())) {\n                 // If a config file is provided, kernel will use the provided file as a new base\n                 // and ignore existing config and tlog files.\n                 // This ideally should only used for testing and not in production\n                 kernel.getConfig().read(kernelCommandLine.getProvidedConfigPathName());\n             } else {\n-                // if tlog presents, read the tlog first, because the yaml config file may not be up to date\n-                if (Files.exists(transactionLogPath)) {\n+                Path externalConfig = nucleusPaths.configPath().resolve(Kernel.DEFAULT_CONFIG_YAML_FILE_READ);\n+                boolean externalConfigFromCmd = Utils.isNotEmpty(kernelCommandLine.getProvidedInitialConfigPath());\n+                if (externalConfigFromCmd) {\n+                    externalConfig = Paths.get(kernelCommandLine.getProvidedInitialConfigPath());\n+                }\n+\n+                boolean tlogExists = Files.exists(transactionLogPath);\n+                boolean externalConfigExists = Files.exists(externalConfig);\n+\n+                // if tlog is present, read the tlog first because the yaml config file may not be up to date\n+                if (tlogExists) {\n                     kernel.getConfig().read(transactionLogPath);\n                 }\n \n-                // if configuration file is available, merge it. It will be merged with file's last modified timestamp\n-                if (Files.exists(configurationFile)) {\n-                    kernel.getConfig().read(configurationFile);\n+                // If there is no tlog, or the path was provided via commandline, read in that file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwODQzNw=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDg0MzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1MjoxNVrOIDkLJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMDo1NjozMlrOIDkRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwOTMxNw==", "bodyText": "What do customers expect to provide? Is there a document describing that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540609317", "createdAt": "2020-12-11T00:52:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/easysetup/README.md", "diffHunk": "@@ -22,8 +22,8 @@ OPTIONS\n                                 create the AWS resources that it requires.\n --root, -r                      (Optional) The path to the folder to use as the root for the AWS IoT Greengrass Core software. \n                                 Defaults to ~/.greengrass.\n---config, -i                    (Optional) The path to the configuration file with which to run the AWS IoT Greengrass Core\n-                                software. Defaults to config/config.yaml in the root folder.\n+--init-config, -init            (Optional) The path to the configuration file with which to run the AWS IoT Greengrass Core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYxMDkzMQ==", "bodyText": "Our documentation will need to explain it yes. Finn will update it post-reinvent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/780#discussion_r540610931", "createdAt": "2020-12-11T00:56:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/README.md", "diffHunk": "@@ -22,8 +22,8 @@ OPTIONS\n                                 create the AWS resources that it requires.\n --root, -r                      (Optional) The path to the folder to use as the root for the AWS IoT Greengrass Core software. \n                                 Defaults to ~/.greengrass.\n---config, -i                    (Optional) The path to the configuration file with which to run the AWS IoT Greengrass Core\n-                                software. Defaults to config/config.yaml in the root folder.\n+--init-config, -init            (Optional) The path to the configuration file with which to run the AWS IoT Greengrass Core", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYwOTMxNw=="}, "originalCommit": {"oid": "c0031061658accdb1631452a8a565ca4ffcacc58"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 149, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}