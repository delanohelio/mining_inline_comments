{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjcxMTg4", "number": 744, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMToxMDoxMlrOE_Z-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoyMToxM1rOE_e57A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTIxMzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMToxMDoxMlrOH9GS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMToxNDo1N1rOH9GaKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyODMzMA==", "bodyText": "why add this? Our other lifecycle steps can also timeout, but they never throw it up", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/744#discussion_r533828330", "createdAt": "2020-12-02T01:10:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -229,8 +229,9 @@ public final void requestStop() {\n      * Custom handler to handle error.\n      *\n      * @throws InterruptedException if the thread is interrupted while handling the error\n+     * @throws TimeoutException if running the handler takes longer than the timeout\n      */\n-    protected void handleError() throws InterruptedException {\n+    protected void handleError() throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412b26ae10396173bae25249cdcdca0ae46cf5c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyOTUwNg==", "bodyText": "It's just how the code is structured, some steps have all their logic in Lifecycle.java vs some i.e. recovery and bootstrap have it in GenericExternalService.java, I would have liked if it was all in one place but getting there will require some refactoring", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/744#discussion_r533829506", "createdAt": "2020-12-02T01:13:17Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -229,8 +229,9 @@ public final void requestStop() {\n      * Custom handler to handle error.\n      *\n      * @throws InterruptedException if the thread is interrupted while handling the error\n+     * @throws TimeoutException if running the handler takes longer than the timeout\n      */\n-    protected void handleError() throws InterruptedException {\n+    protected void handleError() throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyODMzMA=="}, "originalCommit": {"oid": "412b26ae10396173bae25249cdcdca0ae46cf5c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMDE4Ng==", "bodyText": "I think I'd prefer that the timeout is handled inside then.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/744#discussion_r533830186", "createdAt": "2020-12-02T01:14:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GreengrassService.java", "diffHunk": "@@ -229,8 +229,9 @@ public final void requestStop() {\n      * Custom handler to handle error.\n      *\n      * @throws InterruptedException if the thread is interrupted while handling the error\n+     * @throws TimeoutException if running the handler takes longer than the timeout\n      */\n-    protected void handleError() throws InterruptedException {\n+    protected void handleError() throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyODMzMA=="}, "originalCommit": {"oid": "412b26ae10396173bae25249cdcdca0ae46cf5c9"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDAyMDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzoyMToxM1rOH9NbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNzo0Mjo0MFrOH9OBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NTExNQ==", "bodyText": "What if this process goes rogue? Don't we need to kill it when it times out?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/744#discussion_r533945115", "createdAt": "2020-12-02T07:21:13Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -387,8 +387,22 @@ private synchronized void stopProcesses(List<Exec> processes) {\n \n     @Override\n     public void handleError() throws InterruptedException {\n-        // A placeholder for error handling in GenericExternalService\n-        run(\"recover\", null, lifecycleProcesses);\n+        if (getConfig().findNode(GreengrassService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC) == null) {\n+            // No recovery step defined in lifecycle\n+            return;\n+        }\n+\n+        Integer timeout = Coerce.toInt(getConfig().findOrDefault(Lifecycle.DEFAULT_ERROR_RECOVERY_HANDLER_TIMEOUT_SEC,\n+                GreengrassService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC,\n+                Lifecycle.TIMEOUT_NAMESPACE_TOPIC));\n+\n+        CountDownLatch handlerExecutionCdl = new CountDownLatch(1);\n+        run(Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC, c -> handlerExecutionCdl.countDown(), lifecycleProcesses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba63dc04000c08aa632938eccf3a2cc43fbc5444"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1NDgzNA==", "bodyText": "It's handled as part of https://github.com/aws/aws-greengrass-nucleus/blob/master/src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java#L360 where all all processes are cleaned up during shutdown so I didn't do anything specifically for the recovery one", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/744#discussion_r533954834", "createdAt": "2020-12-02T07:42:40Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -387,8 +387,22 @@ private synchronized void stopProcesses(List<Exec> processes) {\n \n     @Override\n     public void handleError() throws InterruptedException {\n-        // A placeholder for error handling in GenericExternalService\n-        run(\"recover\", null, lifecycleProcesses);\n+        if (getConfig().findNode(GreengrassService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n+                Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC) == null) {\n+            // No recovery step defined in lifecycle\n+            return;\n+        }\n+\n+        Integer timeout = Coerce.toInt(getConfig().findOrDefault(Lifecycle.DEFAULT_ERROR_RECOVERY_HANDLER_TIMEOUT_SEC,\n+                GreengrassService.SERVICE_LIFECYCLE_NAMESPACE_TOPIC, Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC,\n+                Lifecycle.TIMEOUT_NAMESPACE_TOPIC));\n+\n+        CountDownLatch handlerExecutionCdl = new CountDownLatch(1);\n+        run(Lifecycle.LIFECYCLE_RECOVER_NAMESPACE_TOPIC, c -> handlerExecutionCdl.countDown(), lifecycleProcesses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk0NTExNQ=="}, "originalCommit": {"oid": "ba63dc04000c08aa632938eccf3a2cc43fbc5444"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 109, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}