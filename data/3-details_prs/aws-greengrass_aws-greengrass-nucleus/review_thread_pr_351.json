{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDgyNTE3", "number": 351, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoyMTozNFrOEVkEVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMToxMFrOEVqb0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ2NDg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoyMTozNFrOG8ZOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjowMzo0M1rOG8cN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng==", "bodyText": "Saves duplicate file writes but any main memory concerns in case of large number of packages in one configuration? It may get complicated but hybrid would be to cache only the needed information (system parameters and params).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465981086", "createdAt": "2020-08-05T20:21:34Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,12 +40,18 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n+    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMTIxNw==", "bodyText": "Yes, it trying to save us from reading in the recipe file multiple times. I also debated this myself since it obviously increases our memory usage during the resolution time. If you don't think it is worthwhile, then I can get rid of it. I'm not sure how feasible caching just the parameters is, but I'll look.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466021217", "createdAt": "2020-08-05T21:43:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,12 +40,18 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n+    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng=="}, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMDA1MA==", "bodyText": "It is now caching only the parameters and dependencies.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466030050", "createdAt": "2020-08-05T22:03:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,12 +40,18 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();\n \n     private final PackageStore packageStore;\n     private final Kernel kernel;\n+    private final Map<PackageIdentifier, PackageRecipe> recipeCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MTA4Ng=="}, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ5MjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDowMlrOG8Zfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozMDowMlrOG8Zfwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4NTQ3NA==", "bodyText": "NIT: can you have a comment of what the cross platform param would look like?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465985474", "createdAt": "2020-08-05T20:30:02Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDU1NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1MDozOVrOG8aITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo0MTo1OVrOG8eQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg==", "bodyText": "Does this expose to all components? Are we having authz issues?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465995852", "createdAt": "2020-08-05T20:50:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTk5Nw==", "bodyText": "Any component can read any other component's parameters only if the component has the other as a dependency. That's what this function is for; it is providing the authorization.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466049997", "createdAt": "2020-08-05T23:00:21Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MjE4Mw==", "bodyText": "Is it safe to assume such Authz assumption?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466062183", "createdAt": "2020-08-05T23:38:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MzM4OA==", "bodyText": "That's how I want to define it. I don't think that it is reasonable to add more authz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466063388", "createdAt": "2020-08-05T23:41:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,63 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get())) {\n+                String replacement = crossComponentLookup(document, crossComponentIdentifier.get(), matcher.group(2),\n+                        matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NTg1Mg=="}, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDU3Mzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1NTo0MlrOG8aSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1NTo0MlrOG8aSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5ODM2MA==", "bodyText": "can we use computeIfAbsent? also does this function have to synchronize on the entire kernelConfigResolver?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r465998360", "createdAt": "2020-08-05T20:55:42Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -123,22 +140,32 @@ public KernelConfigResolver(PackageStore packageStore, Kernel kernel) {\n         return resolvedServiceConfig;\n     }\n \n+    private synchronized PackageRecipe getPackageRecipe(PackageIdentifier packageIdentifier)\n+            throws PackageLoadingException {\n+        if (!recipeCache.containsKey(packageIdentifier)) {\n+            recipeCache.put(packageIdentifier, packageStore.getPackageRecipe(packageIdentifier));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b807d81a5ce574cf1e5796311d5cfde16f1ccb68"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyMDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMToxM1rOG8cnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMToxM1rOG8cnRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNjU1MQ==", "bodyText": "Nit: Would rename method to indicate this is using cache. Overloading reduces readability for me.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466036551", "createdAt": "2020-08-05T22:21:13Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +282,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUse(PackageIdentifier packageIdentifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7a2e6fb91e3e2b9543510c63dd7baf633f922c"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAxOTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1MjozNFrOG8ecNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1MjozNFrOG8ecNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjQ4Nw==", "bodyText": "Thanks for adding the comment!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466066487", "createdAt": "2020-08-05T23:52:34Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Patter matches {{otherComponentName:parameterNamespace:parameterKey}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c247e7638f6a0da5069766f76f139ba0167d945"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTAyOTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1NzozOVrOG8eiKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjozMTo0NlrOG8hEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODAwOQ==", "bodyText": "The PackageIdentifier constructor is labeled as deprecated. Why using a deprecated constructor?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466068009", "createdAt": "2020-08-05T23:57:39Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwOTU1NQ==", "bodyText": "The identifier now includes \"scope\" which can be public or private. This constructor just sets it to private, which is fine for our testing. Kernel doesn't properly support scope right now and I'm not going to fix it in this PR.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466109555", "createdAt": "2020-08-06T02:31:46Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()\n+            throws Exception {\n+        // GIVEN\n+        PackageIdentifier rootPackageIdentifier =\n+                new PackageIdentifier(TEST_INPUT_PACKAGE_A, new Semver(\"1.2\", Semver.SemverType.NPM));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODAwOQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA1MzI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoxMDoyMlrOG8ev-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToxMjozNFrOG8fw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MTU0NQ==", "bodyText": "This is due to my lack of knowledge in kernel. What are the prameterNamespace?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466071545", "createdAt": "2020-08-06T00:10:22Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODE2MA==", "bodyText": "Right now we have 2: artifacts and params.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088160", "createdAt": "2020-08-06T01:12:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MTU0NQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA3NjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyMzozNVrOG8e-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTo1OTowNlrOG8giFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA==", "bodyText": "When would the code run in the else block? Shouldn' t the condition check in if branch be always true?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466075160", "createdAt": "2020-08-06T00:23:35Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODMyMQ==", "bodyText": "This should not be possible. I can remove it, but was just being extra safe.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088321", "createdAt": "2020-08-06T01:13:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MDkwMQ==", "bodyText": "If it's not possible, then let's remove it. It's a piece of dead code that conveys the wrong information.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466090901", "createdAt": "2020-08-06T01:22:25Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMDc1OA==", "bodyText": "I was wrong. It is possible because the order of component interpolation isn't defined, so this could by trying to access a component that hasn't yet been loaded.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466100758", "createdAt": "2020-08-06T01:59:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NTE2MA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA4MzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNzoxM1rOG8fCbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjowNjowNFrOG8gpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA==", "bodyText": "getName() can throw NPE potentially?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076268", "createdAt": "2020-08-06T00:27:13Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4ODQ3NA==", "bodyText": "No, why would you say so?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466088474", "createdAt": "2020-08-06T01:13:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MTYwMQ==", "bodyText": "Okay. I forgot optional.get() throws NoSuchElementException instead of return null. However, we probably still want to handle NoSuchElementException instead of let it go up the stack.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466091601", "createdAt": "2020-08-06T01:25:09Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjQ5Mw==", "bodyText": "Why are you talking about optional? What line are you talking about?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466092493", "createdAt": "2020-08-06T01:28:35Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMTgzNw==", "bodyText": "line 206: if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier, crossComponentIdentifier.get(), parameterAndDependencyCache))\ncrossComponentIdentifier.get() can throw NoSuchElementException.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466101837", "createdAt": "2020-08-06T02:03:08Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjE0MQ==", "bodyText": "No it can't because I just called isPresent, so it will be present.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466102141", "createdAt": "2020-08-06T02:04:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwMjcxMw==", "bodyText": "ahhh...I missed that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466102713", "createdAt": "2020-08-06T02:06:04Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjI2OA=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA4NDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNzo1MFrOG8fDFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDoyNzo1MFrOG8fDFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NjQzOQ==", "bodyText": "Shouldn't it log an error if it throws an exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466076439", "createdAt": "2020-08-06T00:27:50Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA5NTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozMjo1OVrOG8fI1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToxNjowNlrOG8f0oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ==", "bodyText": "Curious why we choose a function as the value? Is the intend to compute the value at dynamically? What if the compute is expensive?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466077909", "createdAt": "2020-08-06T00:32:59Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODkxMg==", "bodyText": "Also is systemParameters accessible from IPC? Why is defined here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078912", "createdAt": "2020-08-06T00:36:47Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4OTEyMQ==", "bodyText": "No, not available over IPC.\nIt is a function so that it can differ by what package it is for. So far all the implementations are not doing anything slow.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466089121", "createdAt": "2020-08-06T01:16:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -36,7 +41,13 @@\n     public static final String VERSION_CONFIG_KEY = \"version\";\n     public static final String PARAMETERS_CONFIG_KEY = \"parameters\";\n     private static final String INTERPOLATION_FORMAT = \"{{%s:%s}}\";\n-    private static final String PARAMETER_REFERENCE_FORMAT = String.format(INTERPOLATION_FORMAT, \"params\", \"%s.value\");\n+    // Pattern matches {{otherComponentName:parameterNamespace:parameterKey}}\n+    private static final Pattern CROSS_INTERPOLATION_REGEX =\n+            Pattern.compile(\"\\\\{\\\\{([\\\\.\\\\w]+):([\\\\.\\\\w+]+):([\\\\.\\\\w]+)}}\");\n+    private static final String PARAM_NAMESPACE = \"params\";\n+    private static final String PARAM_VALUE_SUFFIX = \".value\";\n+    private static final String PARAMETER_REFERENCE_FORMAT =\n+            String.format(INTERPOLATION_FORMAT, PARAM_NAMESPACE, \"%s\" + PARAM_VALUE_SUFFIX);\n     // Map from Namespace -> Key -> Function which returns the replacement value\n     private final Map<String, Map<String, Function<PackageIdentifier, String>>> systemParameters = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3NzkwOQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTA5ODk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNTowNFrOG8fK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDozNTowNFrOG8fK9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3ODQ1NA==", "bodyText": "Can you extract path and artifact to constants? I cannot comment on the lines that are from previous merge.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466078454", "createdAt": "2020-08-06T00:35:04Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -52,8 +55,11 @@\n             \"echo installing service in Package %s with param {{params:%s_Param_1.value}}\";\n     private static final String LIFECYCLE_MOCK_RUN_COMMAND_FORMAT =\n             \"echo running service in Package %s with param {{params:%s_Param_2.value}}\";\n+    private static final String LIFECYCLE_MOCK_CROSS_COMPONENT_FORMAT =\n+            \"Package %s with param {{%s:params:%s_Param_1.value}} {{%s:artifacts:path}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTExMDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MToxNFrOG8fRVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MToxNFrOG8fRVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDA4NQ==", "bodyText": "Same here. Which case is not covered in the if block?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080085", "createdAt": "2020-08-06T00:41:14Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();\n+        }\n+        return resolveParameterValuesToUse(document, packageStore.getPackageRecipe(packageIdentifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTExMTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDo0MjowM1rOG8fSDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToxNjo1MVrOG8f1bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDI3MQ==", "bodyText": "If the getLeft() is an empty set, do you still return it?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466080271", "createdAt": "2020-08-06T00:42:03Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4OTMyNQ==", "bodyText": "Yes, that is legitimate. Currently if a parameter is not declared then it won't have anything interpolated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466089325", "createdAt": "2020-08-06T01:16:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -198,6 +291,16 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n                         .equals(packageConfig.getResolvedVersion())).findAny();\n     }\n \n+    private Set<PackageParameter> resolveParameterValuesToUseWithCache(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            PackageIdentifier packageIdentifier, DeploymentDocument document) throws PackageLoadingException {\n+        if (parameterAndDependencyCache.containsKey(packageIdentifier)\n+                && parameterAndDependencyCache.get(packageIdentifier).getLeft() != null) {\n+            return parameterAndDependencyCache.get(packageIdentifier).getLeft();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4MDI3MQ=="}, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTIwMjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozMzozNFrOG8gHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozMzozNFrOG8gHHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5Mzg1NQ==", "bodyText": "Is the exception expected? Wouldn't you want to log the exception?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466093855", "createdAt": "2020-08-06T01:33:34Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolver.java", "diffHunk": "@@ -167,9 +195,74 @@ private String replace(String stringValue, PackageIdentifier packageIdentifier,\n             }\n         }\n \n+        // Handle cross-component parameters\n+        Matcher matcher = CROSS_INTERPOLATION_REGEX.matcher(stringValue);\n+\n+        while (matcher.find()) {\n+            String crossComponent = matcher.group(1);\n+            Optional<PackageIdentifier> crossComponentIdentifier =\n+                    packagesToDeploy.stream().filter(t -> t.getName().equals(crossComponent)).findFirst();\n+\n+            if (crossComponentIdentifier.isPresent() && componentCanReadParameterFrom(packageIdentifier,\n+                    crossComponentIdentifier.get(), parameterAndDependencyCache)) {\n+                String replacement =\n+                        crossComponentLookup(parameterAndDependencyCache, document, crossComponentIdentifier.get(),\n+                                matcher.group(2), matcher.group(3));\n+                if (replacement != null) {\n+                    stringValue = stringValue.replace(matcher.group(), replacement);\n+                }\n+            }\n+        }\n+\n         return stringValue;\n     }\n \n+    private boolean componentCanReadParameterFrom(PackageIdentifier component, PackageIdentifier canReadFrom,\n+                                                  Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>>\n+                                                          parameterAndDependencyCache) {\n+        Set<String> depSet;\n+        if (parameterAndDependencyCache.containsKey(component)\n+                && parameterAndDependencyCache.get(component).getRight() != null) {\n+            depSet = parameterAndDependencyCache.get(component).getRight();\n+        } else {\n+            try {\n+                PackageRecipe recipe = packageStore.getPackageRecipe(component);\n+                return recipe.getDependencies().containsKey(canReadFrom.getName());\n+            } catch (PackageLoadingException e) {\n+                return false;\n+            }\n+        }\n+        return depSet.contains(canReadFrom.getName());\n+    }\n+\n+    @Nullable\n+    private String crossComponentLookup(\n+            Map<PackageIdentifier, Pair<Set<PackageParameter>, Set<String>>> parameterAndDependencyCache,\n+            DeploymentDocument document, PackageIdentifier crossedComponent, String namespace, String key) {\n+        // Handle cross-component system parameters\n+        Map<String, Function<PackageIdentifier, String>> systemParams =\n+                systemParameters.getOrDefault(namespace, Collections.emptyMap());\n+        if (systemParams.containsKey(key)) {\n+            return systemParams.get(key).apply(crossedComponent);\n+        }\n+\n+        // Handle cross-component component parameters\n+        if (namespace.equals(PARAM_NAMESPACE)) {\n+            try {\n+                Set<PackageParameter> resolvedParams =\n+                        resolveParameterValuesToUseWithCache(parameterAndDependencyCache, crossedComponent, document);\n+                Optional<PackageParameter> potentialParameter =\n+                        resolvedParams.stream().filter(p -> (p.getName() + PARAM_VALUE_SUFFIX).equals(key)).findFirst();\n+                if (potentialParameter.isPresent()) {\n+                    return potentialParameter.get().getValue();\n+                }\n+            } catch (PackageLoadingException e) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTIwNzUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozNTozNlrOG8gJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTozNTozNlrOG8gJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5NDU1Mg==", "bodyText": "Do we want to add some additional test cases that cover error scenarios? e.g. the parameter value is not provided, or a wrong format of the placeholder is provided.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466094552", "createdAt": "2020-08-06T01:35:36Z", "author": {"login": "fengwang666"}, "path": "src/test/java/com/aws/iot/evergreen/packagemanager/KernelConfigResolverTest.java", "diffHunk": "@@ -214,6 +228,59 @@ void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_\n                 equalTo(\"echo running service in Package \" + \"PackageA with param PackageA_Param_2_default_value\"));\n     }\n \n+    @Test\n+    void GIVEN_deployment_with_parameters_set_WHEN_config_resolution_requested_THEN_cross_component_parameters_should_be_interpolated()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c21cf47dba46af807b9a607aafd00b4a06795"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTUwODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMToxMFrOG8i4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMToxMFrOG8i4uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzOTMyMA==", "bodyText": "Thanks for fixing it!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/351#discussion_r466139320", "createdAt": "2020-08-06T04:31:10Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -102,8 +102,10 @@ public static String exit2String(int exitCode) {\n \n     @Override\n     public void postInject() {\n-        super.postInject();\n+        // Register token before calling super so that the token is available when the lifecyle thread\n+        // starts running\n         AuthenticationHandler.registerAuthToken(this);\n+        super.postInject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ade2b48870b099b95ccb0bec035f53d8b46c37ff"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}