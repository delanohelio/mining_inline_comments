{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODY1NjQw", "number": 382, "title": "Implement recipe converter from common file contract.", "bodyText": "Issue #, if available:\nDescription of changes:\n\n\nFolder/packagemanager/common is temporarily copied from Brazil pkg EvergreenComponentCommon. It will be removed after maven dependency is setup.\n\n\nModified PackageRecipe.artifacts from a multi-platform artifacts (Map<String, List<ComponentArtifact>>) to single platform List<ComponentArtifact> by doing platform resolving at parsing time, so that it is consistent with other fields and ready to be migrate.\n\n\nAll custom deserializers in PackageRecipe can be removed afterwards with common model and converters. @Deprecated is added.\n\n\nImplement the converter to adapt the recipe file contract model to our business model PackageRecipe and models under packagemanager/models, so that we can keep using our business model.\n\n\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\nNot applicable. Will do afterwards.\n Updated or added new unit tests\n Updated or added new integration tests\nThe changes should be backward compatible.\n Updated or added new end-to-end tests\nThe changes should be backward compatible.\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-08-25T01:14:04Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382", "merged": true, "mergeCommit": {"oid": "69ccf77260a58f6a329da9f6eaae7dc69fbb4ded"}, "closed": true, "closedAt": "2020-08-25T17:14:41Z", "author": {"login": "leaf94"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCMmmDAH2gAyNDcyODY1NjQwOmMyMjNiMDBmMTY5ZTY5ZmI3MTNkMjAyYTkwNzZiZGZkZWE1ZmY1Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCaXh7gFqTQ3NDY4MzM3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c223b00f169e69fb713d202a9076bdfdea5ff529", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c223b00f169e69fb713d202a9076bdfdea5ff529", "committedDate": "2020-08-25T01:06:06Z", "message": "implement recipe converter with updated artifact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/dd2268fe47b3f6162576ba0f77ae5ee76845c96e", "committedDate": "2020-08-25T01:16:11Z", "message": "Merge from master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MDMyMjQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474032247", "createdAt": "2020-08-25T01:29:28Z", "commit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToyOToyOFrOHF_JjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTo0MzowMFrOHF_r4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzOTU2NA==", "bodyText": "What's the intention here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476039564", "createdAt": "2020-08-25T01:29:28Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentArtifact.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.net.URI;\n+\n+@JsonDeserialize(builder = ComponentArtifact.ComponentArtifactBuilder.class)\n+@Value\n+@Builder\n+public class ComponentArtifact {\n+    URI uri;\n+\n+    String digest;\n+\n+    String algorithm;\n+\n+    String unarchive;\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MDg2NA==", "bodyText": "Will we support nested param?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476040864", "createdAt": "2020-08-25T01:31:22Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/ComponentParameter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+@JsonDeserialize(builder = ComponentParameter.ComponentParameterBuilder.class)\n+@Value\n+@Builder\n+public class ComponentParameter {\n+\n+    String name;\n+\n+    String value;\n+\n+    ParameterType type;\n+\n+    public enum ParameterType {\n+        NUMBER, STRING, BOOLEAN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0MjEzMg==", "bodyText": "I think there's one in util", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476042132", "createdAt": "2020-08-25T01:33:27Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/SerializerFactory.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import lombok.AccessLevel;\n+import lombok.NoArgsConstructor;\n+\n+@NoArgsConstructor(access = AccessLevel.PRIVATE)\n+public final class SerializerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0Mzk0OA==", "bodyText": "Do we keep these models along with common/* ?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476043948", "createdAt": "2020-08-25T01:36:21Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/ComponentArtifact.java", "diffHunk": "@@ -13,6 +14,7 @@\n @Getter\n @AllArgsConstructor\n @NoArgsConstructor\n+@Builder\n public class ComponentArtifact {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA0ODM1NA==", "bodyText": "Does platformSpecificManifest only have details of the resolved platform?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476048354", "createdAt": "2020-08-25T01:43:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d310e02f4c80450b2e518878b204ec5e85fde98", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7d310e02f4c80450b2e518878b204ec5e85fde98", "committedDate": "2020-08-25T04:52:11Z", "message": "Merge branch 'master' into recipe_converter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/617f1078d50d79a7752cd6897e3d293cb0432ae9", "committedDate": "2020-08-25T04:52:29Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6deaacad6d46410cedd0a93135f0dddf5e7e726", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b6deaacad6d46410cedd0a93135f0dddf5e7e726", "committedDate": "2020-08-25T05:05:20Z", "message": "fix merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTMxMDU0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474131054", "createdAt": "2020-08-25T04:45:22Z", "commit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDo0NToyMlrOHGHCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTowNjo0NVrOHGHugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA==", "bodyText": "Is this a placeholder that in the future the POJO field name might be different than json field name?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476168818", "createdAt": "2020-08-25T04:45:22Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2OTA3NA==", "bodyText": "NIT: double copyright", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476169074", "createdAt": "2020-08-25T04:45:41Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE3OTYzNA==", "bodyText": "why the name is FromFile?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476179634", "createdAt": "2020-08-25T05:05:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MDA5Nw==", "bodyText": "Curious, why not use the existing PackageParameter and ComponentArtifact class?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476180097", "createdAt": "2020-08-25T05:06:45Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617f1078d50d79a7752cd6897e3d293cb0432ae9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f9d097bd776596f1419182e4ab0da311ddd239", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/43f9d097bd776596f1419182e4ab0da311ddd239", "committedDate": "2020-08-25T05:30:01Z", "message": "Fix deprecated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c91081d457c03f00c15a9cf31a6da3610938142b", "committedDate": "2020-08-25T05:41:57Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTUzODUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474153853", "createdAt": "2020-08-25T05:52:38Z", "commit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1MjozOVrOHGIkDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1NjozM1rOHGIo9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MzgwNw==", "bodyText": "I guess eventually we'll need to seek for tools to auto generate these pojo (like swagger ) in the common model. This LGTM for now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476193807", "createdAt": "2020-08-25T05:52:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NTA2MQ==", "bodyText": "which part should be moved to common model?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476195061", "createdAt": "2020-08-25T05:56:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTY0NzQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474164741", "createdAt": "2020-08-25T06:17:53Z", "commit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjoxNzo1NFrOHGJFHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozNTo0NFrOHGJgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwMjI3MA==", "bodyText": "Why isn't it final? Also is the class singleton?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476202270", "createdAt": "2020-08-25T06:17:54Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/config/PlatformResolver.java", "diffHunk": "@@ -13,25 +14,22 @@\n import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n-public final class PlatformResolver {\n+public class PlatformResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNTE5NA==", "bodyText": "Manually declaring builder class PlatformSpecificManifestBuilder is purely for annotation purpose so Jackson can use generated builder to deserialize. @JsonPOJOBuilder recognized default prefix is with.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476205194", "createdAt": "2020-08-25T06:25:39Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/common/PlatformSpecificManifest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.common;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+@JsonDeserialize(builder = PlatformSpecificManifest.PlatformSpecificManifestBuilder.class)\n+@Value\n+@Builder\n+public class PlatformSpecificManifest {\n+\n+    Platform platform;\n+\n+    @Builder.Default\n+    List<ComponentParameter> parameters = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, Object> lifecycle = Collections.emptyMap();\n+\n+    @Builder.Default\n+    List<ComponentArtifact> artifacts = Collections.emptyList();\n+\n+    @Builder.Default\n+    Map<String, DependencyProperties> dependencies = Collections.emptyMap();\n+\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public static class PlatformSpecificManifestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE2ODgxOA=="}, "originalCommit": {"oid": "dd2268fe47b3f6162576ba0f77ae5ee76845c96e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjI3Nw==", "bodyText": "I guess Ethan means deserialization part. Then common model needs to define exception(s) as well.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476206277", "createdAt": "2020-08-25T06:28:24Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NTA2MQ=="}, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNjQ0MA==", "bodyText": "Can you proceed if no match? Should it throw exception here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476206440", "createdAt": "2020-08-25T06:28:56Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwNzcwNg==", "bodyText": "Shouldn't we rename it to 'component...'? The name probably should avoid conflicting with file model", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476207706", "createdAt": "2020-08-25T06:31:43Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/models/PackageRecipe.java", "diffHunk": "@@ -29,6 +31,8 @@\n @Getter\n @NoArgsConstructor(force = true, access = AccessLevel.PRIVATE)\n @EqualsAndHashCode(onlyExplicitlyIncluded = true)\n+@Builder\n+@AllArgsConstructor\n public class PackageRecipe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwOTM1NA==", "bodyText": "nit: probably it will never happen, but can we ensure no null element in the result list by doing a filter?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#discussion_r476209354", "createdAt": "2020-08-25T06:35:44Z", "author": {"login": "wikimonkey"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/converter/RecipeConverter.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.packagemanager.converter;\n+\n+import com.aws.iot.evergreen.config.PlatformResolver;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentParameter;\n+import com.aws.iot.evergreen.packagemanager.common.ComponentRecipe;\n+import com.aws.iot.evergreen.packagemanager.common.DependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.common.PlatformSpecificManifest;\n+import com.aws.iot.evergreen.packagemanager.common.SerializerFactory;\n+import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n+import com.aws.iot.evergreen.packagemanager.models.ComponentArtifact;\n+import com.aws.iot.evergreen.packagemanager.models.PackageParameter;\n+import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeDependencyProperties;\n+import com.aws.iot.evergreen.packagemanager.models.RecipeTemplateVersion;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.inject.Inject;\n+\n+/**\n+ * This class handles conversion between recipe file contract and device business model. It also resolves platform\n+ * resolving logic while converting.\n+ */\n+public class RecipeConverter {\n+    // TODO add logging\n+    //    private static final Logger logger = LogManager.getLogger(RecipeConverter.class);\n+\n+    @Inject\n+    private PlatformResolver platformResolver;\n+\n+    /**\n+     * Converts.\n+     *\n+     * @param recipeFileContent recipe file content\n+     * @return Optional package recipe\n+     * @throws PackageLoadingException when failed to convert recipe file.\n+     */\n+    public Optional<PackageRecipe> convertFromFile(String recipeFileContent) throws PackageLoadingException {\n+\n+        ComponentRecipe componentRecipe;\n+        try {\n+            componentRecipe =\n+                    SerializerFactory.getRecipeSerializer().readValue(recipeFileContent, ComponentRecipe.class);\n+        } catch (JsonProcessingException e) {\n+            //TODO move this to common model\n+            throw new PackageLoadingException(\n+                    String.format(\"Failed to parse recipe file content to contract model. Recipe file content: '%s'.\",\n+                            recipeFileContent), e);\n+        }\n+\n+        Optional<PlatformSpecificManifest> optionalPlatformSpecificManifest =\n+                platformResolver.findBestMatch(componentRecipe.getManifests());\n+\n+        if (!optionalPlatformSpecificManifest.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        PlatformSpecificManifest platformSpecificManifest = optionalPlatformSpecificManifest.get();\n+\n+        PackageRecipe packageRecipe = PackageRecipe.builder()\n+                                                   .componentName(componentRecipe.getComponentName())\n+                                                   .version(componentRecipe.getVersion())\n+                                                   .publisher(componentRecipe.getPublisher())\n+                                                   .recipeTemplateVersion(RecipeTemplateVersion.valueOf(\n+                                                           componentRecipe.getTemplateVersion().name()))\n+                                                   .componentType(componentRecipe.getComponentType())\n+                                                   .dependencies(convertDependencyFromFile(\n+                                                           platformSpecificManifest.getDependencies()))\n+                                                   .lifecycle(platformSpecificManifest.getLifecycle())\n+                                                   .artifacts(convertArtifactsFromFile(\n+                                                           platformSpecificManifest.getArtifacts()))\n+\n+                                                   .packageParameters(convertParametersFromFile(\n+                                                           platformSpecificManifest.getParameters()))\n+                                                   .build();\n+\n+        return Optional.of(packageRecipe);\n+    }\n+\n+    private Set<PackageParameter> convertParametersFromFile(List<ComponentParameter> parameters) {\n+        if (parameters == null || parameters.isEmpty()) {\n+            return Collections.emptySet();\n+        }\n+        return parameters.stream().map(this::convertParameterFromFile).collect(Collectors.toSet());\n+    }\n+\n+    private PackageParameter convertParameterFromFile(ComponentParameter parameter) {\n+        if (parameter == null) {\n+            return null;\n+        }\n+        return PackageParameter.builder()\n+                               .name(parameter.getName())\n+                               .value(parameter.getValue())\n+                               .type(PackageParameter.ParameterType.valueOf(parameter.getType().name()))\n+                               .build();\n+\n+    }\n+\n+    private List<ComponentArtifact> convertArtifactsFromFile(\n+            List<com.aws.iot.evergreen.packagemanager.common.ComponentArtifact> artifacts) {\n+        if (artifacts == null || artifacts.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        return artifacts.stream().map(this::convertArtifactFromFile).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c91081d457c03f00c15a9cf31a6da3610938142b"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc98b9ebb06f263c1d650827ef4b0360c423da01", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/bc98b9ebb06f263c1d650827ef4b0360c423da01", "committedDate": "2020-08-25T07:22:05Z", "message": "fix more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1488b54c837edb7d8dc689b7ffd2702f36cbaba7", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1488b54c837edb7d8dc689b7ffd2702f36cbaba7", "committedDate": "2020-08-25T15:48:10Z", "message": "fix more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7844daeddef52f12d67e3bc84785df540a58445", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d7844daeddef52f12d67e3bc84785df540a58445", "committedDate": "2020-08-25T16:03:18Z", "message": "wikimonkey's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8392192c599d989fad4d368744e03434babd5be2", "author": {"user": {"login": "leaf94", "name": "Ethan Huang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8392192c599d989fad4d368744e03434babd5be2", "committedDate": "2020-08-25T16:09:26Z", "message": "Merge branch 'master' into recipe_converter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjU5Mzg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474659388", "createdAt": "2020-08-25T16:37:33Z", "commit": {"oid": "8392192c599d989fad4d368744e03434babd5be2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjgzMzc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/382#pullrequestreview-474683375", "createdAt": "2020-08-25T17:08:19Z", "commit": {"oid": "8392192c599d989fad4d368744e03434babd5be2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3188, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}