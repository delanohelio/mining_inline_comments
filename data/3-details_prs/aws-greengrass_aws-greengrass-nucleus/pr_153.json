{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODgxNTM4", "number": 153, "title": "Fix bugs and clean up code", "bodyText": "Issue #, if available:\nDescription of changes:\nfix a couple NPEs;\nclean up Kernel.java a bit and remove broken flag;\nremove fallback main because it's currently not used;\nadd a few more verifications and tests;\nWhy is this change necessary:\nHow was this change tested:\nmaven verify\nA few tests have been flaky when I run the tests on my desktop. I'm not sure whether it has been flaky or aggravated by my change. But I'll keep monitoring them.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-03T01:03:54Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153", "merged": true, "mergeCommit": {"oid": "0c9a58a1496e9cf3f60c7600f4a420a3b8532780"}, "closed": true, "closedAt": "2020-04-06T17:47:44Z", "author": {"login": "fengwang666"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT2L9ngH2gAyMzk3ODgxNTM4OmE2N2MyOTFjZDM1NTc1YzY2NGM2NDE3ZjNkMDg2NzU3YmJhZGViZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVCaGygFqTM4ODQ3OTk2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a67c291cd35575c664c6417f3d086757bbadebf0", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a67c291cd35575c664c6417f3d086757bbadebf0", "committedDate": "2020-04-03T00:58:35Z", "message": "Fix bugs and clean up code\n\nfix a couple NPEs;\nclean up Kernel.java a bit and remove broken flag;\nremove fallback main because it's currently not used;\nadd a few more verifications and tests;"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODc4MDU2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-386878056", "createdAt": "2020-04-03T01:11:05Z", "commit": {"oid": "a67c291cd35575c664c6417f3d086757bbadebf0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxMTowNVrOGABy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMToxMzowNlrOGAB06Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MjYwMg==", "bodyText": "I know why you did this, but I don't feel that this is appropriately fixing it. The reason why it failed is that the subscriber is called immediately during the subscribe. Which I think we do want, since that will immediately cause the service to restart and wait for the dependency to come up. With the change that you've made it will not do this; instead it would need the dependency to change state again before triggering this handling.\nI think one potential fix is to overload dependencyReady with an extra parameter for the startWhen state. Alternatively, just remove the start when state because I think we've been talking about getting rid of it for a while.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r402682602", "createdAt": "2020-04-03T01:11:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -758,7 +758,8 @@ public synchronized void addOrUpdateDependency(\n     private Subscriber createDependencySubscriber(EvergreenService dependentEvergreenService) {\n         return (WhatHappened what, Topic t) -> {\n             if (this.getState() == State.INSTALLED || this.getState() == State.RUNNING) {\n-                if (!dependencyReady(dependentEvergreenService)) {\n+                if (dependencies.containsKey(dependentEvergreenService)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67c291cd35575c664c6417f3d086757bbadebf0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4Mjc3Mw==", "bodyText": "nit\ncreatePaths", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r402682773", "createdAt": "2020-04-03T01:11:43Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -202,10 +209,7 @@ private void initPaths(String rootAbsolutePath) {\n         Exec.addFirstPath(clitoolPath);\n         workPath = Paths.get(deTilde(workPathName));\n         Exec.setDefaultEnv(\"HOME\", workPath.toString());\n-        ensureCreated(configPath);\n-        ensureCreated(clitoolPath);\n-        ensureCreated(rootPath);\n-        ensureCreated(workPath);\n+        createPath(rootPath, configPath, clitoolPath, workPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67c291cd35575c664c6417f3d086757bbadebf0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY4MzExMw==", "bodyText": "Can this be scoped down from throwable? Maybe IOException?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r402683113", "createdAt": "2020-04-03T01:13:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -247,37 +248,38 @@ public Kernel launch() {\n         }\n         Path transactionLogPath = configPath.resolve(\"config.tlog\"); //Paths.get(deTilde(\"~root/config/config.tlog\"));\n         Path configurationFile = configPath.resolve(\"config.yaml\"); //Paths.get(deTilde(\"~root/config/config.yaml\"));\n-        if (!broken) {\n-            try {\n-                if (haveRead) {\n-                    // new config file came in from the outside\n-                    writeEffectiveConfig(configurationFile);\n-                    Files.deleteIfExists(transactionLogPath);\n-                } else {\n-                    if (Files.exists(configurationFile)) {\n-                        read(configurationFile);\n-                    }\n-                    if (Files.exists(transactionLogPath)) {\n-                        read(transactionLogPath);\n-                    }\n+        try {\n+            mainService = EvergreenService.locate(context, mainServiceName);\n+        } catch (ServiceLoadException sle) {\n+            RuntimeException rte =\n+                    new RuntimeException(\"Cannot load main service\", sle);\n+            logger.atError().setEventType(\"system-boot-error\").setCause(rte);\n+            throw rte;\n+        }\n+        try {\n+            if (haveRead) {\n+                // new config file came in from the outside\n+                writeEffectiveConfig(configurationFile);\n+                Files.deleteIfExists(transactionLogPath);\n+            } else {\n+                if (Files.exists(configurationFile)) {\n+                    read(configurationFile);\n+                }\n+                if (Files.exists(transactionLogPath)) {\n+                    read(transactionLogPath);\n                 }\n-                tlog = ConfigurationWriter.logTransactionsTo(this, transactionLogPath);\n-                tlog.flushImmediately(true);\n-            } catch (Throwable ioe) {\n-                // Too early in the boot to log a message\n-                logger.atError().setEventType(\"system-config-error\").setCause(ioe).log();\n-                broken = true;\n-                return this;\n             }\n+            tlog = ConfigurationWriter.logTransactionsTo(this, transactionLogPath);\n+            tlog.flushImmediately(true);\n+        } catch (Throwable ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a67c291cd35575c664c6417f3d086757bbadebf0"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a54e4c73628b6279edadd396604e1be444b84b8", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7a54e4c73628b6279edadd396604e1be444b84b8", "committedDate": "2020-04-03T03:41:33Z", "message": "Merge branch 'master' into kernel-bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aadd8b8fffaa1f928201d428eb8ce56a05367ec", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0aadd8b8fffaa1f928201d428eb8ce56a05367ec", "committedDate": "2020-04-03T03:46:53Z", "message": "Fix bugs and clean up code\n\nfix a couple NPEs;\nclean up Kernel.java a bit and remove broken flag;\nremove fallback main because it's currently not used;\nadd a few more verifications and tests;"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b21c9b69007a4bea754be91dfbb34f06cccb8b", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a3b21c9b69007a4bea754be91dfbb34f06cccb8b", "committedDate": "2020-04-03T03:46:53Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzYyMTIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-387362123", "createdAt": "2020-04-03T15:31:11Z", "commit": {"oid": "a3b21c9b69007a4bea754be91dfbb34f06cccb8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozMToxMVrOGAak8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozMToxMVrOGAak8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4ODYyNA==", "bodyText": "This can be tricky. since this subscriber is created and added only once, if you update the same dependency with a different startWhen, it will not update the subscriber", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r403088624", "createdAt": "2020-04-03T15:31:11Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -756,7 +756,7 @@ public synchronized void addOrUpdateDependency(\n \n         dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n             if (dependencyInfo == null) {\n-                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n+                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService, startWhen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b21c9b69007a4bea754be91dfbb34f06cccb8b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d6f3d7cb143b91ee50bcefdf9ca1de8095a7ea7", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9d6f3d7cb143b91ee50bcefdf9ca1de8095a7ea7", "committedDate": "2020-04-03T21:48:29Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjAzODUz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-387603853", "createdAt": "2020-04-03T21:57:23Z", "commit": {"oid": "9d6f3d7cb143b91ee50bcefdf9ca1de8095a7ea7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1NzoyM1rOGAq5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1NzoyM1rOGAq5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1NTk3OQ==", "bodyText": "Would it be crazy to just do this outside of the compute so that the value is in the map when dependencyRead() tries to look it up?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r403355979", "createdAt": "2020-04-03T21:57:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -755,26 +755,17 @@ public synchronized void addOrUpdateDependency(\n         }\n \n         dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n-            if (dependencyInfo == null) {\n-                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n-                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n-                context.get(Kernel.class).clearODcache();\n-                return new DependencyInfo(startWhen, isDefault, subscriber);\n-            } else {\n-                dependencyInfo.startWhen = startWhen;\n-                // if a dependency is added as both a default and a non-default, treat it as default dependency\n-                if (!dependencyInfo.isDefaultDependency) {\n-                    dependencyInfo.isDefaultDependency = isDefault;\n-                }\n-                return dependencyInfo;\n-            }\n+            Subscriber subscriber = createDependencySubscriber(dependentEvergreenService, startWhen);\n+            dependentEvergreenService.getStateTopic().subscribe(subscriber);\n+            context.get(Kernel.class).clearODcache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d6f3d7cb143b91ee50bcefdf9ca1de8095a7ea7"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjE4NDkx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-387618491", "createdAt": "2020-04-03T22:37:36Z", "commit": {"oid": "9d6f3d7cb143b91ee50bcefdf9ca1de8095a7ea7"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f96a319bb54e7ddb2babb2a2e492e645da2c7d14", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f96a319bb54e7ddb2babb2a2e492e645da2c7d14", "committedDate": "2020-04-03T23:04:17Z", "message": "address comments not to create multiple subscribers for a dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjMyNzI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-387632726", "createdAt": "2020-04-03T23:28:27Z", "commit": {"oid": "f96a319bb54e7ddb2babb2a2e492e645da2c7d14"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoyODoyN1rOGAshhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMzoyODoyN1rOGAshhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM4MjY2MQ==", "bodyText": "Why do we want to resubscribe all the time? I believe we ought to be using computeIfAbsent and then just subscribing once.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r403382661", "createdAt": "2020-04-03T23:28:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -755,26 +755,22 @@ public synchronized void addOrUpdateDependency(\n         }\n \n         dependencies.compute(dependentEvergreenService, (dependentService, dependencyInfo) -> {\n-            if (dependencyInfo == null) {\n-                Subscriber subscriber = createDependencySubscriber(dependentEvergreenService);\n-                dependentEvergreenService.getStateTopic().subscribe(subscriber);\n-                context.get(Kernel.class).clearODcache();\n-                return new DependencyInfo(startWhen, isDefault, subscriber);\n-            } else {\n-                dependencyInfo.startWhen = startWhen;\n-                // if a dependency is added as both a default and a non-default, treat it as default dependency\n-                if (!dependencyInfo.isDefaultDependency) {\n-                    dependencyInfo.isDefaultDependency = isDefault;\n-                }\n-                return dependencyInfo;\n+            // If the dependency already exists, we should first remove the subscriber before creating the\n+            // new subscriber with updated input.\n+            if (dependencyInfo != null) {\n+                dependentEvergreenService.getStateTopic().remove(dependencyInfo.stateTopicSubscriber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f96a319bb54e7ddb2babb2a2e492e645da2c7d14"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjM5ODQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-387639849", "createdAt": "2020-04-04T00:00:08Z", "commit": {"oid": "f96a319bb54e7ddb2babb2a2e492e645da2c7d14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a70d3730f9530e5bd20f25f772b367b20362dc1c", "committedDate": "2020-04-04T01:04:03Z", "message": "Merge branch 'master' into kernel-bugfix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDMyODY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-388432866", "createdAt": "2020-04-06T16:46:02Z", "commit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0NjowM1rOGBgtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo0NzowMlrOGBgvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzU3Mw==", "bodyText": "add \".log()\" in the end. Also is it good to log the error and throw it at the same time?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r404237573", "createdAt": "2020-04-06T16:46:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -141,8 +140,13 @@ public Kernel parseArgs(String... args) {\n                         read(deTilde(getArg()));\n                         haveRead = true;\n                     } catch (Throwable ex) {\n-                        broken = true;\n-                        logger.atError().log(\"Can't read config file {}\", arg, ex.getLocalizedMessage());\n+                        // Usually we don't want to log and throw at the same time because it can produce duplicate logs\n+                        // if the handler of the exception also logs. However since we use structured logging, I\n+                        // decide to log the error so that the future logging parser can parse the exceptions.\n+                        RuntimeException rte =\n+                                new RuntimeException(String.format(\"Can't read the config file %s\", getArg()), ex);\n+                        logger.atError().setEventType(\"parse-args-error\").setCause(rte);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzNzY5Mw==", "bodyText": "Ditto", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r404237693", "createdAt": "2020-04-06T16:46:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -160,19 +164,17 @@ public Kernel parseArgs(String... args) {\n                     rootAbsolutePath = getArg();\n                     break;\n                 default:\n-                    logger.atError().log(\"Undefined command line argument: {}\", arg);\n-                    broken = true;\n-                    break;\n+                    RuntimeException rte =\n+                            new RuntimeException(String.format(\"Undefined command line argument: %s\", arg));\n+                    logger.atError().setEventType(\"parse-args-error\").setCause(rte);\n+                    throw rte;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIzODIxOA==", "bodyText": "Curious, is it only available to Linux?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#discussion_r404238218", "createdAt": "2020-04-06T16:47:02Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -297,48 +294,36 @@ public Kernel launch() {\n             });\n         } catch (Throwable ex) {\n             logger.atError().setEventType(\"system-boot-error\").setCause(ex)\n-                    .log(\"***BOOT FAILED, SWITCHING TO FALLBACKMAIN*** \");\n-            mainServiceName = \"fallbackMain\";\n-            try {\n-                mainService = getMain();\n-            } catch (Throwable t) {\n-                logger.atError().setEventType(\"system-boot-error\").setCause(t)\n-                        .log(\"***FALLBACK BOOT FAILED, ABANDON ALL HOPE*** \");\n-            }\n+                    .log(\"***BOOT FAILED, EXITING*** \");\n+            // The error is not recoverable, throw the exception up.\n+            throw ex;\n         }\n         writeEffectiveConfig();\n-        try {\n-            logger.atInfo().setEventType(\"system-start\").addKeyValue(\"main\", getMain()).log();\n-            startupAllServices();\n-        } catch (Throwable ex) {\n-            logger.atError().setEventType(\"service-start-error\").setCause(ex).log();\n-        }\n+        logger.atInfo().setEventType(\"system-start\").addKeyValue(\"main\", getMain()).log();\n+        startupAllServices();\n+\n         return this;\n     }\n \n-    private boolean ensureCreated(Path p) {\n-        try {\n-            Files.createDirectories(p,\n-                    PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(\"rwx------\")));\n-            return true;\n-        } catch (IOException ex) {\n-            logger.atError().setEventType(\"file-path-create-error\").setCause(ex).addKeyValue(\"filePath\", p).log();\n-            return false;\n+    private void createPaths(Path... paths) {\n+        for (Path p: paths) {\n+            try {\n+                Files.createDirectories(p,\n+                        PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(\"rwx------\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c"}, "originalPosition": 182}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDc5OTY5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/153#pullrequestreview-388479969", "createdAt": "2020-04-06T17:46:49Z", "commit": {"oid": "a70d3730f9530e5bd20f25f772b367b20362dc1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2409, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}