{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1OTcwNjA2", "number": 718, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0Mjo1OFrOE8Y3Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0Mjo1OFrOE8Y3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzU3MzQ3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo0Mjo1OFrOH4em0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMToxMzoyM1rOH4fj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4Mzc2Mg==", "bodyText": "nit: rename this file to SkipPolicyCheck?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/718#discussion_r528983762", "createdAt": "2020-11-23T20:42:58Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -1106,11 +1106,11 @@ public void onStreamClosed() {\n \n     @Test\n     @Order(100)\n-    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_safety_check_THEN_deployment_is_successful() throws Exception {\n+    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_update_policy_check_THEN_deployment_is_successful() throws Exception {\n         // The previous test has NonDisruptableService 1.0.0 running in kernel that always returns false when its\n-        // safety check script is run, this test demonstrates that when a next deployment configured to skip safety\n+        // update policy check is run, this test demonstrates that when a next deployment configured to skip update policy\n         // check is processed, it can still update the NonDisruptableService service to version 1.0.1 bypassing the\n-        // safety check\n+        // update policy check\n         Future<DeploymentResult> resultFuture =\n                 submitSampleJobDocument(DeploymentTaskIntegrationTest.class.getResource(\"SkipSafetyCheck.json\").toURI(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d77bb61aeae09d48108373e55d8b67cf19e61d89"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5OTM5NA==", "bodyText": "Changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/718#discussion_r528999394", "createdAt": "2020-11-23T21:13:23Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentTaskIntegrationTest.java", "diffHunk": "@@ -1106,11 +1106,11 @@ public void onStreamClosed() {\n \n     @Test\n     @Order(100)\n-    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_safety_check_THEN_deployment_is_successful() throws Exception {\n+    void GIVEN_services_running_WHEN_new_deployment_asks_to_skip_update_policy_check_THEN_deployment_is_successful() throws Exception {\n         // The previous test has NonDisruptableService 1.0.0 running in kernel that always returns false when its\n-        // safety check script is run, this test demonstrates that when a next deployment configured to skip safety\n+        // update policy check is run, this test demonstrates that when a next deployment configured to skip update policy\n         // check is processed, it can still update the NonDisruptableService service to version 1.0.1 bypassing the\n-        // safety check\n+        // update policy check\n         Future<DeploymentResult> resultFuture =\n                 submitSampleJobDocument(DeploymentTaskIntegrationTest.class.getResource(\"SkipSafetyCheck.json\").toURI(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4Mzc2Mg=="}, "originalCommit": {"oid": "d77bb61aeae09d48108373e55d8b67cf19e61d89"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 293, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}