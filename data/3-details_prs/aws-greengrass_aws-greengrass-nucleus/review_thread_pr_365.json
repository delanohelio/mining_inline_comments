{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjA2MjQw", "number": 365, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0ODozMlrOEZH-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMDo1NFrOEbIZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzgwNTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0ODozMlrOHBwpzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo0ODozMlrOHBwpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNzc1Nw==", "bodyText": "Also put the reason in the description here so that people can understand why we did it", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471607757", "createdAt": "2020-08-17T16:48:32Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "diffHunk": "@@ -173,9 +174,11 @@ private void schedulePeriodicFleetStatusDataUpdate(boolean isDuringConnectionRes\n             updateEventTriggeredFleetStatusData();\n         }\n \n+        // Add some jitter as an initial delay.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg0MTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1ODoxN1rOHBw_5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowODoyNFrOHBxiwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMzQxNQ==", "bodyText": "Took me some time to understand the logic. Good job. I think this worth at least a private method and maybe even a util method in separate class for better unit testing. You want to test out the result caused by combinations  payloadVariableInformationSize and payloadCommonInformationSize.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471613415", "createdAt": "2020-08-17T16:58:17Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "diffHunk": "@@ -337,18 +339,30 @@ private void uploadFleetStatusServiceData(Set<EvergreenService> evergreenService\n \n         FleetStatusDetails fleetStatusDetails = FleetStatusDetails.builder()\n                 .overallStatus(overAllStatus)\n-                .componentStatusDetails(components)\n                 .architecture(this.architecture)\n                 .platform(this.platform)\n                 .thing(thingName)\n                 .ggcVersion(KERNEL_VERSION)\n                 .sequenceNumber(sequenceNumber)\n                 .build();\n         try {\n-            this.mqttClient.publish(PublishRequest.builder()\n-                    .qos(QualityOfService.AT_LEAST_ONCE)\n-                    .topic(this.updateFssDataTopic)\n-                    .payload(SERIALIZER.writeValueAsBytes(fleetStatusDetails)).build());\n+            int payloadVariableInformationSize = SERIALIZER.writeValueAsBytes(components).length;\n+            int payloadCommonInformationSize = SERIALIZER.writeValueAsBytes(fleetStatusDetails).length;\n+\n+            // The number of chunks to send would be the component byte size divided by the available bytes in per\n+            // publish message after adding the fleet status information.\n+            int numberOfChunks = Math.floorDiv(payloadVariableInformationSize,\n+                    MAX_PAYLOAD_LENGTH_BYTES - payloadCommonInformationSize) + 1;\n+            int start = 0;\n+            int numberOfComponentsPerPublish = Math.floorDiv(components.size(), numberOfChunks);\n+            for (int chunkId = 0; chunkId < numberOfChunks; chunkId++, start += numberOfComponentsPerPublish) {\n+                fleetStatusDetails.setComponentStatusDetails(components.subList(start,\n+                        start + numberOfComponentsPerPublish));\n+                this.mqttClient.publish(PublishRequest.builder()\n+                        .qos(QualityOfService.AT_LEAST_ONCE)\n+                        .topic(this.updateFssDataTopic)\n+                        .payload(SERIALIZER.writeValueAsBytes(fleetStatusDetails)).build());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMjMzNw==", "bodyText": "I do have a unit test for this. But I can make make it into a private function.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471622337", "createdAt": "2020-08-17T17:08:24Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "diffHunk": "@@ -337,18 +339,30 @@ private void uploadFleetStatusServiceData(Set<EvergreenService> evergreenService\n \n         FleetStatusDetails fleetStatusDetails = FleetStatusDetails.builder()\n                 .overallStatus(overAllStatus)\n-                .componentStatusDetails(components)\n                 .architecture(this.architecture)\n                 .platform(this.platform)\n                 .thing(thingName)\n                 .ggcVersion(KERNEL_VERSION)\n                 .sequenceNumber(sequenceNumber)\n                 .build();\n         try {\n-            this.mqttClient.publish(PublishRequest.builder()\n-                    .qos(QualityOfService.AT_LEAST_ONCE)\n-                    .topic(this.updateFssDataTopic)\n-                    .payload(SERIALIZER.writeValueAsBytes(fleetStatusDetails)).build());\n+            int payloadVariableInformationSize = SERIALIZER.writeValueAsBytes(components).length;\n+            int payloadCommonInformationSize = SERIALIZER.writeValueAsBytes(fleetStatusDetails).length;\n+\n+            // The number of chunks to send would be the component byte size divided by the available bytes in per\n+            // publish message after adding the fleet status information.\n+            int numberOfChunks = Math.floorDiv(payloadVariableInformationSize,\n+                    MAX_PAYLOAD_LENGTH_BYTES - payloadCommonInformationSize) + 1;\n+            int start = 0;\n+            int numberOfComponentsPerPublish = Math.floorDiv(components.size(), numberOfChunks);\n+            for (int chunkId = 0; chunkId < numberOfChunks; chunkId++, start += numberOfComponentsPerPublish) {\n+                fleetStatusDetails.setComponentStatusDetails(components.subList(start,\n+                        start + numberOfComponentsPerPublish));\n+                this.mqttClient.publish(PublishRequest.builder()\n+                        .qos(QualityOfService.AT_LEAST_ONCE)\n+                        .topic(this.updateFssDataTopic)\n+                        .payload(SERIALIZER.writeValueAsBytes(fleetStatusDetails)).build());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMzQxNQ=="}, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg0MjkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/fss/FleetStatusServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1ODozM1rOHBxAhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowNjozM1rOHBxaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMzU3Mg==", "bodyText": "Why? For happy path it should be exact once, no?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471613572", "createdAt": "2020-08-17T16:58:33Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/fss/FleetStatusServiceTest.java", "diffHunk": "@@ -379,7 +383,7 @@ public void GIVEN_component_status_change_WHEN_periodic_update_triggered_THEN_MQ\n         TimeUnit.SECONDS.sleep(5);\n \n         // Verify that an MQTT message with the components' status is uploaded.\n-        verify(mockMqttClient, times(1)).publish(publishRequestArgumentCaptor.capture());\n+        verify(mockMqttClient, atLeast(1)).publish(publishRequestArgumentCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMDE5NQ==", "bodyText": "Right. But there are times that the initial delay is too small and then the periodic update triggers again before the test finishes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471620195", "createdAt": "2020-08-17T17:06:33Z", "author": {"login": "nikkhilmuthye"}, "path": "src/test/java/com/aws/iot/evergreen/fss/FleetStatusServiceTest.java", "diffHunk": "@@ -379,7 +383,7 @@ public void GIVEN_component_status_change_WHEN_periodic_update_triggered_THEN_MQ\n         TimeUnit.SECONDS.sleep(5);\n \n         // Verify that an MQTT message with the components' status is uploaded.\n-        verify(mockMqttClient, times(1)).publish(publishRequestArgumentCaptor.capture());\n+        verify(mockMqttClient, atLeast(1)).publish(publishRequestArgumentCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMzU3Mg=="}, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg1NDE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/fss/FleetStatusServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowMTozMFrOHBxHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowMTozMFrOHBxHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxNTI1OQ==", "bodyText": "Related to https://github.com/aws/aws-greengrass-kernel/pull/365/files#r471613415. If you separate this out to another class, say FssMqttPublisher, then you don't have to repeat all this settings in this test. This test will just verify, say FssMqttPublisher::publishWithChunks, gets called. And you can have lightweight tests in FssMqttPublisherTest", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r471615259", "createdAt": "2020-08-17T17:01:30Z", "author": {"login": "leaf94"}, "path": "src/test/java/com/aws/iot/evergreen/fss/FleetStatusServiceTest.java", "diffHunk": "@@ -687,4 +692,85 @@ public void GIVEN_MQTT_connection_interrupted_WHEN_connection_resumes_THEN_MQTT_\n         assertEquals(State.RUNNING, fleetStatusDetails.getComponentStatusDetails().get(0).getState());\n         assertEquals(Collections.singletonList(\"arn:aws:greengrass:testRegion:12345:configuration:testGroup:12\"), fleetStatusDetails.getComponentStatusDetails().get(0).getFleetConfigArns());\n     }\n+\n+    @Test\n+    public void GIVEN_large_num_component_status_change_WHEN_deployment_finishes_THEN_MQTT_Sent_with_fss_data_with_overall_healthy_state()\n+            throws ServiceLoadException, IOException, InterruptedException {\n+        // Set up all the topics\n+        int numServices = 1500;\n+        Topic periodicUpdateIntervalMsTopic = Topic.of(context, FLEET_STATUS_PERIODIC_UPDATE_INTERVAL_SEC, \"10\");\n+        Topics allComponentToGroupsTopics = Topics.of(context, GROUP_TO_ROOT_COMPONENTS_TOPICS, null);\n+        Topic groupTopic1 = Topic.of(context, \"arn:aws:greengrass:testRegion:12345:configuration:testGroup:12\",\n+                true);\n+\n+        List<EvergreenService> evergreenServices = new ArrayList<>();\n+        Set<String> serviceNamesToCheck = new HashSet<>();\n+        for (int i = 0; i < numServices; i++) {\n+            String serviceName = String.format(\"MockService-%s\", i);\n+            Topics groupsTopics = Topics.of(context, serviceName, allComponentToGroupsTopics);\n+            groupsTopics.children.put(serviceName, groupTopic1);\n+            allComponentToGroupsTopics.children.put(serviceName, groupsTopics);\n+            EvergreenService evergreenService = mock(EvergreenService.class);\n+            when(evergreenService.getName()).thenReturn(serviceName);\n+            when(evergreenService.getState()).thenReturn(State.RUNNING);\n+            when(evergreenService.getServiceConfig()).thenReturn(config);\n+\n+            evergreenServices.add(evergreenService);\n+            serviceNamesToCheck.add(serviceName);\n+        }\n+        lenient().when(config.lookupTopics(COMPONENTS_TO_GROUPS_TOPICS)).thenReturn(allComponentToGroupsTopics);\n+\n+        // Set up all the mocks\n+        when(mockDeploymentStatusKeeper.registerDeploymentStatusConsumer(any(), consumerArgumentCaptor.capture(), anyString())).thenReturn(true);\n+        when(mockKernel.locate(DeploymentService.DEPLOYMENT_SERVICE_TOPICS)).thenReturn(mockDeploymentService);\n+        when(mockKernel.orderedDependencies()).thenReturn(evergreenServices);\n+        when(mockDeploymentService.getConfig()).thenReturn(config);\n+        doNothing().when(context).addGlobalStateChangeListener(addGlobalStateChangeListenerArgumentCaptor.capture());\n+        when(config.lookup(PARAMETERS_CONFIG_KEY, FLEET_STATUS_PERIODIC_UPDATE_INTERVAL_SEC))\n+                .thenReturn(periodicUpdateIntervalMsTopic);\n+        when(context.get(ScheduledExecutorService.class)).thenReturn(ses);\n+\n+        // Create the fleet status service instance\n+        fleetStatusService = new FleetStatusService(config, mockMqttClient,\n+                mockDeploymentStatusKeeper, mockKernel, mockDeviceConfiguration);\n+        fleetStatusService.startup();\n+\n+        // Update the job status for an ongoing deployment to SUCCEEDED.\n+        HashMap<String, Object> map = new HashMap<>();\n+        map.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_STATUS, JobStatus.IN_PROGRESS.toString());\n+        map.put(PERSISTED_DEPLOYMENT_STATUS_KEY_JOB_ID, \"testJob\");\n+        consumerArgumentCaptor.getValue().apply(map);\n+\n+        // Update the state of an EG service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faef4e3567100a9dd60442faea546487a66ca11d"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQzOTI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0NDoyM1rOHCdFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjo0NDoyM1rOHCdFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMzNTY1OQ==", "bodyText": "remove space before SPDX", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r472335659", "createdAt": "2020-08-18T16:44:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjYzOTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNjowNVrOHCfD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0ODo1MVrOHCfgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2ODEwOA==", "bodyText": "Nit- Why is this in the utils package? this looks specific to fss since you have that topic hardcoded below, then can we move this to the fss package?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r472368108", "createdAt": "2020-08-18T17:36:05Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.PublishRequest;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.List;\n+\n+public class MqttChunkedPayloadPublisher<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTQ1OQ==", "bodyText": "I put this in the utils folders since even telemetry metrics agent will use this. The topic is set from the component which uses this class.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r472375459", "createdAt": "2020-08-18T17:48:51Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.PublishRequest;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.List;\n+\n+public class MqttChunkedPayloadPublisher<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2ODEwOA=="}, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTc4MzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1NTo0OVrOHDl5Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1NTo0OVrOHDl5Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUyODYxNQ==", "bodyText": "Sweet...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r473528615", "createdAt": "2020-08-20T01:55:49Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "diffHunk": "@@ -345,27 +347,7 @@ private void uploadFleetStatusServiceData(Set<EvergreenService> evergreenService\n                 .ggcVersion(KERNEL_VERSION)\n                 .sequenceNumber(sequenceNumber)\n                 .build();\n-        try {\n-            int payloadVariableInformationSize = SERIALIZER.writeValueAsBytes(components).length;\n-            int payloadCommonInformationSize = SERIALIZER.writeValueAsBytes(fleetStatusDetails).length;\n-\n-            // The number of chunks to send would be the component byte size divided by the available bytes in per\n-            // publish message after adding the fleet status information.\n-            int numberOfChunks = Math.floorDiv(payloadVariableInformationSize,\n-                    MAX_PAYLOAD_LENGTH_BYTES - payloadCommonInformationSize) + 1;\n-            int start = 0;\n-            int numberOfComponentsPerPublish = Math.floorDiv(components.size(), numberOfChunks);\n-            for (int chunkId = 0; chunkId < numberOfChunks; chunkId++, start += numberOfComponentsPerPublish) {\n-                fleetStatusDetails.setComponentStatusDetails(components.subList(start,\n-                        start + numberOfComponentsPerPublish));\n-                this.mqttClient.publish(PublishRequest.builder()\n-                        .qos(QualityOfService.AT_LEAST_ONCE)\n-                        .topic(this.updateFssDataTopic)\n-                        .payload(SERIALIZER.writeValueAsBytes(fleetStatusDetails)).build());\n-            }\n-        } catch (JsonProcessingException e) {\n-            logger.atError().cause(e).log(\"Unable to publish fleet status service.\");\n-        }\n+        publisher.publish(components, fleetStatusDetails);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTc4NDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/CommonPayload.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1NjoxMFrOHDl59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1NjoxMFrOHDl59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUyODgyMA==", "bodyText": "nit - missing copyright", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r473528820", "createdAt": "2020-08-20T01:56:10Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/CommonPayload.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.aws.iot.evergreen.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTc5MjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1ODoxMVrOHDl_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjowNjoyNVrOHEU5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMDE2Mw==", "bodyText": "Can this two be with constructor?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r473530163", "createdAt": "2020-08-20T01:58:11Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.PublishRequest;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.List;\n+\n+public class MqttChunkedPayloadPublisher<T> {\n+    private static final Logger logger = LogManager.getLogger(MqttChunkedPayloadPublisher.class);\n+    private final MqttClient mqttClient;\n+    private static final ObjectMapper SERIALIZER = new ObjectMapper();\n+    @Setter\n+    private String updateFssDataTopic;\n+    @Setter\n+    private int maxPayloadLengthBytes;\n+\n+    public MqttChunkedPayloadPublisher(MqttClient mqttClient) {\n+        this.mqttClient = mqttClient;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5ODgxNQ==", "bodyText": "Synced offline. Kept the two setters separate since they can change based on config changes.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r474298815", "createdAt": "2020-08-20T22:06:25Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *   SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.PublishRequest;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.List;\n+\n+public class MqttChunkedPayloadPublisher<T> {\n+    private static final Logger logger = LogManager.getLogger(MqttChunkedPayloadPublisher.class);\n+    private final MqttClient mqttClient;\n+    private static final ObjectMapper SERIALIZER = new ObjectMapper();\n+    @Setter\n+    private String updateFssDataTopic;\n+    @Setter\n+    private int maxPayloadLengthBytes;\n+\n+    public MqttChunkedPayloadPublisher(MqttClient mqttClient) {\n+        this.mqttClient = mqttClient;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMDE2Mw=="}, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTgyNjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/CommonPayload.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjowNzo0M1rOHDmWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo0MDoxOVrOHEUQCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzNjA5MA==", "bodyText": "I guess I understand what you are trying to achieve. The signature is a little confusing though.\nWhy does a CommonPayload needs to set variable payload..?\nMaybe you can have a ChunkablePayload<T> (wrong grammar for sure but you get the meaning), which has a\ngetCommonPayload() and List<T> getVariablePayload().\nAnd then the publisher will just take the ChunkablePayload which could be implemented by FSS or Telemetry's DTO (data transfer object)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r473536090", "createdAt": "2020-08-20T02:07:43Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/util/CommonPayload.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.aws.iot.evergreen.util;\n+\n+import java.util.List;\n+\n+public interface CommonPayload<T> {\n+    void setVariablePayload(List<T> variablePayload);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4ODEzNw==", "bodyText": "Synced up offline. We will rename CommonPayload to Chunkable. This is to keep the interface naming convention appropriately.\nIn Java, interfaces names, generally, should be adjectives. Interfaces should be in titlecase with the first letter of each separate word capitalized", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r474288137", "createdAt": "2020-08-20T21:40:19Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/iot/evergreen/util/CommonPayload.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.aws.iot.evergreen.util;\n+\n+import java.util.List;\n+\n+public interface CommonPayload<T> {\n+    void setVariablePayload(List<T> variablePayload);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzNjA5MA=="}, "originalCommit": {"oid": "19de4bfa2c76cf717c03994c35cbe823a6228168"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODgyNzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTowMjo1MlrOHE9z9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTowMjo1MlrOHE9z9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2OTA3Ng==", "bodyText": "nit: naming of the variables doesn't match the description\nMay not be the best idea, but I feel Chunkable is more like variablePayloadChunk consumer", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r474969076", "createdAt": "2020-08-21T21:02:52Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/MqttChunkedPayloadPublisher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import com.aws.iot.evergreen.logging.api.Logger;\n+import com.aws.iot.evergreen.logging.impl.LogManager;\n+import com.aws.iot.evergreen.mqtt.MqttClient;\n+import com.aws.iot.evergreen.mqtt.PublishRequest;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.Builder;\n+import lombok.Getter;\n+import lombok.Setter;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+\n+import java.util.List;\n+\n+public class MqttChunkedPayloadPublisher<T> {\n+    private static final Logger logger = LogManager.getLogger(MqttChunkedPayloadPublisher.class);\n+    private final MqttClient mqttClient;\n+    private static final ObjectMapper SERIALIZER = new ObjectMapper();\n+    @Setter\n+    private String updateFssDataTopic;\n+    @Setter\n+    private int maxPayloadLengthBytes;\n+\n+    public MqttChunkedPayloadPublisher(MqttClient mqttClient) {\n+        this.mqttClient = mqttClient;\n+    }\n+\n+    /**\n+     * Publish the payload using MQTT.\n+     *\n+     * @param chunkablePayload  The common object payload included in all the messages\n+     * @param variablePayloads  The variable objects in the payload to chunk\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14d362535b0fef9f52d876174adbac9cacc79d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODg0NTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Chunkable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMDo1NFrOHE9-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMToxMDo1NFrOHE9-vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MTgzNg==", "bodyText": "I feel the name doesn't match what the interface does. Also this interface is not generic beyond telemetry/logging use cases. Do you really need the interface?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/365#discussion_r474971836", "createdAt": "2020-08-21T21:10:54Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/util/Chunkable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.iot.evergreen.util;\n+\n+import java.util.List;\n+\n+public interface Chunkable<T> {\n+    void setVariablePayload(List<T> variablePayload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14d362535b0fef9f52d876174adbac9cacc79d"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}