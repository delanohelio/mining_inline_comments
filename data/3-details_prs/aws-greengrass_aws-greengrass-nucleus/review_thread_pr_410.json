{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MTkyNzcy", "number": 410, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0Nzo1NVrOEftGHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTowODo1N1rOEf0ukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjgwMTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/bootstrap/BootstrapManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0Nzo1NVrOHMJ3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0Nzo1NVrOHMJ3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNjYzOQ==", "bodyText": "seems like this should be info", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482506639", "createdAt": "2020-09-02T21:47:55Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/bootstrap/BootstrapManager.java", "diffHunk": "@@ -169,27 +173,9 @@ boolean serviceBootstrapRequired(String componentName, Map<String, Object> newSe\n                     .log(\"Bootstrap is not required: service lifecycle bootstrap not found\");\n             return false;\n         }\n-        EvergreenService service;\n-        try {\n-            service = kernel.locate(componentName);\n-        } catch (ServiceLoadException e) {\n-            logger.atTrace().kv(COMPONENT_NAME_LOG_KEY_NAME, componentName).log(\"Bootstrap is required: new service\");\n-            return true;\n-        }\n-        if (!service.getConfig().find(VERSION_CONFIG_KEY).getOnce()\n-                .equals(newServiceConfig.get(VERSION_CONFIG_KEY))) {\n-            logger.atTrace().kv(COMPONENT_NAME_LOG_KEY_NAME, componentName)\n-                    .log(\"Bootstrap is required: service version changed\");\n-            return true;\n-        }\n-        Node serviceOldBootstrap = service.getConfig().findNode(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n-                LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC);\n-        boolean bootstrapStepChanged =  serviceOldBootstrap == null\n-                || !serviceOldBootstrap.toPOJO().equals(newServiceLifecycle.get(LIFECYCLE_BOOTSTRAP_NAMESPACE_TOPIC));\n-        logger.atTrace().kv(COMPONENT_NAME_LOG_KEY_NAME, componentName).log(String.format(\n-                \"Bootstrap is %srequired: bootstrap step %schanged\", bootstrapStepChanged ? \"\" : \"not \",\n-                        bootstrapStepChanged ? \"\" : \"un\"));\n-        return bootstrapStepChanged;\n+        logger.atTrace().kv(COMPONENT_NAME_LOG_KEY_NAME, componentName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjgwNDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0ODozNFrOHMJ5tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0OToxM1rOHMJ7rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNzE5MQ==", "bodyText": "debug?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482507191", "createdAt": "2020-09-02T21:48:34Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -152,6 +153,42 @@ public synchronized int bootstrap() throws InterruptedException, TimeoutExceptio\n         return atomicExitCode.get();\n     }\n \n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return true if the service\n+     *      1. has a bootstrap step defined, 2. component version changes, or bootstrap step changes.\n+     *      false otherwise\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {\n+        if (newServiceConfig == null || !newServiceConfig.containsKey(SERVICE_LIFECYCLE_NAMESPACE_TOPIC)) {\n+            logger.atTrace().log(\"Bootstrap is not required: service lifecycle config not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNzY5NQ==", "bodyText": "Just combine this with the checks below?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482507695", "createdAt": "2020-09-02T21:49:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -152,6 +153,42 @@ public synchronized int bootstrap() throws InterruptedException, TimeoutExceptio\n         return atomicExitCode.get();\n     }\n \n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return true if the service\n+     *      1. has a bootstrap step defined, 2. component version changes, or bootstrap step changes.\n+     *      false otherwise\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {\n+        if (newServiceConfig == null || !newServiceConfig.containsKey(SERVICE_LIFECYCLE_NAMESPACE_TOPIC)) {\n+            logger.atTrace().log(\"Bootstrap is not required: service lifecycle config not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNzE5MQ=="}, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjgyMjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1MjoxNFrOHMKFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1MjoxNFrOHMKFYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxMDE3Ng==", "bodyText": "Can you validate in the integ test, that upon initial install, the bootstrap required would be false?\nAnd on subsequent installs that it requests restart?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482510176", "createdAt": "2020-09-02T21:52:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_CONFIG_KEY;\n+\n+public class PluginService extends EvergreenService {\n+    public PluginService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {\n+        Topic versionTopic = getConfig().find(VERSION_CONFIG_KEY);\n+        if (versionTopic == null) {\n+            logger.atTrace().log(\"Bootstrap is required: current service version unknown\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjgyNTI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1Mjo0NVrOHMKG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1NToxNlrOHMKPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxMDU3OQ==", "bodyText": "Add a bootstrap override too which returns REQUEST_RESTART", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482510579", "createdAt": "2020-09-02T21:52:45Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_CONFIG_KEY;\n+\n+public class PluginService extends EvergreenService {\n+    public PluginService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxMjY1Mg==", "bodyText": "oh right", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482512652", "createdAt": "2020-09-02T21:55:16Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_CONFIG_KEY;\n+\n+public class PluginService extends EvergreenService {\n+    public PluginService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxMDU3OQ=="}, "originalCommit": {"oid": "7a203f760f3e62df0aceec3ed469ab77d9be7bd7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODA1MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTowODo1N1rOHMWHdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTowODo1N1rOHMWHdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNzMxOQ==", "bodyText": "can you also override isBuiltin to return false, since these are plugins, and therefore are not builtin.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/410#discussion_r482707319", "createdAt": "2020-09-03T05:08:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/PluginService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.aws.iot.evergreen.kernel;\n+\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import java.util.Map;\n+\n+import static com.aws.iot.evergreen.deployment.bootstrap.BootstrapSuccessCode.REQUEST_RESTART;\n+import static com.aws.iot.evergreen.packagemanager.KernelConfigResolver.VERSION_CONFIG_KEY;\n+\n+public class PluginService extends EvergreenService {\n+    public PluginService(Topics topics) {\n+        super(topics);\n+    }\n+\n+    /**\n+     * Check if bootstrap step needs to run during service update. Called during deployments to determine deployment\n+     * workflow.\n+     *\n+     * @param newServiceConfig new service config for the update\n+     * @return\n+     */\n+    @Override\n+    public boolean isBootstrapRequired(Map<String, Object> newServiceConfig) {\n+        Topic versionTopic = getConfig().find(VERSION_CONFIG_KEY);\n+        if (versionTopic == null) {\n+            logger.atTrace().log(\"Bootstrap is required: current service version unknown\");\n+            return true;\n+        }\n+        if (!versionTopic.getOnce().equals(newServiceConfig.get(VERSION_CONFIG_KEY))) {\n+            logger.atTrace().log(\"Bootstrap is required: service version changed\");\n+            return true;\n+        }\n+        logger.atTrace().log(\"Bootstrap is not required: service version unchanged\");\n+        return false;\n+    }\n+\n+    @Override\n+    public int bootstrap() {\n+        return REQUEST_RESTART;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1087f6b3454fa47cda6267771392e21ca68f0abc"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 753, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}