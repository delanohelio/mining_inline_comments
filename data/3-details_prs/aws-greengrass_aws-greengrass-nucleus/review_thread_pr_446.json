{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTQ0NTIz", "number": 446, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNzo1OVrOEkvDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MToyNVrOEkvG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU1MDU3OnYy", "diffSide": "LEFT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNzo1OVrOHT2bZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0NDozMlrOHT2mIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3Njc0MA==", "bodyText": "why removed? These are important tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490576740", "createdAt": "2020-09-17T21:37:59Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -157,83 +195,60 @@ void GIVEN_pubsubclient_WHEN_authorized_THEN_parameters_child_removed_THEN_updat\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n \n-        Topics serviceTopic = kernel.findServiceTopic(TEST_SERVICE_NAME);\n+        Topics serviceTopic = kernel.findServiceTopic(\"DoAll2\");\n         Topics parameters = serviceTopic.findTopics(PARAMETERS_CONFIG_KEY);\n         if (parameters != null) {\n             parameters.remove();\n         }\n         //Block until events are completed\n-        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+        });\n         //Now the authorization policies should have been removed and these should fail\n         assertThrows(PubSubException.class, () -> c.subscribeToTopic(\"a\", cb.getRight()));\n         assertThrows(PubSubException.class, () -> c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8)));\n     }\n \n     @Test\n     void GIVEN_pubsubclient_WHEN_service_removed_and_added_THEN_fail_and_succeed() throws Exception {\n-        kernel = prepareKernelFromConfigFile(\"pubsub_authorized.yaml\", this.getClass(), TEST_SERVICE_NAME);\n-        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        KernelIPCClientConfig config = getIPCConfigForService(\"SubscribeAndPublish\", kernel);\n         client = new IPCClientImpl(config);\n         PubSub c = new PubSubImpl(client);\n         Pair<CompletableFuture<Void>, Consumer<byte[]>> cb = asyncAssertOnConsumer((m) -> {\n             assertEquals(\"some message\", new String(m, StandardCharsets.UTF_8));\n         }, -1);\n         Permission policyId1 =\n-                Permission.builder().principal(TEST_SERVICE_NAME).operation(\"*\").resource(\"*\").build();\n+                Permission.builder().principal(\"SubscribeAndPublish\").operation(\"*\").resource(\"*\").build();\n         Permission policyId2 =\n-                Permission.builder().principal(\"mqtt\").operation(\"publish\").resource(\"*\").build();\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+                Permission.builder().principal(\"PublishNotSubscribe\").operation(\"publish\").resource(\"*\").build();\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         c.subscribeToTopic(\"a\", cb.getRight());\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n \n         // Remove the service topic\n-        Topics serviceTopic = kernel.findServiceTopic(TEST_SERVICE_NAME);\n+        Topics serviceTopic = kernel.findServiceTopic(\"SubscribeAndPublish\");\n         if (serviceTopic != null) {\n             serviceTopic.remove();\n         }\n-        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n-        assertFalse(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+        });\n+        assertFalse(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         assertThrows(PubSubException.class, () -> c.subscribeToTopic(\"a\", cb.getRight()));\n         assertThrows(PubSubException.class, () -> c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8)));\n \n         // Reload the kernel with the service and correct authorization policy\n-        kernel.getConfig().read(new URL(IPCPubSubTest.class.getResource(\"pubsub_authorized.yaml\").toString()), false);\n+        kernel.getConfig().read(new URL(IPCPubSubTest.class.getResource(\"pubsub.yaml\").toString()), false);\n         kernel.getContext().runOnPublishQueueAndWait(() -> {\n         });\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         c.subscribeToTopic(\"a\", cb.getRight()); //now this should succeed\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3OTQ4OA==", "bodyText": "Not removed but moved to the top of the file", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490579488", "createdAt": "2020-09-17T21:44:32Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -157,83 +195,60 @@ void GIVEN_pubsubclient_WHEN_authorized_THEN_parameters_child_removed_THEN_updat\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n \n-        Topics serviceTopic = kernel.findServiceTopic(TEST_SERVICE_NAME);\n+        Topics serviceTopic = kernel.findServiceTopic(\"DoAll2\");\n         Topics parameters = serviceTopic.findTopics(PARAMETERS_CONFIG_KEY);\n         if (parameters != null) {\n             parameters.remove();\n         }\n         //Block until events are completed\n-        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+        });\n         //Now the authorization policies should have been removed and these should fail\n         assertThrows(PubSubException.class, () -> c.subscribeToTopic(\"a\", cb.getRight()));\n         assertThrows(PubSubException.class, () -> c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8)));\n     }\n \n     @Test\n     void GIVEN_pubsubclient_WHEN_service_removed_and_added_THEN_fail_and_succeed() throws Exception {\n-        kernel = prepareKernelFromConfigFile(\"pubsub_authorized.yaml\", this.getClass(), TEST_SERVICE_NAME);\n-        KernelIPCClientConfig config = getIPCConfigForService(TEST_SERVICE_NAME, kernel);\n+        KernelIPCClientConfig config = getIPCConfigForService(\"SubscribeAndPublish\", kernel);\n         client = new IPCClientImpl(config);\n         PubSub c = new PubSubImpl(client);\n         Pair<CompletableFuture<Void>, Consumer<byte[]>> cb = asyncAssertOnConsumer((m) -> {\n             assertEquals(\"some message\", new String(m, StandardCharsets.UTF_8));\n         }, -1);\n         Permission policyId1 =\n-                Permission.builder().principal(TEST_SERVICE_NAME).operation(\"*\").resource(\"*\").build();\n+                Permission.builder().principal(\"SubscribeAndPublish\").operation(\"*\").resource(\"*\").build();\n         Permission policyId2 =\n-                Permission.builder().principal(\"mqtt\").operation(\"publish\").resource(\"*\").build();\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+                Permission.builder().principal(\"PublishNotSubscribe\").operation(\"publish\").resource(\"*\").build();\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         c.subscribeToTopic(\"a\", cb.getRight());\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n \n         // Remove the service topic\n-        Topics serviceTopic = kernel.findServiceTopic(TEST_SERVICE_NAME);\n+        Topics serviceTopic = kernel.findServiceTopic(\"SubscribeAndPublish\");\n         if (serviceTopic != null) {\n             serviceTopic.remove();\n         }\n-        kernel.getContext().runOnPublishQueueAndWait(() -> {});\n-        assertFalse(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+        });\n+        assertFalse(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         assertThrows(PubSubException.class, () -> c.subscribeToTopic(\"a\", cb.getRight()));\n         assertThrows(PubSubException.class, () -> c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8)));\n \n         // Reload the kernel with the service and correct authorization policy\n-        kernel.getConfig().read(new URL(IPCPubSubTest.class.getResource(\"pubsub_authorized.yaml\").toString()), false);\n+        kernel.getConfig().read(new URL(IPCPubSubTest.class.getResource(\"pubsub.yaml\").toString()), false);\n         kernel.getContext().runOnPublishQueueAndWait(() -> {\n         });\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId1));\n-        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME,policyId2));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId1));\n+        assertTrue(kernel.getContext().get(AuthorizationModule.class).isPresent(PUB_SUB_SERVICE_NAME, policyId2));\n         c.subscribeToTopic(\"a\", cb.getRight()); //now this should succeed\n         c.publishToTopic(\"a\", \"some message\".getBytes(StandardCharsets.UTF_8));\n         cb.getLeft().get(TIMEOUT_FOR_PUBSUB_SECONDS, TimeUnit.SECONDS);\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3Njc0MA=="}, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU1MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozOTowMlrOHT2dNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0OToxMVrOHT2uIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzIwNw==", "bodyText": "this really does need to be private, we don't want anything to mess with the lifecycle because it is so critical, even the subclasses.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490577207", "createdAt": "2020-09-17T21:39:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -62,7 +62,7 @@\n     @Getter\n     public Context context;\n \n-    private final Lifecycle lifecycle;\n+    protected final Lifecycle lifecycle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTUzNg==", "bodyText": "This was for testing but the final revision does require this, reverted", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490581536", "createdAt": "2020-09-17T21:49:11Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -62,7 +62,7 @@\n     @Getter\n     public Context context;\n \n-    private final Lifecycle lifecycle;\n+    protected final Lifecycle lifecycle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzIwNw=="}, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU1ODc1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/com/aws/iot/evergreen/kernel/services.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MDo1NFrOHT2gXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1MDowNVrOHT2vtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODAxMg==", "bodyText": "windows?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490578012", "createdAt": "2020-09-17T21:40:54Z", "author": {"login": "MikeDombo"}, "path": "src/test/resources/com/aws/iot/evergreen/kernel/services.yaml", "diffHunk": "@@ -0,0 +1,32 @@\n+---\n+services:\n+  A:\n+    Lifecycle:\n+    Dependencies:\n+        - B:HARD\n+        - C:SOFT\n+        - D\n+  B:\n+    Lifecycle:\n+    Dependencies:\n+  C:\n+    Lifecycle:\n+    Dependencies:\n+  D:\n+    Lifecycle:\n+    Dependencies:\n+  E:\n+    Lifecycle:\n+    Dependencies:\n+\n+  main:\n+    Lifecycle:\n+      run: |-\n+        echo $PATH\n+        pwd\n+        printenv\n+        while true; do\n+        date; sleep 5; echo RUNNING\n+        done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTk0MA==", "bodyText": "removed, not required for the tests", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490581940", "createdAt": "2020-09-17T21:50:05Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/resources/com/aws/iot/evergreen/kernel/services.yaml", "diffHunk": "@@ -0,0 +1,32 @@\n+---\n+services:\n+  A:\n+    Lifecycle:\n+    Dependencies:\n+        - B:HARD\n+        - C:SOFT\n+        - D\n+  B:\n+    Lifecycle:\n+    Dependencies:\n+  C:\n+    Lifecycle:\n+    Dependencies:\n+  D:\n+    Lifecycle:\n+    Dependencies:\n+  E:\n+    Lifecycle:\n+    Dependencies:\n+\n+  main:\n+    Lifecycle:\n+      run: |-\n+        echo $PATH\n+        pwd\n+        printenv\n+        while true; do\n+        date; sleep 5; echo RUNNING\n+        done", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODAxMg=="}, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU2MDAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MToyNVrOHT2hKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0ODozOFrOHT2tDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODIxOQ==", "bodyText": "close the context in after", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490578219", "createdAt": "2020-09-17T21:41:25Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -3,31 +3,73 @@\n \n package com.aws.iot.evergreen.kernel;\n \n-import com.aws.iot.evergreen.config.Validator;\n+import com.amazon.aws.iot.greengrass.component.common.DependencyType;\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mockito;\n+import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICE_DEPENDENCIES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.Lifecycle.STATE_TOPIC_NAME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n @ExtendWith(MockitoExtension.class)\n public class EvergreenServiceTest extends EGServiceTestUtil {\n \n-    private EvergreenService evergreenService;\n-\n-    @Captor\n-    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+    @Mock\n+    private Kernel kernel;\n+    private Context context;\n+    private Configuration configuration;\n+    private EvergreenService aService;\n+    private EvergreenService bService;\n+    private EvergreenService cService;\n+    private EvergreenService dService;\n+    private EvergreenService eService;\n \n     @BeforeEach\n-    void beforeEach() {\n-        evergreenService = new EvergreenService(initializeMockedConfig());\n+    void beforeEach() throws IOException, URISyntaxException, ServiceLoadException {\n+        Path configPath = Paths.get(this.getClass().getResource(\"services.yaml\").toURI());\n+        context = spy(new Context());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTI2Mw==", "bodyText": "updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/446#discussion_r490581263", "createdAt": "2020-09-17T21:48:38Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/kernel/EvergreenServiceTest.java", "diffHunk": "@@ -3,31 +3,73 @@\n \n package com.aws.iot.evergreen.kernel;\n \n-import com.aws.iot.evergreen.config.Validator;\n+import com.amazon.aws.iot.greengrass.component.common.DependencyType;\n+import com.aws.iot.evergreen.config.Configuration;\n+import com.aws.iot.evergreen.config.Topic;\n+import com.aws.iot.evergreen.config.Topics;\n+\n+import com.aws.iot.evergreen.dependency.Context;\n import com.aws.iot.evergreen.dependency.State;\n+import com.aws.iot.evergreen.kernel.exceptions.ServiceLoadException;\n import com.aws.iot.evergreen.testcommons.testutilities.EGServiceTestUtil;\n import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mockito;\n+import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+\n+import static com.aws.iot.evergreen.kernel.EvergreenService.PRIVATE_STORE_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICES_NAMESPACE_TOPIC;\n+import static com.aws.iot.evergreen.kernel.EvergreenService.SERVICE_DEPENDENCIES_NAMESPACE_TOPIC;\n import static com.aws.iot.evergreen.kernel.Lifecycle.STATE_TOPIC_NAME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n \n @ExtendWith(MockitoExtension.class)\n public class EvergreenServiceTest extends EGServiceTestUtil {\n \n-    private EvergreenService evergreenService;\n-\n-    @Captor\n-    private ArgumentCaptor<Validator> validatorArgumentCaptor;\n+    @Mock\n+    private Kernel kernel;\n+    private Context context;\n+    private Configuration configuration;\n+    private EvergreenService aService;\n+    private EvergreenService bService;\n+    private EvergreenService cService;\n+    private EvergreenService dService;\n+    private EvergreenService eService;\n \n     @BeforeEach\n-    void beforeEach() {\n-        evergreenService = new EvergreenService(initializeMockedConfig());\n+    void beforeEach() throws IOException, URISyntaxException, ServiceLoadException {\n+        Path configPath = Paths.get(this.getClass().getResource(\"services.yaml\").toURI());\n+        context = spy(new Context());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODIxOQ=="}, "originalCommit": {"oid": "a2d33c176f3446666fb4e4812c5b56b7487ecd95"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 512, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}