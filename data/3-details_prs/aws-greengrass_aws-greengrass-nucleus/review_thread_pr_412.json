{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5OTMxNjAx", "number": 412, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozODo0OFrOEghEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozOToyMVrOEghEtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTMxNjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozODo0OFrOHNa7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozODo0OFrOHNa7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNDc1Mw==", "bodyText": "nit: why not fleetConfigArn?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/412#discussion_r483834753", "createdAt": "2020-09-04T20:38:48Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -67,7 +67,7 @@\n     public static final String GROUP_TO_ROOT_COMPONENTS_TOPICS = \"GroupToRootComponents\";\n     public static final String COMPONENTS_TO_GROUPS_TOPICS = \"ComponentToGroups\";\n     public static final String GROUP_TO_ROOT_COMPONENTS_VERSION_KEY = \"version\";\n-    public static final String GROUP_TO_ROOT_COMPONENTS_GROUP_DEPLOYMENT_ID = \"groupDeploymentId\";\n+    public static final String GROUP_TO_ROOT_COMPONENTS_GROUP_CONFIG_ARN = \"groupConfigArn\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8b385611b50b6beb259be6ee2007dfc38f82e8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTMxNzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDozOToyMVrOHNa8MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQyMDo0MTo0OFrOHNa_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNDkyOQ==", "bodyText": "Are these two functions only used in tests?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/412#discussion_r483834929", "createdAt": "2020-09-04T20:39:21Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -495,4 +495,41 @@ private void setComponentsToGroupsMapping(Topics groupsToRootComponents) {\n         }\n \n     }\n+\n+    /**\n+     * Gets the list of all the groups that the component is a part of.\n+     *\n+     * @param componentName The name of the component.\n+     * @return The list of groups the component is a part of.\n+     */\n+    public Set<String> getGroupConfigsForUserComponent(String componentName) {\n+        Topics componentsToGroupsTopics = config.lookupTopics(COMPONENTS_TO_GROUPS_TOPICS);\n+\n+        Set<String> componentGroups = new HashSet<>();\n+        if (componentsToGroupsTopics != null) {\n+            Topics groupsTopics = componentsToGroupsTopics.lookupTopics(componentName);\n+            groupsTopics.children.values().stream().map(n -> (Topic) n).map(Topic::getName)\n+                    .forEach(componentGroups::add);\n+        }\n+        return componentGroups;\n+    }\n+\n+    /**\n+     * Gets the list of all the groups that the thing is a part of.\n+     * @return All the group configs.\n+     */\n+    public Set<String> getAllGroupConfigs() {\n+        Topics componentsToGroupsTopics = config.lookupTopics(COMPONENTS_TO_GROUPS_TOPICS);\n+\n+        Set<String> componentGroups = new HashSet<>();\n+        if (componentsToGroupsTopics != null) {\n+            componentsToGroupsTopics.iterator().forEachRemaining(node -> {\n+                Topics groupsTopics = (Topics) node;\n+                groupsTopics.children.values().stream().map(n -> (Topic) n).map(Topic::getName)\n+                        .forEach(componentGroups::add);\n+\n+            });\n+        }\n+        return componentGroups;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d8b385611b50b6beb259be6ee2007dfc38f82e8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNTc2NA==", "bodyText": "No. These will be used in the log-manager to get the groups the component/system belongs to; for calculating the log group/stream name", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/412#discussion_r483835764", "createdAt": "2020-09-04T20:41:48Z", "author": {"login": "nikkhilmuthye"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeploymentService.java", "diffHunk": "@@ -495,4 +495,41 @@ private void setComponentsToGroupsMapping(Topics groupsToRootComponents) {\n         }\n \n     }\n+\n+    /**\n+     * Gets the list of all the groups that the component is a part of.\n+     *\n+     * @param componentName The name of the component.\n+     * @return The list of groups the component is a part of.\n+     */\n+    public Set<String> getGroupConfigsForUserComponent(String componentName) {\n+        Topics componentsToGroupsTopics = config.lookupTopics(COMPONENTS_TO_GROUPS_TOPICS);\n+\n+        Set<String> componentGroups = new HashSet<>();\n+        if (componentsToGroupsTopics != null) {\n+            Topics groupsTopics = componentsToGroupsTopics.lookupTopics(componentName);\n+            groupsTopics.children.values().stream().map(n -> (Topic) n).map(Topic::getName)\n+                    .forEach(componentGroups::add);\n+        }\n+        return componentGroups;\n+    }\n+\n+    /**\n+     * Gets the list of all the groups that the thing is a part of.\n+     * @return All the group configs.\n+     */\n+    public Set<String> getAllGroupConfigs() {\n+        Topics componentsToGroupsTopics = config.lookupTopics(COMPONENTS_TO_GROUPS_TOPICS);\n+\n+        Set<String> componentGroups = new HashSet<>();\n+        if (componentsToGroupsTopics != null) {\n+            componentsToGroupsTopics.iterator().forEachRemaining(node -> {\n+                Topics groupsTopics = (Topics) node;\n+                groupsTopics.children.values().stream().map(n -> (Topic) n).map(Topic::getName)\n+                        .forEach(componentGroups::add);\n+\n+            });\n+        }\n+        return componentGroups;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzgzNDkyOQ=="}, "originalCommit": {"oid": "2d8b385611b50b6beb259be6ee2007dfc38f82e8"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 755, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}