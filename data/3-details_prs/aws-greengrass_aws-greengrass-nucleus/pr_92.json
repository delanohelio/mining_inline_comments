{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTMzMzQ4", "number": 92, "title": "GitHub action to push metrics to CloudWatch and comment on our PRs", "bodyText": "Issue #, if available:\nDescription of changes:\nThis change adds a new step to our GitHub actions which runs a Python script to\n\nPush metrics from #90 to CloudWatch\nPull metrics from CloudWatch\nCompare pulled metrics to the current ones and comments on the PR (as it has done on this PR)\n\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-03T19:30:32Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92", "merged": true, "mergeCommit": {"oid": "1f197011e1b76ff204fae3075dd0dfc18fff876f"}, "closed": true, "closedAt": "2020-03-04T23:45:43Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKHg-ugBqjMwOTM1Njk0MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKfHP9AH2gAyMzgzMTMzMzQ4OmNjMmMwYjEyOWE2ZjY2NDg0ZjYyYWI1OTc3NTE2NGViYTk5NDZjZWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10d48734fcc7443899a6d9cd3e65ecc4acbb4d8f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/10d48734fcc7443899a6d9cd3e65ecc4acbb4d8f", "committedDate": "2020-03-03T19:29:41Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "c4ee776abdf11a19582897ecde41848c092e43fb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4ee776abdf11a19582897ecde41848c092e43fb", "committedDate": "2020-03-03T19:30:03Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4ee776abdf11a19582897ecde41848c092e43fb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4ee776abdf11a19582897ecde41848c092e43fb", "committedDate": "2020-03-03T19:30:03Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "committedDate": "2020-03-03T19:31:13Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fdf07dd87a4f9da1f42a4364ac50c77526ef51d5", "committedDate": "2020-03-03T19:31:13Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "committedDate": "2020-03-03T19:54:42Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0ef2274a5d7ea082baf7346e2b49b6d1dc1f4a90", "committedDate": "2020-03-03T19:54:42Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "91c8da768a533b7808071fac378ad7dcc0cf9d0a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/91c8da768a533b7808071fac378ad7dcc0cf9d0a", "committedDate": "2020-03-03T19:57:56Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91c8da768a533b7808071fac378ad7dcc0cf9d0a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/91c8da768a533b7808071fac378ad7dcc0cf9d0a", "committedDate": "2020-03-03T19:57:56Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "c525c0235b43573183c0afdaf4f16f491cbefae5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c525c0235b43573183c0afdaf4f16f491cbefae5", "committedDate": "2020-03-03T19:58:55Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c525c0235b43573183c0afdaf4f16f491cbefae5", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c525c0235b43573183c0afdaf4f16f491cbefae5", "committedDate": "2020-03-03T19:58:55Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "committedDate": "2020-03-03T20:00:21Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3ec4b0a62e7e7eff2e139cfc7d907f79f7c0a7f0", "committedDate": "2020-03-03T20:00:21Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "committedDate": "2020-03-03T20:02:08Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/daa422b437d96c0966dbaa2e68c3eb3f8e4eb575", "committedDate": "2020-03-03T20:02:08Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "1d8f78b1838ed35cfaf086b5887ac16999b9d168", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d8f78b1838ed35cfaf086b5887ac16999b9d168", "committedDate": "2020-03-03T20:05:16Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d8f78b1838ed35cfaf086b5887ac16999b9d168", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d8f78b1838ed35cfaf086b5887ac16999b9d168", "committedDate": "2020-03-03T20:05:16Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "4edcba4c683cd95ceb2848edcfe054823e763b83", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4edcba4c683cd95ceb2848edcfe054823e763b83", "committedDate": "2020-03-03T20:18:52Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4edcba4c683cd95ceb2848edcfe054823e763b83", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4edcba4c683cd95ceb2848edcfe054823e763b83", "committedDate": "2020-03-03T20:18:52Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "committedDate": "2020-03-03T20:23:17Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7414b43919b7b3f5488ee1ed72ac3b1bf515f670", "committedDate": "2020-03-03T20:23:17Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "committedDate": "2020-03-03T20:25:33Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/896d87bc5b2e62d7a8171d8e5a7e8d0e3ec3d6c7", "committedDate": "2020-03-03T20:25:33Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "5870d69b392fbfe475cb86cb632e040dd3acee7a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5870d69b392fbfe475cb86cb632e040dd3acee7a", "committedDate": "2020-03-03T21:47:37Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5870d69b392fbfe475cb86cb632e040dd3acee7a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5870d69b392fbfe475cb86cb632e040dd3acee7a", "committedDate": "2020-03-03T21:47:37Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "committedDate": "2020-03-03T21:50:38Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8f713d964fc40b75936a6f19fd71f7ac3f2cc285", "committedDate": "2020-03-03T21:50:38Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "35c081c624937a8b0d033d5c4f9f300531ff07f9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35c081c624937a8b0d033d5c4f9f300531ff07f9", "committedDate": "2020-03-03T21:57:40Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35c081c624937a8b0d033d5c4f9f300531ff07f9", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/35c081c624937a8b0d033d5c4f9f300531ff07f9", "committedDate": "2020-03-03T21:57:40Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "1e74c75cb8edf5051486f4623160e69e2613168e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e74c75cb8edf5051486f4623160e69e2613168e", "committedDate": "2020-03-03T23:13:25Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e74c75cb8edf5051486f4623160e69e2613168e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1e74c75cb8edf5051486f4623160e69e2613168e", "committedDate": "2020-03-03T23:13:25Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/358756fcab63dd42a91c4ee42903d61295f3079a", "committedDate": "2020-03-03T23:25:00Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDEyMDAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368412003", "createdAt": "2020-03-03T23:57:01Z", "commit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzo1NzowMVrOFxa8OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDowMjo0NVrOFxbDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NTk0NQ==", "bodyText": "if this gets throttled or returns an error - will that return an empty map?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387365945", "createdAt": "2020-03-03T23:57:01Z", "author": {"login": "rbattle"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2NzcyNQ==", "bodyText": "bold is hard to see in the table. Is it possible to add an emoji like  \u2757\ufe0f or \ud83d\udca5  as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387367725", "createdAt": "2020-03-04T00:02:45Z", "author": {"login": "rbattle"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        StartTime=datetime.now() - timedelta(days=7),\n+        EndTime=datetime.now(),\n+        ScanBy=\"TimestampDescending\")[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Test | Measurement | Value | Change |\\n| - | - | - | - |\\n\"\n+    for test_path, v in current_metrics.items():\n+        change_str = \"N/A\"\n+        if test_path in prev_metric_map:\n+            change = v - prev_metric_map[test_path]\n+            change_str = str(change)\n+            if change > 0:\n+                change_str = f\"+{change}\"\n+            # Bold changes over 10%\n+            if abs(change / v) > .1:\n+                change_str = f\"**{change_str}**\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDMxODE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368431819", "createdAt": "2020-03-04T00:52:31Z", "commit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1MjozMVrOFxb-ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1MjozMVrOFxb-ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mjk0Nw==", "bodyText": "NIT: Can we put the test names at the end? I know it is weird, but some test names are very long and the horizontal scroll doesn't help when you want to see the test name and the values in the same view. For this particular purpose, I think having the measurement, value and change show up first should be more useful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387382947", "createdAt": "2020-03-04T00:52:31Z", "author": {"login": "chaurah"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+    # Continue running only for pull requests\n+    if event_type == \"push\":\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    prev_metrics = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        StartTime=datetime.now() - timedelta(days=7),\n+        EndTime=datetime.now(),\n+        ScanBy=\"TimestampDescending\")[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Test | Measurement | Value | Change |\\n| - | - | - | - |\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDMyNzA5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368432709", "createdAt": "2020-03-04T00:55:08Z", "commit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NTowOVrOFxcBsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NTowOVrOFxcBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzcyOA==", "bodyText": "NIT: Can we document which account/role credentials are being used here in a quip-doc/wiki somewhere?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387383728", "createdAt": "2020-03-04T00:55:09Z", "author": {"login": "chaurah"}, "path": ".github/workflows/maven.yml", "diffHunk": "@@ -20,6 +20,12 @@ jobs:\n       uses: actions/setup-java@v1\n       with:\n         java-version: 1.8\n+    - name: Configure AWS credentials", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDMyMTY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368432167", "createdAt": "2020-03-04T00:53:28Z", "commit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1MzoyOFrOFxb_yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NzozMFrOFxcELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI0MQ==", "bodyText": "Should we only publish metrics in \"push\" event? The trend from different PRs is not very useful.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387383241", "createdAt": "2020-03-04T00:53:28Z", "author": {"login": "hui-yang"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NDM2Ng==", "bodyText": "Also there can not be more than 20 metrics per call. https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricData.html", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387384366", "createdAt": "2020-03-04T00:57:30Z", "author": {"login": "hui-yang"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    cw.put_metric_data(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzI0MQ=="}, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDQwMDAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368440003", "createdAt": "2020-03-04T01:04:37Z", "commit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTowNDozN1rOFxcRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMTowNDozN1rOFxcRBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NzY1NA==", "bodyText": "Wondering if these constants can be shared between the Java classes and this script?\nAlso, check for key errors here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387387654", "createdAt": "2020-03-04T01:04:37Z", "author": {"login": "abanthiy"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,99 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from github import Github\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "committedDate": "2020-03-04T01:25:04Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "358756fcab63dd42a91c4ee42903d61295f3079a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/358756fcab63dd42a91c4ee42903d61295f3079a", "committedDate": "2020-03-03T23:25:00Z", "message": "Add GitHub action to upload metrics to cloudwatch"}, "afterCommit": {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c07d3f839266cec5350b2e66b41ccbeaa35f89e1", "committedDate": "2020-03-04T01:25:04Z", "message": "Add GitHub action to upload metrics to cloudwatch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTk2MTc4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-368996178", "createdAt": "2020-03-04T17:56:19Z", "commit": {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1NjoxOVrOFx3lDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1NjoxOVrOFx3lDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNTE0OQ==", "bodyText": "Right now the metrics appear in an order which is less readable for me. It would be good to have the avg and max of measurements in consecutive rows in table.\nThis would require changing the extension code which generates the json.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387835149", "createdAt": "2020-03-04T17:56:19Z", "author": {"login": "abanthiy"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry(count=10, delay=10)\n+def comment_on_pr(comment, pr_number):\n+    gh = Github(sys.argv[1])\n+    repo = gh.get_repo(os.getenv(\"GITHUB_REPOSITORY\"))\n+    pr = repo.get_pull(pr_number)\n+    pr.create_issue_comment(comment)\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    if event_type == \"push\":\n+        # Put metrics up to cloudwatch in batches of 20 (their max limit)\n+        for b in batch(datapoints, 20):\n+            put_metrics_retryable(cw, b)\n+        # Only continue to run for pull requests\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    old_metrics_result = cw.get_metric_data(MetricDataQueries=[\n+        {\n+            \"Id\": \"last_push\",\n+            \"Expression\": f\"SEARCH('{{Evergreen/Testing,\\\"GitHub Event\\\",\\\"Test Path\\\"}} \\\"GitHub \"\n+                          f\"Event\\\"=\\\"push\\\"', 'Maximum', 60)\",\n+        }\n+    ],\n+        # Look up to 7 days in the past for the last push to master to compare against\n+        StartTime=datetime.utcnow() - timedelta(days=7),\n+        EndTime=datetime.utcnow(),\n+        ScanBy=\"TimestampDescending\")\n+\n+    # If there are any error messages, print them out so that we can do something about it\n+    if old_metrics_result[\"Messages\"]:\n+        print(old_metrics_result[\"Messages\"])\n+    prev_metrics = old_metrics_result[\"MetricDataResults\"]\n+\n+    prev_metric_map = {}\n+    for old_metric in reversed(prev_metrics):\n+        if old_metric[\"Label\"] in current_metrics:\n+            old_value = max(old_metric[\"Values\"])\n+            prev_metric_map[old_metric[\"Label\"]] = old_value\n+\n+    table = \"| Measurement | Value | Change | Test |\\n| - | - | - | - |\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c07d3f839266cec5350b2e66b41ccbeaa35f89e1"}, "originalPosition": 105}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06eb8f6024c9ee6c50c5c598b937313adcbf7b91", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/06eb8f6024c9ee6c50c5c598b937313adcbf7b91", "committedDate": "2020-03-04T19:13:48Z", "message": "Switch measurement order to be average, then max, then next measurement"}, "afterCommit": {"oid": "38618e2de88988154b02533925c8f6c71336f2d1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/38618e2de88988154b02533925c8f6c71336f2d1", "committedDate": "2020-03-04T19:59:24Z", "message": "Switch measurement order to be average, then max, then next measurement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDg4NjUy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-369088652", "createdAt": "2020-03-04T20:11:55Z", "commit": {"oid": "38618e2de88988154b02533925c8f6c71336f2d1"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxMTo1NVrOFx8CiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDoxNzo1NFrOFx8NXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwODIzMw==", "bodyText": "This defaults to infinite retries with no delay right? why not have a max count/delay like you do for comment on pr?\nIt should be ok if this fails right? And we don't want to get into throttling situations by multiple prs spamming put_metric", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387908233", "createdAt": "2020-03-04T20:11:55Z", "author": {"login": "rbattle"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict, OrderedDict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38618e2de88988154b02533925c8f6c71336f2d1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkxMTAwNw==", "bodyText": "I don't think you addressed the potential error from cw here as discussed in prev version", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#discussion_r387911007", "createdAt": "2020-03-04T20:17:54Z", "author": {"login": "rbattle"}, "path": ".github/scripts/cwUpload.py", "diffHunk": "@@ -0,0 +1,124 @@\n+#  Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+\"\"\"\n+Script to upload test metrics to CloudWatch and comment on GitHub pull request\n+\"\"\"\n+import json\n+import os\n+import sys\n+from collections import defaultdict, OrderedDict\n+from datetime import datetime, timedelta\n+\n+import boto3\n+from retryable import retry\n+from github import Github\n+\n+\n+def batch(iterable, batch_size=1):\n+    length = len(iterable)\n+    for index in range(0, length, batch_size):\n+        yield iterable[index:min(index + batch_size, length)]\n+\n+\n+@retry()\n+def put_metrics_retryable(cw, datapoints):\n+    # Returns None, will throw if an error occurs\n+    cw.put_metric_data(\n+        Namespace=\"Evergreen/Testing\",\n+        MetricData=datapoints\n+    )\n+\n+\n+@retry(count=10, delay=10)\n+def comment_on_pr(comment, pr_number):\n+    gh = Github(sys.argv[1])\n+    repo = gh.get_repo(os.getenv(\"GITHUB_REPOSITORY\"))\n+    pr = repo.get_pull(pr_number)\n+    pr.create_issue_comment(comment)\n+\n+\n+def main():\n+    with open(\"target/surefire-reports/junitReport.json\", \"r\") as f:\n+        report = json.load(f, object_pairs_hook=OrderedDict)\n+    with open(os.getenv(\"GITHUB_EVENT_PATH\"), \"r\") as f:\n+        github_event = json.load(f)\n+\n+    cw = boto3.client(\"cloudwatch\")\n+    datapoints = []\n+    current_metrics = defaultdict(dict)\n+    event_type = os.getenv(\"GITHUB_EVENT_NAME\", \"pull_request\")\n+\n+    # For each test in the report\n+    for test_run in report:\n+        # For each metric key and value (excluding name and classname since they aren't metrics)\n+        for k, v in test_run.items():\n+            if k != \"name\" and k != \"classname\":\n+                test_path = test_run[\"classname\"] + \".\" + test_run[\"name\"]\n+                current_metrics[test_path + \" \" + k] = v\n+                datapoints.append({\n+                    \"MetricName\": k,\n+                    \"Value\": v,\n+                    \"Dimensions\": [\n+                        {\n+                            \"Name\": \"Test Path\",\n+                            \"Value\": test_path\n+                        },\n+                        {\n+                            \"Name\": \"GitHub Event\",\n+                            \"Value\": event_type\n+                        }\n+                    ]\n+                })\n+\n+    if event_type == \"push\":\n+        # Put metrics up to cloudwatch in batches of 20 (their max limit)\n+        for b in batch(datapoints, 20):\n+            put_metrics_retryable(cw, b)\n+        # Only continue to run for pull requests\n+        return\n+\n+    # Get metrics from the last push to master to compare the current metrics to\n+    old_metrics_result = cw.get_metric_data(MetricDataQueries=[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38618e2de88988154b02533925c8f6c71336f2d1"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/669bd53ddee4aaddc26474c5bb2cee38914e034a", "committedDate": "2020-03-04T20:21:45Z", "message": "Switch measurement order to be average, then max, then next measurement"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38618e2de88988154b02533925c8f6c71336f2d1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/38618e2de88988154b02533925c8f6c71336f2d1", "committedDate": "2020-03-04T19:59:24Z", "message": "Switch measurement order to be average, then max, then next measurement"}, "afterCommit": {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/669bd53ddee4aaddc26474c5bb2cee38914e034a", "committedDate": "2020-03-04T20:21:45Z", "message": "Switch measurement order to be average, then max, then next measurement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTIxNjE5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-369121619", "createdAt": "2020-03-04T21:05:08Z", "commit": {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTc5OTk4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/92#pullrequestreview-369179998", "createdAt": "2020-03-04T22:45:18Z", "commit": {"oid": "669bd53ddee4aaddc26474c5bb2cee38914e034a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d463ea191b15aa6f4da1b54239948b0f37b7265b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d463ea191b15aa6f4da1b54239948b0f37b7265b", "committedDate": "2020-03-04T22:54:47Z", "message": "Merge branch 'master' into extension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc2c0b129a6f66484f62ab59775164eba9946ceb", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cc2c0b129a6f66484f62ab59775164eba9946ceb", "committedDate": "2020-03-04T23:00:18Z", "message": "Merge branch 'master' into extension"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2294, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}