{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTAxODMx", "number": 167, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowNzozOVrODwLtHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowOToxNVrODwLuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODUwMDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowNzozOVrOGDCstQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoyMzoyNVrOGDDEgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0MzEyNQ==", "bodyText": "I don't think we should sync on this. Make a new object to sync on within this method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405843125", "createdAt": "2020-04-08T22:07:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -98,38 +98,28 @@ public void startup() throws InterruptedException {\n         if (result == RunStatus.Errored) {\n             reportState(State.ERRORED);\n         } else if (result == RunStatus.NothingDone) {\n-            result = run(\"run\", exit -> {\n-                runScript = null;\n-                if (!inShutdown) {\n-                    if (exit == 0) {\n-                        this.requestStop();\n-                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n-                    } else {\n-                        reportState(State.ERRORED);\n-                        logger.atError().setEventType(\"generic-service-errored\").addKeyValue(\"exitCode\", exit).log();\n-                    }\n-                }\n-            });\n-            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n-                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n-            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n-            if (timeout != null) {\n-                Exec processToClose = currentScript;\n-                context.get(ScheduledExecutorService.class).schedule(() -> {\n-                    if (processToClose.isRunning()) {\n-                        try {\n-                            logger.atWarn(\"service-run-timed-out\")\n-                                    .log(\"Service failed to run within timeout, calling close in process\");\n+            handleRunScript();\n+        }\n+    }\n+\n+    private void handleRunScript() throws InterruptedException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0OTIxNg==", "bodyText": "Changed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405849216", "createdAt": "2020-04-08T22:23:25Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -98,38 +98,28 @@ public void startup() throws InterruptedException {\n         if (result == RunStatus.Errored) {\n             reportState(State.ERRORED);\n         } else if (result == RunStatus.NothingDone) {\n-            result = run(\"run\", exit -> {\n-                runScript = null;\n-                if (!inShutdown) {\n-                    if (exit == 0) {\n-                        this.requestStop();\n-                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n-                    } else {\n-                        reportState(State.ERRORED);\n-                        logger.atError().setEventType(\"generic-service-errored\").addKeyValue(\"exitCode\", exit).log();\n-                    }\n-                }\n-            });\n-            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n-                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n-            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n-            if (timeout != null) {\n-                Exec processToClose = currentScript;\n-                context.get(ScheduledExecutorService.class).schedule(() -> {\n-                    if (processToClose.isRunning()) {\n-                        try {\n-                            logger.atWarn(\"service-run-timed-out\")\n-                                    .log(\"Service failed to run within timeout, calling close in process\");\n+            handleRunScript();\n+        }\n+    }\n+\n+    private void handleRunScript() throws InterruptedException {\n+        synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0MzEyNQ=="}, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODUwMjk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowODo1MVrOGDCubA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoyNDozMVrOGDDGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0MzU2NA==", "bodyText": "What about startup? Don't we need the same fix there?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405843564", "createdAt": "2020-04-08T22:08:51Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -98,38 +98,28 @@ public void startup() throws InterruptedException {\n         if (result == RunStatus.Errored) {\n             reportState(State.ERRORED);\n         } else if (result == RunStatus.NothingDone) {\n-            result = run(\"run\", exit -> {\n-                runScript = null;\n-                if (!inShutdown) {\n-                    if (exit == 0) {\n-                        this.requestStop();\n-                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n-                    } else {\n-                        reportState(State.ERRORED);\n-                        logger.atError().setEventType(\"generic-service-errored\").addKeyValue(\"exitCode\", exit).log();\n-                    }\n-                }\n-            });\n-            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n-                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n-            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n-            if (timeout != null) {\n-                Exec processToClose = currentScript;\n-                context.get(ScheduledExecutorService.class).schedule(() -> {\n-                    if (processToClose.isRunning()) {\n-                        try {\n-                            logger.atWarn(\"service-run-timed-out\")\n-                                    .log(\"Service failed to run within timeout, calling close in process\");\n+            handleRunScript();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0OTY0Nw==", "bodyText": "Nope, in startup we don't have this race condition as transitioning to running is handled by the callback.\nThread 1\nservice executes the startup script using thread 2\nThread 2\nOnce startup script finishes the service sets its stage as finished.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405849647", "createdAt": "2020-04-08T22:24:31Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/GenericExternalService.java", "diffHunk": "@@ -98,38 +98,28 @@ public void startup() throws InterruptedException {\n         if (result == RunStatus.Errored) {\n             reportState(State.ERRORED);\n         } else if (result == RunStatus.NothingDone) {\n-            result = run(\"run\", exit -> {\n-                runScript = null;\n-                if (!inShutdown) {\n-                    if (exit == 0) {\n-                        this.requestStop();\n-                        logger.atInfo().setEventType(\"generic-service-stopping\").log(\"Service finished running\");\n-                    } else {\n-                        reportState(State.ERRORED);\n-                        logger.atError().setEventType(\"generic-service-errored\").addKeyValue(\"exitCode\", exit).log();\n-                    }\n-                }\n-            });\n-            Topic timeoutTopic = config.find(SERVICE_LIFECYCLE_NAMESPACE_TOPIC,\n-                    LIFECYCLE_RUN_NAMESPACE_TOPIC, TIMEOUT_NAMESPACE_TOPIC);\n-            Integer timeout = timeoutTopic == null ? null : (Integer) timeoutTopic.getOnce();\n-            if (timeout != null) {\n-                Exec processToClose = currentScript;\n-                context.get(ScheduledExecutorService.class).schedule(() -> {\n-                    if (processToClose.isRunning()) {\n-                        try {\n-                            logger.atWarn(\"service-run-timed-out\")\n-                                    .log(\"Service failed to run within timeout, calling close in process\");\n+            handleRunScript();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0MzU2NA=="}, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODUwNDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowOToxNVrOGDCvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoyMzoyMlrOGDDEaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mzc1NA==", "bodyText": "make final", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405843754", "createdAt": "2020-04-08T22:09:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -98,7 +100,7 @@\n     Consumer<CharSequence> stderr = NOP;\n     private Copier stderrc;\n     private Copier stdoutc;\n-    private boolean closed = false;\n+    private AtomicBoolean isClosed = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0OTE5Mg==", "bodyText": "yep, PMD is screaming. Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/167#discussion_r405849192", "createdAt": "2020-04-08T22:23:22Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -98,7 +100,7 @@\n     Consumer<CharSequence> stderr = NOP;\n     private Copier stderrc;\n     private Copier stdoutc;\n-    private boolean closed = false;\n+    private AtomicBoolean isClosed = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mzc1NA=="}, "originalCommit": {"oid": "23cea783978267eeb752c09a13ab1a920bec69ee"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 25, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}