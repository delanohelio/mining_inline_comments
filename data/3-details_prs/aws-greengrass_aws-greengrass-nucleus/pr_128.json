{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzI1MzY2", "number": 128, "title": "Add performance benchmarking on dependency resolution component", "bodyText": "Issue #, if available:\nDescription of changes:\nAdd performance benchmark test on package dependency resolution. The test creates a real Kernel instance and kernel loads config.yaml as the current state. Kernel is not started however because dependency resolution does not depend on other services or functionalities. I have experimented the alternative to mock kernel using Mockito, but it shows more memory overhead, and similar execution time. See the numbers below.\n\nTwo scenarios are covered.\n\nScenario 1: GIVEN main without any additional packages, WHEN resolve 2 top-level packages,THEN 13 new packages are resolved and added.\nScenario 2: GIVEN 7 dependency packages exist on the device, WHEN resolve 2 top-level packages, THEN 6 packages remain the same, 1 updated, and 6 new packages added. (Using <service>.version keyword in config.yaml)\n\n\nClean up error logging in kernel\n\nWhy is this change necessary:\nHow was this change tested:\n\nWarmups, Forks, Measurement iterations and benchmark modes are setup in code. CLI parameters will override the settings in code.\nIn the root directory of Kernel package: java -jar src/test/evergreen-kernel-benchmark/target/benchmarks.jar -rf json -jvmArgs \"-Xms1m -Xmx128m -XX:MaxHeapFreeRatio=10 -XX:MinHeapFreeRatio=5 -XX:GCTimeRatio=19 -XX:NativeMemoryTracking=summary -Xss232k\" -prof com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler packagemanager.*\n\nOutput\nBenchmark                                                                        Mode  Cnt         Score         Error  Units\nDependencyResolverBenchmark.NewMain.measure                                      avgt   20         0.007 \u00b1       0.001   s/op\nDependencyResolverBenchmark.NewMain.measure:EG.codeCacheUsed                     avgt   20   7489552.543 \u00b1  313535.018  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.compressedClassSpaceUsed          avgt   20   2253794.395 \u00b1    1841.099  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.gcTimeMillis                      avgt   20       571.655 \u00b1       6.195     ms\nDependencyResolverBenchmark.NewMain.measure:EG.heapUsed                          avgt   20   3569634.335 \u00b1  212782.840  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.heapUsed.jmap                     avgt   20   3638659.533 \u00b1  211170.454  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Arena Chunk                  avgt   20   1587483.255 \u00b1 1758048.858  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Class                        avgt   20  25988176.886 \u00b1  168386.636  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Code                         avgt   20   9105043.911 \u00b1  378664.709  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Compiler                     avgt   20    310200.320 \u00b1  620365.471  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.GC                           avgt   20  10418176.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Internal                     avgt   20   5920137.775 \u00b1     931.092  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Java Heap                    avgt   20   6815744.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Native Memory Tracking       avgt   20    658019.711 \u00b1    2165.353  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Symbol                       avgt   20   5233664.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Thread                       avgt   20  11822080.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.jcmd.Total                        avgt   20  77858235.837 \u00b1 2123481.591  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.metaspaceUsed                     avgt   20  19076514.388 \u00b1   72951.369  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.nonHeapUsed                       avgt   20  28818285.532 \u00b1  384082.508  bytes\nDependencyResolverBenchmark.NewMain.measure:EG.totalCommitted                    avgt   20  36258692.293 \u00b1  470353.152  bytes\nDependencyResolverBenchmark.StatefulMain.measure                                 avgt   20         0.005 \u00b1       0.001   s/op\nDependencyResolverBenchmark.StatefulMain.measure:EG.codeCacheUsed                avgt   20   7460058.548 \u00b1  309756.845  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.compressedClassSpaceUsed     avgt   20   2262673.927 \u00b1    1815.961  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.gcTimeMillis                 avgt   20       569.618 \u00b1       7.238     ms\nDependencyResolverBenchmark.StatefulMain.measure:EG.heapUsed                     avgt   20   3633495.433 \u00b1  214416.510  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.heapUsed.jmap                avgt   20   3683142.372 \u00b1  208389.957  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Arena Chunk             avgt   20   1827861.385 \u00b1 2679275.232  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Class                   avgt   20  25918832.330 \u00b1  117481.619  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Code                    avgt   20   9052276.221 \u00b1  377008.856  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Compiler                avgt   20    302443.055 \u00b1  407494.223  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.GC                      avgt   20  10422272.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Internal                avgt   20   5949901.834 \u00b1     929.705  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Java Heap               avgt   20   7864320.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Native Memory Tracking  avgt   20    660113.235 \u00b1    2484.199  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Symbol                  avgt   20   5234688.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Thread                  avgt   20  13515776.000 \u00b1       0.001  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.jcmd.Total                   avgt   20  80748911.179 \u00b1 2877542.304  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.metaspaceUsed                avgt   20  19112375.726 \u00b1   73972.237  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.nonHeapUsed                  avgt   20  28833150.881 \u00b1  381504.252  bytes\nDependencyResolverBenchmark.StatefulMain.measure:EG.totalCommitted               avgt   20  37343051.611 \u00b1  409136.235  bytes\n# The test below uses mock Kernel instance, which is not included in the PR.\nBenchmark                                                              Mode  Cnt         Score         Error  Units\nDependencyResolverUnit.NewMain.measure                                 avgt   20         0.006 \u00b1       0.002   s/op\nDependencyResolverUnit.NewMain.measure:EG.codeCacheUsed                avgt   20   9079801.034 \u00b1  292329.178  bytes\nDependencyResolverUnit.NewMain.measure:EG.compressedClassSpaceUsed     avgt   20   3094015.262 \u00b1    1817.149  bytes\nDependencyResolverUnit.NewMain.measure:EG.gcTimeMillis                 avgt   20       577.093 \u00b1       7.065     ms\nDependencyResolverUnit.NewMain.measure:EG.heapUsed                     avgt   20   5234993.493 \u00b1  203234.307  bytes\nDependencyResolverUnit.NewMain.measure:EG.heapUsed.jmap                avgt   20   5285425.424 \u00b1  213004.511  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Arena Chunk             avgt   20   2614166.652 \u00b1 4163753.333  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Class                   avgt   20  30207989.501 \u00b1   93385.868  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Code                    avgt   20  11051058.062 \u00b1  357980.171  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Compiler                avgt   20    296320.000 \u00b1  374223.850  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.GC                      avgt   20  10421775.360 \u00b1    1174.446  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Internal                avgt   20   6015456.815 \u00b1     527.588  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Java Heap               avgt   20   9114746.880 \u00b1  557837.278  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Native Memory Tracking  avgt   20    850866.424 \u00b1    1802.983  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Symbol                  avgt   20   6341913.600 \u00b1     394.377  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Thread                  avgt   20  11580416.000 \u00b1       0.001  bytes\nDependencyResolverUnit.NewMain.measure:EG.jcmd.Total                   avgt   20  88494581.812 \u00b1 3904933.852  bytes\nDependencyResolverUnit.NewMain.measure:EG.metaspaceUsed                avgt   20  23253969.920 \u00b1   68951.706  bytes\nDependencyResolverUnit.NewMain.measure:EG.nonHeapUsed                  avgt   20  35425768.962 \u00b1  359521.249  bytes\nDependencyResolverUnit.NewMain.measure:EG.totalCommitted               avgt   20  45023049.956 \u00b1  906821.881  bytes \n\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-20T02:50:50Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128", "merged": true, "mergeCommit": {"oid": "3aaddd069791c533a481a365d5589476d1896c39"}, "closed": true, "closedAt": "2020-03-24T22:40:56Z", "author": {"login": "hui-yang"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPYXRMgFqTM3ODIyMTgyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ6wpbAFqTM4MDc0NTc2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIxODIy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-378221822", "createdAt": "2020-03-20T03:53:14Z", "commit": {"oid": "9747f237e807910b478096f751309428565c5b75"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1MzoxNFrOF5HFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1Nzo1N1rOF5HIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTEzMA==", "bodyText": "nit\nNeed a space at the end when appending the class name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429130", "createdAt": "2020-03-20T03:53:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -220,15 +216,10 @@ public static EvergreenService locate(Context context, String name) throws Servi\n                     staticLogger.atInfo().setEventType(\"evergreen-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setEventType(\"evergreen-service-load-error\")\n-                            .addKeyValue(\"className\", clazz.getName())\n-                            .log(\"Can't create Evergreen Service instance\");\n-                    throw new ServiceLoadException(\"Can't create code-backed service from \" + clazz.getSimpleName(),\n+                    throw new ServiceLoadException(\"Can't create Evergreen Service instance\" + clazz.getSimpleName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9747f237e807910b478096f751309428565c5b75"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTIwNQ==", "bodyText": "nit\nNeed a space at the end for the name.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429205", "createdAt": "2020-03-20T03:53:37Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -237,10 +228,7 @@ public static EvergreenService locate(Context context, String name) throws Servi\n                     staticLogger.atInfo().setEventType(\"generic-service-loaded\")\n                             .addKeyValue(\"serviceName\", ret.getName()).log();\n                 } catch (Throwable ex) {\n-                    staticLogger.atError().setEventType(\"generic-service-load-error\")\n-                            .addKeyValue(\"serviceName\", name)\n-                            .log(\"Can't create generic instance\");\n-                    throw new ServiceLoadException(\"Can't create generic service\", ex);\n+                    throw new ServiceLoadException(\"Can't create generic service instance\" + name, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9747f237e807910b478096f751309428565c5b75"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTMxMg==", "bodyText": "We don't care about the exception? If we don't care about the exception, why log anything here at all?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429312", "createdAt": "2020-03-20T03:54:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -295,7 +295,8 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         try {\n             service = EvergreenService.locate(kernel.context, packageName);\n         } catch (ServiceLoadException e) {\n-            logger.atWarn().setCause(e).addKeyValue(\"packageName\", packageName).log(\"Fail to load package\");\n+            logger.atWarn().addKeyValue(\"packageName\", packageName).log(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9747f237e807910b478096f751309428565c5b75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTkwNA==", "bodyText": "If possible, I think you'd want to set this to run with 10 or 20 iterations. Also check what happens when you run the whole benchmark suite like this: https://github.com/aws/aws-greengrass-kernel/blob/dr-perf/.github/workflows/benchmark.yaml#L31 since that is what GitHub will run. If that doesn't do what we want, we may need to add more steps to the workflow to run these microbenchmarks separately. Feel free to Chime with me if you want to talk about it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395429904", "createdAt": "2020-03-20T03:57:57Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+@BenchmarkMode(value ={Mode.Throughput, Mode.AverageTime})\n+@Fork(1)\n+@State(Scope.Benchmark)\n+public class DependencyResolverBenchmark {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9747f237e807910b478096f751309428565c5b75"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9747f237e807910b478096f751309428565c5b75", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9747f237e807910b478096f751309428565c5b75", "committedDate": "2020-03-20T02:24:43Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "committedDate": "2020-03-20T22:30:49Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODU3ODky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-378857892", "createdAt": "2020-03-20T23:13:42Z", "commit": {"oid": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzoxMzo0MlrOF5lhow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMzoxMzo0MlrOF5lhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyNzk3MQ==", "bodyText": "Although params are nice they won't work with the upload script for cloudwatch since it wants unique benchmark names. So can you either consider changing how it parses the result file, or what I think may be not just easier but better would be to have each dependency scenario as a different benchmark. Even if they are calling the same code with a parameter, as long as they are unique benchmarks it should all work nicely.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r395927971", "createdAt": "2020-03-20T23:13:42Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.BenchmarkParams;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@Fork(1)\n+@Measurement(iterations = 20)\n+@Warmup(iterations = 5)\n+@State(Scope.Benchmark)\n+public class DependencyResolverBenchmark {\n+\n+    /**\n+     * The 2 config files are used to test 2 different scenarios:\n+     * #1: GIVEN main without any existing packages,\n+     *     WHEN resolve 2 top-level packages,\n+     *     THEN 13 new packages are resolved and added.\n+     * #2: GIVEN 7 packages exist on the device (Using <service>.version keyword in config),\n+     *     WHEN resolve 2 top-level packages,\n+     *     THEN 6 packages remain the same, 1 updated, and 6 new packages added.\n+     */\n+    @Param({\"DRBNewConfig.yaml\", \"DRBStatefulConfig.yaml\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d197ff3594ad2b2d9bb590dfc3ac480941ce8710", "committedDate": "2020-03-20T22:30:49Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "committedDate": "2020-03-21T01:40:30Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7dbe239972c6659f3abba28bfdce6ad9a52b3e08", "committedDate": "2020-03-21T01:40:30Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "committedDate": "2020-03-23T22:19:27Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fc277a6584f0e5b2ba50b9a9fcc3bfb2dea65487", "committedDate": "2020-03-23T22:19:27Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/26bbe34d0d12489cbc04cb6d10b973f832f38feb", "committedDate": "2020-03-23T22:21:56Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTU0NjYy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-379954662", "createdAt": "2020-03-24T02:11:09Z", "commit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjoxMToxMFrOF6ersA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMjoxMzo1N1rOF6euPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDQzMg==", "bodyText": "This path is wrong for running from the github action. It needs to be relative to the kernel package root.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396864432", "createdAt": "2020-03-24T02:11:10Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out how to read resource directory in local package store\n+            // For now, hardcode to be the resource directory outside of the JAR file\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/main/resources/com/aws/iot/evergreen/jmh/packagemanager/mock_artifact_source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NDU4NA==", "bodyText": "You need to save the result like I had in my example, or else all the memory will be freed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396864584", "createdAt": "2020-03-24T02:11:52Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out how to read resource directory in local package store\n+            // For now, hardcode to be the resource directory outside of the JAR file\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/main/resources/com/aws/iot/evergreen/jmh/packagemanager/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void doTeardown() {\n+            ForcedGcMemoryProfiler.recordUsedMemory();\n+        }\n+\n+        @Benchmark\n+        public List<PackageIdentifier> measure() throws Exception {\n+            return resolver.resolveDependencies(jobDoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg2NTA4Nw==", "bodyText": "This technically breaks the benchmark dashboard because it will interpret the primary metric as s/op instead of ops/s which this mode gives us. Either change this mode, or else change the python script to read the primary metric type/mode and handle it appropriately as ops/s instead of the execution time.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r396865087", "createdAt": "2020-03-24T02:13:57Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.Throughput)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26bbe34d0d12489cbc04cb6d10b973f832f38feb", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/26bbe34d0d12489cbc04cb6d10b973f832f38feb", "committedDate": "2020-03-23T22:21:56Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a00e9abcd8826a54e91b6834ca534b7aca68f00b", "committedDate": "2020-03-24T18:51:23Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjE0MjIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-380614223", "createdAt": "2020-03-24T19:04:02Z", "commit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTowNDowMlrOF6_AHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1MzoyMVrOF7Aqyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5Mzk0OA==", "bodyText": "Would this be more accurate - Failed to get active package version in Kernel.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397393948", "createdAt": "2020-03-24T19:04:02Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/DependencyResolver.java", "diffHunk": "@@ -295,7 +295,8 @@ protected String mergeSemverRequirements(final Collection<String> packageVersion\n         try {\n             service = EvergreenService.locate(kernel.context, packageName);\n         } catch (ServiceLoadException e) {\n-            logger.atWarn().setCause(e).addKeyValue(\"packageName\", packageName).log(\"Fail to load package\");\n+            logger.atDebug().setCause(e).addKeyValue(\"packageName\", packageName).log(\n+                    \"Fail to load package or package does not exist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNDgxNg==", "bodyText": "May be change it to EvergreenBenchmarkTest", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397404816", "createdAt": "2020-03-24T19:23:23Z", "author": {"login": "abanthiy"}, "path": "src/test/evergreen-kernel-benchmark/mock_artifact_source/PyYAML/3.10.0/recipe.yaml", "diffHunk": "@@ -0,0 +1,6 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: PyYAML\n+Description: Test recipe for Evergreen packages\n+Publisher: Me", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNTMwMw==", "bodyText": "Is this as per the recipe format? Quip document shows no Camel case in recipe files.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397405303", "createdAt": "2020-03-24T19:24:21Z", "author": {"login": "abanthiy"}, "path": "src/test/evergreen-kernel-benchmark/mock_artifact_source/awscli/1.16.144/recipe.yaml", "diffHunk": "@@ -0,0 +1,13 @@\n+---\n+RecipeTemplateVersion: '2020-01-25'\n+PackageName: awscli\n+Description: Test recipe for Evergreen packages\n+Publisher: Me\n+Version: '1.16.144'\n+Dependencies:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNjg0NA==", "bodyText": "I would rename this to DependencyResolverBenchmark.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397406844", "createdAt": "2020-03-24T19:27:14Z", "author": {"login": "abanthiy"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMTI1OQ==", "bodyText": "Also add a TODO to change the package store to actual store over a network, when it is available? That will also contribute to the dependency resolution performance.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397421259", "createdAt": "2020-03-24T19:53:21Z", "author": {"login": "abanthiy"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverIntegration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverIntegration {\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DependencyResolutionBenchmark {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverIntegration.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: figure out if there's a better way to load resource directory in local package store\n+            // For now, hardcode to be under root of kernel package\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/test/evergreen-kernel-benchmark/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a00e9abcd8826a54e91b6834ca534b7aca68f00b", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a00e9abcd8826a54e91b6834ca534b7aca68f00b", "committedDate": "2020-03-24T18:51:23Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "committedDate": "2020-03-24T21:22:21Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzI2NDE1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-380726415", "createdAt": "2020-03-24T21:56:55Z", "commit": {"oid": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo1Njo1NVrOF7EoRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo1Njo1NVrOF7EoRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NjE1MQ==", "bodyText": "This needs to be saved outside of this method, otherwise the reference goes away and the memory will be freed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#discussion_r397486151", "createdAt": "2020-03-24T21:56:55Z", "author": {"login": "MikeDombo"}, "path": "src/test/evergreen-kernel-benchmark/src/main/java/com/aws/iot/evergreen/jmh/packagemanager/DependencyResolverBenchmark.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.jmh.packagemanager;\n+\n+import com.aws.iot.evergreen.deployment.model.DeploymentDocument;\n+import com.aws.iot.evergreen.deployment.model.DeploymentPackageConfiguration;\n+import com.aws.iot.evergreen.jmh.profilers.ForcedGcMemoryProfiler;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.DependencyResolver;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.plugins.LocalPackageStore;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+public class DependencyResolverBenchmark {\n+\n+    @BenchmarkMode(Mode.AverageTime)\n+    @Fork(1)\n+    @Measurement(iterations = 20)\n+    @Warmup(iterations = 5)\n+    @State(Scope.Benchmark)\n+    public static abstract class DRIntegration {\n+        private DeploymentDocument jobDoc = new DeploymentDocument(\"mockJob1\",Arrays.asList(\"boto3\", \"awscli\"), Arrays.asList(\n+                new DeploymentPackageConfiguration(\"boto3\", \"1.9.128\", \"\", new HashSet<>(), new ArrayList<>()),\n+                new DeploymentPackageConfiguration(\"awscli\", \"1.16.144\", \"\", new HashSet<>(), new ArrayList<>())\n+        ), \"mockGroup1\", 1L);\n+\n+        private DependencyResolver resolver;\n+\n+        @Setup\n+        public void setup() {\n+            Kernel kernel = new Kernel();\n+            kernel.parseArgs(\"-i\", DependencyResolverBenchmark.class.getResource(getConfigFile()).toString());\n+            // We don't need to launch kernel here. Only configuration parsing and main service loading are\n+            // required for this benchmarking.\n+\n+            // TODO: Update local package store accordingly when the new implementation is ready\n+            // TODO: Figure out if there's a better way to load resource directory in local package store\n+            // For now, hardcode to be under root of kernel package\n+            Path packagePath = Paths.get(System.getProperty(\"user.dir\"))\n+                    .resolve(\"src/test/evergreen-kernel-benchmark/mock_artifact_source\");\n+            resolver = new DependencyResolver(new LocalPackageStore(packagePath), kernel);\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void doTeardown() {\n+            ForcedGcMemoryProfiler.recordUsedMemory();\n+        }\n+\n+        @Benchmark\n+        public List<PackageIdentifier> measure() throws Exception {\n+            List<PackageIdentifier> result = resolver.resolveDependencies(jobDoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3ec8a484fde73a9fe7353f9047514c1be55ed69", "committedDate": "2020-03-24T22:09:42Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5c773acbfc9b53c99272b9f8f66eac7d5670a1d7", "committedDate": "2020-03-24T21:22:21Z", "message": "Add performance benchmarking on dependency resolution component"}, "afterCommit": {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69", "author": {"user": {"login": "hui-yang", "name": "Hui Yang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f3ec8a484fde73a9fe7353f9047514c1be55ed69", "committedDate": "2020-03-24T22:09:42Z", "message": "Add performance benchmarking on dependency resolution component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQ0Mjc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-380744275", "createdAt": "2020-03-24T22:33:05Z", "commit": {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQ1NzY3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/128#pullrequestreview-380745767", "createdAt": "2020-03-24T22:36:30Z", "commit": {"oid": "f3ec8a484fde73a9fe7353f9047514c1be55ed69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2363, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}