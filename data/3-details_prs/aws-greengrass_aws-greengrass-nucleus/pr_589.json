{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyODExNDU4", "number": 589, "title": "Migrating integration tests over new IPC", "bodyText": "Issue #, if available:\nDescription of changes:\nMigrating the integration tests over new IPC\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-10-30T07:22:47Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589", "merged": true, "mergeCommit": {"oid": "ebaaab2483d635ce113b8033ee99beb54945a5e7"}, "closed": true, "closedAt": "2020-11-03T20:11:09Z", "author": {"login": "abanthiy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXouf0gFqTUyMDc3MDI2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY-5QKAFqTUyMjgzODI4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNzcwMjYw", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-520770260", "createdAt": "2020-10-30T15:18:47Z", "commit": {"oid": "b4583a49436a58abe20ae5d1ccf2336001ccd638"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToxODo0N1rOHrTwsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozNjoxNFrOHrUpTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NDU3Ng==", "bodyText": "I don't think this will fail the test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515174576", "createdAt": "2020-10-30T15:18:47Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -485,68 +489,80 @@ void GIVEN_some_running_services_WHEN_cancel_event_received_and_kernel_is_waitin\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                    Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                @Override\n+                public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                    if (streamEvent.getPreUpdateEvent() != null) {\n+                        DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                        deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                        deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                        try {\n+                            ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            fail(\"Caught exception while send component defer request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4583a49436a58abe20ae5d1ccf2336001ccd638"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3OTQ3NA==", "bodyText": "same here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515179474", "createdAt": "2020-10-30T15:25:21Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -616,85 +632,90 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(), Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                        @Override\n+                        public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                            if (streamEvent.getPreUpdateEvent() != null) {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                                try {\n+                                    ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                                } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                                    fail(\"Caught exception while send component defer request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4583a49436a58abe20ae5d1ccf2336001ccd638"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4OTA2OA==", "bodyText": "Why does one test need to run first?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515189068", "createdAt": "2020-10-30T15:36:14Z", "author": {"login": "nikkhilmuthye"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -66,12 +60,12 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n @ExtendWith({GGExtension.class, UniqueRootPathExtension.class})\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4583a49436a58abe20ae5d1ccf2336001ccd638"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDkwMDQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-521090044", "createdAt": "2020-10-30T23:55:50Z", "commit": {"oid": "33110a2f3305bc3e9d3b47c40c578baee711cd14"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo1NTo1MFrOHrjNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo1NTo1MFrOHrjNIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNzYxNw==", "bodyText": "use logger?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r515427617", "createdAt": "2020-10-30T23:55:50Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -132,6 +154,7 @@ public static EventStreamRPCConnection connectToGGCOverEventStreamIPC(SocketOpti\n         try (EventLoopGroup elGroup = new EventLoopGroup(1); ClientBootstrap clientBootstrap = new ClientBootstrap(elGroup, null)) {\n \n             String ipcServerSocketPath = kernel.getContext().get(IPCEventStreamService.class).getIpcServerSocketAbsolutePath();\n+            System.out.println(\"IPc server socket path is \" + ipcServerSocketPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33110a2f3305bc3e9d3b47c40c578baee711cd14"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33110a2f3305bc3e9d3b47c40c578baee711cd14", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/33110a2f3305bc3e9d3b47c40c578baee711cd14", "committedDate": "2020-10-30T19:13:48Z", "message": "Merge branch 'master' into integTestOnNewIpc"}, "afterCommit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3caf54fe64d20614013d4acb12cf50e18cc7211b", "committedDate": "2020-11-03T02:58:15Z", "message": "Fixing a test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTY0MDU1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-522164055", "createdAt": "2020-11-03T02:59:31Z", "commit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTczMjQx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-522173241", "createdAt": "2020-11-03T03:39:55Z", "commit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzozOTo1NVrOHsfU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMzo0NzowOFrOHsfbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMjY0Mw==", "bodyText": "this needs to be in a try/finally or use the auto closeable:\ntry (AutoClosable l = TestUtils.createCloseableLogListener(logListener)) {\n\nOtherwise, on failure the log listener doesn't get removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516412643", "createdAt": "2020-11-03T03:39:55Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -616,85 +632,90 @@ void GIVEN_deployment_in_progress_with_more_jobs_queued_in_cloud_WHEN_cancel_eve\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(), Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                        @Override\n+                        public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                            if (streamEvent.getPreUpdateEvent() != null) {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                                try {\n+                                    ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                                } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                                    fail(\"Caught exception while send component defer request\");\n+                                }\n+                            }\n+                        }\n+\n+                        @Override\n+                        public boolean onStreamError(Throwable error) {\n+                            logger.atError().setCause(error).log(\"Caught stream error while subscribing for component update\");\n+                            return false;\n+                        }\n+\n+                        @Override\n+                        public void onStreamClosed() {\n+\n+                        }\n+                    }));\n+\n+            CountDownLatch updateRegistered = new CountDownLatch(1);\n+            CountDownLatch deploymentCancelled = new CountDownLatch(1);\n+            Consumer<GreengrassLogMessage> logListener = m -> {\n+                if (\"register-service-update-action\".equals(m.getEventType())) {\n+                    updateRegistered.countDown();\n                 }\n-            }\n-        });\n-\n-        CountDownLatch updateRegistered = new CountDownLatch(1);\n-        CountDownLatch deploymentCancelled = new CountDownLatch(1);\n-        Consumer<GreengrassLogMessage> logListener = m -> {\n-            if (\"register-service-update-action\".equals(m.getEventType())) {\n-                updateRegistered.countDown();\n-            }\n-            if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n-                deploymentCancelled.countDown();\n-            }\n-        };\n-        Slf4jLogAdapter.addGlobalListener(logListener);\n-\n-        // Second deployment to update the service which is currently running an important task so deployment should\n-        // keep waiting for a safe time to update\n-        SetConfigurationRequest setRequest2 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n-                                        new ComponentUpdatePolicy()\n-                                                .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                                .withTimeout(120))).addPackagesEntry(\"NonDisruptableService\",\n-                        new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n-        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo.getThingName(),\n-                Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n-\n-        // Create one more deployment so that it's queued in cloud\n-        SetConfigurationRequest setRequest3 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withFailureHandlingPolicy(FailureHandlingPolicy.DO_NOTHING).withComponentUpdatePolicy(\n-                                        new ComponentUpdatePolicy()\n-                                                .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS)\n-                                                .withTimeout(120))).addPackagesEntry(\"NonDisruptableService\",\n-                        new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult3 = setAndPublishFleetConfiguration(setRequest3);\n+                if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n+                    deploymentCancelled.countDown();\n+                }\n+            };\n+            Slf4jLogAdapter.addGlobalListener(logListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxMzI5Nw==", "bodyText": "nit: put the topic in the log", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516413297", "createdAt": "2020-11-03T03:42:57Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -172,4 +195,39 @@ public static String getAuthTokeForService(Kernel kernel, String serviceName) {\n                 PRIVATE_STORE_NAMESPACE_TOPIC);\n         return  Coerce.toString(servicePrivateConfig.find(SERVICE_UNIQUE_ID_KEY));\n     }\n+\n+    public static void publishToTopicOverIpcAsBinaryMessage(GreengrassCoreIPCClient ipcClient, String topic,\n+                                                      String message) throws InterruptedException, ExecutionException, TimeoutException {\n+        PublishToTopicRequest publishToTopicRequest = new PublishToTopicRequest();\n+        publishToTopicRequest.setTopic(topic);\n+        PublishMessage publishMessage = new PublishMessage();\n+        BinaryMessage binaryMessage = new BinaryMessage();\n+        binaryMessage.setMessage(message.getBytes(StandardCharsets.UTF_8));\n+        publishMessage.setBinaryMessage(binaryMessage);\n+        publishToTopicRequest.setPublishMessage(publishMessage);\n+        ipcClient.publishToTopic(publishToTopicRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+    }\n+\n+    public static void subscribeToTopicOveripcForBinaryMessages(GreengrassCoreIPCClient ipcClient, String topic,\n+                                                    Consumer<byte[]> consumer) throws InterruptedException, ExecutionException, TimeoutException {\n+        SubscribeToTopicRequest request = new SubscribeToTopicRequest();\n+        request.setTopic(topic);\n+        ipcClient.subscribeToTopic(request, Optional.of(new StreamResponseHandler<SubscriptionResponseMessage>() {\n+            @Override\n+            public void onStreamEvent(SubscriptionResponseMessage streamEvent) {\n+                consumer.accept(streamEvent.getBinaryMessage().getMessage());\n+            }\n+\n+            @Override\n+            public boolean onStreamError(Throwable error) {\n+                logger.atError().setCause(error).log(\"Caught error while subscribing to a topic\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDA3Nw==", "bodyText": "this needs to be in a try/finally or use the auto closeable:\ntry (AutoClosable l = TestUtils.createCloseableLogListener(logListener)) {\n\nOtherwise, on failure the log listener doesn't get removed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516414077", "createdAt": "2020-11-03T03:46:12Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -485,68 +489,80 @@ void GIVEN_some_running_services_WHEN_cancel_event_received_and_kernel_is_waitin\n         IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult1.getJobId(), thingInfo.getThingName(),\n                 Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.SUCCEEDED));\n \n-        KernelIPCClientConfig nonDisruptable =\n-                getIPCConfigForService(getTestComponentNameInCloud(\"NonDisruptableService\"), kernel);\n-        IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-        Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-\n-        lifecycle.subscribeToComponentUpdate((event) -> {\n-            if (event instanceof PreComponentUpdateEvent) {\n-                try {\n-                    lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    ipcClient.disconnect();\n-                } catch (LifecycleIPCException e) {\n+        try (EventStreamRPCConnection connection = IPCTestUtils\n+                .getEventStreamRpcConnection(kernel, \"NonDisruptableService\" + testComponentSuffix)) {\n+            GreengrassCoreIPCClient ipcClient = new GreengrassCoreIPCClient(connection);\n+\n+            ipcClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                    Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+                @Override\n+                public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                    if (streamEvent.getPreUpdateEvent() != null) {\n+                        DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                        deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                        deferComponentUpdateRequest.setMessage(\"NonDisruptableService\");\n+                        try {\n+                            ipcClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty()).getResponse().get(5, TimeUnit.SECONDS);\n+                        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            fail(\"Caught exception while send component defer request\");\n+                        }\n+                    }\n                 }\n-            }\n-        });\n \n-        // Second deployment to update the service which is currently running an important task so deployment should\n-        // wait for a safe time to update\n-        SetConfigurationRequest setRequest2 =\n-                new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE)\n-                        .withDeploymentPolicies(new DeploymentPolicies()\n-                                .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n-                                .withComponentUpdatePolicy(new ComponentUpdatePolicy()\n-                                        .withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n-                        .addPackagesEntry(\"NonDisruptableService\",\n-                                new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n-        PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n+                @Override\n+                public boolean onStreamError(Throwable error) {\n+                    logger.atError().setCause(error).log(\"Caught stream error while subscribing for component update\");\n+                    return false;\n+                }\n \n-        CountDownLatch updateRegistered = new CountDownLatch(1);\n-        CountDownLatch deploymentCancelled = new CountDownLatch(1);\n-        Consumer<GreengrassLogMessage> logListener = m -> {\n-            if (\"register-service-update-action\".equals(m.getEventType())) {\n-                updateRegistered.countDown();\n-            }\n-            if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n-                deploymentCancelled.countDown();\n-            }\n-        };\n-        Slf4jLogAdapter.addGlobalListener(logListener);\n+                @Override\n+                public void onStreamClosed() {\n \n-        IotJobsUtils.waitForJobExecutionStatusToSatisfy(iotClient, publishResult2.getJobId(), thingInfo.getThingName(),\n-                Duration.ofMinutes(3), s -> s.equals(JobExecutionStatus.IN_PROGRESS));\n+                }\n+            }));\n+\n+            // Second deployment to update the service which is currently running an important task so deployment should\n+            // wait for a safe time to update\n+            SetConfigurationRequest setRequest2 = new SetConfigurationRequest().withTargetName(thingGroupName).withTargetType(THING_GROUP_TARGET_TYPE).withDeploymentPolicies(new DeploymentPolicies()\n+                    .withConfigurationValidationPolicy(new ConfigurationValidationPolicy().withTimeout(120))\n+                    .withComponentUpdatePolicy(new ComponentUpdatePolicy().withAction(ComponentUpdatePolicyAction.NOTIFY_COMPONENTS).withTimeout(120)))\n+                    .addPackagesEntry(\"NonDisruptableService\", new PackageMetaData().withRootComponent(true).withVersion(\"1.0.1\"));\n+            PublishConfigurationResult publishResult2 = setAndPublishFleetConfiguration(setRequest2);\n \n-        // Wait for the second deployment to start waiting for safe time to update and\n-        // then cancel it's corresponding job from cloud\n-        assertTrue(updateRegistered.await(60, TimeUnit.SECONDS));\n-        assertTrue(kernel.getContext().get(UpdateSystemSafelyService.class)\n-                .hasPendingUpdateAction(publishResult2.getConfigurationArn()));\n+            CountDownLatch updateRegistered = new CountDownLatch(1);\n+            CountDownLatch deploymentCancelled = new CountDownLatch(1);\n+            Consumer<GreengrassLogMessage> logListener = m -> {\n+                if (\"register-service-update-action\".equals(m.getEventType())) {\n+                    updateRegistered.countDown();\n+                }\n+                if (m.getMessage() != null && m.getMessage().contains(\"Deployment was cancelled\")) {\n+                    deploymentCancelled.countDown();\n+                }\n+            };\n+            Slf4jLogAdapter.addGlobalListener(logListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQxNDI1OA==", "bodyText": "nit: fix string concatenation", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#discussion_r516414258", "createdAt": "2020-11-03T03:47:08Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentServiceIntegrationTest.java", "diffHunk": "@@ -127,27 +133,46 @@ void GIVEN_device_deployment_not_started_WHEN_new_deployment_THEN_first_deployme\n             });\n             assertTrue(nonDisruptableServiceServiceLatch.await(30, TimeUnit.SECONDS));\n \n-            KernelIPCClientConfig nonDisruptable = getIPCConfigForService(\"NonDisruptableService\", kernel);\n-            IPCClientImpl ipcClient = new IPCClientImpl(nonDisruptable);\n-            Lifecycle lifecycle = new LifecycleImpl(ipcClient);\n-            lifecycle.subscribeToComponentUpdate((event) -> {\n-                if (event instanceof PreComponentUpdateEvent) {\n-                    try {\n-                        lifecycle.deferComponentUpdate(\"NonDisruptableService\", TimeUnit.SECONDS.toMillis(60));\n-                    } catch (LifecycleIPCException e) {\n+            try (EventStreamRPCConnection connection = IPCTestUtils.getEventStreamRpcConnection(kernel,\n+                    \"NonDisruptableService\")) {\n+                GreengrassCoreIPCClient ipcEventStreamClient = new GreengrassCoreIPCClient(connection);\n+                ipcEventStreamClient.subscribeToComponentUpdates(new SubscribeToComponentUpdatesRequest(),\n+                        Optional.of(new StreamResponseHandler<ComponentUpdatePolicyEvents>() {\n+\n+                    @Override\n+                    public void onStreamEvent(ComponentUpdatePolicyEvents streamEvent) {\n+                        if (streamEvent.getPreUpdateEvent() != null) {\n+                            try {\n+                                DeferComponentUpdateRequest deferComponentUpdateRequest = new DeferComponentUpdateRequest();\n+                                deferComponentUpdateRequest.setRecheckAfterMs(TimeUnit.SECONDS.toMillis(60));\n+                                deferComponentUpdateRequest.setMessage(\"Test\");\n+                                ipcEventStreamClient.deferComponentUpdate(deferComponentUpdateRequest, Optional.empty())\n+                                        .getResponse().get(DEFAULT_IPC_API_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+                            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+                            }\n+                        }\n                     }\n-                }\n-            });\n-            assertTrue(cdlDeployNonDisruptable.await(30, TimeUnit.SECONDS));\n-            submitSampleJobDocument(\n-                    DeploymentServiceIntegrationTest.class.getResource(\"FleetConfigWithRedSignalService.json\").toURI(),\n-                    \"deployRedSignal\", DeploymentType.SHADOW);\n-            submitSampleJobDocument(\n-                    DeploymentServiceIntegrationTest.class.getResource(\"FleetConfigWithNonDisruptableService.json\").toURI(),\n-                    \"redeployNonDisruptable\", DeploymentType.SHADOW);\n-            assertTrue(cdlRedeployNonDisruptable.await(15, TimeUnit.SECONDS));\n-            ipcClient.disconnect();\n-            assertTrue(cdlDeployRedSignal.await(1, TimeUnit.SECONDS));\n+\n+                    @Override\n+                    public boolean onStreamError(Throwable error) {\n+                        logger.atError().setCause(error).log(\"Caught error stream when subscribing for component \" + \"updates\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3caf54fe64d20614013d4acb12cf50e18cc7211b"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34508292cc2de8de9a9f1d182295c14416d6df33", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/34508292cc2de8de9a9f1d182295c14416d6df33", "committedDate": "2020-11-03T06:18:26Z", "message": "Migrating integration tests over new IPC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a1e2611cfc97427bb728c7c60d13388380dccb", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/72a1e2611cfc97427bb728c7c60d13388380dccb", "committedDate": "2020-11-03T06:18:26Z", "message": "Fixing a test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7473c153561f358416afaa6eeffc60da9eafe9eb", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7473c153561f358416afaa6eeffc60da9eafe9eb", "committedDate": "2020-11-03T06:18:26Z", "message": "Addressing review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79035ad72e3101f581b4a3fe1e589234a07d1ad6", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/79035ad72e3101f581b4a3fe1e589234a07d1ad6", "committedDate": "2020-11-03T05:00:35Z", "message": "Merge branch 'master' into integTestOnNewIpc"}, "afterCommit": {"oid": "795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "committedDate": "2020-11-03T06:18:27Z", "message": "Removing blocking defer requests from inside subscribe callbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "committedDate": "2020-11-03T06:40:19Z", "message": "Removing blocking defer requests from inside subscribe callbacks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/795ab9f53a820bafb86cb9c72141389f5c1ff3d5", "committedDate": "2020-11-03T06:18:27Z", "message": "Removing blocking defer requests from inside subscribe callbacks"}, "afterCommit": {"oid": "3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a376e99173f09ea3fb3363b7c49a4e4f85c58a1", "committedDate": "2020-11-03T06:40:19Z", "message": "Removing blocking defer requests from inside subscribe callbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822f8ca26f2f46da05f6a776e805b51c3dba7ea0", "author": {"user": {"login": "abanthiy", "name": null}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/822f8ca26f2f46da05f6a776e805b51c3dba7ea0", "committedDate": "2020-11-03T18:02:37Z", "message": "Merge branch 'master' into integTestOnNewIpc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzU5NzEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-522759712", "createdAt": "2020-11-03T18:13:40Z", "commit": {"oid": "822f8ca26f2f46da05f6a776e805b51c3dba7ea0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyODM4Mjg3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/589#pullrequestreview-522838287", "createdAt": "2020-11-03T20:08:04Z", "commit": {"oid": "822f8ca26f2f46da05f6a776e805b51c3dba7ea0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2869, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}