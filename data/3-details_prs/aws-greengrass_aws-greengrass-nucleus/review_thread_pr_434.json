{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzI5MjI4", "number": 434, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNTozM1rOEjPPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0Nzo1NlrOEj5ZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg1MzY5OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/fss/FleetStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNTozM1rOHRe_-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNTozM1rOHRe_-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NTczNw==", "bodyText": "nit\nremove the listener in a finally", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488095737", "createdAt": "2020-09-14T17:15:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/fss/FleetStatusServiceTest.java", "diffHunk": "@@ -97,6 +98,13 @@ void GIVEN_kernel_running_with_deployed_services_WHEN_deployment_finishes_THEN_f\n                     mqttMessagesList.get().add(m);\n                 }).build());\n \n+        CountDownLatch fssPublishLatch = new CountDownLatch(2);\n+        Slf4jLogAdapter.addGlobalListener(eslm->{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c898dba0b608ab25a888bd58b53a517ae17f144f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mzg2MjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxNzozMVrOHRfExw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0Mjo1MlrOHSg7vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Njk2Nw==", "bodyText": "Why not set the cause? Just ignore it in tests if you must", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488096967", "createdAt": "2020-09-14T17:17:31Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c898dba0b608ab25a888bd58b53a517ae17f144f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MDEyNw==", "bodyText": "Will have to ignore in a lot of tests, since this will happen as part of kernel launch. I tried that approach initially but don;t think I want to add that ignore in all the tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488290127", "createdAt": "2020-09-14T23:18:48Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Njk2Nw=="}, "originalCommit": {"oid": "c898dba0b608ab25a888bd58b53a517ae17f144f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5MzA5MA==", "bodyText": "We have some global ignores in the ExceptionLogProtector class, you can put it there. But, why is it happening everytime? Anything we can do so that it doesn't?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488293090", "createdAt": "2020-09-14T23:28:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Njk2Nw=="}, "originalCommit": {"oid": "c898dba0b608ab25a888bd58b53a517ae17f144f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NTk5Ng==", "bodyText": "I am removing it and will observe if we still get it after the fixes we have added. I identified the cause and fixed that so it should not happen.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489175996", "createdAt": "2020-09-16T05:42:52Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5Njk2Nw=="}, "originalCommit": {"oid": "c898dba0b608ab25a888bd58b53a517ae17f144f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTEwOTU0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowOTo0OVrOHRqs0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzowOTo0OVrOHRqs0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NzQ0Mw==", "bodyText": "you can change this back now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488287443", "createdAt": "2020-09-14T23:09:49Z", "author": {"login": "MikeDombo"}, "path": "pom.xml", "diffHunk": "@@ -90,7 +90,7 @@\n         <dependency>\n             <groupId>com.aws.iot</groupId>\n             <artifactId>evergreen-java-sdk</artifactId>\n-            <version>0.0.0-SNAPSHOT</version>\n+            <version>0.0.0-cached-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434183cc3a995cbb31e48ad5040c0c8b4c89ee66"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTExMDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoxMDoxOFrOHRqtYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoxMDoxOFrOHRqtYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NzU4NA==", "bodyText": "why are these needed, I don't think I see it used?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488287584", "createdAt": "2020-09-14T23:10:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/fss/FleetStatusService.java", "diffHunk": "@@ -66,7 +67,8 @@\n     private final Kernel kernel;\n     private final String architecture;\n     private final String platform;\n-    private final MqttChunkedPayloadPublisher<ComponentStatusDetails> publisher;\n+    @Getter @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434183cc3a995cbb31e48ad5040c0c8b4c89ee66"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTExMjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzoxMToxMFrOHRqujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0MjowOVrOHSg6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Nzg4Ng==", "bodyText": "with coerce you don't need to call getOnce", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488287886", "createdAt": "2020-09-14T23:11:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method\n+                    // fnishes generating the cli ipc info file. This not setting the cause here.\n+                    .kv(\"errorMessage\", e.getMessage())\n+                    .log(\"Failed to create cli_ipc_info file\");\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+        String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY).getOnce()),\n+                GREENGRASS_CLI);\n+        Map<String, String> ipcInfo = new HashMap<>();\n+        ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n+\n+        if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n+            logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n+            return;\n+        } else {\n+            //TODO: Change the URL as per the new IPC\n+            ipcInfo.put(SOCKET_URL, Coerce.toString(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434183cc3a995cbb31e48ad5040c0c8b4c89ee66"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NTczMQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489175731", "createdAt": "2020-09-16T05:42:09Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,102 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method\n+                    // fnishes generating the cli ipc info file. This not setting the cause here.\n+                    .kv(\"errorMessage\", e.getMessage())\n+                    .log(\"Failed to create cli_ipc_info file\");\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+        String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY).getOnce()),\n+                GREENGRASS_CLI);\n+        Map<String, String> ipcInfo = new HashMap<>();\n+        ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n+\n+        if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n+            logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n+            return;\n+        } else {\n+            //TODO: Change the URL as per the new IPC\n+            ipcInfo.put(SOCKET_URL, Coerce.toString(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Nzg4Ng=="}, "originalCommit": {"oid": "434183cc3a995cbb31e48ad5040c0c8b4c89ee66"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTIwNDUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/EGServiceTestUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NjozM1rOHRrj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDoxOTo0NFrOHRr-Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTUzOQ==", "bodyText": "why add lenient()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488301539", "createdAt": "2020-09-14T23:56:33Z", "author": {"login": "fahadmohammed01"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/EGServiceTestUtil.java", "diffHunk": "@@ -57,15 +56,14 @@ public Topics initializeMockedConfig() {\n         lenient().when(config.lookupTopics(eq(RUNTIME_STORE_NAMESPACE_TOPIC))).thenReturn(runtimeStoreTopic);\n         lenient().when(config.lookupTopics(eq(PRIVATE_STORE_NAMESPACE_TOPIC))).thenReturn(privateStoreTopic);\n         lenient().when(privateStoreTopic.createLeafChild(eq(STATE_TOPIC_NAME))).thenReturn(stateTopic);\n-        when(config.createLeafChild(eq(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC))).thenReturn(dependenciesTopic);\n-        when(config.getName()).thenReturn(serviceFullName);\n-        when(dependenciesTopic.dflt(Mockito.any())).thenReturn(dependenciesTopic);\n-        when(dependenciesTopic.getOnce()).thenReturn(new ArrayList<>());\n-        when(config.getContext()).thenReturn(context);\n+        lenient().when(config.createLeafChild(eq(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC))).thenReturn(dependenciesTopic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688c20186b2d5987c190a22237ac5781d9e75abc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwODMyNw==", "bodyText": "Some out of all tests in cli tests do not need these mocking, resulting in unnecessary mocks exception. Changed this to lenient to fix that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488308327", "createdAt": "2020-09-15T00:19:44Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/EGServiceTestUtil.java", "diffHunk": "@@ -57,15 +56,14 @@ public Topics initializeMockedConfig() {\n         lenient().when(config.lookupTopics(eq(RUNTIME_STORE_NAMESPACE_TOPIC))).thenReturn(runtimeStoreTopic);\n         lenient().when(config.lookupTopics(eq(PRIVATE_STORE_NAMESPACE_TOPIC))).thenReturn(privateStoreTopic);\n         lenient().when(privateStoreTopic.createLeafChild(eq(STATE_TOPIC_NAME))).thenReturn(stateTopic);\n-        when(config.createLeafChild(eq(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC))).thenReturn(dependenciesTopic);\n-        when(config.getName()).thenReturn(serviceFullName);\n-        when(dependenciesTopic.dflt(Mockito.any())).thenReturn(dependenciesTopic);\n-        when(dependenciesTopic.getOnce()).thenReturn(new ArrayList<>());\n-        when(config.getContext()).thenReturn(context);\n+        lenient().when(config.createLeafChild(eq(SERVICE_DEPENDENCIES_NAMESPACE_TOPIC))).thenReturn(dependenciesTopic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMTUzOQ=="}, "originalCommit": {"oid": "688c20186b2d5987c190a22237ac5781d9e75abc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTI5MjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthenticationHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0MDo1MlrOHRsV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0MDo1MlrOHRsV0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNDMyMQ==", "bodyText": "nit: authenticated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488314321", "createdAt": "2020-09-15T00:40:52Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthenticationHandler.java", "diffHunk": "@@ -62,6 +63,43 @@ public static void registerAuthenticationToken(EvergreenService s) {\n         }\n     }\n \n+    /**\n+     * Register an auth token for an external client which is not part of Evergreen. Only authenticate EG service can", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTMwMjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthenticationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0NjoxNVrOHRscHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo1NDozMlrOHShLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTkzMg==", "bodyText": "Seems unnecessary to call registerAuthenticationTokenForExternalClient. Maybe extract ln 86,91-96 and retry that only?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488315932", "createdAt": "2020-09-15T00:46:15Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthenticationHandler.java", "diffHunk": "@@ -62,6 +63,43 @@ public static void registerAuthenticationToken(EvergreenService s) {\n         }\n     }\n \n+    /**\n+     * Register an auth token for an external client which is not part of Evergreen. Only authenticate EG service can\n+     * register such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param clientIdentifier The identifier to identify the client for which the token is being requested\n+     * @return Auth token.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public String registerAuthenticationTokenForExternalClient(String requestingAuthToken,\n+                                                               String clientIdentifier)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+\n+        String authenticationToken = Utils.generateRandomString(16).toUpperCase();\n+        Topics tokenTopics = config.lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY);\n+        tokenTopics.withParentNeedsToKnow(false);\n+\n+        Topic tokenTopic = tokenTopics.createLeafChild(authenticationToken);\n+\n+        // If the authentication token was already registered, that's an issue, so we will retry\n+        // generating a new token in that case\n+        if (tokenTopic.getOnce() == null) {\n+            tokenTopic.withValue(clientIdentifier);\n+            return authenticationToken;\n+        } else {\n+            return registerAuthenticationTokenForExternalClient(requestingAuthToken, clientIdentifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3OTk2Mg==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489179962", "createdAt": "2020-09-16T05:54:32Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/AuthenticationHandler.java", "diffHunk": "@@ -62,6 +63,43 @@ public static void registerAuthenticationToken(EvergreenService s) {\n         }\n     }\n \n+    /**\n+     * Register an auth token for an external client which is not part of Evergreen. Only authenticate EG service can\n+     * register such a token.\n+     * @param requestingAuthToken Auth token of the requesting service\n+     * @param clientIdentifier The identifier to identify the client for which the token is being requested\n+     * @return Auth token.\n+     * @throws UnauthenticatedException thrown when the requestAuthToken is invalid\n+     */\n+    public String registerAuthenticationTokenForExternalClient(String requestingAuthToken,\n+                                                               String clientIdentifier)\n+            throws UnauthenticatedException {\n+        String authenticatedService = doAuthentication(requestingAuthToken);\n+        // Making it available only for CLIService right now. If it needs to be extended, requesting service can be\n+        // taken as a parameter\n+        if (!authenticatedService.equals(CLIService.CLI_SERVICE)) {\n+            logger.atError().kv(\"Requesting service name\", CLIService.CLI_SERVICE)\n+                    .log(\"Invalid requesting auth token for service\");\n+            throw new UnauthenticatedException(\"Invalid requesting auth token for service\");\n+        }\n+\n+        String authenticationToken = Utils.generateRandomString(16).toUpperCase();\n+        Topics tokenTopics = config.lookupTopics(EvergreenService.SERVICES_NAMESPACE_TOPIC,\n+                AUTHENTICATION_TOKEN_LOOKUP_KEY);\n+        tokenTopics.withParentNeedsToKnow(false);\n+\n+        Topic tokenTopic = tokenTopics.createLeafChild(authenticationToken);\n+\n+        // If the authentication token was already registered, that's an issue, so we will retry\n+        // generating a new token in that case\n+        if (tokenTopic.getOnce() == null) {\n+            tokenTopic.withValue(clientIdentifier);\n+            return authenticationToken;\n+        } else {\n+            return registerAuthenticationTokenForExternalClient(requestingAuthToken, clientIdentifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNTkzMg=="}, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTMwOTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0OTozOFrOHRsfvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo0OTozOFrOHRsfvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjg2Mw==", "bodyText": "Is this message correct? Why not moving this check to the beginning before ipcInfo is created?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488316863", "createdAt": "2020-09-15T00:49:38Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,101 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method\n+                    // fnishes generating the cli ipc info file. This not setting the cause here.\n+                    .kv(\"errorMessage\", e.getMessage())\n+                    .log(\"Failed to create cli_ipc_info file\");\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+        String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n+                GREENGRASS_CLI);\n+        Map<String, String> ipcInfo = new HashMap<>();\n+        ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n+\n+        if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n+            logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTMxMDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDo1MDoyNVrOHRsgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0MjowMFrOHSg6fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNzA3MQ==", "bodyText": "Is this file for CLI to read? Why does CLIService needs to be a service?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r488317071", "createdAt": "2020-09-15T00:50:25Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,101 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method\n+                    // fnishes generating the cli ipc info file. This not setting the cause here.\n+                    .kv(\"errorMessage\", e.getMessage())\n+                    .log(\"Failed to create cli_ipc_info file\");\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+        String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n+                GREENGRASS_CLI);\n+        Map<String, String> ipcInfo = new HashMap<>();\n+        ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n+\n+        if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n+            logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n+            return;\n+        } else {\n+            //TODO: Change the URL as per the new IPC\n+            ipcInfo.put(SOCKET_URL, Coerce.toString(\n+                    config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n+        }\n+\n+        Path filePath = kernel.getRootPath().resolve(CLI_IPC_INFO_FILENAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NTY3OQ==", "bodyText": "Yes this file is for CLI to read. CLIService needs to be a service as it needs to setup the handlers for CLI APIs and will also install greengrass-cli on the device.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489175679", "createdAt": "2020-09-16T05:42:00Z", "author": {"login": "abanthiy"}, "path": "src/main/java/com/aws/iot/evergreen/ipc/modules/CLIService.java", "diffHunk": "@@ -60,42 +78,101 @@\n     @Inject\n     private DeploymentStatusKeeper deploymentStatusKeeper;\n \n+    @Inject\n+    private AuthenticationHandler authenticationHandler;\n+\n+    @Inject\n+    private Kernel kernel;\n+\n     public CLIService(Topics topics) {\n         super(topics);\n     }\n \n     /**\n      * Constructor for unit testing.\n      * @param topics Service config\n+     * @param privateConfig Private config for the service\n      * @param router {@link IPCRouter}\n      * @param agent {@link CLIServiceAgent}\n      * @param deploymentStatusKeeper {@link DeploymentStatusKeeper}\n+     * @param authenticationHandler {@link AuthenticationHandler}\n+     * @param kernel {@link Kernel}\n      */\n-    public CLIService(Topics topics, IPCRouter router, CLIServiceAgent agent,\n-                      DeploymentStatusKeeper deploymentStatusKeeper) {\n-        super(topics);\n+    public CLIService(Topics topics, Topics privateConfig, IPCRouter router, CLIServiceAgent agent,\n+                      DeploymentStatusKeeper deploymentStatusKeeper, AuthenticationHandler authenticationHandler,\n+                      Kernel kernel) {\n+        super(topics, privateConfig);\n         this.router = router;\n         this.agent = agent;\n         this.deploymentStatusKeeper = deploymentStatusKeeper;\n+        this.authenticationHandler = authenticationHandler;\n+        this.kernel = kernel;\n     }\n \n     @Override\n     public void postInject() {\n         BuiltInServiceDestinationCode destination = BuiltInServiceDestinationCode.CLI;\n         super.postInject();\n+        // Does not happen for built-in/plugin services so doing explicitly\n+        AuthenticationHandler.registerAuthenticationToken(this);\n         try {\n             router.registerServiceCallback(destination.getValue(), this::handleMessage);\n             logger.atInfo().setEventType(\"ipc-register-request-handler\").addKeyValue(\"destination\", destination.name())\n                     .log();\n             deploymentStatusKeeper.registerDeploymentStatusConsumer(Deployment.DeploymentType.LOCAL,\n                     this::deploymentStatusChanged, CLIService.class.getName());\n+\n         } catch (IPCException e) {\n             logger.atError().setEventType(\"ipc-register-request-handler-error\").setCause(e)\n                     .addKeyValue(\"destination\", destination.name())\n                     .log(\"Failed to register service callback to destination\");\n         }\n     }\n \n+    @Override\n+    protected void startup() {\n+        try {\n+            generateCliIpcInfo();\n+            reportState(State.RUNNING);\n+        } catch (IOException | UnauthenticatedException e) {\n+            logger.atError().setEventType(\"cli-ipc-info-generation-error\")\n+                    // CloseByInterrupt exception occurs in tests if the threads finish earlier than this method\n+                    // fnishes generating the cli ipc info file. This not setting the cause here.\n+                    .kv(\"errorMessage\", e.getMessage())\n+                    .log(\"Failed to create cli_ipc_info file\");\n+        }\n+    }\n+\n+    @SuppressFBWarnings(value = {\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\", \"RV_RETURN_VALUE_IGNORED\"},\n+            justification = \"File is created in the same method\")\n+    @SuppressWarnings(\"PMD.PrematureDeclaration\")\n+    private void generateCliIpcInfo() throws UnauthenticatedException, IOException {\n+        String cliAuthToken = authenticationHandler.registerAuthenticationTokenForExternalClient(\n+                Coerce.toString(getPrivateConfig().find(SERVICE_UNIQUE_ID_KEY)),\n+                GREENGRASS_CLI);\n+        Map<String, String> ipcInfo = new HashMap<>();\n+        ipcInfo.put(CLI_AUTH_TOKEN, cliAuthToken);\n+\n+        if (config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME) == null) {\n+            logger.atWarn().log(\"Did not find IPC socket URL in the config. Not creating the cli ipc info file\");\n+            return;\n+        } else {\n+            //TODO: Change the URL as per the new IPC\n+            ipcInfo.put(SOCKET_URL, Coerce.toString(\n+                    config.getRoot().find(SETENV_CONFIG_NAMESPACE, KERNEL_URI_ENV_VARIABLE_NAME)));\n+        }\n+\n+        Path filePath = kernel.getRootPath().resolve(CLI_IPC_INFO_FILENAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNzA3MQ=="}, "originalCommit": {"oid": "0491d27ab1331b63cc0830cecca2b0adea2fd418"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDc1NjAyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCCliTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0NjowOFrOHSg_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjowNToyNVrOHSha9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzA2MA==", "bodyText": "any reason why we are only getting this for CLI and none of the other IPC tests?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489177060", "createdAt": "2020-09-16T05:46:08Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCCliTest.java", "diffHunk": "@@ -75,25 +83,41 @@\n class IPCCliTest {\n \n     private static Kernel kernel;\n+    private static int LOCAL_DEPLOYMENT_TIMEOUT_MINUTES = 5;\n+    private static int SERVICE_STATE_CHECK_TIMEOUT_MINUTES = 5;\n     private IPCClient client;\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     @BeforeEach\n-    void beforeEach(ExtensionContext context) throws InterruptedException {\n+    void beforeEach(ExtensionContext context) throws InterruptedException, IOException {\n+        ignoreExceptionOfType(context, ConnectException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4Mzk5MA==", "bodyText": "Its because of reading from the file. File gets overwritten in every test but test does not read the updated file somehow. Added new kernel root for each test now.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489183990", "createdAt": "2020-09-16T06:05:25Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCCliTest.java", "diffHunk": "@@ -75,25 +83,41 @@\n class IPCCliTest {\n \n     private static Kernel kernel;\n+    private static int LOCAL_DEPLOYMENT_TIMEOUT_MINUTES = 5;\n+    private static int SERVICE_STATE_CHECK_TIMEOUT_MINUTES = 5;\n     private IPCClient client;\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     @BeforeEach\n-    void beforeEach(ExtensionContext context) throws InterruptedException {\n+    void beforeEach(ExtensionContext context) throws InterruptedException, IOException {\n+        ignoreExceptionOfType(context, ConnectException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzA2MA=="}, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDc1NjQ4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCCliTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0NjoyMlrOHShAJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0NjoyMlrOHShAJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzEyNg==", "bodyText": "await", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489177126", "createdAt": "2020-09-16T05:46:22Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCCliTest.java", "diffHunk": "@@ -75,25 +83,41 @@\n class IPCCliTest {\n \n     private static Kernel kernel;\n+    private static int LOCAL_DEPLOYMENT_TIMEOUT_MINUTES = 5;\n+    private static int SERVICE_STATE_CHECK_TIMEOUT_MINUTES = 5;\n     private IPCClient client;\n+    private static ObjectMapper OBJECT_MAPPER =\n+            new ObjectMapper().configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false)\n+                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n     @BeforeEach\n-    void beforeEach(ExtensionContext context) throws InterruptedException {\n+    void beforeEach(ExtensionContext context) throws InterruptedException, IOException {\n+        ignoreExceptionOfType(context, ConnectException.class);\n         ignoreExceptionWithMessage(context, \"Connection reset by peer\");\n         // Ignore if IPC can't send us more lifecycle updates because the test is already done.\n         ignoreExceptionUltimateCauseWithMessage(context, \"Channel not found for given connection context\");\n         kernel = prepareKernelFromConfigFile(\"ipc.yaml\", TEST_SERVICE_NAME, this.getClass());\n+        //wait for CLI Service to be up and running\n+        CountDownLatch cliServiceLatch = new CountDownLatch(1);\n+        kernel.getContext().addGlobalStateChangeListener((s, o, n)->{\n+            if (s.getName().equals(CLI_SERVICE) && n == State.RUNNING) {\n+                cliServiceLatch.countDown();\n+            }\n+        });\n+        cliServiceLatch.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDc2MDAwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0Nzo1NlrOHShCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoxNDowOVrOHS4Xpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzY2Nw==", "bodyText": "Please use @TempDir which will cleanup after the test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489177667", "createdAt": "2020-09-16T05:47:56Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -38,9 +40,10 @@ public static KernelIPCClientConfig getIPCConfigForService(String serviceName, K\n                         .getOnce())).build();\n     }\n \n-    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException {\n+    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException, IOException {\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", testClass.getResource(configFile).toString());\n+        String rootDirectoryPath = Files.createTempDirectory(\"ipcCliTest\").toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE5NTQ5MQ==", "bodyText": "I want to generate new directory for every test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489195491", "createdAt": "2020-09-16T06:34:31Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -38,9 +40,10 @@ public static KernelIPCClientConfig getIPCConfigForService(String serviceName, K\n                         .getOnce())).build();\n     }\n \n-    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException {\n+    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException, IOException {\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", testClass.getResource(configFile).toString());\n+        String rootDirectoryPath = Files.createTempDirectory(\"ipcCliTest\").toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzY2Nw=="}, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0MDQ2MQ==", "bodyText": "TempDir on a non-static field will make a new one for each test", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489540461", "createdAt": "2020-09-16T15:45:05Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -38,9 +40,10 @@ public static KernelIPCClientConfig getIPCConfigForService(String serviceName, K\n                         .getOnce())).build();\n     }\n \n-    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException {\n+    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException, IOException {\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", testClass.getResource(configFile).toString());\n+        String rootDirectoryPath = Files.createTempDirectory(\"ipcCliTest\").toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzY2Nw=="}, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1OTk3NA==", "bodyText": "Not needed anymore", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/434#discussion_r489559974", "createdAt": "2020-09-16T16:14:09Z", "author": {"login": "abanthiy"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCTestUtils.java", "diffHunk": "@@ -38,9 +40,10 @@ public static KernelIPCClientConfig getIPCConfigForService(String serviceName, K\n                         .getOnce())).build();\n     }\n \n-    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException {\n+    public static Kernel prepareKernelFromConfigFile(String configFile, String serviceName, Class testClass) throws InterruptedException, IOException {\n         Kernel kernel = new Kernel();\n-        kernel.parseArgs(\"-i\", testClass.getResource(configFile).toString());\n+        String rootDirectoryPath = Files.createTempDirectory(\"ipcCliTest\").toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzY2Nw=="}, "originalCommit": {"oid": "bb33ab2f56d1ebf8e9376efe6560fdb5dc07c03e"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 790, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}