{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTc1NDM1", "number": 567, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Nzo1OFrOExX2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjo0OTozM1rOEylVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA2NDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Nzo1OFrOHneQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1Nzo1OFrOHneQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjIzNQ==", "bodyText": "Configuration currently updating, will wait for the update to complete", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511152235", "createdAt": "2020-10-23T20:57:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "diffHunk": "@@ -184,6 +185,19 @@ public GetConfigurationResponse getConfig(GetConfigurationRequest request, Conne\n         log.atDebug().kv(CONTEXT_LOGGING_KEY, context).log(\"Config IPC get config request\");\n         String serviceName = request.getComponentName() == null ? context.getServiceName() : request.getComponentName();\n         Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+        if (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+            log.info(\"Config is under update. Wait until config updated\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA2NzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMDo1OTowNlrOHneSKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTo0MjoxNFrOHnfOVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjY4Mg==", "bodyText": "if interrupted, the thread should quit.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511152682", "createdAt": "2020-10-23T20:59:06Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "diffHunk": "@@ -184,6 +185,19 @@ public GetConfigurationResponse getConfig(GetConfigurationRequest request, Conne\n         log.atDebug().kv(CONTEXT_LOGGING_KEY, context).log(\"Config IPC get config request\");\n         String serviceName = request.getComponentName() == null ? context.getServiceName() : request.getComponentName();\n         Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+        if (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+            log.info(\"Config is under update. Wait until config updated\");\n+            synchronized (DeploymentService.CONFIG_UPDATE_NOTIFIER) {\n+                while (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+                    try {\n+                        DeploymentService.CONFIG_UPDATE_NOTIFIER.wait(5000);\n+                    } catch (InterruptedException e) {\n+                        continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1Nzg0Nw==", "bodyText": "This really shouldn't happen, since it's in the middle of kernel responding to service request. It can only be interrupted when kernel is shutdown", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511157847", "createdAt": "2020-10-23T21:13:10Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "diffHunk": "@@ -184,6 +185,19 @@ public GetConfigurationResponse getConfig(GetConfigurationRequest request, Conne\n         log.atDebug().kv(CONTEXT_LOGGING_KEY, context).log(\"Config IPC get config request\");\n         String serviceName = request.getComponentName() == null ? context.getServiceName() : request.getComponentName();\n         Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+        if (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+            log.info(\"Config is under update. Wait until config updated\");\n+            synchronized (DeploymentService.CONFIG_UPDATE_NOTIFIER) {\n+                while (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+                    try {\n+                        DeploymentService.CONFIG_UPDATE_NOTIFIER.wait(5000);\n+                    } catch (InterruptedException e) {\n+                        continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjY4Mg=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1ODMyMg==", "bodyText": "Yes, so you should quit. You shouldn't keep the thread alive.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511158322", "createdAt": "2020-10-23T21:14:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "diffHunk": "@@ -184,6 +185,19 @@ public GetConfigurationResponse getConfig(GetConfigurationRequest request, Conne\n         log.atDebug().kv(CONTEXT_LOGGING_KEY, context).log(\"Config IPC get config request\");\n         String serviceName = request.getComponentName() == null ? context.getServiceName() : request.getComponentName();\n         Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+        if (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+            log.info(\"Config is under update. Wait until config updated\");\n+            synchronized (DeploymentService.CONFIG_UPDATE_NOTIFIER) {\n+                while (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+                    try {\n+                        DeploymentService.CONFIG_UPDATE_NOTIFIER.wait(5000);\n+                    } catch (InterruptedException e) {\n+                        continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjY4Mg=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2ODA4NA==", "bodyText": "Updated to return InternalError", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511168084", "createdAt": "2020-10-23T21:42:14Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/builtin/services/configstore/ConfigStoreIPCAgent.java", "diffHunk": "@@ -184,6 +185,19 @@ public GetConfigurationResponse getConfig(GetConfigurationRequest request, Conne\n         log.atDebug().kv(CONTEXT_LOGGING_KEY, context).log(\"Config IPC get config request\");\n         String serviceName = request.getComponentName() == null ? context.getServiceName() : request.getComponentName();\n         Topics serviceTopics = kernel.findServiceTopic(serviceName);\n+        if (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+            log.info(\"Config is under update. Wait until config updated\");\n+            synchronized (DeploymentService.CONFIG_UPDATE_NOTIFIER) {\n+                while (DeploymentService.CONFIG_UNDER_UPDATE.get()) {\n+                    try {\n+                        DeploymentService.CONFIG_UPDATE_NOTIFIER.wait(5000);\n+                    } catch (InterruptedException e) {\n+                        continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjY4Mg=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA3MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMDoyNVrOHneUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjoxNzoxMFrOHnf4Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw==", "bodyText": "do you think it is possible to have a more general solution? We ran into an issue with lambda because the updateMap causes lots of update callbacks that run before all the changes have actually gone through, so we read partial data.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511153207", "createdAt": "2020-10-23T21:00:25Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MDU2Mg==", "bodyText": "I think more general solution need some design. There are requirement of listening on specific config topic update(which we are supporting now), but there are also requirement of getting full config during deployment at once (eg: lambda) .  I think with the CR, getConfig() IPC request will return the updated config . Will that help lambda use case?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511160562", "createdAt": "2020-10-23T21:20:39Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MTIyMw==", "bodyText": "No, lambda is in the kernel, so it doesn't help.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511161223", "createdAt": "2020-10-23T21:22:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2NzYyNA==", "bodyText": "Do you think moving this global var into Context and have config.getConfig() block on it will be better? I think it's a little risky at this point but probably that can help you.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511167624", "createdAt": "2020-10-23T21:40:56Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2ODQ4OQ==", "bodyText": "No, ideally updateMap wouldn't trigger any updates until it is 100% done. That's my ideal fix for lambda.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511168489", "createdAt": "2020-10-23T21:43:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODM3MA==", "bodyText": "Then it need change in Topics class. I'd prefer postpone that optimization for now, it's too risky", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511178370", "createdAt": "2020-10-23T22:15:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE3ODc4Mg==", "bodyText": "Yes, agree", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511178782", "createdAt": "2020-10-23T22:17:10Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/activator/DefaultActivator.java", "diffHunk": "@@ -72,11 +73,17 @@ public void activate(Map<String, Object> newConfig, Deployment deployment,\n         // when deployment adds a new dependency (component B) to component A\n         // the config for component B has to be merged in before externalDependenciesTopic of component A trigger\n         // executing mergeMap using publish thread ensures this\n-        kernel.getContext().runOnPublishQueueAndWait(() ->\n-                kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR));\n+        kernel.getContext().runOnPublishQueueAndWait(() -> {\n+            DeploymentService.CONFIG_UNDER_UPDATE.set(true);\n+            kernel.getConfig().updateMap(deploymentDocument.getTimestamp(), newConfig, DEPLOYMENT_MERGE_BEHAVIOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzIwNw=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjA3MjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMTowMTowN1rOHneVRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMToxMTozMlrOHnekGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzQ3OQ==", "bodyText": "why only these states?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511153479", "createdAt": "2020-10-23T21:01:07Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,17 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && DeploymentService.CONFIG_UNDER_UPDATE.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1NzI3Mw==", "bodyText": "If service need to stop due to the update, we don't want to suspend stopping service", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r511157273", "createdAt": "2020-10-23T21:11:32Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,17 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && DeploymentService.CONFIG_UNDER_UPDATE.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MzQ3OQ=="}, "originalCommit": {"oid": "4b4565f861032e082e2a2f5bad9335a2ab80b88b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDA5NDM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDozNDoyM1rOHonP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDo0NTozM1rOHonbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0ODExNA==", "bodyText": "it isn't clear to me that this is the right place to stop. The requests have already been added to the queue, shouldn't it prevent the requestRestart or whatever at that point instead of here when we are going to do the transition?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r512348114", "createdAt": "2020-10-27T00:34:23Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,18 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            Configuration kernelConfig = greengrassService.getContext().get(Configuration.class);\n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && kernelConfig.configUnderUpdate.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c891d96b259127d5793d05c248c944c6ecd6087"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0OTEzMw==", "bodyText": "That will lead to code duplication. we don't want to halt the process of service being stopped, but want to halt the starting/install process when a service is being started/restarted/installed/re-installed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r512349133", "createdAt": "2020-10-27T00:38:20Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,18 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            Configuration kernelConfig = greengrassService.getContext().get(Configuration.class);\n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && kernelConfig.configUnderUpdate.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0ODExNA=="}, "originalCommit": {"oid": "7c891d96b259127d5793d05c248c944c6ecd6087"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0OTk0MQ==", "bodyText": "Do we de-dupe restart requests etc?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r512349941", "createdAt": "2020-10-27T00:41:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,18 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            Configuration kernelConfig = greengrassService.getContext().get(Configuration.class);\n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && kernelConfig.configUnderUpdate.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0ODExNA=="}, "originalCommit": {"oid": "7c891d96b259127d5793d05c248c944c6ecd6087"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM1MTA0OQ==", "bodyText": "Yes. but restart requests are translated to desiredStates in the queue, and it's lifecycle thread dequeue the desiredStates and perform state transition", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r512351049", "createdAt": "2020-10-27T00:45:33Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/Lifecycle.java", "diffHunk": "@@ -281,6 +282,18 @@ private void startStateTransition() throws InterruptedException {\n             State current = getState();\n             logger.atDebug(\"service-state-transition-start\").log();\n \n+            Configuration kernelConfig = greengrassService.getContext().get(Configuration.class);\n+            // postpone start/install when configuration is under update.\n+            if ((current == State.NEW || current == State.INSTALLED) && kernelConfig.configUnderUpdate.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0ODExNA=="}, "originalCommit": {"oid": "7c891d96b259127d5793d05c248c944c6ecd6087"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDc1OTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/Configuration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjo0OTozM1rOHpT0dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzoyOTowM1rOHpUoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3ODM5MQ==", "bodyText": "Why are these public?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r513078391", "createdAt": "2020-10-27T22:49:33Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/config/Configuration.java", "diffHunk": "@@ -23,13 +23,17 @@\n import java.nio.file.Paths;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import javax.annotation.Nullable;\n import javax.inject.Inject;\n \n import static com.aws.greengrass.util.Utils.extension;\n \n public class Configuration {\n+    public final AtomicBoolean configUnderUpdate = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b09c7e9bbab79ff842569c71ac69c3fc0392bdf2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MTcyMg==", "bodyText": "So far this need to be accessed by Lifecycle and IPCServerAgent. I can make it private and wrap it with access method.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/567#discussion_r513091722", "createdAt": "2020-10-27T23:29:03Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/greengrass/config/Configuration.java", "diffHunk": "@@ -23,13 +23,17 @@\n import java.nio.file.Paths;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Consumer;\n import javax.annotation.Nullable;\n import javax.inject.Inject;\n \n import static com.aws.greengrass.util.Utils.extension;\n \n public class Configuration {\n+    public final AtomicBoolean configUnderUpdate = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3ODM5MQ=="}, "originalCommit": {"oid": "b09c7e9bbab79ff842569c71ac69c3fc0392bdf2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 393, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}