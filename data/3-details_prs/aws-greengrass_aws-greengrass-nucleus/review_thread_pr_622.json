{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NTg3NTA1", "number": 622, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxNzozMVrOE2K6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMToxNTozMFrOE3ezYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjM3NDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoxNzozMVrOHu2o0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTozNDozOFrOHu-Qcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ==", "bodyText": "Can we get region from the DeviceConfiguration?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518891731", "createdAt": "2020-11-06T17:17:31Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+\n     private IamSdkClientFactory() {\n     }\n \n+    public static IamClient getIamClient() {\n+        return getIamClient(DEFAULT_AWS_REGION);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0MzA2OA==", "bodyText": "I check the usage of both IamClient and IotClient, it was initialized in the GreengrassSetup.java. https://github.com/aws/aws-greengrass-nucleus/blob/master/src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java#L233\nUsing awsRegion as String seems more easier and consistent.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518943068", "createdAt": "2020-11-06T18:55:14Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+\n     private IamSdkClientFactory() {\n     }\n \n+    public static IamClient getIamClient() {\n+        return getIamClient(DEFAULT_AWS_REGION);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ=="}, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNjU2Mg==", "bodyText": "getIamClient(String region) is fine. But getIamClient() doesn't work if the GGC is in a non-aws partition. You can either remove it or have it use region from DeviceConfiguration", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519016562", "createdAt": "2020-11-06T21:34:38Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+\n     private IamSdkClientFactory() {\n     }\n \n+    public static IamClient getIamClient() {\n+        return getIamClient(DEFAULT_AWS_REGION);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5MTczMQ=="}, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQwNDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNTo1N1rOHu27ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNTo1N1rOHu27ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NjQ5MA==", "bodyText": "This will require us to make a code change every time a region is added. Instead, we can ask the SDK for the partition a region is in, and then map that to a global region (e.g. \"aws\" -> AWS_GLOBAL, \"aws-cn\" -> AWS_CN_GLOBAL, etc). That way we only need to update the code to support new partitions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518896490", "createdAt": "2020-11-06T17:25:57Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n+    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n+    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n+    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n+    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n+            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n+\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n+    );\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n+    );\n+\n+    static {\n+        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);\n+\n+        REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT.put(\"cn-north-1\",\n+                CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT);\n+\n+        GLOBAL_REGION_CONVERTER.put(\"cn-north-1\", Region.AWS_CN_GLOBAL);\n+        GLOBAL_REGION_CONVERTER.put(\"us-gov-east-1\", Region.AWS_US_GOV_GLOBAL);\n+        GLOBAL_REGION_CONVERTER.put(\"us-gov-west-1\", Region.AWS_US_GOV_GLOBAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQwOTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNzowOVrOHu2-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNzowOVrOHu2-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NzIwMg==", "bodyText": "Nit: name this RegionsUtils instead?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518897202", "createdAt": "2020-11-06T17:27:09Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQzMDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozMzowMVrOHu3K6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozMzowMVrOHu3K6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMDQ1OA==", "bodyText": "Get rid of this map, we don't need to pre-compute these strings.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518900458", "createdAt": "2020-11-06T17:33:01Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/EndpointGenerator.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class EndpointGenerator {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com\";\n+    private static final String CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.amazonaws.com.cn\";\n+    private static Map<String, String> REGION_TO_IOT_CONTROL_PLANE_ENDPOINT = new HashMap<>();\n+    private static Map<String, Region> GLOBAL_REGION_CONVERTER = new HashMap<>();\n+    private static Map<String, Map<IotSdkClientFactory.EnvironmentStage, String>>\n+            REGION_TO_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT = new HashMap<>();\n+\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com:8443/greengrass\"\n+    );\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            CN_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.amazonaws.com.cn:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.amazonaws.com.cn:8443/greengrass\"\n+    );\n+\n+    static {\n+        REGION_TO_IOT_CONTROL_PLANE_ENDPOINT.put(\"cn-north-1\", CN_IOT_CONTROL_PLANE_ENDPOINT_FORMAT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjQ0MDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozNTo1OFrOHu3RNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzozNTo1OFrOHu3RNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkwMjA3MQ==", "bodyText": "I don't think this is useful", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r518902071", "createdAt": "2020-11-06T17:35:58Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/IamSdkClientFactory.java", "diffHunk": "@@ -35,17 +35,23 @@\n             RetryPolicy.builder().numRetries(5).backoffStrategy(BackoffStrategy.defaultThrottlingStrategy())\n                     .retryCondition(retryCondition).build();\n \n+    private static final String DEFAULT_AWS_REGION = \"us-east-1\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbfdeaa4142527f42e891c450257ff91635ff4e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzE1ODY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToyOTo0NlrOHu-Ijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToyOTo0NlrOHu-Ijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNDU0Mg==", "bodyText": "Nit: shorten this to getGreengrassServiceEndpoint", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519014542", "createdAt": "2020-11-06T21:29:46Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzE1ODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToyOTo1NVrOHu-Ivg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMToyOTo1NVrOHu-Ivg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNDU5MA==", "bodyText": "nit: same thing here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519014590", "createdAt": "2020-11-06T21:29:55Z", "author": {"login": "jbutler"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpointByRegionAndStage(String awsRegion,\n+                                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpointByRegionAndStage(Region awsRegion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e89fa5fd87c354ed5e918abdfa0266e42c491c4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MzU3MjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwMToxNDo1M1rOHvB1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTowNDoyM1rOHw19Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTE5MA==", "bodyText": "rename to getPartitionFromRegion", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r519075190", "createdAt": "2020-11-07T01:14:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getGlobalRegion(String awsRegion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4e797cf26fb894711a0021ddc54e4eaf5e7842"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk3NzczMA==", "bodyText": "Sorry, I change this function name back to getGlobalRegion. getPartitionFromRegion is kind of confusing and make us  think it will return the partition name for a given region.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520977730", "createdAt": "2020-11-11T01:04:23Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getGlobalRegion(String awsRegion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3NTE5MA=="}, "originalCommit": {"oid": "eb4e797cf26fb894711a0021ddc54e4eaf5e7842"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTc1MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMjo1OTowOFrOHwy7fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDowMjo1MFrOHw0YaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg==", "bodyText": "return Region.of(Region.of(awsRegion).metadata().id()) instead of hardcoding these 3 partitions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520928126", "createdAt": "2020-11-10T22:59:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODg4Mw==", "bodyText": "Also, why not use metadata().partition().id() isn't that exactly what we want?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520928883", "createdAt": "2020-11-10T23:00:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzMDIzNg==", "bodyText": "Yes, I will change that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520930236", "createdAt": "2020-11-10T23:04:19Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MTUzNw==", "bodyText": "The id() is not global region, they are aws-cn, aws-us-gov, aws. I will keep this part.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520941537", "createdAt": "2020-11-10T23:33:51Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0MzM3Mw==", "bodyText": "Your solution doesn't work.\nRegion.of(\"us-east-1\").metadata().id() == \"us-east-1\"\nWhich is NOT the partition.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520943373", "createdAt": "2020-11-10T23:38:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk0OTU1MA==", "bodyText": "That should be Region.of(awsRegion).metadata().partition().id(); I did not add the partition(). Sorry about that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520949550", "createdAt": "2020-11-10T23:56:14Z", "author": {"login": "awszztt"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MDE1NA==", "bodyText": "That's not correct either, sorry.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520950154", "createdAt": "2020-11-10T23:57:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk1MTkxMw==", "bodyText": "Region.of(Region.CN_NORTH_1.metadata().partition().id()+\"-global\") == \"aws-cn-global\"\n\nSomething like this does actually work, although it is a bit hacky with the \"-global\" it is the only way I have found to do it correctly.\nUnless you know better @jbutler", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520951913", "createdAt": "2020-11-11T00:02:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/RegionUtils.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import software.amazon.awssdk.regions.Region;\n+import software.amazon.awssdk.utils.ImmutableMap;\n+\n+import java.util.Map;\n+\n+public final class RegionUtils {\n+    private static final String DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT = \"https://%s.%s.iot.%s\";\n+    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n+            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n+            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n+            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n+    );\n+    private static final String CN_PARTITION_ID = \"aws-cn\";\n+    private static final String US_GOV_PARTITION_ID = \"aws-us-gov\";\n+\n+    private RegionUtils() {\n+    }\n+\n+    /**\n+     * Get Greengrass ServiceEndpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Greengrass ServiceEndpoint\n+     */\n+    public static String getGreengrassServiceEndpoint(String awsRegion,\n+                                                      IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = Region.of(awsRegion).metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT.get(stage), awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get Iot Control Plane Endpoint by region and stage.\n+     * @param awsRegion aws region\n+     * @param stage environment stage\n+     * @return Iot Control Plane Endpoint\n+     */\n+    public static String getIotControlPlaneEndpoint(Region awsRegion,\n+                                                    IotSdkClientFactory.EnvironmentStage stage) {\n+        String dnsSuffix = awsRegion.metadata().partition().dnsSuffix();\n+        return String.format(DEFAULT_IOT_CONTROL_PLANE_ENDPOINT_FORMAT, stage.value, awsRegion, dnsSuffix);\n+    }\n+\n+    /**\n+     * Get global region based on the region partition ID.\n+     * @param awsRegion aws region\n+     * @return Region\n+     */\n+    public static Region getPartitionFromRegion(String awsRegion) {\n+        String partitionId = Region.of(awsRegion).metadata().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkyODEyNg=="}, "originalCommit": {"oid": "3dcfba2165fd44b359467bd8aa9fc9cdf82e9d9f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjExODEwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": false, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMToxNTozMFrOHw2a6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1NzozM1rOHxcKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA==", "bodyText": "No Evergreen. We are Greengrass", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520985320", "createdAt": "2020-11-11T01:15:30Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk5MDA5OA==", "bodyText": "But we have both endpoints here, the first one would return as greengrassEndpoint.\n    private static final Map<IotSdkClientFactory.EnvironmentStage, String>\n            DEFAULT_GREENGRASS_SERVICE_STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n            IotSdkClientFactory.EnvironmentStage.PROD, \"greengrass-ats.iot.%s.%s:8443/greengrass\",\n            IotSdkClientFactory.EnvironmentStage.GAMMA, \"greengrass-ats.gamma.%s.iot.%s:8443/greengrass\",\n            IotSdkClientFactory.EnvironmentStage.BETA, \"greengrass-ats.beta.%s.iot.%s:8443/greengrass\"\n    );\n    private static final Map<IotSdkClientFactory.EnvironmentStage, String> STAGE_TO_ENDPOINT_FORMAT = ImmutableMap.of(\n            IotSdkClientFactory.EnvironmentStage.PROD, \"evergreen.%s.%s\",\n            IotSdkClientFactory.EnvironmentStage.GAMMA, \"evergreen-gamma.%s.%s\",\n            IotSdkClientFactory.EnvironmentStage.BETA, \"evergreen-beta.%s.%s\"\n    );", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520990098", "createdAt": "2020-11-11T01:22:16Z", "author": {"login": "awszztt"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk5NzE0NQ==", "bodyText": "Think of a different name. We cannot use Evergreen. We are Greengrass.\nCall it GreengrassHttp vs GreengrassIot endpoint. (the ones with ats are Iot)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r520997145", "createdAt": "2020-11-11T01:32:11Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ4NzAxNA==", "bodyText": "Is that what we're actually doing? I thought we were putting it behind our V1 APIGW and appending v2 to the path.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521487014", "createdAt": "2020-11-11T16:37:16Z", "author": {"login": "jbutler"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTUyMTE5Mw==", "bodyText": "My confusion. That's still a separate endpoint. +1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521521193", "createdAt": "2020-11-11T17:30:06Z", "author": {"login": "jbutler"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3Mjc3MQ==", "bodyText": "Just check with @ravmenak, the endpoints  containing \"evergreen\" will be soon replaced by the greengrass.<region>.amazonaws.com/greengrass/v2. (A MCM is starting today to promote this change to the prod).\nI will change the method names to getGreengrassHttpEndpoint(without ats) and getGreengrassDataEndpoint(with ats) right now. And make the changes to map of the endpoints when the MCM is done.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521572771", "createdAt": "2020-11-11T18:58:37Z", "author": {"login": "awszztt"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NDA0Mg==", "bodyText": "greengrass data is confusing, I'd use iot.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521574042", "createdAt": "2020-11-11T19:00:54Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4NzQ2NQ==", "bodyText": "@MikeDombo in what way is it confusing? IMO using data tells you that it's a dataplane API, and it follows the same convention as IoT. It tells you what the endpoint is for, rather than what the DNS name is. IMO GreengrassIoT doesn't tell you anything - could be control plane or dataplane. Thoughts?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521587465", "createdAt": "2020-11-11T19:26:21Z", "author": {"login": "jbutler"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU4ODIxNA==", "bodyText": "ok, that's fine.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521588214", "createdAt": "2020-11-11T19:27:39Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMzczNw==", "bodyText": "Check the greengrass and iot Core endpoints and quotas https://docs.aws.amazon.com/general/latest/gr/greengrass.html and make some changes to the method name accordingly.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/622#discussion_r521603737", "createdAt": "2020-11-11T19:57:33Z", "author": {"login": "awszztt"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -170,10 +163,10 @@\n     protected static final AWSEvergreen greengrassClient = AWSEvergreenClientBuilder.standard()\n                                                                              .withEndpointConfiguration(\n                                                                                      new AwsClientBuilder.EndpointConfiguration(\n-                                                                                             String.format(STAGE_TO_ENDPOINT_FORMAT.get(envStage), GAMMA_REGION.toString()),\n+                                                                                             RegionUtils.getEvergreenEndpoint(GAMMA_REGION.toString(), envStage),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk4NTMyMA=="}, "originalCommit": {"oid": "d85a03e78b0362d89ed1acae55362ea8d65dc6f0"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 479, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}