{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDEzNjM5", "number": 452, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMDo1N1rOElCQfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxNDo0OFrOEmTtDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY5NzU3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMDo1OFrOHUTw5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyNToyMlrOHUa3RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzM4MA==", "bodyText": "don't undo Fahad's work at speeding things up by reusing the same kernel", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491057380", "createdAt": "2020-09-18T16:20:58Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +71,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3MzcwMA==", "bodyText": "moved relevant tests to another file", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491173700", "createdAt": "2020-09-18T20:25:22Z", "author": {"login": "avipinku"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +71,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NzM4MA=="}, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcwNzUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMzozOVrOHUT2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMzozOVrOHUT2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1ODk0Mw==", "bodyText": "remove this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491058943", "createdAt": "2020-09-18T16:23:39Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -65,20 +65,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n         Map<String, List<AuthorizationPolicy>> componentNameToPolicies = policyParser.parseAllAuthorizationPolicies(\n                 kernel);\n         for (Map.Entry<String, List<AuthorizationPolicy>> acl : componentNameToPolicies.entrySet()) {\n-            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), false);\n+            this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());\n         }\n \n-        //Load default policy for TES\n-        this.loadAuthorizationPolicies(TOKEN_EXCHANGE_SERVICE_TOPICS,\n-                getDefaultPolicyForService(AUTHZ_TES_OPERATION),\n-                false);\n+        //Load default policies\n+        addDefaultPolicies();\n \n         //Subscribe to future auth config updates\n         this.kernel.getConfig().getRoot().subscribe(\n                 (why, newv) -> {\n                     if (newv == null) {\n                         return;\n                     }\n+                    logger.atInfo(newv.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcxMDYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNDozMlrOHUT45w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTo0MzoyOVrOHVjddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ==", "bodyText": "during this time period, requests are being wrongly dropped.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491059431", "createdAt": "2020-09-18T16:24:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -105,10 +104,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    componentToAuthZConfig.clear();\n+                    authModule.deleteAllPermissions();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n                     for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA5MzE2NA==", "bodyText": "Good callout, we would need to flip it atomically.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491093164", "createdAt": "2020-09-18T17:31:39Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -105,10 +104,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    componentToAuthZConfig.clear();\n+                    authModule.deleteAllPermissions();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n                     for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTExODI0MQ==", "bodyText": "I think we can do this, basically we need to make sure that isAuthorized and reload are mutually exclusive, and if reload throws we should somehow revert back to original state. I think load does not throw today, so we should be ok there.\n@synchronized\nprivate void reloadPolicies(String componentName, List<AuthorizationPolicy> policies) {\n    clearPolicies(component);\n    loadAuthorizationPolicies(component, policies);\n}\n\nprivate void clearPolicies(String component) {\n    authModule.deletePermissionsWithDestination(component);\n}\n\n@synchronized\npublic boolean isAuthorized(String destination, Permission permission) throws AuthorizationException {", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491118241", "createdAt": "2020-09-18T18:22:40Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -105,10 +104,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    componentToAuthZConfig.clear();\n+                    authModule.deleteAllPermissions();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n                     for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM2MzEyNQ==", "bodyText": "Added @Synchronized to clearPolicies, isAuthorized, and loadAuthorizationPolicies, i.e. the only three methods that access the authModule.\nYes; if at any point when loading in policies, loadAuthorizationPolicies will just log the error and return. But I think there may be some danger here, since we don't actually call addPermissions until we've validated the operations and principals for all policies, but we only continue in the case of an error. Additionally, addPermission itself could potentially throw an error, which would also be caught and continue'd. This could leave permissions in an unstable state if, say, some policies are reloaded with errors and others are not.\nhttps://github.com/aws/aws-greengrass-kernel/blob/master/src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java#L227", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492363125", "createdAt": "2020-09-21T21:43:29Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/iot/evergreen/authorization/AuthorizationHandler.java", "diffHunk": "@@ -105,10 +104,19 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    componentToAuthZConfig.clear();\n+                    authModule.deleteAllPermissions();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();\n+\n                     for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTQzMQ=="}, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjcxMzc0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNToyMVrOHUT6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyNToyMVrOHUT6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1OTkxMw==", "bodyText": "flip this. Expected then actual", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r491059913", "createdAt": "2020-09-18T16:25:21Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/iot/evergreen/authorization/AuthorizationModuleTest.java", "diffHunk": "@@ -96,9 +96,8 @@ void Given_authZmodule_WHEN_given_component_and_clear_permissions_THEN_delete_pe\n                 fail(\"Encountered exception \", e);\n             }\n         });\n-        String componentToRemove = \"ComponentB\";\n-        module.deletePermissionsWithDestination(componentToRemove);\n-        assertEquals(module.permissions.get(\"ComponentB\").size(), 0);\n+        module.deleteAllPermissions();\n+        assertEquals(module.permissions.size(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "845155d1b3f83f9e1d53cbf231df134484ccb40b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTMyOTI3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoxNjoyMlrOHVkT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzo0NDowN1rOHVmGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzA0OA==", "bodyText": "if order matter, use the order junit annotations, otherwise it is likely to break", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492377048", "createdAt": "2020-09-21T22:16:22Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.ipc;\n+\n+import com.aws.greengrass.authorization.AuthorizationModule;\n+import com.aws.greengrass.authorization.Permission;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.config.Topic;\n+import com.aws.greengrass.config.Topics;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.ipc.IPCClient;\n+import com.aws.greengrass.ipc.IPCClientImpl;\n+import com.aws.greengrass.ipc.config.KernelIPCClientConfig;\n+import com.aws.greengrass.ipc.services.cli.Cli;\n+import com.aws.greengrass.ipc.services.cli.CliImpl;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentRequest;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentResponse;\n+import com.aws.greengrass.ipc.services.cli.models.UpdateRecipesAndArtifactsRequest;\n+import com.aws.greengrass.ipc.services.pubsub.PubSub;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubException;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubImpl;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.aws.greengrass.util.Pair;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.componentmanager.KernelConfigResolver.PARAMETERS_CONFIG_KEY;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForDeploymentToBeSuccessful;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForServiceToComeInState;\n+import static com.aws.greengrass.ipc.modules.PubSubIPCService.PUB_SUB_SERVICE_NAME;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.ACCESS_CONTROL_NAMESPACE_TOPIC;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.TestUtils.asyncAssertOnConsumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(GGExtension.class)\n+class IPCPubSubRemovalTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjI4MA==", "bodyText": "Since it's running a new kernel for each test, the order shouldn't matter", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406280", "createdAt": "2020-09-21T23:44:07Z", "author": {"login": "avipinku"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubRemovalTest.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0 */\n+\n+package com.aws.greengrass.integrationtests.ipc;\n+\n+import com.aws.greengrass.authorization.AuthorizationModule;\n+import com.aws.greengrass.authorization.Permission;\n+import com.aws.greengrass.componentmanager.exceptions.PackageDownloadException;\n+import com.aws.greengrass.config.Topic;\n+import com.aws.greengrass.config.Topics;\n+import com.aws.greengrass.dependency.State;\n+import com.aws.greengrass.ipc.IPCClient;\n+import com.aws.greengrass.ipc.IPCClientImpl;\n+import com.aws.greengrass.ipc.config.KernelIPCClientConfig;\n+import com.aws.greengrass.ipc.services.cli.Cli;\n+import com.aws.greengrass.ipc.services.cli.CliImpl;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentRequest;\n+import com.aws.greengrass.ipc.services.cli.models.CreateLocalDeploymentResponse;\n+import com.aws.greengrass.ipc.services.cli.models.UpdateRecipesAndArtifactsRequest;\n+import com.aws.greengrass.ipc.services.pubsub.PubSub;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubException;\n+import com.aws.greengrass.ipc.services.pubsub.PubSubImpl;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n+import com.aws.greengrass.testcommons.testutilities.GGExtension;\n+import com.aws.greengrass.util.Pair;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.aws.greengrass.componentmanager.KernelConfigResolver.PARAMETERS_CONFIG_KEY;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.getIPCConfigForService;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.prepareKernelFromConfigFile;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForDeploymentToBeSuccessful;\n+import static com.aws.greengrass.integrationtests.ipc.IPCTestUtils.waitForServiceToComeInState;\n+import static com.aws.greengrass.ipc.modules.PubSubIPCService.PUB_SUB_SERVICE_NAME;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.ACCESS_CONTROL_NAMESPACE_TOPIC;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionOfType;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionUltimateCauseWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.ExceptionLogProtector.ignoreExceptionWithMessage;\n+import static com.aws.greengrass.testcommons.testutilities.TestUtils.asyncAssertOnConsumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(GGExtension.class)\n+class IPCPubSubRemovalTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzA0OA=="}, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTMzMDM0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoxNjo1MVrOHVkUfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzo0NDowOVrOHVmGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzIxMg==", "bodyText": "keep this as static and afterall", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492377212", "createdAt": "2020-09-21T22:16:51Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +53,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjI5NQ==", "bodyText": "fixed", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406295", "createdAt": "2020-09-21T23:44:09Z", "author": {"login": "avipinku"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/ipc/IPCPubSubTest.java", "diffHunk": "@@ -59,25 +53,21 @@\n     @BeforeAll\n     static void startKernel() throws InterruptedException {\n         System.setProperty(\"root\", tempRootDir.toAbsolutePath().toString());\n-        kernel = prepareKernelFromConfigFile(\"pubsub.yaml\", IPCPubSubTest.class, \"SubscribeAndPublish\");\n     }\n \n-    @AfterAll\n-    static void stopKernel() {\n+    @AfterEach\n+    void stopKernel() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NzIxMg=="}, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTM0MTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoyMDo1MlrOHVkapQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoyMDo1MlrOHVkapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODc4OQ==", "bodyText": "don't use this", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492378789", "createdAt": "2020-09-21T22:20:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -12,6 +12,7 @@\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Utils;\n+import lombok.Synchronized;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTM0MjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoyMToxMlrOHVkbIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjozMTo1OFrOHVkqGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODkxNA==", "bodyText": "just use normal sync. public synchronized boolean ...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492378914", "createdAt": "2020-09-21T22:21:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -126,6 +133,7 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n      * @return whether the input combination is a valid flow.\n      * @throws AuthorizationException when flow is not authorized.\n      */\n+    @Synchronized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4Mjc0Ng==", "bodyText": "nevermind, see comment above.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492382746", "createdAt": "2020-09-21T22:31:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -126,6 +133,7 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n      * @return whether the input combination is a valid flow.\n      * @throws AuthorizationException when flow is not authorized.\n      */\n+    @Synchronized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3ODkxNA=="}, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTM0MzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjoyMTo0N1rOHVkcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMzo0NDoxNVrOHVmGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng==", "bodyText": "what about what we discussed re: deleting policies and synchronization?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492379156", "createdAt": "2020-09-21T22:21:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -107,10 +106,18 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTU4NQ==", "bodyText": "your synchronization strategy is still wrong. Use a ReentrantReadWriteLock. Use the readlock for isAuthorized and wrap the writelock around this whole block of L109-121", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492379585", "createdAt": "2020-09-21T22:22:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -107,10 +106,18 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng=="}, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQwNjMxNw==", "bodyText": "added", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r492406317", "createdAt": "2020-09-21T23:44:15Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -107,10 +106,18 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                     //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n                     // instead of reloading everything on every update.\n                     // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+\n+                    final Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n                             .parseAllAuthorizationPolicies(kernel);\n+\n+                    //Delete all policies before reloading\n+                    clearPolicies();\n+\n+                    //Add back in the relevant default policies\n+                    addDefaultPolicies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3OTE1Ng=="}, "originalCommit": {"oid": "c6665ce5e5ecea415a1c63ba384644e842aa92f7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTk5OTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo1MzoxMlrOHWQNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1MTowOVrOHWRLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjM3OQ==", "bodyText": "We can move the lock() here. We do not need that for parsing the config.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493096379", "createdAt": "2020-09-22T23:53:12Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjI2NQ==", "bodyText": "done", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112265", "createdAt": "2020-09-23T00:51:09Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NjM3OQ=="}, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjAwNjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo1NjozNlrOHWQRyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1MToxMVrOHWRLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NzQxNw==", "bodyText": "This will also remove default policies like TES?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493097417", "createdAt": "2020-09-22T23:56:36Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n+                                componentToAuthZConfig.entrySet()) {\n+                            String policyType = masterPolicyList.getKey();\n+                            if (!reloadedPolicies.containsKey(policyType)) {\n+                                //If the policyType already exists and was not reparsed correctly and/or removed from\n+                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n+                                componentToAuthZConfig.remove(policyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjI3MA==", "bodyText": "Good point; re-added them and added checks in integ tests for TES policies", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112270", "createdAt": "2020-09-23T00:51:11Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();\n+\n+                        //Reload all policies\n+                        //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n+                        // instead of reloading everything on every update.\n+                        // https://issues-iad.amazon.com/issues/V243584397\n+                        Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n+                                .parseAllAuthorizationPolicies(kernel);\n+\n+                        for (Map.Entry<String, List<AuthorizationPolicy>> masterPolicyList :\n+                                componentToAuthZConfig.entrySet()) {\n+                            String policyType = masterPolicyList.getKey();\n+                            if (!reloadedPolicies.containsKey(policyType)) {\n+                                //If the policyType already exists and was not reparsed correctly and/or removed from\n+                                //the newly parsed list, delete it from our store since it is now an unwanted relic\n+                                componentToAuthZConfig.remove(policyType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NzQxNw=="}, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NjA0MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDoxNDo0OFrOHWQmFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo1MToyOVrOHWRMIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjYxNQ==", "bodyText": "use try-with-resources and our LockScope", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493102615", "createdAt": "2020-09-23T00:14:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMjM1NA==", "bodyText": "very useful, thanks; added", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/452#discussion_r493112354", "createdAt": "2020-09-23T00:51:29Z", "author": {"login": "avipinku"}, "path": "src/main/java/com/aws/greengrass/authorization/AuthorizationHandler.java", "diffHunk": "@@ -103,14 +104,34 @@ public AuthorizationHandler(Kernel kernel,  AuthorizationModule authModule,\n                         return;\n                     }\n \n-                    //Reload all policies\n-                    //TODO: Add more sophisticated logic to specifically update policies scoped to this component,\n-                    // instead of reloading everything on every update.\n-                    // https://issues-iad.amazon.com/issues/V243584397\n-                    Map<String, List<AuthorizationPolicy>> reloadedPolicies = policyParser\n-                            .parseAllAuthorizationPolicies(kernel);\n-                    for (Map.Entry<String, List<AuthorizationPolicy>> acl : reloadedPolicies.entrySet()) {\n-                        this.loadAuthorizationPolicies(acl.getKey(), acl.getValue(), true);\n+                    try {\n+                        rwLock.writeLock().lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMjYxNQ=="}, "originalCommit": {"oid": "ef3594643af75a1e9428aba3bc7ebf0d90ad2585"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 527, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}