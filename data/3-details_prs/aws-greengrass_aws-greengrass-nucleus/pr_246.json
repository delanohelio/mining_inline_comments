{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjM2NTA4", "number": 246, "title": "Migrate to new PMS client, add E2E tests", "bodyText": "Description of changes:\nMigrates to the new Component Management Service AWS SDK\nWhy is this change necessary:\nService definition has changed, we need the new updates to work with the new service APIs\nHow was this change tested:\nIncludes Unit tests, E2E test\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-05-18T17:22:12Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246", "merged": true, "mergeCommit": {"oid": "39e8a8acc7dca3fd6c37e9db734b088efd893478"}, "closed": true, "closedAt": "2020-05-29T19:46:23Z", "author": {"login": "chaurah"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcijUoPgFqTQxMzc5NzA0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmHkIIAH2gAyNDE5NjM2NTA4OjhkNTQ3MzgzNzVkNjg4ZjhjMmI2MTBhNjA0N2VkYjcxNDY5NDY4NmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzk3MDQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-413797044", "createdAt": "2020-05-18T17:26:58Z", "commit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNjo1OVrOGXA2TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyODoyMFrOGXA5Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NDMzMw==", "bodyText": "Given our expected customer use case, I don't think that the default client will ever work because we don't expect customers to be setting the AWS environment variables. Can you just remove the default and then add our own values from the config store to L50?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426784333", "createdAt": "2020-05-18T17:26:59Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -35,21 +35,21 @@ public GreengrassPackageServiceClientFactory(\n         if (Utils.isEmpty(greengrassServiceEndpoint) || Utils.isEmpty(greengrassServiceRegion)) {\n             // Initialize default client, client builder determines endpoint configuration\n             // Will try to use default credential provider and environment region configuration\n-            logger.atInfo(\"initialize-pms-client\")\n+            logger.atInfo(\"initialize-cms-client\")\n                   .addKeyValue(\"service-endpoint\", \"default\")\n                   .addKeyValue(\"service-region\", \"default\")\n                   .log();\n-            this.pmsClient = AWSGreengrassPackageManagementClientBuilder.defaultClient();\n+            this.cmsClient = AWSGreengrassComponentManagementClientBuilder.defaultClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NTA4Mg==", "bodyText": "How is artifact name defined in the recipe? Right now the artifacts is just a list, should it become a map with names?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r426785082", "createdAt": "2020-05-18T17:28:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/plugins/GreengrassRepositoryDownloader.java", "diffHunk": "@@ -70,17 +70,20 @@ HttpURLConnection connect(URL url) throws IOException {\n         return (HttpURLConnection) url.openConnection();\n     }\n \n-    String getArtifactDownloadURL(String packageArn, String artifactName) throws PackageDownloadException {\n-        GetArtifactRequest getArtifactRequest = new GetArtifactRequest().withArtifactName(artifactName)\n-                                                                        .withPackageARN(packageArn);\n+    String getArtifactDownloadURL(PackageIdentifier packageIdentifier, String artifactName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTUyMzMx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-415552331", "createdAt": "2020-05-20T17:18:30Z", "commit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoxODozMVrOGYV_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoxODozMVrOGYV_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3OTQwNg==", "bodyText": "\ud83d\ude02", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r428179406", "createdAt": "2020-05-20T17:18:31Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceClientFactory.java", "diffHunk": "@@ -19,7 +19,7 @@\n \n     private static final Logger logger = LogManager.getLogger(GreengrassPackageServiceClientFactory.class);\n \n-    private final AWSGreengrassPackageManagement pmsClient;\n+    private final AWSGreengrassComponentManagement cmsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "967eda08ae5903214cea3b9495487d9dfc7d67d5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/967eda08ae5903214cea3b9495487d9dfc7d67d5", "committedDate": "2020-05-18T17:17:44Z", "message": "Migrate to new PMS client, add E2E tests"}, "afterCommit": {"oid": "4f2f6aa61674569654d9a0a69a5912617fdbacf9", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4f2f6aa61674569654d9a0a69a5912617fdbacf9", "committedDate": "2020-05-22T15:24:18Z", "message": "Migrate to new PMS client, add E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de7cfaf5292f8ffdbeda3ccdf7851a0b6935fa96", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/de7cfaf5292f8ffdbeda3ccdf7851a0b6935fa96", "committedDate": "2020-05-22T16:03:32Z", "message": "Migrate to new PMS client, add E2E tests"}, "afterCommit": {"oid": "1976130640de7a8d4d763c517f31cf717e532709", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1976130640de7a8d4d763c517f31cf717e532709", "committedDate": "2020-05-22T16:22:29Z", "message": "Migrate to new PMS client, add E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1976130640de7a8d4d763c517f31cf717e532709", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1976130640de7a8d4d763c517f31cf717e532709", "committedDate": "2020-05-22T16:22:29Z", "message": "Migrate to new PMS client, add E2E tests"}, "afterCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8", "committedDate": "2020-05-22T16:32:36Z", "message": "Migrate to new PMS client, add E2E tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDU4NTQ0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-417058544", "createdAt": "2020-05-22T16:58:30Z", "commit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNjo1ODozMFrOGZd4LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzowNjozMlrOGZeFPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzEwMA==", "bodyText": "this can error out, so maybe use try finally to make sure that both the kernel and component are cleaned no matter what.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357100", "createdAt": "2020-05-22T16:58:30Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzUwNw==", "bodyText": "do they only have east right now? Our tests are running in west.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357507", "createdAt": "2020-05-22T16:59:24Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1NzY1Mw==", "bodyText": "if order doesn't matter, then remove the @Order", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357653", "createdAt": "2020-05-22T16:59:48Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Nzg2OA==", "bodyText": "you can use hamcrest's file matcher for file existing: https://www.baeldung.com/hamcrest-file-matchers", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357868", "createdAt": "2020-05-22T17:00:20Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);\n+        testFuture.get();//10, TimeUnit.SECONDS);\n+\n+        assertTrue(Files.exists(packageStorePath));\n+        assertTrue(Files.exists(packageStorePath.resolve(RECIPE_DIRECTORY)));\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY)));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(RECIPE_DIRECTORY).resolve(\"KernelIntegTest-1.0.0.yaml\")));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\")));\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\")));\n+\n+        assertTrue(Files.exists(packageStorePath.resolve(ARTIFACT_DIRECTORY).resolve(\"KernelIntegTest\").resolve(\"1.0.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1Nzk3Mw==", "bodyText": "always have a timeout.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429357973", "createdAt": "2020-05-22T17:00:35Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/packagemanager/PackageManagerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.packagemanager;\n+\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@ExtendWith(EGExtension.class)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+class PackageManagerIntegrationTest {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerIntegrationTest.class.getResource(\"onlyMain.yaml\").toString());\n+        kernel.getContext().put(\"greengrassServiceEndpoint\",\n+                                \"https://3w5ajog718.execute-api.us-east-1.amazonaws.com/Beta/\");\n+        kernel.getContext().put(\"greengrassServiceRegion\", \"us-east-1\");\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerIntegrationTest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        kernel.shutdown();\n+        DeleteComponentRequest deleteComponentRequest\n+                = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                                              .withComponentVersion(\"1.0.0\");\n+        DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+        assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+    }\n+\n+    @Test\n+    @Order(1)\n+    void GIVEN_sample_deployment_doc_WHEN_submitted_to_deployment_task_THEN_services_start_in_kernel()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);\n+        testFuture.get();//10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDE5Mw==", "bodyText": "this seems odd. Why doesn't the metadata from the cloud include the declared dependencies and version requirements?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429360193", "createdAt": "2020-05-22T17:05:53Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -29,22 +38,40 @@\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        ListComponentsRequest listComponentsRequest =\n+                new ListComponentsRequest().withComponentName(packageName)\n+                                           .withComponentVersionConstraint(versionRequirement.toString());\n+        ListComponentsResult listComponentsResult = evgPmsClient.listComponents(listComponentsRequest);\n+        List<ComponentSelectedMetadata> componentSelectedMetadataList = listComponentsResult.getComponents();\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier\n+                    = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                            new Semver(componentMetadata.getComponentVersion()),\n+                                            componentMetadata.getComponentARN());\n+            // Dependencies map is unused as of now, there's no point in requesting dependencies for\n+            // ALL package versions at this step, will be filled in later by package manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2MDQ0NQ==", "bodyText": "this seems error prone, given that the map is always empty. Perhaps you should change the return value to just be the package identifier?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429360445", "createdAt": "2020-05-22T17:06:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -29,22 +38,40 @@\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        ListComponentsRequest listComponentsRequest =\n+                new ListComponentsRequest().withComponentName(packageName)\n+                                           .withComponentVersionConstraint(versionRequirement.toString());\n+        ListComponentsResult listComponentsResult = evgPmsClient.listComponents(listComponentsRequest);\n+        List<ComponentSelectedMetadata> componentSelectedMetadataList = listComponentsResult.getComponents();\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier\n+                    = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                            new Semver(componentMetadata.getComponentVersion()),\n+                                            componentMetadata.getComponentARN());\n+            // Dependencies map is unused as of now, there's no point in requesting dependencies for\n+            // ALL package versions at this step, will be filled in later by package manager\n+            return new PackageMetadata(packageIdentifier, Collections.emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTA5MDEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-417109012", "createdAt": "2020-05-22T18:28:38Z", "commit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODoyODozOFrOGZgOBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxODoyODozOFrOGZgOBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5NTQ2MQ==", "bodyText": "We have a method in the platform resolver to resolve the platform. You don't need to do this yourself.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r429395461", "createdAt": "2020-05-22T18:28:38Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/PackageManager.java", "diffHunk": "@@ -136,15 +138,13 @@ private void preparePackage(PackageIdentifier packageIdentifier)\n         logger.atInfo().setEventType(\"prepare-package-start\").addKeyValue(\"packageIdentifier\", packageIdentifier).log();\n         try {\n             PackageRecipe pkg = findRecipeDownloadIfNotExisted(packageIdentifier);\n-            List<URI> artifactURIList = pkg.getArtifacts().stream().map(artifactStr -> {\n-                try {\n-                    return new URI(artifactStr);\n-                } catch (URISyntaxException e) {\n-                    String message = String.format(\"artifact URI %s is invalid\", artifactStr);\n-                    logger.atError().setCause(e).log(message);\n-                    throw new RuntimeException(message, e);\n-                }\n-            }).collect(Collectors.toList());\n+\n+            final Set<String> resolvedPlatforms = PlatformResolver.RANKS.get().keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c3fcbd9ed0c4f19d34d278a66d7629a1b6cac8"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e49a20bc0a2e2807349747fa4bfe11f135c97d49", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/e49a20bc0a2e2807349747fa4bfe11f135c97d49", "committedDate": "2020-05-22T19:19:35Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "a0b1c84a184b1aabb6332841e78aed4b45b204e2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a0b1c84a184b1aabb6332841e78aed4b45b204e2", "committedDate": "2020-05-22T19:23:21Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0b1c84a184b1aabb6332841e78aed4b45b204e2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a0b1c84a184b1aabb6332841e78aed4b45b204e2", "committedDate": "2020-05-22T19:23:21Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "77c49475ee99270e289a43e44f0e3bb7ace53e51", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77c49475ee99270e289a43e44f0e3bb7ace53e51", "committedDate": "2020-05-22T19:38:57Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "77c49475ee99270e289a43e44f0e3bb7ace53e51", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/77c49475ee99270e289a43e44f0e3bb7ace53e51", "committedDate": "2020-05-22T19:38:57Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "28f1426aa5136efbe3d19a4a7650aee29cda48e4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28f1426aa5136efbe3d19a4a7650aee29cda48e4", "committedDate": "2020-05-22T19:41:15Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0979bb332a1071c1223b498da9d2c5d800e73fa8", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0979bb332a1071c1223b498da9d2c5d800e73fa8", "committedDate": "2020-05-22T21:42:32Z", "message": "Clean DeviceConfiguration to be dynamic"}, "afterCommit": {"oid": "28f1426aa5136efbe3d19a4a7650aee29cda48e4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28f1426aa5136efbe3d19a4a7650aee29cda48e4", "committedDate": "2020-05-22T19:41:15Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28f1426aa5136efbe3d19a4a7650aee29cda48e4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/28f1426aa5136efbe3d19a4a7650aee29cda48e4", "committedDate": "2020-05-22T19:41:15Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "4913fcea7e5f524d9434a93dff1b6d526e49d740", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4913fcea7e5f524d9434a93dff1b6d526e49d740", "committedDate": "2020-05-23T04:30:03Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5efc4cb2777782c8bdae97bde9709973f27a32fd", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5efc4cb2777782c8bdae97bde9709973f27a32fd", "committedDate": "2020-05-26T18:10:17Z", "message": "Merge branch 'master' into pms-e2e-test"}, "afterCommit": {"oid": "8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "committedDate": "2020-05-26T23:18:19Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8277bc33f05ac96a1149e59a586dcfe72e3b5c0f", "committedDate": "2020-05-26T23:18:19Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "committedDate": "2020-05-26T23:22:03Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzQ0Mjcx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-418744271", "createdAt": "2020-05-26T23:24:32Z", "commit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzoyNDozMlrOGazjCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzozMTozMFrOGazrFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MDcxMg==", "bodyText": "Is the platform forced in pkg recipe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r430760712", "createdAt": "2020-05-26T23:24:32Z", "author": {"login": "ShirleyZheng92"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/recipes/MonitoringService-1.1.0.yaml", "diffHunk": "@@ -16,7 +16,8 @@ Lifecycle:\n       skipif: onpath git\n       script: brew install git\n Artifacts:\n-  - greengrass:MonitoringService-1.1.0/monitor_artifact_100.txt\n+  all:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTg5MQ==", "bodyText": "It's generally not good practice to both log stack trace & throw the error", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r430761891", "createdAt": "2020-05-26T23:28:27Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,92 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+        FindComponentVersionsByPlatformResult findComponentResult =\n+                evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+        List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier = new PackageIdentifier(componentMetadata.getComponentName(),\n+                    new Semver(componentMetadata.getComponentVersion()), componentMetadata.getComponentARN());\n+            return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                    Collectors.toMap(ComponentNameVersion::getComponentName,\n+                            ComponentNameVersion::getComponentVersionConstraint)));\n+        }).collect(Collectors.toList());\n     }\n \n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n             throws PackageDownloadException, PackageLoadingException {\n-        GetPackageRequest getPackageRequest =\n-                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n-                                       .withType(RecipeFormatType.YAML);\n+        GetComponentRequest getComponentRequest =\n+                new GetComponentRequest().withComponentName(packageIdentifier.getName())\n+                        .withComponentVersion(packageIdentifier.getVersion().toString())\n+                        .withType(RecipeFormatType.YAML);\n \n-        GetPackageResult getPackageResult;\n+        GetComponentResult getPackageResult;\n         try {\n-            getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            getPackageResult = evgPmsClient.getComponent(getComponentRequest);\n         } catch (AmazonClientException e) {\n             // TODO: This should be expanded to handle various types of retryable/non-retryable exceptions\n-            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)\n-                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n-                  .addKeyValue(\"errorMessage\", errorMsg)\n-                  .log();\n+                    .addKeyValue(\"packageIdentifier\", packageIdentifier).addKeyValue(\"errorMessage\", errorMsg).log();\n             throw new PackageDownloadException(errorMsg, e);\n         }\n \n         try {\n             ByteBuffer recipeBuf = getPackageResult.getRecipe();\n-            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n-                                               PackageRecipe.class);\n+            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf), PackageRecipe.class);\n         } catch (IOException e) {\n-            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2Mjc3NQ==", "bodyText": "General question, will we support any format other than yaml when downloading a pkg recipe?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r430762775", "createdAt": "2020-05-26T23:31:30Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,92 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+        FindComponentVersionsByPlatformResult findComponentResult =\n+                evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+        List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier = new PackageIdentifier(componentMetadata.getComponentName(),\n+                    new Semver(componentMetadata.getComponentVersion()), componentMetadata.getComponentARN());\n+            return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                    Collectors.toMap(ComponentNameVersion::getComponentName,\n+                            ComponentNameVersion::getComponentVersionConstraint)));\n+        }).collect(Collectors.toList());\n     }\n \n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cd62b2b3e3d6e70eaf3222e61fe583bf97055c77", "committedDate": "2020-05-26T23:22:03Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}, "afterCommit": {"oid": "8635bf8bf01652a6cca8734b86e0a30d81df3ba2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8635bf8bf01652a6cca8734b86e0a30d81df3ba2", "committedDate": "2020-05-27T16:06:35Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a28184ccfb6925d44d5f21b3be8f5df026df195a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a28184ccfb6925d44d5f21b3be8f5df026df195a", "committedDate": "2020-05-27T16:47:58Z", "message": "Update region configuration using DeviceConfiguration class"}, "afterCommit": {"oid": "d28d73e8ba49f9e431c7b9a99242e107859be13f", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d28d73e8ba49f9e431c7b9a99242e107859be13f", "committedDate": "2020-05-27T17:40:29Z", "message": "Update region configuration using DeviceConfiguration class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d28d73e8ba49f9e431c7b9a99242e107859be13f", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d28d73e8ba49f9e431c7b9a99242e107859be13f", "committedDate": "2020-05-27T17:40:29Z", "message": "Update region configuration using DeviceConfiguration class"}, "afterCommit": {"oid": "4975c4767a57ba029cc220e8f14bd42fa60979cf", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4975c4767a57ba029cc220e8f14bd42fa60979cf", "committedDate": "2020-05-27T21:01:16Z", "message": "Update region configuration using DeviceConfiguration class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4975c4767a57ba029cc220e8f14bd42fa60979cf", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4975c4767a57ba029cc220e8f14bd42fa60979cf", "committedDate": "2020-05-27T21:01:16Z", "message": "Update region configuration using DeviceConfiguration class"}, "afterCommit": {"oid": "4409ee185cb797b866223aa9bdb8e8e52d026670", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4409ee185cb797b866223aa9bdb8e8e52d026670", "committedDate": "2020-05-27T21:24:46Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4409ee185cb797b866223aa9bdb8e8e52d026670", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/4409ee185cb797b866223aa9bdb8e8e52d026670", "committedDate": "2020-05-27T21:24:46Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "221ff248499b603a1d22462fc35422fbfea2d100", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/221ff248499b603a1d22462fc35422fbfea2d100", "committedDate": "2020-05-27T22:18:35Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "221ff248499b603a1d22462fc35422fbfea2d100", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/221ff248499b603a1d22462fc35422fbfea2d100", "committedDate": "2020-05-27T22:18:35Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "25f97ad867bab4430d2a96d8e9a18856642b32d5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/25f97ad867bab4430d2a96d8e9a18856642b32d5", "committedDate": "2020-05-27T22:48:08Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25f97ad867bab4430d2a96d8e9a18856642b32d5", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/25f97ad867bab4430d2a96d8e9a18856642b32d5", "committedDate": "2020-05-27T22:48:08Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "fb6d70d3e5e12b6c52427682949d5cfc160e786a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb6d70d3e5e12b6c52427682949d5cfc160e786a", "committedDate": "2020-05-27T23:23:44Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjgwNTk2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-419680596", "createdAt": "2020-05-27T23:34:16Z", "commit": {"oid": "fb6d70d3e5e12b6c52427682949d5cfc160e786a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNDoxN1rOGbgu4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozNDoxN1rOGbgu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMTAyNA==", "bodyText": "I made a few changes to e2e tests. Could you move this method to BaseE2ETestCase? DeviceConfiguration should already be updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431501024", "createdAt": "2020-05-27T23:34:17Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/util/Utils.java", "diffHunk": "@@ -317,6 +317,16 @@ public static void updateKernelConfigWithIotConfiguration(Kernel kernel, Utils.T\n         config.getIotCredentialEndpoint().withValue(thing.credEndpoint);\n     }\n \n+    // Update the kernel config with iot thing info, in specific CA, private Key and cert path.\n+    public static void updateKernelConfigWithComponentManagementServiceConfiguration(Kernel kernel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb6d70d3e5e12b6c52427682949d5cfc160e786a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb6d70d3e5e12b6c52427682949d5cfc160e786a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/fb6d70d3e5e12b6c52427682949d5cfc160e786a", "committedDate": "2020-05-27T23:23:44Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "committedDate": "2020-05-28T14:02:42Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0d7bb22982b7a75b0f60745d6bfdf63a08fbfdda", "committedDate": "2020-05-28T14:02:42Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "b8a91db3db232ac258bcc54b4235ebb47c1daf25", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b8a91db3db232ac258bcc54b4235ebb47c1daf25", "committedDate": "2020-05-28T14:48:34Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8a91db3db232ac258bcc54b4235ebb47c1daf25", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b8a91db3db232ac258bcc54b4235ebb47c1daf25", "committedDate": "2020-05-28T14:48:34Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62d7cbfc18f74007d3335e7c98eb50dd3a263754", "committedDate": "2020-05-28T14:52:40Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMjE5Mzgy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-420219382", "createdAt": "2020-05-28T15:17:26Z", "commit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToxNzoyNlrOGb6MuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMToxNVrOGb6XVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA==", "bodyText": "What's the plan with the commented out stuff?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431918264", "createdAt": "2020-05-28T15:17:26Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxOTA4Nw==", "bodyText": "Need more testing than just this. Should also be testing that dependency resolution works because that causes the new cms also.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431919087", "createdAt": "2020-05-28T15:18:34Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerE2ETest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        try {\n+            kernel.shutdown();\n+        } finally {\n+            DeleteComponentRequest deleteComponentRequest\n+                    = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                    .withComponentVersion(\"1.0.0\");\n+            DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+            assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_package_identifier_WHEN_request_package_from_cms_service_THEN_package_downloaded_with_artifacts()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDI5OA==", "bodyText": "Agree with earlier comments we should not both log and throw.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431920298", "createdAt": "2020-05-28T15:20:19Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackageDownloadException {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+\n+        try {\n+            FindComponentVersionsByPlatformResult findComponentResult =\n+                    evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+\n+            List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+            return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+                PackageIdentifier packageIdentifier\n+                        = new PackageIdentifier(componentMetadata.getComponentName(),\n+                                                new Semver(componentMetadata.getComponentVersion()),\n+                                                componentMetadata.getComponentARN());\n+                return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                        Collectors.toMap(ComponentNameVersion::getComponentName,\n+                                         ComponentNameVersion::getComponentVersionConstraint)));\n+            }).collect(Collectors.toList());\n+        } catch (AmazonClientException e) {\n+            // TODO: This should be expanded to handle various types of retryable/non-retryable exceptions\n+            logger.atError(\"download-package-from-greengrass-repo\", e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDk4MA==", "bodyText": "We're not losing anything because you are wrapping the original error, so no information is lost.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r431920980", "createdAt": "2020-05-28T15:21:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,92 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement) {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+        FindComponentVersionsByPlatformResult findComponentResult =\n+                evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);\n+        List<ResolvedComponent> componentSelectedMetadataList = findComponentResult.getComponents();\n+\n+        return componentSelectedMetadataList.stream().map(componentMetadata -> {\n+            PackageIdentifier packageIdentifier = new PackageIdentifier(componentMetadata.getComponentName(),\n+                    new Semver(componentMetadata.getComponentVersion()), componentMetadata.getComponentARN());\n+            return new PackageMetadata(packageIdentifier, componentMetadata.getDependencies().stream().collect(\n+                    Collectors.toMap(ComponentNameVersion::getComponentName,\n+                            ComponentNameVersion::getComponentVersionConstraint)));\n+        }).collect(Collectors.toList());\n     }\n \n     PackageRecipe downloadPackageRecipe(PackageIdentifier packageIdentifier)\n             throws PackageDownloadException, PackageLoadingException {\n-        GetPackageRequest getPackageRequest =\n-                new GetPackageRequest().withPackageARN(packageIdentifier.getArn())\n-                                       .withType(RecipeFormatType.YAML);\n+        GetComponentRequest getComponentRequest =\n+                new GetComponentRequest().withComponentName(packageIdentifier.getName())\n+                        .withComponentVersion(packageIdentifier.getVersion().toString())\n+                        .withType(RecipeFormatType.YAML);\n \n-        GetPackageResult getPackageResult;\n+        GetComponentResult getPackageResult;\n         try {\n-            getPackageResult = evgPmsClient.getPackage(getPackageRequest);\n+            getPackageResult = evgPmsClient.getComponent(getComponentRequest);\n         } catch (AmazonClientException e) {\n             // TODO: This should be expanded to handle various types of retryable/non-retryable exceptions\n-            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)\n-                  .addKeyValue(\"packageIdentifier\", packageIdentifier)\n-                  .addKeyValue(\"errorMessage\", errorMsg)\n-                  .log();\n+                    .addKeyValue(\"packageIdentifier\", packageIdentifier).addKeyValue(\"errorMessage\", errorMsg).log();\n             throw new PackageDownloadException(errorMsg, e);\n         }\n \n         try {\n             ByteBuffer recipeBuf = getPackageResult.getRecipe();\n-            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf),\n-                                               PackageRecipe.class);\n+            return RECIPE_SERIALIZER.readValue(new ByteBufferBackedInputStream(recipeBuf), PackageRecipe.class);\n         } catch (IOException e) {\n-            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT,\n-                                            packageIdentifier.getArn());\n+            String errorMsg = String.format(PACKAGE_RECIPE_PARSING_EXCEPTION_FMT, packageIdentifier.getArn());\n             logger.atError(\"download-package-from-greengrass-repo\", e)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc2MTg5MQ=="}, "originalCommit": {"oid": "cd62b2b3e3d6e70eaf3222e61fe583bf97055c77"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzMyMzQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-420332345", "createdAt": "2020-05-28T17:22:49Z", "commit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyMjo0OVrOGb_PFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyNzoyMVrOGb_Z3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDc5MQ==", "bodyText": "It's good we have already thought about the future... But I also recall what Feng mentioned before about this - Let's not have big chunk of commented code in the code base since it will confuse others... Since we are going to add code incrementally, I'd say it's perfectly fine to add them just in time when we can do it.\nNo need to remove this since we already have it but just in the future...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432000791", "createdAt": "2020-05-28T17:22:49Z", "author": {"login": "leaf94"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkxODI2NA=="}, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMTY0Mw==", "bodyText": "nit: since you renamed, probably change the this.pvgPmsClient as well...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432001643", "createdAt": "2020-05-28T17:24:15Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMjU0Mw==", "bodyText": "If the SDK doesn't log automatically, log the request and response since we will need them for debugging issues with CMS interactions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432002543", "createdAt": "2020-05-28T17:25:40Z", "author": {"login": "leaf94"}, "path": "src/main/java/com/aws/iot/evergreen/packagemanager/GreengrassPackageServiceHelper.java", "diffHunk": "@@ -1,72 +1,106 @@\n package com.aws.iot.evergreen.packagemanager;\n \n import com.amazonaws.AmazonClientException;\n-import com.amazonaws.services.greengrasspackagemanagement.AWSGreengrassPackageManagement;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageRequest;\n-import com.amazonaws.services.greengrasspackagemanagement.model.GetPackageResult;\n-import com.amazonaws.services.greengrasspackagemanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ComponentNameVersion;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.FindComponentVersionsByPlatformResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.GetComponentResult;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.RecipeFormatType;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.ResolvedComponent;\n+import com.aws.iot.evergreen.config.PlatformResolver;\n import com.aws.iot.evergreen.logging.api.Logger;\n import com.aws.iot.evergreen.logging.impl.LogManager;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageDownloadException;\n import com.aws.iot.evergreen.packagemanager.exceptions.PackageLoadingException;\n import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.packagemanager.models.PackageMetadata;\n import com.aws.iot.evergreen.packagemanager.models.PackageRecipe;\n import com.aws.iot.evergreen.util.SerializerFactory;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream;\n+import com.vdurmont.semver4j.Requirement;\n+import com.vdurmont.semver4j.Semver;\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import javax.inject.Inject;\n \n public class GreengrassPackageServiceHelper {\n \n-    private static String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n-    private static String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n-\n+    private static final String PACKAGE_RECIPE_PARSING_EXCEPTION_FMT = \"Error parsing downloaded recipe for package %s\";\n     private static final ObjectMapper RECIPE_SERIALIZER = SerializerFactory.getRecipeSerializer();\n-\n+    private static final String PACKAGE_RECIPE_DOWNLOAD_EXCEPTION_FMT = \"Error downloading recipe for package %s\";\n     // Service logger instance\n     protected final Logger logger = LogManager.getLogger(GreengrassPackageServiceHelper.class);\n \n-    private final AWSGreengrassPackageManagement evgPmsClient;\n+    private final AWSGreengrassComponentManagement evgPmsClient;\n \n     @Inject\n     public GreengrassPackageServiceHelper(GreengrassPackageServiceClientFactory clientFactory) {\n-        this.evgPmsClient = clientFactory.getPmsClient();\n+        this.evgPmsClient = clientFactory.getCmsClient();\n+    }\n+\n+    List<PackageMetadata> listAvailablePackageMetadata(String packageName, Requirement versionRequirement)\n+            throws PackageDownloadException {\n+        FindComponentVersionsByPlatformRequest findComponentRequest =\n+                new FindComponentVersionsByPlatformRequest().withComponentName(packageName)\n+                        .withVersionConstraint(versionRequirement.toString())\n+                        .withPlatform(PlatformResolver.getPlatform());\n+\n+        try {\n+            FindComponentVersionsByPlatformResult findComponentResult =\n+                    evgPmsClient.findComponentVersionsByPlatform(findComponentRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMzU0OQ==", "bodyText": "Thanks for fixing all these....", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432003549", "createdAt": "2020-05-28T17:27:21Z", "author": {"login": "leaf94"}, "path": "src/test/resources/com/aws/iot/evergreen/packagemanager/test_packages/MonitoringService-1.1.0/recipe.yaml", "diffHunk": "@@ -16,7 +16,8 @@ Lifecycle:\n       skipif: onpath git\n       script: brew install git\n Artifacts:\n-  - greengrass:monitor_artifact_100.txt\n+  all:\n+    - greengrass:monitor_artifact_100.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMzQ2NjEx", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-420346611", "createdAt": "2020-05-28T17:42:10Z", "commit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTYyNTIz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-420562523", "createdAt": "2020-05-28T23:38:23Z", "commit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzozODoyM1rOGcKPtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzozODoyM1rOGcKPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4MTE3NA==", "bodyText": "Question. Is this package \"KernelIntegTest\" actually downloaded from CMS?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432181174", "createdAt": "2020-05-28T23:38:23Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/packagemanager/PackageManagerE2ETest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.iot.evergreen.integrationtests.e2e.packagemanager;\n+\n+import com.amazonaws.services.greengrasscomponentmanagement.AWSGreengrassComponentManagement;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentRequest;\n+import com.amazonaws.services.greengrasscomponentmanagement.model.DeleteComponentResult;\n+\n+import com.aws.iot.evergreen.integrationtests.e2e.BaseE2ETestCase;\n+import com.aws.iot.evergreen.integrationtests.e2e.util.Utils;\n+import com.aws.iot.evergreen.kernel.Kernel;\n+import com.aws.iot.evergreen.packagemanager.GreengrassPackageServiceClientFactory;\n+import com.aws.iot.evergreen.packagemanager.PackageManager;\n+import com.aws.iot.evergreen.packagemanager.models.PackageIdentifier;\n+import com.aws.iot.evergreen.testcommons.testutilities.EGExtension;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.SemverType;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.io.FileMatchers.anExistingDirectory;\n+import static org.hamcrest.io.FileMatchers.anExistingFile;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@ExtendWith(EGExtension.class)\n+@Tag(\"E2E\")\n+class PackageManagerE2ETest extends BaseE2ETestCase {\n+\n+    // Based on PackageManager.java\n+    private static final String RECIPE_DIRECTORY = \"recipes\";\n+    private static final String ARTIFACT_DIRECTORY = \"artifacts\";\n+\n+    private static PackageManager packageManager;\n+    private static Path packageStorePath;\n+    private static AWSGreengrassComponentManagement cmsClient;\n+\n+    private static Kernel kernel;\n+\n+    @TempDir\n+    static Path rootDir;\n+\n+    @BeforeAll\n+    static void setupKernel() throws IOException, URISyntaxException {\n+        System.setProperty(\"root\", rootDir.toAbsolutePath().toString());\n+        kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", PackageManagerE2ETest.class.getResource(\"onlyMain.yaml\").toString());\n+        Utils.updateKernelConfigWithComponentManagementServiceConfiguration(kernel);\n+\n+        // The integration test will pick up credentials from the default provider chain\n+        // In automated testing, the device environment should ideally have credentials for all tests\n+        // For dev work, this requires you to have a working set of AWS Credentials on your dev box and/or your IDE\n+        // environment\n+\n+        kernel.launch();\n+\n+        // get required instances from context\n+        packageManager = kernel.getContext().get(PackageManager.class);\n+        packageStorePath = kernel.getPackageStorePath();\n+\n+        cmsClient = kernel.getContext().get(GreengrassPackageServiceClientFactory.class).getCmsClient();\n+\n+        // TODO: Ideally integ test should clean up after itself. Unfortunately the delete API is not implemented\n+        // on the service side yet. Enable this code when that is ready. You'll also need to add the required import\n+        // statements. The delete code is already included in @AfterAll tagged function below\n+        /*\n+        Path testPackagePath =\n+                Paths.get(PackageManagerE2ETest.class.getResource(\"test_packages\").toURI())\n+                     .resolve(\"KernelIntegTest-1.0.0\");\n+\n+        Path testRecipePath = testPackagePath.resolve(\"recipe.yaml\");\n+        ByteBuffer recipeBuf = ByteBuffer.wrap(Files.readAllBytes(testRecipePath));\n+        try {\n+            CreateComponentRequest createComponentRequest = new CreateComponentRequest().withRecipe(recipeBuf);\n+            CreateComponentResult createComponentResult = cmsClient.createComponent(createComponentRequest);\n+            assertEquals(\"DRAFT\", createComponentResult.getStatus());\n+\n+            CreateComponentArtifactUploadUrlRequest artifactUploadUrlRequest\n+                    = new CreateComponentArtifactUploadUrlRequest().withArtifactName(\"kernel_integ_test_artifact.txt\")\n+                                                                   .withComponentName(\"KernelIntegTest\")\n+                                                                   .withComponentVersion(\"1.0.0\");\n+            CreateComponentArtifactUploadUrlResult artifactUploadUrlResult\n+                    = cmsClient.createComponentArtifactUploadUrl(artifactUploadUrlRequest);\n+            URL s3PreSignedURL = new URL(artifactUploadUrlResult.getUrl());\n+            HttpURLConnection connection = (HttpURLConnection) s3PreSignedURL.openConnection();\n+            connection.setDoOutput(true);\n+            connection.setRequestMethod(\"PUT\");\n+            OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream());\n+            out.write(\"Integration test artifact for Evergreen Kernel\");\n+            out.close();\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+        */\n+    }\n+\n+    @AfterAll\n+    static void tearDown() {\n+        try {\n+            kernel.shutdown();\n+        } finally {\n+            DeleteComponentRequest deleteComponentRequest\n+                    = new DeleteComponentRequest().withComponentName(\"KernelIntegTest\")\n+                    .withComponentVersion(\"1.0.0\");\n+            DeleteComponentResult result = cmsClient.deleteComponent(deleteComponentRequest);\n+            assertEquals(200, result.getSdkHttpMetadata().getHttpStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    void GIVEN_package_identifier_WHEN_request_package_from_cms_service_THEN_package_downloaded_with_artifacts()\n+            throws Exception {\n+        PackageIdentifier pkgIdt\n+                = new PackageIdentifier(\"KernelIntegTest\", new Semver(\"1.0.0\", SemverType.NPM));\n+        List<PackageIdentifier> pkgList = new ArrayList<>();\n+        pkgList.add(pkgIdt);\n+        Future<Void> testFuture = packageManager.preparePackages(pkgList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15efc7135d998a15b3443ffeb57fa506c2414324", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/15efc7135d998a15b3443ffeb57fa506c2414324", "committedDate": "2020-05-29T13:32:18Z", "message": "Migrate to new PMS client, add E2E tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b651abf5073c784d498850ce9ab7e6d31c3cea4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0b651abf5073c784d498850ce9ab7e6d31c3cea4", "committedDate": "2020-05-29T13:32:18Z", "message": "Update for PR comments, use FindComponentVersionsByPlatformRequest instead of ListComponents"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62d7cbfc18f74007d3335e7c98eb50dd3a263754", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/62d7cbfc18f74007d3335e7c98eb50dd3a263754", "committedDate": "2020-05-28T14:52:40Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "a96b93e804588717dcd8b0485b57f72e4abf0c8a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a96b93e804588717dcd8b0485b57f72e4abf0c8a", "committedDate": "2020-05-29T14:29:07Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a96b93e804588717dcd8b0485b57f72e4abf0c8a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a96b93e804588717dcd8b0485b57f72e4abf0c8a", "committedDate": "2020-05-29T14:29:07Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "420dd2078451959cc6b75abea67d06fe49a31a02", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/420dd2078451959cc6b75abea67d06fe49a31a02", "committedDate": "2020-05-29T15:21:24Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "420dd2078451959cc6b75abea67d06fe49a31a02", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/420dd2078451959cc6b75abea67d06fe49a31a02", "committedDate": "2020-05-29T15:21:24Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "committedDate": "2020-05-29T16:23:50Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/479df77bb20336ca2e21013f7d26352b2b96ab5d", "committedDate": "2020-05-29T16:47:36Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/711ce43c1c018d9ebd789310b65dfe1486ae1a5e", "committedDate": "2020-05-29T16:23:50Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}, "afterCommit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/479df77bb20336ca2e21013f7d26352b2b96ab5d", "committedDate": "2020-05-29T16:47:36Z", "message": "Update region configuration using DeviceConfiguration class, Fix integration/E2E tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTU4MDc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-421158074", "createdAt": "2020-05-29T17:40:26Z", "commit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTYyNTAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-421162502", "createdAt": "2020-05-29T17:47:07Z", "commit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NzowN1rOGcmazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0NzowN1rOGcmazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0Mjc2NA==", "bodyText": "We only need to set region in one of these methods right? Or is this intentional?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#discussion_r432642764", "createdAt": "2020-05-29T17:47:07Z", "author": {"login": "hui-yang"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/e2e/deployment/DeploymentE2ETest.java", "diffHunk": "@@ -60,7 +60,9 @@ private void launchKernel(String configFile) throws IOException, InterruptedExce\n         kernel = new Kernel()\n                 .parseArgs(\"-i\", DeploymentE2ETest.class.getResource(configFile).toString(), \"-r\", tempRootDir\n                         .toAbsolutePath().toString());\n+\n         deviceProvisioningHelper.updateKernelConfigWithIotConfiguration(kernel, thingInfo, BETA_REGION.toString());\n+        deviceProvisioningHelper.updateKernelConfigWithCMSConfiguration(kernel, BETA_REGION.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTYyODg3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/246#pullrequestreview-421162887", "createdAt": "2020-05-29T17:47:43Z", "commit": {"oid": "479df77bb20336ca2e21013f7d26352b2b96ab5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4c7d300af0b7eae33ded960ae28e3f1bd787afa", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c4c7d300af0b7eae33ded960ae28e3f1bd787afa", "committedDate": "2020-05-29T17:49:20Z", "message": "Merge branch 'master' into pms-e2e-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d54738375d688f8c2b610a6047edb714694686a", "author": {"user": {"login": "chaurah", "name": "Rahul Singh Chauhan"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8d54738375d688f8c2b610a6047edb714694686a", "committedDate": "2020-05-29T19:24:00Z", "message": "Merge branch 'master' into pms-e2e-test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2208, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}