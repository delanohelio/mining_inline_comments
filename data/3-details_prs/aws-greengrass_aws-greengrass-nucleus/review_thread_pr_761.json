{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTUzNzc3", "number": 761, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyOToxMFrOFB_vhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODowNjoxNVrOFCg4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjM3MjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToyOToxMFrOIA7hog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo0NTowNVrOIA8GNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjE3OA==", "bodyText": "I think here we should read from zip but then fall back to version in config file, instead of falling back to 2.0.0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537846178", "createdAt": "2020-12-07T21:29:10Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,9 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromZip so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE, DeviceConfiguration.getVersionFromZip()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9432ce3e6e32079a849770d8360f78a832c906ab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0OTA4MQ==", "bodyText": "That's not possible. The config isn't loaded at this point", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537849081", "createdAt": "2020-12-07T21:34:11Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,9 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromZip so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE, DeviceConfiguration.getVersionFromZip()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjE3OA=="}, "originalCommit": {"oid": "9432ce3e6e32079a849770d8360f78a832c906ab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg1NTU0Mw==", "bodyText": "And we don't want to load it because that causes the nucleus to start up which is slow and causing a bunch of logs to output instead of simply just printing out the version.\nThe only time this could be a problem is if the nucleus isn't properly configured, which we'd want to discourage anyway.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537855543", "createdAt": "2020-12-07T21:45:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,9 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromZip so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE, DeviceConfiguration.getVersionFromZip()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg0NjE3OA=="}, "originalCommit": {"oid": "9432ce3e6e32079a849770d8360f78a832c906ab"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU2NTg5OnYy", "diffSide": "RIGHT", "path": "conf/nucleus.properties", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxNjoxMFrOIA9P4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjoyNjozOFrOIBD8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NDQwMQ==", "bodyText": "Calling this \"nucleus.properties\" will be confusing as we also have properties on the config file. Better just call this \"nucleus.version\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537874401", "createdAt": "2020-12-07T22:16:10Z", "author": {"login": "JamieHunter"}, "path": "conf/nucleus.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5MDIyOA==", "bodyText": ".properties is a java file extension for the Properties type. I don't necessarily think that renaming makes sense.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537890228", "createdAt": "2020-12-07T22:44:25Z", "author": {"login": "MikeDombo"}, "path": "conf/nucleus.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NDQwMQ=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5MzU5MQ==", "bodyText": "Rename to nucleus-build.properties? Or just build.properties?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537893591", "createdAt": "2020-12-07T22:51:08Z", "author": {"login": "MikeDombo"}, "path": "conf/nucleus.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NDQwMQ=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk4NDE1NA==", "bodyText": "Updated to nucleus-build.properties", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537984154", "createdAt": "2020-12-08T02:26:38Z", "author": {"login": "MikeDombo"}, "path": "conf/nucleus.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NDQwMQ=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY0MDMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/dependency/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozNTowM1rOIA95jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1MjoxNFrOIA-dHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTA3MA==", "bodyText": "Post re:Invent review: lets review how InterruptedException is handled - it seems fine here if thread exists, but this is often handled incorrectly.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537885070", "createdAt": "2020-12-07T22:35:03Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/dependency/Context.java", "diffHunk": "@@ -66,7 +66,7 @@ public void run() {\n                     Runnable task = serialized.takeFirst();\n                     task.run();\n                 } catch (InterruptedException ie) {\n-                    logger.atWarn().log(\"Interrupted while running tasks. Publish thread will exit now.\");\n+                    logger.atInfo().log(\"Interrupted while running tasks. Publish thread will exit now.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDE3NQ==", "bodyText": "In this case we handle it correctly. I'm just dropping it down from warn because we had some questions from beta users who were concerned. This log is entirely expected when the nucleus shutsdown and when doing a deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537894175", "createdAt": "2020-12-07T22:52:14Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/dependency/Context.java", "diffHunk": "@@ -66,7 +66,7 @@ public void run() {\n                     Runnable task = serialized.takeFirst();\n                     task.run();\n                 } catch (InterruptedException ie) {\n-                    logger.atWarn().log(\"Interrupted while running tasks. Publish thread will exit now.\");\n+                    logger.atInfo().log(\"Interrupted while running tasks. Publish thread will exit now.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTA3MA=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY0NDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozNjoxOFrOIA98BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozNjoxOFrOIA98BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTcwMQ==", "bodyText": "Echoing earlier comment - this can get confusing, in this case for someone viewing open source - what's properties and whats configuration - we need to be very explicit here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537885701", "createdAt": "2020-12-07T22:36:18Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -103,6 +107,7 @@\n     private Topics loggingTopics;\n     private LoggerConfiguration currentConfiguration;\n     private String nucleusComponentNameCache;\n+    private static final Properties NUCLEUS_PROPERTIES = new Properties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY1Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozOToyMlrOIA-Crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1NDowMlrOIA-gbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzQwNw==", "bodyText": "Really bad name. I thought you was cracking open the zip file. You're getting version from ... really need a better name for this file.\ngetVersionFromVersionConfig\ngetVersionFromBuildMetadataFile\n...\nopen to other suggestions.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537887407", "createdAt": "2020-12-07T22:39:22Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTAyMw==", "bodyText": "renamed to getVersionFromBuildMetadataFile", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537895023", "createdAt": "2020-12-07T22:54:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzQwNw=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY1OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0MDowMFrOIA-EWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1Mzo0MlrOIA-f1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzgzNQ==", "bodyText": "\"nucleus.version\" magic name ... let's put magic names into constant (static final) fields.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537887835", "createdAt": "2020-12-07T22:40:00Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(\"conf\").resolve(\"nucleus.properties\"))) {\n+                NUCLEUS_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_PROPERTIES.getProperty(\"nucleus.version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDg3MQ==", "bodyText": "Updated all constant strings to be proper consts", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537894871", "createdAt": "2020-12-07T22:53:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(\"conf\").resolve(\"nucleus.properties\"))) {\n+                NUCLEUS_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_PROPERTIES.getProperty(\"nucleus.version\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzgzNQ=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjY2MTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo0MDoyMVrOIA-FEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1MzozMFrOIA-feg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4ODAxNw==", "bodyText": "We should give an error any time we fall back to returning constant version (again, magic string inline of code, we need to avoid doing this) so, here - log the error (and it is an error). At the \"return \"2.0.0\" - log at least a warning - with more information why we went down that path.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537888017", "createdAt": "2020-12-07T22:40:21Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(\"conf\").resolve(\"nucleus.properties\"))) {\n+                NUCLEUS_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_PROPERTIES.getProperty(\"nucleus.version\");\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atWarn().log(\"Unable to determine Greengrass version\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NDc3OA==", "bodyText": "Added error when we return the default.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r537894778", "createdAt": "2020-12-07T22:53:30Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +467,47 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromZip();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromZip() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(\"conf\").resolve(\"nucleus.properties\"))) {\n+                NUCLEUS_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_PROPERTIES.getProperty(\"nucleus.version\");\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atWarn().log(\"Unable to determine Greengrass version\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4ODAxNw=="}, "originalCommit": {"oid": "0f44cd62c4f01bc30b12ce73004b3c53bb652b32"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTQ1MDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/tes/TokenExchangeServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxMToyNlrOIBqhoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNzoyNlrOIBq6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNjIyNA==", "bodyText": "Shouldn't this be the default version constant? If we change it, this test will break.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538616224", "createdAt": "2020-12-08T17:11:26Z", "author": {"login": "JamieHunter"}, "path": "src/test/java/com/aws/greengrass/tes/TokenExchangeServiceTest.java", "diffHunk": "@@ -107,7 +106,7 @@ void setup() {\n         when(kernel.getConfig()).thenReturn(configuration);\n         Topics servicesTopics = Topics.of(context, SERVICES_NAMESPACE_TOPIC, null);\n         Topic componentTypeTopic = Topic.of(context, SERVICE_TYPE_TOPIC_KEY, ComponentType.NUCLEUS.name());\n-        Topic componentVersionTopic = Topic.of(context, VERSION_CONFIG_KEY, KernelVersion.KERNEL_VERSION);\n+        Topic componentVersionTopic = Topic.of(context, VERSION_CONFIG_KEY, \"2.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493f5da6ec6b4d61fdf49a7a8c64cd25c3310a89"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMjYyNQ==", "bodyText": "This test doesn't verify the version. The version used here doesn't matter at all. We just need to return something so that DeviceConfiguration can be initialized.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538622625", "createdAt": "2020-12-08T17:17:26Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/tes/TokenExchangeServiceTest.java", "diffHunk": "@@ -107,7 +106,7 @@ void setup() {\n         when(kernel.getConfig()).thenReturn(configuration);\n         Topics servicesTopics = Topics.of(context, SERVICES_NAMESPACE_TOPIC, null);\n         Topic componentTypeTopic = Topic.of(context, SERVICE_TYPE_TOPIC_KEY, ComponentType.NUCLEUS.name());\n-        Topic componentVersionTopic = Topic.of(context, VERSION_CONFIG_KEY, KernelVersion.KERNEL_VERSION);\n+        Topic componentVersionTopic = Topic.of(context, VERSION_CONFIG_KEY, \"2.0.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNjIyNA=="}, "originalCommit": {"oid": "493f5da6ec6b4d61fdf49a7a8c64cd25c3310a89"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTQ1ODUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/ExceptionLogProtector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxMjozOVrOIBqmxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NzowM1rOIBwj6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNzU0Mg==", "bodyText": "Feels iffy to me...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538617542", "createdAt": "2020-12-08T17:12:39Z", "author": {"login": "JamieHunter"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/ExceptionLogProtector.java", "diffHunk": "@@ -122,6 +122,7 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         // Ignore error from MQTT during shutdown\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"MQTT operation interrupted by connection shutdown\");\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"Connection has started destroying process\");\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Unable to locate the unpack directory of Kernel Jar file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493f5da6ec6b4d61fdf49a7a8c64cd25c3310a89"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMzMwNw==", "bodyText": "Without this, I would need to ignore this exception in over 30 individual tests. This error will always occur during testing because it cannot find the directory structure that it wants.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538623307", "createdAt": "2020-12-08T17:18:03Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/ExceptionLogProtector.java", "diffHunk": "@@ -122,6 +122,7 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         // Ignore error from MQTT during shutdown\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"MQTT operation interrupted by connection shutdown\");\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"Connection has started destroying process\");\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Unable to locate the unpack directory of Kernel Jar file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNzU0Mg=="}, "originalCommit": {"oid": "493f5da6ec6b4d61fdf49a7a8c64cd25c3310a89"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNTExMg==", "bodyText": "Can we have a comment why it's ok to ignore this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538715112", "createdAt": "2020-12-08T18:47:03Z", "author": {"login": "JamieHunter"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/ExceptionLogProtector.java", "diffHunk": "@@ -122,6 +122,7 @@ public void beforeEach(ExtensionContext context) throws Exception {\n         // Ignore error from MQTT during shutdown\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"MQTT operation interrupted by connection shutdown\");\n         ignoreExceptionUltimateCauseWithMessageSubstring(context, \"Connection has started destroying process\");\n+        ignoreExceptionUltimateCauseWithMessage(context, \"Unable to locate the unpack directory of Kernel Jar file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxNzU0Mg=="}, "originalCommit": {"oid": "493f5da6ec6b4d61fdf49a7a8c64cd25c3310a89"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTcxMzM0OnYy", "diffSide": "RIGHT", "path": "conf/nucleus-build.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzo1MjowM1rOIBtMrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NjoyOFrOIBwiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MDAxMw==", "bodyText": "Do we need to add some comments on how this is being used?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538660013", "createdAt": "2020-12-08T17:52:03Z", "author": {"login": "fengwang666"}, "path": "conf/nucleus-build.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+#\n+\n+nucleus.version=2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNDY1NA==", "bodyText": "Yes, even if it gets overridden, this is in source code, so is worth extra comments.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538714654", "createdAt": "2020-12-08T18:46:28Z", "author": {"login": "JamieHunter"}, "path": "conf/nucleus-build.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+#\n+# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+# SPDX-License-Identifier: Apache-2.0\n+#\n+\n+nucleus.version=2.0.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MDAxMw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTc3NTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODowMTozNVrOIBt0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0Nzo0OFrOIBwmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDE4MQ==", "bodyText": "Given that the version in the property file is not the preferred value and the real version can be overwritten by the version in the config (which I assume is from the nucleus recipe), is it correct to show the version in the property file here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538670181", "createdAt": "2020-12-08T18:01:35Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,10 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromBuildMetadataFile so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE,\n+                    DeviceConfiguration.getVersionFromBuildMetadataFile()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MjA1NQ==", "bodyText": "The \"real\" version in a production environment 100% will match. The only time this won't match is in our own local testing.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538672055", "createdAt": "2020-12-08T18:03:24Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,10 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromBuildMetadataFile so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE,\n+                    DeviceConfiguration.getVersionFromBuildMetadataFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDE4MQ=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMjk5OQ==", "bodyText": "Except when the customer does something themselves. Never say never.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538712999", "createdAt": "2020-12-08T18:44:09Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,10 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromBuildMetadataFile so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE,\n+                    DeviceConfiguration.getVersionFromBuildMetadataFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDE4MQ=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNDI4OQ==", "bodyText": "I'm fine with this for re:Invent, but we should review for post re:Invent - but at that time, we may have solution that uses recipe file.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538714289", "createdAt": "2020-12-08T18:45:54Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,10 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromBuildMetadataFile so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE,\n+                    DeviceConfiguration.getVersionFromBuildMetadataFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDE4MQ=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNTY4Mg==", "bodyText": "What do you mean by reading from the recipe post reinvent? Unless the customer explicitly messes it up, then the recipe will match this version. So reading from the recipe/config shouldn't have different results.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538715682", "createdAt": "2020-12-08T18:47:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/easysetup/GreengrassSetup.java", "diffHunk": "@@ -255,7 +254,10 @@ void performSetup() throws IOException, DeviceConfigurationException, URISyntaxE\n             return;\n         }\n         if (showVersion) {\n-            outStream.println(String.format(SHOW_VERSION_RESPONSE, KERNEL_VERSION));\n+            // Use getVersionFromBuildMetadataFile so that we don't need to startup the kernel which is slow and will\n+            // start creating files and directories which may not be desired\n+            outStream.println(String.format(SHOW_VERSION_RESPONSE,\n+                    DeviceConfiguration.getVersionFromBuildMetadataFile()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3MDE4MQ=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTgwMjA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODowNjoxNVrOIBuGTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1MDowMlrOIBwsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw==", "bodyText": "Is falling back to 2.0.0 desirable? I feel it can be even more dangerous. Let's say customers are running on 2.1.0, for some reason, the property file is deleted, now suddenly the device think the nucleus is 2.0.0, which can cause a lot of surprises.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538674767", "createdAt": "2020-12-08T18:06:15Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NjY0OA==", "bodyText": "The property file being deleted doesn't matter because the version is in the config so a running environment still has the correct version.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538676648", "createdAt": "2020-12-08T18:08:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MjQ5OA==", "bodyText": "Then why do we need the fallback?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538682498", "createdAt": "2020-12-08T18:13:58Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4Mzc4MA==", "bodyText": "We can't have no version, we need to have some fallback when literally everything else hasn't returned us an answer.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538683780", "createdAt": "2020-12-08T18:15:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5MDI3NQ==", "bodyText": "Additionally our integ tests will be using this fallback since they aren't running through the zip method, so there's no property file to read. And the config they load doesn't contain a version.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538690275", "createdAt": "2020-12-08T18:21:26Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMjYwOQ==", "bodyText": "I toyed with the idea of fallback to 0.0.0 when reviewing this - it would make it obvious that it's not getting a version.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538712609", "createdAt": "2020-12-08T18:43:35Z", "author": {"login": "JamieHunter"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNzI1Mw==", "bodyText": "So, do you want me to change this to 0.0.0?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/761#discussion_r538717253", "createdAt": "2020-12-08T18:50:02Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/deployment/DeviceConfiguration.java", "diffHunk": "@@ -463,6 +471,50 @@ private Topics getTopics(String parameterName) {\n                         CONFIGURATION_CONFIG_KEY, parameterName);\n     }\n \n+    /**\n+     * Get the nucleus version from the running configuration or nucleus zip.\n+     *\n+     * @return nucleus version\n+     */\n+    public String getNucleusVersion() {\n+        String version = null;\n+        // Prefer to get the version from the active config\n+        Topics componentTopic = kernel.findServiceTopic(getNucleusComponentName());\n+        if (componentTopic != null && componentTopic.find(VERSION_CONFIG_KEY) != null) {\n+            version = Coerce.toString(componentTopic.find(VERSION_CONFIG_KEY));\n+        }\n+        if (version == null) {\n+            return getVersionFromBuildMetadataFile();\n+        } else {\n+            return version;\n+        }\n+    }\n+\n+    /**\n+     * Get the Nucleus version from the ZIP file.\n+     *\n+     * @return version from the zip file, or a default if the version can't be determined\n+     */\n+    public static String getVersionFromBuildMetadataFile() {\n+        try {\n+            try (InputStream is = Files\n+                    .newInputStream(locateCurrentKernelUnpackDir().resolve(NUCLEUS_BUILD_METADATA_DIRECTORY)\n+                            .resolve(NUCLEUS_BUILD_METADATA_FILENAME))) {\n+                NUCLEUS_BUILD_PROPERTIES.load(is);\n+            }\n+\n+            String version = NUCLEUS_BUILD_PROPERTIES.getProperty(NUCLEUS_VERSION_BUILD_METADATA_KEY);\n+            if (version != null) {\n+                return version;\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            logger.atError().log(\"Unable to determine Greengrass version\", e);\n+        }\n+        logger.atError().log(\"Unable to determine Greengrass version from build metadata file. \"\n+                        + \"Build file not found, or version not found in file. Falling back to {}\", FALLBACK_VERSION);\n+        return FALLBACK_VERSION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY3NDc2Nw=="}, "originalCommit": {"oid": "875f527690076da3cd813c4630175fba7b93364a"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 135, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}