{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNzc2NTE5", "number": 135, "title": "Add flaky test finder workflow to run on push", "bodyText": "Issue #, if available:\nDescription of changes:\nAdds a new Python script and workflow to run on push to master. It runs mvn verify 10 times (configurable) to find tests which are flaky. If any flakiness is detected, it will create/update a GitHub issue see #136 for an example.\nWhy is this change necessary:\nThis change will help us to identify flaky tests or flaky implementations as soon as we push changes into master.\nHow was this change tested:\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-03-25T19:11:56Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135", "merged": true, "mergeCommit": {"oid": "d8c18977b7dfb048db62d582a0d5218a20059ea9"}, "closed": true, "closedAt": "2020-03-30T17:03:33Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRMcqpABqjMxNjU0MDAwODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSxlhVgFqTM4NDA1NTg5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fc5fe3f1174d6380c0ed1f3b759dc585cabfe6e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/0fc5fe3f1174d6380c0ed1f3b759dc585cabfe6e", "committedDate": "2020-03-25T19:11:23Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "128a670cbe163288de4555512907498717eafc92", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/128a670cbe163288de4555512907498717eafc92", "committedDate": "2020-03-25T19:12:51Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "128a670cbe163288de4555512907498717eafc92", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/128a670cbe163288de4555512907498717eafc92", "committedDate": "2020-03-25T19:12:51Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "f4868e438883db4ff6c833b955bd434bde0c8eae", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4868e438883db4ff6c833b955bd434bde0c8eae", "committedDate": "2020-03-25T19:16:35Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4868e438883db4ff6c833b955bd434bde0c8eae", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f4868e438883db4ff6c833b955bd434bde0c8eae", "committedDate": "2020-03-25T19:16:35Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "568cf4d5dc450954241842579f473efaa40930c3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/568cf4d5dc450954241842579f473efaa40930c3", "committedDate": "2020-03-25T19:34:30Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "568cf4d5dc450954241842579f473efaa40930c3", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/568cf4d5dc450954241842579f473efaa40930c3", "committedDate": "2020-03-25T19:34:30Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "609a5fb4b9e6838f9d8ad46e45938a8468a02515", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/609a5fb4b9e6838f9d8ad46e45938a8468a02515", "committedDate": "2020-03-25T20:02:54Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "609a5fb4b9e6838f9d8ad46e45938a8468a02515", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/609a5fb4b9e6838f9d8ad46e45938a8468a02515", "committedDate": "2020-03-25T20:02:54Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "2205c285a53b57964a10aad677890123b949bdf1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2205c285a53b57964a10aad677890123b949bdf1", "committedDate": "2020-03-25T20:17:00Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2205c285a53b57964a10aad677890123b949bdf1", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/2205c285a53b57964a10aad677890123b949bdf1", "committedDate": "2020-03-25T20:17:00Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "f136a982a93db9986f7fb57eae2dc43f2017e943", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f136a982a93db9986f7fb57eae2dc43f2017e943", "committedDate": "2020-03-25T21:57:12Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f136a982a93db9986f7fb57eae2dc43f2017e943", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/f136a982a93db9986f7fb57eae2dc43f2017e943", "committedDate": "2020-03-25T21:57:12Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "9ab4ce03be775fa227c9e56fdd972d393fd49dd6", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ab4ce03be775fa227c9e56fdd972d393fd49dd6", "committedDate": "2020-03-26T01:40:25Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab4ce03be775fa227c9e56fdd972d393fd49dd6", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/9ab4ce03be775fa227c9e56fdd972d393fd49dd6", "committedDate": "2020-03-26T01:40:25Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "a7cd059ef6324648ea9317eaff1f1d6c34b9399c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a7cd059ef6324648ea9317eaff1f1d6c34b9399c", "committedDate": "2020-03-26T01:42:49Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7cd059ef6324648ea9317eaff1f1d6c34b9399c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/a7cd059ef6324648ea9317eaff1f1d6c34b9399c", "committedDate": "2020-03-26T01:42:49Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "c60df4bffef1b969ff9638a079185491caefb1a4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c60df4bffef1b969ff9638a079185491caefb1a4", "committedDate": "2020-03-26T01:44:18Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c60df4bffef1b969ff9638a079185491caefb1a4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/c60df4bffef1b969ff9638a079185491caefb1a4", "committedDate": "2020-03-26T01:44:18Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "736c83db3bdf3e6accf584d5b48e11aae113ba6e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/736c83db3bdf3e6accf584d5b48e11aae113ba6e", "committedDate": "2020-03-26T01:45:08Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "736c83db3bdf3e6accf584d5b48e11aae113ba6e", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/736c83db3bdf3e6accf584d5b48e11aae113ba6e", "committedDate": "2020-03-26T01:45:08Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "1cc87b75681b64d94874b5a874c4b4d16478e2ef", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1cc87b75681b64d94874b5a874c4b4d16478e2ef", "committedDate": "2020-03-26T01:49:10Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cc87b75681b64d94874b5a874c4b4d16478e2ef", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1cc87b75681b64d94874b5a874c4b4d16478e2ef", "committedDate": "2020-03-26T01:49:10Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "ec691c2c46d1bedc8708f31d54d0efb8ad874d24", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ec691c2c46d1bedc8708f31d54d0efb8ad874d24", "committedDate": "2020-03-26T02:45:46Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec691c2c46d1bedc8708f31d54d0efb8ad874d24", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/ec691c2c46d1bedc8708f31d54d0efb8ad874d24", "committedDate": "2020-03-26T02:45:46Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cce179fe9c36b4ef4040f04b96a64d3ce597bff4", "committedDate": "2020-03-26T02:46:15Z", "message": "Add flaky test finder workflow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjQzMDk0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#pullrequestreview-382243094", "createdAt": "2020-03-26T17:30:20Z", "commit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozMDoyMFrOF8SRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzo0NzozOFrOF8TCWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1ODI4Ng==", "bodyText": "NIT: make 'failed_tests' a const", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398758286", "createdAt": "2020-03-26T17:30:20Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:\n+        print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+        print(json.dumps(results), flush=True)\n+\n+        gh = GitHub(token=token)\n+        title = \"[Bot] Flaky Test(s) Identified\"\n+        existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+        if existing_issues[0] == 200:\n+            existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+        else:\n+            existing_issues = []\n+\n+        body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+               f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+        for test_class, v in results.items():\n+            for test_case, failures in v.items():\n+                body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+                unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+                body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+        if existing_issues:\n+            issue_number = existing_issues[0][\"number\"]\n+            updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                      \"title\": title})\n+            print(updated_issue, flush=True)\n+        else:\n+            issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                               \"title\": title})\n+            print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    if not os.path.exists(report_dir):\n+        return\n+    reports = list(filter(lambda f: f.startswith(\"TEST-\") and f.endswith(\".xml\"), os.listdir(report_dir)))\n+    for r in reports:\n+        tree = ET.parse(report_dir + r)\n+        for testcase in tree.getroot().findall(\"./testcase\"):\n+            failure = None\n+            # Find failures and errors (there's no important difference between these for us)\n+            if testcase.find(\"failure\") is not None:\n+                failure = testcase.find(\"failure\").text\n+            elif testcase.find(\"error\") is not None:\n+                failure = testcase.find(\"error\").text\n+            if failure is not None:\n+                previous_results[testcase.get(\"classname\")][testcase.get(\"name\")] \\\n+                    .append({\"iteration\": iteration, \"failure\": failure})\n+                if not os.path.exists('failed_tests'):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1OTY0MQ==", "bodyText": "I think in Python3.2+ you can do os.makedirs(\"path/to/directory\", exist_ok=True)\nhttps://docs.python.org/3/library/os.html", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398759641", "createdAt": "2020-03-26T17:31:50Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:\n+        print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+        print(json.dumps(results), flush=True)\n+\n+        gh = GitHub(token=token)\n+        title = \"[Bot] Flaky Test(s) Identified\"\n+        existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+        if existing_issues[0] == 200:\n+            existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+        else:\n+            existing_issues = []\n+\n+        body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+               f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+        for test_class, v in results.items():\n+            for test_case, failures in v.items():\n+                body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+                unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+                body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+        if existing_issues:\n+            issue_number = existing_issues[0][\"number\"]\n+            updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                      \"title\": title})\n+            print(updated_issue, flush=True)\n+        else:\n+            issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                               \"title\": title})\n+            print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    if not os.path.exists(report_dir):\n+        return\n+    reports = list(filter(lambda f: f.startswith(\"TEST-\") and f.endswith(\".xml\"), os.listdir(report_dir)))\n+    for r in reports:\n+        tree = ET.parse(report_dir + r)\n+        for testcase in tree.getroot().findall(\"./testcase\"):\n+            failure = None\n+            # Find failures and errors (there's no important difference between these for us)\n+            if testcase.find(\"failure\") is not None:\n+                failure = testcase.find(\"failure\").text\n+            elif testcase.find(\"error\") is not None:\n+                failure = testcase.find(\"error\").text\n+            if failure is not None:\n+                previous_results[testcase.get(\"classname\")][testcase.get(\"name\")] \\\n+                    .append({\"iteration\": iteration, \"failure\": failure})\n+                if not os.path.exists('failed_tests'):\n+                    os.mkdir('failed_tests')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MTA3NQ==", "bodyText": "NIT: make f'failed_tests/{iteration}-{testcase.get(\"classname\")}.' a variable", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398761075", "createdAt": "2020-03-26T17:33:49Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:\n+        print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+        print(json.dumps(results), flush=True)\n+\n+        gh = GitHub(token=token)\n+        title = \"[Bot] Flaky Test(s) Identified\"\n+        existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+        if existing_issues[0] == 200:\n+            existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+        else:\n+            existing_issues = []\n+\n+        body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+               f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+        for test_class, v in results.items():\n+            for test_case, failures in v.items():\n+                body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+                unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+                body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+        if existing_issues:\n+            issue_number = existing_issues[0][\"number\"]\n+            updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                      \"title\": title})\n+            print(updated_issue, flush=True)\n+        else:\n+            issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                               \"title\": title})\n+            print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    if not os.path.exists(report_dir):\n+        return\n+    reports = list(filter(lambda f: f.startswith(\"TEST-\") and f.endswith(\".xml\"), os.listdir(report_dir)))\n+    for r in reports:\n+        tree = ET.parse(report_dir + r)\n+        for testcase in tree.getroot().findall(\"./testcase\"):\n+            failure = None\n+            # Find failures and errors (there's no important difference between these for us)\n+            if testcase.find(\"failure\") is not None:\n+                failure = testcase.find(\"failure\").text\n+            elif testcase.find(\"error\") is not None:\n+                failure = testcase.find(\"error\").text\n+            if failure is not None:\n+                previous_results[testcase.get(\"classname\")][testcase.get(\"name\")] \\\n+                    .append({\"iteration\": iteration, \"failure\": failure})\n+                if not os.path.exists('failed_tests'):\n+                    os.mkdir('failed_tests')\n+                # Save test stdout and stderr\n+                if testcase.find(\"system-out\") is not None:\n+                    with open(f'failed_tests/{iteration}-{testcase.get(\"classname\")}.'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MjYxOQ==", "bodyText": "Or you can do if (len(results) == 0) { return;}", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398762619", "createdAt": "2020-03-26T17:35:55Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2ODMyNw==", "bodyText": "can you add a comment of the format here? It took me a while to figure out results is a dict of [className][testCaseName] - List of Failed Iteration Details", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398768327", "createdAt": "2020-03-26T17:44:05Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2OTk2OQ==", "bodyText": "Is there a way to query an issue given the title? Or you can only list and search?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398769969", "createdAt": "2020-03-26T17:46:28Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:\n+        print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+        print(json.dumps(results), flush=True)\n+\n+        gh = GitHub(token=token)\n+        title = \"[Bot] Flaky Test(s) Identified\"\n+        existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc3MDc3OA==", "bodyText": "Same here: if failure is None: return\nwe can save one level of indentation", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r398770778", "createdAt": "2020-03-26T17:47:38Z", "author": {"login": "ShirleyZheng92"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,106 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) > 0:\n+        print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+        print(json.dumps(results), flush=True)\n+\n+        gh = GitHub(token=token)\n+        title = \"[Bot] Flaky Test(s) Identified\"\n+        existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+        if existing_issues[0] == 200:\n+            existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+        else:\n+            existing_issues = []\n+\n+        body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+               f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+        for test_class, v in results.items():\n+            for test_case, failures in v.items():\n+                body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+                unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+                body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+        if existing_issues:\n+            issue_number = existing_issues[0][\"number\"]\n+            updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                      \"title\": title})\n+            print(updated_issue, flush=True)\n+        else:\n+            issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                               \"title\": title})\n+            print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    if not os.path.exists(report_dir):\n+        return\n+    reports = list(filter(lambda f: f.startswith(\"TEST-\") and f.endswith(\".xml\"), os.listdir(report_dir)))\n+    for r in reports:\n+        tree = ET.parse(report_dir + r)\n+        for testcase in tree.getroot().findall(\"./testcase\"):\n+            failure = None\n+            # Find failures and errors (there's no important difference between these for us)\n+            if testcase.find(\"failure\") is not None:\n+                failure = testcase.find(\"failure\").text\n+            elif testcase.find(\"error\") is not None:\n+                failure = testcase.find(\"error\").text\n+            if failure is not None:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8426c77a0b4d536d2590ad4982fa2cf0818820", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d8426c77a0b4d536d2590ad4982fa2cf0818820", "committedDate": "2020-03-26T18:59:56Z", "message": "Add flaky test finder workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cce179fe9c36b4ef4040f04b96a64d3ce597bff4", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/cce179fe9c36b4ef4040f04b96a64d3ce597bff4", "committedDate": "2020-03-26T02:46:15Z", "message": "Add flaky test finder workflow"}, "afterCommit": {"oid": "1d8426c77a0b4d536d2590ad4982fa2cf0818820", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1d8426c77a0b4d536d2590ad4982fa2cf0818820", "committedDate": "2020-03-26T18:59:56Z", "message": "Add flaky test finder workflow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDA5Mzc1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#pullrequestreview-382409375", "createdAt": "2020-03-26T20:54:18Z", "commit": {"oid": "1d8426c77a0b4d536d2590ad4982fa2cf0818820"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99606e793a61174b71580e69af2fb8cd403fcfcd", "author": {"user": {"login": "ShirleyZheng92", "name": "Xueli Zheng "}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/99606e793a61174b71580e69af2fb8cd403fcfcd", "committedDate": "2020-03-26T22:58:32Z", "message": "Merge branch 'master' into flake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305a10103c9d2d40f42c36ffdc00fc9ab855f13a", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/305a10103c9d2d40f42c36ffdc00fc9ab855f13a", "committedDate": "2020-03-27T16:54:42Z", "message": "Merge branch 'master' into flake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a096c42d6f926b1918067217aaa805c8d51c4e2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/3a096c42d6f926b1918067217aaa805c8d51c4e2", "committedDate": "2020-03-27T20:57:48Z", "message": "Merge branch 'master' into flake"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjM3NzI5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#pullrequestreview-383237729", "createdAt": "2020-03-27T22:39:19Z", "commit": {"oid": "3a096c42d6f926b1918067217aaa805c8d51c4e2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjozOToyMFrOF9Dybg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMzowMDo0NlrOF9EIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2OTUxOA==", "bodyText": "Why \"./testcase\"? Should it be just \"testcase\"?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r399569518", "createdAt": "2020-03-27T22:39:20Z", "author": {"login": "abanthiy"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,111 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+\n+    # Dict for results as a dict of classname -> method name -> [failure details]\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) == 0:\n+        return\n+\n+    print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+    print(json.dumps(results), flush=True)\n+\n+    gh = GitHub(token=token)\n+    title = \"[Bot] Flaky Test(s) Identified\"\n+    existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+    if existing_issues[0] == 200:\n+        existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+    else:\n+        existing_issues = []\n+\n+    body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+           f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+    for test_class, v in results.items():\n+        for test_case, failures in v.items():\n+            body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+            unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+            body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+    if existing_issues:\n+        issue_number = existing_issues[0][\"number\"]\n+        updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                  \"title\": title})\n+        print(updated_issue, flush=True)\n+    else:\n+        issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                           \"title\": title})\n+        print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    failed_test_dir = \"failed_tests/\"\n+\n+    if not os.path.exists(report_dir):\n+        return\n+    reports = list(filter(lambda f: f.startswith(\"TEST-\") and f.endswith(\".xml\"), os.listdir(report_dir)))\n+    for r in reports:\n+        tree = ET.parse(report_dir + r)\n+        for testcase in tree.getroot().findall(\"./testcase\"):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a096c42d6f926b1918067217aaa805c8d51c4e2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTQzMQ==", "bodyText": "May take this as argument since caller workflow is uploading the same directory", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r399571431", "createdAt": "2020-03-27T22:46:36Z", "author": {"login": "abanthiy"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,111 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+\n+    # Dict for results as a dict of classname -> method name -> [failure details]\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) == 0:\n+        return\n+\n+    print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+    print(json.dumps(results), flush=True)\n+\n+    gh = GitHub(token=token)\n+    title = \"[Bot] Flaky Test(s) Identified\"\n+    existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+    if existing_issues[0] == 200:\n+        existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+    else:\n+        existing_issues = []\n+\n+    body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+           f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+    for test_class, v in results.items():\n+        for test_case, failures in v.items():\n+            body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+            unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+            body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+    if existing_issues:\n+        issue_number = existing_issues[0][\"number\"]\n+        updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                  \"title\": title})\n+        print(updated_issue, flush=True)\n+    else:\n+        issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.post(body={\"body\": body,\n+                                                                           \"title\": title})\n+        print(issue, flush=True)\n+\n+\n+def parse_test_results(iteration, previous_results):\n+    report_dir = \"target/surefire-reports/\"\n+    failed_test_dir = \"failed_tests/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a096c42d6f926b1918067217aaa805c8d51c4e2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3NTE3Nw==", "bodyText": "Are we going to override the issue. If the failures in previous run were different that in the latest run then will the previous run be oerridden?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#discussion_r399575177", "createdAt": "2020-03-27T23:00:46Z", "author": {"login": "abanthiy"}, "path": ".github/scripts/flake.py", "diffHunk": "@@ -0,0 +1,111 @@\n+#  Copyright Amazon.com Inc. or its affiliates.\n+#  SPDX-License-Identifier: Apache-2.0\n+\n+import argparse\n+import json\n+import os\n+import subprocess\n+import xml.etree.ElementTree as ET\n+from collections import defaultdict\n+\n+from agithub.GitHub import GitHub\n+\n+\n+def main():\n+    parser = argparse.ArgumentParser()\n+    parser.add_argument('--cmd', type=str, help='Command to run')\n+    parser.add_argument('-i', type=int, help='Iterations')\n+    parser.add_argument('--token', type=str, help='GitHub token')\n+    parser.add_argument('-ff', action=\"store_true\", help='Fail fast. If enabled, quit '\n+                                                         'after the first failure')\n+    args = parser.parse_args()\n+\n+    command = args.cmd\n+    iterations = args.i\n+    token = args.token\n+\n+    # Dict for results as a dict of classname -> method name -> [failure details]\n+    results = defaultdict(lambda: defaultdict(list))\n+\n+    for i in range(0, iterations):\n+        print(f\"Running iteration {i + 1} of {iterations}\", flush=True)\n+        process = subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)\n+        # If the tests failed, then we should check which test(s) failed in order to report it\n+        if process.returncode != 0:\n+            print(f\"Iteration {i + 1} failed, saving and parsing results now\", flush=True)\n+            parse_test_results(i, results)\n+            if args.ff:\n+                break\n+        else:\n+            print(\"Succeeded with no failure\", flush=True)\n+\n+    if len(results) == 0:\n+        return\n+\n+    print(\"Found some flakiness. Creating/updating GitHub issue.\", flush=True)\n+    print(json.dumps(results), flush=True)\n+\n+    gh = GitHub(token=token)\n+    title = \"[Bot] Flaky Test(s) Identified\"\n+    existing_issues = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues.get(creator=\"app/github-actions\")\n+    if existing_issues[0] == 200:\n+        existing_issues = list(filter(lambda i: title in i[\"title\"], existing_issues[1]))\n+    else:\n+        existing_issues = []\n+\n+    body = f\"Flaky test(s) found for commit {os.getenv('GITHUB_SHA')}.\\n\" \\\n+           f\" See the uploaded artifacts from the action for details.\\n\\n\"\n+    for test_class, v in results.items():\n+        for test_case, failures in v.items():\n+            body += f\"- {test_class}.{test_case} failed {len(failures)} times over {iterations} iterations \"\n+            unique_failure_reasons = set(map(lambda f: f[\"failure\"], failures))\n+            body += f\"with {len(unique_failure_reasons)} unique failures.\\n\"\n+\n+    if existing_issues:\n+        issue_number = existing_issues[0][\"number\"]\n+        updated_issue = gh.repos[os.getenv(\"GITHUB_REPOSITORY\")].issues[issue_number].patch(body={\"body\": body,\n+                                                                                                  \"title\": title})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a096c42d6f926b1918067217aaa805c8d51c4e2"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa280c2446b78ab17d4996633383fb30048109c", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/8fa280c2446b78ab17d4996633383fb30048109c", "committedDate": "2020-03-27T23:06:32Z", "message": "Merge branch 'master' into flake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fbfa6001301b4c600e62fe92d1319462c6851f2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/5fbfa6001301b4c600e62fe92d1319462c6851f2", "committedDate": "2020-03-27T23:16:42Z", "message": "Update for comments, increase E2E timeout from 5 minutes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjYyMzEy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#pullrequestreview-383262312", "createdAt": "2020-03-28T00:25:37Z", "commit": {"oid": "5fbfa6001301b4c600e62fe92d1319462c6851f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDU1ODk1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/135#pullrequestreview-384055895", "createdAt": "2020-03-30T17:03:03Z", "commit": {"oid": "5fbfa6001301b4c600e62fe92d1319462c6851f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2378, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}