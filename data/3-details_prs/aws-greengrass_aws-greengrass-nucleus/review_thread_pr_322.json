{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNjE2NzQy", "number": 322, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NDoyMVrOEQSQZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0OTozMlrOEQSYIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTExNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NDoyMVrOG0WmUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyNToyMFrOG0kwCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTM5Mw==", "bodyText": "Lets key the credentials by role name or url. This prevents accidental overrides of credentials, lets say when we update the role in the config.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457549393", "createdAt": "2020-07-20T16:44:21Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MTI1OQ==", "bodyText": "Created a cache map with iotCredentialsPath as the key", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457781259", "createdAt": "2020-07-21T01:25:20Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTM5Mw=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTExOTUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NDo0OFrOG0WnTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyNjowOVrOG0kw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTY0NQ==", "bodyText": "Do you want to create a cached POJO  instead of different fields here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457549645", "createdAt": "2020-07-20T16:44:48Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;\n+\n+    private int cachedResponseCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MTQ3OQ==", "bodyText": "Created an object with fields credentials, responseCode and expiry", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457781479", "createdAt": "2020-07-21T01:26:09Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -34,12 +39,22 @@\n     private static final String EXPIRATION_DOWNSTREAM_STR = \"Expiration\";\n     private static final ObjectMapper OBJECT_MAPPER =\n             new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+    public static final int TIME_BEFORE_CACHE_EXPIRE_IN_MIN = 5;\n+\n     private final String iotCredentialsPath;\n \n     private final IotCloudHelper iotCloudHelper;\n \n     private final IotConnectionManager iotConnectionManager;\n \n+    private Clock clock = Clock.systemUTC();\n+\n+    private Instant cacheExpiry = Instant.now(clock);\n+\n+    private byte[] cachedCredentials;\n+\n+    private int cachedResponseCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0OTY0NQ=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTEyNzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0NzowOFrOG0WspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyNjozNFrOG0kxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MTAxMg==", "bodyText": "Lets always log the real expiry time, easier to read logs, then i dont have to do the math of +5 to debug what happened.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457551012", "createdAt": "2020-07-20T16:47:08Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MTU3NQ==", "bodyText": "Changed newExpiry to expiry in log", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457781575", "createdAt": "2020-07-21T01:26:34Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MTAxMg=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTEzNzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0OTozMlrOG0Wymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTozMzo1MFrOG0k5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MjUzOQ==", "bodyText": "If parseExpiry or translate throws, you will set credentials to empty. Do you want that?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457552539", "createdAt": "2020-07-20T16:49:32Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),\n+                            TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                } else {\n+                    LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                }\n+            }\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scenarios\n             LOGGER.error(\"Encountered error while fetching credentials\", e);\n         }\n+\n+        cacheExpiry = newExpiry;\n+        cachedCredentials = response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1Mjk0Mg==", "bodyText": "Lets add test case for those cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457552942", "createdAt": "2020-07-20T16:50:11Z", "author": {"login": "prateek-y"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),\n+                            TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                } else {\n+                    LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                }\n+            }\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scenarios\n             LOGGER.error(\"Encountered error while fetching credentials\", e);\n         }\n+\n+        cacheExpiry = newExpiry;\n+        cachedCredentials = response;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MjUzOQ=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MzY5MA==", "bodyText": "If parseExpiry or translate throws, set response to \"Bad TES response: \" + credentials\nAlso added unit test for this.\nHad to create another try-catch for this because iotCloudHelper could also throw AWSIotException and that needs to be distinguished from these two to create appropriate error responses.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/322#discussion_r457783690", "createdAt": "2020-07-21T01:33:50Z", "author": {"login": "popanmol"}, "path": "src/main/java/com/aws/iot/evergreen/tes/CredentialRequestHandler.java", "diffHunk": "@@ -67,18 +82,49 @@ public void handle(final HttpExchange exchange) throws IOException {\n      * @return AWS credentials from cloud.\n      */\n     public byte[] getCredentials() {\n-        byte[] response = {};\n         LOGGER.debug(\"Got request for credentials\");\n-        // TODO: Add cache\n+\n+        if (areCredentialsValid()) {\n+            return Arrays.copyOf(cachedCredentials, cachedCredentials.length);\n+        }\n+        \n+        byte[] response = {};\n+        Instant newExpiry = cacheExpiry;\n+\n         try {\n             final String credentials = iotCloudHelper.sendHttpRequest(iotConnectionManager,\n                     iotCredentialsPath,\n                     IOT_CREDENTIALS_HTTP_VERB, null);\n             response = translateToAwsSdkFormat(credentials);\n+\n+            String expiryString = parseExpiryFromResponse(credentials);\n+            Instant expiry = Instant.parse(expiryString);\n+\n+            if (expiry.isBefore(Instant.now(clock))) {\n+                String responseString = \"TES responded with expired credentials: \" + credentials;\n+                response = responseString.getBytes(StandardCharsets.UTF_8);\n+                cachedResponseCode = HttpURLConnection.HTTP_INTERNAL_ERROR;\n+                LOGGER.error(\"Unable to cache expired credentials which expired at {}\", expiry.toString());\n+            } else {\n+                newExpiry = expiry.minus(Duration.ofMinutes(TIME_BEFORE_CACHE_EXPIRE_IN_MIN));\n+                cachedResponseCode = HttpURLConnection.HTTP_OK;\n+\n+                if (newExpiry.isBefore(Instant.now(clock))) {\n+                    LOGGER.warn(\"Can't cache credentials as new credentials {} will expire in less than {} minutes\",\n+                            newExpiry.toString(),\n+                            TIME_BEFORE_CACHE_EXPIRE_IN_MIN);\n+                } else {\n+                    LOGGER.info(\"Received IAM credentials that will be cached until {}\", newExpiry.toString());\n+                }\n+            }\n         } catch (AWSIotException e) {\n             // TODO: Generate 4xx, 5xx responses for all error scenarios\n             LOGGER.error(\"Encountered error while fetching credentials\", e);\n         }\n+\n+        cacheExpiry = newExpiry;\n+        cachedCredentials = response;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU1MjUzOQ=="}, "originalCommit": {"oid": "66ba55f6eb430360ff7ebfeedbce82f908975a03"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4424, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}