{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzEwNjc4", "number": 264, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNDowMVrOEB10Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1ODoxMFrOECTPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY1NzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNDowMVrOGd7uag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMjozNFrOGerZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MDQyNg==", "bodyText": "call validate here?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/264#discussion_r434040426", "createdAt": "2020-06-02T17:14:01Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -46,16 +46,53 @@\n     private final Validator regionValidator;\n \n     /**\n-     * Constructor.\n+     * Constructor used to read device cinfiguration from the config store.\n      *\n      * @param kernel Kernel to get config from\n      */\n     @Inject\n-    @SuppressWarnings(\"PMD.NullAssignment\")\n     public DeviceConfiguration(Kernel kernel) {\n         this.kernel = kernel;\n-        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n-        regionValidator = (newV, old) -> {\n+        deTildeValidator = getDeTildeValidator(kernel);\n+        regionValidator = getRegionValidator();\n+        validate();\n+    }\n+\n+    /**\n+     * Constructor to use when setting the device configuration to kernel config.\n+     *\n+     * @param kernel              kernel to set config for\n+     * @param thingName           IoT thing name\n+     * @param iotDataEndpoint     IoT data endpoint\n+     * @param iotCredEndpoint     IoT cert endpoint\n+     * @param privateKeyPath      private key location on device\n+     * @param certificateFilePath certificate location on device\n+     * @param rootCaFilePath      downloaded RootCA location on device\n+     * @param awsRegion           aws region for the device\n+     */\n+    public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n+                               String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n+                               String awsRegion) {\n+        this.kernel = kernel;\n+        deTildeValidator = getDeTildeValidator(kernel);\n+        regionValidator = getRegionValidator();\n+\n+        getThingName().withValue(thingName);\n+        getIotDataEndpoint().withValue(iotDataEndpoint);\n+        getCertificateFilePath().withValue(iotCredEndpoint);\n+        getPrivateKeyFilePath().withValue(privateKeyPath);\n+        getCertificateFilePath().withValue(certificateFilePath);\n+        getRootCAFilePath().withValue(rootCaFilePath);\n+        getAWSRegion().withValue(awsRegion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c849713069042c09804bb74cbd03fa7a61f16277"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTM4Mg==", "bodyText": "It wasn't exactly necessary since the other place where you read it always validates, which would make sure even if config is updated adhoc it is valid when it's used, but I've made this change now", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/264#discussion_r434821382", "createdAt": "2020-06-03T20:02:34Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/iot/evergreen/deployment/DeviceConfiguration.java", "diffHunk": "@@ -46,16 +46,53 @@\n     private final Validator regionValidator;\n \n     /**\n-     * Constructor.\n+     * Constructor used to read device cinfiguration from the config store.\n      *\n      * @param kernel Kernel to get config from\n      */\n     @Inject\n-    @SuppressWarnings(\"PMD.NullAssignment\")\n     public DeviceConfiguration(Kernel kernel) {\n         this.kernel = kernel;\n-        deTildeValidator = (newV, old) -> kernel.deTilde(Coerce.toString(newV));\n-        regionValidator = (newV, old) -> {\n+        deTildeValidator = getDeTildeValidator(kernel);\n+        regionValidator = getRegionValidator();\n+        validate();\n+    }\n+\n+    /**\n+     * Constructor to use when setting the device configuration to kernel config.\n+     *\n+     * @param kernel              kernel to set config for\n+     * @param thingName           IoT thing name\n+     * @param iotDataEndpoint     IoT data endpoint\n+     * @param iotCredEndpoint     IoT cert endpoint\n+     * @param privateKeyPath      private key location on device\n+     * @param certificateFilePath certificate location on device\n+     * @param rootCaFilePath      downloaded RootCA location on device\n+     * @param awsRegion           aws region for the device\n+     */\n+    public DeviceConfiguration(Kernel kernel, String thingName, String iotDataEndpoint, String iotCredEndpoint,\n+                               String privateKeyPath, String certificateFilePath, String rootCaFilePath,\n+                               String awsRegion) {\n+        this.kernel = kernel;\n+        deTildeValidator = getDeTildeValidator(kernel);\n+        regionValidator = getRegionValidator();\n+\n+        getThingName().withValue(thingName);\n+        getIotDataEndpoint().withValue(iotDataEndpoint);\n+        getCertificateFilePath().withValue(iotCredEndpoint);\n+        getPrivateKeyFilePath().withValue(privateKeyPath);\n+        getCertificateFilePath().withValue(certificateFilePath);\n+        getRootCAFilePath().withValue(rootCaFilePath);\n+        getAWSRegion().withValue(awsRegion);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MDQyNg=="}, "originalCommit": {"oid": "c849713069042c09804bb74cbd03fa7a61f16277"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ3ODc4OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1ODoxMFrOGerQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1ODoxMFrOGerQrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxOTI0NQ==", "bodyText": "this isn't needed.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/264#discussion_r434819245", "createdAt": "2020-06-03T19:58:10Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -74,6 +75,20 @@ void GIVEN_config_missing_main_WHEN_kernel_launches_THEN_throw_RuntimeException(\n         assertThrows(RuntimeException.class, () -> kernel.launch());\n     }\n \n+    @Test\n+    void GIVEN_config_path_not_given_WHEN_kernel_launches_THEN_load_empty_main_service() throws Exception {\n+        // launch kernel without config arg\n+        kernel = new Kernel();\n+        kernel.parseArgs().toString();\n+        kernel.launch();\n+\n+        // verify\n+        EvergreenService mainService = kernel.locate(\"main\");\n+        assertNotNull(mainService);\n+\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c14b91f735bb05c126978f6e1642f1d26aef3b3e"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}