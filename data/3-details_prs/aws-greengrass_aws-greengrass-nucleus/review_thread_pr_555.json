{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODc1MDYy", "number": 555, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTozNzowNFrOEwf6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0NDoxM1rOEzFaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjg5OTc3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTozNzowNFrOHmG3mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjoxMDo0N1rOHmIXpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMDQ3NA==", "bodyText": "not really needed.\nBut definitely do call kernel.shutdown()", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509720474", "createdAt": "2020-10-21T21:37:04Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -52,6 +58,27 @@\n     @BeforeEach\n     void beforeEach() {\n         kernel = new Kernel();\n+        kernel.getContext().put(RunWithArtifactHandler.class, new NoOpArtifactHandler(kernel.getNucleusPaths()));\n+    }\n+\n+    @AfterEach\n+    void cleanup() {\n+        kernel.getContext().remove(RunWithArtifactHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NDI0OQ==", "bodyText": "There's stuff (artifacts and recipes) that seem to stay between tests so I wanted to explicitly clean up", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509744249", "createdAt": "2020-10-21T22:09:07Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -52,6 +58,27 @@\n     @BeforeEach\n     void beforeEach() {\n         kernel = new Kernel();\n+        kernel.getContext().put(RunWithArtifactHandler.class, new NoOpArtifactHandler(kernel.getNucleusPaths()));\n+    }\n+\n+    @AfterEach\n+    void cleanup() {\n+        kernel.getContext().remove(RunWithArtifactHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMDQ3NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NTA2Mg==", "bodyText": "How does calling \"remove\" do anything? It doesn't do anything.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509745062", "createdAt": "2020-10-21T22:10:47Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -52,6 +58,27 @@\n     @BeforeEach\n     void beforeEach() {\n         kernel = new Kernel();\n+        kernel.getContext().put(RunWithArtifactHandler.class, new NoOpArtifactHandler(kernel.getNucleusPaths()));\n+    }\n+\n+    @AfterEach\n+    void cleanup() {\n+        kernel.getContext().remove(RunWithArtifactHandler.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMDQ3NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjkxNjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0MTowNVrOHmHCYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjoxMDo0NVrOHmIXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMzIzNQ==", "bodyText": "formatting", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509723235", "createdAt": "2020-10-21T21:41:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -350,23 +371,52 @@ public void handleError() throws InterruptedException {\n      * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n      * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n      * user/group/shell that was configured when it started.\n+     */\n+    protected boolean storeInitialRunWithConfiguration() {\n+        Optional<RunWith> opt = runWithGenerator.generate(config);\n+        if (opt.isPresent()) {\n+            runWith = opt.get();\n+\n+            LogEventBuilder logEvent  = logger.atDebug().kv(\"user\", runWith.getUser());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NTA1NA==", "bodyText": "not sure how that got through the checkstyle", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509745054", "createdAt": "2020-10-21T22:10:45Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -350,23 +371,52 @@ public void handleError() throws InterruptedException {\n      * Store user, group, and shell that will be used to run the service. This should be used throughout the lifecycle.\n      * This information can change with a deployment, but service *must* execute the lifecycle steps with the same\n      * user/group/shell that was configured when it started.\n+     */\n+    protected boolean storeInitialRunWithConfiguration() {\n+        Optional<RunWith> opt = runWithGenerator.generate(config);\n+        if (opt.isPresent()) {\n+            runWith = opt.get();\n+\n+            LogEventBuilder logEvent  = logger.atDebug().kv(\"user\", runWith.getUser());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMzIzNQ=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjkyMTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0MjoxOFrOHmHGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjowMzowMFrOHmIEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNDI2NA==", "bodyText": "Why only Unix?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509724264", "createdAt": "2020-10-21T21:42:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.UnixPlatform;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import javax.inject.Inject;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final UnixPlatform unixPlatform;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNDY5Nw==", "bodyText": "Even if we only support Unix, shouldn't this class take a Platform as the field?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509724697", "createdAt": "2020-10-21T21:42:48Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.UnixPlatform;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import javax.inject.Inject;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final UnixPlatform unixPlatform;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNDI2NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyOTYwOA==", "bodyText": "My preference would be to call into the Platform instance for any platform specific stuff. Everything which isn't inside of Platform shouldn't care (ideally).", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509729608", "createdAt": "2020-10-21T21:49:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.UnixPlatform;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import javax.inject.Inject;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final UnixPlatform unixPlatform;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNDI2NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0MDIzMw==", "bodyText": "The windows stuff is going to be different, and I wanted to be able to mock so I didn't want to use Platform.getInstance()\nI'll see if I can abstract this away nicely", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509740233", "createdAt": "2020-10-21T22:03:00Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.UnixPlatform;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import javax.inject.Inject;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final UnixPlatform unixPlatform;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNDI2NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjkzNDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NTowOVrOHmHP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjowMjo0MVrOHmID2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNjY3NA==", "bodyText": "can we hoist this to the Platform class? That way we can implement it on windows eventually.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509726674", "createdAt": "2020-10-21T21:45:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -184,8 +271,108 @@ public UserDecorator withGroup(String group) {\n     public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n         Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n         if (permission.getOwnerUser() != null) {\n-            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n-                    .lookupPrincipalByName(permission.getOwnerUser()));\n+            setPathOwner(permission, path, false);\n+        }\n+    }\n+\n+\n+    @Override\n+    public Optional<String> lookupPrimaryGroup(String user) {\n+        // run `id` command to load group (-g) name (n)\n+        StringBuilder out = new StringBuilder();\n+        StringBuilder err = new StringBuilder();\n+        try (Exec exec = new Exec()) {\n+            exec.withExec(\"id\", \"-gn\", user)\n+                .withOut(out::append)\n+                .withErr(err::append)\n+                .exec();\n+        } catch (IOException | InterruptedException e) {\n+            logger.atError().setCause(e).setEventType(\"lookup-primary-group\")\n+                    .log(\"Error while looking up primary group for %s\", user);\n+            return Optional.empty();\n+        }\n+\n+        if (!err.toString().isEmpty()) {\n+            logger.atWarn().setEventType(\"lookup-primary-group\")\n+                    .log(\"Error while lookup up primary group for %s: '%s'\",\n+                    user, err.toString());\n+            return Optional.empty();\n+        }\n+\n+        String group = out.toString().trim();\n+        if (group.isEmpty()) {\n+            logger.atWarn().setEventType(\"lookup-primary-group\")\n+                    .log(\"Empty primary group returned for %s\", user);\n+            return Optional.empty();\n+        }\n+        return Optional.of(group);\n+    }\n+\n+    /**\n+     * Set the owner of a path.\n+     *\n+     * @param permission a permission object containing owner user/group\n+     * @param path the path to change.\n+     * @param recurse whether to recursively set owner for directory paths.\n+     * @throws IOException if an error occurs while updating the ownership.\n+     */\n+    public void setPathOwner(FileSystemPermission permission, Path path, boolean recurse) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczOTk5NQ==", "bodyText": "yeah - I can have a noop implementation in Windows", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509739995", "createdAt": "2020-10-21T22:02:41Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -184,8 +271,108 @@ public UserDecorator withGroup(String group) {\n     public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n         Files.setPosixFilePermissions(path, permission.toPosixFilePermissions());\n         if (permission.getOwnerUser() != null) {\n-            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n-                    .lookupPrincipalByName(permission.getOwnerUser()));\n+            setPathOwner(permission, path, false);\n+        }\n+    }\n+\n+\n+    @Override\n+    public Optional<String> lookupPrimaryGroup(String user) {\n+        // run `id` command to load group (-g) name (n)\n+        StringBuilder out = new StringBuilder();\n+        StringBuilder err = new StringBuilder();\n+        try (Exec exec = new Exec()) {\n+            exec.withExec(\"id\", \"-gn\", user)\n+                .withOut(out::append)\n+                .withErr(err::append)\n+                .exec();\n+        } catch (IOException | InterruptedException e) {\n+            logger.atError().setCause(e).setEventType(\"lookup-primary-group\")\n+                    .log(\"Error while looking up primary group for %s\", user);\n+            return Optional.empty();\n+        }\n+\n+        if (!err.toString().isEmpty()) {\n+            logger.atWarn().setEventType(\"lookup-primary-group\")\n+                    .log(\"Error while lookup up primary group for %s: '%s'\",\n+                    user, err.toString());\n+            return Optional.empty();\n+        }\n+\n+        String group = out.toString().trim();\n+        if (group.isEmpty()) {\n+            logger.atWarn().setEventType(\"lookup-primary-group\")\n+                    .log(\"Empty primary group returned for %s\", user);\n+            return Optional.empty();\n+        }\n+        return Optional.of(group);\n+    }\n+\n+    /**\n+     * Set the owner of a path.\n+     *\n+     * @param permission a permission object containing owner user/group\n+     * @param path the path to change.\n+     * @param recurse whether to recursively set owner for directory paths.\n+     * @throws IOException if an error occurs while updating the ownership.\n+     */\n+    public void setPathOwner(FileSystemPermission permission, Path path, boolean recurse) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNjY3NA=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjkzODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NTo1N1rOHmHSkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NTo1N1rOHmHSkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyNzM3OA==", "bodyText": "hoist to Platform and call is isSuperUser or something like that. On windows we'd need to be Administrator.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509727378", "createdAt": "2020-10-21T21:45:57Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -16,25 +18,106 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.FileVisitor;\n import java.nio.file.Files;\n+import java.nio.file.LinkOption;\n import java.nio.file.Path;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.GroupPrincipal;\n+import java.nio.file.attribute.PosixFileAttributeView;\n+import java.nio.file.attribute.UserPrincipal;\n+import java.nio.file.attribute.UserPrincipalLookupService;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import static com.aws.greengrass.util.Utils.inputStreamToString;\n \n-public class UnixPlatform extends Platform {\n+public class UnixPlatform extends Platform implements PosixUserPlatform {\n     protected static final int SIGINT = 2;\n     protected static final int SIGKILL = 9;\n     public static final Pattern PS_PID_PATTERN = Pattern.compile(\"(\\\\d+)\\\\s+(\\\\d+)\");\n \n+    public static final String PRIVILEGED_USER = \"root\";\n+    public static final String STDOUT = \"stdout\";\n+    public static final String STDERR = \"stderr\";\n+    private static Boolean IS_ROOT;\n+\n+    /**\n+     * Check whether the current user is root or not.\n+     *\n+     * @return true if root.\n+     */\n+    private synchronized boolean checkIsRoot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk0Mzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/Exec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0NzowMVrOHmHWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzowODo1MVrOHmrtSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODI1OQ==", "bodyText": "We already log the command in shellrunner, so if this duplicates that, then I'd remove one of them.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509728259", "createdAt": "2020-10-21T21:47:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Exec.java", "diffHunk": "@@ -398,14 +400,23 @@ public Exec withErr(Consumer<CharSequence> o) {\n         return decorated;\n     }\n \n+    /**\n+     * Execute a command.\n+     *\n+     * @returns the process exit code.\n+     * @throws InterruptedException if the command is interrupted while running.\n+     * @throws IOException if an error occurs while executing.\n+     */\n     @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n-    private void exec() throws InterruptedException, IOException {\n+    public Optional<Integer> exec() throws InterruptedException, IOException {\n         // Don't run anything if the current thread is currently interrupted\n         if (Thread.currentThread().isInterrupted()) {\n             logger.atWarn().kv(\"command\", this).log(\"Refusing to execute because the active thread is interrupted\");\n             throw new InterruptedException();\n         }\n-        process = Runtime.getRuntime().exec(getCommand(), environment, dir);\n+        final String[] command = getCommand();\n+        logger.atDebug().kv(\"command\", (Supplier<String>) () -> String.join(\" \", command)).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0MDUxOQ==", "bodyText": "ok - I'll remove the shellrunner one then because we exec in many other places", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509740519", "createdAt": "2020-10-21T22:03:30Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/Exec.java", "diffHunk": "@@ -398,14 +400,23 @@ public Exec withErr(Consumer<CharSequence> o) {\n         return decorated;\n     }\n \n+    /**\n+     * Execute a command.\n+     *\n+     * @returns the process exit code.\n+     * @throws InterruptedException if the command is interrupted while running.\n+     * @throws IOException if an error occurs while executing.\n+     */\n     @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n-    private void exec() throws InterruptedException, IOException {\n+    public Optional<Integer> exec() throws InterruptedException, IOException {\n         // Don't run anything if the current thread is currently interrupted\n         if (Thread.currentThread().isInterrupted()) {\n             logger.atWarn().kv(\"command\", this).log(\"Refusing to execute because the active thread is interrupted\");\n             throw new InterruptedException();\n         }\n-        process = Runtime.getRuntime().exec(getCommand(), environment, dir);\n+        final String[] command = getCommand();\n+        logger.atDebug().kv(\"command\", (Supplier<String>) () -> String.join(\" \", command)).log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODI1OQ=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyNDA0MA==", "bodyText": "I've actually kept both and moved this one to trace - There are many places where exec is being called outside of the ShellRunner for services.\nThe ShellRunner logs the command the service wants to run behalf of the service.\nThe exec logs the full decorated command.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r510324040", "createdAt": "2020-10-22T17:08:51Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/Exec.java", "diffHunk": "@@ -398,14 +400,23 @@ public Exec withErr(Consumer<CharSequence> o) {\n         return decorated;\n     }\n \n+    /**\n+     * Execute a command.\n+     *\n+     * @returns the process exit code.\n+     * @throws InterruptedException if the command is interrupted while running.\n+     * @throws IOException if an error occurs while executing.\n+     */\n     @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n-    private void exec() throws InterruptedException, IOException {\n+    public Optional<Integer> exec() throws InterruptedException, IOException {\n         // Don't run anything if the current thread is currently interrupted\n         if (Thread.currentThread().isInterrupted()) {\n             logger.atWarn().kv(\"command\", this).log(\"Refusing to execute because the active thread is interrupted\");\n             throw new InterruptedException();\n         }\n-        process = Runtime.getRuntime().exec(getCommand(), environment, dir);\n+        final String[] command = getCommand();\n+        logger.atDebug().kv(\"command\", (Supplier<String>) () -> String.join(\" \", command)).log();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyODI1OQ=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjk0ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTo0ODoyN1rOHmHZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjowNzo0OVrOHmIRng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyOTE0Ng==", "bodyText": "any possibility to make this more generic than posix?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509729146", "createdAt": "2020-10-21T21:48:27Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithGenerator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.config.Topics;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.Utils;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.PosixUserPlatform;\n+\n+import java.util.Optional;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.POSIX_GROUP_KEY;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.POSIX_USER_KEY;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.RUN_WITH_NAMESPACE_TOPIC;\n+\n+/**\n+ * Generate a {@link RunWith} from a service {@link Topics} configuration. This takes into account the configuration\n+ * from the service and the default configuration in the kernel.\n+ */\n+public class RunWithGenerator {\n+\n+    final DeviceConfiguration deviceConfig;\n+\n+    final PosixUserPlatform posixUserPlatform;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0MzUxOA==", "bodyText": "potentially:\nFor windows,\n\nusername -> user prinicipal name\nuid -> guid\n\nI'm not so sure about the primary group though", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r509743518", "createdAt": "2020-10-21T22:07:49Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithGenerator.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.config.Topics;\n+import com.aws.greengrass.deployment.DeviceConfiguration;\n+import com.aws.greengrass.util.Coerce;\n+import com.aws.greengrass.util.Exec;\n+import com.aws.greengrass.util.Utils;\n+import com.aws.greengrass.util.platforms.Platform;\n+import com.aws.greengrass.util.platforms.PosixUserPlatform;\n+\n+import java.util.Optional;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.POSIX_GROUP_KEY;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.POSIX_USER_KEY;\n+import static com.aws.greengrass.lifecyclemanager.GreengrassService.RUN_WITH_NAMESPACE_TOPIC;\n+\n+/**\n+ * Generate a {@link RunWith} from a service {@link Topics} configuration. This takes into account the configuration\n+ * from the service and the default configuration in the kernel.\n+ */\n+public class RunWithGenerator {\n+\n+    final DeviceConfiguration deviceConfig;\n+\n+    final PosixUserPlatform posixUserPlatform;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyOTE0Ng=="}, "originalCommit": {"oid": "f506647854995fb10f5880fb5ad23f005ae813a1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzM5NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxNDowMVrOHmyJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDoxNDowMVrOHmyJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyOTU5Nw==", "bodyText": "[nit]\nUse Files.exists", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r510429597", "createdAt": "2020-10-22T20:14:01Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (p.toFile().exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cd2943521e8371f61a9a9bc35758f955ca85c7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMwNzAxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1NTo1MVrOHngfbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1NTo1MVrOHngfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4ODg0NQ==", "bodyText": "remove the listener using try-finally", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511188845", "createdAt": "2020-10-23T22:55:51Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/GenericExternalServiceTest.java", "diffHunk": "@@ -308,20 +317,30 @@ void GIVEN_bootstrap_command_WHEN_runs_longer_than_5_sec_THEN_timeout_exception_\n     @EnabledOnOs({OS.LINUX, OS.MAC})\n     @ParameterizedTest\n     @MethodSource(\"posixTestUserConfig\")\n-    void GIVEN_posix_default_user_WHEN_runs_THEN_runs_with_default_user(String file, String expectedUid)\n+    void GIVEN_posix_default_user_WHEN_runs_THEN_runs_with_default_user(String file, String expectedInstallUid,\n+                                                                        String expectedRunUid)\n             throws Exception {\n+\n+        CountDownLatch countDownLatch = new CountDownLatch(2);\n+        // Set up stdout listener to capture stdout for verifying users\n+        List<String> stdouts = new CopyOnWriteArrayList<>();\n+        Consumer<GreengrassLogMessage> listener = m -> {\n+            Map<String, String> contexts = m.getContexts();\n+            String messageOnStdout = contexts.get(\"stdout\");\n+            if (messageOnStdout != null\n+                    && (messageOnStdout.contains(\"run as\")\n+                        || messageOnStdout.contains(\"install as\") )) {\n+                stdouts.add(messageOnStdout);\n+                countDownLatch.countDown();\n+            }\n+        };\n+        Slf4jLogAdapter.addGlobalListener(listener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMwODc3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/long_running_services.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1Njo1OVrOHngggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMjo1Njo1OVrOHngggQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE4OTEyMQ==", "bodyText": "this need to be changed now that Shagupta merged the system property change", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511189121", "createdAt": "2020-10-23T22:56:59Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/long_running_services.yaml", "diffHunk": "@@ -1,4 +1,8 @@\n ---\n+system:\n+  runWithDefault:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMyMDIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/SpawnedProcessProtector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowNDowN1rOHngmsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDozMToxOFrOHoAllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MDcwNg==", "bodyText": "this won't work unless passwordless sudo is there. Can you maybe try running the sudo version, and if that fails then run without sudo perhaps?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511190706", "createdAt": "2020-10-23T23:04:07Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/SpawnedProcessProtector.java", "diffHunk": "@@ -54,7 +53,11 @@ public void afterAll(ExtensionContext context) throws Exception {\n                 }\n \n                 // Kill the stray process\n-                Processes.newPidProcess(Integer.parseInt(pid)).destroyForcefully();\n+                proc = new ProcessBuilder().command(\"sudo\", \"kill\", \"-9\", pid).start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxNDcxMA==", "bodyText": "I added the \"-n\" so it fails immediately without passwordless sudo, and added a fallback to without sudo", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511714710", "createdAt": "2020-10-26T04:31:18Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/SpawnedProcessProtector.java", "diffHunk": "@@ -54,7 +53,11 @@ public void afterAll(ExtensionContext context) throws Exception {\n                 }\n \n                 // Kill the stray process\n-                Processes.newPidProcess(Integer.parseInt(pid)).destroyForcefully();\n+                proc = new ProcessBuilder().command(\"sudo\", \"kill\", \"-9\", pid).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MDcwNg=="}, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMyMjM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/UniqueRootPathBeforeAll.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowNToxMVrOHngn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwMDowODozMFrOHnhYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTAwMA==", "bodyText": "you can implement both each and all with the same extension if you wanted", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511191000", "createdAt": "2020-10-23T23:05:11Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/UniqueRootPathBeforeAll.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.testcommons.testutilities;\n+\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+import static com.aws.greengrass.testcommons.testutilities.UniqueRootStoreHelper.KEY;\n+\n+public class UniqueRootPathBeforeAll implements BeforeAllCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIwMzQ0Mg==", "bodyText": "I had it separate because the path would change during test executin, but I suppose that doesn't actually matter. If the Kernel is created in a beforeAll, it doesn't care if the property changes for every test.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511203442", "createdAt": "2020-10-24T00:08:30Z", "author": {"login": "rbattle"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/UniqueRootPathBeforeAll.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.testcommons.testutilities;\n+\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+import static com.aws.greengrass.testcommons.testutilities.UniqueRootStoreHelper.KEY;\n+\n+public class UniqueRootPathBeforeAll implements BeforeAllCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTAwMA=="}, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjMyNDE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/UniqueRootStoreHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowNjoxMFrOHngoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzowNjoxMFrOHngoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5MTIzNw==", "bodyText": "we have a utility already to recursively delete. Utils.deleteFileRecursively", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511191237", "createdAt": "2020-10-23T23:06:10Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/testcommons/testutilities/UniqueRootStoreHelper.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *  SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.testcommons.testutilities;\n+\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n+import org.junit.jupiter.api.extension.ExtensionContext.Store.CloseableResource;\n+\n+import java.io.IOException;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+\n+import static java.nio.file.FileVisitResult.CONTINUE;\n+\n+final class UniqueRootStoreHelper {\n+    static final String KEY = \"root\";\n+\n+    private UniqueRootStoreHelper() {\n+        \n+    }\n+\n+    public static CloseableResource createPath(String key) {\n+        try {\n+            Path p = Files.createTempDirectory(\"greengrass-test\");\n+            System.setProperty(key, p.toAbsolutePath().toString());\n+            return new CloseableResource() {\n+                @Override\n+                public void close() throws Throwable {\n+                    System.clearProperty(key);\n+                    Files.walkFileTree(p, new SimpleFileVisitor<Path>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMjM1NjM3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/config.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNjoxM1rOHng6PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwNTo0Nzo1OFrOHnoxCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTcwOQ==", "bodyText": "I will change this to the new format:\nservices:\n  aws.greengrass.Nucleus:\n    runWithDefault:\n      posixUser: nobody", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511195709", "createdAt": "2020-10-23T23:26:13Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/config.yaml", "diffHunk": "@@ -1,4 +1,8 @@\n ---\n+system:\n+  runWithDefault:\n+    posixUser: nobody\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NjAxNw==", "bodyText": "The config is directly under the service? It isn't under parameters?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511196017", "createdAt": "2020-10-23T23:27:55Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/config.yaml", "diffHunk": "@@ -1,4 +1,8 @@\n ---\n+system:\n+  runWithDefault:\n+    posixUser: nobody\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTcwOQ=="}, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTMyNDQyNQ==", "bodyText": "You are right - it should be under parameters:\nservices:\n  aws.greengrass.Nucleus:\n    parameters:\n      runWithDefault:\n        posixUser: nobody", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r511324425", "createdAt": "2020-10-24T05:47:58Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/config.yaml", "diffHunk": "@@ -1,4 +1,8 @@\n ---\n+system:\n+  runWithDefault:\n+    posixUser: nobody\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTcwOQ=="}, "originalCommit": {"oid": "8333e6433f013b63e4cfff615f2df03c8d51be13"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzcxNTI3OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentConfigMergingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODowMToyMFrOHpJwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjoxNDoyN1rOHpS_mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxMzYxMw==", "bodyText": "ooh nice improvement!", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r512913613", "createdAt": "2020-10-27T18:01:20Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -170,35 +170,33 @@ void GIVEN_kernel_running_single_service_WHEN_merge_changes_service_THEN_service\n                 safeUpdateRegistered.set(true);\n             }\n         };\n-        Slf4jLogAdapter.addGlobalListener(listener);\n-\n-        kernel.launch();\n-        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n-\n-        // WHEN\n-        CountDownLatch mainRestarted = new CountDownLatch(1);\n-        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"main\") && newState.equals(State.FINISHED) && oldState.equals(State.STARTING)) {\n-                mainRestarted.countDown();\n-            }\n-        });\n+        try (AutoCloseable l = TestUtils.createCloseableLogListener(listener)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b126b89975a9384ce37e93f0add6bdf2770db54"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NDg1Ng==", "bodyText": "I wish we were using > Java 8, then you wouldn't need the silly assignment", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513064856", "createdAt": "2020-10-27T22:14:27Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/deployment/DeploymentConfigMergingTest.java", "diffHunk": "@@ -170,35 +170,33 @@ void GIVEN_kernel_running_single_service_WHEN_merge_changes_service_THEN_service\n                 safeUpdateRegistered.set(true);\n             }\n         };\n-        Slf4jLogAdapter.addGlobalListener(listener);\n-\n-        kernel.launch();\n-        assertTrue(mainRunning.await(5, TimeUnit.SECONDS));\n-\n-        // WHEN\n-        CountDownLatch mainRestarted = new CountDownLatch(1);\n-        kernel.getContext().addGlobalStateChangeListener((service, oldState, newState) -> {\n-            if (service.getName().equals(\"main\") && newState.equals(State.FINISHED) && oldState.equals(State.STARTING)) {\n-                mainRestarted.countDown();\n-            }\n-        });\n+        try (AutoCloseable l = TestUtils.createCloseableLogListener(listener)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxMzYxMw=="}, "originalCommit": {"oid": "2b126b89975a9384ce37e93f0add6bdf2770db54"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzc1NzEyOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/delta.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoxMDowMlrOHpKKvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTozODoxMlrOHpR-Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMDI1NQ==", "bodyText": "does this need to be a dependency of main? The previous file had it as a dep, but it isn't here.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r512920255", "createdAt": "2020-10-27T18:10:02Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/delta.yaml", "diffHunk": "@@ -1,4 +1,9 @@\n services:\n+  aws.greengrass.Nucleus:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b126b89975a9384ce37e93f0add6bdf2770db54"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODE1OQ==", "bodyText": "that dependency gets added automatically - I can re-add though", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513048159", "createdAt": "2020-10-27T21:38:12Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/resources/com/aws/greengrass/integrationtests/deployment/delta.yaml", "diffHunk": "@@ -1,4 +1,9 @@\n services:\n+  aws.greengrass.Nucleus:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMDI1NQ=="}, "originalCommit": {"oid": "2b126b89975a9384ce37e93f0add6bdf2770db54"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzc3ODU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoxNDo0NlrOHpKYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjoxODozM1rOHpTGOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg==", "bodyText": "use enhanced for loop?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r512923722", "createdAt": "2020-10-27T18:14:46Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0MjMwNA==", "bodyText": "setPermissions throws an IOException so I can't do\nFiles.list(p).forEach(x -> platform.setPermissions(permission, x));\nIterating seems more straightforward than this alternative:\n              Optional<IOException> e = Files.list(p).map(x -> {\n                    try {\n                        platform.setPermissions(permission, x);\n                    } catch (IOException ie) {\n                        return ie;\n                    }\n                    return null;\n                }).filter(Objects::nonNull).findFirst();\n                if (e.isPresent()) {\n                    throw e.get();\n                }", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513042304", "createdAt": "2020-10-27T21:25:49Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0Mjk1MQ==", "bodyText": "I mean \"for (Path p : Files.list(p))\"", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513042951", "createdAt": "2020-10-27T21:27:08Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0NzA1NQ==", "bodyText": "insert egg-on-face emoji here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513047055", "createdAt": "2020-10-27T21:35:47Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0Nzc3Ng==", "bodyText": "ah - now I know why I didn't do that - it returns a stream, so I'd have to collect it:\n                for (Path x : Files.list(p).collect(Collectors.toList())) {", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513047776", "createdAt": "2020-10-27T21:37:20Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0ODkxNQ==", "bodyText": "Really, that ought to work, the enhanced for loop just works on any Iterable", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513048915", "createdAt": "2020-10-27T21:39:40Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0OTAwNQ==", "bodyText": "But whatever, doesn't really matter", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513049005", "createdAt": "2020-10-27T21:39:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA2NjU1Mw==", "bodyText": "Yeah - the Stream interface isn't an Iterable so you end up having to dance around it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513066553", "createdAt": "2020-10-27T22:18:33Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyMzcyMg=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzc4NzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoxNjo1MlrOHpKeEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTozNDozMVrOHpR31w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyNTIwMQ==", "bodyText": "this shouldn't be using setArtifactStorePermission should it? Since this path is the artifacts for a particular component.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r512925201", "createdAt": "2020-10-27T18:16:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -128,15 +132,18 @@ public Path unarchivePath() {\n     public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier, String artifactName) throws IOException {\n         Path p = unarchiveArtifactPath(componentIdentifier).resolve(artifactName);\n         Utils.createPaths(p);\n-        Permissions.setArtifactPermission(p);\n+        Permissions.setArtifactStorePermission(p);\n         return p;\n     }\n \n     public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n-        Path p = unarchivePath().resolve(componentIdentifier.getName())\n-                .resolve(componentIdentifier.getVersion().getValue());\n+        Path p = unarchivePath().resolve(componentIdentifier.getName());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactStorePermission(p);\n+\n+        p = p.resolve(componentIdentifier.getVersion().getValue());\n         Utils.createPaths(p);\n-        Permissions.setArtifactPermission(p);\n+        Permissions.setArtifactStorePermission(p);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA0NjQ4Nw==", "bodyText": "this is for the path of the directory for the unarchived file\nso if you have foo.zip,\nthis would be the path to /packages/artifacts-unarchived/component/version/<foo.zip>/\nThe contents of this directory would be set to whatever is in the recipe to apply to the archive. Right now they get set to read only (unless it is a dir then it needs to be executable) as.\nIf an un-archived artifact path is referenced by another recipe, the directory needs to be world readable and world executable.\nThe writable is necessary on dirs because if the user is non-root, they need to be able to delete the directory when tests exit / artifacts are cleaned up. This bit could be cleaned up - but I'd like to wait until all the artifact permission setting is implemented.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513046487", "createdAt": "2020-10-27T21:34:31Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/NucleusPaths.java", "diffHunk": "@@ -128,15 +132,18 @@ public Path unarchivePath() {\n     public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier, String artifactName) throws IOException {\n         Path p = unarchiveArtifactPath(componentIdentifier).resolve(artifactName);\n         Utils.createPaths(p);\n-        Permissions.setArtifactPermission(p);\n+        Permissions.setArtifactStorePermission(p);\n         return p;\n     }\n \n     public Path unarchiveArtifactPath(ComponentIdentifier componentIdentifier) throws IOException {\n-        Path p = unarchivePath().resolve(componentIdentifier.getName())\n-                .resolve(componentIdentifier.getVersion().getValue());\n+        Path p = unarchivePath().resolve(componentIdentifier.getName());\n+        Utils.createPaths(p);\n+        Permissions.setArtifactStorePermission(p);\n+\n+        p = p.resolve(componentIdentifier.getVersion().getValue());\n         Utils.createPaths(p);\n-        Permissions.setArtifactPermission(p);\n+        Permissions.setArtifactStorePermission(p);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyNTIwMQ=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzc5MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/Permissions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoxNzo1MlrOHpKg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoxNzo1MlrOHpKg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyNTkzOA==", "bodyText": "enhanced for loop?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r512925938", "createdAt": "2020-10-27T18:17:52Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Permissions.java", "diffHunk": "@@ -8,19 +8,48 @@\n import com.aws.greengrass.util.platforms.Platform;\n \n import java.io.IOException;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.Iterator;\n \n public final class Permissions {\n     private static final Platform platform = Platform.getInstance();\n-    private static final FileSystemPermission OWNER_RWX_ONLY =\n-            new FileSystemPermission(null, null, true, true, true, false, false, false, false, false, false);\n-    private static final FileSystemPermission OWNER_RWX_EVERYONE_RX =\n-            new FileSystemPermission(null, null, true, true, true, true, false, true, true, false, true);\n+    private static final FileSystemPermission OWNER_RWX_ONLY =  FileSystemPermission.builder()\n+            .ownerRead(true).ownerWrite(true).ownerExecute(true).build();\n+    private static final FileSystemPermission OWNER_RWX_EVERYONE_RX = FileSystemPermission.builder()\n+            .ownerRead(true).ownerWrite(true).ownerExecute(true)\n+            .groupRead(true).groupExecute(true)\n+            .otherRead(true).otherExecute(true)\n+            .build();\n+    private static final FileSystemPermission OWNER_R_ONLY = FileSystemPermission.builder().ownerRead(true).build();\n+    private static final FileSystemPermission EVERYONE_RX = FileSystemPermission.builder()\n+            .ownerRead(true).ownerExecute(true)\n+            .groupRead(true).groupExecute(true)\n+            .otherRead(true).otherExecute(true)\n+            .build();\n \n     private Permissions() {\n     }\n \n+    /**\n+     * Set default permissions on an artifact.\n+     *\n+     * @param p the artifact path.\n+     * @throws IOException if an error occurs.\n+     */\n     public static void setArtifactPermission(Path p) throws IOException {\n+        if (p == null || !Files.exists(p)) {\n+            return;\n+        }\n+        // default artifact permissions - readable by owner but everyone can access dirs\n+        if (Files.isDirectory(p)) {\n+            platform.setPermissions(OWNER_RWX_EVERYONE_RX, p);\n+            for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTIyNTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0NzowNFrOHpYBMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0NzowNFrOHpYBMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzE4NQ==", "bodyText": "nit: package -> component", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513147185", "createdAt": "2020-10-28T02:47:04Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -306,7 +307,16 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 }\n             }\n             File artifactFile = downloader.getArtifactFile(packageArtifactDirectory, artifact, componentIdentifier);\n-\n+            if (artifactFile != null) {\n+                // TODO: Change permissions - set world readable until artifact permissions can be set via model\n+                try {\n+                    Permissions.setArtifactPermission(artifactFile.toPath());\n+                } catch (IOException e) {\n+                    throw new PackageDownloadException(\n+                            String.format(\"Failed to change permissions of package %s artifact %s\", componentIdentifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTIyNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0NzozOFrOHpYByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyMzozMlrOHpZjPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzMzNw==", "bodyText": "What's this TODO about? Does it need to be resolved before re:Invent?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513147337", "createdAt": "2020-10-28T02:47:38Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -306,7 +307,16 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 }\n             }\n             File artifactFile = downloader.getArtifactFile(packageArtifactDirectory, artifact, componentIdentifier);\n-\n+            if (artifactFile != null) {\n+                // TODO: Change permissions - set world readable until artifact permissions can be set via model", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MjI4Nw==", "bodyText": "yes - the artifact component model in the cloud has been updated to allow you to set permissions for artifacts. This needs to read those artifact permissions (e.g. readable to user, readable to everyone, executable to user, executable to everyone).\nfor instance, the lambda launcher will be able to specify that it is readable and executable to all. Then we don't need to have an install script that RequiresPrivilege to do a chmod\nThis needs to get updated to pick out the permissions and set them. If they are not specified, the coral model defaults to read only.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513172287", "createdAt": "2020-10-28T04:23:32Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/componentmanager/ComponentManager.java", "diffHunk": "@@ -306,7 +307,16 @@ void prepareArtifacts(ComponentIdentifier componentIdentifier, List<ComponentArt\n                 }\n             }\n             File artifactFile = downloader.getArtifactFile(packageArtifactDirectory, artifact, componentIdentifier);\n-\n+            if (artifactFile != null) {\n+                // TODO: Change permissions - set world readable until artifact permissions can be set via model", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzMzNw=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTI0NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo1NzowN1rOHpYL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyNjowMlrOHpZlow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0OTk0OA==", "bodyText": "Why do we need to set runWith to null?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513149948", "createdAt": "2020-10-28T02:57:07Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -326,6 +348,7 @@ protected synchronized void shutdown() {\n             stopAllLifecycleProcesses();\n             logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n         }\n+        runWith = null; // reset runWith - a deployment can change user info", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3Mjg5OQ==", "bodyText": "The instance of the service is only loaded once.\nDuring the lifecycle we want to run all the commands with the same user.\nFor instance, if the component is launched with user A, we want to run all the commands as user A.\nWhen a deployment happens to change the user to B, the config store gets updated first. We don't want to shutdown the service as user B if it was started by A.\nOnce the service is shutdown, we can throw away the runWith info and pick it up again the next time a script runs. We don't know what script will actually run though -  it could be bootstrap, install, run, startup.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513172899", "createdAt": "2020-10-28T04:26:02Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -326,6 +348,7 @@ protected synchronized void shutdown() {\n             stopAllLifecycleProcesses();\n             logger.atInfo().setEventType(\"generic-service-shutdown\").log();\n         }\n+        runWith = null; // reset runWith - a deployment can change user info", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0OTk0OA=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTMxMDYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzozNDowOFrOHpYyFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoxNzozN1rOHpZd4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1OTcwMQ==", "bodyText": "Shouldn't this be logged as an Error? The IOException is logged as an error inside updateArtifactOwner. Also what would be the default owner and permission if updateArtifactOwner fails?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513159701", "createdAt": "2020-10-28T03:34:08Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -406,8 +460,16 @@ protected void storeInitialRunWithConfiguration() {\n \n     @SuppressWarnings(\"PMD.CloseResource\")\n     protected Pair<RunStatus, Exec> run(Topic t, String cmd, IntConsumer background, List<Exec> trackingList,\n-                                        boolean requiresPrivilege)\n-            throws InterruptedException {\n+                                        boolean requiresPrivilege) throws InterruptedException {\n+        if (runWith == null) {\n+            if (!storeInitialRunWithConfiguration()) {\n+                return new Pair<>(RunStatus.Errored, null);\n+            }\n+            if (!updateArtifactOwner()) {\n+                logger.atWarn().log(\"Service artifacts may not be accessible to user\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MDkxNA==", "bodyText": "the default owner would be the user running the nucleus, or the previous user that was configured to run the component", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513170914", "createdAt": "2020-10-28T04:17:37Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/GenericExternalService.java", "diffHunk": "@@ -406,8 +460,16 @@ protected void storeInitialRunWithConfiguration() {\n \n     @SuppressWarnings(\"PMD.CloseResource\")\n     protected Pair<RunStatus, Exec> run(Topic t, String cmd, IntConsumer background, List<Exec> trackingList,\n-                                        boolean requiresPrivilege)\n-            throws InterruptedException {\n+                                        boolean requiresPrivilege) throws InterruptedException {\n+        if (runWith == null) {\n+            if (!storeInitialRunWithConfiguration()) {\n+                return new Pair<>(RunStatus.Errored, null);\n+            }\n+            if (!updateArtifactOwner()) {\n+                logger.atWarn().log(\"Service artifacts may not be accessible to user\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1OTcwMQ=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTMxNjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzozNjo0OVrOHpY1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDozMDo1MVrOHpZqmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2MDQ5Ng==", "bodyText": "If setPermissions throws IOException, do we want to continue the for loop for the rest?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513160496", "createdAt": "2020-10-28T03:36:49Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {\n+                    platform.setPermissions(permission, it.next(), Recurse, IgnorePermission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NDE3MQ==", "bodyText": "if setting the permissions fails, the user may not be able to execute the commands. Throwing an exception would cause the service to move to a broken state and potentially fail a deployment.\nThe service is potentially broken if the artifact permissions are not set correctly. It may run fine, but it could also fail immediately because it can't execute a command or read a file - but the customer would have to tease apart the error to find out it is because the permissions couldn't be set correctly.\nThis happened when I was testing UATs and found some missing permissions on directories - the service may tell you it can't find an artifact, or get a permission denied on the artifact, but it's an execution error at that point", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513174171", "createdAt": "2020-10-28T04:30:51Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/RunWithArtifactHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.lifecyclemanager;\n+\n+import com.aws.greengrass.componentmanager.models.ComponentIdentifier;\n+import com.aws.greengrass.util.CrashableFunction;\n+import com.aws.greengrass.util.FileSystemPermission;\n+import com.aws.greengrass.util.NucleusPaths;\n+import com.aws.greengrass.util.platforms.Platform;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Iterator;\n+import javax.inject.Inject;\n+\n+import static com.aws.greengrass.util.FileSystemPermission.Option.IgnorePermission;\n+import static com.aws.greengrass.util.FileSystemPermission.Option.Recurse;\n+\n+/**\n+ * Update artifact ownership based on service RunWith information.\n+ */\n+public class RunWithArtifactHandler {\n+\n+    final NucleusPaths nucleusPaths;\n+\n+    final Platform platform;\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     */\n+    @Inject\n+    public RunWithArtifactHandler(NucleusPaths paths) {\n+        this(paths, Platform.getInstance());\n+    }\n+\n+    /**\n+     * Construct a new handler.\n+     *\n+     * @param paths paths in the nucleus.\n+     * @param platform the platform instance.\n+     */\n+    public RunWithArtifactHandler(NucleusPaths paths, Platform platform) {\n+        this.nucleusPaths = paths;\n+        this.platform = platform;\n+    }\n+\n+    /**\n+     * Update the owner of the artifacts in the component on the local filesystem. The user and group of from the\n+     * RunWith parameter are used.\n+     *\n+     * @param id      the component to update.\n+     * @param runWith the user/group that should own the files.\n+     * @throws IOException if an error occurs while updating. This can occur if the user running the kernel does not\n+     *                     have the correct permissions or capabilities to change file ownership to another user.\n+     */\n+    public void updateOwner(ComponentIdentifier id, RunWith runWith) throws IOException {\n+        Path artifacts = nucleusPaths.artifactPath(id);\n+        Path unarchived = nucleusPaths.unarchiveArtifactPath(id);\n+\n+        FileSystemPermission permission = FileSystemPermission.builder()\n+                .ownerUser(runWith.getUser())\n+                .ownerGroup(runWith.getGroup())\n+                .build();\n+\n+        // change ownership of files within the artifact dirs, but don't change the artifact dir itself as that would\n+        // make it writable to the user\n+        CrashableFunction<Path, Void, IOException> f = (p) -> {\n+            if (Files.exists(p)) {\n+                for (Iterator<Path> it = Files.list(p).iterator(); it.hasNext(); ) {\n+                    platform.setPermissions(permission, it.next(), Recurse, IgnorePermission);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2MDQ5Ng=="}, "originalCommit": {"oid": "7ca6989a9b0038ba03c9426a3790aedc131e04ee"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDAxNDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMjo0NDoxM1rOHqFsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDoyODoyNVrOHqJdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5NTU3Ng==", "bodyText": "Does this need to get passed through the easy setup too?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513895576", "createdAt": "2020-10-29T02:44:13Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "diffHunk": "@@ -101,13 +103,37 @@ public void parseArgs(String... args) {\n                 case \"-es\":\n                     deviceConfiguration.getEnvironmentStage().withValue(getArg());\n                     break;\n+                case \"--component-default-user\":\n+                case \"-u\":\n+                    if (Exec.isWindows) {\n+                        deviceConfiguration.getRunWithDefaultWindowsUser().withValue(getArg());\n+                    } else {\n+                        deviceConfiguration.getRunWithDefaultPosixUser().withValue(getArg());\n+                    }\n+                    break;\n+                case \"--component-default-group\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "016fddca697dfcf3477109df6077112f3bd0e262"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NzEyNw==", "bodyText": "That makes sense - I was trying to get the minimum done for the UATs but the group should be settable too", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/555#discussion_r513957127", "createdAt": "2020-10-29T04:28:25Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/lifecyclemanager/KernelCommandLine.java", "diffHunk": "@@ -101,13 +103,37 @@ public void parseArgs(String... args) {\n                 case \"-es\":\n                     deviceConfiguration.getEnvironmentStage().withValue(getArg());\n                     break;\n+                case \"--component-default-user\":\n+                case \"-u\":\n+                    if (Exec.isWindows) {\n+                        deviceConfiguration.getRunWithDefaultWindowsUser().withValue(getArg());\n+                    } else {\n+                        deviceConfiguration.getRunWithDefaultPosixUser().withValue(getArg());\n+                    }\n+                    break;\n+                case \"--component-default-group\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg5NTU3Ng=="}, "originalCommit": {"oid": "016fddca697dfcf3477109df6077112f3bd0e262"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 377, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}