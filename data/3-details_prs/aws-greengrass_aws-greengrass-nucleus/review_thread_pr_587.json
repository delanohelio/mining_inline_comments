{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNzExODIx", "number": 587, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTowNDoxNlrOEz7GQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzozNzo1MlrOE1-bXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODgxMDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTowNDoxNlrOHrcecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1OTowM1rOHreSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNzM2MQ==", "bodyText": "Do we need all of these wrapper methods for our production code or a mix of production / tests code? If so, it'd be ideal to split them so it doesn't keep adding to the nucleus jar, not blocking on it though", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r515317361", "createdAt": "2020-10-30T19:04:16Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.EnumSerializer;\n+import software.amazon.awssdk.iot.Timestamp;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedEvent;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedError;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedErrorCode;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionSubscriptionRequest;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+/**\n+ * IotJobsClient with updated MQTT Jobs topics.\n+ */\n+@SuppressWarnings(\"PMD.AvoidCatchingGenericException\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525199cd34ec8fbde07e502a686793f6da636f8f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzA2NQ==", "bodyText": "Yes. We use these methods in prod code, so overriding what's in IotJobsClient. We don't use any other methods in IotJobsClient.\nBy splitting, do you mean we don't need to extend IotJobsClient, so we can completely remove device sdk from our dependency?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r515347065", "createdAt": "2020-10-30T19:59:03Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.EnumSerializer;\n+import software.amazon.awssdk.iot.Timestamp;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedEvent;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedError;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedErrorCode;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionSubscriptionRequest;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+/**\n+ * IotJobsClient with updated MQTT Jobs topics.\n+ */\n+@SuppressWarnings(\"PMD.AvoidCatchingGenericException\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxNzM2MQ=="}, "originalCommit": {"oid": "525199cd34ec8fbde07e502a686793f6da636f8f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDE5NjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNjo0MDo0N1rOHuh05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNzowNlrOHu2-Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1MDc1Ng==", "bodyText": "var6?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r518550756", "createdAt": "2020-11-06T06:40:47Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.EnumSerializer;\n+import software.amazon.awssdk.iot.Timestamp;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedEvent;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedError;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedErrorCode;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionSubscriptionRequest;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+/**\n+ * IotJobsClient with updated MQTT Jobs topics.\n+ */\n+@SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+@SuppressFBWarnings(\"NM_METHOD_NAMING_CONVENTION\")\n+public class IotJobsClientWrapper extends IotJobsClient {\n+    private static final String UPDATE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update\";\n+    static final String JOB_UPDATE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/accepted\";\n+    static final String JOB_UPDATE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/rejected\";\n+    private static final String DESCRIBE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get\";\n+    private static final String JOB_DESCRIBE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/accepted\";\n+    private static final String JOB_DESCRIBE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/rejected\";\n+    private static final String JOB_EXECUTIONS_CHANGED_TOPIC =\n+            \"$aws/things/%s/jobs/notify-namespace-cust-deployment\";\n+\n+    private final MqttClientConnection connection;\n+    private final Gson gson = this.getGson();\n+\n+    public IotJobsClientWrapper(MqttClientConnection connection) {\n+        super(connection);\n+        this.connection = connection;\n+    }\n+\n+    private Gson getGson() {\n+        GsonBuilder gson = new GsonBuilder();\n+        gson.disableHtmlEscaping();\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Serializer());\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Deserializer());\n+        this.addTypeAdapters(gson);\n+        return gson.create();\n+    }\n+\n+    private void addTypeAdapters(GsonBuilder gson) {\n+        gson.registerTypeAdapter(JobStatus.class, new EnumSerializer());\n+        gson.registerTypeAdapter(RejectedErrorCode.class, new EnumSerializer());\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> PublishUpdateJobExecution(UpdateJobExecutionRequest request,\n+                                                                QualityOfService qos) {\n+        if (request.thingName == null || request.jobId == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionRequest must have a non-null thingName and a non-null jobId\"));\n+            return result;\n+        }\n+        String topic = String.format(UPDATE_JOB_TOPIC, request.thingName, request.jobId);\n+        String payloadJson = this.gson.toJson(request);\n+        MqttMessage message = new MqttMessage(topic, payloadJson.getBytes(StandardCharsets.UTF_8));\n+        return this.connection.publish(message, qos, false);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionAccepted(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos,\n+            Consumer<UpdateJobExecutionResponse> handler, Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_ACCEPTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                UpdateJobExecutionResponse response = this.gson.fromJson(payload, UpdateJobExecutionResponse.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {\n+                if (exceptionHandler != null) {\n+                    exceptionHandler.accept(var6);\n+                }\n+            }\n+        };\n+        return this.connection.subscribe(topic, qos, messageHandler);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionRejected(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos, Consumer<RejectedError> handler,\n+            Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_REJECTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                RejectedError response = this.gson.fromJson(payload, RejectedError.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3934f6f7c833c658a15d393f9eff2b1313544287"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1NTgzNQ==", "bodyText": "+1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r518555835", "createdAt": "2020-11-06T06:57:11Z", "author": {"login": "shaguptashaikh"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.EnumSerializer;\n+import software.amazon.awssdk.iot.Timestamp;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedEvent;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedError;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedErrorCode;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionSubscriptionRequest;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+/**\n+ * IotJobsClient with updated MQTT Jobs topics.\n+ */\n+@SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+@SuppressFBWarnings(\"NM_METHOD_NAMING_CONVENTION\")\n+public class IotJobsClientWrapper extends IotJobsClient {\n+    private static final String UPDATE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update\";\n+    static final String JOB_UPDATE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/accepted\";\n+    static final String JOB_UPDATE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/rejected\";\n+    private static final String DESCRIBE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get\";\n+    private static final String JOB_DESCRIBE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/accepted\";\n+    private static final String JOB_DESCRIBE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/rejected\";\n+    private static final String JOB_EXECUTIONS_CHANGED_TOPIC =\n+            \"$aws/things/%s/jobs/notify-namespace-cust-deployment\";\n+\n+    private final MqttClientConnection connection;\n+    private final Gson gson = this.getGson();\n+\n+    public IotJobsClientWrapper(MqttClientConnection connection) {\n+        super(connection);\n+        this.connection = connection;\n+    }\n+\n+    private Gson getGson() {\n+        GsonBuilder gson = new GsonBuilder();\n+        gson.disableHtmlEscaping();\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Serializer());\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Deserializer());\n+        this.addTypeAdapters(gson);\n+        return gson.create();\n+    }\n+\n+    private void addTypeAdapters(GsonBuilder gson) {\n+        gson.registerTypeAdapter(JobStatus.class, new EnumSerializer());\n+        gson.registerTypeAdapter(RejectedErrorCode.class, new EnumSerializer());\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> PublishUpdateJobExecution(UpdateJobExecutionRequest request,\n+                                                                QualityOfService qos) {\n+        if (request.thingName == null || request.jobId == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionRequest must have a non-null thingName and a non-null jobId\"));\n+            return result;\n+        }\n+        String topic = String.format(UPDATE_JOB_TOPIC, request.thingName, request.jobId);\n+        String payloadJson = this.gson.toJson(request);\n+        MqttMessage message = new MqttMessage(topic, payloadJson.getBytes(StandardCharsets.UTF_8));\n+        return this.connection.publish(message, qos, false);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionAccepted(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos,\n+            Consumer<UpdateJobExecutionResponse> handler, Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_ACCEPTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                UpdateJobExecutionResponse response = this.gson.fromJson(payload, UpdateJobExecutionResponse.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {\n+                if (exceptionHandler != null) {\n+                    exceptionHandler.accept(var6);\n+                }\n+            }\n+        };\n+        return this.connection.subscribe(topic, qos, messageHandler);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionRejected(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos, Consumer<RejectedError> handler,\n+            Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_REJECTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                RejectedError response = this.gson.fromJson(payload, RejectedError.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1MDc1Ng=="}, "originalCommit": {"oid": "3934f6f7c833c658a15d393f9eff2b1313544287"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NzE1OA==", "bodyText": "Will update", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r518897158", "createdAt": "2020-11-06T17:27:06Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsClientWrapper.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.deployment;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import software.amazon.awssdk.crt.mqtt.MqttClientConnection;\n+import software.amazon.awssdk.crt.mqtt.MqttException;\n+import software.amazon.awssdk.crt.mqtt.MqttMessage;\n+import software.amazon.awssdk.crt.mqtt.QualityOfService;\n+import software.amazon.awssdk.iot.EnumSerializer;\n+import software.amazon.awssdk.iot.Timestamp;\n+import software.amazon.awssdk.iot.iotjobs.IotJobsClient;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.DescribeJobExecutionSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedEvent;\n+import software.amazon.awssdk.iot.iotjobs.model.JobExecutionsChangedSubscriptionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.JobStatus;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedError;\n+import software.amazon.awssdk.iot.iotjobs.model.RejectedErrorCode;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionRequest;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionResponse;\n+import software.amazon.awssdk.iot.iotjobs.model.UpdateJobExecutionSubscriptionRequest;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Consumer;\n+\n+/**\n+ * IotJobsClient with updated MQTT Jobs topics.\n+ */\n+@SuppressWarnings(\"PMD.AvoidCatchingGenericException\")\n+@SuppressFBWarnings(\"NM_METHOD_NAMING_CONVENTION\")\n+public class IotJobsClientWrapper extends IotJobsClient {\n+    private static final String UPDATE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update\";\n+    static final String JOB_UPDATE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/accepted\";\n+    static final String JOB_UPDATE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/update/rejected\";\n+    private static final String DESCRIBE_JOB_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get\";\n+    private static final String JOB_DESCRIBE_ACCEPTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/accepted\";\n+    private static final String JOB_DESCRIBE_REJECTED_TOPIC =\n+            \"$aws/things/%s/jobs/%s/namespace-cust-deployment/get/rejected\";\n+    private static final String JOB_EXECUTIONS_CHANGED_TOPIC =\n+            \"$aws/things/%s/jobs/notify-namespace-cust-deployment\";\n+\n+    private final MqttClientConnection connection;\n+    private final Gson gson = this.getGson();\n+\n+    public IotJobsClientWrapper(MqttClientConnection connection) {\n+        super(connection);\n+        this.connection = connection;\n+    }\n+\n+    private Gson getGson() {\n+        GsonBuilder gson = new GsonBuilder();\n+        gson.disableHtmlEscaping();\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Serializer());\n+        gson.registerTypeAdapter(Timestamp.class, new Timestamp.Deserializer());\n+        this.addTypeAdapters(gson);\n+        return gson.create();\n+    }\n+\n+    private void addTypeAdapters(GsonBuilder gson) {\n+        gson.registerTypeAdapter(JobStatus.class, new EnumSerializer());\n+        gson.registerTypeAdapter(RejectedErrorCode.class, new EnumSerializer());\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> PublishUpdateJobExecution(UpdateJobExecutionRequest request,\n+                                                                QualityOfService qos) {\n+        if (request.thingName == null || request.jobId == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionRequest must have a non-null thingName and a non-null jobId\"));\n+            return result;\n+        }\n+        String topic = String.format(UPDATE_JOB_TOPIC, request.thingName, request.jobId);\n+        String payloadJson = this.gson.toJson(request);\n+        MqttMessage message = new MqttMessage(topic, payloadJson.getBytes(StandardCharsets.UTF_8));\n+        return this.connection.publish(message, qos, false);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionAccepted(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos,\n+            Consumer<UpdateJobExecutionResponse> handler, Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_ACCEPTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                UpdateJobExecutionResponse response = this.gson.fromJson(payload, UpdateJobExecutionResponse.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {\n+                if (exceptionHandler != null) {\n+                    exceptionHandler.accept(var6);\n+                }\n+            }\n+        };\n+        return this.connection.subscribe(topic, qos, messageHandler);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Integer> SubscribeToUpdateJobExecutionRejected(\n+            UpdateJobExecutionSubscriptionRequest request, QualityOfService qos, Consumer<RejectedError> handler,\n+            Consumer<Exception> exceptionHandler) {\n+        if (request.jobId == null || request.thingName == null) {\n+            CompletableFuture result = new CompletableFuture();\n+            result.completeExceptionally(new MqttException(\n+                    \"UpdateJobExecutionSubscriptionRequest must have a non-null jobId and a non-null thingName\"));\n+            return result;\n+        }\n+        String topic = String.format(JOB_UPDATE_REJECTED_TOPIC, request.thingName, request.jobId);\n+        Consumer<MqttMessage> messageHandler = (message) -> {\n+            try {\n+                String payload = new String(message.getPayload(), StandardCharsets.UTF_8);\n+                RejectedError response = this.gson.fromJson(payload, RejectedError.class);\n+                handler.accept(response);\n+            } catch (Exception var6) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU1MDc1Ng=="}, "originalCommit": {"oid": "3934f6f7c833c658a15d393f9eff2b1313544287"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDMyNzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwNzozNzo1MlrOHujBHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzoyNzowMFrOHu29zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MDI2OQ==", "bodyText": "whats the dedupe strategy? would the cloud  push the same deployment via both the topics?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r518570269", "createdAt": "2020-11-06T07:37:52Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -446,6 +481,16 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n                         .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n                                 QualityOfService.AT_LEAST_ONCE, consumerReject);\n                 subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+\n+                subscribed = iotJobsClientWrapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3934f6f7c833c658a15d393f9eff2b1313544287"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg5NzEwMg==", "bodyText": "No. The whitelisted accounts (my personal account for now, and later eg-dev will be added) will get namespaced jobs, and beta customers will still get normal jobs like before", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/587#discussion_r518897102", "createdAt": "2020-11-06T17:27:00Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/deployment/IotJobsHelper.java", "diffHunk": "@@ -446,6 +481,16 @@ protected void subscribeToGetNextJobDescription(Consumer<DescribeJobExecutionRes\n                         .SubscribeToDescribeJobExecutionRejected(describeJobExecutionSubscriptionRequest,\n                                 QualityOfService.AT_LEAST_ONCE, consumerReject);\n                 subscribed.get(TIMEOUT_FOR_IOT_JOBS_OPERATIONS_SECONDS, TimeUnit.SECONDS);\n+\n+                subscribed = iotJobsClientWrapper", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU3MDI2OQ=="}, "originalCommit": {"oid": "3934f6f7c833c658a15d393f9eff2b1313544287"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 423, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}