{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzY1Mzg3", "number": 517, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoxNzozN1rOEsxDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxOTo1N1rOEs2_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc2NDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoxNzozN1rOHgL93w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoxNzozN1rOHgL93w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMjU0Mw==", "bodyText": "you are checking whether it is set in order to enable the read/write/execute bits, but this won't remove any bits that are already set by the umask when the file was created.\nI think you need to do\nf.setReadable(permissions.isOwnerRead(), true);\nf.setReadable(permissions.isOtherRead(), false);\nf.setWritable(permissions.isOwnerWrite(), true);\nf.setWritable(permissions.isOtherWrite(), false);\nf.setExecutable(permissions.isOwnerExecute(), true);\nf.setExecutable(permissions.isOtherExecute(), false);", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503512543", "createdAt": "2020-10-12T20:17:37Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/Platform.java", "diffHunk": "@@ -43,4 +46,52 @@ public abstract void killProcessAndChildren(Process process, boolean force)\n     public abstract String[] getShellForCommand(String command);\n \n     public abstract int exitCodeWhenCommandDoesNotExist();\n+\n+    /**\n+     * Set permissions on a path.\n+     *\n+     * @param permission permissions to set\n+     * @param path path to apply to\n+     * @throws IOException if any exception occurs while changing permissions\n+     */\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        // Just use builtin Java utilities to set permissions, we can expand this to do more in subclasses\n+        // as needed.\n+\n+        File f = path.toFile();\n+        if (!f.exists()) {\n+            throw new IOException(f + \" was expected to exist, but it does not exist\");\n+        }\n+        boolean happy = true;\n+        if (permission.isOwnerRead()) {\n+            happy = f.setReadable(true, true);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e31e19f5124675787971a3efb7bbb19056275ed6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzgwNzMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozNDo0NVrOHgMYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozODoxNVrOHgMdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxOTI3MA==", "bodyText": "can this occur after setting the file permissions?\nAt least on snap, this will fail because the root user in snap does not have CAP_FOWNER (which allows you to do chmod operations on files not owned by yourself)", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503519270", "createdAt": "2020-10-12T20:34:45Z", "author": {"login": "rbattle"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -67,6 +68,15 @@ public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac70d3fb664c2503ab2856a35ad4d99d51fdfd3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUyMDUzNw==", "bodyText": "Updated.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503520537", "createdAt": "2020-10-12T20:38:15Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/platforms/UnixPlatform.java", "diffHunk": "@@ -67,6 +68,15 @@ public int exitCodeWhenCommandDoesNotExist() {\n         return 127;\n     }\n \n+    @Override\n+    public void setPermissions(FileSystemPermission permission, Path path) throws IOException {\n+        if (permission.getOwnerUser() != null) {\n+            Files.setOwner(path, path.getFileSystem().getUserPrincipalLookupService()\n+                    .lookupPrincipalByName(permission.getOwnerUser()));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxOTI3MA=="}, "originalCommit": {"oid": "0ac70d3fb664c2503ab2856a35ad4d99d51fdfd3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE4ODIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/FileSystemPermission.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowMjozMFrOHgP3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyNTo1OFrOHgQQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ==", "bodyText": "Have you thought using Java BitSet to represent these? Then you can use the normal linux file permission bits(e.g. 777) to initialize them, which I think it's more readable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503576435", "createdAt": "2020-10-12T23:02:30Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/util/FileSystemPermission.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Value\n+@Builder\n+@AllArgsConstructor\n+public class FileSystemPermission {\n+    String ownerUser;\n+    String ownerGroup;\n+    boolean ownerRead;\n+    boolean ownerWrite;\n+    boolean ownerExecute;\n+\n+    boolean groupRead;\n+    boolean groupWrite;\n+    boolean groupExecute;\n+\n+    boolean otherRead;\n+    boolean otherWrite;\n+    boolean otherExecute;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NzE3NA==", "bodyText": "I don't really agree that that's easier to understand TBH.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503577174", "createdAt": "2020-10-12T23:05:17Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/FileSystemPermission.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Value\n+@Builder\n+@AllArgsConstructor\n+public class FileSystemPermission {\n+    String ownerUser;\n+    String ownerGroup;\n+    boolean ownerRead;\n+    boolean ownerWrite;\n+    boolean ownerExecute;\n+\n+    boolean groupRead;\n+    boolean groupWrite;\n+    boolean groupExecute;\n+\n+    boolean otherRead;\n+    boolean otherWrite;\n+    boolean otherExecute;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ=="}, "originalCommit": {"oid": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MjkzMg==", "bodyText": "Especially if using a builder, this is super clear", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503582932", "createdAt": "2020-10-12T23:25:58Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/FileSystemPermission.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package com.aws.greengrass.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Builder;\n+import lombok.Value;\n+\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+@Value\n+@Builder\n+@AllArgsConstructor\n+public class FileSystemPermission {\n+    String ownerUser;\n+    String ownerGroup;\n+    boolean ownerRead;\n+    boolean ownerWrite;\n+    boolean ownerExecute;\n+\n+    boolean groupRead;\n+    boolean groupWrite;\n+    boolean groupExecute;\n+\n+    boolean otherRead;\n+    boolean otherWrite;\n+    boolean otherExecute;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQzNQ=="}, "originalCommit": {"oid": "2565839dc9ad3bafaf542e10696c5e9c09bc81d4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDczODM0OnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoxOTo1OFrOHgU2kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDoyMzowN1rOHgU5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODEzMA==", "bodyText": "is this intentionally left commented rather than removing the call to the method?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503658130", "createdAt": "2020-10-13T04:19:58Z", "author": {"login": "rbattle"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -427,18 +421,18 @@ protected void setupTesRoleAndAlias() throws InterruptedException, ServiceLoadEx\n     }\n \n     protected static void cleanUpTesRoleAndAlias() {\n-        try {\n-            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n-\n-            if (tesRolePolicyArn.isPresent()) {\n-                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n-                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n-            }\n-\n-            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n-        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n-            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n-        }\n+//        try {\n+//            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n+//\n+//            if (tesRolePolicyArn.isPresent()) {\n+//                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n+//                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n+//            }\n+//\n+//            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n+//        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n+//            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n+//        }\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3098f11ec34841d20df3bb49c0c05d55a820cbf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODg2OA==", "bodyText": "Right now yes, I just wanted to make sure it worked. I can remove it, though I'd need to wait for everything to pass again :(.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/517#discussion_r503658868", "createdAt": "2020-10-13T04:23:07Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/e2e/BaseE2ETestCase.java", "diffHunk": "@@ -427,18 +421,18 @@ protected void setupTesRoleAndAlias() throws InterruptedException, ServiceLoadEx\n     }\n \n     protected static void cleanUpTesRoleAndAlias() {\n-        try {\n-            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n-\n-            if (tesRolePolicyArn.isPresent()) {\n-                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n-                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n-            }\n-\n-            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n-        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n-            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n-        }\n+//        try {\n+//            iotClient.deleteRoleAlias(DeleteRoleAliasRequest.builder().roleAlias(TES_ROLE_ALIAS_NAME).build());\n+//\n+//            if (tesRolePolicyArn.isPresent()) {\n+//                iamClient.detachRolePolicy(DetachRolePolicyRequest.builder().roleName(TES_ROLE_NAME).policyArn(tesRolePolicyArn.get()).build());\n+//                iamClient.deletePolicy(DeletePolicyRequest.builder().policyArn(tesRolePolicyArn.get()).build());\n+//            }\n+//\n+//            iamClient.deleteRole(DeleteRoleRequest.builder().roleName(TES_ROLE_NAME).build());\n+//        } catch (ResourceNotFoundException | NoSuchEntityException e) {\n+//            logger.atInfo().addKeyValue(\"error-message\", e.getMessage()).log(\"Could not clean up TES resources\");\n+//        }\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODEzMA=="}, "originalCommit": {"oid": "c3098f11ec34841d20df3bb49c0c05d55a820cbf"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 653, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}