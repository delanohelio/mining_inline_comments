{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDc1NzU4", "number": 143, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTowNFrODr33XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTo0MlrODr331w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMwNjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTowNFrOF8eRfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1Njo0NFrOF8eniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDg3Nw==", "bodyText": "return the interface. Why change this?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398954877", "createdAt": "2020-03-26T23:39:04Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -692,7 +692,7 @@ protected void shutdown() throws InterruptedException {\n      *\n      * @return future completes when the lifecycle thread shuts down.\n      */\n-    public Future<Void> close() {\n+    public CompletableFuture<Void> close() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MDUyMQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398960521", "createdAt": "2020-03-26T23:56:44Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -692,7 +692,7 @@ protected void shutdown() throws InterruptedException {\n      *\n      * @return future completes when the lifecycle thread shuts down.\n      */\n-    public Future<Void> close() {\n+    public CompletableFuture<Void> close() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NDg3Nw=="}, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMwNzYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTozOFrOF8eSKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDowNzoxNVrOF8e0HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA0OQ==", "bodyText": "Use if (t instanceof Throwable)  , null check isn't needed https://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398955049", "createdAt": "2020-03-26T23:39:38Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2Mzc0MA==", "bodyText": "Synced offline, the biconsumer for whenComplete has the signature   BiConsumer<? super T, ? super Throwable> action). Null check is sufficient here", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398963740", "createdAt": "2020-03-27T00:07:15Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA0OQ=="}, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzMwNzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzozOTo0MlrOF8eSRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1ODowOFrOF8epMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA3OQ==", "bodyText": "don't catch throwable", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398955079", "createdAt": "2020-03-26T23:39:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {\n+                            logger.atError().setEventType(\"service-shutdown-error\")\n+                                    .addKeyValue(\"serviceName\", serviceName)\n+                                    .setCause((Throwable) t).log();\n                         }\n+\n                     });\n                 } catch (Throwable t) {\n-                    logger.atError().setEventType(\"service-shutdown-error\").addKeyValue(\"serviceName\", d[i].getName())\n+                    logger.atError().setEventType(\"service-shutdown-error\")\n+                            .addKeyValue(\"serviceName\", serviceName)\n                             .setCause(t).log();\n+                    arr[i] = CompletableFuture.completedFuture(Optional.empty());\n                 }\n             }\n \n-            allServicesExitedLatch.await(timeoutSeconds, TimeUnit.SECONDS);\n+            try {\n+                CompletableFuture<Void> combinedFuture = CompletableFuture.allOf(arr);\n+                combinedFuture.get(timeoutSeconds, TimeUnit.SECONDS);\n+            } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MDk0NQ==", "bodyText": "Updated", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/143#discussion_r398960945", "createdAt": "2020-03-26T23:58:08Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/Kernel.java", "diffHunk": "@@ -484,23 +482,35 @@ public void shutdown(int timeoutSeconds) {\n         try {\n             logger.atInfo().setEventType(\"system-shutdown\").addKeyValue(\"main\", getMain()).log();\n             EvergreenService[] d = orderedDependencies().toArray(new EvergreenService[0]);\n-            CountDownLatch allServicesExitedLatch = new CountDownLatch(d.length);\n \n+            CompletableFuture[] arr = new CompletableFuture[d.length];\n             for (int i = d.length; --i >= 0; ) { // shutdown in reverse order\n+                String serviceName = d[i].getName();\n                 try {\n-                    d[i].close();\n-                    d[i].getStateTopic().subscribe((WhatHappened what, Topic t) -> {\n-                        if (((State) t.getOnce()).isClosable()) {\n-                            allServicesExitedLatch.countDown();\n+                    arr[i] = d[i].close();\n+                    arr[i].whenComplete((v, t) -> {\n+                        if (t != null) {\n+                            logger.atError().setEventType(\"service-shutdown-error\")\n+                                    .addKeyValue(\"serviceName\", serviceName)\n+                                    .setCause((Throwable) t).log();\n                         }\n+\n                     });\n                 } catch (Throwable t) {\n-                    logger.atError().setEventType(\"service-shutdown-error\").addKeyValue(\"serviceName\", d[i].getName())\n+                    logger.atError().setEventType(\"service-shutdown-error\")\n+                            .addKeyValue(\"serviceName\", serviceName)\n                             .setCause(t).log();\n+                    arr[i] = CompletableFuture.completedFuture(Optional.empty());\n                 }\n             }\n \n-            allServicesExitedLatch.await(timeoutSeconds, TimeUnit.SECONDS);\n+            try {\n+                CompletableFuture<Void> combinedFuture = CompletableFuture.allOf(arr);\n+                combinedFuture.get(timeoutSeconds, TimeUnit.SECONDS);\n+            } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NTA3OQ=="}, "originalCommit": {"oid": "4d199e0e8eaf08a3e8312fa674430fd54bbd6aac"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4965, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}