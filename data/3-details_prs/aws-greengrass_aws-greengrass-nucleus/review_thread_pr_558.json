{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDIzMzgz", "number": 558, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODozNDo0OFrOExUXgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyNzoyN1rOEz-qgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTQ5Mzc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODozNDo0OFrOHnZOtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0ODo1NVrOHncXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2OTg3Nw==", "bodyText": "What's the unit of this size? Is it bytes?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511069877", "createdAt": "2020-10-23T18:34:48Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -3,56 +3,70 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n     private final AtomicBoolean closed = new AtomicBoolean();\n \n+    private boolean autoTruncate = false;\n+    private long count;       // bytes written so far\n+    private long maxCount;    // max size of log file before truncation\n+    @Setter\n+    private Context context;\n+\n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n+    private static final long DEFAULT_MAX_TLOG_SIZE = 10_000_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e72e8df35fa7c0197717ff3c16f05054326cefd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyMTIxMw==", "bodyText": "Should be bytes. We're counting the number of characters written and compare against this. For ascii text file it seems it's safe to assume 1 character = 1 byte.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511121213", "createdAt": "2020-10-23T19:48:55Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -3,56 +3,70 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n     private final AtomicBoolean closed = new AtomicBoolean();\n \n+    private boolean autoTruncate = false;\n+    private long count;       // bytes written so far\n+    private long maxCount;    // max size of log file before truncation\n+    @Setter\n+    private Context context;\n+\n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n+    private static final long DEFAULT_MAX_TLOG_SIZE = 10_000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA2OTg3Nw=="}, "originalCommit": {"oid": "4e72e8df35fa7c0197717ff3c16f05054326cefd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMTUwNjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxODozNjo1OVrOHnZXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxOTo0ODo1N1rOHncXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3MjAwNw==", "bodyText": "Looks good. Do we delete the old files at some point?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511072007", "createdAt": "2020-10-23T18:36:59Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -120,17 +161,65 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            Utils.close(out);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            Path oldTlogPath = outPath.resolveSibling(outPath.getFileName() + \".old\");\n+            Files.move(outPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(outPath);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + outPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e72e8df35fa7c0197717ff3c16f05054326cefd"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEyMTI1OQ==", "bodyText": "Will add deletion. Needed the old tlog to make sure this works.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r511121259", "createdAt": "2020-10-23T19:48:57Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -120,17 +161,65 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            Utils.close(out);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            Path oldTlogPath = outPath.resolveSibling(outPath.getFileName() + \".old\");\n+            Files.move(outPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(outPath);\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + outPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTA3MjAwNw=="}, "originalCommit": {"oid": "4e72e8df35fa7c0197717ff3c16f05054326cefd"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDI3NzExOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoxODowNlrOHpPPMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1NToyM1rOHpSemw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzMxNA==", "bodyText": "this needs to be in an aftereach, otherwise it won't be shutdown if the test fails.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003314", "createdAt": "2020-10-27T20:18:06Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));\n+            Map<String, Object> fullConfigMap = fullConfig.toPOJO();\n+            Map<String, Object> newConfigMap = newConfig.toPOJO();\n+            assertThat(newConfigMap, is(fullConfigMap));\n+        });\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjQxMQ==", "bodyText": "Turns out we already had aftereach shutdown. Removed this one", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513056411", "createdAt": "2020-10-27T21:55:23Z", "author": {"login": "tilo-chen"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));\n+            Map<String, Object> fullConfigMap = fullConfig.toPOJO();\n+            Map<String, Object> newConfigMap = newConfig.toPOJO();\n+            assertThat(newConfigMap, is(fullConfigMap));\n+        });\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzMxNA=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDI3ODQwOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoxODoyNVrOHpPP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1NTo1NlrOHpSfdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzUwOA==", "bodyText": "do not create new Contexts, this creates a new thread which you're going to lose track of", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003508", "createdAt": "2020-10-27T20:18:25Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NjYzMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513056631", "createdAt": "2020-10-27T21:55:56Z", "author": {"login": "tilo-chen"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -326,6 +336,46 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException, IOException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxFileSize(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxFileSize(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(new Context(), configPath.resolve(\"config.tlog\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzUwOA=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDI4MTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoxOTowNVrOHpPRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1ODo1MlrOHpSkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzkxNQ==", "bodyText": "this needs to be an AtomicLong", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513003915", "createdAt": "2020-10-27T20:19:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1NzkzOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513057939", "createdAt": "2020-10-27T21:58:52Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwMzkxNQ=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDI4MjY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoxOToyOFrOHpPScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1ODo0MlrOHpSkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNDE0Nw==", "bodyText": "what is outpath?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513004147", "createdAt": "2020-10-27T20:19:28Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long maxCount = DEFAULT_MAX_TLOG_SIZE_BYTES;  // max before truncation\n+    @Setter\n+    private Context context;\n \n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n-    ConfigurationWriter(Configuration c, Writer o) {\n+    ConfigurationWriter(Configuration c, Writer o, Path op) {\n         out = o;\n+        outPath = op;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1Nzg0OQ==", "bodyText": "Changed to sensible names.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513057849", "createdAt": "2020-10-27T21:58:42Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    public static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path outPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long count = 0;  // bytes written so far\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long maxCount = DEFAULT_MAX_TLOG_SIZE_BYTES;  // max before truncation\n+    @Setter\n+    private Context context;\n \n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n-    ConfigurationWriter(Configuration c, Writer o) {\n+    ConfigurationWriter(Configuration c, Writer o, Path op) {\n         out = o;\n+        outPath = op;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNDE0Nw=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDI5MTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoyMjowOVrOHpPYAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1OToyNlrOHpSlqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNTU3MA==", "bodyText": "just synchronize it, it can't hurt", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513005570", "createdAt": "2020-10-27T20:22:09Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -122,17 +165,71 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private void truncateTlog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODIxNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513058216", "createdAt": "2020-10-27T21:59:26Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -122,17 +165,71 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count += Coerce.appendParseableString(tlogline, out);\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { //TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     * Old tlog will be renamed to tlog.old\n+     * No need to synchronize because only calling from synchronized childChanged\n+     */\n+    private void truncateTlog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNTU3MA=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDMwNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/util/Coerce.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoyNjoyOVrOHpPhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1OTozOVrOHpSmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNzk5Nw==", "bodyText": "use long", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513007997", "createdAt": "2020-10-27T20:26:29Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/util/Coerce.java", "diffHunk": "@@ -248,14 +248,17 @@ public static String toString(Object o) {\n      *\n      * @param o object to convert.\n      * @param out appendable to write to.\n+     * @return number of characters written\n      * @throws IOException if the append fails.\n      */\n-    public static void appendParseableString(Object o, Appendable out) throws IOException {\n+    public static int appendParseableString(Object o, Appendable out) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODMzMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513058333", "createdAt": "2020-10-27T21:59:39Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/util/Coerce.java", "diffHunk": "@@ -248,14 +248,17 @@ public static String toString(Object o) {\n      *\n      * @param o object to convert.\n      * @param out appendable to write to.\n+     * @return number of characters written\n      * @throws IOException if the append fails.\n      */\n-    public static void appendParseableString(Object o, Appendable out) throws IOException {\n+    public static int appendParseableString(Object o, Appendable out) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwNzk5Nw=="}, "originalCommit": {"oid": "da9a663f7f4ec468f916f84f2eb7d6dc6e343be9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI3MjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxNjoxOFrOHp1DIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo0NTo0NVrOHqlDQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjgxNw==", "bodyText": "it isn't too likely, but what if we just had 1 very large thing in the config? Maybe this shouldn't go by bytes but by number of events?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513622817", "createdAt": "2020-10-28T17:16:18Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwOTI4MQ==", "bodyText": "Pretty unlikely... but using line count does make more sense in context of log lines. Switched to max 15k lines as default. Enough? Maybe too much?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514409281", "createdAt": "2020-10-29T16:45:45Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjgxNw=="}, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI3NDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxNjo0N1rOHp1EUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxNjo0N1rOHp1EUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMzEyMQ==", "bodyText": "this log doesn't seem helpful, I'd just remove it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513623121", "createdAt": "2020-10-28T17:16:47Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_SIZE_BYTES = 10_000_000L;\n+\n+    private Writer out;\n+    private final Path tlogOutputPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private final AtomicLong count = new AtomicLong(0);  // bytes written so far\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately\n+    private boolean autoTruncate = false;\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")\n+    private long maxCount = DEFAULT_MAX_TLOG_SIZE_BYTES;  // max before truncation\n+    @Setter\n+    private Context context;\n \n     private static final Logger logger = LogManager.getLogger(ConfigurationWriter.class);\n \n     @SuppressWarnings(\"LeakingThisInConstructor\")\n-    ConfigurationWriter(Configuration c, Writer o) {\n+    ConfigurationWriter(Configuration c, Writer o, Path p) {\n         out = o;\n+        tlogOutputPath = p;\n         conf = c;\n         conf.getRoot().addWatcher(this);\n     }\n \n     ConfigurationWriter(Configuration c, Path p) throws IOException {\n-        this(c, CommitableWriter.abandonOnClose(p));\n+        this(c, CommitableWriter.abandonOnClose(p), p);\n     }\n \n     /**\n      * Dump the configuration into a file given by the path.\n      *\n-     * @param c    configuration to write out\n-     * @param file path to write to\n+     * @param c configuration to write out\n+     * @param p path to write to\n      */\n-    public static void dump(Configuration c, Path file) {\n-        try (ConfigurationWriter cs = new ConfigurationWriter(c, CommitableWriter.abandonOnClose(file))) {\n+    public static void dump(Configuration c, Path p) {\n+        try (ConfigurationWriter cs = new ConfigurationWriter(c, p)) {\n             cs.writeAll();\n-            logger.atInfo().setEventType(\"config-dump\").addKeyValue(\"path\", file).log();\n+            logger.atInfo().setEventType(\"config-dump\").addKeyValue(\"path\", p).log();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI4MDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxODoyMFrOHp1Iaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxODoyMFrOHp1Iaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDE3MQ==", "bodyText": "probably not a helpful log", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513624171", "createdAt": "2020-10-28T17:18:20Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -124,17 +167,69 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count.addAndGet(Coerce.appendParseableString(tlogline, out));\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count.get() > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODI4MTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoxODozMlrOHp1I_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo0MzowN1rOHqk7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDMxNw==", "bodyText": "definitely need this now, cannot merge without it.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513624317", "createdAt": "2020-10-28T17:18:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -124,17 +167,69 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count.addAndGet(Coerce.appendParseableString(tlogline, out));\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count.get() > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors and recover", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwNzM2Mg==", "bodyText": "Added some recovery logic", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514407362", "createdAt": "2020-10-29T16:43:07Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -124,17 +167,69 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n         }\n \n         try {\n-            Coerce.appendParseableString(tlogline, out);\n+            count.addAndGet(Coerce.appendParseableString(tlogline, out));\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        if (autoTruncate && count.get() > maxCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        logger.atInfo(TRUNCATE_TLOG_EVENT).log(\"started\");\n+        // TODO: handle errors and recover", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNDMxNw=="}, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODMwMjM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/greengrass/config/ConfigurationWriterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMjo1MVrOHp1V-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjo0Mjo0MVrOHqk6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzY0MA==", "bodyText": "Truncation is running in the publish queue isn't it? Do we need to wait here or can you just block on the publish queue using runOnPublishQueueAndWait?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r513627640", "createdAt": "2020-10-28T17:22:51Z", "author": {"login": "MikeDombo"}, "path": "src/test/java/com/aws/greengrass/config/ConfigurationWriterTest.java", "diffHunk": "@@ -98,4 +103,29 @@ void GIVEN_config_with_configuration_writer_WHEN_config_remove_made_THEN_written\n             assertNull(readConfig.find(\"a\", \"containerToBeRemoved\"));\n         }\n     }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_max_size_reached_THEN_auto_truncate()\n+            throws IOException, InterruptedException {\n+        Path tlog = tempDir.resolve(\"test_truncate.tlog\");\n+        Configuration config = new Configuration(context);\n+        Kernel mockKernel = mock(Kernel.class);\n+        doNothing().when(mockKernel).writeEffectiveConfigAsTransactionLog(any());\n+        context.put(Kernel.class, mockKernel);\n+\n+        ConfigurationWriter.logTransactionsTo(config, tlog)\n+                .flushImmediately(true).withAutoTruncate(context).withMaxFileSize(120);\n+\n+        Topic test1 = config.lookup(\"test1\").withValue(\"1\");\n+        test1.withNewerValue(System.currentTimeMillis(), \"a longer string to exceed limit\");\n+        // wait for truncation to complete\n+        Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQwNzA1Ng==", "bodyText": "That indeed was a hack... managed to get rid of the sleep by placing runOnPublishQueueAndWait after each topic update.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514407056", "createdAt": "2020-10-29T16:42:41Z", "author": {"login": "tilo-chen"}, "path": "src/test/java/com/aws/greengrass/config/ConfigurationWriterTest.java", "diffHunk": "@@ -98,4 +103,29 @@ void GIVEN_config_with_configuration_writer_WHEN_config_remove_made_THEN_written\n             assertNull(readConfig.find(\"a\", \"containerToBeRemoved\"));\n         }\n     }\n+\n+    @Test\n+    void GIVEN_config_with_configuration_writer_WHEN_max_size_reached_THEN_auto_truncate()\n+            throws IOException, InterruptedException {\n+        Path tlog = tempDir.resolve(\"test_truncate.tlog\");\n+        Configuration config = new Configuration(context);\n+        Kernel mockKernel = mock(Kernel.class);\n+        doNothing().when(mockKernel).writeEffectiveConfigAsTransactionLog(any());\n+        context.put(Kernel.class, mockKernel);\n+\n+        ConfigurationWriter.logTransactionsTo(config, tlog)\n+                .flushImmediately(true).withAutoTruncate(context).withMaxFileSize(120);\n+\n+        Topic test1 = config.lookup(\"test1\").withValue(\"1\");\n+        test1.withNewerValue(System.currentTimeMillis(), \"a longer string to exceed limit\");\n+        // wait for truncation to complete\n+        Thread.sleep(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzY0MA=="}, "originalCommit": {"oid": "b0258caef94e7097f8baba6705669552c5662bde"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU4MjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozNzozMlrOHqyXJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMjo0OVrOHrVwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzM2Ng==", "bodyText": "rename bytes to lines", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514627366", "createdAt": "2020-10-29T23:37:32Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -82,6 +97,34 @@ public synchronized void close() {\n         Utils.close(out);\n     }\n \n+    /**\n+     * Set to enable auto truncate with default max tlog size.\n+     * @param context a Context to provide access to kernel\n+     * @return this\n+     * @throws IOException I/O error querying current log file size\n+     */\n+    public ConfigurationWriter withAutoTruncate(Context context) throws IOException {\n+        autoTruncate = true;\n+        setContext(context);\n+        if (Files.exists(tlogOutputPath)) {\n+            count.set(Files.lines(tlogOutputPath).count());\n+        } else {\n+            count.set(0);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Set max lines of tlog before truncation.\n+     *\n+     * @param bytes max number of lines\n+     * @return this\n+     */\n+    public ConfigurationWriter withMaxLines(long bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada8cee3031a058db00f82603a26e531a504b6d7"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzIxNw==", "bodyText": "ops", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515207217", "createdAt": "2020-10-30T16:02:49Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -82,6 +97,34 @@ public synchronized void close() {\n         Utils.close(out);\n     }\n \n+    /**\n+     * Set to enable auto truncate with default max tlog size.\n+     * @param context a Context to provide access to kernel\n+     * @return this\n+     * @throws IOException I/O error querying current log file size\n+     */\n+    public ConfigurationWriter withAutoTruncate(Context context) throws IOException {\n+        autoTruncate = true;\n+        setContext(context);\n+        if (Files.exists(tlogOutputPath)) {\n+            count.set(Files.lines(tlogOutputPath).count());\n+        } else {\n+            count.set(0);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Set max lines of tlog before truncation.\n+     *\n+     * @param bytes max number of lines\n+     * @return this\n+     */\n+    public ConfigurationWriter withMaxLines(long bytes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzM2Ng=="}, "originalCommit": {"oid": "ada8cee3031a058db00f82603a26e531a504b6d7"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDU4NTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzozODo1MFrOHqyYkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjowMjo1MVrOHrVwSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzczMA==", "bodyText": "I wouldn't actually do this, otherwise we'll have the same problem that I was talking about before. I'd just reset the count to 0, and then say once we hit 15,000 new events, to truncate. That seems reasonable.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r514627730", "createdAt": "2020-10-29T23:38:50Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        Path oldTlogPath = tlogOutputPath.resolveSibling(tlogOutputPath.getFileName() + \".old\");\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            try {\n+                Files.move(tlogOutputPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to rename existing tlog\");\n+                // recover: reopen writer to old tlog\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            try {\n+                context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(tlogOutputPath);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to persist kernel config\");\n+                // recover: undo renaming and keep using old tlog\n+                Files.move(oldTlogPath, tlogOutputPath, StandardCopyOption.REPLACE_EXISTING);\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + tlogOutputPath);\n+            // open writer to new tlog\n+            out = newTlogWriter(tlogOutputPath);\n+            count.set(Files.lines(tlogOutputPath).count());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada8cee3031a058db00f82603a26e531a504b6d7"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIwNzI0MA==", "bodyText": "oh nice that's a simple solution...", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515207240", "createdAt": "2020-10-30T16:02:51Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {\n+        Path oldTlogPath = tlogOutputPath.resolveSibling(tlogOutputPath.getFileName() + \".old\");\n+        Throwable error = context.runOnPublishQueueAndWait(() -> {\n+            // close existing writer\n+            flush(out);\n+            if (out instanceof Commitable) {\n+                ((Commitable) out).commit();\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog writer closed\");\n+            // move old tlog\n+            try {\n+                Files.move(tlogOutputPath, oldTlogPath, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to rename existing tlog\");\n+                // recover: reopen writer to old tlog\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"existing tlog renamed to \" + oldTlogPath);\n+            // write current state to new tlog\n+            try {\n+                context.get(Kernel.class).writeEffectiveConfigAsTransactionLog(tlogOutputPath);\n+            } catch (IOException e) {\n+                logger.atError(TRUNCATE_TLOG_EVENT, e).log(\"failed to persist kernel config\");\n+                // recover: undo renaming and keep using old tlog\n+                Files.move(oldTlogPath, tlogOutputPath, StandardCopyOption.REPLACE_EXISTING);\n+                out = newTlogWriter(tlogOutputPath);\n+                setTruncateRetryCount();\n+                logger.atWarn(TRUNCATE_TLOG_EVENT, e).log(\"recovered and will retry later\");\n+                return;\n+            }\n+            logger.atDebug(TRUNCATE_TLOG_EVENT).log(\"current effective config written to \" + tlogOutputPath);\n+            // open writer to new tlog\n+            out = newTlogWriter(tlogOutputPath);\n+            count.set(Files.lines(tlogOutputPath).count());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyNzczMA=="}, "originalCommit": {"oid": "ada8cee3031a058db00f82603a26e531a504b6d7"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTE3NTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDo0NjozOFrOHrgBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMjoyMFrOHrgnkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NTM5Nw==", "bodyText": "Just add the justification here instead of in comment, so it's easier to maintain. Same for maxCount", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515375397", "createdAt": "2020-10-30T20:46:38Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_LINES = 15_000;\n+\n+    private Writer out;\n+    private final Path tlogOutputPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private final AtomicLong count = new AtomicLong(0);  // lines written so far\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTIzMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515385232", "createdAt": "2020-10-30T21:12:20Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -5,56 +5,73 @@\n \n package com.aws.greengrass.config;\n \n+import com.aws.greengrass.dependency.Context;\n+import com.aws.greengrass.lifecyclemanager.Kernel;\n import com.aws.greengrass.logging.api.Logger;\n import com.aws.greengrass.logging.impl.LogManager;\n import com.aws.greengrass.util.Coerce;\n import com.aws.greengrass.util.Commitable;\n import com.aws.greengrass.util.CommitableWriter;\n import com.aws.greengrass.util.Utils;\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import lombok.Setter;\n \n import java.io.Closeable;\n import java.io.IOException;\n import java.io.Writer;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.nio.file.StandardOpenOption;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import static com.aws.greengrass.util.Utils.flush;\n \n public class ConfigurationWriter implements Closeable, ChildChanged {\n-    private final Writer out;\n+    private static final String TRUNCATE_TLOG_EVENT = \"truncate-tlog\";\n+    private static final long DEFAULT_MAX_TLOG_LINES = 15_000;\n+\n+    private Writer out;\n+    private final Path tlogOutputPath;\n     private final Configuration conf;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private final AtomicLong count = new AtomicLong(0);  // lines written so far\n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification = \"No need for flush immediately to be sync\")\n     private boolean flushImmediately;\n-    private final AtomicBoolean closed = new AtomicBoolean();\n+    @SuppressFBWarnings(\"IS2_INCONSISTENT_SYNC\")  // same situation as flushImmediately", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NTM5Nw=="}, "originalCommit": {"oid": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTE5MDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDo1MjoyOVrOHrgKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMjo1NFrOHrgoZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NzcxMQ==", "bodyText": "Can we add some testing for different error handling scenarios as well?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515377711", "createdAt": "2020-10-30T20:52:29Z", "author": {"login": "hui-yang"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTQ0NA==", "bodyText": "Yeah let me add a few test cases.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515385444", "createdAt": "2020-10-30T21:12:54Z", "author": {"login": "tilo-chen"}, "path": "src/main/java/com/aws/greengrass/config/ConfigurationWriter.java", "diffHunk": "@@ -125,16 +168,92 @@ public synchronized void childChanged(WhatHappened what, Node n) {\n \n         try {\n             Coerce.appendParseableString(tlogline, out);\n+            count.incrementAndGet();\n         } catch (IOException ex) {\n             logger.atError().setEventType(\"config-dump-error\").addKeyValue(\"configNode\", n.getFullName()).setCause(ex)\n                     .log();\n         }\n         if (flushImmediately) {\n             flush(out);\n         }\n+        long currCount = count.get();\n+        if (autoTruncate && currCount > maxCount && currCount > retryCount) {\n+            truncateTlog();\n+        }\n     }\n \n     public void writeAll() { // GG_NEEDS_REVIEW: TODO double check this\n         conf.deepForEachTopic(n -> childChanged(WhatHappened.childChanged, n));\n     }\n+\n+    /**\n+     * Create a new Writer for writing to a tlog file.\n+     *\n+     * @param outputPath path to tlog file\n+     * @return a new writer\n+     * @throws IOException if I/O error creating output file or writer\n+     */\n+    private static Writer newTlogWriter(Path outputPath) throws IOException {\n+        return Files.newBufferedWriter(outputPath, StandardOpenOption.WRITE, StandardOpenOption.APPEND,\n+                StandardOpenOption.DSYNC, StandardOpenOption.CREATE);\n+    }\n+\n+    /**\n+     * Discard current tlog. Start a new tlog with the current kernel configs.\n+     */\n+    private synchronized void truncateTlog() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM3NzcxMQ=="}, "originalCommit": {"oid": "71d6d51b44538cdec90c7f0f11279f4e92bf3e40"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTM5NTIxOnYy", "diffSide": "RIGHT", "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyNzoyN1rOHriEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMjoyNzoyN1rOHriEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQwODk0NA==", "bodyText": "don't run this inside of the publish queue, otherwise it will not cause the test to fail", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/558#discussion_r515408944", "createdAt": "2020-10-30T22:27:27Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/greengrass/integrationtests/lifecyclemanager/KernelTest.java", "diffHunk": "@@ -316,6 +325,45 @@ void GIVEN_expected_state_transitions_WHEN_services_error_out_THEN_all_expectati\n         }\n     }\n \n+    @SuppressWarnings(\"PMD.CloseResource\")\n+    @Test\n+    void GIVEN_kernel_running_WHEN_truncate_tlog_THEN_current_config_saved_and_using_new_tlog()\n+            throws InterruptedException {\n+        kernel = new Kernel().parseArgs().launch();\n+        Context context = kernel.getContext();\n+        Configuration config = context.get(Configuration.class);\n+        Path configPath = kernel.getNucleusPaths().configPath();\n+        KernelLifecycle kernelLifecycle = context.get(KernelLifecycle.class);\n+\n+        // create a tlog that's not interrupted by truncation workflow. goal is to be consistent with this one\n+        context.runOnPublishQueueAndWait(() -> {\n+            kernel.writeEffectiveConfigAsTransactionLog(configPath.resolve(\"full.tlog\"));\n+            ConfigurationWriter.logTransactionsTo(config, configPath.resolve(\"full.tlog\")).flushImmediately(true);\n+        });\n+\n+        // create some test topics\n+        Topic testTopic1 = config.lookup(\"testTopic1\").withValue(\"initial\");\n+        context.runOnPublishQueueAndWait(() -> {\n+            // make truncate run by setting a small size\n+            kernelLifecycle.getTlog().withMaxEntries(1);\n+            testTopic1.withNewerValue(System.currentTimeMillis(), \"triggering truncate\");\n+            // immediately queue a task to increase max size to prevent repeated truncation\n+            context.runOnPublishQueue(() -> kernelLifecycle.getTlog().withMaxEntries(100_000));\n+        });\n+        // wait for things to finish\n+        Thread.sleep(1000);\n+        testTopic1.withNewerValue(System.currentTimeMillis(),\"should be in new log\");\n+\n+        // block and check equivalence\n+        context.runOnPublishQueueAndWait(() -> {\n+            Configuration fullConfig = ConfigurationReader.createFromTLog(context, configPath.resolve(\"full.tlog\"));\n+            Configuration newConfig = ConfigurationReader.createFromTLog(context, configPath.resolve(\"config.tlog\"));\n+            Map<String, Object> fullConfigMap = fullConfig.toPOJO();\n+            Map<String, Object> newConfigMap = newConfig.toPOJO();\n+            assertThat(newConfigMap, is(fullConfigMap));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61be71c752fd7c2a72c001e36ead669cbe0ff9f1"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 384, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}