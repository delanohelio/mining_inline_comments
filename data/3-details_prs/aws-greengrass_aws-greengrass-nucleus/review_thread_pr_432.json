{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MzM4ODM2", "number": 432, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo1Njo1NVrOEitq2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo1Njo1NVrOEitq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODM1MjkxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/ThreadProtector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo1Njo1NVrOHQv8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjo1Njo1NVrOHQv8mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMyNDgyNA==", "bodyText": "Add a comment to explain why we filter that one out.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/432#discussion_r487324824", "createdAt": "2020-09-11T22:56:55Z", "author": {"login": "abanthiy"}, "path": "src/test/java/com/aws/iot/evergreen/testcommons/testutilities/ThreadProtector.java", "diffHunk": "@@ -27,19 +27,29 @@\n \n     @Override\n     public void afterAll(ExtensionContext context) throws Exception {\n-        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();\n-        List<String> liveThreads =\n-                threadSet.stream()\n-                        .filter(Thread::isAlive)\n-                        .filter(t -> t.getThreadGroup() != null && \"main\".equals(t.getThreadGroup().getName()))\n-                        .map(Thread::getName)\n-                        .filter(Objects::nonNull)\n-                        .filter(name -> !ALLOWED_THREAD_NAMES.contains(name))\n-                        .collect(Collectors.toList());\n+        List<Thread> liveThreads = getThreads();\n         if (!liveThreads.isEmpty()) {\n-            // Don't fail tests right now. Too many things would break.\n-            // fail(\"Threads are still running: \" + liveThreads);\n             System.err.println(\"Threads are still running: \" + liveThreads);\n+\n+            /*\n+            // Wait, then try again and see if they're still running\n+            Thread.sleep(2000);\n+            liveThreads = getThreads();\n+            if (!liveThreads.isEmpty()) {\n+                fail(\"Threads are still running: \" + liveThreads);\n+            }\n+             */\n         }\n     }\n+\n+    private List<Thread> getThreads() {\n+        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();\n+        return threadSet.stream()\n+                .filter(Thread::isAlive)\n+                .filter(t -> t.getThreadGroup() != null && \"main\".equals(t.getThreadGroup().getName()))\n+                .filter(t -> Objects.nonNull(t.getName()))\n+                .filter(t -> !ALLOWED_THREAD_NAMES.contains(t.getName()))\n+                .filter(t -> !t.getName().contains(\"globalEventExecutor\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9521ad8d05861f99145ece958bdbb7492e4bed00"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 787, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}