{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDIwMTE1", "number": 163, "title": "Transition to BROKEN if a service ERRORED three times consecutively", "bodyText": "Issue #, if available:\nDescription of changes:\nThe services are put in BROKEN state if a state transition is errorred\nfor three times consecutively.\nWhy is this change necessary:\nHow was this change tested:\nmvn clean verify\nOne test in the KernelTest.java is flaky. I'll keep looking into the test.\nAny additional information or context required to review the change:\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-04-07T18:04:42Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163", "merged": true, "mergeCommit": {"oid": "9796819f29a79507bf19b70ee7c429e7a01dc8ce"}, "closed": true, "closedAt": "2020-04-09T22:35:06Z", "author": {"login": "fengwang666"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVXF2hAH2gAyNDAwNDIwMTE1OjFjYWZkNTljYjczMzYzNTQwNzNhMGUxNGM0YzAwYzdjZTk3YTFlNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWD3g3AFqTM5MTE2MjIwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/1cafd59cb7336354073a0e14c4c00c7ce97a1e51", "committedDate": "2020-04-07T17:52:42Z", "message": "Transition to BROKEN if a service ERRORED three times consecutively\n\nThe service will be put in BROKEN state if a state transition is errored\nfor three times consecutively.`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzY2NTQ2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389366546", "createdAt": "2020-04-07T18:07:40Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowNzo0MFrOGCP5uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowNzo0MFrOGCP5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMDg3NQ==", "bodyText": "this won't prove that it is restarted since this will trigger on the first time the service boots.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405010875", "createdAt": "2020-04-07T18:07:40Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzY3MjAz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389367203", "createdAt": "2020-04-07T18:08:33Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowODozM1rOGCP7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowODozM1rOGCP7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMTQwNg==", "bodyText": "these shutdowns won't happen in the event that the assertion fails.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405011406", "createdAt": "2020-04-07T18:08:33Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzY4MTI0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389368124", "createdAt": "2020-04-07T18:09:49Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowOTo0OVrOGCP-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODowOTo0OVrOGCP-xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjE2Ng==", "bodyText": "I think we're going to want something smarter than this, specifically to track the time of the errors so we can say: if it errored 5 times in 10 minutes, then consider it broken. And things like that.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405012166", "createdAt": "2020-04-07T18:09:49Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -67,6 +67,12 @@\n     private State prevState = State.NEW;\n     private Future<?> lifecycleFuture;\n     private final AtomicBoolean isClosed = new AtomicBoolean(false);\n+    // The number of continual occurrences from a state to ERRORED.\n+    // This is not thread safe and should only be used inside reportState().\n+    private Map<State, Integer> stateToErroredCount = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDE3Mzk1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389417395", "createdAt": "2020-04-07T19:17:54Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNzo1NFrOGCSdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNzo1NFrOGCSdJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjcxMQ==", "bodyText": "How is this working given that it appears to reset with any state which isn't errored? If the services goes from errored, then it will restart, so it will transition to installed (which would clear the error count), then it goes to running, then errored again.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405052711", "createdAt": "2020-04-07T19:17:54Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTQ3MDAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389547002", "createdAt": "2020-04-07T22:57:56Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo1Nzo1NlrOGCZHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjo1Nzo1NlrOGCZHYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MTgyNQ==", "bodyText": "Do we want to ensure that the can move to installed after it error-ed in the previous attempt\nsomething like :\nhttps://github.com/aws/aws-greengrass-kernel/blob/master/src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelShutdownTest.java#L30", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405161825", "createdAt": "2020-04-07T22:57:56Z", "author": {"login": "fahadmohammed01"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTQ5MTc0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389549174", "createdAt": "2020-04-07T23:03:18Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowMzoxOFrOGCZPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowMzoxOFrOGCZPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2MzgwMQ==", "bodyText": "do we want to move the service to broken state in the below scenario\nservice does not handle shutdown properly and kernel always kills the service using SIGKILL. When the service is asked to move to finished state (during shutdown), it will error and the counter is incremented. The service will be marked as broken the third time the service is shutdown.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405163801", "createdAt": "2020-04-07T23:03:18Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTc2NzQ3", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389576747", "createdAt": "2020-04-08T00:22:44Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMjo0NFrOGCawvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyMjo0NFrOGCawvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4ODc5OQ==", "bodyText": "Need a test for getting out of broken state.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405188799", "createdAt": "2020-04-08T00:22:44Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,74 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_fail_retry_succeed_WHEN_kernel_launches_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installErrorRetry\") && newState.equals(State.INSTALLED)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupError\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_startup_fail_retry_succeed_WHEN_kernel_launches_THEN_service_startup_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_startup_error_retry.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceRunning = new CountDownLatch(1);\n+        // Check that new_service starts and then main gets restarted\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"startupErrorRetry\") && newState.equals(State.RUNNING)) {\n+                serviceRunning.countDown();\n+            }\n+        });\n+        assertTrue(serviceRunning.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTkzMzI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389593326", "createdAt": "2020-04-08T01:19:35Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToxOTozNVrOGCbs5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToxOTozNVrOGCbs5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDE5OA==", "bodyText": "In the code of error handling (when currentStatus is ERROR, the error handling will restart the service by immediately transition service state to INSTALLED) , therefore service go into ERROR state consecutively is very rare", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405204198", "createdAt": "2020-04-08T01:19:35Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -158,8 +164,17 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        if (State.ERRORED.equals(newState)) {\n+            stateToErroredCount.compute(currentState, (k, v) -> (v == null) ? 1 : v + 1);\n+        } else {\n+            stateToErroredCount.put(currentState, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTkzOTQ5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-389593949", "createdAt": "2020-04-08T01:21:40Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToyMTo0MFrOGCbvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMToyMTo0MFrOGCbvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwNDc1Mg==", "bodyText": "I personally don't like the idea of change reported state in reportState(). In that case, every place where you need to handle ERROR you need to handle BROKEN as well", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405204752", "createdAt": "2020-04-08T01:21:40Z", "author": {"login": "ShirleyZheng92"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -452,6 +468,8 @@ private void startStateTransition() throws InterruptedException {\n                     State reportState = getReportState().orElse(null);\n                     if (State.ERRORED.equals(reportState) || !ok) {\n                         updateStateAndBroadcast(State.ERRORED);\n+                    } else if (State.BROKEN.equals(reportState)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTU5ODY2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-390159866", "createdAt": "2020-04-08T16:57:25Z", "commit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NzoyNVrOGC4WMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo1NzoyNVrOGC4WMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY3MzUyMQ==", "bodyText": "Nice, this fixes concurrent modification exceptions I saw while looking at flaky tests.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r405673521", "createdAt": "2020-04-08T16:57:25Z", "author": {"login": "fahadmohammed01"}, "path": "src/main/java/com/aws/iot/evergreen/util/Exec.java", "diffHunk": "@@ -51,7 +51,7 @@\n     private static final File userdir = new File(System.getProperty(\"user.dir\"));\n     private static final File homedir = new File(System.getProperty(\"user.home\"));\n     @SuppressWarnings(\"PMD.LooseCoupling\")\n-    private static final LinkedList<Path> paths = new LinkedList<>();\n+    private static final ConcurrentLinkedDeque<Path> paths = new ConcurrentLinkedDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cafd59cb7336354073a0e14c4c00c7ce97a1e51"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "635b583a65e8b247e6bf8d4f5dafb27c456b6d81", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/635b583a65e8b247e6bf8d4f5dafb27c456b6d81", "committedDate": "2020-04-09T15:54:46Z", "message": "Merge branch 'master' into transit-error-to-broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b907ef3fd32f540cbdda8ab2a01461da4344529f", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b907ef3fd32f540cbdda8ab2a01461da4344529f", "committedDate": "2020-04-09T18:11:53Z", "message": "Merge branch 'master' into transit-error-to-broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/6bc701651c94472d7d0167c0afbf65df27a8124f", "committedDate": "2020-04-09T18:12:47Z", "message": "Get out of BROKEN state with an reinstall request`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDM4OTEz", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-391038913", "createdAt": "2020-04-09T18:38:01Z", "commit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODozODowMVrOGDkyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODo0OTo0MlrOGDlLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwMTU5MA==", "bodyText": "This is not the merge that we use. We use kernel.mergeInNewConfig, I think you may want to use that instead since that is the code path used by a deployment.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406401590", "createdAt": "2020-04-09T18:38:01Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTQ5Nw==", "bodyText": "Bad merge, or are you adding this back explicitly?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406405497", "createdAt": "2020-04-09T18:45:12Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/config/Topic.java", "diffHunk": "@@ -120,10 +115,17 @@ public void fire(WhatHappened what) {\n                 .addKeyValue(\"reason\", what.name()).log();\n         if (watchers != null) {\n             for (Watcher s : watchers) {\n-                if (s instanceof Subscriber) {\n-                    ((Subscriber) s).published(what, this);\n+                try {\n+                    if (s instanceof Subscriber) {\n+                        ((Subscriber) s).published(what, this);\n+                    }\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNTk1MA==", "bodyText": "Extract statesToTrack as a static final, and use hashset.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406405950", "createdAt": "2020-04-09T18:46:05Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -159,8 +165,23 @@ public synchronized void reportState(State newState) {\n             // if a service doesn't have any run logic, request stop on service to clean up DesiredStateList\n             requestStop();\n         }\n-\n-        enqueueStateEvent(newState);\n+        State currentState = getState();\n+        // We only need to track the ERROR for the state transition starting from NEW, INSTALLED and RUNNING because\n+        // these states impact whether the service can function as expected.\n+        List<State> statesToTrack = Arrays.asList(State.NEW, State.INSTALLED, State.RUNNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwNjg0NA==", "bodyText": "Did you get any understanding for why this was the way it was before?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406406844", "createdAt": "2020-04-09T18:47:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -333,7 +355,7 @@ public final void requestRestart() {\n      */\n     public final void requestReinstall() {\n         synchronized (this.desiredStateList) {\n-            setDesiredState(State.INSTALLED, State.NEW, State.RUNNING);\n+            setDesiredState(State.NEW, State.RUNNING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQwODAwNA==", "bodyText": "doesn't this prevent the service from restarting?", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406408004", "createdAt": "2020-04-09T18:49:42Z", "author": {"login": "MikeDombo"}, "path": "src/main/java/com/aws/iot/evergreen/kernel/EvergreenService.java", "diffHunk": "@@ -511,10 +546,7 @@ private void startStateTransition() throws InterruptedException {\n                         // in order to shutdown this thread since we were requested to stop\n                         throw e;\n                     }\n-                    //TODO: Set service to broken state if error happens too often\n-                    if (!desiredState.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc701651c94472d7d0167c0afbf65df27a8124f"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ecc9fddefa35a0386b02fc250c3696a3bb04c4", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b2ecc9fddefa35a0386b02fc250c3696a3bb04c4", "committedDate": "2020-04-09T20:18:56Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTA5Nzg4", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-391109788", "createdAt": "2020-04-09T20:29:27Z", "commit": {"oid": "b2ecc9fddefa35a0386b02fc250c3696a3bb04c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyOToyN1rOGDoSEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyOToyN1rOGDoSEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1ODg5OQ==", "bodyText": "This is now fixed and merged. Please try again and remove these comments if it is working.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#discussion_r406458899", "createdAt": "2020-04-09T20:29:27Z", "author": {"login": "MikeDombo"}, "path": "src/integrationtests/java/com/aws/iot/evergreen/integrationtests/kernel/KernelTest.java", "diffHunk": "@@ -133,6 +133,101 @@ private void testGroup(int group) throws Exception {\n         }\n     }\n \n+    @Test\n+    void GIVEN_service_install_always_fail_WHEN_kernel_launches_THEN_service_go_broken_state() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+        kernel.shutdown();\n+    }\n+\n+    @Test\n+    void GIVEN_service_install_broken_WHEN_kernel_launches_with_fix_THEN_service_install_succeeds() throws Exception {\n+        Kernel kernel = new Kernel();\n+        kernel.parseArgs(\"-i\", getClass().getResource(\"config_install_error.yaml\").toString());\n+        kernel.launch();\n+\n+        CountDownLatch serviceBroken = new CountDownLatch(1);\n+        kernel.context.addGlobalStateChangeListener((service, oldState, newState) -> {\n+            if (service.getName().equals(\"installerror\") && newState.equals(State.BROKEN)) {\n+                serviceBroken.countDown();\n+            }\n+        });\n+        assertTrue(serviceBroken.await(60, TimeUnit.SECONDS));\n+\n+        // merge in a new config that fixes the installation error\n+        kernel.read(kernel.deTilde(getClass().getResource(\"config_install_succeed_partial.yaml\").toString()));\n+        // The above read() should already trigger a re-install through subscriber but there appears a bug in the code.\n+        // SIM: https://sim.amazon.com/issues/469c4bac-808a-4fe7-ae89-8546a55566d8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ecc9fddefa35a0386b02fc250c3696a3bb04c4"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "190930c6090f14a227c5355a59346ca45a44c651", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/190930c6090f14a227c5355a59346ca45a44c651", "committedDate": "2020-04-09T20:35:28Z", "message": "Merge branch 'master' into transit-error-to-broken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b079d870d6fa60c93054a77bce9ea9dfb4c403b7", "author": {"user": {"login": "fengwang666", "name": "Feng Wang"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/b079d870d6fa60c93054a77bce9ea9dfb4c403b7", "committedDate": "2020-04-09T20:37:50Z", "message": "Fix test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTE3NjQ1", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-391117645", "createdAt": "2020-04-09T20:42:31Z", "commit": {"oid": "b079d870d6fa60c93054a77bce9ea9dfb4c403b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTYyMjA5", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/163#pullrequestreview-391162209", "createdAt": "2020-04-09T22:02:46Z", "commit": {"oid": "b079d870d6fa60c93054a77bce9ea9dfb4c403b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2423, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}