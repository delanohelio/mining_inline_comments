{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTIyNDI5", "number": 656, "title": "Fix retries in shadow, update subscribe error handling", "bodyText": "Issue #, if available:\nDescription of changes:\nhttps://sim.amazon.com/issues/0db632d3-1066-4721-9984-dd3ef1d9d1d7\nFixes retries when shadow subscribe times out. Removes the unneeded error handling in the mqtt subscribe.\nWhy is this change necessary:\nHow was this change tested:\nAny additional information or context required to review the change:\nChecklist:\n\n Updated the README if applicable\n Updated or added new unit tests\n Updated or added new integration tests\n Updated or added new end-to-end tests\n\nBy submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.", "createdAt": "2020-11-11T03:43:04Z", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656", "merged": true, "mergeCommit": {"oid": "d4d85cced53f9a2bc8f109275f6a18b5d1121f1e"}, "closed": true, "closedAt": "2020-11-11T06:39:52Z", "author": {"login": "MikeDombo"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbVlrUgH2gAyNTE4OTIyNDI5OjYzY2EyZGYxNjA3ODM5ZjViM2ZmY2IwY2QwMjZhYmM3ZjM0ZjIwMWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbX0d_gH2gAyNTE4OTIyNDI5OjdhNTRlMTIxM2NmNjFmYTdlNWUwZjBkNTFmMjI0ZTczZDVjYTgwYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/63ca2df1607839f5b3ffcb0cd026abc7f34f201d", "committedDate": "2020-11-11T03:42:21Z", "message": "Fix retries in shadow, update subscribe error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODcwNDAy", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#pullrequestreview-527870402", "createdAt": "2020-11-11T05:23:19Z", "commit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODgwMjA0", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#pullrequestreview-527880204", "createdAt": "2020-11-11T05:53:42Z", "commit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0MlrOHw_Jng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1Mzo0MlrOHw_Jng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODM1MA==", "bodyText": "Should the code instead handle TimeoutException thrown from get? remove the request from the subscriptions map. If CompletableFuture.get() times out, the whenComplete action is not run.", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#discussion_r521128350", "createdAt": "2020-11-11T05:53:42Z", "author": {"login": "fengwang666"}, "path": "src/main/java/com/aws/greengrass/mqttclient/MqttClient.java", "diffHunk": "@@ -273,42 +273,36 @@ protected MqttClient(DeviceConfiguration deviceConfiguration, Spool spool, Sched\n     @SuppressWarnings(\"PMD.CloseResource\")\n     public synchronized void subscribe(SubscribeRequest request)\n             throws ExecutionException, InterruptedException, TimeoutException {\n-        try {\n-            AwsIotMqttClient connection = null;\n-            // Use the write scope when identifying the subscriptionTopics that exist\n-            try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n-                // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n-\n-                // If none of our existing subscriptions include (through wildcards) the new topic, then\n-                // go ahead and subscribe to it\n-                Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n-                        findExistingSubscriberForTopic(request.getTopic());\n-                if (existingConnection.isPresent()) {\n-                    subscriptions.put(request, existingConnection.get().getValue());\n-                } else {\n-                    connection = getConnection(true);\n-                    subscriptions.put(request, connection);\n-                }\n+        AwsIotMqttClient connection = null;\n+        // Use the write scope when identifying the subscriptionTopics that exist\n+        try (LockScope scope = LockScope.lock(connectionLock.writeLock())) {\n+            // TODO: [P41214973] Handle subscriptions with differing QoS (Upgrade 0->1->2)\n+\n+            // If none of our existing subscriptions include (through wildcards) the new topic, then\n+            // go ahead and subscribe to it\n+            Optional<Map.Entry<MqttTopic, AwsIotMqttClient>> existingConnection =\n+                    findExistingSubscriberForTopic(request.getTopic());\n+            if (existingConnection.isPresent()) {\n+                subscriptions.put(request, existingConnection.get().getValue());\n+            } else {\n+                connection = getConnection(true);\n+                subscriptions.put(request, connection);\n             }\n+        }\n \n-            try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n-                // Connection isn't null, so we should subscribe to the topic\n-                if (connection != null) {\n-                    AwsIotMqttClient finalConnection = connection;\n-                    connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n-                        if (t == null) {\n-                            subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n-                        } else {\n-                            subscriptions.remove(request);\n-                            logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n-                        }\n-                    }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n-                }\n+        try (LockScope scope = LockScope.lock(connectionLock.readLock())) {\n+            // Connection isn't null, so we should subscribe to the topic\n+            if (connection != null) {\n+                AwsIotMqttClient finalConnection = connection;\n+                connection.subscribe(request.getTopic(), request.getQos()).whenComplete((i, t) -> {\n+                    if (t == null) {\n+                        subscriptionTopics.put(new MqttTopic(request.getTopic()), finalConnection);\n+                    } else {\n+                        subscriptions.remove(request);\n+                        logger.atError().kv(TOPIC_KEY, request.getTopic()).log(\"Error subscribing\", t);\n+                    }\n+                }).get(connection.getTimeout(), TimeUnit.MILLISECONDS);\n             }\n-        } catch (ExecutionException e) {\n-            // If subscribing failed, then clean up the failed subscription callback\n-            subscriptions.remove(request);\n-            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODg0MDI2", "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/pull/656#pullrequestreview-527884026", "createdAt": "2020-11-11T06:04:19Z", "commit": {"oid": "63ca2df1607839f5b3ffcb0cd026abc7f34f201d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a6a3d4a4127df31459cbd9920f907b05c7871b", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/d6a6a3d4a4127df31459cbd9920f907b05c7871b", "committedDate": "2020-11-11T06:05:01Z", "message": "Merge branch 'master' into fix-retries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a54e1213cf61fa7e5e0f0d51f224e73d5ca80a2", "author": {"user": {"login": "MikeDombo", "name": "Michael Dombrowski"}}, "url": "https://github.com/aws-greengrass/aws-greengrass-nucleus/commit/7a54e1213cf61fa7e5e0f0d51f224e73d5ca80a2", "committedDate": "2020-11-11T06:18:19Z", "message": "Merge branch 'master' into fix-retries"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2635, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}