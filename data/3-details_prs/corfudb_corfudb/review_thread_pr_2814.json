{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NzI3Njgx", "number": 2814, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo1Njo0OVrOE1zGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjoxOFrOE13MZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQ3MTI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo1Njo0OVrOHuRyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1MzowMFrOHubHwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA==", "bodyText": "Do we need to catch? cause it's only re-throwing?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518288010", "createdAt": "2020-11-05T18:56:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n+            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n                 topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n                 logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n                 logReplicationServerHandler, logReplicationConfig);\n \n-        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-        // and the client channel (specific requirements of the transport implementation)\n-        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+            // and the client channel (specific requirements of the transport implementation)\n+            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n                 localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-        serverCallback.complete(interClusterReplicationService);\n+            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+            serverCallback.complete(interClusterReplicationService);\n \n-        logReplicationEventListener = new LogReplicationEventListener(this);\n-        logReplicationEventListener.start();\n-        serverStarted = true;\n+            logReplicationEventListener = new LogReplicationEventListener(this);\n+            logReplicationEventListener.start();\n+            serverStarted = true;\n+        } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43d8c71bde8e533f078bab210f5d2593fb6b993"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzA4Mg==", "bodyText": "+1 We can let the upper-level function catch it.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518393082", "createdAt": "2020-11-05T21:55:18Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n+            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n                 topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n                 logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n                 logReplicationServerHandler, logReplicationConfig);\n \n-        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-        // and the client channel (specific requirements of the transport implementation)\n-        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+            // and the client channel (specific requirements of the transport implementation)\n+            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n                 localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-        serverCallback.complete(interClusterReplicationService);\n+            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+            serverCallback.complete(interClusterReplicationService);\n \n-        logReplicationEventListener = new LogReplicationEventListener(this);\n-        logReplicationEventListener.start();\n-        serverStarted = true;\n+            logReplicationEventListener = new LogReplicationEventListener(this);\n+            logReplicationEventListener.start();\n+            serverStarted = true;\n+        } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA=="}, "originalCommit": {"oid": "d43d8c71bde8e533f078bab210f5d2593fb6b993"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MDg5Nw==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518440897", "createdAt": "2020-11-05T23:53:00Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n+            LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n \n-        logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n+            logReplicationMetadataManager = new LogReplicationMetadataManager(getCorfuRuntime(),\n                 topologyDescriptor.getTopologyConfigId(), localClusterDescriptor.getClusterId());\n \n-        logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n+            logReplicationServerHandler = new LogReplicationServer(serverContext, logReplicationConfig,\n                 logReplicationMetadataManager, localCorfuEndpoint, topologyDescriptor.getTopologyConfigId());\n-        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+            logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n \n-        interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n+            interClusterReplicationService = new CorfuInterClusterReplicationServerNode(serverContext,\n                 logReplicationServerHandler, logReplicationConfig);\n \n-        // Pass server's channel context through the Log Replication Context, for shared objects between the server\n-        // and the client channel (specific requirements of the transport implementation)\n-        replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n+            // Pass server's channel context through the Log Replication Context, for shared objects between the server\n+            // and the client channel (specific requirements of the transport implementation)\n+            replicationContext = new LogReplicationContext(logReplicationConfig, topologyDescriptor,\n                 localCorfuEndpoint, interClusterReplicationService.getRouter().getServerAdapter().getChannelContext());\n \n-        // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n-        serverCallback.complete(interClusterReplicationService);\n+            // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n+            serverCallback.complete(interClusterReplicationService);\n \n-        logReplicationEventListener = new LogReplicationEventListener(this);\n-        logReplicationEventListener.start();\n-        serverStarted = true;\n+            logReplicationEventListener = new LogReplicationEventListener(this);\n+            logReplicationEventListener.start();\n+            serverStarted = true;\n+        } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4ODAxMA=="}, "originalCommit": {"oid": "d43d8c71bde8e533f078bab210f5d2593fb6b993"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTE0Mjc5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTo1NjoxOFrOHuYO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzo1NDoxMlrOHubJNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzU4Mw==", "bodyText": "Do we also retrieve the version info through the adapter? If so, let's modify the comment a little bit", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518393583", "createdAt": "2020-11-05T21:56:18Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d43d8c71bde8e533f078bab210f5d2593fb6b993"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ0MTI2OQ==", "bodyText": "Done", "url": "https://github.com/CorfuDB/CorfuDB/pull/2814#discussion_r518441269", "createdAt": "2020-11-05T23:54:12Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -319,30 +320,34 @@ private void connectToClusterManager() {\n      * - Start Log Replication Server (receiver component)\n      */\n     private void bootstrapLogReplicationService() {\n-        // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)\n-        LogReplicationConfig logReplicationConfig = getLogReplicationConfiguration(getCorfuRuntime());\n+        try {\n+            // Through LogReplicationConfigAdapter retrieve system-specific configurations (including streams to replicate)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM5MzU4Mw=="}, "originalCommit": {"oid": "d43d8c71bde8e533f078bab210f5d2593fb6b993"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1759, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}