{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzk0MTU4", "number": 2765, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzowNzo1N1rOEhfOOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzowNzo1N1rOEhfOOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTUwMDExOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMzowNzo1N1rOHO0_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMTo1Mjo1MlrOHPgCjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw==", "bodyText": "Using UUID.randomUUID for transaction IDs can be really slow because it uses secureRandom.\n\nBenchmark                 Mode         Cnt                 Score \njavaUUIDGenerator         thrpt     2_613_099           ops/s\n\nUUID.randomUUID() is actually 100k times faster than 50ms", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r485310317", "createdAt": "2020-09-09T03:07:57Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -45,6 +46,19 @@ private Utils() {\n \n     private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n \n+\n+    /**\n+     * When true randomness is not required using UUID.randomUUID() can be really slow.\n+     * Blocking for 50+ ms for entropy to build up is not unusual. This method generates\n+     * random UUIDs based on a LCG with a thread local seed.\n+     * @return A psuedorandom\n+     */\n+    public static UUID genPseudorandomUUID() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e3aaad7a655e5ebea65e211b621f85c4b4bd05"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyMzQ0MQ==", "bodyText": "Run the benchmark with -Djava.security.egd=file:/dev/random I think macos uses urandom and not random as a default. urandom is psuedorandom so it won't block.\nSecureRandom consumes bytes from  /proc/sys/kernel/random/entropy_avail. Also, In a real system multiple threads consume bytes from the entropy pool, so having a single thread consume the bytes sequentially is not a good benchmark.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r485323441", "createdAt": "2020-09-09T04:01:41Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -45,6 +46,19 @@ private Utils() {\n \n     private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n \n+\n+    /**\n+     * When true randomness is not required using UUID.randomUUID() can be really slow.\n+     * Blocking for 50+ ms for entropy to build up is not unusual. This method generates\n+     * random UUIDs based on a LCG with a thread local seed.\n+     * @return A psuedorandom\n+     */\n+    public static UUID genPseudorandomUUID() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw=="}, "originalCommit": {"oid": "26e3aaad7a655e5ebea65e211b621f85c4b4bd05"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAxNTYzMQ==", "bodyText": "It's hard to repro without using the bouncy castle provider", "url": "https://github.com/CorfuDB/CorfuDB/pull/2765#discussion_r486015631", "createdAt": "2020-09-10T01:52:52Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -45,6 +46,19 @@ private Utils() {\n \n     private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();\n \n+\n+    /**\n+     * When true randomness is not required using UUID.randomUUID() can be really slow.\n+     * Blocking for 50+ ms for entropy to build up is not unusual. This method generates\n+     * random UUIDs based on a LCG with a thread local seed.\n+     * @return A psuedorandom\n+     */\n+    public static UUID genPseudorandomUUID() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMxMDMxNw=="}, "originalCommit": {"oid": "26e3aaad7a655e5ebea65e211b621f85c4b4bd05"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1675, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}