{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0ODE2NjA3", "number": 2649, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0NTo1OFrOEQ4KrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzowMzo1M1rOETjVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMyOTA4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/corfudb/common/protocol/client/ResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0NTo1OFrOG1RoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0NTo1OFrOG1RoHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNjUwOQ==", "bodyText": "Read and check the value instead of assuming its 0x2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r458516509", "createdAt": "2020-07-22T03:45:58Z", "author": {"login": "Maithem"}, "path": "common/src/main/java/org/corfudb/common/protocol/client/ResponseHandler.java", "diffHunk": "@@ -20,6 +20,7 @@\n     @Override\n     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n         ByteBuf msgBuf = (ByteBuf) msg;\n+        msgBuf.readByte(); // Temporary -- Consume 0x2 marker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10a76076d3da0d432e90d2a0bb5e5e78135bd9c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMzODcxOnYy", "diffSide": "RIGHT", "path": "common/src/main/proto/CorfuProtocol.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo1MToyN1rOG1RtdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoxNjo0M1rOG7r_pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNzg3Nw==", "bodyText": "You can remove this and do the version check on every message instead. The message version can be kept inside the header.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r458517877", "createdAt": "2020-07-22T03:51:27Z", "author": {"login": "Maithem"}, "path": "common/src/main/proto/CorfuProtocol.proto", "diffHunk": "@@ -87,20 +84,23 @@ message PingRequest {\n message PingResponse {\n }\n \n+// TODO(Zach): Update handshake logic\n message AuthenticateRequest {\n-\n+    UUID clientId = 1;\n+    UUID serverId = 2;\n }\n \n+// TODO(Zach): Update handshake logic\n message AuthenticateResponse {\n-\n+    UUID serverId = 1;\n+    string corfuVersion = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10a76076d3da0d432e90d2a0bb5e5e78135bd9c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzOTk3NA==", "bodyText": "I'll incorporate this in a separate PR later on.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r465239974", "createdAt": "2020-08-04T18:16:43Z", "author": {"login": "zfrenette"}, "path": "common/src/main/proto/CorfuProtocol.proto", "diffHunk": "@@ -87,20 +84,23 @@ message PingRequest {\n message PingResponse {\n }\n \n+// TODO(Zach): Update handshake logic\n message AuthenticateRequest {\n-\n+    UUID clientId = 1;\n+    UUID serverId = 2;\n }\n \n+// TODO(Zach): Update handshake logic\n message AuthenticateResponse {\n-\n+    UUID serverId = 1;\n+    string corfuVersion = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNzg3Nw=="}, "originalCommit": {"oid": "b10a76076d3da0d432e90d2a0bb5e5e78135bd9c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTM0Mjc1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo1MzozOVrOG1Rvvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDo1NDoyOVrOG1z1eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxODQ2Mg==", "bodyText": "Can you make these static constants (i.e. 0x1 and 0x2)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r458518462", "createdAt": "2020-07-22T03:53:39Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.corfudb.infrastructure.protocol;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import com.google.common.collect.ImmutableList;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.common.protocol.proto.CorfuProtocol;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.MessageType;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Request;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Header;\n+import org.corfudb.infrastructure.ServerContext;\n+import org.corfudb.runtime.view.Layout;\n+\n+import java.util.*;\n+\n+@Slf4j\n+@ChannelHandler.Sharable\n+public class NettyServerRouter extends ChannelInboundHandlerAdapter implements IServerRouter {\n+\n+    /**\n+     * This map stores the mapping from message types to server handler.\n+     */\n+    private final Map<MessageType, AbstractServer> handlerMap;\n+\n+    /**\n+     * This node's server context.\n+     */\n+    private final ServerContext serverContext;\n+\n+    /**\n+     * The epoch of this router. This is managed by the base server implementation.\n+     */\n+    @Getter\n+    @Setter\n+    volatile long serverEpoch;\n+\n+    /** The {@link AbstractServer}s this {@link NettyServerRouter} routes messages for. */\n+    private final ImmutableList<AbstractServer> servers;\n+\n+    public NettyServerRouter(ImmutableList<AbstractServer> servers, ServerContext serverContext) {\n+        this.serverContext = serverContext;\n+        this.serverEpoch = serverContext.getServerEpoch();\n+        this.servers = servers;\n+        handlerMap = new EnumMap<>(MessageType.class);\n+\n+        servers.forEach(server -> {\n+            Set<MessageType> handledTypes = server.getHandler().getHandledTypes();\n+            handledTypes.forEach(handledType -> handlerMap.put(handledType, server));\n+        });\n+    }\n+\n+    @Override\n+    public Optional<Layout> getCurrentLayout() {\n+        return Optional.ofNullable(serverContext.getCurrentLayout());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @deprecated This operation is no longer supported. The router will only route messages for\n+     * servers provided at construction time.\n+     */\n+    @Override\n+    @Deprecated\n+    public void addServer(AbstractServer server) {\n+        //TODO(Zach): Method still needed?\n+        throw new UnsupportedOperationException(\"No longer supported\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<AbstractServer> getServers() {\n+        return servers;\n+    }\n+\n+    @Override\n+    public void setServerContext(ServerContext serverContext) {\n+        //TODO(Zach): Method still needed?\n+        throw new UnsupportedOperationException(\"The operation is not supported.\");\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        log.info(\"channelActive: Incoming connection established from: {}.\",\n+                ctx.channel().remoteAddress());\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        ByteBuf msgBuf = (ByteBuf) msg;\n+\n+        // Temporary -- Check Corfu msg marker: 0x1 indicates legacy while 0x2 indicates new\n+        if (msgBuf.getByte(msgBuf.readerIndex()) == 0x1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10a76076d3da0d432e90d2a0bb5e5e78135bd9c"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA3Njk4Ng==", "bodyText": "@zfrenette  Did you delete your comment?\nI got an email notification but don't see it on the PR.\n\nDo you mean throw an exception (instead of passing it along the pipeline) if the message isn't marked with PROTO_CORFU_MSG_MARK?\n\nYes, I think its better to throw an exception instead of the propagate the error further.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r459076986", "createdAt": "2020-07-22T20:54:29Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.corfudb.infrastructure.protocol;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import com.google.common.collect.ImmutableList;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.common.protocol.proto.CorfuProtocol;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.MessageType;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Request;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Header;\n+import org.corfudb.infrastructure.ServerContext;\n+import org.corfudb.runtime.view.Layout;\n+\n+import java.util.*;\n+\n+@Slf4j\n+@ChannelHandler.Sharable\n+public class NettyServerRouter extends ChannelInboundHandlerAdapter implements IServerRouter {\n+\n+    /**\n+     * This map stores the mapping from message types to server handler.\n+     */\n+    private final Map<MessageType, AbstractServer> handlerMap;\n+\n+    /**\n+     * This node's server context.\n+     */\n+    private final ServerContext serverContext;\n+\n+    /**\n+     * The epoch of this router. This is managed by the base server implementation.\n+     */\n+    @Getter\n+    @Setter\n+    volatile long serverEpoch;\n+\n+    /** The {@link AbstractServer}s this {@link NettyServerRouter} routes messages for. */\n+    private final ImmutableList<AbstractServer> servers;\n+\n+    public NettyServerRouter(ImmutableList<AbstractServer> servers, ServerContext serverContext) {\n+        this.serverContext = serverContext;\n+        this.serverEpoch = serverContext.getServerEpoch();\n+        this.servers = servers;\n+        handlerMap = new EnumMap<>(MessageType.class);\n+\n+        servers.forEach(server -> {\n+            Set<MessageType> handledTypes = server.getHandler().getHandledTypes();\n+            handledTypes.forEach(handledType -> handlerMap.put(handledType, server));\n+        });\n+    }\n+\n+    @Override\n+    public Optional<Layout> getCurrentLayout() {\n+        return Optional.ofNullable(serverContext.getCurrentLayout());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @deprecated This operation is no longer supported. The router will only route messages for\n+     * servers provided at construction time.\n+     */\n+    @Override\n+    @Deprecated\n+    public void addServer(AbstractServer server) {\n+        //TODO(Zach): Method still needed?\n+        throw new UnsupportedOperationException(\"No longer supported\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<AbstractServer> getServers() {\n+        return servers;\n+    }\n+\n+    @Override\n+    public void setServerContext(ServerContext serverContext) {\n+        //TODO(Zach): Method still needed?\n+        throw new UnsupportedOperationException(\"The operation is not supported.\");\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        log.info(\"channelActive: Incoming connection established from: {}.\",\n+                ctx.channel().remoteAddress());\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        ByteBuf msgBuf = (ByteBuf) msg;\n+\n+        // Temporary -- Check Corfu msg marker: 0x1 indicates legacy while 0x2 indicates new\n+        if (msgBuf.getByte(msgBuf.readerIndex()) == 0x1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxODQ2Mg=="}, "originalCommit": {"oid": "b10a76076d3da0d432e90d2a0bb5e5e78135bd9c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDY4MzIzOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/NettyCorfuMessageDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1ODowNFrOG1yBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTo1ODowNFrOG1yBhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0NzMwMA==", "bodyText": "This is a bug. The marker is already consumed in line 24, if that if-statement isnt true, then another byte will be consumed, which is not the marker byte, so this will fail the subsequent call to serialization since it will be missing a byte.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r459047300", "createdAt": "2020-07-22T19:58:04Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/NettyCorfuMessageDecoder.java", "diffHunk": "@@ -19,6 +20,13 @@\n     @Override\n     protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf,\n                           List<Object> list) throws Exception {\n+        // Leave message unchanged if is non-legacy\n+        if(byteBuf.getByte(byteBuf.readerIndex()) != API.LEGACY_CORFU_MSG_MARK) {\n+            list.add(byteBuf);\n+            return;\n+        }\n+\n+        byteBuf.readByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895c0a55712a73f3ad539cf09c948585aad69d5"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDczNDcyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/NettyCorfuMessageDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxMzo0MFrOG1yiLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDoxMzo0MFrOG1yiLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1NTY2MA==", "bodyText": "Never mind, ignore my comment below. It's wrong.\nUnlike the readByte, getByte API doesn't move the reader index.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r459055660", "createdAt": "2020-07-22T20:13:40Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/NettyCorfuMessageDecoder.java", "diffHunk": "@@ -19,6 +20,13 @@\n     @Override\n     protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf,\n                           List<Object> list) throws Exception {\n+        // Leave message unchanged if is non-legacy\n+        if(byteBuf.getByte(byteBuf.readerIndex()) != API.LEGACY_CORFU_MSG_MARK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895c0a55712a73f3ad539cf09c948585aad69d5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDc5NzAzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDozMjoyN1rOG1zIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMDozMjoyN1rOG1zIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTQ4MQ==", "bodyText": "What if this byte is not LEGACY_CORFU_MSG_MARK ?\nI think you should explicitly check that it is LEGACY_CORFU_MSG_MARK and throw an IllegalStateException otherwise.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r459065481", "createdAt": "2020-07-22T20:32:27Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "diffHunk": "@@ -96,14 +97,13 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {\n     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n         ByteBuf msgBuf = (ByteBuf) msg;\n \n-        // Temporary -- Check Corfu msg marker: 0x1 indicates legacy while 0x2 indicates new\n-        if (msgBuf.getByte(msgBuf.readerIndex()) == 0x1) {\n-            ctx.fireChannelRead(msgBuf); // Forward legacy corfu msg to next handler\n+        // Temporary -- If message is not a new Protobuf message, forward the message.\n+        if (msgBuf.getByte(msgBuf.readerIndex()) != API.PROTO_CORFU_MSG_MARK) {\n+            ctx.fireChannelRead(msgBuf);\n             return;\n         }\n \n-        msgBuf.readByte(); // Temporary -- Consume 0x2 marker\n-\n+        msgBuf.readByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f895c0a55712a73f3ad539cf09c948585aad69d5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzE3NDIyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1ODozMVrOG3Bjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMTo1ODozMVrOG3Bjyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM1MDQxMQ==", "bodyText": "Pass the allocator via the constructor. Accessing a resources from multiple entry points makes it hard to change. You can wrap the default allocator and pass that instance to the constructor.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r460350411", "createdAt": "2020-07-25T01:58:31Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "diffHunk": "@@ -60,6 +62,17 @@ public NettyServerRouter(ImmutableList<AbstractServer> servers, ServerContext se\n         return Optional.ofNullable(serverContext.getCurrentLayout());\n     }\n \n+\n+\n+    @Override\n+    public void sendResponse(Response response, ChannelHandlerContext ctx) {\n+        ByteBuf outBuf = PooledByteBufAllocator.DEFAULT.buffer();\n+        outBuf.writeByte(API.PROTO_CORFU_MSG_MARK);\n+        outBuf.writeBytes(response.toByteArray());\n+        //TODO(Zach): Where to remove allocation?\n+        ctx.writeAndFlush(outBuf);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a304c82f73286eff001025bd461d5c8014397afd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDk1NTExOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxOToyNjozOFrOG3OmYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxOToyNjozOFrOG3OmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NDA2NA==", "bodyText": "You can use an input stream here and release it on IOException", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r460564064", "createdAt": "2020-07-26T19:26:38Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/NettyServerRouter.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.corfudb.infrastructure.protocol;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufInputStream;\n+import com.google.common.collect.ImmutableList;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.common.protocol.API;\n+import org.corfudb.common.protocol.proto.CorfuProtocol;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.MessageType;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Request;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Response;\n+import org.corfudb.common.protocol.proto.CorfuProtocol.Header;\n+import org.corfudb.infrastructure.ServerContext;\n+import org.corfudb.runtime.view.Layout;\n+\n+import java.util.*;\n+\n+@Slf4j\n+@ChannelHandler.Sharable\n+public class NettyServerRouter extends ChannelInboundHandlerAdapter implements IServerRouter {\n+\n+    /**\n+     * This map stores the mapping from message types to server handler.\n+     */\n+    private final Map<MessageType, AbstractServer> handlerMap;\n+\n+    /**\n+     * This node's server context.\n+     */\n+    private final ServerContext serverContext;\n+\n+    /**\n+     * The epoch of this router. This is managed by the base server implementation.\n+     */\n+    @Getter\n+    @Setter\n+    volatile long serverEpoch;\n+\n+    /** The {@link AbstractServer}s this {@link NettyServerRouter} routes messages for. */\n+    private final ImmutableList<AbstractServer> servers;\n+\n+    public NettyServerRouter(ImmutableList<AbstractServer> servers, ServerContext serverContext) {\n+        this.serverContext = serverContext;\n+        this.serverEpoch = serverContext.getServerEpoch();\n+        this.servers = servers;\n+        handlerMap = new EnumMap<>(MessageType.class);\n+\n+        servers.forEach(server -> {\n+            Set<MessageType> handledTypes = server.getHandler().getHandledTypes();\n+            handledTypes.forEach(handledType -> handlerMap.put(handledType, server));\n+        });\n+    }\n+\n+    @Override\n+    public Optional<Layout> getCurrentLayout() {\n+        return Optional.ofNullable(serverContext.getCurrentLayout());\n+    }\n+\n+\n+\n+    @Override\n+    public void sendResponse(Response response, ChannelHandlerContext ctx) {\n+        ByteBuf outBuf = PooledByteBufAllocator.DEFAULT.buffer();\n+        outBuf.writeByte(API.PROTO_CORFU_MSG_MARK);\n+        outBuf.writeBytes(response.toByteArray());\n+        //TODO(Zach): Where to remove allocation?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a304c82f73286eff001025bd461d5c8014397afd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDk1NjA1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/BaseServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxOToyNzo1NFrOG3Om0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQxOToyNzo1NFrOG3Om0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU2NDE3OA==", "bodyText": "Added the new annotated methods in the existing class. I don't see a strong reason to fork the class.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r460564178", "createdAt": "2020-07-26T19:27:54Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/protocol/BaseServer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.infrastructure.protocol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a304c82f73286eff001025bd461d5c8014397afd"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzQwNTMyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BaseServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDozNzo0NFrOG4d5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo0Njo1NFrOG5FhUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2MzI2Ng==", "bodyText": "How can you even get routed to this point without having the ResetRequest? I think that check is done before a call is made to this method.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r461863266", "createdAt": "2020-07-28T20:37:44Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BaseServer.java", "diffHunk": "@@ -180,6 +213,24 @@ private void doReset(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n         CorfuServer.restartServer(true);\n     }\n \n+    /**\n+     * Reset the JVM. This mechanism leverages that corfu_server runs in a bash script\n+     * which monitors the exit code of Corfu. If the exit code is 100, then it resets\n+     * the server and DELETES ALL EXISTING DATA.\n+     * @param req The incoming request message.\n+     * @param ctx The channel context.\n+     * @param r The server router.\n+     */\n+    @AnnotatedServerHandler(type = CorfuProtocol.MessageType.RESET)\n+    private void handleReset(Request req, ChannelHandlerContext ctx, org.corfudb.infrastructure.protocol.IServerRouter r) {\n+        log.warn(\"Remote reset requested from client {}\", req.getHeader().getClientId());\n+        //TODO(Zach): checkArgument(req.hasResetRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NDM3MA==", "bodyText": "I believe only the MessageType in the header is checked. There hasn't been a check that a proper payload is provided.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r461864370", "createdAt": "2020-07-28T20:39:40Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BaseServer.java", "diffHunk": "@@ -180,6 +213,24 @@ private void doReset(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n         CorfuServer.restartServer(true);\n     }\n \n+    /**\n+     * Reset the JVM. This mechanism leverages that corfu_server runs in a bash script\n+     * which monitors the exit code of Corfu. If the exit code is 100, then it resets\n+     * the server and DELETES ALL EXISTING DATA.\n+     * @param req The incoming request message.\n+     * @param ctx The channel context.\n+     * @param r The server router.\n+     */\n+    @AnnotatedServerHandler(type = CorfuProtocol.MessageType.RESET)\n+    private void handleReset(Request req, ChannelHandlerContext ctx, org.corfudb.infrastructure.protocol.IServerRouter r) {\n+        log.warn(\"Remote reset requested from client {}\", req.getHeader().getClientId());\n+        //TODO(Zach): checkArgument(req.hasResetRequest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2MzI2Ng=="}, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NTk3Mg==", "bodyText": "I think these checks can all be done in the handle method in RequestHandlerMethods.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r461865972", "createdAt": "2020-07-28T20:42:32Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BaseServer.java", "diffHunk": "@@ -180,6 +213,24 @@ private void doReset(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n         CorfuServer.restartServer(true);\n     }\n \n+    /**\n+     * Reset the JVM. This mechanism leverages that corfu_server runs in a bash script\n+     * which monitors the exit code of Corfu. If the exit code is 100, then it resets\n+     * the server and DELETES ALL EXISTING DATA.\n+     * @param req The incoming request message.\n+     * @param ctx The channel context.\n+     * @param r The server router.\n+     */\n+    @AnnotatedServerHandler(type = CorfuProtocol.MessageType.RESET)\n+    private void handleReset(Request req, ChannelHandlerContext ctx, org.corfudb.infrastructure.protocol.IServerRouter r) {\n+        log.warn(\"Remote reset requested from client {}\", req.getHeader().getClientId());\n+        //TODO(Zach): checkArgument(req.hasResetRequest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2MzI2Ng=="}, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMjQ2Nw==", "bodyText": "I decided to perform these checks in NettyServerRouter since it was originally performed in RequestHandler.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r462512467", "createdAt": "2020-07-29T18:46:54Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/BaseServer.java", "diffHunk": "@@ -180,6 +213,24 @@ private void doReset(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n         CorfuServer.restartServer(true);\n     }\n \n+    /**\n+     * Reset the JVM. This mechanism leverages that corfu_server runs in a bash script\n+     * which monitors the exit code of Corfu. If the exit code is 100, then it resets\n+     * the server and DELETES ALL EXISTING DATA.\n+     * @param req The incoming request message.\n+     * @param ctx The channel context.\n+     * @param r The server router.\n+     */\n+    @AnnotatedServerHandler(type = CorfuProtocol.MessageType.RESET)\n+    private void handleReset(Request req, ChannelHandlerContext ctx, org.corfudb.infrastructure.protocol.IServerRouter r) {\n+        log.warn(\"Remote reset requested from client {}\", req.getHeader().getClientId());\n+        //TODO(Zach): checkArgument(req.hasResetRequest());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2MzI2Ng=="}, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDUyNzk5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNDozMjo1OVrOG4oMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoxNzo1MlrOG46qQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMTg5NQ==", "bodyText": "I think you forgot to change this to -\nreturn newResetResponse(header, newNoServerError());", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r462031895", "createdAt": "2020-07-29T04:32:59Z", "author": {"login": "chetangudisagar"}, "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "diffHunk": "@@ -131,6 +137,71 @@ public static Response newPingResponse(Header header, ServerError error) {\n                 .build();\n     }\n \n+    public static Request newRestartRequest(Header header) {\n+        RestartRequest restartRequest = RestartRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setRestartRequest(restartRequest)\n+                .build();\n+    }\n+\n+    public static Response newRestartResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newRestartResponse(Header header, ServerError error) {\n+        RestartResponse restartResponse = RestartResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setRestartResponse(restartResponse)\n+                .build();\n+    }\n+\n+    public static Request newResetRequest(Header header) {\n+        ResetRequest resetRequest = ResetRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setResetRequest(resetRequest)\n+                .build();\n+    }\n+\n+    public static Response newResetResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzNDUyOQ==", "bodyText": "Thanks for pointing this out", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r462334529", "createdAt": "2020-07-29T14:17:52Z", "author": {"login": "zfrenette"}, "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "diffHunk": "@@ -131,6 +137,71 @@ public static Response newPingResponse(Header header, ServerError error) {\n                 .build();\n     }\n \n+    public static Request newRestartRequest(Header header) {\n+        RestartRequest restartRequest = RestartRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setRestartRequest(restartRequest)\n+                .build();\n+    }\n+\n+    public static Response newRestartResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newRestartResponse(Header header, ServerError error) {\n+        RestartResponse restartResponse = RestartResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setRestartResponse(restartResponse)\n+                .build();\n+    }\n+\n+    public static Request newResetRequest(Header header) {\n+        ResetRequest resetRequest = ResetRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setResetRequest(resetRequest)\n+                .build();\n+    }\n+\n+    public static Response newResetResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAzMTg5NQ=="}, "originalCommit": {"oid": "9ce52ff90c06829ca3e030f69e4ebedb55c4f69a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTM3MzIwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzowMzo1M1rOG5WO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowMTozMVrOG5h-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4NjI2Mg==", "bodyText": "This seems superfluous, just let the message go through and if not recognized the server should reply with an error.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r462786262", "createdAt": "2020-07-30T07:03:53Z", "author": {"login": "Maithem"}, "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "diffHunk": "@@ -47,4 +124,163 @@ public static Request newPingRequest(Header header) {\n                 .build();\n     }\n \n+    public static Response newPingResponse(Header header) {\n+        return newPingResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newPingResponse(Header header, ServerError error) {\n+        PingResponse pingResponse = PingResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setPingResponse(pingResponse)\n+                .build();\n+    }\n+\n+    public static Request newRestartRequest(Header header) {\n+        RestartRequest restartRequest = RestartRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setRestartRequest(restartRequest)\n+                .build();\n+    }\n+\n+    public static Response newRestartResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newRestartResponse(Header header, ServerError error) {\n+        RestartResponse restartResponse = RestartResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setRestartResponse(restartResponse)\n+                .build();\n+    }\n+\n+    public static Request newResetRequest(Header header) {\n+        ResetRequest resetRequest = ResetRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setResetRequest(resetRequest)\n+                .build();\n+    }\n+\n+    public static Response newResetResponse(Header header) {\n+        return newResetResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newResetResponse(Header header, ServerError error) {\n+        ResetResponse resetResponse = ResetResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setResetResponse(resetResponse)\n+                .build();\n+    }\n+\n+    public static Request newSealRequest(Header header, long newEpoch) {\n+        SealRequest sealRequest = SealRequest.newBuilder()\n+                                        .setEpoch(newEpoch)\n+                                        .build();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setSealRequest(sealRequest)\n+                .build();\n+    }\n+\n+    public static Response newSealResponse(Header header) {\n+        return newSealResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newSealResponse(Header header, ServerError error) {\n+        SealResponse sealResponse = SealResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setSealResponse(sealResponse)\n+                .build();\n+    }\n+\n+    public static Response newErrorResponseNoPayload(Header header, ServerError error) {\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .build();\n+    }\n+\n+    public static boolean validateRequest(Request request) {\n+        switch(request.getHeader().getType()) {\n+            case PING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7d0be7850c9b8bdc209f88ee2ef533bfdc208cf"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3ODU2NA==", "bodyText": "Can you comment a bit more on why this is superfluous? Currently, ResponseHandler/PeerClient performs this check as well using a similar switch statement. Also, I did have this check (as a checkArgument call) in the handle method for each message type (say handlePing when receiving a ping message), but you had mentioned that this was checked prior.\nAlthough no error is currently sent, I do intend to send an error (see NettyServerRouter) if this checks fails.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2649#discussion_r462978564", "createdAt": "2020-07-30T13:01:31Z", "author": {"login": "zfrenette"}, "path": "common/src/main/java/org/corfudb/common/protocol/API.java", "diffHunk": "@@ -47,4 +124,163 @@ public static Request newPingRequest(Header header) {\n                 .build();\n     }\n \n+    public static Response newPingResponse(Header header) {\n+        return newPingResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newPingResponse(Header header, ServerError error) {\n+        PingResponse pingResponse = PingResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setPingResponse(pingResponse)\n+                .build();\n+    }\n+\n+    public static Request newRestartRequest(Header header) {\n+        RestartRequest restartRequest = RestartRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setRestartRequest(restartRequest)\n+                .build();\n+    }\n+\n+    public static Response newRestartResponse(Header header) {\n+        return newRestartResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newRestartResponse(Header header, ServerError error) {\n+        RestartResponse restartResponse = RestartResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setRestartResponse(restartResponse)\n+                .build();\n+    }\n+\n+    public static Request newResetRequest(Header header) {\n+        ResetRequest resetRequest = ResetRequest.getDefaultInstance();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setResetRequest(resetRequest)\n+                .build();\n+    }\n+\n+    public static Response newResetResponse(Header header) {\n+        return newResetResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newResetResponse(Header header, ServerError error) {\n+        ResetResponse resetResponse = ResetResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setResetResponse(resetResponse)\n+                .build();\n+    }\n+\n+    public static Request newSealRequest(Header header, long newEpoch) {\n+        SealRequest sealRequest = SealRequest.newBuilder()\n+                                        .setEpoch(newEpoch)\n+                                        .build();\n+        return Request.newBuilder()\n+                .setHeader(header)\n+                .setSealRequest(sealRequest)\n+                .build();\n+    }\n+\n+    public static Response newSealResponse(Header header) {\n+        return newSealResponse(header, newNoServerError());\n+    }\n+\n+    public static Response newSealResponse(Header header, ServerError error) {\n+        SealResponse sealResponse = SealResponse.getDefaultInstance();\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .setSealResponse(sealResponse)\n+                .build();\n+    }\n+\n+    public static Response newErrorResponseNoPayload(Header header, ServerError error) {\n+        return Response.newBuilder()\n+                .setHeader(header)\n+                .setError(error)\n+                .build();\n+    }\n+\n+    public static boolean validateRequest(Request request) {\n+        switch(request.getHeader().getType()) {\n+            case PING:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4NjI2Mg=="}, "originalCommit": {"oid": "f7d0be7850c9b8bdc209f88ee2ef533bfdc208cf"}, "originalPosition": 213}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1874, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}