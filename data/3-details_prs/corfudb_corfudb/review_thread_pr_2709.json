{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTI4MzE4", "number": 2709, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0OToyOVrOEYURDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo0MTozMVrOEfINpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTMzMzI2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0OToyOVrOHAlwQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo0OToyOVrOHAlwQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDYwOA==", "bodyText": "We could hit a NPE here. We should check replicationManager is not null, as the request might come when no valid standby is present in the Topology provided by SM so we haven't started replication yet.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470380608", "createdAt": "2020-08-14T02:49:29Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -675,6 +679,14 @@ private void processUpgrade(DiscoveryServiceEvent event) {\n         }\n     }\n \n+    /**\n+     * Enforce a snapshot full sync for the specified standby site.\n+     * @param event\n+     */\n+    private void processEnforceSnapshotFullSync(DiscoveryServiceEvent event) {\n+        replicationManager.enforceSnapshotFullSync(event.getRemoteSiteInfo().getClusterId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTMzNTc2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/DiscoveryServiceEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1MTowNVrOHAlxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1MTowNVrOHAlxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MDk3NQ==", "bodyText": "Can we rename remoteSiteInfo to remoteClusterInfo? to be consistent.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470380975", "createdAt": "2020-08-14T02:51:05Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/DiscoveryServiceEvent.java", "diffHunk": "@@ -24,10 +25,16 @@ public DiscoveryServiceEvent(DiscoveryServiceEventType type, TopologyConfigurati\n         this.topologyConfig = topologyConfigMsg;\n     }\n \n+    public DiscoveryServiceEvent(DiscoveryServiceEventType type, String clusterId) {\n+        this.type = type;\n+        this.remoteSiteInfo = new ClusterDescriptor(clusterId, LogReplicationClusterInfo.ClusterRole.STANDBY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTMzNjY2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1MTozNVrOHAlyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1MTozNVrOHAlyIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MTA4OQ==", "bodyText": "Missing description", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470381089", "createdAt": "2020-08-14T02:51:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -58,4 +58,10 @@\n      * @return\n      */\n     Map<String, LogReplicationMetadata.ReplicationStatusVal> queryReplicationStatus();\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM0MTYzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1NDo1NFrOHAl0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1NDo1NFrOHAl0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MTgxNg==", "bodyText": "nit -> and ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470381816", "createdAt": "2020-08-14T02:54:54Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +204,19 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Given a clusterId, stop the current log replication event and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM0ODM4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1OToyNFrOHAl48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjo1OToyNFrOHAl48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MjgzNA==", "bodyText": "For debugging it could be good idea to print the snapshot sync request Id returned by this call, stating that this is the Id of the forced snapshot sync. So we can correlate on the receiver.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470382834", "createdAt": "2020-08-14T02:59:24Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +204,19 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Given a clusterId, stop the current log replication event and\n+     * @param clusterID\n+     */\n+    public void enforceSnapshotFullSync(String clusterID) {\n+        CorfuLogReplicationRuntime replicationRuntime = runtimeToRemoteCluster.get(clusterID);\n+        if (replicationRuntime == null) {\n+            log.error(\"There are no replicationRuntime in the map for clusterID {}\", clusterID);\n+            return;\n+        }\n+\n+        replicationRuntime.getSourceManager().stopLogReplication();\n+        replicationRuntime.getSourceManager().startSnapshotSync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM1MTI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowMTowN1rOHAl6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowMTowN1rOHAl6lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MzI1NA==", "bodyText": "Can we have a test to validate force Snapshot Sync works?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r470383254", "createdAt": "2020-08-14T03:01:07Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +204,19 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Given a clusterId, stop the current log replication event and\n+     * @param clusterID\n+     */\n+    public void enforceSnapshotFullSync(String clusterID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk4NDA3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNzoyM1rOHCidHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDoxNjowM1rOHCq78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMzcwOA==", "bodyText": "Is this event only handled by the leader node? Or it is a broadcast?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472423708", "createdAt": "2020-08-18T19:17:23Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -222,6 +222,10 @@ public void processEvent(DiscoveryServiceEvent event) {\n                 processUpgrade(event);\n                 break;\n \n+            case ENFORCE_SNAPSHOT_FULL_SYNC:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2MjY3Mg==", "bodyText": "Only leader node.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472562672", "createdAt": "2020-08-19T00:16:03Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -222,6 +222,10 @@ public void processEvent(DiscoveryServiceEvent event) {\n                 processUpgrade(event);\n                 break;\n \n+            case ENFORCE_SNAPSHOT_FULL_SYNC:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMzcwOA=="}, "originalCommit": {"oid": "b3d8d884263e5e8c642678d9e921c22998d56f92"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzk0MTI3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDo1Mjo0OVrOHCrjLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMDo1Mjo0OVrOHCrjLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3MjcxNg==", "bodyText": "Comment is not completed yet.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472572716", "createdAt": "2020-08-19T00:52:49Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -181,6 +183,13 @@\n     @Getter\n     private final LogReplicationAckReader ackReader;\n \n+    /**\n+     * When a snapshot full sync request is enqueue in the FSM, it will reset the CF,\n+     * When a snapshot full sync request is processed, the CF will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzk1NzUzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTowMTozMFrOHCrsgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTowMTozMFrOHCrsgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTEwNw==", "bodyText": "This list is unused.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472575107", "createdAt": "2020-08-19T01:01:30Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +208,34 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotFullSync() {\n+        List<UUID> snapshotIds = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mzk5OTcxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMToyNDo1OVrOHCsFOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMToyNDo1OVrOHCsFOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTQzMw==", "bodyText": "It might be good to print some warning so we know the enforce snapshot sync was not executed but received, if it hits these conditions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472581433", "createdAt": "2020-08-19T01:24:59Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -671,8 +675,18 @@ private void updateReplicationManagerTopology(TopologyDescriptor newConfig) {\n     private void processUpgrade(DiscoveryServiceEvent event) {\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n             // TODO pankti: is this correct?\n-            replicationManager.restart(event.getRemoteSiteInfo());\n+            replicationManager.restart(event.getRemoteClusterInfo());\n+        }\n+    }\n+\n+    /**\n+     * Enforce a snapshot full sync for all standbys if the current node is a leader node\n+     */\n+    private void processEnforceSnapshotFullSync() {\n+        if (replicationManager == null || isLeader.get() == false) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDAwMjAyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMToyNjoxMFrOHCsGlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxNzoyMFrOHF5s2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTc4MA==", "bodyText": "Just to confirm, are we sure they would trigger the force Snapshot sync on all LR nodes? or could it be that they trigger only on their lead node?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472581780", "createdAt": "2020-08-19T01:26:10Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -671,8 +675,18 @@ private void updateReplicationManagerTopology(TopologyDescriptor newConfig) {\n     private void processUpgrade(DiscoveryServiceEvent event) {\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n             // TODO pankti: is this correct?\n-            replicationManager.restart(event.getRemoteSiteInfo());\n+            replicationManager.restart(event.getRemoteClusterInfo());\n+        }\n+    }\n+\n+    /**\n+     * Enforce a snapshot full sync for all standbys if the current node is a leader node\n+     */\n+    private void processEnforceSnapshotFullSync() {\n+        if (replicationManager == null || isLeader.get() == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MDI5OQ==", "bodyText": "Wait for their reply. It is supposed that it is called on all nodes in the cluster.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r475950299", "createdAt": "2020-08-24T23:17:20Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -671,8 +675,18 @@ private void updateReplicationManagerTopology(TopologyDescriptor newConfig) {\n     private void processUpgrade(DiscoveryServiceEvent event) {\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n             // TODO pankti: is this correct?\n-            replicationManager.restart(event.getRemoteSiteInfo());\n+            replicationManager.restart(event.getRemoteClusterInfo());\n+        }\n+    }\n+\n+    /**\n+     * Enforce a snapshot full sync for all standbys if the current node is a leader node\n+     */\n+    private void processEnforceSnapshotFullSync() {\n+        if (replicationManager == null || isLeader.get() == false) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTc4MA=="}, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDAxMDY3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTozMDo0MlrOHCsLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTozMDo0MlrOHCsLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MzA1NA==", "bodyText": "for consistency can we replace all occurrences of snapshotFullSync to snapshotSync?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472583054", "createdAt": "2020-08-19T01:30:42Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -44,11 +44,17 @@ public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopolo\n         }\n     }\n \n+    @Override\n     public void prepareToBecomeStandby() {\n         corfuReplicationDiscoveryService.prepareToBecomeStandby();\n     }\n \n     public Map<String, LogReplicationMetadata.ReplicationStatusVal> queryReplicationStatus() {\n         return corfuReplicationDiscoveryService.queryReplicationStatus();\n     }\n+\n+    @Override\n+    public void forceSnapshotFullSync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDEwMzg2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxOToxMlrOHCtCTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxOToxMlrOHCtCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NzA2OQ==", "bodyText": "I think this logic should be in the onEntry of the SnapshotSyncState, otherwise we're mixing the transition with specific state logic. I believe you do have access to the FSM from the state itself so we could do:\nfsm.updateSnapshotSyncId();", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472597069", "createdAt": "2020-08-19T02:19:12Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -323,6 +339,9 @@ private void consume() {\n                     LogReplicationState newState = state.processEvent(event);\n                     log.trace(\"Transition from {} to {}\", state, newState);\n                     transition(state, newState);\n+                    if (event.getType() == LogReplicationEventType.SNAPSHOT_SYNC_REQUEST) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDEwNTYxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationMetadataManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxOTo0M1rOHCtDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxOTo0M1rOHCtDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NzM4Mw==", "bodyText": "nit -> clusterId", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472597383", "createdAt": "2020-08-19T02:19:43Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationMetadataManager.java", "diffHunk": "@@ -417,8 +417,8 @@ public String toString() {\n         return builder.toString();\n     }\n \n-    public static String getPersistedWriterMetadataTableName(String localClusterId) {\n-        return METADATA_TABLE_PREFIX_NAME + localClusterId;\n+    public static String getPersistedWriterMetadataTableName(String clusteId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDI0MjQ5OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationClusterConfigIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjo1NjowNVrOHCud9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjo1NjowNVrOHCud9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyMDUzNQ==", "bodyText": "Is think this line 631 might be left from something else?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472620535", "createdAt": "2020-08-19T02:56:05Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationClusterConfigIT.java", "diffHunk": "@@ -597,6 +604,130 @@ public void testNewConfigWithInvalidClusters() throws Exception {\n         assertThat(mapStandby.size()).isEqualTo(thirdBatch);\n     }\n \n+    private Table<LogReplicationMetadataKey, LogReplicationMetadataVal, LogReplicationMetadataVal> getMetadataTable(CorfuRuntime runtime) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n+        CorfuStore corfuStore = new CorfuStore(runtime);\n+        CorfuStoreMetadata.TableName metadataTableName = null;\n+        Table<LogReplicationMetadataKey, LogReplicationMetadataVal, LogReplicationMetadataVal> metadataTable = null;\n+\n+        for (CorfuStoreMetadata.TableName name : corfuStore.listTables(LogReplicationMetadataManager.NAMESPACE)){\n+            if(name.getTableName().contains(LogReplicationMetadataManager.METADATA_TABLE_PREFIX_NAME)) {\n+                metadataTableName = name;\n+            }\n+        }\n+\n+        metadataTable = corfuStore.openTable(\n+                    LogReplicationMetadataManager.NAMESPACE,\n+                    metadataTableName.getTableName(),\n+                    LogReplicationMetadataKey.class,\n+                    LogReplicationMetadataVal.class,\n+                    null,\n+                    TableOptions.builder().build());\n+\n+        return metadataTable;\n+    }\n+\n+\n+    /**\n+     * This test verifies config change with one active and one invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM0NjI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyNDoxMlrOHCviXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyNDoxMlrOHCviXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzODA0Nw==", "bodyText": "what happens if we have two standbys, we block on the first one (but the second one is completed) we would stay here indefinitely?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472638047", "createdAt": "2020-08-19T03:24:12Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +208,34 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotFullSync() {\n+        List<UUID> snapshotIds = new ArrayList<>();\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {\n+            standbyRuntime.getSourceManager().stopLogReplication();\n+            UUID snapshotUUID = standbyRuntime.getSourceManager().startSnapshotSync();\n+            snapshotIds.add(snapshotUUID);\n+            log.info(\"Enforce Start full snapshot sync for cluster {} with uuid {}\", standbyRuntime.getRemoteClusterId(), snapshotUUID);\n+        }\n+\n+        // Block until the full snapshot sync has been started on all the standby clusters.\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {\n+            UUID snapshotUUID = null;\n+            String clusterId = null;\n+\n+            try {\n+                snapshotUUID = standbyRuntime.getSourceManager().getLogReplicationFSM().getSnapshotFullSyncUUID().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM1MzQ5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyNjowM1rOHCvnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyNjowM1rOHCvnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzOTIzMw==", "bodyText": "Question, what is the idea of blocking? initially it was thought as to not return until it has started, but the forceSnapshotSync from the caller is async and returns right away. I'm not sure I understand how this could help us.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472639233", "createdAt": "2020-08-19T03:26:03Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +208,34 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotFullSync() {\n+        List<UUID> snapshotIds = new ArrayList<>();\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {\n+            standbyRuntime.getSourceManager().stopLogReplication();\n+            UUID snapshotUUID = standbyRuntime.getSourceManager().startSnapshotSync();\n+            snapshotIds.add(snapshotUUID);\n+            log.info(\"Enforce Start full snapshot sync for cluster {} with uuid {}\", standbyRuntime.getRemoteClusterId(), snapshotUUID);\n+        }\n+\n+        // Block until the full snapshot sync has been started on all the standby clusters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM2MzcxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyOTowMlrOHCvt4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyOTowMlrOHCvt4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDk5NQ==", "bodyText": "the getSnapshotFullSyncUUID can happen before the SnapshotSyncRequest from line 219 is actually processed (as that just enqueues an event in the FSM). We could be holding on a previous CF which is not the one being instantiated in L290 of LogReplicationFSM.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472640995", "createdAt": "2020-08-19T03:29:02Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +208,34 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotFullSync() {\n+        List<UUID> snapshotIds = new ArrayList<>();\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {\n+            standbyRuntime.getSourceManager().stopLogReplication();\n+            UUID snapshotUUID = standbyRuntime.getSourceManager().startSnapshotSync();\n+            snapshotIds.add(snapshotUUID);\n+            log.info(\"Enforce Start full snapshot sync for cluster {} with uuid {}\", standbyRuntime.getRemoteClusterId(), snapshotUUID);\n+        }\n+\n+        // Block until the full snapshot sync has been started on all the standby clusters.\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {\n+            UUID snapshotUUID = null;\n+            String clusterId = null;\n+\n+            try {\n+                snapshotUUID = standbyRuntime.getSourceManager().getLogReplicationFSM().getSnapshotFullSyncUUID().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM2Njc0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyOTo1M1rOHCvv6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyOTo1M1rOHCvv6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MTUxMg==", "bodyText": "where is this ever completed exceptionally?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r472641512", "createdAt": "2020-08-19T03:29:53Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -257,6 +266,10 @@ private void initializeStates(SnapshotSender snapshotSender, LogEntrySender logE\n         states.put(LogReplicationStateType.STOPPED, new StoppedState());\n     }\n \n+    private synchronized void updateSnapshotFullSyncUUID(UUID uuid) {\n+            snapshotFullSyncUUID.complete(uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98c82791e9dcae28e6f477f9020caae69a596d8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTExNTU0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0OToxNlrOHHXFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0OToxNlrOHHXFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MDMzNA==", "bodyText": "private & final? And let's use the same comment format as other static values below..", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477480334", "createdAt": "2020-08-26T17:49:16Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -48,6 +51,8 @@\n  */\n @Slf4j\n public class CorfuReplicationDiscoveryService implements Runnable, CorfuReplicationDiscoveryServiceAdapter {\n+    // Time to wait the forced snapshot sync to start in milliseconds.\n+    public static long WAIT_COMMAND_TIMEOUT = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTEzMDAwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1MzoxN1rOHHXORA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1MzoxN1rOHHXORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MjU2NA==", "bodyText": "Unused Getter?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477482564", "createdAt": "2020-08-26T17:53:17Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -26,6 +26,7 @@\n \n     // Keep map of remote cluster ID and the associated log replication runtime (an abstract\n     // client to that cluster)\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE2NjUzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/DiscoveryServiceEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzoxOVrOHHXlcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowMzoxOVrOHHXlcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4ODQ5OQ==", "bodyText": "A specific name would be better, and looks like CompletableFuture<Void> is enough here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477488499", "createdAt": "2020-08-26T18:03:19Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/DiscoveryServiceEvent.java", "diffHunk": "@@ -5,20 +5,37 @@\n \n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+\n public class DiscoveryServiceEvent {\n     DiscoveryServiceEventType type;\n \n+    // Used by enforcing snapshot sync event\n+    @Getter\n+    private UUID eventUUID;\n+\n+    // Used by enforcing snapshot sync event\n+    @Getter\n+    CompletableFuture<UUID> cf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE3OTI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNjo1N1rOHHXthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowNjo1N1rOHHXthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MDU2NA==", "bodyText": "I think the logic here is not correct.\nAssuming caller sends enforce request to all 3 nodes, and current node is non leader.\nSo processEnforceSnapshotSync is done here, but public boolean forceSnapshotSync() is still blocking until timeout.\nMaybe we can completeExceptionally the cf with an Illegal State Exception. So we will see ExecutionException and you already have the log.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477490564", "createdAt": "2020-08-26T18:06:57Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -677,8 +686,19 @@ private void updateReplicationManagerTopology(TopologyDescriptor newConfig) {\n     private void processUpgrade(DiscoveryServiceEvent event) {\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n             // TODO pankti: is this correct?\n-            replicationManager.restart(event.getRemoteSiteInfo());\n+            replicationManager.restart(event.getRemoteClusterInfo());\n+        }\n+    }\n+\n+    /**\n+     * Enforce a snapshot full sync for all standbys if the current node is a leader node\n+     */\n+    private void processEnforceSnapshotSync(DiscoveryServiceEvent event) {\n+        if (replicationManager == null || !isLeader.get()) {\n+            return;\n         }\n+\n+        replicationManager.enforceSnapshotSync(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTE5MjQ2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxMDozNVrOHHX12g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxMDozNVrOHHX12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MjY5OA==", "bodyText": "I think here is input(event), otherwise we will always hit TimeoutException", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477492698", "createdAt": "2020-08-26T18:10:35Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,6 +728,33 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public boolean forceSnapshotSync() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+            log.error(\"This forceSnapshotSync command is not supported on standby cluster.\");\n+            return false;\n+        }\n+\n+        DiscoveryServiceEvent event = new DiscoveryServiceEvent(DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, UUID.randomUUID());\n+        input(new DiscoveryServiceEvent(DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, UUID.randomUUID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTIwMjEwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxMzoyNFrOHHX8EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxMzoyNFrOHHX8EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NDI4OQ==", "bodyText": "I think we can not guarantee that all sync have been started... We can only guarantee that all sync start event have been added to the queue...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477494289", "createdAt": "2020-08-26T18:13:24Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,6 +728,33 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public boolean forceSnapshotSync() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+            log.error(\"This forceSnapshotSync command is not supported on standby cluster.\");\n+            return false;\n+        }\n+\n+        DiscoveryServiceEvent event = new DiscoveryServiceEvent(DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, UUID.randomUUID());\n+        input(new DiscoveryServiceEvent(DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, UUID.randomUUID()));\n+\n+        // Block until the full snapshot sync has been started on all the standby clusters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTIyMTU4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxOToxM1rOHHYIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODoxOToxM1rOHHYIEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5NzM2MQ==", "bodyText": "If runtimeToRemoteCluster is empty here, I think we won't have any log to see if we received the request or not...\nIt will be good to have a debug level log before this for loop to print eventId and runtimeToRemoteCluster size.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r477497361", "createdAt": "2020-08-26T18:19:13Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +205,17 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotSync(DiscoveryServiceEvent event) {\n+        for (CorfuLogReplicationRuntime standbyRuntime : runtimeToRemoteCluster.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57d905de8ca435ad9c9bc6e21ac51e22068e9a5a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDI4MzM4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNTozNVrOHLIh_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMToxNTozNVrOHLIh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzNjE1OQ==", "bodyText": "Can we add a comment on why we need this listener, for other developers future reference.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481436159", "createdAt": "2020-09-01T21:15:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -155,6 +159,9 @@\n      */\n     private boolean serverStarted = false;\n \n+    private LogReplicationEventListener logReplicationEventListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5a1639bd14e1241ec3741200741ed205d6774c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDM0MjA3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTozNDozOFrOHLJFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTozNDozOFrOHLJFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ0NTE1MQ==", "bodyText": "nit -> to the event to the event.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481445151", "createdAt": "2020-09-01T21:34:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,7 +733,29 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public void forceSnapshotSync(String clusterId) {\n+        if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+            String errorStr = \"The forceSnapshotSync command is not supported on standby cluster: \" + localNodeDescriptor;\n+            log.error(errorStr);\n+            throw new RuntimeException(errorStr);\n+        }\n+\n+        log.info(\"Received the forceSnapshotSync command at node {} and will write to the replicationTable.\", localNodeDescriptor);\n+\n+        /**\n+         * write to the event to the event corfu table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5a1639bd14e1241ec3741200741ed205d6774c"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDQ5NTA4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjozMjo0NlrOHLKhNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo1NTowM1rOHPVbdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODcyNA==", "bodyText": "I think this is not thread safe. We could have issues if a new configuration comes in (which writes to this object) while this is being used/read by the listener?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481468724", "createdAt": "2020-09-01T22:32:46Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -101,6 +102,7 @@\n     /**\n      * Defines the cluster to which this node belongs to.\n      */\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzE4Nw==", "bodyText": "+1. Looks like we need to make forceSnapshotSync synchronized.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r485833187", "createdAt": "2020-09-09T18:38:48Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -101,6 +102,7 @@\n     /**\n      * Defines the cluster to which this node belongs to.\n      */\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODcyNA=="}, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MTc4MQ==", "bodyText": "The processEvent is synchronized already.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r485841781", "createdAt": "2020-09-09T18:55:03Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -101,6 +102,7 @@\n     /**\n      * Defines the cluster to which this node belongs to.\n      */\n+    @Getter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2ODcyNA=="}, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDU0MjU2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NDoxMVrOHLK9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NDoxMVrOHLK9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTk4MA==", "bodyText": "you can call getLocalClusterRoleType", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481475980", "createdAt": "2020-09-01T22:54:11Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,7 +733,34 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public void forceSnapshotSync(String clusterId) {\n+        if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDU0NTEyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NToxOFrOHLK_FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NToxOFrOHLK_FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NjM3Mw==", "bodyText": "I think this getter is not used", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481476373", "createdAt": "2020-09-01T22:55:18Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n     private final CorfuRuntime corfuRuntime;\n \n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDcwOTQ0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoxNDo0OVrOHLMe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoxNDo0OVrOHLMe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMDg4Ng==", "bodyText": "We can make this log message shorter for readability, anyways it will only show on the node which received it (no need to specify the localNodeDescriptor). Received forceSnapshotSync", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481500886", "createdAt": "2020-09-02T00:14:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,7 +733,34 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public void forceSnapshotSync(String clusterId) {\n+        if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+            String errorStr = \"The forceSnapshotSync command is not supported on standby cluster: \" + localNodeDescriptor;\n+            log.error(errorStr);\n+            throw new RuntimeException(errorStr);\n+        }\n+\n+        log.info(\"Received the forceSnapshotSync command at node {} and will write to the replicationTable.\", localNodeDescriptor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDcxNTQ3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoxNzozOVrOHLMiSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoxNzozOVrOHLMiSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMTc2OA==", "bodyText": "standbyRuntime is null it will throw a NPE", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481501768", "createdAt": "2020-09-02T00:17:39Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationManager.java", "diffHunk": "@@ -204,4 +205,19 @@ public void processStandbyChange(TopologyDescriptor newConfig) {\n             }\n         }\n     }\n+\n+    /**\n+     * Stop the current log replication event and start a full snapshot sync for all standby clusters\n+     */\n+    public void enforceSnapshotSync(DiscoveryServiceEvent event) {\n+        CorfuLogReplicationRuntime standbyRuntime = runtimeToRemoteCluster.get(event.getRemoteClusterInfo().getClusterId());\n+        if (standbyRuntime == null) {\n+            log.warn(\"Failed to start enforceSnapshotSync for cluster {} as it is not on the standby list.\",\n+                    standbyRuntime.getRemoteClusterId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDcyMTY2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoyMDozMVrOHLMmMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxMzozM1rOHMIGXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMjc2OA==", "bodyText": "should we have a forceSnapshotSync API that forces snapshot sync to all standbys?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481502768", "createdAt": "2020-09-02T00:20:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,7 +733,34 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public void forceSnapshotSync(String clusterId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3NzY2Mw==", "bodyText": "This is no requirement for this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r482477663", "createdAt": "2020-09-02T21:13:33Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -708,7 +733,34 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n         return null;\n     }\n \n+    @Override\n+    public void forceSnapshotSync(String clusterId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMjc2OA=="}, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDcyNDMzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoyMjowM1rOHLMnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDoyMjowM1rOHLMnxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMzE3NQ==", "bodyText": "nit -> not on all standby clusters, right? only on the specified clusterId", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481503175", "createdAt": "2020-09-02T00:22:03Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -49,4 +49,12 @@\n      * @return\n      */\n     Map<String, LogReplicationMetadata.ReplicationStatusVal> queryReplicationStatus();\n+\n+    /**\n+     * This API enforce a full snapshot sync on all standby clusters at best effort.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDc0MDkwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozMDo0NlrOHLMxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozMDo0NlrOHLMxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNTU4OA==", "bodyText": "final", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481505588", "createdAt": "2020-09-02T00:30:46Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationEvent;\n+\n+import org.corfudb.runtime.collections.CorfuStreamEntries;\n+import org.corfudb.runtime.collections.CorfuStreamEntry;\n+import org.corfudb.runtime.collections.StreamListener;\n+\n+import java.util.List;\n+\n+@Slf4j\n+public class LogReplicationEventListener implements StreamListener {\n+    private CorfuReplicationDiscoveryService discoveryService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDc0MjI3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozMTozOFrOHLMyCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozMjo1NFrOHLMzVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNTgwMw==", "bodyText": "nit -> ServeiceLisener -> ServiceListener", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481505803", "createdAt": "2020-09-02T00:31:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationEvent;\n+\n+import org.corfudb.runtime.collections.CorfuStreamEntries;\n+import org.corfudb.runtime.collections.CorfuStreamEntry;\n+import org.corfudb.runtime.collections.StreamListener;\n+\n+import java.util.List;\n+\n+@Slf4j\n+public class LogReplicationEventListener implements StreamListener {\n+    private CorfuReplicationDiscoveryService discoveryService;\n+\n+    public  LogReplicationEventListener(CorfuReplicationDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public void start() {\n+        discoveryService.getLogReplicationMetadataManager().subscribeReplicationEventTable(this);\n+    }\n+\n+    public void stop() {\n+        discoveryService.getLogReplicationMetadataManager().unsubscribeReplicationEventTable(this);\n+    }\n+\n+    @Override\n+    public void onNext(CorfuStreamEntries results) {\n+        /**\n+         * If the current node is not a leader, ignore the notifications.\n+         */\n+        if (!discoveryService.getIsLeader().get()) {\n+            log.info(\"The onNext call with {} will be skipped as the current node {}  in the cluster {} is not the leader.\",\n+                    results, discoveryService.getLocalNodeDescriptor(), discoveryService.getLocalClusterDescriptor());\n+            return;\n+        }\n+\n+        log.info(\"LogReplicationEventListener onNext {} will be processed at node {} in the cluster {}\",\n+                results, discoveryService.getLocalNodeDescriptor(), discoveryService.getLocalClusterDescriptor());\n+\n+        /**\n+         * If the current node is the leader, it generates a discovery event and put it into the discovery service event queue.\n+         */\n+        for (List<CorfuStreamEntry> entryList : results.getEntries().values()) {\n+            for (CorfuStreamEntry entry : entryList) {\n+                ReplicationEvent event = (ReplicationEvent) entry.getPayload();\n+                log.info(\"ReplicationEventListener at node {} put an event {} to its local discoveryServiceQueue\", discoveryService.getLocalNodeDescriptor(), event);\n+                discoveryService.input(new DiscoveryServiceEvent(DiscoveryServiceEvent.DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, event.getClusterId()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onError(Throwable throwable) {\n+        log.error(\"onError for CorfuReplicationDiscoveryServeiceLisener\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNjEzMw==", "bodyText": "can we print the throwable?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481506133", "createdAt": "2020-09-02T00:32:54Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationEvent;\n+\n+import org.corfudb.runtime.collections.CorfuStreamEntries;\n+import org.corfudb.runtime.collections.CorfuStreamEntry;\n+import org.corfudb.runtime.collections.StreamListener;\n+\n+import java.util.List;\n+\n+@Slf4j\n+public class LogReplicationEventListener implements StreamListener {\n+    private CorfuReplicationDiscoveryService discoveryService;\n+\n+    public  LogReplicationEventListener(CorfuReplicationDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public void start() {\n+        discoveryService.getLogReplicationMetadataManager().subscribeReplicationEventTable(this);\n+    }\n+\n+    public void stop() {\n+        discoveryService.getLogReplicationMetadataManager().unsubscribeReplicationEventTable(this);\n+    }\n+\n+    @Override\n+    public void onNext(CorfuStreamEntries results) {\n+        /**\n+         * If the current node is not a leader, ignore the notifications.\n+         */\n+        if (!discoveryService.getIsLeader().get()) {\n+            log.info(\"The onNext call with {} will be skipped as the current node {}  in the cluster {} is not the leader.\",\n+                    results, discoveryService.getLocalNodeDescriptor(), discoveryService.getLocalClusterDescriptor());\n+            return;\n+        }\n+\n+        log.info(\"LogReplicationEventListener onNext {} will be processed at node {} in the cluster {}\",\n+                results, discoveryService.getLocalNodeDescriptor(), discoveryService.getLocalClusterDescriptor());\n+\n+        /**\n+         * If the current node is the leader, it generates a discovery event and put it into the discovery service event queue.\n+         */\n+        for (List<CorfuStreamEntry> entryList : results.getEntries().values()) {\n+            for (CorfuStreamEntry entry : entryList) {\n+                ReplicationEvent event = (ReplicationEvent) entry.getPayload();\n+                log.info(\"ReplicationEventListener at node {} put an event {} to its local discoveryServiceQueue\", discoveryService.getLocalNodeDescriptor(), event);\n+                discoveryService.input(new DiscoveryServiceEvent(DiscoveryServiceEvent.DiscoveryServiceEventType.ENFORCE_SNAPSHOT_SYNC, event.getClusterId()));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onError(Throwable throwable) {\n+        log.error(\"onError for CorfuReplicationDiscoveryServeiceLisener\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNTgwMw=="}, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDc1NDI0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozODo1MFrOHLM5Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToxNzo1N1rOHMIUuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNzYwMw==", "bodyText": "Is it worth to subscribe every node to listen to the enforce event? if anyways only the leader would take action... in which case maybe it would be better to subscribe onLockAcquire? and unsubscribe onLockRelease... anyways a node that is not a leader even if it listens it won't do anything...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481507603", "createdAt": "2020-09-02T00:38:50Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -300,6 +311,8 @@ private void bootstrapLogReplicationService() {\n         // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n         serverCallback.complete(interClusterReplicationService);\n \n+        logReplicationEventListener = new LogReplicationEventListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4MTMzNg==", "bodyText": "I thought about that but I don't see the point to complicate the logic.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r482481336", "createdAt": "2020-09-02T21:17:57Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -300,6 +311,8 @@ private void bootstrapLogReplicationService() {\n         // Unblock server initialization & register to Log Replication Lock, to attempt lock / leadership acquisition\n         serverCallback.complete(interClusterReplicationService);\n \n+        logReplicationEventListener = new LogReplicationEventListener(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNzYwMw=="}, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDc1ODc4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo0MTozMVrOHLM7xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDo0MTozMVrOHLM7xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwODI5NA==", "bodyText": "this message will be printed as a huge blob and anyways it will only be printed on the corfu.logs of the node receiving it, we can likely remove the localNodeDescriptor and localClusterDescriptor", "url": "https://github.com/CorfuDB/CorfuDB/pull/2709#discussion_r481508294", "createdAt": "2020-09-02T00:41:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/LogReplicationEventListener.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationMetadata.ReplicationEvent;\n+\n+import org.corfudb.runtime.collections.CorfuStreamEntries;\n+import org.corfudb.runtime.collections.CorfuStreamEntry;\n+import org.corfudb.runtime.collections.StreamListener;\n+\n+import java.util.List;\n+\n+@Slf4j\n+public class LogReplicationEventListener implements StreamListener {\n+    private CorfuReplicationDiscoveryService discoveryService;\n+\n+    public  LogReplicationEventListener(CorfuReplicationDiscoveryService discoveryService) {\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    public void start() {\n+        discoveryService.getLogReplicationMetadataManager().subscribeReplicationEventTable(this);\n+    }\n+\n+    public void stop() {\n+        discoveryService.getLogReplicationMetadataManager().unsubscribeReplicationEventTable(this);\n+    }\n+\n+    @Override\n+    public void onNext(CorfuStreamEntries results) {\n+        /**\n+         * If the current node is not a leader, ignore the notifications.\n+         */\n+        if (!discoveryService.getIsLeader().get()) {\n+            log.info(\"The onNext call with {} will be skipped as the current node {}  in the cluster {} is not the leader.\",\n+                    results, discoveryService.getLocalNodeDescriptor(), discoveryService.getLocalClusterDescriptor());\n+            return;\n+        }\n+\n+        log.info(\"LogReplicationEventListener onNext {} will be processed at node {} in the cluster {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecb55e4862062225a54df359e9e9be8f103a682"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1936, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}