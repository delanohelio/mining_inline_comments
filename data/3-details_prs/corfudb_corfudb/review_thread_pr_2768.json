{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjIwNjAx", "number": 2768, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzozNzoxMVrOEjXQNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo0MjoyN1rOEjXUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE2NTk3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzozNzoxMVrOHRrNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo0NjoyMVrOHSY3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NTg2NQ==", "bodyText": "Expand.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488295865", "createdAt": "2020-09-14T23:37:11Z", "author": {"login": "WenbinZhu"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -17,9 +17,7 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0Mzg1NA==", "bodyText": "Done", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489043854", "createdAt": "2020-09-15T22:46:21Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -17,9 +17,7 @@\n import org.junit.Test;\n \n import java.io.IOException;\n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NTg2NQ=="}, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE3NDM1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo0MToyNVrOHRrSbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzozNzoxNlrOHSa22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzA2OA==", "bodyText": "Why sleeping here? Is the test relying on the sleep to be passed? If not we can remove it, otherwise it's better to make it synchronous instead of sleeping.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488297068", "createdAt": "2020-09-14T23:41:25Z", "author": {"login": "WenbinZhu"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3NjQ0Mg==", "bodyText": "there is an async thread which delivers the updates every 50ms.  Changing it to be synchronous is a bigger change so keeping the sleep for now.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489076442", "createdAt": "2020-09-15T23:37:16Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzA2OA=="}, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTE3NjA4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo0MjoyN1rOHRrTZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzozNzoyM1rOHSa3Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzMxOA==", "bodyText": "Maybe add a check for the content of the update?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r488297318", "createdAt": "2020-09-14T23:42:27Z", "author": {"login": "WenbinZhu"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);\n+        LinkedList<CorfuStreamEntries> updates = listener.getUpdates();\n+        assertThat(updates.size()).isEqualTo(1);\n+        assertThat(updates.getFirst().getEntries().entrySet().size()).isEqualTo(2);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3NjUwMg==", "bodyText": "Done", "url": "https://github.com/CorfuDB/CorfuDB/pull/2768#discussion_r489076502", "createdAt": "2020-09-15T23:37:23Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/StreamingIT.java", "diffHunk": "@@ -323,4 +321,67 @@ public void testStreamingMultiTableStreams() throws Exception {\n \n         assertThat(shutdownCorfuServer(corfuServer)).isTrue();\n     }\n+\n+    /**\n+     * Streaming Test with 2 different tables and a single streamer\n+     * <p>\n+     * The test creates two tables in the same namespace and makes updates to both in the same transaction.\n+     * A single streamer subscribes to updates from both.\n+     * <p>\n+     * The test verifies that the streamer receives updates from both tables and since the updates were made in\n+     * the same transaction, they are received in one CorfuStreamEntry.\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testStreamingMultiTableSingleListener() throws Exception {\n+        // Run a corfu server\n+        Process corfuServer = runSinglePersistentServer(corfuSingleNodeHost, corfuStringNodePort);\n+\n+        // Start a Corfu runtime\n+        runtime = createRuntime(singleNodeEndpoint);\n+\n+        runtime.setTransactionLogging(true);\n+        CorfuStore store = new CorfuStore(runtime);\n+\n+        // Record the initial timestamp.\n+        Timestamp ts1 = store.getTimestamp();\n+\n+        // Create 2 tables in the same namespace\n+        Table<Uuid, Uuid, Uuid> n1t1 = store.openTable(\n+                \"n1\", \"t1\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        Table<Uuid, Uuid, Uuid> n2t1 = store.openTable(\n+                \"n1\", \"t2\", Uuid.class,\n+                Uuid.class, Uuid.class,\n+                TableOptions.builder().build()\n+        );\n+\n+        // Make an update to the tables in a transaction\n+        final int t1_uuid = 5;\n+        final int t2_uuid = 10;\n+        Uuid t1Uuid = Uuid.newBuilder().setMsb(t1_uuid).setLsb(t1_uuid).build();\n+        Uuid t2Uuid = Uuid.newBuilder().setMsb(t2_uuid).setLsb(t2_uuid).build();\n+        TxBuilder txBuilder = store.tx(\"n1\");\n+        txBuilder.update(\"t1\", t1Uuid, t1Uuid, t1Uuid);\n+        txBuilder.update(\"t2\", t2Uuid, t2Uuid, t2Uuid);\n+        txBuilder.commit();\n+\n+        // Subscribe to both tables\n+        List<TableSchema> tablesSubscribed = new ArrayList<>();\n+        tablesSubscribed.add(new TableSchema(\"t1\", Uuid.class, Uuid.class, Uuid.class));\n+        tablesSubscribed.add(new TableSchema(\"t2\", Uuid.class, Uuid.class, Uuid.class));\n+        StreamListenerImpl listener = new StreamListenerImpl(\"n1_listener\");\n+        store.subscribe(listener, \"n1\", tablesSubscribed, ts1);\n+\n+        // Verify that both updates come to the subscriber in the same StreamEntry\n+        TimeUnit.SECONDS.sleep(2);\n+        LinkedList<CorfuStreamEntries> updates = listener.getUpdates();\n+        assertThat(updates.size()).isEqualTo(1);\n+        assertThat(updates.getFirst().getEntries().entrySet().size()).isEqualTo(2);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI5NzMxOA=="}, "originalCommit": {"oid": "7ad973387c2b223ed7f8f8167c7d6171ed2f00c2"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1692, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}