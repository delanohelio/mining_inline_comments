{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODMyODAz", "number": 2643, "reviewThreads": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NDo1MVrOEQwTVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1MToxMFrOERT86A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA0MDU1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NDo1MVrOG1FifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NDo1MVrOG1FifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODQ2MQ==", "bodyText": "if this is only related to Log Replication, can we rename it to getLogReplication....()?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458318461", "createdAt": "2020-07-21T18:54:51Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "diffHunk": "@@ -216,16 +219,30 @@ public String getPluginConfigFilePath() {\n         return pluginConfigFilePath == null ? PLUGIN_CONFIG_FILE_PATH : pluginConfigFilePath;\n     }\n \n-    public int getSnapshotSyncBatchSize() {\n-        Integer snapshotSyncBatchSize = getServerConfig(Integer.class, \"--snapshot-batch\");\n-        return snapshotSyncBatchSize == null ? SnapshotSender.DEFAULT_SNAPSHOT_BATCH_SIZE : snapshotSyncBatchSize;\n+    /**\n+     * Get the max number of messages can be sent over per batch.\n+     * @return\n+     */\n+    public int getMaxNumMsgPerBatch() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA1MDQ5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozNVrOG1FonQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODo1NzozNVrOG1FonQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMDAyOQ==", "bodyText": "can we rename to DEFAULT_TIMEOUT_MS?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458320029", "createdAt": "2020-07-21T18:57:35Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "diffHunk": "@@ -13,15 +13,40 @@\n @Data\n public class LogReplicationConfig {\n \n+    // Log Replication message timeout time in milliseconds.\n+    public static final int DEFAULT_TIMEOUT = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2MTY5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuInterClusterReplicationServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMDo1NVrOG1Fv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMDo1NVrOG1Fv4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMTg4OA==", "bodyText": "can we rename this to max_message_per_snapshot or snapshot_batch_num_messages?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458321888", "createdAt": "2020-07-21T19:00:55Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuInterClusterReplicationServer.java", "diffHunk": "@@ -44,7 +44,8 @@\n                     + \"\\n\"\n                     + \"Usage:\\n\"\n                     + \"\\tlog_replication_server (-l <path>|-m) [-nsN] [-a <address>|-q <interface-name>] \"\n-                    + \"[--snapshot-batch=<batch-size>]\"\n+                    + \"[--snapshot-batch=<batch-size>] \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2NDE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuInterClusterReplicationServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTo0MlrOG1FxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMTo0MlrOG1FxZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjI3OQ==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458322279", "createdAt": "2020-07-21T19:01:42Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuInterClusterReplicationServer.java", "diffHunk": "@@ -171,14 +172,20 @@\n                     + \" --metrics-port=<metrics_port>                                            \"\n                     + \"              Metrics provider server port [default: 9999].\\n             \"\n                     + \" --snapshot-batch=<batch-size>                                            \"\n-                    + \"              Snapshot (Full) Sync batch size (number of entries)\\n       \"\n+                    + \"              Snapshot (Full) Sync batch size.\\n                          \"\n+                    + \"              The max number of messages per batch)\\n                      \"\n+                    + \"                                                                          \"\n+                    + \" --max-data-message-size=<msg-size>                                       \"\n+                    + \"              The max size of replication data message in bytes.\\n   \"\n+                    + \"                                                                          \"\n                     + \" --lock-lease=<lease-duration>                                            \"\n                     + \"              Lock lease duration in seconds\\n                            \"\n                     + \" -h, --help                                                               \"\n                     + \"              Show this screen\\n\"\n                     + \" --version                                                                \"\n                     + \"              Show version\\n\";\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA2ODMzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowMjo1M1rOG1Fz7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozMTo0OFrOG1Ofuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjkyNw==", "bodyText": "why did we reduce it?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458322927", "createdAt": "2020-07-21T19:02:53Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "diffHunk": "@@ -45,7 +45,7 @@ private DefaultClusterConfig() {\n     private static String standbyLogReplicationPort = \"9020\";\n \n     @Getter\n-    private static int logSenderBufferSize = 20;\n+    private static int logSenderBufferSize = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NTIxMQ==", "bodyText": "As we increase the size of the message to 64MB, there is no point to have a big buffer.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458465211", "createdAt": "2020-07-22T00:31:48Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "diffHunk": "@@ -45,7 +45,7 @@ private DefaultClusterConfig() {\n     private static String standbyLogReplicationPort = \"9020\";\n \n     @Getter\n-    private static int logSenderBufferSize = 20;\n+    private static int logSenderBufferSize = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMjkyNw=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDA3NDg5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNDozOFrOG1F33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTowNDozOFrOG1F33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyMzkzMg==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458323932", "createdAt": "2020-07-21T19:04:38Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,25 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDEwMjE3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxMjo0NlrOG1GJDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo1ODoyNVrOG17fXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyODMzNQ==", "bodyText": "the comment says timestamp but we are checking on version.  Is it intended?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458328335", "createdAt": "2020-07-21T19:12:46Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "diffHunk": "@@ -98,21 +93,37 @@ void processMsg(LogReplicationEntry txMessage) {\n \n         lastMsgTs = Math.max(persistLogTS, lastMsgTs);\n \n+\n+        // If this entry's max timestamp is not bigger than the persistLogTs, skip the whole message.\n         if (topologyConfigId != persistSiteConfigID || ts != persistSnapStart || ts != persistSnapDone ||\n-                txMessage.getMetadata().getPreviousTimestamp() != persistLogTS) {\n+                entryTS <= persistLogTS) {\n             log.warn(\"Skip write this msg {} as its timestamp is later than the persisted one \" +\n                     txMessage.getMetadata() +  \" persisteSiteConfig \" + persistSiteConfigID + \" persistSnapStart \" + persistSnapStart +\n                     \" persistSnapDone \" + persistSnapDone + \" persistLogTs \" + persistLogTS);\n             return;\n         }\n \n+        // Skip Opaque entries with timestamp that are not larger than persistedTs\n+        OpaqueEntry[] newOpaqueEntryList = opaqueEntryList.stream().filter(x->x.getVersion() > persistLogTS).toArray(OpaqueEntry[]::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMjM5OQ==", "bodyText": "For opaque entry, the version is the timestamp.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459202399", "createdAt": "2020-07-23T03:58:25Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "diffHunk": "@@ -98,21 +93,37 @@ void processMsg(LogReplicationEntry txMessage) {\n \n         lastMsgTs = Math.max(persistLogTS, lastMsgTs);\n \n+\n+        // If this entry's max timestamp is not bigger than the persistLogTs, skip the whole message.\n         if (topologyConfigId != persistSiteConfigID || ts != persistSnapStart || ts != persistSnapDone ||\n-                txMessage.getMetadata().getPreviousTimestamp() != persistLogTS) {\n+                entryTS <= persistLogTS) {\n             log.warn(\"Skip write this msg {} as its timestamp is later than the persisted one \" +\n                     txMessage.getMetadata() +  \" persisteSiteConfig \" + persistSiteConfigID + \" persistSnapStart \" + persistSnapStart +\n                     \" persistSnapDone \" + persistSnapDone + \" persistLogTs \" + persistLogTS);\n             return;\n         }\n \n+        // Skip Opaque entries with timestamp that are not larger than persistedTs\n+        OpaqueEntry[] newOpaqueEntryList = opaqueEntryList.stream().filter(x->x.getVersion() > persistLogTS).toArray(OpaqueEntry[]::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyODMzNQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDEwOTU1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxNTowMlrOG1GNpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNTozOFrOG1OjuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyOTUwOA==", "bodyText": "will opaque entry list contain all streams to be replicated, even if they do not have any data?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458329508", "createdAt": "2020-07-21T19:15:02Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "diffHunk": "@@ -98,21 +93,37 @@ void processMsg(LogReplicationEntry txMessage) {\n \n         lastMsgTs = Math.max(persistLogTS, lastMsgTs);\n \n+\n+        // If this entry's max timestamp is not bigger than the persistLogTs, skip the whole message.\n         if (topologyConfigId != persistSiteConfigID || ts != persistSnapStart || ts != persistSnapDone ||\n-                txMessage.getMetadata().getPreviousTimestamp() != persistLogTS) {\n+                entryTS <= persistLogTS) {\n             log.warn(\"Skip write this msg {} as its timestamp is later than the persisted one \" +\n                     txMessage.getMetadata() +  \" persisteSiteConfig \" + persistSiteConfigID + \" persistSnapStart \" + persistSnapStart +\n                     \" persistSnapDone \" + persistSnapDone + \" persistLogTs \" + persistLogTS);\n             return;\n         }\n \n+        // Skip Opaque entries with timestamp that are not larger than persistedTs\n+        OpaqueEntry[] newOpaqueEntryList = opaqueEntryList.stream().filter(x->x.getVersion() > persistLogTS).toArray(OpaqueEntry[]::new);\n+\n+        // Check that all opaque entries contain the correct streams\n+        for (OpaqueEntry opaqueEntry : newOpaqueEntryList) {\n+            if (!streamMap.keySet().containsAll(opaqueEntry.getEntries().keySet())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjIzMg==", "bodyText": "For tx opqaque entry is a SMRentry that contains all data changed in one transaction.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458466232", "createdAt": "2020-07-22T00:35:38Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntryWriter.java", "diffHunk": "@@ -98,21 +93,37 @@ void processMsg(LogReplicationEntry txMessage) {\n \n         lastMsgTs = Math.max(persistLogTS, lastMsgTs);\n \n+\n+        // If this entry's max timestamp is not bigger than the persistLogTs, skip the whole message.\n         if (topologyConfigId != persistSiteConfigID || ts != persistSnapStart || ts != persistSnapDone ||\n-                txMessage.getMetadata().getPreviousTimestamp() != persistLogTS) {\n+                entryTS <= persistLogTS) {\n             log.warn(\"Skip write this msg {} as its timestamp is later than the persisted one \" +\n                     txMessage.getMetadata() +  \" persisteSiteConfig \" + persistSiteConfigID + \" persistSnapStart \" + persistSnapStart +\n                     \" persistSnapDone \" + persistSnapDone + \" persistLogTs \" + persistLogTS);\n             return;\n         }\n \n+        // Skip Opaque entries with timestamp that are not larger than persistedTs\n+        OpaqueEntry[] newOpaqueEntryList = opaqueEntryList.stream().filter(x->x.getVersion() > persistLogTS).toArray(OpaqueEntry[]::new);\n+\n+        // Check that all opaque entries contain the correct streams\n+        for (OpaqueEntry opaqueEntry : newOpaqueEntryList) {\n+            if (!streamMap.keySet().containsAll(opaqueEntry.getEntries().keySet())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMyOTUwOA=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDExODIwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxNzozNlrOG1GTJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxNzozNlrOG1GTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzMDkxNg==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458330916", "createdAt": "2020-07-21T19:17:36Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -131,24 +133,25 @@ public LogReplicationSinkManager(String localCorfuEndpoint, LogReplicationConfig\n          */\n         this.rxState = RxState.LOG_ENTRY_SYNC;\n         this.config = config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDExOTUwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToxODowMFrOG1GT5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDozNzoxM1rOG1OldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzMTExMQ==", "bodyText": "nit - extra newline.  Also, since this is measuring time, can we rename to something like default_ack_delay_ms or something else?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458331111", "createdAt": "2020-07-21T19:18:00Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -36,10 +36,12 @@\n      */\n     private static final String config_file = \"/config/corfu/corfu_replication_config.properties\";\n \n+    private final int DEFAULT_ACK_CNT = 1;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2NjY3Nw==", "bodyText": "This is the count of messages. As the message becomes bigger now, so we send an ACK for each message.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458466677", "createdAt": "2020-07-22T00:37:13Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -36,10 +36,12 @@\n      */\n     private static final String config_file = \"/config/corfu/corfu_replication_config.properties\";\n \n+    private final int DEFAULT_ACK_CNT = 1;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzMTExMQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDE0NjcyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyNjozM1rOG1Gleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyNjozM1rOG1Gleg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNTYxMA==", "bodyText": "sequencer -> sequence number", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458335610", "createdAt": "2020-07-21T19:26:33Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "diffHunk": "@@ -178,23 +178,28 @@ public void apply(LogReplicationEntry message) {\n \n         if (message.getMetadata().getSnapshotSyncSeqNum() != recvSeq ||\n                 message.getMetadata().getMessageMetadataType() != MessageType.SNAPSHOT_MESSAGE) {\n-            log.error(\"Expecting sequencer {} != recvSeq {} or wrong message type {} expecting {}\",\n-                    message.getMetadata().getSnapshotSyncSeqNum(), recvSeq,\n+            log.error(\"Received {} Expecting sequencer {} != recvSeq {} or wrong message type {} expecting {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDE1NTY5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyOToxOVrOG1GrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOToyOToxOVrOG1GrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMzNzA5OQ==", "bodyText": "we expect the opaqueEntry size == 1.  Why is the iteration needed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458337099", "createdAt": "2020-07-21T19:29:19Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "diffHunk": "@@ -178,23 +178,28 @@ public void apply(LogReplicationEntry message) {\n \n         if (message.getMetadata().getSnapshotSyncSeqNum() != recvSeq ||\n                 message.getMetadata().getMessageMetadataType() != MessageType.SNAPSHOT_MESSAGE) {\n-            log.error(\"Expecting sequencer {} != recvSeq {} or wrong message type {} expecting {}\",\n-                    message.getMetadata().getSnapshotSyncSeqNum(), recvSeq,\n+            log.error(\"Received {} Expecting sequencer {} != recvSeq {} or wrong message type {} expecting {}\",\n+                    message.getMetadata(), message.getMetadata().getSnapshotSyncSeqNum(), recvSeq,\n                     message.getMetadata().getMessageMetadataType(), MessageType.SNAPSHOT_MESSAGE);\n             throw new ReplicationWriterException(\"Message is out of order or wrong type\");\n         }\n \n-        byte[] payload = message.getPayload();\n-        OpaqueEntry opaqueEntry = OpaqueEntry.deserialize(Unpooled.wrappedBuffer(payload));\n-\n-        if (opaqueEntry.getEntries().keySet().size() != 1) {\n-            log.error(\"The opaqueEntry has more than one entry {}\", opaqueEntry);\n+        // For snapshot message, it has only one opaque entry.\n+        if (message.getOpaqueEntryList().size() > 1) {\n+            log.error(\" Get {} instead of one opaque entry in Snapshot Message\", message.getOpaqueEntryList().size());\n             return;\n         }\n \n-        UUID uuid = opaqueEntry.getEntries().keySet().stream().findFirst().get();\n-        processOpaqueEntry(opaqueEntry.getEntries().get(uuid), message.getMetadata().getSnapshotSyncSeqNum(), uuidMap.get(uuid));\n-        recvSeq++;\n+        for (OpaqueEntry opaqueEntry : message.getOpaqueEntryList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIwMTcxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0Mzo1NVrOG1HIJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0Mzo1NVrOG1HIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NDQ4NA==", "bodyText": "static import of a method is in general not a recommended practice..", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458344484", "createdAt": "2020-07-21T19:43:55Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -14,11 +13,16 @@\n import org.corfudb.runtime.view.stream.OpaqueStream;\n \n import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n import java.util.UUID;\n \n+import static org.corfudb.infrastructure.logreplication.LogReplicationConfig.DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE;\n+import static org.corfudb.infrastructure.logreplication.replication.send.logreader.StreamsSnapshotReader.calculateSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIwMzk5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NDoyN1rOG1HJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NDoyN1rOG1HJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NDgxOA==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458344818", "createdAt": "2020-07-21T19:44:27Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -32,45 +36,59 @@\n     private Set<UUID> streamUUIDs;\n \n     // the opaquestream wrapper for the transaction stream.\n-    private TxOpaqueStream txStream;\n-   \n+    private TxOpaqueStream txOpaqueStream;\n \n     // the base snapshot the log entry logreader starts to poll transaction logs\n     private long globalBaseSnapshot;\n+\n     // timestamp of the transaction log that is the previous message\n     private long preMsgTs;\n+\n     // the timestamp of the transaction log that is the current message\n     private long currentMsgTs;\n+\n     // the sequence number of the message based on the globalBaseSnapshot\n     private long sequence;\n \n     private long topologyConfigId;\n \n+    private final int maxDataSizePerMsg;\n+\n+    private OpaqueEntry lastOpaqueEntry = null;\n+\n+\n+    private boolean hasNoiseData = false;\n+\n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIwODA4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NTozM1rOG1HL2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NTozM1rOG1HL2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NTQzNA==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458345434", "createdAt": "2020-07-21T19:45:33Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -32,45 +36,59 @@\n     private Set<UUID> streamUUIDs;\n \n     // the opaquestream wrapper for the transaction stream.\n-    private TxOpaqueStream txStream;\n-   \n+    private TxOpaqueStream txOpaqueStream;\n \n     // the base snapshot the log entry logreader starts to poll transaction logs\n     private long globalBaseSnapshot;\n+\n     // timestamp of the transaction log that is the previous message\n     private long preMsgTs;\n+\n     // the timestamp of the transaction log that is the current message\n     private long currentMsgTs;\n+\n     // the sequence number of the message based on the globalBaseSnapshot\n     private long sequence;\n \n     private long topologyConfigId;\n \n+    private final int maxDataSizePerMsg;\n+\n+    private OpaqueEntry lastOpaqueEntry = null;\n+\n+\n+    private boolean hasNoiseData = false;\n+\n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIxMDA2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NjoxMVrOG1HNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NjoxMVrOG1HNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NTczNA==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458345734", "createdAt": "2020-07-21T19:46:11Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -32,45 +36,59 @@\n     private Set<UUID> streamUUIDs;\n \n     // the opaquestream wrapper for the transaction stream.\n-    private TxOpaqueStream txStream;\n-   \n+    private TxOpaqueStream txOpaqueStream;\n \n     // the base snapshot the log entry logreader starts to poll transaction logs\n     private long globalBaseSnapshot;\n+\n     // timestamp of the transaction log that is the previous message\n     private long preMsgTs;\n+\n     // the timestamp of the transaction log that is the current message\n     private long currentMsgTs;\n+\n     // the sequence number of the message based on the globalBaseSnapshot\n     private long sequence;\n \n     private long topologyConfigId;\n \n+    private final int maxDataSizePerMsg;\n+\n+    private OpaqueEntry lastOpaqueEntry = null;\n+\n+\n+    private boolean hasNoiseData = false;\n+\n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n+\n         Set<String> streams = config.getStreamsToReplicate();\n+\n         streamUUIDs = new HashSet<>();\n         for (String s : streams) {\n             streamUUIDs.add(CorfuRuntime.getStreamID(s));\n         }\n \n         //create an opaque stream for transaction stream\n-        txStream = new TxOpaqueStream(rt);\n+        txOpaqueStream = new TxOpaqueStream(rt);\n     }\n \n-    LogReplicationEntry generateMessage(OpaqueEntry entry, UUID logEntryRequestId) {\n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, entry);\n-        currentMsgTs = entry.getVersion();\n+    LogReplicationEntry generateMessageWithOpaqueEntryList(List<OpaqueEntry> opaqueEntryList, UUID logEntryRequestId) {\n+        // Set the last timestamp as the max timestamp\n+        currentMsgTs = opaqueEntryList.get(opaqueEntryList.size() - 1).getVersion();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDIxNDA5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NzoyM1rOG1HPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo0NzoyM1rOG1HPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NjM2Ng==", "bodyText": "nit - can we remove the extra newlines?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458346366", "createdAt": "2020-07-21T19:47:23Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -89,34 +107,88 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n                     entry.getEntries().keySet(), streamUUIDs);\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        hasNoiseData = true;\n+        return false;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+    private int calculateOpaqueEntrySize(OpaqueEntry opaqueEntry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMwMDQ2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxMzo0M1rOG1IFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozMjo1M1rOG2WuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MDE1NA==", "bodyText": "since this is used by both LogEntryReader and SnapshotReader, can we move it to a common place?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458360154", "createdAt": "2020-07-21T20:13:43Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODU2OA==", "bodyText": "Move to an utility class.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459648568", "createdAt": "2020-07-23T18:32:53Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MDE1NA=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMwNjg0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxNToyMlrOG1II-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDo0Nzo1NFrOG1OxDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTA4MQ==", "bodyText": "why do we check for both default size and user-configured size?  It should be either one, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458361081", "createdAt": "2020-07-21T20:15:22Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2OTY0NA==", "bodyText": "If an entry's size is bigger than the user's setup but is smaller than the default that we can handle, we want that the log replication still make progress, but log a warning. But if the entry's size is bigger than we can handle, we will fail.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458469644", "createdAt": "2020-07-22T00:47:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTA4MQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMxMzk2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxNzoyOFrOG1INSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDo0ODozM1rOG1OxtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjE4NQ==", "bodyText": "this is not an error.  the entry will get sent in the next batch.  Can we change to debug or trace?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458362185", "createdAt": "2020-07-21T20:17:28Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2OTgxMg==", "bodyText": "This is an error and will cause the log replication transport layer failure.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458469812", "createdAt": "2020-07-22T00:48:33Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjE4NQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMxNTE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxNzo1MFrOG1IOAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDo0OToyOFrOG1OyzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjM3MQ==", "bodyText": "debug or trace?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458362371", "createdAt": "2020-07-21T20:17:50Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE);\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2OTkxNQ==", "bodyText": "This is a warning.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458469915", "createdAt": "2020-07-22T00:48:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE);\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjM3MQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3MDA5Mw==", "bodyText": "As I rebased, this is what Anny and I discussed from the previous PR.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458470093", "createdAt": "2020-07-22T00:49:28Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +62,116 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Given a list of SMREntries, calculate the total sizeInBytes.\n+     * @param smrEntries\n+     * @return\n+     */\n+    public static int calculateSize(List<SMREntry> smrEntries) {\n+        int size = 0;\n+        for (SMREntry entry : smrEntries) {\n+            size += entry.getSerializedSize();\n+        }\n+\n+        log.trace(\"current entry sizeInBytes {}\", size);\n+        return size;\n+    }\n+\n+    /**\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, DEFAULT_LOG_REPLICATION_DATA_MSG_SIZE);\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MjM3MQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMxOTc5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxOToxNlrOG1IQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozMzozNVrOG2WvuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzEyNQ==", "bodyText": "can it be private?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458363125", "createdAt": "2020-07-21T20:19:16Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -223,4 +281,21 @@ public void setTopologyConfigId(long topologyConfigId) {\n         this.topologyConfigId = topologyConfigId;\n     }\n \n+    /**\n+     * Record a list of SMR entries\n+     */\n+    static class SMREntryList {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0ODk1Mw==", "bodyText": "made the change.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459648953", "createdAt": "2020-07-23T18:33:35Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -223,4 +281,21 @@ public void setTopologyConfigId(long topologyConfigId) {\n         this.topologyConfigId = topologyConfigId;\n     }\n \n+    /**\n+     * Record a list of SMR entries\n+     */\n+    static class SMREntryList {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzEyNQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY5NTk2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyMDowOFrOG1L3WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyMDowOFrOG1L3WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMjEwNQ==", "bodyText": "can we change the method name to something like calculateOpaqueSMRSerializedSize or something of that kind?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458422105", "createdAt": "2020-07-21T22:20:08Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "diffHunk": "@@ -135,6 +146,42 @@ void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n             b.skipBytes(len);\n         }\n         SMRArguments = arguments;\n+        serializedSize = b.readerIndex() - readIndex + 1;\n+    }\n+\n+\n+    /**\n+     * Calculate an Opaque SMR entry's serialized size.\n+     * @throws IllegalAccessException\n+     */\n+    private int calculateSerializedSize() {\n+        if (!opaque) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDcwMTIwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyMjowM1rOG1L6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyMjowM1rOG1L6cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyMjg5Ng==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458422896", "createdAt": "2020-07-21T22:22:03Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "diffHunk": "@@ -135,6 +146,42 @@ void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n             b.skipBytes(len);\n         }\n         SMRArguments = arguments;\n+        serializedSize = b.readerIndex() - readIndex + 1;\n+    }\n+\n+\n+    /**\n+     * Calculate an Opaque SMR entry's serialized size.\n+     * @throws IllegalAccessException\n+     */\n+    private int calculateSerializedSize() {\n+        if (!opaque) {\n+            log.error(\"This operation only supported for an opaque SMR entry\");\n+            return 0;\n+        }\n+\n+        int size = 0;\n+\n+        for (Object smrArg : SMRArguments) {\n+            size += ((byte[])smrArg).length;\n+        }\n+\n+        size += (SMRMethod.length() * Character.BYTES);\n+        size += Integer.BYTES;\n+\n+        return size;\n+    }\n+\n+    /**\n+     * The serialized size of an opaque SMR entry.\n+     * @return\n+     */\n+    public synchronized int getSerializedSize() {\n+        if (serializedSize == null) {\n+            serializedSize = calculateSerializedSize();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDcwOTI2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNTowNFrOG1L_Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjoyNTowNFrOG1L_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyNDEzMQ==", "bodyText": "nit - extra newline", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458424131", "createdAt": "2020-07-21T22:25:04Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "diffHunk": "@@ -190,6 +238,8 @@ public void serialize(ByteBuf b) {\n                     b.writeInt(length);\n                     b.writerIndex(lengthIndex + length + 4);\n                 });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc2Mzc1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0NTo1M1rOG1MfIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDo1Mzo1M1rOG1O3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjI4OQ==", "bodyText": "can we import logReplicationConfig instead?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458432289", "createdAt": "2020-07-21T22:45:53Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "diffHunk": "@@ -247,4 +257,39 @@ public void testUFOWithLogUpdate() throws NoSuchMethodException, IllegalAccessEx\n         assertThat(bSet.containsAll(aSet)).isTrue();\n         assertThat(aSet.containsAll(bSet)).isTrue();\n     }\n+\n+    public static void readLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) throws\n+            TrimmedException {\n+        LogReplicationConfig config = new LogReplicationConfig(streams, BATCH_SIZE, MAX_MSG_SIZE);\n+        StreamsLogEntryReader reader = new StreamsLogEntryReader(rt, config);\n+        reader.setGlobalBaseSnapshot(Address.NON_ADDRESS, Address.NON_ADDRESS);\n+\n+        LogReplicationEntry entry = null;\n+\n+        do {\n+            entry = reader.read(UUID.randomUUID());\n+\n+            if (entry != null) {\n+                msgQ.add(entry);\n+            }\n+\n+            System.out.println(\" msgQ size \" + msgQ.size());\n+\n+        } while (entry != null);\n+    }\n+\n+    public static void writeLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) {\n+        org.corfudb.infrastructure.logreplication.LogReplicationConfig config = new LogReplicationConfig(streams);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjY4OA==", "bodyText": "is this a test?  what does it test?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458432688", "createdAt": "2020-07-21T22:47:07Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "diffHunk": "@@ -247,4 +257,39 @@ public void testUFOWithLogUpdate() throws NoSuchMethodException, IllegalAccessEx\n         assertThat(bSet.containsAll(aSet)).isTrue();\n         assertThat(aSet.containsAll(bSet)).isTrue();\n     }\n+\n+    public static void readLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) throws\n+            TrimmedException {\n+        LogReplicationConfig config = new LogReplicationConfig(streams, BATCH_SIZE, MAX_MSG_SIZE);\n+        StreamsLogEntryReader reader = new StreamsLogEntryReader(rt, config);\n+        reader.setGlobalBaseSnapshot(Address.NON_ADDRESS, Address.NON_ADDRESS);\n+\n+        LogReplicationEntry entry = null;\n+\n+        do {\n+            entry = reader.read(UUID.randomUUID());\n+\n+            if (entry != null) {\n+                msgQ.add(entry);\n+            }\n+\n+            System.out.println(\" msgQ size \" + msgQ.size());\n+\n+        } while (entry != null);\n+    }\n+\n+    public static void writeLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) {\n+        org.corfudb.infrastructure.logreplication.LogReplicationConfig config = new LogReplicationConfig(streams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjI4OQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3MTI2NQ==", "bodyText": "Same as the above.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458471265", "createdAt": "2020-07-22T00:53:53Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "diffHunk": "@@ -247,4 +257,39 @@ public void testUFOWithLogUpdate() throws NoSuchMethodException, IllegalAccessEx\n         assertThat(bSet.containsAll(aSet)).isTrue();\n         assertThat(aSet.containsAll(bSet)).isTrue();\n     }\n+\n+    public static void readLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) throws\n+            TrimmedException {\n+        LogReplicationConfig config = new LogReplicationConfig(streams, BATCH_SIZE, MAX_MSG_SIZE);\n+        StreamsLogEntryReader reader = new StreamsLogEntryReader(rt, config);\n+        reader.setGlobalBaseSnapshot(Address.NON_ADDRESS, Address.NON_ADDRESS);\n+\n+        LogReplicationEntry entry = null;\n+\n+        do {\n+            entry = reader.read(UUID.randomUUID());\n+\n+            if (entry != null) {\n+                msgQ.add(entry);\n+            }\n+\n+            System.out.println(\" msgQ size \" + msgQ.size());\n+\n+        } while (entry != null);\n+    }\n+\n+    public static void writeLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) {\n+        org.corfudb.infrastructure.logreplication.LogReplicationConfig config = new LogReplicationConfig(streams);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjI4OQ=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc2NTU1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0Njo0NFrOG1MgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDo1MzoyOVrOG1O3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjU2NA==", "bodyText": "is this a test?  what does it test?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458432564", "createdAt": "2020-07-21T22:46:44Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "diffHunk": "@@ -247,4 +257,39 @@ public void testUFOWithLogUpdate() throws NoSuchMethodException, IllegalAccessEx\n         assertThat(bSet.containsAll(aSet)).isTrue();\n         assertThat(aSet.containsAll(bSet)).isTrue();\n     }\n+\n+    public static void readLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3MTE2OQ==", "bodyText": "This is a function used by this test. This test the reader/writer directly not through the transport layer.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458471169", "createdAt": "2020-07-22T00:53:29Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/ReplicationReaderWriterTest.java", "diffHunk": "@@ -247,4 +257,39 @@ public void testUFOWithLogUpdate() throws NoSuchMethodException, IllegalAccessEx\n         assertThat(bSet.containsAll(aSet)).isTrue();\n         assertThat(aSet.containsAll(bSet)).isTrue();\n     }\n+\n+    public static void readLogEntryMsgs(List<LogReplicationEntry> msgQ, Set<String> streams, CorfuRuntime rt) throws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMjU2NA=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc2ODkyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0ODowNFrOG1MiIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNTo1NFrOG18wvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzA1Ng==", "bodyText": "how was this number derived?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458433056", "createdAt": "2020-07-21T22:48:04Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -60,6 +60,8 @@\n     private static final int SHUTDOWN_RETRIES = 10;\n     private static final long SHUTDOWN_RETRY_WAIT = 500;\n \n+    private static final int MSG_SIZE = 131072;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3MTQ1OA==", "bodyText": "This is set for the test case. Not too big as then all entries will be sent over in one message.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458471458", "createdAt": "2020-07-22T00:54:39Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -60,6 +60,8 @@\n     private static final int SHUTDOWN_RETRIES = 10;\n     private static final long SHUTDOWN_RETRY_WAIT = 500;\n \n+    private static final int MSG_SIZE = 131072;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzA1Ng=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzIyOQ==", "bodyText": "Can we add this comment in the code so it is easy to follow?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459223229", "createdAt": "2020-07-23T05:35:54Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -60,6 +60,8 @@\n     private static final int SHUTDOWN_RETRIES = 10;\n     private static final long SHUTDOWN_RETRY_WAIT = 500;\n \n+    private static final int MSG_SIZE = 131072;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzA1Ng=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc3MjAwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0OToyNFrOG1Mj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozNzo0MFrOG2W4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzUxMA==", "bodyText": "remove", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458433510", "createdAt": "2020-07-21T22:49:24Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -556,7 +564,7 @@ public String getOptionsString() {\n          * @throws IOException\n          */\n         public Process runServer() throws IOException {\n-            final String serverConsoleLogPath = CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";\n+            final String serverConsoleLogPath = \"/Users/maxi/Projects/tmp/test.result\"; //CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MTEzNw==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459651137", "createdAt": "2020-07-23T18:37:40Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -556,7 +564,7 @@ public String getOptionsString() {\n          * @throws IOException\n          */\n         public Process runServer() throws IOException {\n-            final String serverConsoleLogPath = CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";\n+            final String serverConsoleLogPath = \"/Users/maxi/Projects/tmp/test.result\"; //CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzUxMA=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgwMDEyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzowMjowM1rOG1M00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMToxM1rOG2V-sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzg0Mw==", "bodyText": "what is the purpose of this method?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458437843", "createdAt": "2020-07-21T23:02:03Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -311,6 +324,16 @@ void verifyTables(HashMap<String, CorfuTable<Long, Long>> tables0, HashMap<Strin\n             }\n     }\n \n+    void waitData(HashMap<String, CorfuTable<Long, Long>> tables, HashMap<String, HashMap<Long, Long>> hashMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNjQwMA==", "bodyText": "Wait replication data reach at the standby cluster.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459636400", "createdAt": "2020-07-23T18:11:13Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -311,6 +324,16 @@ void verifyTables(HashMap<String, CorfuTable<Long, Long>> tables0, HashMap<Strin\n             }\n     }\n \n+    void waitData(HashMap<String, CorfuTable<Long, Long>> tables, HashMap<String, HashMap<Long, Long>> hashMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzNzg0Mw=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgyNzE1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNDo0MlrOG1NEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNDo0MlrOG1NEyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MTkyOA==", "bodyText": "numKeys -> NUM_KEYS", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458441928", "createdAt": "2020-07-21T23:14:42Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -1042,9 +1094,12 @@ public void testLogEntrySyncLargeTables() throws Exception {\n \n     /* ********************** AUXILIARY METHODS ********************** */\n \n+    private void generateTxCrossTables(Set<String> crossTableTransactions, boolean startCrossTx, int numKeys) throws Exception {\n+        generateTxCrossTables(crossTableTransactions, startCrossTx, numKeys, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgyNzg3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNDo1N1rOG1NFKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNDo1N1rOG1NFKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MjAyNQ==", "bodyText": "numKeys -> NUM_KEYS", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458442025", "createdAt": "2020-07-21T23:14:57Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -1042,9 +1094,12 @@ public void testLogEntrySyncLargeTables() throws Exception {\n \n     /* ********************** AUXILIARY METHODS ********************** */\n \n+    private void generateTxCrossTables(Set<String> crossTableTransactions, boolean startCrossTx, int numKeys) throws Exception {\n+        generateTxCrossTables(crossTableTransactions, startCrossTx, numKeys, 0);\n+    }\n \n-    // startCrossTx indicates if we start with a transaction across Tables\n-    private void testSnapshotSyncCrossTables(Set<String> crossTableTransactions, boolean startCrossTx) throws Exception {\n+        // startCrossTx indicates if we start with a transaction across Tables\n+    private void generateTxCrossTables(Set<String> crossTableTransactions, boolean startCrossTx, int numKeys, int startValue) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgzMzU2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNzo0MFrOG1NIiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxNzo0MFrOG1NIiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0Mjg4OA==", "bodyText": "numKeys -> NUM_KEYS", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458442888", "createdAt": "2020-07-21T23:17:40Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -1054,20 +1109,20 @@ private void testSnapshotSyncCrossTables(Set<String> crossTableTransactions, boo\n \n         // Write data across to tables specified in crossTableTransactions in transaction\n         if (startCrossTx) {\n-            generateTransactionsCrossTables(srcCorfuTables, crossTableTransactions, srcDataForVerification, NUM_KEYS, srcDataRuntime, 0);\n+            generateTransactionsCrossTables(srcCorfuTables, crossTableTransactions, srcDataForVerification, numKeys, srcDataRuntime, startValue);\n         }\n \n         // Write data to t0\n-        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t0), srcDataForVerification, NUM_KEYS, srcDataRuntime, NUM_KEYS);\n+        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t0), srcDataForVerification, numKeys, srcDataRuntime, numKeys);\n \n         // Write data to t1\n-        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t1), srcDataForVerification, NUM_KEYS, srcDataRuntime, NUM_KEYS);\n+        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t1), srcDataForVerification, numKeys, srcDataRuntime, numKeys);\n \n         // Write data to t2\n-        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t2), srcDataForVerification, NUM_KEYS, srcDataRuntime, 0);\n+        generateTransactionsCrossTables(srcCorfuTables, Collections.singleton(t2), srcDataForVerification, numKeys, srcDataRuntime, 0);\n \n         // Write data across to tables specified in crossTableTransactions in transaction\n-        generateTransactionsCrossTables(srcCorfuTables, crossTableTransactions, srcDataForVerification, NUM_KEYS, srcDataRuntime, NUM_KEYS*2);\n+        generateTransactionsCrossTables(srcCorfuTables, crossTableTransactions, srcDataForVerification, numKeys, srcDataRuntime, numKeys*2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDgzNjkzOnYy", "diffSide": "RIGHT", "path": "test/src/test/resources/logback-test.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoxOToxMVrOG1NKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMjo1MlrOG2WCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MzM3OA==", "bodyText": "was this intentional?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r458443378", "createdAt": "2020-07-21T23:19:11Z", "author": {"login": "pankti-m"}, "path": "test/src/test/resources/logback-test.xml", "diffHunk": "@@ -43,9 +43,9 @@\n         <!--<appender-ref ref=\"MetricsRollingFile\" />-->\n     </logger>\n \n-    <!--<root level=\"DEBUG\">-->\n-        <!--&lt;!&ndash;<appender-ref ref=\"FILE\" />&ndash;&gt;-->\n-        <!--<appender-ref ref=\"STDOUT\" />-->\n-        <!--&lt;!&ndash;<appender-ref ref=\"MetricsRollingFile\" />&ndash;&gt;-->\n-    <!--</root>-->\n+    <root level=\"INFO\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzM0MQ==", "bodyText": "Change back.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459637341", "createdAt": "2020-07-23T18:12:52Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/resources/logback-test.xml", "diffHunk": "@@ -43,9 +43,9 @@\n         <!--<appender-ref ref=\"MetricsRollingFile\" />-->\n     </logger>\n \n-    <!--<root level=\"DEBUG\">-->\n-        <!--&lt;!&ndash;<appender-ref ref=\"FILE\" />&ndash;&gt;-->\n-        <!--<appender-ref ref=\"STDOUT\" />-->\n-        <!--&lt;!&ndash;<appender-ref ref=\"MetricsRollingFile\" />&ndash;&gt;-->\n-    <!--</root>-->\n+    <root level=\"INFO\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0MzM3OA=="}, "originalCommit": {"oid": "15327c2ef047d773ad33fcbbde2424d3fdbac9ee"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQzNzM5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1ODoyOVrOG15I5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMzo1NFrOG2WEmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2Mzg3OA==", "bodyText": "Thinking on the readers. I'm not sure the right words, because even I was confused the first time I reviewed cause I understood that if it is set to 5 we send 5 messages embedded in a single message (a batch of 5). But, we use it is to send 5 messages and yield the thread, but 5 messages and not 1 fat one. Maybe it's more accurate to say: \"Get the max number of messages sent per Log Replication Runtime in between FSM worker thread yield\" (IDK just giving ideas, something in that line)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459163878", "createdAt": "2020-07-23T00:58:29Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "diffHunk": "@@ -216,16 +219,30 @@ public String getPluginConfigFilePath() {\n         return pluginConfigFilePath == null ? PLUGIN_CONFIG_FILE_PATH : pluginConfigFilePath;\n     }\n \n-    public int getSnapshotSyncBatchSize() {\n-        Integer snapshotSyncBatchSize = getServerConfig(Integer.class, \"--snapshot-batch\");\n-        return snapshotSyncBatchSize == null ? SnapshotSender.DEFAULT_SNAPSHOT_BATCH_SIZE : snapshotSyncBatchSize;\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzkxMg==", "bodyText": "You gave the word earlier. If you want to change, you can change it in your PR.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459637912", "createdAt": "2020-07-23T18:13:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "diffHunk": "@@ -216,16 +219,30 @@ public String getPluginConfigFilePath() {\n         return pluginConfigFilePath == null ? PLUGIN_CONFIG_FILE_PATH : pluginConfigFilePath;\n     }\n \n-    public int getSnapshotSyncBatchSize() {\n-        Integer snapshotSyncBatchSize = getServerConfig(Integer.class, \"--snapshot-batch\");\n-        return snapshotSyncBatchSize == null ? SnapshotSender.DEFAULT_SNAPSHOT_BATCH_SIZE : snapshotSyncBatchSize;\n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2Mzg3OA=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQzODUwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1OToxMVrOG15Jjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMDo1OToxMVrOG15Jjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NDA0Nw==", "bodyText": "Can we shorten it? Since it already has \"LogReplication\" from LogReplicationConfig. --> maybe MAX_DATA_MSG_SIZE", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459164047", "createdAt": "2020-07-23T00:59:11Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ServerContext.java", "diffHunk": "@@ -44,6 +43,8 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static org.corfudb.infrastructure.logreplication.LogReplicationConfig.MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ0MzYxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowMjowOFrOG15MXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTowMjowOFrOG15MXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NDc2NQ==", "bodyText": "message -> messages", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459164765", "createdAt": "2020-07-23T01:02:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "diffHunk": "@@ -13,15 +13,40 @@\n @Data\n public class LogReplicationConfig {\n \n+    // Log Replication message timeout time in milliseconds.\n+    public static final int DEFAULT_TIMEOUT_MS = 5000;\n+\n+    // Log Replication default max number of message generated at the active cluster for each batch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ4NjkxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyNzoxMVrOG15kRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo0Mjo1OFrOG2ZAGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MDg4Ng==", "bodyText": "We can simplify with:\nthis(streamsToReplicate, DEFAULT_MAX_NUM_MSG_PER_BATCH, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459170886", "createdAt": "2020-07-23T01:27:11Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "diffHunk": "@@ -30,16 +55,21 @@\n      */\n     public LogReplicationConfig(Set<String> streamsToReplicate) {\n         this.streamsToReplicate = streamsToReplicate;\n+        this.maxNumMsgPerBatch = DEFAULT_MAX_NUM_MSG_PER_BATCH;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1MzgxMg==", "bodyText": "It is harder for later code review. It is easier logic to init all things together in one place instead of jumping code around for simple logic.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459653812", "createdAt": "2020-07-23T18:42:25Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "diffHunk": "@@ -30,16 +55,21 @@\n      */\n     public LogReplicationConfig(Set<String> streamsToReplicate) {\n         this.streamsToReplicate = streamsToReplicate;\n+        this.maxNumMsgPerBatch = DEFAULT_MAX_NUM_MSG_PER_BATCH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MDg4Ng=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY4NTkxNQ==", "bodyText": "it is actually a good practice, to avoid code duplication, and having all inits in one single place or when a change comes, you'll have to change in several places (prone to errors):\nhttps://stackoverflow.com/questions/7577627/purpose-of-constructor-chaining", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459685915", "createdAt": "2020-07-23T19:42:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/LogReplicationConfig.java", "diffHunk": "@@ -30,16 +55,21 @@\n      */\n     public LogReplicationConfig(Set<String> streamsToReplicate) {\n         this.streamsToReplicate = streamsToReplicate;\n+        this.maxNumMsgPerBatch = DEFAULT_MAX_NUM_MSG_PER_BATCH;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MDg4Ng=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ4ODUyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyODozNVrOG15lVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNTo1OFrOG2YJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MTE1Ng==", "bodyText": "What is this buffer?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459171156", "createdAt": "2020-07-23T01:28:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "diffHunk": "@@ -45,7 +45,7 @@ private DefaultClusterConfig() {\n     private static String standbyLogReplicationPort = \"9020\";\n \n     @Getter\n-    private static int logSenderBufferSize = 20;\n+    private static int logSenderBufferSize = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTkzMw==", "bodyText": "At both the sender and receiver we have buffers for messages. As the message is big, the standard double buffering may be enough.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459671933", "createdAt": "2020-07-23T19:15:58Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterConfig.java", "diffHunk": "@@ -45,7 +45,7 @@ private DefaultClusterConfig() {\n     private static String standbyLogReplicationPort = \"9020\";\n \n     @Getter\n-    private static int logSenderBufferSize = 20;\n+    private static int logSenderBufferSize = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MTE1Ng=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ4OTY3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyOToxOVrOG15l9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyOToxOVrOG15l9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MTMxOA==", "bodyText": "Can we add a comment. Not sure what this means.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459171318", "createdAt": "2020-07-23T01:29:19Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/TestLogEntryReader.java", "diffHunk": "@@ -26,4 +26,9 @@ public void reset(long lastSentBaseSnapshotTimestamp, long lastAckedTimestamp) {\n     public void setTopologyConfigId(long siteConfigID) {\n \n     }\n+\n+    @Override\n+    public boolean hasNoiseData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTQ5MzkzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTozMjowNlrOG15oWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMTozMjowNlrOG15oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE3MTkyOQ==", "bodyText": "Shouldn't we remove metadata.getTimestamp?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459171929", "createdAt": "2020-07-23T01:32:06Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+        /**\n+         *  For each message in the  buffer, if its timestamp is smaller than last processed log entry's timestamp,\n+         *  skip processing and remove it from buffer.\n+         *  If its preTs and currentTs is overlapping with the last processed log entry's timestamp, process it.\n+         */\n+        for (LogReplicationEntry entry : buffer.values()) {\n+            LogReplicationEntryMetadata metadata = entry.getMetadata();\n+            if (metadata.getTimestamp() < lastProcessedSeq) {\n+                //remove it\n+                buffer.remove(metadata.getPreviousTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU2MDYxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoxNjo0NlrOG16OAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDozOTozM1rOG2awvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MTU2OQ==", "bodyText": "remove lastProcessedSeq or metadata.getTimestamp? as lastProcessedSeq is the one that has already been processed and we just applied entry.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459181569", "createdAt": "2020-07-23T02:16:46Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+        /**\n+         *  For each message in the  buffer, if its timestamp is smaller than last processed log entry's timestamp,\n+         *  skip processing and remove it from buffer.\n+         *  If its preTs and currentTs is overlapping with the last processed log entry's timestamp, process it.\n+         */\n+        for (LogReplicationEntry entry : buffer.values()) {\n+            LogReplicationEntryMetadata metadata = entry.getMetadata();\n+            if (metadata.getTimestamp() < lastProcessedSeq) {\n+                //remove it\n+                buffer.remove(metadata.getPreviousTimestamp());\n+            } else if (metadata.getPreviousTimestamp() <= lastProcessedSeq && metadata.getTimestamp() > lastProcessedSeq) {\n+                sinkManager.processMessage(entry);\n+                ackCnt++;\n+                buffer.remove(lastProcessedSeq);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNDc0OA==", "bodyText": "For each message, it has the previous time stamp and the currentTimestamp( the max ts of all transactions in this message). So if all transactions in one message have been processed, we will remove it. If it has transactions that haven't been processed, we will still buffer it and process it later.\nThis happens because the possible leadership change and the two leaders at the active cluster may packaging the messages differently as the polling transaction log speed  are different at the different nodes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459714748", "createdAt": "2020-07-23T20:39:33Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+        /**\n+         *  For each message in the  buffer, if its timestamp is smaller than last processed log entry's timestamp,\n+         *  skip processing and remove it from buffer.\n+         *  If its preTs and currentTs is overlapping with the last processed log entry's timestamp, process it.\n+         */\n+        for (LogReplicationEntry entry : buffer.values()) {\n+            LogReplicationEntryMetadata metadata = entry.getMetadata();\n+            if (metadata.getTimestamp() < lastProcessedSeq) {\n+                //remove it\n+                buffer.remove(metadata.getPreviousTimestamp());\n+            } else if (metadata.getPreviousTimestamp() <= lastProcessedSeq && metadata.getTimestamp() > lastProcessedSeq) {\n+                sinkManager.processMessage(entry);\n+                ackCnt++;\n+                buffer.remove(lastProcessedSeq);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MTU2OQ=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU2NDI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoxOTowMVrOG16QBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoxOTowMVrOG16QBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MjA4Ng==", "bodyText": "This comment might be redundant.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459182086", "createdAt": "2020-07-23T02:19:01Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+        /**\n+         *  For each message in the  buffer, if its timestamp is smaller than last processed log entry's timestamp,\n+         *  skip processing and remove it from buffer.\n+         *  If its preTs and currentTs is overlapping with the last processed log entry's timestamp, process it.\n+         */\n+        for (LogReplicationEntry entry : buffer.values()) {\n+            LogReplicationEntryMetadata metadata = entry.getMetadata();\n+            if (metadata.getTimestamp() < lastProcessedSeq) {\n+                //remove it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU3MDUzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyMjoyOFrOG16TZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyMjoyOFrOG16TZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4Mjk1MQ==", "bodyText": "<= , right? cause if the same last processed entry was resent we can remove or we'll have a leak.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459182951", "createdAt": "2020-07-23T02:22:28Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {\n+        /**\n+         *  For each message in the  buffer, if its timestamp is smaller than last processed log entry's timestamp,\n+         *  skip processing and remove it from buffer.\n+         *  If its preTs and currentTs is overlapping with the last processed log entry's timestamp, process it.\n+         */\n+        for (LogReplicationEntry entry : buffer.values()) {\n+            LogReplicationEntryMetadata metadata = entry.getMetadata();\n+            if (metadata.getTimestamp() < lastProcessedSeq) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTU3NDg1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjoyNToyNVrOG16Vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDo1NToyNlrOG2bPkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MzUzOQ==", "bodyText": "What happens if there are remaining messages in the queue which are skipped because they were not the subsequent sequence numbers and no further messages are received? would we ever apply them? Let me illustrate it. For instance:\nUpdates to Stream A: 0, 1, 2, 5, 7, 8\nlastProcessedSeqNum = 2\nLet's say the buffer looks like this (as some messages were resent and they are out of order):\n0, 2, 1, 0, 7, 8, 5\nWe ignore 0, 2, 1, 0... We leave 7 in the buffer but do not process, same with 8... Then we process 5. But now 7 and 8 are left in the queue. And if no more data is received for an hour, 7 and 8 won't be applied, as this is kicked off as part of receiving data.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459183539", "createdAt": "2020-07-23T02:25:25Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4NTk5Mg==", "bodyText": "mmm I kept looking and I see we have a processBuffer in SinkBufferManager, which would take care of out of order messages, but one question, in that method we get the lastProcessedSeqNum, isn't that the one that we already applied, and that should not be available anymore in the buffer? Thus, we are not really processing the unordered until a new message is received?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459185992", "createdAt": "2020-07-23T02:37:24Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MzUzOQ=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcxNjk5Mw==", "bodyText": "In your case, when it receives 5, it will process 5 and right after process it:\n\nit will update the lastSeqNum\nit will look at the buffer to see if there are any messages are in order to be processed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459716993", "createdAt": "2020-07-23T20:43:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MzUzOQ=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyMjY0Mg==", "bodyText": "the map is indexed according to the preTs/preSeq number.\nFor your case the map:\nafter process message 2, the lastTs = 2\nfor message 7, the preTs is 5\nfor message 8, the preTs is 7\nfor message 5, the preTs is 2: we will process it and update the lastTs as 5, use 5 as the index to lookup and find message 7.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459722642", "createdAt": "2020-07-23T20:55:26Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogEntrySinkBufferManager.java", "diffHunk": "@@ -74,4 +75,24 @@ public boolean verifyMessageType(LogReplicationEntry entry) {\n \n         return true;\n     }\n+\n+    public void processBuffer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4MzUzOQ=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTYxMTc4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SinkBufferManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MToxNVrOG16qZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1MToxNVrOG16qZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE4ODgzNw==", "bodyText": "haven't -> haven't been applied", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459188837", "createdAt": "2020-07-23T02:51:15Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SinkBufferManager.java", "diffHunk": "@@ -141,7 +141,8 @@ public LogReplicationEntry processMsgAndBuffer(LogReplicationEntry dataMessage)\n         long preTs = getPreSeq(dataMessage);\n         long currentTs = getCurrentSeq(dataMessage);\n \n-        if (preTs == lastProcessedSeq) {\n+        // This message contains entries that haven't applied yet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY0MjE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SinkBufferManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxMTozMVrOG166pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoxMTozMVrOG166pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5Mjk5Nw==", "bodyText": "Can this happen because a LogEntryMessage might have numerous delta's inside? and it picks the min of all as the previous and the max of all as the timestamp?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459192997", "createdAt": "2020-07-23T03:11:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SinkBufferManager.java", "diffHunk": "@@ -141,7 +141,8 @@ public LogReplicationEntry processMsgAndBuffer(LogReplicationEntry dataMessage)\n         long preTs = getPreSeq(dataMessage);\n         long currentTs = getCurrentSeq(dataMessage);\n \n-        if (preTs == lastProcessedSeq) {\n+        // This message contains entries that haven't applied yet\n+        if (preTs <= lastProcessedSeq && currentTs > lastProcessedSeq) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY2NDY1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/LogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoyNjo0NVrOG17G7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzoyNjo0NVrOG17G7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NjE0Mw==", "bodyText": "Can you please add a description to this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459196143", "createdAt": "2020-07-23T03:26:45Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/LogEntryReader.java", "diffHunk": "@@ -23,4 +23,6 @@\n     void reset(long lastSentBaseSnapshotTimestamp, long lastAckedTimestamp);\n \n     void setTopologyConfigId(long topologyConfigId);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY3MTMwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/ReplicationReaderWriterWithUFOIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzozMToxNlrOG17Krg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzozMToxNlrOG17Krg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NzEwMg==", "bodyText": "This class can be removed right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459197102", "createdAt": "2020-07-23T03:31:16Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/ReplicationReaderWriterWithUFOIT.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package org.corfudb.integration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY3MjAwOnYy", "diffSide": "RIGHT", "path": "test/src/test/resources/logback-test.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzozMTo0MlrOG17LDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzozMTo0MlrOG17LDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5NzE5Nw==", "bodyText": "Please don't push this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459197197", "createdAt": "2020-07-23T03:31:42Z", "author": {"login": "annym"}, "path": "test/src/test/resources/logback-test.xml", "diffHunk": "@@ -43,6 +43,12 @@\n         <!--<appender-ref ref=\"MetricsRollingFile\" />-->\n     </logger>\n \n+    <root level=\"INFO\">\n+    <appender-ref ref=\"FILE\" />\n+    <appender-ref ref=\"STDOUT\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY4NTI2OnYy", "diffSide": "LEFT", "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/LogReplicationFSMTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0MDo0OFrOG17SHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTowMjoxM1rOG2bdYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5OTAwNQ==", "bodyText": "curious why did we remove this assertion? it should still hold valid.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459199005", "createdAt": "2020-07-23T03:40:48Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/LogReplicationFSMTest.java", "diffHunk": "@@ -349,8 +349,6 @@ public void testSnapshotSyncStreamImplementation() throws Exception {\n \n         Queue<LogReplicationEntry> listenerQueue = ((TestDataSender) dataSender).getEntryQueue();\n \n-        assertThat(LARGE_NUM_ENTRIES/ StreamsSnapshotReader.MAX_NUM_SMR_ENTRY).isLessThanOrEqualTo(listenerQueue.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcyNjE3Nw==", "bodyText": "Now we are using the size not the number of entries.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459726177", "createdAt": "2020-07-23T21:02:13Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/infrastructure/logreplication/LogReplicationFSMTest.java", "diffHunk": "@@ -349,8 +349,6 @@ public void testSnapshotSyncStreamImplementation() throws Exception {\n \n         Queue<LogReplicationEntry> listenerQueue = ((TestDataSender) dataSender).getEntryQueue();\n \n-        assertThat(LARGE_NUM_ENTRIES/ StreamsSnapshotReader.MAX_NUM_SMR_ENTRY).isLessThanOrEqualTo(listenerQueue.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5OTAwNQ=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY4NTczOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0MToxNVrOG17SXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0MToxNVrOG17SXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5OTA2OQ==", "bodyText": "we can remove this commented code.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459199069", "createdAt": "2020-07-23T03:41:15Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "diffHunk": "@@ -135,6 +145,41 @@ void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n             b.skipBytes(len);\n         }\n         SMRArguments = arguments;\n+        serializedSize = b.readerIndex() - readIndex + 1;\n+    }\n+\n+\n+    /**\n+     * Calculate an Opaque SMR entry's serialized size.\n+     * @throws IllegalAccessException\n+     */\n+    private int calculateOpaqueSMREntrySerializedSize() {\n+        if (!opaque) {\n+            log.error(\"This operation only supported for an opaque SMR entry\");\n+            return 0;\n+        }\n+\n+        int size = 0;\n+\n+        for (Object smrArg : SMRArguments) {\n+            size += ((byte[])smrArg).length;\n+        }\n+\n+        size += (SMRMethod.length() * Character.BYTES);\n+        size += Integer.BYTES;\n+\n+        return size;\n+    }\n+\n+    /**\n+     * The serialized size of an opaque SMR entry.\n+     * @return\n+     */\n+    public synchronized Integer getSerializedSize() {\n+        //if (serializedSize == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTY5NTQ3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/LogEntrySender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0ODozMVrOG17Xvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo0ODozMVrOG17Xvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMDQ0Ng==", "bodyText": "Shouldn't this be LogEntryReader as it could have any implementation? like the test one we use in some test.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459200446", "createdAt": "2020-07-23T03:48:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/LogEntrySender.java", "diffHunk": "@@ -32,7 +33,7 @@\n     /*\n      * Implementation of Log Entry Reader. Default implementation reads at the stream layer.\n      */\n-    private LogEntryReader logEntryReader;\n+    private StreamsLogEntryReader logEntryReader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTcwNjM1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/SnapshotSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo1NjowNFrOG17dqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzo1NjowNFrOG17dqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMTk2Mw==", "bodyText": "A bit confusing, maybe -> Max number of messages sent in burst during a snapshot cycle. (or something in that line)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459201963", "createdAt": "2020-07-23T03:56:04Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/SnapshotSender.java", "diffHunk": "@@ -39,15 +42,14 @@\n @Slf4j\n public class SnapshotSender {\n \n-    public static int DEFAULT_SNAPSHOT_BATCH_SIZE = 100;\n-    public static final int DEFAULT_TIMEOUT = 5000;\n-\n     private CorfuRuntime runtime;\n     private SnapshotReader snapshotReader;\n     private SenderBufferManager dataSenderBufferManager;\n     private LogReplicationFSM fsm;\n     private long baseSnapshotTimestamp;\n-    private final int snapshotSyncBatchSize;\n+\n+    // The max number of message can be sent over per cycle run during snapshot full sync state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTcxODI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNDo0OFrOG17kdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNDo0OFrOG17kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMzcwMg==", "bodyText": "entry is never used.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459203702", "createdAt": "2020-07-23T04:04:48Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTcxOTI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNToxNVrOG17k-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNToxNVrOG17k-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMzgzNQ==", "bodyText": "please add access modifier, private. As this is always a static analysis error.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459203835", "createdAt": "2020-07-23T04:05:15Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTcxOTY5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNTozOFrOG17lOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDowNTozOFrOG17lOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwMzg5Ng==", "bodyText": "private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459203896", "createdAt": "2020-07-23T04:05:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -32,45 +34,58 @@\n     private Set<UUID> streamUUIDs;\n \n     // the opaquestream wrapper for the transaction stream.\n-    private TxOpaqueStream txStream;\n-   \n+    private TxOpaqueStream txOpaqueStream;\n \n     // the base snapshot the log entry logreader starts to poll transaction logs\n     private long globalBaseSnapshot;\n+\n     // timestamp of the transaction log that is the previous message\n     private long preMsgTs;\n+\n     // the timestamp of the transaction log that is the current message\n     private long currentMsgTs;\n+\n     // the sequence number of the message based on the globalBaseSnapshot\n     private long sequence;\n \n     private long topologyConfigId;\n \n+    private final int maxDataSizePerMsg;\n+\n+    private OpaqueEntry lastOpaqueEntry = null;\n+\n+    private boolean hasNoiseData = false;\n+\n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n+\n         Set<String> streams = config.getStreamsToReplicate();\n+\n         streamUUIDs = new HashSet<>();\n         for (String s : streams) {\n             streamUUIDs.add(CorfuRuntime.getStreamID(s));\n         }\n \n         //create an opaque stream for transaction stream\n-        txStream = new TxOpaqueStream(rt);\n+        txOpaqueStream = new TxOpaqueStream(rt);\n     }\n \n-    LogReplicationEntry generateMessage(OpaqueEntry entry, UUID logEntryRequestId) {\n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, entry);\n-        currentMsgTs = entry.getVersion();\n+    LogReplicationEntry generateMessageWithOpaqueEntryList(List<OpaqueEntry> opaqueEntryList, UUID logEntryRequestId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczMDU5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxMzo0M1rOG17rLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxMzo0M1rOG17rLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNTQyMg==", "bodyText": "private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459205422", "createdAt": "2020-07-23T04:13:43Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -32,45 +34,58 @@\n     private Set<UUID> streamUUIDs;\n \n     // the opaquestream wrapper for the transaction stream.\n-    private TxOpaqueStream txStream;\n-   \n+    private TxOpaqueStream txOpaqueStream;\n \n     // the base snapshot the log entry logreader starts to poll transaction logs\n     private long globalBaseSnapshot;\n+\n     // timestamp of the transaction log that is the previous message\n     private long preMsgTs;\n+\n     // the timestamp of the transaction log that is the current message\n     private long currentMsgTs;\n+\n     // the sequence number of the message based on the globalBaseSnapshot\n     private long sequence;\n \n     private long topologyConfigId;\n \n+    private final int maxDataSizePerMsg;\n+\n+    private OpaqueEntry lastOpaqueEntry = null;\n+\n+    private boolean hasNoiseData = false;\n+\n     public StreamsLogEntryReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n+\n         Set<String> streams = config.getStreamsToReplicate();\n+\n         streamUUIDs = new HashSet<>();\n         for (String s : streams) {\n             streamUUIDs.add(CorfuRuntime.getStreamID(s));\n         }\n \n         //create an opaque stream for transaction stream\n-        txStream = new TxOpaqueStream(rt);\n+        txOpaqueStream = new TxOpaqueStream(rt);\n     }\n \n-    LogReplicationEntry generateMessage(OpaqueEntry entry, UUID logEntryRequestId) {\n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, entry);\n-        currentMsgTs = entry.getVersion();\n+    LogReplicationEntry generateMessageWithOpaqueEntryList(List<OpaqueEntry> opaqueEntryList, UUID logEntryRequestId) {\n+        // Set the last timestamp as the max timestamp\n+        currentMsgTs = opaqueEntryList.get(opaqueEntryList.size() - 1).getVersion();\n         LogReplicationEntry txMessage = new LogReplicationEntry(MSG_TYPE, topologyConfigId, logEntryRequestId,\n-                currentMsgTs, preMsgTs, globalBaseSnapshot, sequence, buf.array());\n+                currentMsgTs, preMsgTs, globalBaseSnapshot, sequence, opaqueEntryList);\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        return  txMessage;\n+        log.trace(\"Generate a log entry message {} with {} transactions \", txMessage.getMetadata(), opaqueEntryList.size());\n+        return txMessage;\n     }\n \n-    boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n+\n+    // Check if it has the correct streams.\n+    boolean shouldProcess(OpaqueEntry entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTczMjc0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNToxM1rOG17sYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxNToxM1rOG17sYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNTcyOA==", "bodyText": "maybe rename to checkValidSize?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459205728", "createdAt": "2020-07-23T04:15:13Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc0MDE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDoxOTo1NlrOG17wag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMTozMlrOG23SyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc2Mg==", "bodyText": "No need to break as it is already in the while condition, or if we want to break before the while loop remove from the loop.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459206762", "createdAt": "2020-07-23T04:19:56Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjkwOQ==", "bodyText": "I think it's better in the while loop.\nwhile(currentMsgSize < maxDataSizePerMsg && !hasNoiseData && txOpaqueStream.hasNext()) ... it's ok if we read a next (when there is no, as that method returns null if !hasNext)\nBut if you want to take it out of the while and leave it here, we might simplify for readiness:\nif (hasNoiseData || !txOpaqueStream.hasNext()) {\nbreak;\n}", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459206909", "createdAt": "2020-07-23T04:20:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc2Mg=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjIxNw==", "bodyText": "Consider that the max_msg_size is 100 and there are only two entrys. entry0 with size  90, entry1 with size 20\nafter processing the first entry, the while is correct, then we set  lastEntry = entry2.\nbut entry2 could not go with the first msg.\nwhile constructing the second message, if there are no new entrys, the hasNext gives false, but we need to add entry2 first. So the logic is check the lastEntry first. then calling the next.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460182217", "createdAt": "2020-07-24T17:11:32Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIwNjc2Mg=="}, "originalCommit": {"oid": "49dc824b6fca4e7bc9c5639308f6db6440016cc1"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc5NDM3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1Njo1NFrOG18OPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzozMjowN1rOG237Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDM5OQ==", "bodyText": "why do we set hasNoiseData to true, the fact that the size of the entry is greater than the boundary does not have implications on this, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459214399", "createdAt": "2020-07-23T04:56:54Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5MjYxNA==", "bodyText": "Changed it.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460192614", "createdAt": "2020-07-24T17:32:07Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDM5OQ=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc5NjczOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODozOVrOG18Pew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMjozMzo1M1rOG2hiIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDcxNQ==", "bodyText": "this is repeated. Same statement as before.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459214715", "createdAt": "2020-07-23T04:58:39Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNTY5OA==", "bodyText": "I think this was accidentally copied. Same as in L.113.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459825698", "createdAt": "2020-07-24T02:33:53Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDcxNQ=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc5ODQwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1OTozNFrOG18QaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1OTozNFrOG18QaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDk1Mw==", "bodyText": "simplify:\nreturn !(currentEntrySize + CurrentMsgSize > maxDataSizePerMsg);", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459214953", "createdAt": "2020-07-23T04:59:34Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgwMTgyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowMTo1OFrOG18SQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo1Nzo1OFrOG24tHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTQyNg==", "bodyText": "what happens if there is noisy data but the list is not empty? we should still abort, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459215426", "createdAt": "2020-07-23T05:01:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {\n+                    break;\n                 }\n-                LogReplicationEntry txMessage = generateMessage(opaqueEntry, logEntryRequestId);\n-                return txMessage;\n+\n+                if (!txOpaqueStream.hasNext()) {\n+                    break;\n+                }\n+\n+                lastOpaqueEntry = txOpaqueStream.next();\n             }\n+\n+            log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEnry size {}\",\n+                    currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null? 0 : currentEntrySize);\n+\n+            if (opaqueEntryList.size() == 0 && hasNoiseData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyNTk1MQ==", "bodyText": "??", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459825951", "createdAt": "2020-07-24T02:35:11Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {\n+                    break;\n                 }\n-                LogReplicationEntry txMessage = generateMessage(opaqueEntry, logEntryRequestId);\n-                return txMessage;\n+\n+                if (!txOpaqueStream.hasNext()) {\n+                    break;\n+                }\n+\n+                lastOpaqueEntry = txOpaqueStream.next();\n             }\n+\n+            log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEnry size {}\",\n+                    currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null? 0 : currentEntrySize);\n+\n+            if (opaqueEntryList.size() == 0 && hasNoiseData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTQyNg=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3NzY4OA==", "bodyText": "For example, we have log0, log1, log2, log3. All logs from 0 to 2 are good, but log3 is bad. Should we transfer log0, log1, log2, first, then abort when process log3?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460177688", "createdAt": "2020-07-24T17:02:13Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {\n+                    break;\n                 }\n-                LogReplicationEntry txMessage = generateMessage(opaqueEntry, logEntryRequestId);\n-                return txMessage;\n+\n+                if (!txOpaqueStream.hasNext()) {\n+                    break;\n+                }\n+\n+                lastOpaqueEntry = txOpaqueStream.next();\n             }\n+\n+            log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEnry size {}\",\n+                    currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null? 0 : currentEntrySize);\n+\n+            if (opaqueEntryList.size() == 0 && hasNoiseData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTQyNg=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIwNTM0MA==", "bodyText": "Well from early discussions with Medhavi my understanding is that it's just an invalid state, so we can directly abort without processing anything.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460205340", "createdAt": "2020-07-24T17:57:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {\n+                    break;\n                 }\n-                LogReplicationEntry txMessage = generateMessage(opaqueEntry, logEntryRequestId);\n-                return txMessage;\n+\n+                if (!txOpaqueStream.hasNext()) {\n+                    break;\n+                }\n+\n+                lastOpaqueEntry = txOpaqueStream.next();\n             }\n+\n+            log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEnry size {}\",\n+                    currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null? 0 : currentEntrySize);\n+\n+            if (opaqueEntryList.size() == 0 && hasNoiseData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTQyNg=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgwMzkyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowMzowNlrOG18TfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowMzowNlrOG18TfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTc0MQ==", "bodyText": "It's cleaner if generateMessageWithOpaqueEntryList accepts the empty list and returns a null. Less if conditions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459215741", "createdAt": "2020-07-23T05:03:06Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -84,39 +99,100 @@ boolean shouldProcess(OpaqueEntry entry) throws ReplicationReaderException {\n             return false;\n         }\n \n-        //If the entry's stream set contains both interested streams and other streams, it is not\n-        //the expected behavior\n+        // If the entry's stream set contains both interested streams and other streams, it is not\n+        // the expected behavior\n         log.error(\"There are noisy streams {} in the entry, expected streams set {}\",\n-                    entry.getEntries().keySet(), streamUUIDs);\n+                entry.getEntries().keySet(), streamUUIDs);\n+\n+        hasNoiseData = true;\n+        return false;\n+    }\n+\n+    boolean checkSizeOK(OpaqueEntry entry, int currentMsgSize, int currentEntrySize) {\n+        // For interested entry, if its size is too big we should skip and report error\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\",\n+                    currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+            hasNoiseData = true;\n+            return false;\n+        }\n+\n+        if (currentEntrySize > maxDataSizePerMsg) {\n+            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                    currentEntrySize, maxDataSizePerMsg);\n+        }\n \n-        throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+        // Skip append this entry, will process it for the next message;\n+        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg) {\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     public void setGlobalBaseSnapshot(long snapshot, long ackTimestamp) {\n         globalBaseSnapshot = snapshot;\n         preMsgTs = Math.max(snapshot, ackTimestamp);\n         log.info(\"snapshot {} ackTimestamp {} preMsgTs {} seek {}\", snapshot, ackTimestamp, preMsgTs, preMsgTs + 1);\n-        txStream.seek(preMsgTs + 1);\n+        txOpaqueStream.seek(preMsgTs + 1);\n         sequence = 0;\n     }\n \n+\n     @Override\n     public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException, IllegalTransactionStreamsException {\n+        List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n+        int currentEntrySize = 0;\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (txStream.hasNext()) {\n-                OpaqueEntry opaqueEntry = txStream.next();\n-                if (!shouldProcess(opaqueEntry)) {\n-                    continue;\n+            while (currentMsgSize < maxDataSizePerMsg && !hasNoiseData) {\n+\n+                if (lastOpaqueEntry != null && shouldProcess(lastOpaqueEntry)) {\n+\n+                    // If the currentEntry is too big to append the current message, will skip it and\n+                    // append it to the next message as the first entry.\n+                    currentEntrySize = ReaderUtility.calculateOpaqueEntrySize(lastOpaqueEntry);\n+\n+                    if (!checkSizeOK(lastOpaqueEntry, currentMsgSize, currentEntrySize)) {\n+                        break;\n+                    }\n+\n+                    // Add the lastOpaqueEntry to the current message.\n+                    opaqueEntryList.add(lastOpaqueEntry);\n+                    currentMsgSize += currentEntrySize;\n+                    lastOpaqueEntry = null;\n+                }\n+\n+                if (hasNoiseData) {\n+                    break;\n                 }\n-                LogReplicationEntry txMessage = generateMessage(opaqueEntry, logEntryRequestId);\n-                return txMessage;\n+\n+                if (!txOpaqueStream.hasNext()) {\n+                    break;\n+                }\n+\n+                lastOpaqueEntry = txOpaqueStream.next();\n             }\n+\n+            log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEnry size {}\",\n+                    currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null? 0 : currentEntrySize);\n+\n+            if (opaqueEntryList.size() == 0 && hasNoiseData) {\n+                throw new IllegalTransactionStreamsException(\"There are noisy streams in the transaction log entry\");\n+            }\n+\n+            if (opaqueEntryList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgwNTYyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowNDoyNFrOG18Ujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowNDoyNFrOG18Ujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNjAxNA==", "bodyText": "can this logger be removed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459216014", "createdAt": "2020-07-23T05:04:24Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgxMzM1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowOTozMVrOG18Y6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowOTozMVrOG18Y6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzEyOA==", "bodyText": "L 151 -157 can be simplified:\nif (!stream.iterator.hasNext()) {\nbreak;\n}\nlastEntry = (OpaqueEntry) stream.iterator.next();", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459217128", "createdAt": "2020-07-23T05:09:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = ReaderUtility.calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+                            throw new IllegalSnapshotEntrySizeException(\" The snapshot entry is bigger than the system supported\");\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            observeBiggerMsg.setValue(observeBiggerMsg.getValue()+1);\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                                    currentEntrySize, maxDataSizePerMsg);\n+                        }\n+\n+                        // Skip append this entry in this message. Will process it first at the next round.\n+                        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg && currentMsgSize != 0) {\n+                            break;\n+                        }\n+\n+                        smrList.addAll(smrEntries);\n+                        currentMsgSize += currentEntrySize;\n+                        stream.maxVersion = Math.max(stream.maxVersion, lastEntry.getVersion());\n+                    }\n+                    lastEntry = null;\n+                }\n+\n+                if (stream.iterator.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgyMzMxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxNTo0MFrOG18eYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MTowNVrOG24M1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODUyOQ==", "bodyText": "I'm confused, why do we have this same comparison of a single currentEntrySize twice? shouldn't it only compare with maxDataSizePerMsg, as this is the user configured (which could default to MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459218529", "createdAt": "2020-07-23T05:15:40Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = ReaderUtility.calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+                            throw new IllegalSnapshotEntrySizeException(\" The snapshot entry is bigger than the system supported\");\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5NzA3Nw==", "bodyText": "User can setup a different one. Supported is the one we can support. The user setup one is the one the user thinks it gives the best performance. Like 64MB is the max we can support. But in reality maybe 2M gives the best performance. But it depends the real hardware config that the users are aware of or have done experiments with.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460197077", "createdAt": "2020-07-24T17:41:05Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = ReaderUtility.calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+                            throw new IllegalSnapshotEntrySizeException(\" The snapshot entry is bigger than the system supported\");\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODUyOQ=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgyNjIzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxNzo0NVrOG18gGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0MjozNlrOG24P1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODk2OQ==", "bodyText": "why do we need currentMsgSize != 0? If we already checked that currentEntrySize is bigger previously and we throw an exception.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459218969", "createdAt": "2020-07-23T05:17:45Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = ReaderUtility.calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+                            throw new IllegalSnapshotEntrySizeException(\" The snapshot entry is bigger than the system supported\");\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            observeBiggerMsg.setValue(observeBiggerMsg.getValue()+1);\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                                    currentEntrySize, maxDataSizePerMsg);\n+                        }\n+\n+                        // Skip append this entry in this message. Will process it first at the next round.\n+                        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg && currentMsgSize != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5Nzg0Ng==", "bodyText": "If it is the only entry and its size is bigger than the configured but smaller than the max_supported, we still continue the replication , right? I thought we have discussed this before.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460197846", "createdAt": "2020-07-24T17:42:36Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsSnapshotReader.java", "diffHunk": "@@ -56,68 +67,103 @@\n     public StreamsSnapshotReader(CorfuRuntime runtime, LogReplicationConfig config) {\n         this.rt = runtime;\n         this.rt.parseConfigurationString(runtime.getLayoutServers().get(0)).connect();\n+        this.maxDataSizePerMsg = config.getMaxDataSizePerMsg();\n         streams = config.getStreamsToReplicate();\n+        log.debug(\"The maxDataSizePerMsg {} \", maxDataSizePerMsg);\n     }\n \n     /**\n      * Given a streamID and list of smrEntries, generate an OpaqueEntry\n      * @param streamID\n-     * @param smrEntries\n+     * @param entryList\n      * @return\n      */\n-    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID, List smrEntries) {\n+    private OpaqueEntry generateOpaqueEntry(long version, UUID streamID,  SMREntryList entryList) {\n         Map<UUID, List<SMREntry>> map = new HashMap<>();\n-        map.put(streamID, smrEntries);\n+        map.put(streamID, entryList.getSmrEntries());\n         return new OpaqueEntry(version, map);\n     }\n \n     /**\n      * Given a list of entries with the same stream, will generate an OpaqueEntry and\n      * use the opaque entry to generate a TxMessage.\n      * @param stream\n-     * @param entries\n+     * @param entryList\n      * @return\n      */\n-    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, List<SMREntry> entries, UUID snapshotRequestId) {\n+    private LogReplicationEntry generateMessage(OpaqueStreamIterator stream, SMREntryList entryList, UUID snapshotRequestId) {\n         currentMsgTs = stream.maxVersion;\n-        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entries);\n+        OpaqueEntry opaqueEntry = generateOpaqueEntry(currentMsgTs, stream.uuid, entryList);\n         if (!stream.iterator.hasNext()) {\n             //mark the end of the current stream.\n             currentMsgTs = snapshotTimestamp;\n         }\n \n-        ByteBuf buf = Unpooled.buffer();\n-        OpaqueEntry.serialize(buf, opaqueEntry);\n+        LogReplicationEntry txMsg = new LogReplicationEntry(MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n+                preMsgTs, snapshotTimestamp, sequence, opaqueEntry);\n \n-        org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry txMsg = new org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry\n-                (MessageType.SNAPSHOT_MESSAGE, topologyConfigId, snapshotRequestId, currentMsgTs,\n-                preMsgTs, snapshotTimestamp, sequence, buf.array());\n         preMsgTs = currentMsgTs;\n         sequence++;\n-        log.debug(\"Generate TxMsg {}\", txMsg.getMetadata());\n+\n+        log.trace(\"txMsg {} deepsize sizeInBytes {} entryList.sizeInByres {}  with numEntries {} deepSize sizeInBytes {}\",\n+                txMsg.getMetadata(), MetricsUtils.sizeOf.deepSizeOf(txMsg), entryList.getSizeInBytes(), entryList.getSmrEntries().size(), MetricsUtils.sizeOf.deepSizeOf(entryList.smrEntries));\n+\n         return txMsg;\n     }\n \n     /**\n-     * Read numEntries from the current stream.\n+     * Read log data from the current stream until the sum of all SMR entries's sizeInBytes reaches the maxDataSizePerMsg.\n      * @param stream\n-     * @param numEntries\n      * @return\n      */\n-    private List<SMREntry> next(OpaqueStreamIterator stream, int numEntries) {\n-        //if it is the end of the stream, set an end of stream mark, the current\n-        List<SMREntry> list = new ArrayList<>();\n+    private SMREntryList next(OpaqueStreamIterator stream) {\n+        List<SMREntry> smrList = new ArrayList<>();\n+        int currentMsgSize = 0;\n+\n         try {\n-            while (stream.iterator.hasNext() && list.size() < numEntries) {\n-                OpaqueEntry entry = (OpaqueEntry) stream.iterator.next();\n-                stream.maxVersion = Math.max(stream.maxVersion, entry.getVersion());\n-                list.addAll(entry.getEntries().get(stream.uuid));\n+            while (currentMsgSize < maxDataSizePerMsg) {\n+                if (lastEntry != null) {\n+                    List<SMREntry> smrEntries = lastEntry.getEntries().get(stream.uuid);\n+                    if (smrEntries != null) {\n+                        int currentEntrySize = ReaderUtility.calculateSize(smrEntries);\n+\n+                        if (currentEntrySize > MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED) {\n+                            log.error(\"The current entry size {} is bigger than the maxDataSizePerMsg {} supported\", currentEntrySize, MAX_LOG_REPLICATION_DATA_MSG_SIZE_SUPPORTED);\n+                            throw new IllegalSnapshotEntrySizeException(\" The snapshot entry is bigger than the system supported\");\n+                        } else if (currentEntrySize > maxDataSizePerMsg) {\n+                            observeBiggerMsg.setValue(observeBiggerMsg.getValue()+1);\n+                            log.warn(\"The current entry size {} is bigger than the configured maxDataSizePerMsg {}\",\n+                                    currentEntrySize, maxDataSizePerMsg);\n+                        }\n+\n+                        // Skip append this entry in this message. Will process it first at the next round.\n+                        if (currentEntrySize + currentMsgSize > maxDataSizePerMsg && currentMsgSize != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODk2OQ=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg1MDU4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/logreplication/LogReplicationEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMjo1MlrOG18t1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMjo1MlrOG18t1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjQ4NA==", "bodyText": "private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459222484", "createdAt": "2020-07-23T05:32:52Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/logreplication/LogReplicationEntry.java", "diffHunk": "@@ -13,41 +21,102 @@\n  *\n  * @author annym\n  */\n+@Slf4j\n @Data\n public class LogReplicationEntry implements ICorfuPayload<LogReplicationEntry> {\n \n     private LogReplicationEntryMetadata metadata;\n \n-    private byte[] payload;\n+    private List<OpaqueEntry> opaqueEntryList = new ArrayList<>();\n \n-    public LogReplicationEntry(LogReplicationEntryMetadata metadata, byte[] payload) {\n-        this.payload = payload;\n+\n+    // Only used by test cases\n+    @VisibleForTesting\n+    byte[] payload;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg1NjQwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNjoxNVrOG18xDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNjoxNVrOG18xDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzMxMQ==", "bodyText": "Camel case please.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459223311", "createdAt": "2020-07-23T05:36:15Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -313,6 +315,7 @@ public static Process runReplicationServer(int port, String pluginConfigFilePath\n                 .setHost(DEFAULT_HOST)\n                 .setPort(port)\n                 .setPluginConfigFilePath(pluginConfigFilePath)\n+                .setMsg_size(MSG_SIZE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg1ODk0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNzozNlrOG18yhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNzozNlrOG18yhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzY4NA==", "bodyText": "Java uses CamelCase.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459223684", "createdAt": "2020-07-23T05:37:36Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -507,6 +510,7 @@ public Process runServer() throws IOException {\n         private String compressionCodec = null;\n         private String pluginConfigFilePath = null;\n         private String logPath = null;\n+        private int msg_size = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg2MzU0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0MDoxOFrOG181HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0MDoxOFrOG181HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDM0OA==", "bodyText": "private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459224348", "createdAt": "2020-07-23T05:40:18Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -311,6 +324,16 @@ void verifyTables(HashMap<String, CorfuTable<Long, Long>> tables0, HashMap<Strin\n             }\n     }\n \n+    void waitData(HashMap<String, CorfuTable<Long, Long>> tables, HashMap<String, HashMap<Long, Long>> hashMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg2NTM5OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0MToxN1rOG182HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo0NjoxMVrOG24WpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDYwNQ==", "bodyText": "Why did this change?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459224605", "createdAt": "2020-07-23T05:41:17Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -695,7 +742,7 @@ public void testLogEntrySyncValidCrossTablesWithTriggerTimeout() throws Exceptio\n         expectedAckMessages =  NUM_KEYS*WRITE_CYCLES;\n \n         testConfig.clear().setDropMessageLevel(2);\n-        startLogEntrySync(crossTables, WAIT.ON_ERROR);\n+        startLogEntrySync(crossTables, WAIT.ON_TIMEOUT_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE5OTU4OQ==", "bodyText": "It is much clear about what each test is wait on.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r460199589", "createdAt": "2020-07-24T17:46:11Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -695,7 +742,7 @@ public void testLogEntrySyncValidCrossTablesWithTriggerTimeout() throws Exceptio\n         expectedAckMessages =  NUM_KEYS*WRITE_CYCLES;\n \n         testConfig.clear().setDropMessageLevel(2);\n-        startLogEntrySync(crossTables, WAIT.ON_ERROR);\n+        startLogEntrySync(crossTables, WAIT.ON_TIMEOUT_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDYwNQ=="}, "originalCommit": {"oid": "ef54576388fe5f0e24a6a63a3b8de1b2cf83aced"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg3MTkyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0NToxOFrOG1851A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxMDo1OVrOG2btbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNTU1Ng==", "bodyText": "why did this change? there is a method that takes only one condition.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459225556", "createdAt": "2020-07-23T05:45:18Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -811,16 +832,22 @@ public void testLogEntrySyncValidCrossTablesWithWritingAtSrc() throws Exception\n         testConfig.clear();\n         testConfig.setWritingSrc(true);\n         testConfig.setDeleteOP(true);\n-\n         testConfig.setWaitOn(WAIT.ON_ACK);\n-        startLogEntrySync(crossTables, WAIT.ON_ACK, false);\n+\n+        HashSet<WAIT> waitHashSet = new HashSet<>();\n+        waitHashSet.add(WAIT.ON_ACK);\n+        startLogEntrySync(crossTables, waitHashSet, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMDI4Nw==", "bodyText": "I want to put all things clear for each test case instead of using the wrapper, otherwise, while debugging, I need to jump around to see what are the real arguments passed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459730287", "createdAt": "2020-07-23T21:10:59Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -811,16 +832,22 @@ public void testLogEntrySyncValidCrossTablesWithWritingAtSrc() throws Exception\n         testConfig.clear();\n         testConfig.setWritingSrc(true);\n         testConfig.setDeleteOP(true);\n-\n         testConfig.setWaitOn(WAIT.ON_ACK);\n-        startLogEntrySync(crossTables, WAIT.ON_ACK, false);\n+\n+        HashSet<WAIT> waitHashSet = new HashSet<>();\n+        waitHashSet.add(WAIT.ON_ACK);\n+        startLogEntrySync(crossTables, waitHashSet, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNTU1Ng=="}, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg3NjM4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0ODowMVrOG188RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxMzowOFrOG2bxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjE4MA==", "bodyText": "The intention of the observables and the WAIT.ON_ACK is to avoid while loops that are just stuck there until a condition is met. Can't we set the expected number of ACKS by knowing the size of what we wrote and how many messages will be sent, hence how many calks we will receive back?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459226180", "createdAt": "2020-07-23T05:48:01Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -811,16 +832,22 @@ public void testLogEntrySyncValidCrossTablesWithWritingAtSrc() throws Exception\n         testConfig.clear();\n         testConfig.setWritingSrc(true);\n         testConfig.setDeleteOP(true);\n-\n         testConfig.setWaitOn(WAIT.ON_ACK);\n-        startLogEntrySync(crossTables, WAIT.ON_ACK, false);\n+\n+        HashSet<WAIT> waitHashSet = new HashSet<>();\n+        waitHashSet.add(WAIT.ON_ACK);\n+        startLogEntrySync(crossTables, waitHashSet, true);\n \n         expectedAckTimestamp = Long.MAX_VALUE;\n-        // Verify Data on Destination site\n-        System.out.println(\"****** Verify Data on Destination\");\n+\n         // Because t2 is not specified as a replicated table, we should not see it on the destination\n         srcDataForVerification.get(t2).clear();\n \n+        // Verify Data on Destination site\n+        System.out.println(\"****** Wait Data on Destination\");\n+        waitData(dstCorfuTables, srcDataForVerification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjI4Mg==", "bodyText": "All you need is to set expectedAckMessages to the correct value.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459226282", "createdAt": "2020-07-23T05:48:29Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -811,16 +832,22 @@ public void testLogEntrySyncValidCrossTablesWithWritingAtSrc() throws Exception\n         testConfig.clear();\n         testConfig.setWritingSrc(true);\n         testConfig.setDeleteOP(true);\n-\n         testConfig.setWaitOn(WAIT.ON_ACK);\n-        startLogEntrySync(crossTables, WAIT.ON_ACK, false);\n+\n+        HashSet<WAIT> waitHashSet = new HashSet<>();\n+        waitHashSet.add(WAIT.ON_ACK);\n+        startLogEntrySync(crossTables, waitHashSet, true);\n \n         expectedAckTimestamp = Long.MAX_VALUE;\n-        // Verify Data on Destination site\n-        System.out.println(\"****** Verify Data on Destination\");\n+\n         // Because t2 is not specified as a replicated table, we should not see it on the destination\n         srcDataForVerification.get(t2).clear();\n \n+        // Verify Data on Destination site\n+        System.out.println(\"****** Wait Data on Destination\");\n+        waitData(dstCorfuTables, srcDataForVerification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjE4MA=="}, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTI1Ng==", "bodyText": "It is not accurate right. Even we know the value size, but not the MSR entry size in advance.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459731256", "createdAt": "2020-07-23T21:13:08Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -811,16 +832,22 @@ public void testLogEntrySyncValidCrossTablesWithWritingAtSrc() throws Exception\n         testConfig.clear();\n         testConfig.setWritingSrc(true);\n         testConfig.setDeleteOP(true);\n-\n         testConfig.setWaitOn(WAIT.ON_ACK);\n-        startLogEntrySync(crossTables, WAIT.ON_ACK, false);\n+\n+        HashSet<WAIT> waitHashSet = new HashSet<>();\n+        waitHashSet.add(WAIT.ON_ACK);\n+        startLogEntrySync(crossTables, waitHashSet, true);\n \n         expectedAckTimestamp = Long.MAX_VALUE;\n-        // Verify Data on Destination site\n-        System.out.println(\"****** Verify Data on Destination\");\n+\n         // Because t2 is not specified as a replicated table, we should not see it on the destination\n         srcDataForVerification.get(t2).clear();\n \n+        // Verify Data on Destination site\n+        System.out.println(\"****** Wait Data on Destination\");\n+        waitData(dstCorfuTables, srcDataForVerification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjE4MA=="}, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg3NzMzOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo0ODo0NFrOG1880g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToxNDoxMlrOG2by9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjMyMg==", "bodyText": "required?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459226322", "createdAt": "2020-07-23T05:48:44Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -971,6 +998,8 @@ public void testLogEntrySyncWithTrim() throws Exception {\n         // Setup Environment: two corfu servers (source & destination)\n         setupEnv();\n \n+        log.info(\"Have setutEnv Done\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczMTcwMg==", "bodyText": "When the test goes wrong, we know the process and where it stuck.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459731702", "createdAt": "2020-07-23T21:14:12Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -971,6 +998,8 @@ public void testLogEntrySyncWithTrim() throws Exception {\n         // Setup Environment: two corfu servers (source & destination)\n         setupEnv();\n \n+        log.info(\"Have setutEnv Done\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjMyMg=="}, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg4MTM2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/SourceForwardingDataSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1MToxMFrOG18_CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1MToxMFrOG18_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNjg4OA==", "bodyText": "droppingNum (not starting with caps)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2643#discussion_r459226888", "createdAt": "2020-07-23T05:51:10Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/SourceForwardingDataSender.java", "diffHunk": "@@ -50,7 +50,9 @@\n \n     final static int DROP_INCREMENT = 4;\n \n-    private int firstDrop = DROP_INCREMENT;\n+    private int DroppingNum = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d9bc783fa25db0791b58efbb4e33da951a052"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1869, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}