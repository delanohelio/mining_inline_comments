{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTMxMTYy", "number": 2317, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjowMTowMVrODZppFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0MDoyNlrODcEa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjIzMjU0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjowMTowMVrOFgKPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMzo0MlrOFhrqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NjU2Mw==", "bodyText": "Can you make all these parameters configurable?\nAt least pass Options as a parameter in the constructor?\nOr any other way that helps make all the parameters configurable", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r369266563", "createdAt": "2020-01-21T22:01:01Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.\n+     *\n+     * For a set of options that dictate RocksDB memory usage can be found here:\n+     * https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB\n+     *\n+     * Block Cache:  Which can be set via Options::setTableFormatConfig.\n+     *               Out of box, RocksDB will use LRU-based block cache\n+     *               implementation with 8MB capacity.\n+     * Index/Filter: Is a function of the block cache. Generally it infates\n+     *               the block cache by about 50%. The exact number can be\n+     *               retrieved via \"rocksdb.estimate-table-readers-mem\"\n+     *               property.\n+     * Write Buffer: Also known as memtable is defined by the ColumnFamilyOptions\n+     *               option. The default is 64 MB.\n+     */\n+    public static Options getPersistedStreamingMapOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4899da1add50a83c212c9bb4ab6009c77a00ca"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3NTk3Mw==", "bodyText": "Ok.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r369275973", "createdAt": "2020-01-21T22:24:07Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.\n+     *\n+     * For a set of options that dictate RocksDB memory usage can be found here:\n+     * https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB\n+     *\n+     * Block Cache:  Which can be set via Options::setTableFormatConfig.\n+     *               Out of box, RocksDB will use LRU-based block cache\n+     *               implementation with 8MB capacity.\n+     * Index/Filter: Is a function of the block cache. Generally it infates\n+     *               the block cache by about 50%. The exact number can be\n+     *               retrieved via \"rocksdb.estimate-table-readers-mem\"\n+     *               property.\n+     * Write Buffer: Also known as memtable is defined by the ColumnFamilyOptions\n+     *               option. The default is 64 MB.\n+     */\n+    public static Options getPersistedStreamingMapOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NjU2Mw=="}, "originalCommit": {"oid": "ea4899da1add50a83c212c9bb4ab6009c77a00ca"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MjcyNw==", "bodyText": "Its kind of messy, because its passed to the constructor through a supplier. CorfuTable can be refactored in a different patch.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370862727", "createdAt": "2020-01-24T22:03:42Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.\n+     *\n+     * For a set of options that dictate RocksDB memory usage can be found here:\n+     * https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB\n+     *\n+     * Block Cache:  Which can be set via Options::setTableFormatConfig.\n+     *               Out of box, RocksDB will use LRU-based block cache\n+     *               implementation with 8MB capacity.\n+     * Index/Filter: Is a function of the block cache. Generally it infates\n+     *               the block cache by about 50%. The exact number can be\n+     *               retrieved via \"rocksdb.estimate-table-readers-mem\"\n+     *               property.\n+     * Write Buffer: Also known as memtable is defined by the ColumnFamilyOptions\n+     *               option. The default is 64 MB.\n+     */\n+    public static Options getPersistedStreamingMapOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2NjU2Mw=="}, "originalCommit": {"oid": "ea4899da1add50a83c212c9bb4ab6009c77a00ca"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTEwMzYwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDo0Mzo0OVrOFhMB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToxODowMlrOFhRntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NDQ0NQ==", "bodyText": "should the iterator be closed in case of an exception?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370344445", "createdAt": "2020-01-23T20:43:49Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {\n+        try {\n+            iterator.status();\n+        } catch (RocksDBException e) {\n+            throw new UnrecoverableCorfuError(\"There was an error reading the persisted map.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c46cecf21f81db9f10e4417d5a766f6ab2fae32"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzNjAyMw==", "bodyText": "It doesn't matter because that exception should crash the process. On exit the resources should be cleaned.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370436023", "createdAt": "2020-01-24T01:18:02Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {\n+        try {\n+            iterator.status();\n+        } catch (RocksDBException e) {\n+            throw new UnrecoverableCorfuError(\"There was an error reading the persisted map.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NDQ0NQ=="}, "originalCommit": {"oid": "9c46cecf21f81db9f10e4417d5a766f6ab2fae32"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTY4NjgxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToxODo0MlrOFhRoVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMToxODo0MlrOFhRoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQzNjE4MA==", "bodyText": "Stream consumers should use try-resource to invoke the close method.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370436180", "createdAt": "2020-01-24T01:18:42Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +281,11 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator = new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        Stream<Entry<K, V>> resStream = StreamSupport.stream(\n+                Spliterators.spliteratorUnknownSize(entryIterator, Spliterator.ORDERED), false);\n+        resStream.onClose(entryIterator::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c46cecf21f81db9f10e4417d5a766f6ab2fae32"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc1MzI2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjowMTo1MlrOFhSN6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjowMDo1NVrOFhrm5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NTgwMA==", "bodyText": "Disk-backed CorfuTable == PersistedStreamingMap, right? (This is unrelated) but can we add a comment to the description of this class making reference to this same name, so it's clear for any new reader and we can further on use it interchangeably.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370445800", "createdAt": "2020-01-24T02:01:52Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTQ4Nw==", "bodyText": "Yes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370861487", "createdAt": "2020-01-24T21:59:54Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NTgwMA=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTc5OQ==", "bodyText": "Changed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370861799", "createdAt": "2020-01-24T22:00:55Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +45,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link CorfuTable}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NTgwMA=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTgxNzA0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjo1NjowNVrOFhSzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo1ODo0OVrOFhtZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1NTQwOQ==", "bodyText": "Should we move this to a dedicated class, so it's obvious in the future that we need more tests for Persisted Corfu Table?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370455409", "createdAt": "2020-01-24T02:56:05Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MTE3MA==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370891170", "createdAt": "2020-01-24T23:58:49Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1NTQwOQ=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTgxNzU3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjo1NjoyOFrOFhSzwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjo1NjoyOFrOFhSzwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1NTQ4OA==", "bodyText": "Can we add a test description?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370455488", "createdAt": "2020-01-24T02:56:28Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTgyMTM2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMjo1OTo1OVrOFhS2Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDowNDoxOVrOFhtdaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1NjA5MA==", "bodyText": "result.get? instead?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370456090", "createdAt": "2020-01-24T02:59:59Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {\n+        String path = PARAMETERS.TEST_TEMP_DIR;\n+\n+        CorfuRuntime rt = getDefaultRuntime();\n+\n+        UUID tableId = UUID.randomUUID();\n+        Supplier<StreamingMap<String, String>> mapSupplier = () ->\n+                new PersistedStreamingMap<>(Paths.get(path + tableId),\n+                        PersistedStreamingMap.getPersistedStreamingMapOptions(),\n+                        Serializers.JSON, rt);\n+\n+        CorfuTable<String, String> diskBackedMap = rt.getObjectsView()\n+                .build()\n+                .setTypeToken(new TypeToken<CorfuTable<String, String>>() {})\n+                .streamID(tableId)\n+                .setSerializer(Serializers.JSON)\n+                .setArguments(mapSupplier, ICorfuVersionPolicy.MONOTONIC)\n+                .open();\n+\n+        final int numKeys = 1002;\n+        for (int x = 0; x < numKeys; x++) {\n+            diskBackedMap.put(String.valueOf(x), \"payload\" + x);\n+        }\n+\n+        Map<String, String> result = new HashMap<>(numKeys);\n+\n+        Stream<Map.Entry<String, String>> stream = diskBackedMap.entryStream();\n+        final Iterable<List<Map.Entry<String, String>>> partitions = Iterables.partition(stream::iterator, 50);\n+\n+        for (List<Map.Entry<String, String>> partition : partitions) {\n+            for (Map.Entry<String, String> entry : partition) {\n+                result.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        assertThat(diskBackedMap.size()).isEqualTo(numKeys);\n+        assertThat(result.size()).isEqualTo(numKeys);\n+        for (Map.Entry<String, String> entry : result.entrySet()) {\n+            assertThat(diskBackedMap.get(entry.getKey())).isEqualTo(diskBackedMap.get(entry.getKey()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MjEzNw==", "bodyText": "Good catch.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370892137", "createdAt": "2020-01-25T00:04:19Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {\n+        String path = PARAMETERS.TEST_TEMP_DIR;\n+\n+        CorfuRuntime rt = getDefaultRuntime();\n+\n+        UUID tableId = UUID.randomUUID();\n+        Supplier<StreamingMap<String, String>> mapSupplier = () ->\n+                new PersistedStreamingMap<>(Paths.get(path + tableId),\n+                        PersistedStreamingMap.getPersistedStreamingMapOptions(),\n+                        Serializers.JSON, rt);\n+\n+        CorfuTable<String, String> diskBackedMap = rt.getObjectsView()\n+                .build()\n+                .setTypeToken(new TypeToken<CorfuTable<String, String>>() {})\n+                .streamID(tableId)\n+                .setSerializer(Serializers.JSON)\n+                .setArguments(mapSupplier, ICorfuVersionPolicy.MONOTONIC)\n+                .open();\n+\n+        final int numKeys = 1002;\n+        for (int x = 0; x < numKeys; x++) {\n+            diskBackedMap.put(String.valueOf(x), \"payload\" + x);\n+        }\n+\n+        Map<String, String> result = new HashMap<>(numKeys);\n+\n+        Stream<Map.Entry<String, String>> stream = diskBackedMap.entryStream();\n+        final Iterable<List<Map.Entry<String, String>>> partitions = Iterables.partition(stream::iterator, 50);\n+\n+        for (List<Map.Entry<String, String>> partition : partitions) {\n+            for (Map.Entry<String, String> entry : partition) {\n+                result.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+\n+        assertThat(diskBackedMap.size()).isEqualTo(numKeys);\n+        assertThat(result.size()).isEqualTo(numKeys);\n+        for (Map.Entry<String, String> entry : result.entrySet()) {\n+            assertThat(diskBackedMap.get(entry.getKey())).isEqualTo(diskBackedMap.get(entry.getKey()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ1NjA5MA=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk4NTQ2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1OToxNlrOFhnTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0ODowNlrOFhsdmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTM2Nw==", "bodyText": "What is the point of using Spliterator?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370791367", "createdAt": "2020-01-24T18:59:16Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +281,11 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator = new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        Stream<Entry<K, V>> resStream = StreamSupport.stream(\n+                Spliterators.spliteratorUnknownSize(entryIterator, Spliterator.ORDERED), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NTgwMA==", "bodyText": "Not needed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370875800", "createdAt": "2020-01-24T22:48:06Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +281,11 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator = new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        Stream<Entry<K, V>> resStream = StreamSupport.stream(\n+                Spliterators.spliteratorUnknownSize(entryIterator, Spliterator.ORDERED), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTM2Nw=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTk4NzM1OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowMDowMFrOFhnU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0ODoxNVrOFhsdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTY3Mg==", "bodyText": "Please remove this and add a proper JavaDoc comment.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370791672", "createdAt": "2020-01-24T19:00:00Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NTg1Mg==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370875852", "createdAt": "2020-01-24T22:48:15Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5MTY3Mg=="}, "originalCommit": {"oid": "d2489f00a3489a9487d447eaa7ed227025e7d377"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAwOTk4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowODozOFrOFhnjNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowODozOFrOFhnjNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTMxNw==", "bodyText": "Why are you looping here? Can you give a use-case?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370795317", "createdAt": "2020-01-24T19:08:38Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjAyMjQ2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxMzoyOVrOFhnrDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo1MzoxNVrOFhtVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzMyNg==", "bodyText": "close() should be idempotent and an extra check can be done here to see if the iterator has been closed before. From the documentation:\n     * However, implementers of this interface are strongly encouraged\n     * to make their {@code close} methods idempotent.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370797326", "createdAt": "2020-01-24T19:13:29Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {\n+        try {\n+            iterator.status();\n+        } catch (RocksDBException e) {\n+            throw new UnrecoverableCorfuError(\"There was an error reading the persisted map.\", e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void close() {\n+        // Release the underlying RocksDB resources\n+        if (!iterator.isOwningHandle()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MDE0OQ==", "bodyText": "It is\n    public void close() {\n        if (this.owningHandle_.compareAndSet(true, false)) {\n            this.disposeInternal();\n        }\n\n    }", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370890149", "createdAt": "2020-01-24T23:53:15Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {\n+        try {\n+            iterator.status();\n+        } catch (RocksDBException e) {\n+            throw new UnrecoverableCorfuError(\"There was an error reading the persisted map.\", e);\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void close() {\n+        // Release the underlying RocksDB resources\n+        if (!iterator.isOwningHandle()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NzMyNg=="}, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA3MDcyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMDoyMlrOFhoI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo1MTo1MVrOFhtUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNDk1Ng==", "bodyText": "All methods should check for multi-threaded access.  Also, this method should be executed on every API call.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370804956", "createdAt": "2020-01-24T19:30:22Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4OTg4Ng==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370889886", "createdAt": "2020-01-24T23:51:51Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    final private RocksIterator iterator;\n+    final private ISerializer serializer;\n+    private Map.Entry<K, V> next;\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.iterator = iterator;\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+        checkInvariants();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        while (next == null && iterator.isValid()) {\n+            // Go ahead and cache that entry.\n+            next = new AbstractMap.SimpleEntry(\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.key()), null),\n+                    serializer.deserialize(Unpooled.wrappedBuffer(iterator.value()), null));\n+            // Advance the underlying iterator.\n+            iterator.next();\n+            checkInvariants();\n+        }\n+        return next != null;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Map.Entry<K, V> next() {\n+        if (hasNext()) {\n+            Map.Entry res = next;\n+            next = null;\n+            return res;\n+        } else {\n+            throw new NoSuchElementException();\n+        }\n+    }\n+\n+    /**\n+     * Ensure that this iterator is still valid.\n+     */\n+    private void checkInvariants() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNDk1Ng=="}, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA5NzE2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoxOVrOFhoZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToxMzoxN1rOFj6GJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIyOQ==", "bodyText": "This test is using checkpointer specific logic, so it should be moved to CheckpointTest. A unit test should be checking for more specific functionality -- for example -- calling hasNext() on a closed iterator behaves as expected.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370809229", "createdAt": "2020-01-24T19:40:19Z", "author": {"login": "vjeko"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5MTU4Nw==", "bodyText": "Its not checkpoint specific, although the checkpointer uses this, the API, a CorfuTable method that doesn't work.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370891587", "createdAt": "2020-01-25T00:01:05Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIyOQ=="}, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODU1Mg==", "bodyText": "This code was pretty much copied from CheckpointWriter::appendObjectState. Can you please add proper unit tests? Both positive and negative tests. You can add them to DiskBackedCorfuClientTest.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r370898552", "createdAt": "2020-01-25T00:46:23Z", "author": {"login": "vjeko"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIyOQ=="}, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NjMyNg==", "bodyText": "This test belongs to CheckpointTest. Also, added more tests.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373196326", "createdAt": "2020-01-30T21:13:17Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +255,47 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    public void PersistedCorfuTableTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIyOQ=="}, "originalCommit": {"oid": "be38526c64596abaec44b1a9c8354d8e0fe7ad42"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzU4MDk5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo0MTo0N1rOFiag7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyMzowNlrOFj2_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMDMxOA==", "bodyText": "Can we have more descriptive exception message here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r371630318", "createdAt": "2020-01-28T06:41:47Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyNjI1NQ==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373126255", "createdAt": "2020-01-30T18:45:40Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMDMxOA=="}, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NTQxMg==", "bodyText": "The only reason why this exception will be thrown is because the current thread does not own the handle, so the message should reflect that.  More specifically, the handle can be invalid either due to:\n\nMulti threaded access.\nThe iterator has been previously closed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373145412", "createdAt": "2020-01-30T19:23:06Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMDMxOA=="}, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzU5NTk4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo1MjoyNVrOFiap-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNjo1MjoyNVrOFiap-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzMjYzNA==", "bodyText": "Typo: infates -> inflates", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r371632634", "createdAt": "2020-01-28T06:52:25Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -40,6 +38,37 @@\n         RocksDB.loadLibrary();\n     }\n \n+    /**\n+     * A set of options defined for disk-backed {@link PersistedStreamingMap}.\n+     *\n+     * For a set of options that dictate RocksDB memory usage can be found here:\n+     * https://github.com/facebook/rocksdb/wiki/Memory-usage-in-RocksDB\n+     *\n+     * Block Cache:  Which can be set via Options::setTableFormatConfig.\n+     *               Out of box, RocksDB will use LRU-based block cache\n+     *               implementation with 8MB capacity.\n+     * Index/Filter: Is a function of the block cache. Generally it infates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzYyOTY4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNzoxMjoyNlrOFia9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo0OToxMVrOFj17aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzNzY5OQ==", "bodyText": "According to this: https://github.com/facebook/rocksdb/blob/master/java/src/main/java/org/rocksdb/ReadOptions.java#L11\nI think we need to call readOptions.close() before returning to prevent memory leak. (dispose is deprecated, so using close())", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r371637699", "createdAt": "2020-01-28T07:12:26Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +274,13 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator =\n+                new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        // It's necessary to use the RocksDbEntryIterator as try-with resource to ensure\n+        // the iterator is close, otherwise underlying RocksDB resources can leak\n+        Stream<Entry<K, V>> resStream = Streams.stream(entryIterator);\n+        resStream.onClose(entryIterator::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyNzg5NA==", "bodyText": "Didn't know about this. Thanks!\nIt will get released through finalized, but we shouldn't relay on that.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373127894", "createdAt": "2020-01-30T18:48:52Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +274,13 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator =\n+                new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        // It's necessary to use the RocksDbEntryIterator as try-with resource to ensure\n+        // the iterator is close, otherwise underlying RocksDB resources can leak\n+        Stream<Entry<K, V>> resStream = Streams.stream(entryIterator);\n+        resStream.onClose(entryIterator::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzNzY5OQ=="}, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyODA0MA==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373128040", "createdAt": "2020-01-30T18:49:11Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/PersistedStreamingMap.java", "diffHunk": "@@ -318,9 +274,13 @@ public void clear() {\n         // If it is nullptr, the iterator will read from an implicit snapshot as of the time the\n         // iterator is created. The implicit snapshot is preserved by pinning resource.\n         readOptions.setSnapshot(null);\n-        final RocksIterator rocksIterator = rocksDb.newIterator(readOptions);\n-        rocksIterator.seekToFirst();\n-        return Streams.stream(new RocksDbIterator(rocksIterator));\n+        final RocksDbEntryIterator entryIterator =\n+                new RocksDbEntryIterator(rocksDb.newIterator(readOptions), serializer);\n+        // It's necessary to use the RocksDbEntryIterator as try-with resource to ensure\n+        // the iterator is close, otherwise underlying RocksDB resources can leak\n+        Stream<Entry<K, V>> resStream = Streams.stream(entryIterator);\n+        resStream.onClose(entryIterator::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYzNzY5OQ=="}, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzIwODMyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNTo1MlrOFj3FIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOToyNTo1MlrOFj3FIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0NjkxNA==", "bodyText": "You should explain what constitutes a valid or invalid iterator.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373146914", "createdAt": "2020-01-30T19:25:52Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();\n+        boolean res =  iterator.isValid();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToFirst() {\n+        checkHandle();\n+        iterator.seekToFirst();\n+        checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToLast() {\n+        throw new UnsupportedOperationException(\"seekToLast\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seek(byte[] target) {\n+        throw new UnsupportedOperationException(\"seek\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekForPrev(byte[] target){\n+        throw new UnsupportedOperationException(\"seekForPrev\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void next() {\n+       checkHandle();\n+       iterator.next();\n+       checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void prev() {\n+        throw new UnsupportedOperationException(\"prev\");\n+    }\n+\n+    /**\n+     * Returns the key of the current position of the iterator.\n+     */\n+    public byte[] key() {\n+        checkHandle();\n+        byte[] res = iterator.key();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * Returns the value of the current position of the iterator.\n+     */\n+    public byte[] value() {\n+        checkHandle();\n+        byte[] res = iterator.value();\n+        checkStatus();\n+        return res;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void status() throws RocksDBException {\n+        throw new UnsupportedOperationException(\"status\");\n+    }\n+\n+    /**\n+     * Verifies that the iterator is in a valid state.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQyMDU2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozNzo0OVrOFj5JlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozNzo0OVrOFj5JlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MDgyMQ==", "bodyText": "There is really no good reason for this class to live outside of PersistedStreamingMap -- both the ISerializer as well as the generic parameters are already tied to to encompassing class. We should avoid unnecessary bloat.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373180821", "createdAt": "2020-01-30T20:37:49Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * A wrapper class that makes a RocksIterator compatible with Java {@link Iterator}.\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+@NotThreadSafe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzUwNDAwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowODoxM1rOFj59sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo1MzowMlrOFj8mxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NDE2Mw==", "bodyText": "If we detect that the iterator has reached the end, we should go ahead and relinquish the resources immediately, rather than relying on try-with-resource or GC. This is a more robust solution since it is not guaranteed that the client will use try-with-resource.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373194163", "createdAt": "2020-01-30T21:08:13Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * A wrapper class that makes a RocksIterator compatible with Java {@link Iterator}.\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+@NotThreadSafe\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    /**\n+     * A reference to the underlying rocksdb iterator\n+     */\n+    final private CheckedRocksIterator checkedIterator;\n+\n+    /**\n+     * Serializer to serialize/deserialize the key/values\n+     */\n+    final private ISerializer serializer;\n+\n+    /**\n+     * place holder for the current value\n+     */\n+    private Map.Entry<K, V> next;\n+\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.checkedIterator = new CheckedRocksIterator(iterator);\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        if (next == null && checkedIterator.isValid()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNzQ0NQ==", "bodyText": "Not really, that assumes all stream consumers have to consume the full stream, which is an incorrect assumption. Consumers have to the stream whether explicitly or with try-with-resources", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373237445", "createdAt": "2020-01-30T22:53:02Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/RocksDbEntryIterator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.corfudb.runtime.collections;\n+\n+import io.netty.buffer.Unpooled;\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.util.serializer.ISerializer;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+import java.util.AbstractMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * A wrapper class that makes a RocksIterator compatible with Java {@link Iterator}.\n+ *\n+ * Created by Maithem on 1/21/20.\n+ */\n+@NotThreadSafe\n+public class RocksDbEntryIterator<K, V> implements Iterator<Map.Entry<K, V>>, AutoCloseable {\n+\n+    /**\n+     * A reference to the underlying rocksdb iterator\n+     */\n+    final private CheckedRocksIterator checkedIterator;\n+\n+    /**\n+     * Serializer to serialize/deserialize the key/values\n+     */\n+    final private ISerializer serializer;\n+\n+    /**\n+     * place holder for the current value\n+     */\n+    private Map.Entry<K, V> next;\n+\n+    public RocksDbEntryIterator(RocksIterator iterator, ISerializer serializer) {\n+        this.checkedIterator = new CheckedRocksIterator(iterator);\n+        this.serializer = serializer;\n+        iterator.seekToFirst();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasNext() {\n+        if (next == null && checkedIterator.isValid()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NDE2Mw=="}, "originalCommit": {"oid": "9815e327dd6c2266023273f0ef28f1259ff759cc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU0MDAxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMDo1OVrOFj6TZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMDo1OVrOFj6TZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5OTcxNw==", "bodyText": "This message should be more descriptive. The only was for the handle to be invalid is either if:\n\nThere is some other thread trying to access the iterator.\nThe iterator has been previously closed.\n\nThe message should reflect the above conditions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373199717", "createdAt": "2020-01-30T21:20:59Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class WrappedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public WrappedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * A helper method that is called before accessing the iterator.\n+     * This is necessary to make sure that access happens on an owned handle.\n+     */\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"RocksIterator handle is not valid\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332c2d6a693d92417958d897c0043af7868f939"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU3NzAyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTozNToxMlrOFj6rBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTozNToxMlrOFj6rBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNTc2NA==", "bodyText": "checkStatus() and status() should behave the same. The implementation of this interface can be less restrictive, thus you are not required to throw RocksDBException, allowing you to merge these two methods.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373205764", "createdAt": "2020-01-30T21:35:12Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class WrappedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public WrappedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * A helper method that is called before accessing the iterator.\n+     * This is necessary to make sure that access happens on an owned handle.\n+     */\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"RocksIterator handle is not valid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();\n+        boolean res =  iterator.isValid();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToFirst() {\n+        checkHandle();\n+        iterator.seekToFirst();\n+        checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToLast() {\n+        throw new UnsupportedOperationException(\"seekToLast\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seek(byte[] target) {\n+        throw new UnsupportedOperationException(\"seek\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekForPrev(byte[] target){\n+        throw new UnsupportedOperationException(\"seekForPrev\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void next() {\n+       checkHandle();\n+       iterator.next();\n+       checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void prev() {\n+        throw new UnsupportedOperationException(\"prev\");\n+    }\n+\n+    /**\n+     * Returns the key of the current position of the iterator.\n+     */\n+    public byte[] key() {\n+        checkHandle();\n+        byte[] res = iterator.key();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * Returns the value of the current position of the iterator.\n+     */\n+    public byte[] value() {\n+        checkHandle();\n+        byte[] res = iterator.value();\n+        checkStatus();\n+        return res;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void status() throws RocksDBException {\n+        throw new UnsupportedOperationException(\"status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332c2d6a693d92417958d897c0043af7868f939"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU4NzUwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTozODo1NlrOFj6xZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTozODo1NlrOFj6xZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNzM5OQ==", "bodyText": "You should document what constitutes a valid status. You can take a look at:\nhttps://github.com/facebook/rocksdb/wiki/Iterator\nAnd reference some parts of the Error Handling section.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373207399", "createdAt": "2020-01-30T21:38:56Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/WrappedRocksIterator.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class WrappedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public WrappedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * A helper method that is called before accessing the iterator.\n+     * This is necessary to make sure that access happens on an owned handle.\n+     */\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"RocksIterator handle is not valid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();\n+        boolean res =  iterator.isValid();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToFirst() {\n+        checkHandle();\n+        iterator.seekToFirst();\n+        checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToLast() {\n+        throw new UnsupportedOperationException(\"seekToLast\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seek(byte[] target) {\n+        throw new UnsupportedOperationException(\"seek\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekForPrev(byte[] target){\n+        throw new UnsupportedOperationException(\"seekForPrev\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void next() {\n+       checkHandle();\n+       iterator.next();\n+       checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void prev() {\n+        throw new UnsupportedOperationException(\"prev\");\n+    }\n+\n+    /**\n+     * Returns the key of the current position of the iterator.\n+     */\n+    public byte[] key() {\n+        checkHandle();\n+        byte[] res = iterator.key();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * Returns the value of the current position of the iterator.\n+     */\n+    public byte[] value() {\n+        checkHandle();\n+        byte[] res = iterator.value();\n+        checkStatus();\n+        return res;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void status() throws RocksDBException {\n+        throw new UnsupportedOperationException(\"status\");\n+    }\n+\n+    /**\n+     * Verifies that the iterator is in a valid state.\n+     */\n+    private void checkStatus() {\n+        try {\n+            iterator.status();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332c2d6a693d92417958d897c0043af7868f939"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU5MTM0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0MDoyNlrOFj6z2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0MDoyNlrOFj6z2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwODAyNw==", "bodyText": "None of these changes are necessary.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2317#discussion_r373208027", "createdAt": "2020-01-30T21:40:26Z", "author": {"login": "vjeko"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -1,21 +1,31 @@\n package org.corfudb.runtime.collections;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.Iterables;\n import com.google.common.reflect.TypeToken;\n \n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.ConcurrentModificationException;\n+import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n import org.assertj.core.api.Assertions;\n import org.assertj.core.data.MapEntry;\n+import org.corfudb.runtime.CorfuRuntime;\n import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.corfudb.runtime.object.ICorfuVersionPolicy;\n import org.corfudb.runtime.view.AbstractViewTest;\n+import org.corfudb.util.serializer.Serializers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9332c2d6a693d92417958d897c0043af7868f939"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2051, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}