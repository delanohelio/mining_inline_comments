{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNTM0MjA0", "number": 2806, "title": "CorfuStore: Queue API, Stream Tails, CorfuBrowser null pointer fix", "bodyText": "Overview\nDescription:\nWhy should this be merged:\n\nAdds Queue Api (not implementation)\nFix stream tails to be supported without opening the table\nFixes null pointer in Corfu browser when the metadata is null\n\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-10-29T20:03:19Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806", "merged": true, "mergeCommit": {"oid": "95513f9735ac07908a75efcab4c6296560895464"}, "closed": true, "closedAt": "2020-11-09T02:52:46Z", "author": {"login": "hisundar"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXboKgAFqTUyMDE4NTY0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdalpwpABqjM5NzExMTc2MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMTg1NjQ5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#pullrequestreview-520185649", "createdAt": "2020-10-30T00:07:11Z", "commit": {"oid": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowNzoxMlrOHqy5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoxNTowOFrOHqzA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjA1Nw==", "bodyText": "Print null instead of empty string?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514636057", "createdAt": "2020-10-30T00:07:12Z", "author": {"login": "WenbinZhu"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -143,9 +143,11 @@ public int printTable(String namespace, String tablename) {\n                     builder = new StringBuilder(\"\\nKey:\\n\")\n                             .append(JsonFormat.printer().print(entry.getKey().getKey()))\n                             .append(\"\\nPayload:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getPayload()))\n+                            .append(entry.getValue() != null && entry.getValue().getPayload() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getPayload())   : \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNzg3OQ==", "bodyText": "Remove?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514637879", "createdAt": "2020-10-30T00:14:36Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -240,6 +241,32 @@ TxnContext delete(@Nonnull Table<K, V, M> table,\n         return this;\n     }\n \n+    /*************************** Queue API ***************************************\n+     */\n+    /**\n+     * Enqueue a message object into the CorfuQueue.\n+     *\n+     * @param table Table object to perform the delete on.\n+     * @param record    Record to be inserted into the Queue.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     * @return TxnContext instance.\n+     */\n+    @Nonnull\n+    public <K extends Message, V extends Message, M extends Message>\n+    Queue.CorfuQueueIdMsg enqueue(@Nonnull Table<K, V, M> table,\n+                                  @Nonnull final V record) {\n+        validateTableWrittenIsInNamespace(table);\n+        /*\n+        table.getMetrics().incNumDeletes();\n+        operations.add(() -> table.deleteRecord(key));\n+        return this;\n+\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzODA0Ng==", "bodyText": "Remove?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r514638046", "createdAt": "2020-10-30T00:15:08Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,6 +355,25 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Return all the Queue entries ordered by their parent transaction.\n+     *\n+     * Note that the key in these entries would be the CorfuQueueIdMsg.\n+     *\n+     * @param table Table< K, V, M > object aka queue on which the scan must be done.\n+     * @return Collection of filtered entries.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    List<CorfuStoreEntry<K, V, M>> entryList(@Nonnull final Table<K, V, M> table) {\n+        applyWritesForReadOnTable(table);\n+        /*\n+        table.getMetrics().incNumScans();\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6a8cffb8f1e5eeb14860e7c4b482393cd87a886", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b6a8cffb8f1e5eeb14860e7c4b482393cd87a886", "committedDate": "2020-10-29T20:01:04Z", "message": "CorfuStore: Add Queue Api enqueue() and entryList()"}, "afterCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/15804de4b84c74881538e9edf5dc6b9294e48290", "committedDate": "2020-10-31T06:03:10Z", "message": "CorfuStore: Refactor to remove code duplication & let api change fast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODI1NDk4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#pullrequestreview-521825498", "createdAt": "2020-11-02T17:04:03Z", "commit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzowNDowM1rOHsNgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxODoyNDozMFrOHsQpLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMDYwNA==", "bodyText": "This doesn't appear thrown? CorfuQueueIdMsg is just a Protobuf message.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516120604", "createdAt": "2020-11-02T17:04:03Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -117,6 +117,25 @@ public CorfuRecordId(byte[] from) throws InvalidProtocolBufferException {\n             this.entryId = to.getEntryId();\n         }\n \n+        /**\n+         * @param from - the CorfuQueueIdMsg protobuf to convert from\n+         * @throws InvalidProtocolBufferException - invalid set of bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0NDkzMg==", "bodyText": "Can you use assertThat and isNotNull like you did in CorfuStoreShimTest:221?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516144932", "createdAt": "2020-11-02T17:37:22Z", "author": {"login": "zfrenette"}, "path": "test/src/test/java/org/corfudb/integration/CorfuStorePerfIT.java", "diffHunk": "@@ -108,9 +108,10 @@ private void addProtoToStore(CorfuRuntime rt, final int count) {\n         // Creating a transaction builder.\n         TxnContext tx = corfuStore.txn(nsxManager);\n         assert table != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE2NTgxMw==", "bodyText": "Should the return type here be K?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516165813", "createdAt": "2020-11-02T18:13:13Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -240,6 +327,48 @@ TxnContext delete(@Nonnull Table<K, V, M> table,\n         return this;\n     }\n \n+    /**\n+     * Deletes the specified key on a table given its full name.\n+     *\n+     * @param tableName Table object to perform the delete on.\n+     * @param key       Key of the record to be deleted.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    void delete(@Nonnull String tableName,\n+                @Nonnull final K key) {\n+        this.delete(getTable(tableName), key);\n+    }\n+\n+    /*************************** Queue API ***************************************/\n+\n+    /**\n+     * Enqueue a message object into the CorfuQueue.\n+     *\n+     * @param table Table object to perform the delete on.\n+     * @param record    Record to be inserted into the Queue.\n+     * @param <K>       Type of Key.\n+     * @param <V>       Type of Value.\n+     * @param <M>       Type of Metadata.\n+     * @return TxnContext instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE3MjA3Nw==", "bodyText": "Why is this done twice on table1?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516172077", "createdAt": "2020-11-02T18:24:30Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,6 +513,144 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Scan and filter by entry.\n+     *\n+     * @param tableName table object to filter the entries on.\n+     * @param entryPredicate Predicate to filter the entries.\n+     * @return Collection of filtered entries.\n+     */\n+    public <K extends Message, V extends Message, M extends Message>\n+    List<CorfuStoreEntry<K, V, M>> executeQuery(@Nonnull final String tableName,\n+                                                @Nonnull final Predicate<CorfuStoreEntry<K, V, M>> entryPredicate) {\n+        return this.executeQuery(this.getTable(tableName), entryPredicate);\n+    }\n+\n+    /**\n+     * Execute a join of 2 tables.\n+     *\n+     * @param table1         First table in the join query.\n+     * @param table2         Second table to join with the first.\n+     * @param query1         Predicate to filter entries in table 1.\n+     * @param query2         Predicate to filter entries in table 2.\n+     * @param joinPredicate  Predicate to filter entries during the join.\n+     * @param joinFunction   Function to merge entries.\n+     * @param joinProjection Project the merged entries.\n+     * @param <V1>           Type of Value in table 1.\n+     * @param <V2>           Type of Value in table 2.\n+     * @param <T>            Type of resultant value after merging type V and type W.\n+     * @param <U>            Type of value projected from T.\n+     * @return Result of query.\n+     */\n+    @Nonnull\n+    public <K1 extends Message, K2 extends Message,\n+            V1 extends Message, V2 extends Message,\n+            M1 extends Message, M2 extends Message, T, U>\n+    QueryResult<U> executeJoinQuery(\n+            @Nonnull final Table<K1, V1, M1> table1,\n+            @Nonnull final Table<K2, V2, M2> table2,\n+            @Nonnull final Predicate<CorfuStoreEntry<K1, V1, M1>> query1,\n+            @Nonnull final Predicate<CorfuStoreEntry<K2, V2, M2>> query2,\n+            @Nonnull final BiPredicate<V1, V2> joinPredicate,\n+            @Nonnull final BiFunction<V1, V2, T> joinFunction,\n+            final Function<T, U> joinProjection) {\n+        return executeJoinQuery(table1, table2, query1, query2,\n+                DEFAULT_OPTIONS, DEFAULT_OPTIONS, joinPredicate,\n+                joinFunction, joinProjection);\n+    }\n+\n+    /**\n+     * Execute a join of 2 tables.\n+     *\n+     * @param table1         First table object.\n+     * @param table2         Second table to join with the first one.\n+     * @param query1         Predicate to filter entries in table 1.\n+     * @param query2         Predicate to filter entries in table 2.\n+     * @param queryOptions1  Query options to transform table 1 filtered values.\n+     * @param queryOptions2  Query options to transform table 2 filtered values.\n+     * @param joinPredicate  Predicate to filter entries during the join.\n+     * @param joinFunction   Function to merge entries.\n+     * @param joinProjection Project the merged entries.\n+     * @param <V1>           Type of Value in table 1.\n+     * @param <V2>           Type of Value in table 2.\n+     * @param <R>            Type of projected values from table 1 from type V.\n+     * @param <S>            Type of projected values from table 2 from type W.\n+     * @param <T>            Type of resultant value after merging type R and type S.\n+     * @param <U>            Type of value projected from T.\n+     * @return Result of query.\n+     */\n+    @Nonnull\n+    public <K1 extends Message, K2 extends Message,\n+            V1 extends Message, V2 extends Message,\n+            M1 extends Message, M2 extends Message,\n+            R, S, T, U>\n+    QueryResult<U> executeJoinQuery(\n+            @Nonnull final Table<K1, V1, M1> table1,\n+            @Nonnull final Table<K2, V2, M2> table2,\n+            @Nonnull final Predicate<CorfuStoreEntry<K1, V1, M1>> query1,\n+            @Nonnull final Predicate<CorfuStoreEntry<K2, V2, M2>> query2,\n+            @Nonnull final QueryOptions<K1, V1, M1, R> queryOptions1,\n+            @Nonnull final QueryOptions<K2, V2, M2, S> queryOptions2,\n+            @Nonnull final BiPredicate<R, S> joinPredicate,\n+            @Nonnull final BiFunction<R, S, T> joinFunction,\n+            final Function<T, U> joinProjection) {\n+        applyWritesForReadOnTable(table1);\n+        table1.getMetrics().incNumScans();\n+        applyWritesForReadOnTable(table1);\n+        table1.getMetrics().incNumScans();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 452}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMTEyNDg2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#pullrequestreview-522112486", "createdAt": "2020-11-02T23:51:24Z", "commit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo1MToyNFrOHsbAIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo1MjowNVrOHsbBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MTc5NA==", "bodyText": "what does table options contain ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516341794", "createdAt": "2020-11-02T23:51:24Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -111,6 +114,32 @@ public Timestamp getTimestamp() {\n         return runtime.getTableRegistry().getTable(namespace, tableName);\n     }\n \n+    /**\n+     * Creates and registers a Queue backed by a Table.\n+     * A table needs to be registered before it is used.\n+     *\n+     * @param namespace    Namespace of the table.\n+     * @param queueName    Queue's table name.\n+     * @param vClass       Class of the Queue's record Model.\n+     * @param tableOptions Table options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM0MjE4Nw==", "bodyText": "maybe r/CorfuRecordId/CorfuQueueId", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516342187", "createdAt": "2020-11-02T23:52:05Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -117,6 +117,25 @@ public CorfuRecordId(byte[] from) throws InvalidProtocolBufferException {\n             this.entryId = to.getEntryId();\n         }\n \n+        /**\n+         * @param from - the CorfuQueueIdMsg protobuf to convert from\n+         * @throws InvalidProtocolBufferException - invalid set of bytes\n+         */\n+        public CorfuRecordId(CorfuQueueIdMsg from) {\n+            this.txSequence = from.getTxSequence();\n+            this.entryId = from.getEntryId();\n+        }\n+\n+        /**\n+         * @return - the protobuf representation of CorfuRecordId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15804de4b84c74881538e9edf5dc6b9294e48290", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/15804de4b84c74881538e9edf5dc6b9294e48290", "committedDate": "2020-10-31T06:03:10Z", "message": "CorfuStore: Refactor to remove code duplication & let api change fast"}, "afterCommit": {"oid": "af8043dd0d53a176f4a7511321f4c0727b575f11", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/af8043dd0d53a176f4a7511321f4c0727b575f11", "committedDate": "2020-11-03T07:09:56Z", "message": "CorfuStoreShim: Provide a commitCallback with final protobufs after commit()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjYzNjI5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#pullrequestreview-522263629", "createdAt": "2020-11-03T08:20:08Z", "commit": {"oid": "af8043dd0d53a176f4a7511321f4c0727b575f11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMDowOFrOHsj7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMDowOFrOHsj7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4Nzk3OA==", "bodyText": "Should this be inside the if (args.length > 0) {} ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r516487978", "createdAt": "2020-11-03T08:20:08Z", "author": {"login": "Lujie1996"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStreamEntry.java", "diffHunk": "@@ -121,4 +121,44 @@ public CorfuStreamEntry(K key, V payload, M metadata, long epoch, long address,\n \n         return new CorfuStreamEntry<K, V, M>(key, payload, metadata, epoch, address, operationType);\n     }\n+\n+    /**\n+     *  Convert an SMREntry into a CorfuStreamEntry when the SMR arguments have clear types\n+     *  (like if called from a commit callback)\n+     * @param entry - the entry to convert from.\n+     * @param epoch - the epoch this entry was written to/will be written to.\n+     */\n+    public static\n+    CorfuStreamEntry fromSMREntry(@Nonnull SMREntry entry, final long epoch) {\n+\n+        long address = entry.getGlobalAddress();\n+\n+        OperationType operationType;\n+        switch(entry.getSMRMethod()) {\n+            case \"put\":\n+            case \"putAll\":\n+                operationType = OperationType.UPDATE;\n+                break;\n+            case \"clear\":\n+                operationType = OperationType.CLEAR;\n+                break;\n+            case \"remove\":\n+                operationType = OperationType.DELETE;\n+                break;\n+            default:\n+                throw new RuntimeException(\"SMRMethod \"+entry.getSMRMethod()\n+                        + \" cannot be translated to CorfuStreamEntry\");\n+        }\n+        Object[] args = entry.getSMRArguments();\n+        if (args.length > 0) {\n+            if (args.length > 1) {\n+                CorfuRecord record = (CorfuRecord) args[1];\n+                return new CorfuStreamEntry((Message)args[0],\n+                        record.getPayload(), record.getMetadata(), 0, address, operationType);\n+            }\n+        }\n+\n+        return new CorfuStreamEntry((Message)args[0],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af8043dd0d53a176f4a7511321f4c0727b575f11"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af8043dd0d53a176f4a7511321f4c0727b575f11", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/af8043dd0d53a176f4a7511321f4c0727b575f11", "committedDate": "2020-11-03T07:09:56Z", "message": "CorfuStoreShim: Provide a commitCallback with final protobufs after commit()"}, "afterCommit": {"oid": "8c2b30408cc05736bb79d7858a113278acfe60e9", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8c2b30408cc05736bb79d7858a113278acfe60e9", "committedDate": "2020-11-04T01:46:15Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c2b30408cc05736bb79d7858a113278acfe60e9", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8c2b30408cc05736bb79d7858a113278acfe60e9", "committedDate": "2020-11-04T01:46:15Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given"}, "afterCommit": {"oid": "b92dea815bba983e3059899f0c477015fe8ae0ec", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b92dea815bba983e3059899f0c477015fe8ae0ec", "committedDate": "2020-11-04T07:14:39Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b92dea815bba983e3059899f0c477015fe8ae0ec", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b92dea815bba983e3059899f0c477015fe8ae0ec", "committedDate": "2020-11-04T07:14:39Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback"}, "afterCommit": {"oid": "370a0443025495e21d5235b51567266380d60522", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/370a0443025495e21d5235b51567266380d60522", "committedDate": "2020-11-04T20:09:43Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzI0ODUz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#pullrequestreview-523724853", "createdAt": "2020-11-04T20:50:40Z", "commit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1MDo0MFrOHtpOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzo0NDowNVrOHtttzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzQ0Ng==", "bodyText": "nit - space before colon :", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517623446", "createdAt": "2020-11-04T20:50:40Z", "author": {"login": "pankti-m"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -143,9 +144,11 @@ public int printTable(String namespace, String tablename) {\n                     builder = new StringBuilder(\"\\nKey:\\n\")\n                             .append(JsonFormat.printer().print(entry.getKey().getKey()))\n                             .append(\"\\nPayload:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getPayload()))\n+                            .append(entry.getValue() != null && entry.getValue().getPayload() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getPayload())   : \"\")\n                             .append(\"\\nMetadata:\\n\")\n-                            .append(JsonFormat.printer().print(entry.getValue().getMetadata()))\n+                            .append(entry.getValue() != null && entry.getValue().getMetadata() != null ?\n+                                    JsonFormat.printer().print(entry.getValue().getMetadata()): \"\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzk0Mg==", "bodyText": "any reason for changing this?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517623942", "createdAt": "2020-11-04T20:51:39Z", "author": {"login": "pankti-m"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -233,11 +236,11 @@ public int loadTable(String namespace, String tablename, int numItems, int batch\n             if (diskPath != null) {\n                 optionsBuilder.persistentDataPath(Paths.get(diskPath));\n             }\n-            final Table<TableName, TableName, TableName> table = store.openTable(\n+            final Table<TableName, TableName, CorfuStoreMetadata.Timestamp> table = store.openTable(\n                     namespace, tablename,\n                     TableName.class,\n                     TableName.class,\n-                    TableName.class,\n+                    CorfuStoreMetadata.Timestamp.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNzk2MQ==", "bodyText": "all get thrown for the same reason?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517627961", "createdAt": "2020-11-04T20:59:30Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -111,6 +114,32 @@ public Timestamp getTimestamp() {\n         return runtime.getTableRegistry().getTable(namespace, tableName);\n     }\n \n+    /**\n+     * Creates and registers a Queue backed by a Table.\n+     * A table needs to be registered before it is used.\n+     *\n+     * @param namespace    Namespace of the table.\n+     * @param queueName    Queue's table name.\n+     * @param vClass       Class of the Queue's record Model.\n+     * @param tableOptions Table options.\n+     * @param <V>          Value type.\n+     * @return Table instance.\n+     * @throws NoSuchMethodException     Thrown if key/value class are not protobuf classes.\n+     * @throws InvocationTargetException Thrown if key/value class are not protobuf classes.\n+     * @throws IllegalAccessException    Thrown if key/value class are not protobuf classes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODMyOQ==", "bodyText": "nit - updated -> update", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517628329", "createdAt": "2020-11-04T21:00:13Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -183,6 +208,22 @@ public TxnContext txn(@Nonnull final String namespace, IsolationLevel isolationL\n                 isolationLevel);\n     }\n \n+    /**\n+     * Return the address of the latest updated made in this table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODU5OA==", "bodyText": "what is the use-case of this for an application?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517628598", "createdAt": "2020-11-04T21:00:48Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStore.java", "diffHunk": "@@ -183,6 +208,22 @@ public TxnContext txn(@Nonnull final String namespace, IsolationLevel isolationL\n                 isolationLevel);\n     }\n \n+    /**\n+     * Return the address of the latest updated made in this table.\n+     *\n+     * @param namespace - namespace that this table belongs to.\n+     * @param tableName - table name of this table without the namespace prefixed in.\n+     * @return stream tail of this table.\n+     */\n+    public long getHighestSequence(@Nonnull final String namespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3MzU2Ng==", "bodyText": "can we have only 1 check - arg.length > 1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517673566", "createdAt": "2020-11-04T22:40:28Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuStreamEntry.java", "diffHunk": "@@ -121,4 +106,51 @@ public CorfuStreamEntry(K key, V payload, M metadata, long epoch, long address,\n \n         return new CorfuStreamEntry<K, V, M>(key, payload, metadata, epoch, address, operationType);\n     }\n+\n+    private static OperationType getOperationType(@Nonnull SMREntry entry) {\n+        OperationType operationType;\n+        switch (entry.getSMRMethod()) {\n+            case \"put\":\n+            case \"putAll\":\n+                operationType = OperationType.UPDATE;\n+                break;\n+            case \"clear\":\n+                operationType = OperationType.CLEAR;\n+                break;\n+            case \"remove\":\n+                operationType = OperationType.DELETE;\n+                break;\n+            default:\n+                throw new RuntimeException(\"SMRMethod \"+entry.getSMRMethod()\n+                        + \" cannot be translated to any known operation type\");\n+        }\n+        return operationType;\n+    }\n+\n+    /**\n+     *  Convert an SMREntry into a CorfuStreamEntry when the SMR arguments have clear types\n+     *  (like if called from a commit callback)\n+     * @param entry - the entry to convert from.\n+     * @param epoch - the epoch this entry was written to/will be written to.\n+     */\n+    public static\n+    CorfuStreamEntry fromSMREntry(@Nonnull SMREntry entry, final long epoch) {\n+\n+        long address = entry.getGlobalAddress();\n+\n+        OperationType operationType = getOperationType(entry);\n+        Object[] args = entry.getSMRArguments();\n+        if (args.length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4Mjk1MA==", "bodyText": "object -> name", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517682950", "createdAt": "2020-11-04T23:04:06Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContext.java", "diffHunk": "@@ -328,12 +455,150 @@ int count(@Nonnull final Table<K, V, M> table) {\n         return table.scanAndFilterByEntry(entryPredicate);\n     }\n \n+    /**\n+     * Scan and filter by entry.\n+     *\n+     * @param tableName table object to filter the entries on.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4MzU5OA==", "bodyText": "will this not implement auto-closeable anymore?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517683598", "createdAt": "2020-11-04T23:05:48Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -18,22 +28,19 @@\n  * Created by hisundar on 2020-09-16\n  */\n @Slf4j\n-public class TxnContextShim implements AutoCloseable {\n-    /**\n-     * Internal CorfuStore's txnContext\n-     */\n-    private TxnContext txnContext;\n+public class TxnContextShim extends TxnContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5NDc4MA==", "bodyText": "wont the applications need significant corfu-internal understanding to process these entries?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517694780", "createdAt": "2020-11-04T23:38:09Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/TxnContextShim.java", "diffHunk": "@@ -175,196 +227,49 @@ TxnContextShim putRecord(@Nonnull Table<K, V, M> table,\n     }\n \n     /**\n-     * touch() a key to generate a conflict on it. The value will not be modified.\n-     *\n-     * @param table    Table object to perform the touch() in.\n-     * @param key      Key of the record.\n-     * @param <K>      Type of Key.\n-     * @param <V>      Type of Value.\n-     * @param <M>      Type of Metadata.\n-     * @return TxnContext instance.\n-     * @throws UnsupportedOperationException if attempted on a non-existing object.\n-     */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    TxnContextShim touch(@Nonnull Table<K, V, M> table,\n-                         @Nonnull final K key) {\n-        this.txnContext = txnContext.touch(table, key);\n-        return this;\n-    }\n-\n-    /**\n-     * touch() variant that accepts a table name instead of table object.\n-     */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    TxnContextShim touch(@Nonnull String tableName,\n-                         @Nonnull final K key) {\n-        return this.touch(txnContext.getTable(tableName), key);\n-    }\n-\n-    /**\n-     *\n-     * @param table - table object to test if record exists\n-     * @param key - key or identifier to test for existence.\n-     * @param <K> - type of the key\n-     * @param <V> - type of payload or value\n-     * @param <M> - type of metadata\n-     * @return true if record exists and false if record does not exist.\n+     * Protobuf objects are immutable. So any metadata modifications made here won't be\n+     * reflected back into the caller's in-memory object directly.\n+     * The caller is only really interested in the modified values of those transactions\n+     * that successfully commit.\n+     * To reflect metadata changes made here, we modify commit() to accept a callback\n+     * that carries all the final values of the changes made by this transaction.\n      */\n-    @Nonnull\n-    public <K extends Message, V extends Message, M extends Message>\n-    boolean isExists(@Nonnull Table<K, V, M> table, @Nonnull final K key) {\n-        CorfuStoreEntry<K, V, M> record = this.txnContext.getRecord(table, key);\n-        return record.getPayload() != null;\n+    public interface CommitCallback {\n+        /**\n+         * This callback returns a list of stream entries as opposed to CorfuStoreEntries\n+         * because if this transaction had operations like clear() then the CorfuStoreEntry\n+         * would just be empty.\n+         *\n+         * @param mutations - A group of all tables touched by this transaction along with\n+         *                    the updates made in each table.\n+         */\n+        void onCommit(Map<String, List<CorfuStreamEntry>> mutations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY5Njk3NA==", "bodyText": "is null schema allowed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2806#discussion_r517696974", "createdAt": "2020-11-04T23:44:05Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/CorfuStoreBrowserIT.java", "diffHunk": "@@ -256,7 +256,7 @@ public void browserRegistryTableTest() throws\n                 tableName,\n                 SampleSchema.Uuid.class,\n                 SampleSchema.Uuid.class,\n-                SampleSchema.Uuid.class,\n+                null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "370a0443025495e21d5235b51567266380d60522"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "370a0443025495e21d5235b51567266380d60522", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/370a0443025495e21d5235b51567266380d60522", "committedDate": "2020-11-04T20:09:43Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback"}, "afterCommit": {"oid": "2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "committedDate": "2020-11-05T21:05:59Z", "message": "CorfuStore: Make merge an explicit callback with table object passed in"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2bb0ec268cf7bc78b8ef854967b3a9fa1ea582f9", "committedDate": "2020-11-05T21:05:59Z", "message": "CorfuStore: Make merge an explicit callback with table object passed in"}, "afterCommit": {"oid": "b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "author": {"user": {"login": "WenbinZhu", "name": "Wenbin Zhu"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "committedDate": "2020-11-06T01:04:57Z", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0470fa00130c038d52062c0dd637d46b7abcb794", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0470fa00130c038d52062c0dd637d46b7abcb794", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuBrowser: Don't throw NullPointerException if metadata is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a875119644845bef2c00adf39da24224d3e0362", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0a875119644845bef2c00adf39da24224d3e0362", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Move getHighestSequence() to CorfuStore from Table to avoid opening table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b0979d3a2fdaa5c7ae1d71c0d4d728ba680d75", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a3b0979d3a2fdaa5c7ae1d71c0d4d728ba680d75", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Add support for join queries & predicates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d249636cb299c6b4462a3b6aea286a6c20519592", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d249636cb299c6b4462a3b6aea286a6c20519592", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Add Queue Api enqueue() and entryList()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e4cbb985c24f6b364425ce9c053ffe04362f43", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/96e4cbb985c24f6b364425ce9c053ffe04362f43", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Refactor to remove code duplication & let api change fast"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d47aef5259897c0617b6d71629798e487d806a4", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2d47aef5259897c0617b6d71629798e487d806a4", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStoreShim: Provide a commitCallback with final protobufs after commit()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9bc19defb6e358e5bb49ebdba86cd3a620194f", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3b9bc19defb6e358e5bb49ebdba86cd3a620194f", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Populate metadata even if null when metadata schema is given\n\n+Test case for the commitCallback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b6e28f96146e3ce6e12c4ddfb0a1379ea8ea74", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a0b6e28f96146e3ce6e12c4ddfb0a1379ea8ea74", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStoreBrowser: listenOnTable to test Streaming latencies\n\nData can be loaded in one node and listened on another node."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216d45b18a18d8a78cf6ce0087a2308939e84f72", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/216d45b18a18d8a78cf6ce0087a2308939e84f72", "committedDate": "2020-11-07T03:52:07Z", "message": "CorfuStore: Make merge an explicit callback with table object passed in"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "author": {"user": {"login": "WenbinZhu", "name": "Wenbin Zhu"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b03f2f1b7d492de9f66883bbb3bbff97ecc99f2f", "committedDate": "2020-11-06T01:04:57Z", "message": "CorfuStore streaming redesign part 1 - interfaces.\n\nImplements backward compatible interfaces for CorfuStore streaming redesign."}, "afterCommit": {"oid": "91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "committedDate": "2020-11-08T02:41:40Z", "message": "CorfuStore: Make TxnContext constructor public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "committedDate": "2020-11-08T19:50:32Z", "message": "CorfuStore: Make TxnContext constructor public\n\nFix up test so that it only uses proto from runtime\nThis allows us to port the same test into consumer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/91ae555ed63cfbd20edd1b62bb17b7cd77867b19", "committedDate": "2020-11-08T02:41:40Z", "message": "CorfuStore: Make TxnContext constructor public"}, "afterCommit": {"oid": "5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5f8eb941e9b1da6c5bc2b46eaf35ab75e4f83a89", "committedDate": "2020-11-08T19:50:32Z", "message": "CorfuStore: Make TxnContext constructor public\n\nFix up test so that it only uses proto from runtime\nThis allows us to port the same test into consumer"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4119, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}