{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTY1Nzcw", "number": 2325, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzoyMlrODbEJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1NjoxMVrODcBgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2MjMyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzoyMlrOFiVn8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowMzoyMlrOFiVn8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDE5NA==", "bodyText": "r/away/a way/", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550194", "createdAt": "2020-01-28T00:03:22Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2NDI3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNDoyNVrOFiVpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNDoyNVrOFiVpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDQ4NQ==", "bodyText": "r/exhauseted/exhausted", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550485", "createdAt": "2020-01-28T00:04:25Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2NTA3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNDo0NFrOFiVpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNDo0NFrOFiVpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDYwMQ==", "bodyText": "r/decadency/dependency", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371550601", "createdAt": "2020-01-28T00:04:44Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA2OTc5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNzoxNlrOFiVsRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozMzo1NlrOFiXAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTMwMA==", "bodyText": "Should this be a parameter ? or is this formula always good.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371551300", "createdAt": "2020-01-28T00:07:16Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3Mjc1Mw==", "bodyText": "This maintains the current behavior, which uses the common thread pool. The common thread pool uses # of cpus - 1.\nI don't like it, but making this configurable is part of a bigger change to be able to pass a client context to different layers.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371572753", "createdAt": "2020-01-28T01:33:56Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTMwMA=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzA3MTk4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowODozOVrOFiVtsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMzo1NToyN1rOFkA1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ==", "bodyText": "I know i have seen this problem, but is there a way to create a test that will cause this deadlock. I am not holding the review for this but just want to see if something is possible.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371551665", "createdAt": "2020-01-28T00:08:39Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()\n                 .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+                .collect(Collectors.toCollection(ArrayList::new))).join();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     @Accessor\n     public Collection<Map.Entry<K, V>> scanAndFilterByEntry(\n             Predicate<? super Map.Entry<K, V>> entryPredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MzE3NA==", "bodyText": "Its a timing issue and there isn't a lot of control over how threads access the VLO.\nLet me think about how this can be tested.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r371573174", "createdAt": "2020-01-28T01:35:50Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()\n                 .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+                .collect(Collectors.toCollection(ArrayList::new))).join();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     @Accessor\n     public Collection<Map.Entry<K, V>> scanAndFilterByEntry(\n             Predicate<? super Map.Entry<K, V>> entryPredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxODU0NA==", "bodyText": "Without a test case it is hard to be convinced.\nA small test may help such as with a thread pool of 4 and each start with try to hold a common lock, then the successful one will try to do parallel work, this could lead to a possible deadlock.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372218544", "createdAt": "2020-01-29T07:11:24Z", "author": {"login": "xiaoqin2012"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()\n                 .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+                .collect(Collectors.toCollection(ArrayList::new))).join();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     @Accessor\n     public Collection<Map.Entry<K, V>> scanAndFilterByEntry(\n             Predicate<? super Map.Entry<K, V>> entryPredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwNjc1OA==", "bodyText": "This race condition is really tricky to reproduce because of timing. I wasn't able to do it with latches.\nApparent, the usage of parallel stream with the common fork-join pool has unspecified behavior\nhttps://stackoverflow.com/a/29272776", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373306758", "createdAt": "2020-01-31T03:55:27Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()\n                 .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+                .collect(Collectors.toCollection(ArrayList::new))).join();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     @Accessor\n     public Collection<Map.Entry<K, V>> scanAndFilterByEntry(\n             Predicate<? super Map.Entry<K, V>> entryPredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTY2NQ=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDc2MTc3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNTowMToyNVrOFjffLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozNzo0MFrOFj-ayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MDM2Ng==", "bodyText": "Is it cleaner to make the factory an anomymous class instead of a private class field since it's only used here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372760366", "createdAt": "2020-01-30T05:01:25Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n+            factory, null, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzE0NQ==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267145", "createdAt": "2020-01-31T00:37:40Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a\n+    // circular dependency between the VersionLockedObject(VLO) lock and the common forkjoin thread pool. In order\n+    // to break the dependency, parallel stream operations have to execute on a separate pool that applications\n+    // cant use. For example, if there are 4 accessor threads all using the common forkjoin pool, one of the threads\n+    // can acquire the VLO lock and cause the other 3 threads to wait, but after acquiring the VLO lock, the thread\n+    // gets block on parallel stream, because the pool is exhauseted with threads that are trying to acquire the VLO\n+    // look, which creates a circular decadency. In other words, a deadlock.\n+    private static final ForkJoinPool.ForkJoinWorkerThreadFactory factory = pool -> {\n+        final ForkJoinWorkerThread worker = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);\n+        worker.setName(\"CorfuTable-Forkjoin-pool-\" + worker.getPoolIndex());\n+        return worker;\n+    };\n+\n+    private final static ForkJoinPool pool = new ForkJoinPool(Runtime.getRuntime().availableProcessors() - 1,\n+            factory, null, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MDM2Ng=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDc3Nzk4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNToxNToxOVrOFjfozQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozNzoxNlrOFj-adA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgyOQ==", "bodyText": "scanAndFilter/scanAndFilterByEntry are not the only functions using entryStream(), which uses parallel stream. Other functions like keySet() are using it as well, why only scanAndFilter/scanAndFilterByEntry are changed in the patch?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r372762829", "createdAt": "2020-01-30T05:15:19Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzA2MA==", "bodyText": "I didn't notice.\nI'm going to change them to use keySet and values instead, because those two methods shouldn't be exposed by PersistedStreamingMap", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267060", "createdAt": "2020-01-31T00:37:16Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +376,19 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n+        return pool.submit(() -> mainMap.entryStream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc2MjgyOQ=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzExMTQ0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1NToxOFrOFj2H-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozODo0MFrOFj-bvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTI1OA==", "bodyText": "small typo: away -> a way", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373131258", "createdAt": "2020-01-30T18:55:18Z", "author": {"login": "lixinchengdu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzM4OA==", "bodyText": "done", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267388", "createdAt": "2020-01-31T00:38:40Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTI1OA=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzExNDAxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODo1NjoxMVrOFj2JnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMDozODozM1rOFj-bnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTY3Ng==", "bodyText": "the can create -> they can create", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373131676", "createdAt": "2020-01-30T18:56:11Z", "author": {"login": "lixinchengdu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI2NzM1Ng==", "bodyText": "done", "url": "https://github.com/CorfuDB/CorfuDB/pull/2325#discussion_r373267356", "createdAt": "2020-01-31T00:38:33Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -61,6 +63,22 @@\n public class CorfuTable<K ,V> implements\n         ICorfuTable<K, V>, ICorfuSMR<CorfuTable<K, V>> {\n \n+    // Accessor/Mutator threads can interleave in away that creates a deadlock because the can create a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzMTY3Ng=="}, "originalCommit": {"oid": "b0b7c3cdc5dad6a754ca328340622b93a03f002a"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2064, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}