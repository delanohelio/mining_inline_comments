{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMjg3MjQ3", "number": 2595, "title": "Add ClusterManager Interface.", "bodyText": "Overview\nDescription:\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-07-02T05:38:39Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595", "merged": true, "mergeCommit": {"oid": "97d52aebbb8f0994f48e7a8635d262c658b85a93"}, "closed": true, "closedAt": "2020-07-09T19:57:07Z", "author": {"login": "xiaoqin2012"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw3qOmgH2gAyNDQzMjg3MjQ3OjBiMTRhYzJiMTc1MjZlMzA1ZWIyYjAwYjA3ZGUzNDhlMDQ4YWJjNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczUeycgH2gAyNDQzMjg3MjQ3Ojc0MjljMGYyNmVhOWFlNDZmMzE1NDJiMWY0YzJhZGY0ZmRmMmU2Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b14ac2b17526e305eb2b00b07de348e048abc69", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0b14ac2b17526e305eb2b00b07de348e048abc69", "committedDate": "2020-07-02T05:05:21Z", "message": "Add an interface and base class for cluster manager."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786bd187ccaea8f3672521f29187ebc23472953d", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/786bd187ccaea8f3672521f29187ebc23472953d", "committedDate": "2020-07-02T05:14:50Z", "message": "Add comments for CorfuReplicationSiteManagerAdapter interface.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/94e08c127359e2af33011f514a879a5f085b4327", "committedDate": "2020-07-02T05:37:38Z", "message": "Replace site with cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzg0NjQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-441384640", "createdAt": "2020-07-02T06:32:40Z", "commit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozMjo0MFrOGr_LmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozOToxOFrOGr_VZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw==", "bodyText": "Shouldn't we call the clusterManagerAdapter.start() at this point? so it connects to the remote topology provider? If someone implements the interface this will never be triggered.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777113", "createdAt": "2020-07-02T06:32:40Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng==", "bodyText": "redundant accesor in the interface, we can remove this one like in the others...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777646", "createdAt": "2020-07-02T06:34:12Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODAwMA==", "bodyText": "can we replace the siteManagers by Cluster/Topology Manager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778000", "createdAt": "2020-07-02T06:35:07Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODI4OA==", "bodyText": "can we rename to -> prepareClusterRoleChange", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778288", "createdAt": "2020-07-02T06:35:48Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODQ3NA==", "bodyText": "site -> cluster... filp -> flip", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778474", "createdAt": "2020-07-02T06:36:15Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODYwMQ==", "bodyText": "typo -> query", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778601", "createdAt": "2020-07-02T06:36:39Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication\n+    // status and do a smooth transition till the querry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTM5Nw==", "bodyText": "Site -> Cluster", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779397", "createdAt": "2020-07-02T06:38:43Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTYyMA==", "bodyText": "siteManager -> ClusterManager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779620", "createdAt": "2020-07-02T06:39:18Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "851493bf7195ea9ce2772abe30bb4b00ad5b2679", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/851493bf7195ea9ce2772abe30bb4b00ad5b2679", "committedDate": "2020-07-02T18:22:15Z", "message": "Address some comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5a1f7ea74cf2d10c9e2141ff3a02ed24b9d02a", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cc5a1f7ea74cf2d10c9e2141ff3a02ed24b9d02a", "committedDate": "2020-07-02T20:56:03Z", "message": "For clusterManagerAdapter, while registering the discovery service,\nit will register the callback at the upper layer too."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e6de0831d8e6390c8b4cb0f786e856855011d314", "committedDate": "2020-07-06T16:51:59Z", "message": "Fixed some comments with review feedbacks."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjkxMTMx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-443291131", "createdAt": "2020-07-06T17:53:24Z", "commit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MzoyNFrOGthbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowMjozNVrOGthvLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NjgzMg==", "bodyText": "Please remove this TODO right before this line as it is addressed with the rename.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450386832", "createdAt": "2020-07-06T17:53:24Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {\n         //TODO  It does not restrict ClusterRole change from standby -> active or active->standby however,\n         // our underlying only process one type. Maybe it's the naming? or revising the actual functionality?\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODY4NQ==", "bodyText": "But by definition all methods for an interface are 'public', that's why it is redundant. And sonarlint complains on the IDE for these things.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388685", "createdAt": "2020-07-06T17:56:44Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA==", "bodyText": "typo -> ClusterManger -> ClusterManager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388898", "createdAt": "2020-07-06T17:57:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ==", "bodyText": "Assuming that the start should call the register is a bit loose, as implementers might not do the right thing. Maybe it's better if we call from the DiscoveryService start (which could be more of a setDiscoveryService) and register.... and avoid issues coming from an implementer not really doing the register explicitly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450391855", "createdAt": "2020-07-06T18:02:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzAzODkz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-443303893", "createdAt": "2020-07-06T18:12:50Z", "commit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxMjo1MFrOGtiEng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyOTo1N1rOGtimMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NzM0Mg==", "bodyText": "+1.  My suggestion is to have a registerDiscoveryService() method here which is called by the discovery service to register itself.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450397342", "createdAt": "2020-07-06T18:12:50Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMzIxMg==", "bodyText": "does this register the discovery service?  If so, my suggestion is to invoke it from discovery service instead.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450403212", "createdAt": "2020-07-06T18:24:39Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDE5Ng==", "bodyText": "is this class needed?  We already have a default implementation of the adapter.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450404196", "createdAt": "2020-07-06T18:26:31Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTExNg==", "bodyText": "this is not doing any registration...?  what does this method do?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405116", "createdAt": "2020-07-06T18:28:17Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     Thread thread = new Thread(siteManagerCallback);\n \n-    public void start() {\n+    public void register() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTkzNg==", "bodyText": "can we rename this also to prepareToBecomeStandby() or something like that?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405936", "createdAt": "2020-07-06T18:29:57Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();\n+    }\n+\n+    public void setLocalEndpoint(String endpoint) {\n+        this.localEndpoint = endpoint;\n+    }\n+\n+    /**\n+     * Will be called when the cluster change and a new configuration is sent over\n+     *\n+     * @param newTopologyConfigMsg\n+     */\n+    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n+        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n+            topologyConfig = newTopologyConfigMsg;\n+            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n+        }\n+    }\n+\n+    public void prepareClusterRoleChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDYzMDc0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-443463074", "createdAt": "2020-07-06T23:14:33Z", "commit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNDozM1rOGtp7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyMDowM1rOGtqBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTk5MQ==", "bodyText": "Is it possible that we can merge these two queryTopologyConfig functions? Maybe use a boolean parameter to indicate query from the local cache or not.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450525991", "createdAt": "2020-07-06T23:14:33Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjMzOQ==", "bodyText": "Should we have a unified name 'prepareToBecomeStandby()'?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450526339", "createdAt": "2020-07-06T23:15:42Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a cluster role type flip, it is the API used to notify the current log\n+     * replication node to prepare a cluster role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareClusterRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzU1Mg==", "bodyText": "Is this abstract class used to guarantee that all cluster managers have corfuReplicationDiscoveryService and topologyConfig?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450527552", "createdAt": "2020-07-06T23:20:03Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7d4ea794985e62b08688baccb1a4d12e40824580", "committedDate": "2020-07-07T19:42:42Z", "message": "Address comments.\n  * change name as register(discoveryService).\n  * collapse query API with a boolean."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjA1MjU2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-444205256", "createdAt": "2020-07-07T19:56:33Z", "commit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1NjozM1rOGuNcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1NjozM1rOGuNcfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ==", "bodyText": "Let's remove the TODO below this line.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451107965", "createdAt": "2020-07-07T19:56:33Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MjEwNjUw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-444210650", "createdAt": "2020-07-07T20:04:49Z", "commit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNDo0OVrOGuNspg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNToxOVrOGuNttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjEwMg==", "bodyText": "The start is still not being called. So, any implementation of the interface itself will miss running the start logic.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112102", "createdAt": "2020-07-07T20:04:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.register(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjI4MQ==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112281", "createdAt": "2020-07-07T20:05:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ=="}, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjM3Mg==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112372", "createdAt": "2020-07-07T20:05:19Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac3a9768158ef0ae9ff377cbc795d9cc6fee8986", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ac3a9768158ef0ae9ff377cbc795d9cc6fee8986", "committedDate": "2020-07-07T20:33:08Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ed2e47e4bffb563398639022acca03b44d95e31", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1ed2e47e4bffb563398639022acca03b44d95e31", "committedDate": "2020-07-08T04:32:16Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb", "committedDate": "2020-07-08T04:33:22Z", "message": "Merge branch 'xq/0701siteManagerInterface01' of https://github.com/CorfuDB/CorfuDB into xq/0701siteManagerInterface01"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76920fce3fb00c3319a182f1e66927bbc42bc84f", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/76920fce3fb00c3319a182f1e66927bbc42bc84f", "committedDate": "2020-07-08T18:53:24Z", "message": "Correct Behavior of Failed Negotiation + Leadership Retry (#2604)\n\n- If negotiation fails due to version or topologyConfigId mismatch\r\nthe behavior will be to retry negotiation.\r\n- Retry Leadership request if failed to query for a leader."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODYwODIx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-445860821", "createdAt": "2020-07-09T18:20:01Z", "commit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODYxMDEy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#pullrequestreview-445861012", "createdAt": "2020-07-09T18:20:18Z", "commit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMDoxOFrOGvcqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMDoxOFrOGvcqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTgxOQ==", "bodyText": "please remove this otherwise compilation will fail", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r452405819", "createdAt": "2020-07-09T18:20:18Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -364,6 +364,7 @@ public void runSiteSwitch() throws Exception {\n                assertThat(mapA1.containsKey(String.valueOf(i))).isTrue();\n             }\n \n+            System.out.print(\"\\nTest Succeeds!!!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09602fbfc1997f42a42eae3e09e5809350960ed8", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/09602fbfc1997f42a42eae3e09e5809350960ed8", "committedDate": "2020-07-09T19:46:29Z", "message": "Add an interface and base class for cluster manager."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "018fb6236118beaf0ec6dc1f22f3d58b8310644b", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/018fb6236118beaf0ec6dc1f22f3d58b8310644b", "committedDate": "2020-07-09T19:46:29Z", "message": "Add comments for CorfuReplicationSiteManagerAdapter interface.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1722ea9b1048f397a711d70b1d02b603ba57af28", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1722ea9b1048f397a711d70b1d02b603ba57af28", "committedDate": "2020-07-09T19:46:29Z", "message": "Replace site with cluster."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad6f8b83ceacde54524262d6892899f9b0aaf59", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/aad6f8b83ceacde54524262d6892899f9b0aaf59", "committedDate": "2020-07-09T19:46:29Z", "message": "Address some comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "993c7428e71dd8dd69ef0a6e7f4918317d5192fb", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/993c7428e71dd8dd69ef0a6e7f4918317d5192fb", "committedDate": "2020-07-09T19:46:29Z", "message": "For clusterManagerAdapter, while registering the discovery service,\nit will register the callback at the upper layer too."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b5ed6d67d0043a2f812e072ee93c290e1caca6", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b2b5ed6d67d0043a2f812e072ee93c290e1caca6", "committedDate": "2020-07-09T19:46:29Z", "message": "Fixed some comments with review feedbacks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2192f51bcfc563defbe4ed81cd2c640249e3eba", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e2192f51bcfc563defbe4ed81cd2c640249e3eba", "committedDate": "2020-07-09T19:46:29Z", "message": "Address comments.\n  * change name as register(discoveryService).\n  * collapse query API with a boolean."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cf9cf3fb80aa645b892f45316b37810fdd4ca6", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/59cf9cf3fb80aa645b892f45316b37810fdd4ca6", "committedDate": "2020-07-09T19:46:29Z", "message": "Address comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7429c0f26ea9ae46f31542b1f4c2adf4fdf2e628", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7429c0f26ea9ae46f31542b1f4c2adf4fdf2e628", "committedDate": "2020-07-09T19:47:57Z", "message": "Merge branch 'xq/0701siteManagerInterface01' of https://github.com/CorfuDB/CorfuDB into xq/0701siteManagerInterface01"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4195, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}