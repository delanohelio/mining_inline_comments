{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzQyMjE3", "number": 2332, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzoxMDo0OVrODbyXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzoxMToxMlrODbyXdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDYzMjkzOnYy", "diffSide": "RIGHT", "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzoxMDo0OVrOFjeTnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNDoxNToxNFrOFjfAKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0MTAyMw==", "bodyText": "Do you want a message for this exception?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2332#discussion_r372741023", "createdAt": "2020-01-30T03:10:49Z", "author": {"login": "hisundar"}, "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "diffHunk": "@@ -284,16 +297,20 @@ private VirtualMachineCloneSpec createLinuxCustomization(ImmutableMap<String, St\n     }\n \n     private Result<VmManager, UniverseException> cloneAndPowerOn(VirtualMachine vm) {\n-        VirtualMachinePowerState powerState = vm.getSummary().runtime.powerState;\n-        if (powerState == VirtualMachinePowerState.poweredOn) {\n-            return Result.ok(this);\n-        } else {\n-            return powerOn().map(taskInfo -> this);\n+        try {\n+            VirtualMachinePowerState powerState = vm.getSummary().runtime.powerState;\n+            if (powerState == VirtualMachinePowerState.poweredOn) {\n+                return Result.ok(this);\n+            } else {\n+                return powerOn().map(taskInfo -> this);\n+            }\n+        } catch (RuntimeException ex) {\n+            return Result.error(new UniverseException(ex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686ba242efc275deef17b80cba3e5d0776408f26"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1MjQyNQ==", "bodyText": "not needed, it's completely clear", "url": "https://github.com/CorfuDB/CorfuDB/pull/2332#discussion_r372752425", "createdAt": "2020-01-30T04:15:14Z", "author": {"login": "xnull"}, "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "diffHunk": "@@ -284,16 +297,20 @@ private VirtualMachineCloneSpec createLinuxCustomization(ImmutableMap<String, St\n     }\n \n     private Result<VmManager, UniverseException> cloneAndPowerOn(VirtualMachine vm) {\n-        VirtualMachinePowerState powerState = vm.getSummary().runtime.powerState;\n-        if (powerState == VirtualMachinePowerState.poweredOn) {\n-            return Result.ok(this);\n-        } else {\n-            return powerOn().map(taskInfo -> this);\n+        try {\n+            VirtualMachinePowerState powerState = vm.getSummary().runtime.powerState;\n+            if (powerState == VirtualMachinePowerState.poweredOn) {\n+                return Result.ok(this);\n+            } else {\n+                return powerOn().map(taskInfo -> this);\n+            }\n+        } catch (RuntimeException ex) {\n+            return Result.error(new UniverseException(ex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0MTAyMw=="}, "originalCommit": {"oid": "686ba242efc275deef17b80cba3e5d0776408f26"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDYzMzQ5OnYy", "diffSide": "RIGHT", "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMzoxMToxMlrOFjeT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNDoxNToyMVrOFjfAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0MTA5Nw==", "bodyText": "Maybe a message for this exception", "url": "https://github.com/CorfuDB/CorfuDB/pull/2332#discussion_r372741097", "createdAt": "2020-01-30T03:11:12Z", "author": {"login": "hisundar"}, "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "diffHunk": "@@ -210,33 +218,38 @@ public IpAddress getResolvedIpAddress() {\n         return getVm(universeParams.getTemplateVMName()).flatMap(vmTemplate -> {\n             log.info(\"Cloning the VM {} via vSphere {}\", vmName, universeParams.getVSphereUrl());\n \n-            Properties vmPropsResult = VmConfigPropertiesLoader\n-                    .loadVmProperties()\n-                    .get();\n+            try {\n \n-            ImmutableMap<String, String> vmProps = Maps.fromProperties(vmPropsResult);\n+                Properties vmPropsResult = VmConfigPropertiesLoader\n+                        .loadVmProperties()\n+                        .get();\n \n-            // Create customization for cloning process\n-            VirtualMachineCloneSpec cloneSpec = createLinuxCustomization(vmProps);\n+                ImmutableMap<String, String> vmProps = Maps.fromProperties(vmPropsResult);\n \n-            String folderProp = String.format(\n-                    \"vm%d.%s\", vmName.getIndex(), ResourceType.FOLDER.resource\n-            );\n+                // Create customization for cloning process\n+                VirtualMachineCloneSpec cloneSpec = createLinuxCustomization(vmProps);\n \n-            Folder folder;\n-            if (vmProps.containsKey(folderProp)) {\n-                ManagedObjectReference folderR = new ManagedObjectReference();\n-                folderR.setType(ResourceType.FOLDER.resource);\n+                String folderProp = String.format(\n+                        \"vm%d.%s\", vmName.getIndex(), ResourceType.FOLDER.resource\n+                );\n \n-                String prop = vmProps.get(folderProp);\n-                folderR.setVal(prop);\n+                Folder folder;\n+                if (vmProps.containsKey(folderProp)) {\n+                    ManagedObjectReference folderR = new ManagedObjectReference();\n+                    folderR.setType(ResourceType.FOLDER.resource);\n \n-                folder = new Folder(vmTemplate.getServerConnection(), folderR);\n-            } else {\n-                folder = (Folder) vmTemplate.getParent();\n-            }\n+                    String prop = vmProps.get(folderProp);\n+                    folderR.setVal(prop);\n \n-            return executeTask(() -> vmTemplate.cloneVM_Task(folder, vmName.getName(), cloneSpec));\n+                    folder = new Folder(vmTemplate.getServerConnection(), folderR);\n+                } else {\n+                    folder = (Folder) vmTemplate.getParent();\n+                }\n+\n+                return executeTask(() -> vmTemplate.cloneVM_Task(folder, vmName.getName(), cloneSpec));\n+            } catch (RuntimeException ex) {\n+                return Result.error(new UniverseException(ex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "686ba242efc275deef17b80cba3e5d0776408f26"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1MjQ0OA==", "bodyText": "not needed, it's completely clear", "url": "https://github.com/CorfuDB/CorfuDB/pull/2332#discussion_r372752448", "createdAt": "2020-01-30T04:15:21Z", "author": {"login": "xnull"}, "path": "it/src/main/java/org/corfudb/universe/universe/vm/VmManager.java", "diffHunk": "@@ -210,33 +218,38 @@ public IpAddress getResolvedIpAddress() {\n         return getVm(universeParams.getTemplateVMName()).flatMap(vmTemplate -> {\n             log.info(\"Cloning the VM {} via vSphere {}\", vmName, universeParams.getVSphereUrl());\n \n-            Properties vmPropsResult = VmConfigPropertiesLoader\n-                    .loadVmProperties()\n-                    .get();\n+            try {\n \n-            ImmutableMap<String, String> vmProps = Maps.fromProperties(vmPropsResult);\n+                Properties vmPropsResult = VmConfigPropertiesLoader\n+                        .loadVmProperties()\n+                        .get();\n \n-            // Create customization for cloning process\n-            VirtualMachineCloneSpec cloneSpec = createLinuxCustomization(vmProps);\n+                ImmutableMap<String, String> vmProps = Maps.fromProperties(vmPropsResult);\n \n-            String folderProp = String.format(\n-                    \"vm%d.%s\", vmName.getIndex(), ResourceType.FOLDER.resource\n-            );\n+                // Create customization for cloning process\n+                VirtualMachineCloneSpec cloneSpec = createLinuxCustomization(vmProps);\n \n-            Folder folder;\n-            if (vmProps.containsKey(folderProp)) {\n-                ManagedObjectReference folderR = new ManagedObjectReference();\n-                folderR.setType(ResourceType.FOLDER.resource);\n+                String folderProp = String.format(\n+                        \"vm%d.%s\", vmName.getIndex(), ResourceType.FOLDER.resource\n+                );\n \n-                String prop = vmProps.get(folderProp);\n-                folderR.setVal(prop);\n+                Folder folder;\n+                if (vmProps.containsKey(folderProp)) {\n+                    ManagedObjectReference folderR = new ManagedObjectReference();\n+                    folderR.setType(ResourceType.FOLDER.resource);\n \n-                folder = new Folder(vmTemplate.getServerConnection(), folderR);\n-            } else {\n-                folder = (Folder) vmTemplate.getParent();\n-            }\n+                    String prop = vmProps.get(folderProp);\n+                    folderR.setVal(prop);\n \n-            return executeTask(() -> vmTemplate.cloneVM_Task(folder, vmName.getName(), cloneSpec));\n+                    folder = new Folder(vmTemplate.getServerConnection(), folderR);\n+                } else {\n+                    folder = (Folder) vmTemplate.getParent();\n+                }\n+\n+                return executeTask(() -> vmTemplate.cloneVM_Task(folder, vmName.getName(), cloneSpec));\n+            } catch (RuntimeException ex) {\n+                return Result.error(new UniverseException(ex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc0MTA5Nw=="}, "originalCommit": {"oid": "686ba242efc275deef17b80cba3e5d0776408f26"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2072, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}