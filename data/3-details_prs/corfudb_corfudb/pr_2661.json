{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mjk3MzI0", "number": 2661, "title": "File descriptor leaks corfu 0.3.0.2", "bodyText": "Overview\nDescription:\nFile descriptor leaks fixes\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-07-27T17:21:23Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661", "merged": true, "mergeCommit": {"oid": "b87946907f1c361e447bb7e316604216045aefd0"}, "closed": true, "closedAt": "2020-08-15T05:41:16Z", "author": {"login": "xnull"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5Gs6RgFqTQ1NjA1ODUwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_BPlHABqjM2NTgyMDE5NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDU4NTA5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-456058509", "createdAt": "2020-07-27T19:08:15Z", "commit": {"oid": "b928db95d6f73b310ad712eee9a80b5b0b88e415"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQ2MjQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-456146240", "createdAt": "2020-07-27T21:24:33Z", "commit": {"oid": "b928db95d6f73b310ad712eee9a80b5b0b88e415"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MzMwMzE1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-456330315", "createdAt": "2020-07-28T06:16:13Z", "commit": {"oid": "39d3f163d119c85b6e8a609dae1b1352dc1126a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjoxNjoxM1rOG3-HUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjoxNjoxM1rOG3-HUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0MjU0Ng==", "bodyText": "Where is the epoch checks for reads?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r461342546", "createdAt": "2020-07-28T06:16:13Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -272,40 +293,44 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n         boolean cacheable = msg.getPayload().isCacheReadResult();\n         log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddress(), cacheable);\n \n-        ReadResponse rr = new ReadResponse();\n-        try {\n-            ILogData logData = dataCache.get(address, cacheable);\n-            if (logData == null) {\n-                rr.put(address, LogData.getEmpty(address));\n-            } else {\n-                rr.put(address, (LogData) logData);\n+        logUnitLock.acquireReadLockAndExecuteSync(() -> {\n+            ReadResponse rr = new ReadResponse();\n+            try {\n+                ILogData logData = dataCache.get(address, cacheable);\n+                if (logData == null) {\n+                    rr.put(address, LogData.getEmpty(address));\n+                } else {\n+                    rr.put(address, (LogData) logData);\n+                }\n+                r.sendResponse(ctx, msg, CorfuMsgType.READ_RESPONSE.payloadMsg(rr));\n+            } catch (DataCorruptionException e) {\n+                log.error(\"Data corruption exception while reading address {}\", address, e);\n+                r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION.payloadMsg(address));\n             }\n-            r.sendResponse(ctx, msg, CorfuMsgType.READ_RESPONSE.payloadMsg(rr));\n-        } catch (DataCorruptionException e) {\n-            log.error(\"Data corruption exception while reading address {}\", address, e);\n-            r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION.payloadMsg(address));\n-        }\n+        });\n     }\n \n     @ServerHandler(type = CorfuMsgType.MULTIPLE_READ_REQUEST)\n     public void multiRead(CorfuPayloadMsg<MultipleReadRequest> msg, ChannelHandlerContext ctx, IServerRouter r) {\n         boolean cacheable = msg.getPayload().isCacheReadResult();\n         log.trace(\"multiRead: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n \n-        ReadResponse rr = new ReadResponse();\n-        try {\n-            for (Long address : msg.getPayload().getAddresses()) {\n-                ILogData logData = dataCache.get(address, cacheable);\n-                if (logData == null) {\n-                    rr.put(address, LogData.getEmpty(address));\n-                } else {\n-                    rr.put(address, (LogData) logData);\n+        logUnitLock.acquireReadLockAndExecuteSync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d3f163d119c85b6e8a609dae1b1352dc1126a1"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MzM2NDk3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-456336497", "createdAt": "2020-07-28T06:29:44Z", "commit": {"oid": "39d3f163d119c85b6e8a609dae1b1352dc1126a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjoyOTo0NVrOG3-brA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNjoyOTo0NVrOG3-brA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM0Nzc1Ng==", "bodyText": "I think this style is an overkill. It's kind of convoluted. If you still wan't to use this, then I suggest moving the code to the entry point, which is processRequest, it's more centralized that way.\nAlso, wouldn't this swallow the exception ? On master, at least it's logged with uncaughtException.\nAnother cleaner solution  to consider is to shutdown the LogUnit executor and execute the reset logic on the IO thread. After the reset logic completes you can install a new executor. That way in-flight operations will time out on transition. As opposed to be being evaluated with an older epoch.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r461347756", "createdAt": "2020-07-28T06:29:45Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -472,4 +507,57 @@ public static LogUnitServerConfig parse(Map<String, Object> opts) {\n                     .build();\n         }\n     }\n+\n+    public static class LogUnitLock {\n+        private final ReadWriteLock resetLock = new ReentrantReadWriteLock();\n+\n+        private void acquireReadLockAndExecuteSync(Runnable action) {\n+\n+            acquireReadLock()\n+                    .thenApply(lock -> {\n+                        action.run();\n+                        return lock;\n+                    })\n+                    .whenComplete((lock, err) -> lock.unlock());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d3f163d119c85b6e8a609dae1b1352dc1126a1"}, "originalPosition": 308}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTAzMzEx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-458103311", "createdAt": "2020-07-30T06:28:51Z", "commit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyODo1MVrOG5U1lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyODo1MVrOG5U1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MzQxMg==", "bodyText": "Shouldn't this be based on serverContext.getLogUnitEpochWaterMark()?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r462763412", "createdAt": "2020-07-30T06:28:51Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -272,18 +290,29 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n         boolean cacheable = msg.getPayload().isCacheReadResult();\n         log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddress(), cacheable);\n \n-        ReadResponse rr = new ReadResponse();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n+\n         try {\n-            ILogData logData = dataCache.get(address, cacheable);\n-            if (logData == null) {\n-                rr.put(address, LogData.getEmpty(address));\n-            } else {\n-                rr.put(address, (LogData) logData);\n+            if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+                throw new WrongEpochException(serverContext.getServerEpoch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTA0MDcy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-458104072", "createdAt": "2020-07-30T06:30:26Z", "commit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMDoyNlrOG5U4MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMDoyNlrOG5U4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NDA4MQ==", "bodyText": "Can you put a comment to indicate that this has to be a synchronous call for the lock to take effect.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r462764081", "createdAt": "2020-07-30T06:30:26Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -383,28 +438,39 @@ public boolean isServerReadyToHandleMsg(CorfuMsg msg) {\n     private synchronized void resetLogUnit(CorfuPayloadMsg<Long> msg,\n                                            ChannelHandlerContext ctx, IServerRouter r) {\n \n+        if (msg.getPayload() <= serverContext.getLogUnitEpochWaterMark()\n+                || msg.getPayload() != serverContext.getServerEpoch()) {\n+            log.info(\"LogUnit Server Reset request received but reset already done.\");\n+            r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n+            return;\n+        }\n+\n         // Check if the reset request is with an epoch greater than the last reset epoch seen to\n-        // prevent multiple reset in the same epoch. and should be equal to the current router\n+        // prevent multiple reset in the same epoch and should be equal to the current router\n         // epoch to prevent stale reset requests from wiping out the data.\n-        if (msg.getPayload() > serverContext.getLogUnitEpochWaterMark()\n-                && msg.getPayload() == serverContext.getServerEpoch()) {\n-            serverContext.setLogUnitEpochWaterMark(msg.getPayload());\n-            batchWriter.addTask(RESET, msg)\n+        serverContext.setLogUnitEpochWaterMark(msg.getPayload());\n+\n+        Lock lock = resetLock.writeLock();\n+        lock.lock();\n+\n+        try {\n+            CompletableFuture<Void> cf = batchWriter\n+                    .addTask(RESET, msg)\n                     .thenRun(() -> {\n                         dataCache.invalidateAll();\n                         log.info(\"LogUnit Server Reset.\");\n                         r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n-                    }).exceptionally(ex -> {\n-                handleException(ex, ctx, msg, r);\n-                return null;\n-            });\n-        } else {\n-            log.info(\"LogUnit Server Reset request received but reset already done.\");\n-            r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n+                    })\n+                    .exceptionally(ex -> {\n+                        handleException(ex, ctx, msg, r);\n+                        return null;\n+                    });\n+            cf.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "originalPosition": 290}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTA4NzMx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-458108731", "createdAt": "2020-07-30T06:33:05Z", "commit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMzowNVrOG5U74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMzowNVrOG5U74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTAyNw==", "bodyText": "ERROR_DATA_CORRUPTION.msg() need to pass a long here. Please pull in #2612", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r462765027", "createdAt": "2020-07-30T06:33:05Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -292,19 +321,30 @@ public void multiRead(CorfuPayloadMsg<MultipleReadRequest> msg, ChannelHandlerCo\n         boolean cacheable = msg.getPayload().isCacheReadResult();\n         log.trace(\"multiRead: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n \n-        ReadResponse rr = new ReadResponse();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n+\n         try {\n-            for (Long address : msg.getPayload().getAddresses()) {\n-                ILogData logData = dataCache.get(address, cacheable);\n-                if (logData == null) {\n-                    rr.put(address, LogData.getEmpty(address));\n-                } else {\n-                    rr.put(address, (LogData) logData);\n+            ReadResponse rr = new ReadResponse();\n+            try {\n+                if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+                    throw new WrongEpochException(serverContext.getServerEpoch());\n                 }\n+\n+                for (Long address : msg.getPayload().getAddresses()) {\n+                    ILogData logData = dataCache.get(address, cacheable);\n+                    if (logData == null) {\n+                        rr.put(address, LogData.getEmpty(address));\n+                    } else {\n+                        rr.put(address, (LogData) logData);\n+                    }\n+                }\n+                r.sendResponse(ctx, msg, CorfuMsgType.READ_RESPONSE.payloadMsg(rr));\n+            } catch (DataCorruptionException e) {\n+                r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION.msg());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTIzNDQz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-458123443", "createdAt": "2020-07-30T06:42:42Z", "commit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0Mjo0MlrOG5VOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo0Mjo0MlrOG5VOng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2OTgyMg==", "bodyText": "You have to send back a WRONG_EPOCH and not throw an exception. Otherwise, the exception wont be handled.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r462769822", "createdAt": "2020-07-30T06:42:42Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -292,19 +321,30 @@ public void multiRead(CorfuPayloadMsg<MultipleReadRequest> msg, ChannelHandlerCo\n         boolean cacheable = msg.getPayload().isCacheReadResult();\n         log.trace(\"multiRead: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n \n-        ReadResponse rr = new ReadResponse();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n+\n         try {\n-            for (Long address : msg.getPayload().getAddresses()) {\n-                ILogData logData = dataCache.get(address, cacheable);\n-                if (logData == null) {\n-                    rr.put(address, LogData.getEmpty(address));\n-                } else {\n-                    rr.put(address, (LogData) logData);\n+            ReadResponse rr = new ReadResponse();\n+            try {\n+                if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+                    throw new WrongEpochException(serverContext.getServerEpoch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MTI0NTUx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-458124551", "createdAt": "2020-07-30T06:45:04Z", "commit": {"oid": "f776abef05681aff377ac1f17e6a175e18eee62a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "431787c66f919f12aa3bfbe9e026745c1c3ad845", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/431787c66f919f12aa3bfbe9e026745c1c3ad845", "committedDate": "2020-07-30T19:49:45Z", "message": "LogUnitServer lock"}, "afterCommit": {"oid": "760637155fb9c0aca3bee8947d1d7952d4ceca27", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/760637155fb9c0aca3bee8947d1d7952d4ceca27", "committedDate": "2020-07-31T17:07:31Z", "message": "fdl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Mzg5MDAx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-459389001", "createdAt": "2020-07-31T18:50:02Z", "commit": {"oid": "760637155fb9c0aca3bee8947d1d7952d4ceca27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo1MDowM1rOG6Slqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo1MDowM1rOG6Slqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3NTE0Nw==", "bodyText": "Might be a perf issue, not sure thought.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r463775147", "createdAt": "2020-07-31T18:50:03Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -128,13 +138,40 @@ public LogUnitServer(ServerContext serverContext) {\n         dataCache = new LogUnitServerCache(config, streamLog);\n         batchWriter = new BatchProcessor(streamLog, serverContext.getServerEpoch(), !config.isNoSync());\n \n-        logCleaner = new StreamLogCompaction(streamLog, 10, 45, TimeUnit.MINUTES, ServerContext.SHUTDOWN_TIMER);\n+        logCleaner = new StreamLogCompaction(\n+                streamLog, resetLock, 10, 45, TimeUnit.MINUTES, ServerContext.SHUTDOWN_TIMER\n+        );\n     }\n \n \n     @Override\n     protected void processRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        executor.submit(() -> getHandler().handle(msg, ctx, r));\n+        executor.submit(\n+                () -> {\n+                    switch (msg.getMsgType()) {\n+                        case READ_REQUEST:\n+                        case KNOWN_ADDRESS_REQUEST:\n+                        case COMPACT_REQUEST:\n+                            Lock lock = resetLock.readLock();\n+                            lock.lock();\n+\n+                            if (msg.getEpoch() != serverContext.getLogUnitEpochWaterMark()) {\n+                                r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760637155fb9c0aca3bee8947d1d7952d4ceca27"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5Mzg5MDQ5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-459389049", "createdAt": "2020-07-31T18:50:08Z", "commit": {"oid": "760637155fb9c0aca3bee8947d1d7952d4ceca27"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDM5NzIx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-460439721", "createdAt": "2020-08-04T01:37:47Z", "commit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDYyNzAx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-461062701", "createdAt": "2020-08-04T18:25:56Z", "commit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyNTo1NlrOG7sVHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoyNTo1NlrOG7sVHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI0NTQ3MQ==", "bodyText": "Could we have some comments on this read-write lock? Like how it should be used in the future?\nAnd looks like this PR is pretty different from #2616 , is this PR a subset?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r465245471", "createdAt": "2020-08-04T18:25:56Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -102,6 +107,8 @@\n \n     private ExecutorService executor;\n \n+    private final ReadWriteLock resetLock = new ReentrantReadWriteLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDQwMzA2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-460440306", "createdAt": "2020-08-04T01:39:48Z", "commit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTozOTo0OFrOG7ODbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMTo1MTowMlrOG7OO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0OTQyMg==", "bodyText": "Why this is removed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r464749422", "createdAt": "2020-08-04T01:39:48Z", "author": {"login": "WenbinZhu"}, "path": "checks.xml", "diffHunk": "@@ -235,11 +235,6 @@\n         </module>\n         <module name=\"OverloadMethodsDeclarationOrder\"/>\n         <module name=\"VariableDeclarationUsageDistance\"/>\n-        <module name=\"CustomImportOrder\">\n-            <property name=\"sortImportsInGroupAlphabetically\" value=\"true\"/>\n-            <property name=\"separateLineBetweenGroups\" value=\"true\"/>\n-            <property name=\"customImportOrderRules\" value=\"STATIC###THIRD_PARTY_PACKAGE\"/>\n-        </module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc1MjM4Mg==", "bodyText": "I think the lock should be put in streamLogFiles instead of here because most of the read requests are served by the cache, which doesn't require a lock, having a lock will be a waste in terms of performance. Also in-memory stream log does not require lock at any time.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r464752382", "createdAt": "2020-08-04T01:51:02Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -273,26 +291,34 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n             log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n         }\n \n-        ReadResponse rr = new ReadResponse();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d360d82af3b0eee553e19a94d26c34edacc00311"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjY5NDQ0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463669444", "createdAt": "2020-08-07T22:22:52Z", "commit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyMjo1M1rOG9qZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyMjo1M1rOG9qZiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMDk4NQ==", "bodyText": "The epoch check for reads was dropped from the last patch. Please re-add it.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r467310985", "createdAt": "2020-08-07T22:22:53Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -273,26 +295,34 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n             log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n         }\n \n-        ReadResponse rr = new ReadResponse();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n \n-        for (long address : msg.getPayload().getAddresses()) {\n-            try {\n-                ILogData logData = dataCache.get(address, cacheable);\n-                if (logData == null) {\n-                    rr.put(address, LogData.getEmpty(address));\n-                } else {\n-                    rr.put(address, (LogData) logData);\n+        try {\n+\n+            ReadResponse rr = new ReadResponse();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjcwNDI1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463670425", "createdAt": "2020-08-07T22:26:00Z", "commit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNjowMFrOG9qc0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNjowMFrOG9qc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTgyNQ==", "bodyText": "Epoch check after lock.lock().", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r467311825", "createdAt": "2020-08-07T22:26:00Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -303,26 +333,40 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n     private void getKnownAddressesInRange(CorfuPayloadMsg<KnownAddressRequest> msg,\n                                           ChannelHandlerContext ctx, IServerRouter r) {\n \n-        KnownAddressRequest request = msg.getPayload();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n+\n         try {\n-            Set<Long> knownAddresses = streamLog\n-                    .getKnownAddressesInRange(request.getStartRange(), request.getEndRange());\n-            r.sendResponse(ctx, msg,\n-                    CorfuMsgType.KNOWN_ADDRESS_RESPONSE.payloadMsg(knownAddresses));\n-        } catch (DataCorruptionException dc) {\n-            r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION\n-                    .payloadMsg(Address.NON_ADDRESS));\n-            return;\n-        } catch (Exception e) {\n-            handleException(e, ctx, msg, r);\n+            KnownAddressRequest request = msg.getPayload();\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjcwNTQ4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463670548", "createdAt": "2020-08-07T22:26:23Z", "commit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNjoyM1rOG9qdPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyNjoyM1rOG9qdPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMTkzMg==", "bodyText": "epoch check after lock.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r467311932", "createdAt": "2020-08-07T22:26:23Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -303,26 +333,40 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n     private void getKnownAddressesInRange(CorfuPayloadMsg<KnownAddressRequest> msg,\n                                           ChannelHandlerContext ctx, IServerRouter r) {\n \n-        KnownAddressRequest request = msg.getPayload();\n+        Lock lock = resetLock.readLock();\n+        lock.lock();\n+\n         try {\n-            Set<Long> knownAddresses = streamLog\n-                    .getKnownAddressesInRange(request.getStartRange(), request.getEndRange());\n-            r.sendResponse(ctx, msg,\n-                    CorfuMsgType.KNOWN_ADDRESS_RESPONSE.payloadMsg(knownAddresses));\n-        } catch (DataCorruptionException dc) {\n-            r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION\n-                    .payloadMsg(Address.NON_ADDRESS));\n-            return;\n-        } catch (Exception e) {\n-            handleException(e, ctx, msg, r);\n+            KnownAddressRequest request = msg.getPayload();\n+            try {\n+                Set<Long> knownAddresses = streamLog\n+                        .getKnownAddressesInRange(request.getStartRange(), request.getEndRange());\n+                r.sendResponse(ctx, msg,\n+                        CorfuMsgType.KNOWN_ADDRESS_RESPONSE.payloadMsg(knownAddresses));\n+            } catch (DataCorruptionException dc) {\n+                r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION\n+                        .payloadMsg(Address.NON_ADDRESS));\n+            } catch (Exception e) {\n+                handleException(e, ctx, msg, r);\n+            }\n+        } finally {\n+            lock.unlock();\n         }\n     }\n \n     @ServerHandler(type = CorfuMsgType.COMPACT_REQUEST)\n     private void handleCompactRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n         log.debug(\"handleCompactRequest: received a compact request {}\", msg);\n-        streamLog.compact();\n-        r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n+\n+        Lock lock = resetLock.writeLock();\n+        lock.lock();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "originalPosition": 254}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjcxMTE4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463671118", "createdAt": "2020-08-07T22:28:17Z", "commit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyODoxN1rOG9qe_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMjoyODoxN1rOG9qe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMxMjM4MQ==", "bodyText": "Maybe your test can't trigger the issue because of this (which was causing the leak). Why was it dropped?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r467312381", "createdAt": "2020-08-07T22:28:17Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/log/StreamLogFiles.java", "diffHunk": "@@ -1275,7 +1281,7 @@ public void reset() {\n         dataStore.resetStartingAddress();\n         dataStore.resetTailSegment();\n         logMetadata = new LogMetadata();\n-        writeChannels.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "412db26475a4a03628e90997a4453ebfb453dedc"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjgwMzA4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463680308", "createdAt": "2020-08-07T23:01:23Z", "commit": {"oid": "00f40e2e700313ca422a7f03f8fc92da58e0b67b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNjgyODA1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-463682805", "createdAt": "2020-08-07T23:10:35Z", "commit": {"oid": "00f40e2e700313ca422a7f03f8fc92da58e0b67b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxMDozNVrOG9rG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzoxMDozNVrOG9rG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMyMjU5Mw==", "bodyText": "Could you elaborate why this is checked here? From my understanding, a message type like READ_REQUEST or KNOWN_ADDRESS_REQUEST already have their epochs checked in the method epochIsValid from IServerRouter, since their ignoreEpoch fields are set as false. What's the difference between the getServerEpoch provided by the router versus the one provided by the context?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r467322593", "createdAt": "2020-08-07T23:10:35Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -128,13 +141,34 @@ public LogUnitServer(ServerContext serverContext) {\n         dataCache = new LogUnitServerCache(config, streamLog);\n         batchWriter = new BatchProcessor(streamLog, serverContext.getServerEpoch(), !config.isNoSync());\n \n-        logCleaner = new StreamLogCompaction(streamLog, 10, 45, TimeUnit.MINUTES, ServerContext.SHUTDOWN_TIMER);\n+        logCleaner = new StreamLogCompaction(\n+                streamLog, resetLock, 10, 45, TimeUnit.MINUTES, ServerContext.SHUTDOWN_TIMER\n+        );\n     }\n \n \n     @Override\n     protected void processRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        executor.submit(() -> getHandler().handle(msg, ctx, r));\n+        executor.submit(\n+                () -> {\n+                    switch (msg.getMsgType()) {\n+                        case READ_REQUEST:\n+                        case KNOWN_ADDRESS_REQUEST:\n+                        case COMPACT_REQUEST:\n+                            if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+                                CorfuPayloadMsg<Long> payload = new CorfuPayloadMsg<>(\n+                                        CorfuMsgType.WRONG_EPOCH,\n+                                        serverContext.getServerEpoch()\n+                                );\n+                                r.sendResponse(ctx, msg, payload);\n+                                return;\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00f40e2e700313ca422a7f03f8fc92da58e0b67b"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTA5NTEw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-467909510", "createdAt": "2020-08-14T22:42:02Z", "commit": {"oid": "c07086f6716e2a8c3a0ef72e06ced3925c385789"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjo0MjowM1rOHBFF0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzowMTowMVrOHBFWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NDAzNQ==", "bodyText": "Please put lock into StreamLogFiles or cache load (preferrably in StreamLogFiles). When you reset or do compaction, a lot of reads will be blocked, even those can be read from cache (actually 80-90% requests can be served by cache). That will create a cacading impact on read performance that accumulates.\nYour initial argument is about epoch check, but your epoch check is before lock, then it has nothing to do with where you put the lock.\nEven if you put the epoch check after lock, you can still put the lock and epoch check in LogUnitServerCache::handleRetrieval", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r470894035", "createdAt": "2020-08-14T22:42:03Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -273,26 +295,40 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n             log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n         }\n \n-        ReadResponse rr = new ReadResponse();\n+        if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n+                    serverContext.getServerEpoch()));\n+            return;\n+        }\n+\n+        Lock lock = resetLock.readLock();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c07086f6716e2a8c3a0ef72e06ced3925c385789"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NTcxOA==", "bodyText": "Epoch check here does not do much help. @Maithem 's point is after reset is done, reads that are blocked might be stale. That means reads have be waiting on lock, so the check should be after lock.\nIf you put it here just because tests are failing, then just remvoe epoch completely, as it doesn't do much, the epoch is checked on BaseServer right before entering here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r470895718", "createdAt": "2020-08-14T22:49:24Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -273,26 +295,40 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n             log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n         }\n \n-        ReadResponse rr = new ReadResponse();\n+        if (msg.getEpoch() != serverContext.getServerEpoch()) {\n+            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH,\n+                    serverContext.getServerEpoch()));\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c07086f6716e2a8c3a0ef72e06ced3925c385789"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NzIwMg==", "bodyText": "This comment should be above previous if block.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r470897202", "createdAt": "2020-08-14T22:56:25Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -374,28 +424,40 @@ public boolean isServerReadyToHandleMsg(CorfuMsg msg) {\n     private synchronized void resetLogUnit(CorfuPayloadMsg<Long> msg,\n                                            ChannelHandlerContext ctx, IServerRouter r) {\n \n+        if (msg.getPayload() <= serverContext.getLogUnitEpochWaterMark()\n+                || msg.getPayload() != serverContext.getServerEpoch()) {\n+            log.info(\"LogUnit Server Reset request received but reset already done.\");\n+            r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n+            return;\n+        }\n+\n         // Check if the reset request is with an epoch greater than the last reset epoch seen to\n-        // prevent multiple reset in the same epoch. and should be equal to the current router\n+        // prevent multiple reset in the same epoch and should be equal to the current router\n         // epoch to prevent stale reset requests from wiping out the data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c07086f6716e2a8c3a0ef72e06ced3925c385789"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5ODE5NA==", "bodyText": "Locking here is bad, the reset op is added to BatchProcessor, but will be run after all previous write operations in the queue are finished, during that all reads will be blocked. This is a performance issue.\nAlso if you put lock into streamLogFiles then you don't need to do cf.join() below.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r470898194", "createdAt": "2020-08-14T23:01:01Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -374,28 +424,40 @@ public boolean isServerReadyToHandleMsg(CorfuMsg msg) {\n     private synchronized void resetLogUnit(CorfuPayloadMsg<Long> msg,\n                                            ChannelHandlerContext ctx, IServerRouter r) {\n \n+        if (msg.getPayload() <= serverContext.getLogUnitEpochWaterMark()\n+                || msg.getPayload() != serverContext.getServerEpoch()) {\n+            log.info(\"LogUnit Server Reset request received but reset already done.\");\n+            r.sendResponse(ctx, msg, CorfuMsgType.ACK.msg());\n+            return;\n+        }\n+\n         // Check if the reset request is with an epoch greater than the last reset epoch seen to\n-        // prevent multiple reset in the same epoch. and should be equal to the current router\n+        // prevent multiple reset in the same epoch and should be equal to the current router\n         // epoch to prevent stale reset requests from wiping out the data.\n-        if (msg.getPayload() > serverContext.getLogUnitEpochWaterMark()\n-                && msg.getPayload() == serverContext.getServerEpoch()) {\n-            serverContext.setLogUnitEpochWaterMark(msg.getPayload());\n-            batchWriter.addTask(RESET, msg)\n+        serverContext.setLogUnitEpochWaterMark(msg.getPayload());\n+\n+        Lock lock = resetLock.writeLock();\n+        lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c07086f6716e2a8c3a0ef72e06ced3925c385789"}, "originalPosition": 292}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTI3NDAw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#pullrequestreview-467927400", "createdAt": "2020-08-15T00:05:33Z", "commit": {"oid": "b19b9fb1f603dbd4ef3fb26124e61afe7aaf93c0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowNTozM1rOHBGHDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDowNTozM1rOHBGHDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMDczNA==", "bodyText": "Please fix the indent.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2661#discussion_r470910734", "createdAt": "2020-08-15T00:05:33Z", "author": {"login": "WenbinZhu"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogUnitServer.java", "diffHunk": "@@ -273,26 +286,26 @@ public void read(CorfuPayloadMsg<ReadRequest> msg, ChannelHandlerContext ctx, IS\n             log.trace(\"read: {}, cacheable: {}\", msg.getPayload().getAddresses(), cacheable);\n         }\n \n-        ReadResponse rr = new ReadResponse();\n-\n-        for (long address : msg.getPayload().getAddresses()) {\n-            try {\n-                ILogData logData = dataCache.get(address, cacheable);\n-                if (logData == null) {\n-                    rr.put(address, LogData.getEmpty(address));\n-                } else {\n-                    rr.put(address, (LogData) logData);\n+            ReadResponse rr = new ReadResponse();\n+\n+            for (long address : msg.getPayload().getAddresses()) {\n+                try {\n+                    ILogData logData = dataCache.get(address, cacheable);\n+                    if (logData == null) {\n+                        rr.put(address, LogData.getEmpty(address));\n+                    } else {\n+                        rr.put(address, (LogData) logData);\n+                    }\n+                } catch (DataCorruptionException e) {\n+                    log.error(\n+                            \"Data corruption exception while reading addresses {}\",\n+                            msg.getPayload().getAddresses(),\n+                            e);\n+                    r.sendResponse(ctx, msg, CorfuMsgType.ERROR_DATA_CORRUPTION.payloadMsg(address));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b19b9fb1f603dbd4ef3fb26124e61afe7aaf93c0"}, "originalPosition": 171}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87267257c43f8ad970faf6ef785e7b5f10ed3f4f", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/87267257c43f8ad970faf6ef785e7b5f10ed3f4f", "committedDate": "2020-08-15T00:11:07Z", "message": "ident"}, "afterCommit": {"oid": "8d690a826d32ca95c90ffd786541835ef9f1b346", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8d690a826d32ca95c90ffd786541835ef9f1b346", "committedDate": "2020-08-15T00:28:34Z", "message": "File Descriptor leaks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d690a826d32ca95c90ffd786541835ef9f1b346", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8d690a826d32ca95c90ffd786541835ef9f1b346", "committedDate": "2020-08-15T00:28:34Z", "message": "File Descriptor leaks"}, "afterCommit": {"oid": "c500b904c62aee8e39837da38f7f90967a79b1e5", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c500b904c62aee8e39837da38f7f90967a79b1e5", "committedDate": "2020-08-15T00:33:27Z", "message": "File Descriptor leaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b8b2f4c94cfe1d561948743fce313716e9b3cba", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2b8b2f4c94cfe1d561948743fce313716e9b3cba", "committedDate": "2020-08-15T04:09:48Z", "message": "fdl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "461707036bc8a335bb8d5c4c7f1f404314bae09b", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/461707036bc8a335bb8d5c4c7f1f404314bae09b", "committedDate": "2020-08-15T04:09:48Z", "message": "File Descriptor leaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693707ba3c52195e004dbfba9dead8610beeffa2", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/693707ba3c52195e004dbfba9dead8610beeffa2", "committedDate": "2020-08-15T04:09:48Z", "message": "docker"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8696b50d6e471c690a2ee726a40338a46252996", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b8696b50d6e471c690a2ee726a40338a46252996", "committedDate": "2020-08-15T03:22:58Z", "message": "docker"}, "afterCommit": {"oid": "693707ba3c52195e004dbfba9dead8610beeffa2", "author": {"user": {"login": "xnull", "name": "Viacheslav"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/693707ba3c52195e004dbfba9dead8610beeffa2", "committedDate": "2020-08-15T04:09:48Z", "message": "docker"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4329, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}