{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODc3MzA5", "number": 2786, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNTo0NFrOEsOuQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OToyNlrOEtneJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE0MDE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNTo0NFrOHfbubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDozNTo0NFrOHfbubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMjE1OA==", "bodyText": "Writing a test to validate this scenario.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502722158", "createdAt": "2020-10-10T00:35:44Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {\n+        // Construct Log Replication Entry message used to complete the Snapshot Sync with info in the metadata manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM1NjM2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToyOTo0MVrOHfdYNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoyOTo1NFrOHgUIIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA==", "bodyText": "Is there a race condition here? These two methods are not atomic. Should we use getAndSet()?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502749238", "createdAt": "2020-10-10T05:29:41Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -422,8 +425,11 @@ private void processSnapshotMessage(LogReplicationEntry entry) {\n         }\n     }\n \n-    private void startSnapshotApplyAsync(LogReplicationEntry entry) {\n-        applyExecutor.submit(() -> startSnapshotApply(entry));\n+    private synchronized void startSnapshotApplyAsync(LogReplicationEntry entry) {\n+        if (!ongoingApply.get()) {\n+            ongoingApply.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3MzM0NQ==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503473345", "createdAt": "2020-10-12T18:47:12Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -422,8 +425,11 @@ private void processSnapshotMessage(LogReplicationEntry entry) {\n         }\n     }\n \n-    private void startSnapshotApplyAsync(LogReplicationEntry entry) {\n-        applyExecutor.submit(() -> startSnapshotApply(entry));\n+    private synchronized void startSnapshotApplyAsync(LogReplicationEntry entry) {\n+        if (!ongoingApply.get()) {\n+            ongoingApply.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA=="}, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjI0Mw==", "bodyText": "We can't use getAndSet cause we only want to set given the output of the get... But you're right we could have a race condition with the startSnapshotApply so I've synchronized that method as well!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503646243", "createdAt": "2020-10-13T03:29:54Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -422,8 +425,11 @@ private void processSnapshotMessage(LogReplicationEntry entry) {\n         }\n     }\n \n-    private void startSnapshotApplyAsync(LogReplicationEntry entry) {\n-        applyExecutor.submit(() -> startSnapshotApply(entry));\n+    private synchronized void startSnapshotApplyAsync(LogReplicationEntry entry) {\n+        if (!ongoingApply.get()) {\n+            ongoingApply.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTIzOA=="}, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM1NzczOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTozMToyN1rOHfdY4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzoyOTo1OVrOHgUISg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA==", "bodyText": "Need some log here", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r502749408", "createdAt": "2020-10-10T05:31:27Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ3NDE3Mg==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503474172", "createdAt": "2020-10-12T18:49:10Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA=="}, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0NjI4Mg==", "bodyText": "Done!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r503646282", "createdAt": "2020-10-13T03:29:59Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -512,6 +519,20 @@ public void shutdown() {\n         this.applyExecutor.shutdownNow();\n     }\n \n+    /**\n+     * Resume Snapshot Sync Apply\n+     *\n+     * In the event of restarts, a Snapshot Sync which had finished transfer can resume the apply stage.\n+     */\n+    public void resumeSnapshotApply() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTQwOA=="}, "originalCommit": {"oid": "cfd943317c739e40a5779c0d79f66ed2348b75d4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjY3ODMzOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0ODo0NlrOHhgiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OTowMVrOHhgiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODA1Ng==", "bodyText": "looks like this is being used for UFO, can we rename it accordingly so that it doesnt confuse with the existing cpAndTrim() variant?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898056", "createdAt": "2020-10-14T18:48:46Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -339,6 +457,99 @@ public void checkpointAndTrim(boolean active, List<CorfuTable> tables) {\n         checkpointAndTrimCorfuStore(cpRuntime, trimMark);\n     }\n \n+    public void verifyDataOnStandby(int expectedConsecutiveWrites) {\n+        for(Map.Entry<String, Table<Sample.StringKey, Sample.IntValue, Sample.Metadata>> entry : mapNameToMapStandby.entrySet()) {\n+\n+            log.debug(\"Verify Data on Standby's Table {}\", entry.getKey());\n+\n+            // Wait until data is fully replicated\n+            while (entry.getValue().count() != expectedConsecutiveWrites) {\n+                // Block until expected number of entries is reached\n+            }\n+\n+            log.debug(\"Number updates on Standby Map {} :: {} \", entry.getKey(), expectedConsecutiveWrites);\n+\n+            // Verify data is present in Standby Site\n+            assertThat(entry.getValue().count()).isEqualTo(expectedConsecutiveWrites);\n+\n+            for (int i = 0; i < (expectedConsecutiveWrites); i++) {\n+                assertThat(entry.getValue().get(Sample.StringKey.newBuilder().setKey(String.valueOf(i)).build()).getPayload()).isNotNull();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checkpoint and Trim Data Logs\n+     *\n+     * @param active true, checkpoint/trim on active cluster\n+     *               false, checkpoint/trim on standby cluster\n+     */\n+    public void checkpointAndTrim(boolean active) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODE3MQ==", "bodyText": "private?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898171", "createdAt": "2020-10-14T18:49:01Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -339,6 +457,99 @@ public void checkpointAndTrim(boolean active, List<CorfuTable> tables) {\n         checkpointAndTrimCorfuStore(cpRuntime, trimMark);\n     }\n \n+    public void verifyDataOnStandby(int expectedConsecutiveWrites) {\n+        for(Map.Entry<String, Table<Sample.StringKey, Sample.IntValue, Sample.Metadata>> entry : mapNameToMapStandby.entrySet()) {\n+\n+            log.debug(\"Verify Data on Standby's Table {}\", entry.getKey());\n+\n+            // Wait until data is fully replicated\n+            while (entry.getValue().count() != expectedConsecutiveWrites) {\n+                // Block until expected number of entries is reached\n+            }\n+\n+            log.debug(\"Number updates on Standby Map {} :: {} \", entry.getKey(), expectedConsecutiveWrites);\n+\n+            // Verify data is present in Standby Site\n+            assertThat(entry.getValue().count()).isEqualTo(expectedConsecutiveWrites);\n+\n+            for (int i = 0; i < (expectedConsecutiveWrites); i++) {\n+                assertThat(entry.getValue().get(Sample.StringKey.newBuilder().setKey(String.valueOf(i)).build()).getPayload()).isNotNull();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checkpoint and Trim Data Logs\n+     *\n+     * @param active true, checkpoint/trim on active cluster\n+     *               false, checkpoint/trim on standby cluster\n+     */\n+    public void checkpointAndTrim(boolean active) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODA1Ng=="}, "originalCommit": {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjY3OTc0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OToxMVrOHhgi5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OToxMVrOHhgi5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODI3OA==", "bodyText": "private?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898278", "createdAt": "2020-10-14T18:49:11Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -339,6 +457,99 @@ public void checkpointAndTrim(boolean active, List<CorfuTable> tables) {\n         checkpointAndTrimCorfuStore(cpRuntime, trimMark);\n     }\n \n+    public void verifyDataOnStandby(int expectedConsecutiveWrites) {\n+        for(Map.Entry<String, Table<Sample.StringKey, Sample.IntValue, Sample.Metadata>> entry : mapNameToMapStandby.entrySet()) {\n+\n+            log.debug(\"Verify Data on Standby's Table {}\", entry.getKey());\n+\n+            // Wait until data is fully replicated\n+            while (entry.getValue().count() != expectedConsecutiveWrites) {\n+                // Block until expected number of entries is reached\n+            }\n+\n+            log.debug(\"Number updates on Standby Map {} :: {} \", entry.getKey(), expectedConsecutiveWrites);\n+\n+            // Verify data is present in Standby Site\n+            assertThat(entry.getValue().count()).isEqualTo(expectedConsecutiveWrites);\n+\n+            for (int i = 0; i < (expectedConsecutiveWrites); i++) {\n+                assertThat(entry.getValue().get(Sample.StringKey.newBuilder().setKey(String.valueOf(i)).build()).getPayload()).isNotNull();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Checkpoint and Trim Data Logs\n+     *\n+     * @param active true, checkpoint/trim on active cluster\n+     *               false, checkpoint/trim on standby cluster\n+     */\n+    public void checkpointAndTrim(boolean active) {\n+        CorfuRuntime cpRuntime;\n+\n+        if (active) {\n+            cpRuntime = new CorfuRuntime(activeEndpoint).connect();\n+        } else {\n+            cpRuntime = new CorfuRuntime(standbyEndpoint).connect();\n+        }\n+\n+        checkpointAndTrimCorfuStore(cpRuntime);\n+    }\n+\n+    public void checkpointAndTrimCorfuStore(CorfuRuntime cpRuntime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjY4MDcxOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OToyNlrOHhgjfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxODo0OToyNlrOHhgjfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDg5ODQyOA==", "bodyText": "private?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2786#discussion_r504898428", "createdAt": "2020-10-14T18:49:26Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationAbstractIT.java", "diffHunk": "@@ -390,4 +601,30 @@ public void checkpointAndTrimCorfuStore(CorfuRuntime cpRuntime, Token trimMark)\n         cpRuntime.getAddressSpaceView().invalidateServerCaches();\n         cpRuntime.getAddressSpaceView().gc();\n     }\n+\n+    /**\n+     * Return the first map on active cluster (typical for cases where the number of map is set to 1)\n+     * @return first map on active cluster\n+     */\n+    public Table<Sample.StringKey, Sample.IntValue, Sample.Metadata> getActiveMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c68fe4391a1bc10c931dfdba0e70596cfc5958c0"}, "originalPosition": 331}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}