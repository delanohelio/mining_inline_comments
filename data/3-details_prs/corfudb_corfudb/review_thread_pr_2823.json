{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MzA1ODYy", "number": 2823, "reviewThreads": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MzowMVrOE4z1Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo1M1rOE_rQmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA0OTAzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MzowMVrOHy87wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1MzowMVrOHy87wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE4OTE4NA==", "bodyText": "Reformat imports.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523189184", "createdAt": "2020-11-13T19:53:01Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -13,18 +15,29 @@\n import org.corfudb.infrastructure.paxos.PaxosDataStore;\n import org.corfudb.protocols.wireprotocol.CorfuMsg;\n import org.corfudb.protocols.wireprotocol.CorfuMsgType;\n-import org.corfudb.protocols.wireprotocol.CorfuPayloadMsg;\n-import org.corfudb.protocols.wireprotocol.LayoutBootstrapRequest;\n-import org.corfudb.protocols.wireprotocol.LayoutCommittedRequest;\n-import org.corfudb.protocols.wireprotocol.LayoutMsg;\n-import org.corfudb.protocols.wireprotocol.LayoutPrepareRequest;\n-import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n-import org.corfudb.protocols.wireprotocol.LayoutProposeRequest;\n-import org.corfudb.protocols.wireprotocol.LayoutProposeResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA1NDcyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NDo0NlrOHy8_BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NjoxMlrOHy9Bsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDAyMA==", "bodyText": "Why can't you remove this in this patch? It's not needed. I think we should eagerly remove dead code paths because its hard to track them and try to delete them later.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523190020", "createdAt": "2020-11-13T19:54:46Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -66,6 +79,7 @@\n \n     /**\n      * HandlerMethod for this server.\n+     * [RM] Remove this after Protobuf for RPC Completion\n      */\n     @Getter\n     private final HandlerMethods handler =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDcwNw==", "bodyText": "Note: It was made abstract in the other PR (2812), so a getHandler method is required.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523190707", "createdAt": "2020-11-13T19:56:12Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -66,6 +79,7 @@\n \n     /**\n      * HandlerMethod for this server.\n+     * [RM] Remove this after Protobuf for RPC Completion\n      */\n     @Getter\n     private final HandlerMethods handler =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDAyMA=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA1NzQ0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NTozNlrOHy9ApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NTozNlrOHy9ApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDQzNw==", "bodyText": "Throw an UnsupportedOperationException instead.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523190437", "createdAt": "2020-11-13T19:55:36Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -86,6 +100,7 @@\n \n     @Override\n     public boolean isServerReadyToHandleMsg(CorfuMsg msg) {\n+        //[RM] Remove this after Protobuf for RPC Completion\n         return getState() == ServerState.READY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA1ODI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NTo1MFrOHy9BKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1NTo1MFrOHy9BKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MDU2OQ==", "bodyText": "Throw an UnsupportedOperationException instead.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523190569", "createdAt": "2020-11-13T19:55:50Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -118,6 +133,7 @@ public LayoutServer(@Nonnull ServerContext serverContext) {\n \n     @Override\n     protected void processRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+        //[RM] Remove this after Protobuf for RPC Completion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA2MTExOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1Njo1NFrOHy9DAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1Njo1NFrOHy9DAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MTA0Mw==", "bodyText": "Dead code, delete method.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523191043", "createdAt": "2020-11-13T19:56:54Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -132,6 +148,7 @@ public void shutdown() {\n         executor.shutdown();\n     }\n \n+    //[RM] Remove this after Protobuf for RPC Completion\n     private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA2NjczOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1ODo0MVrOHy9GWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTo1ODo0MVrOHy9GWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MTg5OA==", "bodyText": "I would pass the RequestMsg and extract the header just before it is needed. Passing header around seems a little strange.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523191898", "createdAt": "2020-11-13T19:58:41Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA3MTM5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDowMDowOFrOHy9JIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDowMDowOFrOHy9JIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5MjYxMQ==", "bodyText": "The old implementation also logs a message. Can you put that back, but as a debug log?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523192611", "createdAt": "2020-11-13T20:00:08Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDA4OTIzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDowNTo1NVrOHy9TxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDowNTo1NVrOHy9TxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5NTMzMw==", "bodyText": "I know you didn't write this, but I think its cleaner to make the isBootstrapped such that it doesn't have a side effect. Maybe something like this:\nif(!isBootstrapped(requestHeader, ctx, r)) {\n   r.sendNoBootstrapError(reqHeader, ctx);\n}", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523195333", "createdAt": "2020-11-13T20:05:55Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+\n+            if(layout.getClusterId() == null) {\n+                log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                        requestHeader.getRequestId(), layout);\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, false);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.NACK));\n+            } else {\n                 setCurrentLayout(layout);\n                 serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, true);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.ACK));\n             }\n         } else {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleMessageLayoutBootstrap: Got a request to bootstrap a server which is \"\n-                    + \"already bootstrapped, rejecting!\");\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a prepare message if the rank is higher than any accepted so far.\n      *\n-     * @param msg corfu message containing LAYOUT_PREPARE\n+     * @param req corfu message containing PREPARE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    // TODO this can work under a separate lock for this step as it does not change the global\n-    // components\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PREPARE)\n-    public synchronized void handleMessageLayoutPrepare(\n-            @NonNull CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        // Check if the prepare is for the correct epoch\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    // TODO this can work under a separate lock for this step as it does not change the global components\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PREPARE_LAYOUT_REQUEST)\n+    public synchronized void handlePrepareLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final PrepareLayoutRequestMsg payload = req.getPayload().getPrepareLayoutRequest();\n+\n+        if(!isBootstrapped(requestHeader, ctx, r)) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDEwNzgyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxMjoxMlrOHy9e8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxMjoxMlrOHy9e8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE5ODE5Mg==", "bodyText": "You can remove the TODO this scenario can naturally happen. Imagine you run Paxos Layout at epoch 2. Its possible that out of the 3 nodes, only 2 nodes accepted epoch two layout. So, when a client requests a layout from the third node (i.e., the one that didn't participate in the paxos round, then it should just return the older layout. If you return a wrong epoch exception its fine, but superfluous because the clients need to check that they never regress the epoch the layout that they are tracking.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523198192", "createdAt": "2020-11-13T20:12:12Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDEyNDk2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxODowMFrOHy9pYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjowNjo1M1rOH3iWbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMDg2NQ==", "bodyText": "Can you drop the \"REQUEST\" suffix naming convention, it seems redundant. Maybe use RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523200865", "createdAt": "2020-11-13T20:18:00Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NjUyNw==", "bodyText": "I had a discuss with @zfrenette offline and we thought it might be okay to keep the suffix, since sometimes we directly import the PayloadCase rather than RequestPayloadMsg.PayloadCase, the suffix might help to tell the type of the message. (if we remove the suffix, both the RequestPayloadMsg and ResponsePayloadMsg will have a PayloadCase.PING for example)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r527996527", "createdAt": "2020-11-20T22:06:53Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMDg2NQ=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDEzMTkxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyMDoxMVrOHy9tVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyMDoxMVrOHy9tVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMTg3OA==", "bodyText": "You don't need to log the request id since its per-channel and only used to timeout/complete requests.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523201878", "createdAt": "2020-11-13T20:20:11Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDEzODg2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyMjoyMlrOHy9xeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoyMjoyMlrOHy9xeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMjkzNg==", "bodyText": "Can you reverse the logic and get rid of the if-else here?\nYou can check if(getCurrentLayout() != null) you can send the error message and return right away. Otherwise continue to save the new bootstrap layout.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523202936", "createdAt": "2020-11-13T20:22:22Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDE3MzYxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDozNDoxNVrOHy-GZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDozNDoxNVrOHy-GZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwODI5Mg==", "bodyText": "Un-nest this, move the validation to the top (after the layout.getClusterId() == null check)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523208292", "createdAt": "2020-11-13T20:34:15Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+\n+            if(layout.getClusterId() == null) {\n+                log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                        requestHeader.getRequestId(), layout);\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, false);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.NACK));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDE3NzU0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDozNTozM1rOHy-Iug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDozNTozM1rOHy-Iug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwODg5MA==", "bodyText": "Log the newly bootstrapped layout as info", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523208890", "createdAt": "2020-11-13T20:35:33Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+\n+            if(layout.getClusterId() == null) {\n+                log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                        requestHeader.getRequestId(), layout);\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, false);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.NACK));\n+            } else {\n                 setCurrentLayout(layout);\n                 serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDIwNTExOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo0MDo1NVrOHy-aaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoxODoxNFrOHzgEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMzQxOQ==", "bodyText": "Instead of calling this from each handler, you can just move it to processRequest. Note that it needs to be called on all messages except for LAYOUT_NOBOOTSTRAP", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523213419", "createdAt": "2020-11-13T20:40:55Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NDg3MQ==", "bodyText": "Note that checking this in processRequest means we are performing the check before the task is submitted to the executor service.  Is it possible that the status changes by the time the new thread is actually executing the handler?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523764871", "createdAt": "2020-11-15T14:18:14Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIxMzQxOQ=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDI0NjI1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo0ODoxMFrOHy-11A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyMzo0MVrOHzgHFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyMDQzNg==", "bodyText": "Why is this responseHeader different than the one in line 277\nThe response header should always copy its metadata from the requestHeader.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523220436", "createdAt": "2020-11-13T20:48:10Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+\n+            if(layout.getClusterId() == null) {\n+                log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                        requestHeader.getRequestId(), layout);\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, false);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.NACK));\n+            } else {\n                 setCurrentLayout(layout);\n                 serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, true);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.ACK));\n             }\n         } else {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleMessageLayoutBootstrap: Got a request to bootstrap a server which is \"\n-                    + \"already bootstrapped, rejecting!\");\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a prepare message if the rank is higher than any accepted so far.\n      *\n-     * @param msg corfu message containing LAYOUT_PREPARE\n+     * @param req corfu message containing PREPARE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    // TODO this can work under a separate lock for this step as it does not change the global\n-    // components\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PREPARE)\n-    public synchronized void handleMessageLayoutPrepare(\n-            @NonNull CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        // Check if the prepare is for the correct epoch\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    // TODO this can work under a separate lock for this step as it does not change the global components\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PREPARE_LAYOUT_REQUEST)\n+    public synchronized void handlePrepareLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final PrepareLayoutRequestMsg payload = req.getPayload().getPrepareLayoutRequest();\n+\n+        if(!isBootstrapped(requestHeader, ctx, r)) return;\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();;\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank prepareRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank prepareRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n-        if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPrepare: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\",\n-                    msg.getPayload().getEpoch(), serverEpoch, msg);\n+        if(payloadEpoch != serverEpoch) {\n+            r.sendWrongEpochError(requestHeader, ctx, serverEpoch);\n             return;\n         }\n \n-        Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        final Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        // If the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n+        if(phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n+            log.debug(\"handlePrepareLayoutRequest[{}]: Rejected phase 1 prepare of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), prepareRank, phase1Rank);\n \n-        // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.\n-        if (phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPrepare: Rejected phase 1 prepare of rank={}, \"\n-                    + \"phase1Rank={}\", prepareRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_REJECT.payloadMsg(new\n-                    LayoutPrepareResponse(phase1Rank.getRank(), proposedLayout)));\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    PrepareLayoutResponseMsg.Type.REJECT, phase1Rank.getRank(), proposedLayout));\n         } else {\n             // Return the layout with the highest rank proposed before.\n-            Rank highestProposedRank = proposedLayout == null ? new Rank(-1L, msg.getClientID())\n-                    : getPhase2Rank(payloadEpoch);\n+            Rank highestProposedRank = proposedLayout == null ?\n+                    new Rank(-1L, getUUID(requestHeader.getClientId())) : getPhase2Rank(payloadEpoch);\n+\n             setPhase1Rank(prepareRank, payloadEpoch);\n-            log.debug(\"handleMessageLayoutPrepare: New phase 1 rank={}\", prepareRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_ACK.payloadMsg(new\n-                    LayoutPrepareResponse(highestProposedRank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: New phase 1 rank={}\", requestHeader.getRequestId(), prepareRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NTUyNg==", "bodyText": "All of the fields are the same, except possibly the ignoreEpochor ignoreClusterId fields. These differ because the message in 277 corresponds to a NACK/REJECT while here it corresponds to an ACK. Note that in the original CorfuMsgType implementation, an ACK will ignore the epoch check while a NACK does not. You can notice this in  PR 2812 as well.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523765526", "createdAt": "2020-11-15T14:23:41Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,280 +158,315 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n         return true;\n     }\n \n+    private boolean isBootstrapped(HeaderMsg reqHeader, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(getCurrentLayout() == null) {\n+            r.sendNoBootstrapError(reqHeader, ctx);\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n     // Helper Methods\n \n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if(!isBootstrapped(req.getHeader(), ctx, r)) return;\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if(payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            //TODO: Client is ahead of the server. Is any other handling required?\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            r.sendWrongEpochError(req.getHeader(), ctx, serverEpoch);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if(getCurrentLayout() == null) {\n+            final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+\n+            if(layout.getClusterId() == null) {\n+                log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                        requestHeader.getRequestId(), layout);\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, false);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.NACK));\n+            } else {\n                 setCurrentLayout(layout);\n                 serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n+\n+                responseHeader = getHeaderMsg(requestHeader, false, true);\n+                response = getResponseMsg(responseHeader,\n+                        getBootstrapLayoutResponseMsg(BootstrapLayoutResponseMsg.Type.ACK));\n             }\n         } else {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleMessageLayoutBootstrap: Got a request to bootstrap a server which is \"\n-                    + \"already bootstrapped, rejecting!\");\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a prepare message if the rank is higher than any accepted so far.\n      *\n-     * @param msg corfu message containing LAYOUT_PREPARE\n+     * @param req corfu message containing PREPARE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    // TODO this can work under a separate lock for this step as it does not change the global\n-    // components\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PREPARE)\n-    public synchronized void handleMessageLayoutPrepare(\n-            @NonNull CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        // Check if the prepare is for the correct epoch\n-        if (!isBootstrapped(msg, ctx, r)) {\n-            return;\n-        }\n+    // TODO this can work under a separate lock for this step as it does not change the global components\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PREPARE_LAYOUT_REQUEST)\n+    public synchronized void handlePrepareLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final PrepareLayoutRequestMsg payload = req.getPayload().getPrepareLayoutRequest();\n+\n+        if(!isBootstrapped(requestHeader, ctx, r)) return;\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();;\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank prepareRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank prepareRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n-        if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPrepare: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\",\n-                    msg.getPayload().getEpoch(), serverEpoch, msg);\n+        if(payloadEpoch != serverEpoch) {\n+            r.sendWrongEpochError(requestHeader, ctx, serverEpoch);\n             return;\n         }\n \n-        Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        final Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        // If the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n+        if(phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n+            log.debug(\"handlePrepareLayoutRequest[{}]: Rejected phase 1 prepare of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), prepareRank, phase1Rank);\n \n-        // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.\n-        if (phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPrepare: Rejected phase 1 prepare of rank={}, \"\n-                    + \"phase1Rank={}\", prepareRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_REJECT.payloadMsg(new\n-                    LayoutPrepareResponse(phase1Rank.getRank(), proposedLayout)));\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    PrepareLayoutResponseMsg.Type.REJECT, phase1Rank.getRank(), proposedLayout));\n         } else {\n             // Return the layout with the highest rank proposed before.\n-            Rank highestProposedRank = proposedLayout == null ? new Rank(-1L, msg.getClientID())\n-                    : getPhase2Rank(payloadEpoch);\n+            Rank highestProposedRank = proposedLayout == null ?\n+                    new Rank(-1L, getUUID(requestHeader.getClientId())) : getPhase2Rank(payloadEpoch);\n+\n             setPhase1Rank(prepareRank, payloadEpoch);\n-            log.debug(\"handleMessageLayoutPrepare: New phase 1 rank={}\", prepareRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_ACK.payloadMsg(new\n-                    LayoutPrepareResponse(highestProposedRank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: New phase 1 rank={}\", requestHeader.getRequestId(), prepareRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyMDQzNg=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDI4NTc2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo1NToxN1rOHy_QKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDoyODoxNFrOHzgJOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyNzE3OQ==", "bodyText": "Not used?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523227179", "createdAt": "2020-11-13T20:55:17Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.corfudb.protocols.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponsePayloadMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayout;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayoutMsg;\n+\n+@Slf4j\n+public class CorfuProtocolLayout {\n+    public static RequestPayloadMsg getLayoutRequestMsg(long epoch) {\n+        return RequestPayloadMsg.newBuilder()\n+                .setLayoutRequest(LayoutRequestMsg.newBuilder()\n+                        .setEpoch(epoch)\n+                        .build())\n+                .build();\n+    }\n+\n+    public static ResponsePayloadMsg getLayoutResponseMsg(Layout layout) {\n+        return ResponsePayloadMsg.newBuilder()\n+                .setLayoutResponse(LayoutResponseMsg.newBuilder()\n+                        .setLayout(getLayoutMsg(layout))\n+                        .build())\n+                .build();\n+    }\n+\n+    public static RequestPayloadMsg getPrepareLayoutRequestMsg(long epoch, long rank) {\n+        return RequestPayloadMsg.newBuilder()\n+                .setPrepareLayoutRequest(PrepareLayoutRequestMsg.newBuilder()\n+                        .setEpoch(epoch)\n+                        .setRank(rank)\n+                        .build())\n+                .build();\n+    }\n+\n+    public static ResponsePayloadMsg getPrepareLayoutResponseMsg(PrepareLayoutResponseMsg.Type type,\n+                                                                 long rank, Layout layout) {\n+        return ResponsePayloadMsg.newBuilder()\n+                .setPrepareLayoutResponse(PrepareLayoutResponseMsg.newBuilder()\n+                        .setRespType(type)\n+                        .setRank(rank)\n+                        .setLayout(getLayoutMsg(layout))\n+                        .build())\n+                .build();\n+    }\n+\n+    public static LayoutPrepareResponse getLayoutPrepareResponse(PrepareLayoutResponseMsg msg) {\n+        return new LayoutPrepareResponse(msg.getRank(), getLayout(msg.getLayout()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NjA3Mg==", "bodyText": "Good catch. It was meant to be used in the LayoutHandler, but I think it can be removed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523766072", "createdAt": "2020-11-15T14:28:14Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.corfudb.protocols.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponsePayloadMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayout;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayoutMsg;\n+\n+@Slf4j\n+public class CorfuProtocolLayout {\n+    public static RequestPayloadMsg getLayoutRequestMsg(long epoch) {\n+        return RequestPayloadMsg.newBuilder()\n+                .setLayoutRequest(LayoutRequestMsg.newBuilder()\n+                        .setEpoch(epoch)\n+                        .build())\n+                .build();\n+    }\n+\n+    public static ResponsePayloadMsg getLayoutResponseMsg(Layout layout) {\n+        return ResponsePayloadMsg.newBuilder()\n+                .setLayoutResponse(LayoutResponseMsg.newBuilder()\n+                        .setLayout(getLayoutMsg(layout))\n+                        .build())\n+                .build();\n+    }\n+\n+    public static RequestPayloadMsg getPrepareLayoutRequestMsg(long epoch, long rank) {\n+        return RequestPayloadMsg.newBuilder()\n+                .setPrepareLayoutRequest(PrepareLayoutRequestMsg.newBuilder()\n+                        .setEpoch(epoch)\n+                        .setRank(rank)\n+                        .build())\n+                .build();\n+    }\n+\n+    public static ResponsePayloadMsg getPrepareLayoutResponseMsg(PrepareLayoutResponseMsg.Type type,\n+                                                                 long rank, Layout layout) {\n+        return ResponsePayloadMsg.newBuilder()\n+                .setPrepareLayoutResponse(PrepareLayoutResponseMsg.newBuilder()\n+                        .setRespType(type)\n+                        .setRank(rank)\n+                        .setLayout(getLayoutMsg(layout))\n+                        .build())\n+                .build();\n+    }\n+\n+    public static LayoutPrepareResponse getLayoutPrepareResponse(PrepareLayoutResponseMsg msg) {\n+        return new LayoutPrepareResponse(msg.getRank(), getLayout(msg.getLayout()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyNzE3OQ=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDI5Mzg5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo1NzozOVrOHy_VrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDozOTowMVrOHzgO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyODU4OQ==", "bodyText": "Wouldn't it be cleaner to pass the requestHeader to these methods and have these methods construct and return the final message. Instead of doing this construction all over the place it can be in one place, here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523228589", "createdAt": "2020-11-13T20:57:39Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.corfudb.protocols.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponsePayloadMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayout;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayoutMsg;\n+\n+@Slf4j\n+public class CorfuProtocolLayout {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2NzUyNQ==", "bodyText": "The reason why we don't pass the header at this stage is because the client class (i.e. LayoutClient) is currently responsible for building the message payload, but it doesn't have all of the information required to build the header, most notably the request id, which is only available once we reach the router. So if the client builds a RequestMsg directly (consisting of HeaderMsg and RequestPayloadMsg), then the router needs to rebuild the object in order to stamp the request id. Therefore, the client builds the payload and passes its information to the router, and its the router that then builds the header and wraps everything together into a RequestMsg. The class CorfuProtocolMessage provides this functionality. You can also see this in PR 2812.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523767525", "createdAt": "2020-11-15T14:39:01Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.corfudb.protocols.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponsePayloadMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayout;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayoutMsg;\n+\n+@Slf4j\n+public class CorfuProtocolLayout {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyODU4OQ=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDI5OTE4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo1OTozMVrOHy_Yug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDo1OTozMVrOHy_Yug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyOTM3MA==", "bodyText": "Remove. All of this uses protobuf messages now. Also, don't forget to remove Layout requests/responses from CorfuMsgType.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523229370", "createdAt": "2020-11-13T20:59:31Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutClient.java", "diffHunk": "@@ -27,13 +28,15 @@ public LayoutClient(IClientRouter router, long epoch, UUID clusterID) {\n         super(router, epoch, clusterID);\n     }\n \n+    // Protobuf region\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMwMzA2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowMDo1NFrOHy_a-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowMDo1NFrOHy_a-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIyOTk0NQ==", "bodyText": "Remove all usages of CorfuMsgType with these changes those paths become inactive. Its better to remove them than assume that they are not functional.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523229945", "createdAt": "2020-11-13T21:00:54Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMxNjAyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowNTozN1rOHy_itw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1MjozMFrOH1M99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMTkyNw==", "bodyText": "Why don't you just use a boolean to represent this.\nmessage CommitLayoutResponseMsg {\n      bool committed = 1;\n}", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523231927", "createdAt": "2020-11-13T21:05:37Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n+    }\n+\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        PrepareLayoutResponseMsg.Type type = prepareLayoutMsg.getRespType();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        switch (type) {\n+            case ACK: return new LayoutPrepareResponse(rank, layout);\n+            case REJECT: throw new OutrankedException(rank, layout);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        ProposeLayoutResponseMsg.Type type = proposeLayoutMsg.getRespType();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case REJECT: throw new OutrankedException(rank);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+        CommitLayoutResponseMsg.Type type = commitLayoutMsg.getRespType();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case NACK: return false;\n+            // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NzY3Ng==", "bodyText": "I think when @zfrenette design these message types, enum types were used to make it easier for extension. For example when the message type needs to change sometime in the future, to model something like ACK, NACK-FAILURE-REASON-A, NACK-FAILURE-REASON-B, enum might provide more flexibility and easier for backward compatibility. But definitely using a boolean would make it cleaner at this time. We might need to make a tradeoff here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r524397676", "createdAt": "2020-11-16T16:26:36Z", "author": {"login": "xcchang"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n+    }\n+\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        PrepareLayoutResponseMsg.Type type = prepareLayoutMsg.getRespType();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        switch (type) {\n+            case ACK: return new LayoutPrepareResponse(rank, layout);\n+            case REJECT: throw new OutrankedException(rank, layout);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        ProposeLayoutResponseMsg.Type type = proposeLayoutMsg.getRespType();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case REJECT: throw new OutrankedException(rank);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+        CommitLayoutResponseMsg.Type type = commitLayoutMsg.getRespType();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case NACK: return false;\n+            // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMTkyNw=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0OTA0Nw==", "bodyText": "I would just go with a boolean, what do you think @zfrenette", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r525549047", "createdAt": "2020-11-17T21:52:30Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n+    }\n+\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        PrepareLayoutResponseMsg.Type type = prepareLayoutMsg.getRespType();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        switch (type) {\n+            case ACK: return new LayoutPrepareResponse(rank, layout);\n+            case REJECT: throw new OutrankedException(rank, layout);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        ProposeLayoutResponseMsg.Type type = proposeLayoutMsg.getRespType();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case REJECT: throw new OutrankedException(rank);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+        CommitLayoutResponseMsg.Type type = commitLayoutMsg.getRespType();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case NACK: return false;\n+            // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMTkyNw=="}, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDMxNzEwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowNjowMFrOHy_jUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMTowNjowMFrOHy_jUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIzMjA4Mg==", "bodyText": "Cleaner to use a boolean in the protobuf message. See comment above.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523232082", "createdAt": "2020-11-13T21:06:00Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n+    }\n+\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        PrepareLayoutResponseMsg.Type type = prepareLayoutMsg.getRespType();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        switch (type) {\n+            case ACK: return new LayoutPrepareResponse(rank, layout);\n+            case REJECT: throw new OutrankedException(rank, layout);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        ProposeLayoutResponseMsg.Type type = proposeLayoutMsg.getRespType();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case REJECT: throw new OutrankedException(rank);\n+                // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+        CommitLayoutResponseMsg.Type type = commitLayoutMsg.getRespType();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case NACK: return false;\n+            // TODO for INVALID\n+            default: throw new UnsupportedOperationException(\"Response handler not provided\");\n+        }\n+    }\n+\n+    /**\n+     * Handle a bootstrap layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, false if NACK.\n+     */\n+    @ResponseHandler(type = PayloadCase.BOOTSTRAP_LAYOUT_RESPONSE)\n+    private static Object handleBootstrapLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                        IClientRouter r) {\n+        BootstrapLayoutResponseMsg bootstrapLayoutMsg =  msg.getPayload().getBootstrapLayoutResponse();\n+        BootstrapLayoutResponseMsg.Type type = bootstrapLayoutMsg.getRespType();\n+\n+        switch (type) {\n+            case ACK: return true;\n+            case NACK: return false;\n+            // TODO for INVALID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Mzg5MTA3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1NjoxMVrOHzgYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDo1NjoxMVrOHzgYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2OTg1Nw==", "bodyText": "Can we add the Javadocs for the methods in this class?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523769857", "createdAt": "2020-11-15T14:56:11Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/service/CorfuProtocolLayout.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.corfudb.protocols.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestPayloadMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponsePayloadMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.BootstrapLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.CommitLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.LayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.PrepareLayoutResponseMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutRequestMsg;\n+import org.corfudb.runtime.proto.service.Layout.ProposeLayoutResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayout;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getLayoutMsg;\n+\n+@Slf4j\n+public class CorfuProtocolLayout {\n+    public static RequestPayloadMsg getLayoutRequestMsg(long epoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NDA2MTYwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNzo1MzoyMlrOHzhpug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNzo1MzoyMlrOHzhpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc5MDc3OA==", "bodyText": "LayoutPrepareResponse no longer needs to implement ICorfuPayoad. It can be removed, along with the related serialization methods.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r523790778", "createdAt": "2020-11-15T17:53:22Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -94,4 +105,116 @@ private static Object handleAlreadyBootstrap(CorfuMsg msg,\n             throws Exception {\n         throw new AlreadyBootstrappedException();\n     }\n+\n+    // Protobuf region\n+\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n+    }\n+\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        PrepareLayoutResponseMsg.Type type = prepareLayoutMsg.getRespType();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        switch (type) {\n+            case ACK: return new LayoutPrepareResponse(rank, layout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef1fbf4a2bf76c739874a552a9be39003e19f4e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjEyNDYzOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/view/AbstractViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDowODo1NFrOH23AEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDo1NjowMVrOH25aBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI4NjI5MA==", "bodyText": "We need the default header for the next set of handleMessage() calls of MANAGEMENT_BOOTSTRAP_REQUEST and BOOTSTRAP_SEQUENCER.\nTherefore, Can we move this to CorfuProtocolMessage?\nWe can add a new method to get default header and call CorfuProtocolMessage.getRequestMsg() with that header and the new payloadMsg.\npublic static HeaderMsg getDefaultHeaderMsg(boolean ignoreClusterId, boolean ignoreEpoch) {\n    return getHeaderMsg(0, CorfuMessage.PriorityLevel.NORMAL, 0,\n        DEFAULT_UUID, DEFAULT_UUID, ignoreClusterId, ignoreEpoch);\n}\n\nNote: Unfortunately, we cannot use HeaderMsg.getDefaultInstance() provided by Protobuf as it sets the values to empty instead of the default intended values. Its output is -\nheaderMsg.getRequestId() - 0\nheaderMsg.getClientId() - \nheaderMsg.getClusterId() - \nheaderMsg.getEpoch() - 0\nheaderMsg.getIgnoreEpoch() - false\nheaderMsg.getIgnoreClusterId() - false\nheaderMsg.getPriority() - PRIORITY_LEVEL_INVALID\nheaderMsg.getVersion() -", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r527286290", "createdAt": "2020-11-20T00:08:54Z", "author": {"login": "chetangudisagar"}, "path": "test/src/test/java/org/corfudb/runtime/view/AbstractViewTest.java", "diffHunk": "@@ -469,6 +474,12 @@ public String getEndpoint(int port) {\n \n     // Private\n \n+    private RequestMsg getRequest(CorfuMessage.RequestPayloadMsg payloadMsg) {\n+        CorfuMessage.HeaderMsg header = getHeaderMsg(0, CorfuMessage.PriorityLevel.NORMAL, 0,\n+                DEFAULT_UUID, DEFAULT_UUID, true, true);\n+        return getRequestMsg(header, payloadMsg);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2d1a7e26648441f17aae7fa4616c8a0f8ea5a7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMyNTcwMw==", "bodyText": "Update: After an internal discussion, we decided to add a temporary variable within the method to be reused by all 3 request messges -\npublic void bootstrapAllServers(Layout l) {\n    CorfuMessage.HeaderMsg headerMsg = getHeaderMsg(0, CorfuMessage.PriorityLevel.NORMAL, 0,\n            DEFAULT_UUID, DEFAULT_UUID, true, true);\n    ...\n    ...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r527325703", "createdAt": "2020-11-20T00:56:01Z", "author": {"login": "chetangudisagar"}, "path": "test/src/test/java/org/corfudb/runtime/view/AbstractViewTest.java", "diffHunk": "@@ -469,6 +474,12 @@ public String getEndpoint(int port) {\n \n     // Private\n \n+    private RequestMsg getRequest(CorfuMessage.RequestPayloadMsg payloadMsg) {\n+        CorfuMessage.HeaderMsg header = getHeaderMsg(0, CorfuMessage.PriorityLevel.NORMAL, 0,\n+                DEFAULT_UUID, DEFAULT_UUID, true, true);\n+        return getRequestMsg(header, payloadMsg);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI4NjI5MA=="}, "originalCommit": {"oid": "3f2d1a7e26648441f17aae7fa4616c8a0f8ea5a7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODU5NDUxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoxOTo1M1rOH4oh1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToxMDozMFrOH5FYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NjMyNw==", "bodyText": "Would it be better to use a mock of the DataStore instead?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r529146327", "createdAt": "2020-11-24T02:19:53Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize an in memory DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(\n+                new DataStore(new ImmutableMap.Builder<String, Object>()\n+                .put(\"--memory\", true)\n+                .build(), fn -> { }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b0f308597cc2c0b8e7d26ba85877410813cf8f0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE2NTIwOQ==", "bodyText": "This DataStore is used to initialize the paxosDataStore field of LayoutServer, which is needed to get phase1rank when handling PROPOSE_LAYOUT_REQUEST for example, and it's not exposed. So some changes may be necessary if we do want to use mocking for paxosDataStore, like moving it to serverContext?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r529165209", "createdAt": "2020-11-24T02:46:13Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize an in memory DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(\n+                new DataStore(new ImmutableMap.Builder<String, Object>()\n+                .put(\"--memory\", true)\n+                .build(), fn -> { }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NjMyNw=="}, "originalCommit": {"oid": "9b0f308597cc2c0b8e7d26ba85877410813cf8f0"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxOTAwNw==", "bodyText": "It is already available from the server context:\n        this.paxosDataStore = PaxosDataStore.builder()\n                .dataStore(serverContext.getDataStore())\n                .build();\n\nYou can continue to use the PaxosDataStore wrapper, but the data store itself can already be mocked easily since we are mocking the server context -- Just return a mock DataStore when getDataStore() is called.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r529619007", "createdAt": "2020-11-24T15:10:30Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize an in memory DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(\n+                new DataStore(new ImmutableMap.Builder<String, Object>()\n+                .put(\"--memory\", true)\n+                .build(), fn -> { }));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0NjMyNw=="}, "originalCommit": {"oid": "9b0f308597cc2c0b8e7d26ba85877410813cf8f0"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODg1NTMwOnYy", "diffSide": "RIGHT", "path": "runtime/proto/service/layout.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDoxMDoxOFrOH4rLjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyODo0NVrOIHhytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4OTc3Mg==", "bodyText": "please bring back enums. Boolean variables much harder to understand - the value doesn't explain domain meaning, and that brings additional complexity and makes code more indirect", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r529189772", "createdAt": "2020-11-24T04:10:18Z", "author": {"login": "xnull"}, "path": "runtime/proto/service/layout.proto", "diffHunk": "@@ -46,13 +40,7 @@ message ProposeLayoutRequestMsg {\n }\n \n message ProposeLayoutResponseMsg {\n-  enum Type {\n-    INVALID = 0;\n-    ACK = 1;\n-    REJECT = 2;\n-  }\n-\n-  Type resp_type = 1;\n+  bool proposed = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9761ce4b28bab1ecace96e720d3b9cf5c148da"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDU5OA==", "bodyText": "Please address this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r544764598", "createdAt": "2020-12-17T02:28:45Z", "author": {"login": "Maithem"}, "path": "runtime/proto/service/layout.proto", "diffHunk": "@@ -46,13 +40,7 @@ message ProposeLayoutRequestMsg {\n }\n \n message ProposeLayoutResponseMsg {\n-  enum Type {\n-    INVALID = 0;\n-    ACK = 1;\n-    REJECT = 2;\n-  }\n-\n-  Type resp_type = 1;\n+  bool proposed = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE4OTc3Mg=="}, "originalCommit": {"oid": "1e9761ce4b28bab1ecace96e720d3b9cf5c148da"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODg2OTYxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNDoxODo1NVrOH4rULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyNzozMFrOIHhxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5MTk4Mw==", "bodyText": "static methods make code less maintainable/testable", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r529191983", "createdAt": "2020-11-24T04:18:55Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();\n+    }\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n     @ClientHandler(type = CorfuMsgType.LAYOUT_RESPONSE)\n     private static Object handleLayoutResponse(CorfuMsg msg,\n                                                ChannelHandlerContext ctx, IClientRouter r) {\n         return ((LayoutMsg) msg).getLayout();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_ACK)\n-    private static Object handleLayoutPrepareAck(CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r) {\n-        return msg.getPayload();\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n-    private static Object handleNoBootstrap(CorfuMsg msg,\n-                                            ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new NoBootstrapException();\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        boolean prepared = prepareLayoutMsg.getPrepared();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9761ce4b28bab1ecace96e720d3b9cf5c148da"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2NDE5Ng==", "bodyText": "Sure, but in this case its a It's a stateless helper method. Anyways, if you still want this to change, the please propose something more actionable.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r544764196", "createdAt": "2020-12-17T02:27:30Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();\n+    }\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n     @ClientHandler(type = CorfuMsgType.LAYOUT_RESPONSE)\n     private static Object handleLayoutResponse(CorfuMsg msg,\n                                                ChannelHandlerContext ctx, IClientRouter r) {\n         return ((LayoutMsg) msg).getLayout();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_ACK)\n-    private static Object handleLayoutPrepareAck(CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r) {\n-        return msg.getPayload();\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n-    private static Object handleNoBootstrap(CorfuMsg msg,\n-                                            ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new NoBootstrapException();\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        boolean prepared = prepareLayoutMsg.getPrepared();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE5MTk4Mw=="}, "originalCommit": {"oid": "1e9761ce4b28bab1ecace96e720d3b9cf5c148da"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDE5NjU0OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMzo1NVrOH5fMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMzo1NVrOH5fMFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MTg3OQ==", "bodyText": "Maybe use a non-zero value here? It could make some failures more noticeable.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r530041879", "createdAt": "2020-11-25T01:03:55Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        List<String> unresponsiveServers = defaultLayout.getUnresponsiveServers();\n+        unresponsiveServers.add(\"localhost:9001\");\n+        defaultLayout.setUnresponsiveServers(unresponsiveServers);\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), layoutCaptor.capture());\n+\n+        Layout layout = layoutCaptor.getValue();\n+        assertThat(layout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9002\");\n+        assertThat(layout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(layout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a BOOTSTRAP_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testBootstrapLayout() {\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getBootstrapLayoutResponseMsg(true)\n+        );\n+\n+        ResponseMsg responseNACK = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getBootstrapLayoutResponseMsg(false)\n+        );\n+\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n+        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PREPARE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPrepare() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        long defaultRank = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3556abe06ec7207beb7187d8404f33a6744f92"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDIxMjczOnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxMjoxMFrOH5fVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxMjoxMFrOH5fVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NDMzNg==", "bodyText": "You can consider factoring these assertions into a private method that can be reused.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r530044336", "createdAt": "2020-11-25T01:12:10Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        List<String> unresponsiveServers = defaultLayout.getUnresponsiveServers();\n+        unresponsiveServers.add(\"localhost:9001\");\n+        defaultLayout.setUnresponsiveServers(unresponsiveServers);\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), layoutCaptor.capture());\n+\n+        Layout layout = layoutCaptor.getValue();\n+        assertThat(layout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9002\");\n+        assertThat(layout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(layout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a BOOTSTRAP_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testBootstrapLayout() {\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getBootstrapLayoutResponseMsg(true)\n+        );\n+\n+        ResponseMsg responseNACK = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getBootstrapLayoutResponseMsg(false)\n+        );\n+\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n+        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PREPARE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPrepare() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        long defaultRank = 0L;\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutResponseMsg(true, defaultRank, defaultLayout)\n+        );\n+        ResponseMsg responseREJECT = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getPrepareLayoutResponseMsg(false, defaultRank, defaultLayout)\n+        );\n+\n+        // Verify that the correct request was completed (once) with the appropriate value.\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        ArgumentCaptor<LayoutPrepareResponse> layoutPrepareCaptor = ArgumentCaptor.forClass(LayoutPrepareResponse.class);\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(responseACK.getHeader().getRequestId()), layoutPrepareCaptor.capture());\n+\n+        LayoutPrepareResponse layoutPrepareCaptorValue = layoutPrepareCaptor.getValue();\n+        Layout retLayout = layoutPrepareCaptorValue.getLayout();\n+        assertThat(retLayout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9001\", \"localhost:9002\");\n+        assertThat(retLayout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(retLayout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3556abe06ec7207beb7187d8404f33a6744f92"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDIxNTE0OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxMzoyMVrOH5fXAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxMzoyMVrOH5fXAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NDY3NQ==", "bodyText": "Maybe use a non-zero value here too.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r530044675", "createdAt": "2020-11-25T01:13:21Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        List<String> unresponsiveServers = defaultLayout.getUnresponsiveServers();\n+        unresponsiveServers.add(\"localhost:9001\");\n+        defaultLayout.setUnresponsiveServers(unresponsiveServers);\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), layoutCaptor.capture());\n+\n+        Layout layout = layoutCaptor.getValue();\n+        assertThat(layout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9002\");\n+        assertThat(layout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(layout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a BOOTSTRAP_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testBootstrapLayout() {\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getBootstrapLayoutResponseMsg(true)\n+        );\n+\n+        ResponseMsg responseNACK = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getBootstrapLayoutResponseMsg(false)\n+        );\n+\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n+        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PREPARE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPrepare() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        long defaultRank = 0L;\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutResponseMsg(true, defaultRank, defaultLayout)\n+        );\n+        ResponseMsg responseREJECT = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getPrepareLayoutResponseMsg(false, defaultRank, defaultLayout)\n+        );\n+\n+        // Verify that the correct request was completed (once) with the appropriate value.\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        ArgumentCaptor<LayoutPrepareResponse> layoutPrepareCaptor = ArgumentCaptor.forClass(LayoutPrepareResponse.class);\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(responseACK.getHeader().getRequestId()), layoutPrepareCaptor.capture());\n+\n+        LayoutPrepareResponse layoutPrepareCaptorValue = layoutPrepareCaptor.getValue();\n+        Layout retLayout = layoutPrepareCaptorValue.getLayout();\n+        assertThat(retLayout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9001\", \"localhost:9002\");\n+        assertThat(retLayout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(retLayout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");\n+\n+        // Verify that the correct exception was thrown with the appropriate field set.\n+        layoutHandler.handleMessage(responseREJECT, mockChannelHandlerContext);\n+        ArgumentCaptor<OutrankedException> exceptionCaptor = ArgumentCaptor.forClass(OutrankedException.class);\n+        verify(mockClientRouter).completeExceptionally(\n+                eq(responseREJECT.getHeader().getRequestId()), exceptionCaptor.capture());\n+        OutrankedException outrankedException = exceptionCaptor.getValue();\n+        assertThat(outrankedException.getNewRank()).isEqualTo(defaultRank);\n+\n+        retLayout = outrankedException.getLayout();\n+        assertThat(retLayout.getActiveLayoutServers()).containsExactly(\"localhost:9000\", \"localhost:9001\", \"localhost:9002\");\n+        assertThat(retLayout.getSequencers()).containsExactly(\"localhost:9000\");\n+        assertThat(retLayout.getAllLogServers()).containsExactly(\"localhost:9002\", \"localhost:9001\", \"localhost:9000\");\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PROPOSE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPropose() {\n+        long defaultRank = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3556abe06ec7207beb7187d8404f33a6744f92"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDIyNjQ5OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxODoxM1rOH5fdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMToxODoxM1rOH5fdWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0NjI5Ng==", "bodyText": "Would it be worth considering the case where deserializing the Layout throws an exception, and seeing that we complete exceptionally?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r530046296", "createdAt": "2020-11-25T01:18:13Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3556abe06ec7207beb7187d8404f33a6744f92"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzc5NjA5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyMjoxM1rOH6BCBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxOToyMjoxM1rOH6BCBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU5NjM1Nw==", "bodyText": "Maybe consider adding a cause of a null clusterId in the comment description (i.e. ... correctly handles a BOOTSTRAP_LAYOUT_REQUEST with a legacy layout having a null clusterId)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r530596357", "createdAt": "2020-11-25T19:22:13Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize an in memory DataStore for LayoutServer\n+//        when(mockServerContext.getDataStore()).thenReturn(\n+//                new DataStore(new ImmutableMap.Builder<String, Object>()\n+//                .put(\"--memory\", true)\n+//                .build(), fn -> { }));\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST with null clusterId.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df3556abe06ec7207beb7187d8404f33a6744f92"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQyMDcyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0Mzo1OVrOH8PB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0Mzo1OVrOH8PB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyMjg0OQ==", "bodyText": "nit: I think we have to wait until the end to remove this since it may be sent by IServerRouter whenever it handles a legacy CorfuMsg.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532922849", "createdAt": "2020-11-30T21:43:59Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQzMDU5OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0Njo1M1rOH8PH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo0Njo1M1rOH8PH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyNDM4OQ==", "bodyText": "LayoutHandler instance", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532924389", "createdAt": "2020-11-30T21:46:53Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.exceptions.SerializerException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.corfudb.runtime.view.Layout.fromJSONString;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ0NDg4OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1MDo1OFrOH8PQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1MDo1OFrOH8PQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkyNjU3NQ==", "bodyText": "Do we need to capture the Layout here? I think calling verify with just defaultLayout should work.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532926575", "createdAt": "2020-11-30T21:50:58Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.exceptions.SerializerException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.corfudb.runtime.view.Layout.fromJSONString;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), layoutCaptor.capture());\n+\n+        Layout layout = layoutCaptor.getValue();\n+        assertLayoutMatch(layout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ3MDA3OnYy", "diffSide": "LEFT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsgType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1ODo0OVrOH8PgLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTo1ODo0OVrOH8PgLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMDYwNw==", "bodyText": "Does LayoutPrepareResponse still need to implement ICorfuPayload?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532930607", "createdAt": "2020-11-30T21:58:49Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/CorfuMsgType.java", "diffHunk": "@@ -32,14 +32,7 @@\n     WRONG_CLUSTER_ID(28, new TypeToken<CorfuPayloadMsg<WrongClusterMsg>>(){}, true, false),\n \n     // Layout Messages\n-    LAYOUT_REQUEST(10, new TypeToken<CorfuPayloadMsg<Long>>(){}, true, true),\n     LAYOUT_RESPONSE(11, TypeToken.of(LayoutMsg.class), true, false),\n-    LAYOUT_PREPARE(12, new TypeToken<CorfuPayloadMsg<LayoutPrepareRequest>>(){}, true, false),\n-    LAYOUT_PREPARE_REJECT(13, new TypeToken<CorfuPayloadMsg<LayoutPrepareResponse>>(){}),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzQ3Nzc0OnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMTowMFrOH8Pkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjowMTowMFrOH8Pkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkzMTc3OQ==", "bodyText": "Should this be getBasicHeader(false, true)?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532931779", "createdAt": "2020-11-30T22:01:00Z", "author": {"login": "zfrenette"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.exceptions.SerializerException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.corfudb.runtime.view.Layout.fromJSONString;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {\n+\n+    // The BaseHandler instance used for testing\n+    private LayoutHandler layoutHandler;\n+\n+    // Objects that need to be mocked\n+    private IClientRouter mockClientRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual\n+     * tests by preparing the mocks.\n+     */\n+    @Before\n+    public void setup() {\n+        mockClientRouter = mock(IClientRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        layoutHandler = new LayoutHandler();\n+        layoutHandler.setRouter(mockClientRouter);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(response.getHeader().getRequestId()), layoutCaptor.capture());\n+\n+        Layout layout = layoutCaptor.getValue();\n+        assertLayoutMatch(layout);\n+    }\n+\n+\n+    /**\n+     * Test that the LayoutHandler throws a SerializerException when handling\n+     * LAYOUT_RESPONSE without necessary fields.\n+     */\n+    @Test\n+    public void testMalformedGetLayout() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        defaultLayout.setLayoutServers(new LinkedList<>());\n+\n+        ResponseMsg response = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getLayoutResponseMsg(defaultLayout)\n+        );\n+\n+        layoutHandler.handleMessage(response, mockChannelHandlerContext);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter).completeExceptionally(anyLong(), any(SerializerException.class));\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a BOOTSTRAP_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testBootstrapLayout() {\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getBootstrapLayoutResponseMsg(true)\n+        );\n+\n+        ResponseMsg responseNACK = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getBootstrapLayoutResponseMsg(false)\n+        );\n+\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        layoutHandler.handleMessage(responseNACK, mockChannelHandlerContext);\n+\n+        // Verify that the correct request was completed (once) with the appropriate value,\n+        // and that we did not complete exceptionally.\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(responseACK.getHeader().getRequestId(), true);\n+        verify(mockClientRouter).completeRequest(responseNACK.getHeader().getRequestId(), false);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PREPARE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPrepare() throws IOException {\n+        Layout defaultLayout = getDefaultLayout();\n+        long defaultRank = 5L;\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutResponseMsg(true, defaultRank, defaultLayout)\n+        );\n+        ResponseMsg responseREJECT = getResponseMsg(\n+                getBasicHeader(false, false),\n+                getPrepareLayoutResponseMsg(false, defaultRank, defaultLayout)\n+        );\n+\n+        // Verify that the correct request was completed (once) with the appropriate value.\n+        layoutHandler.handleMessage(responseACK, mockChannelHandlerContext);\n+        ArgumentCaptor<LayoutPrepareResponse> layoutPrepareCaptor = ArgumentCaptor.forClass(LayoutPrepareResponse.class);\n+        verify(mockClientRouter, never()).completeExceptionally(anyLong(), any(Throwable.class));\n+        verify(mockClientRouter).completeRequest(eq(responseACK.getHeader().getRequestId()), layoutPrepareCaptor.capture());\n+\n+        LayoutPrepareResponse layoutPrepareCaptorValue = layoutPrepareCaptor.getValue();\n+        Layout retLayout = layoutPrepareCaptorValue.getLayout();\n+        assertLayoutMatch(retLayout);\n+\n+        // Verify that the correct exception was thrown with the appropriate field set.\n+        layoutHandler.handleMessage(responseREJECT, mockChannelHandlerContext);\n+        ArgumentCaptor<OutrankedException> exceptionCaptor = ArgumentCaptor.forClass(OutrankedException.class);\n+        verify(mockClientRouter).completeExceptionally(\n+                eq(responseREJECT.getHeader().getRequestId()), exceptionCaptor.capture());\n+        OutrankedException outrankedException = exceptionCaptor.getValue();\n+        assertThat(outrankedException.getNewRank()).isEqualTo(defaultRank);\n+\n+        retLayout = outrankedException.getLayout();\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutHandler correctly handles a PROPOSE_LAYOUT_RESPONSE.\n+     */\n+    @Test\n+    public void testPropose() {\n+        long defaultRank = 5L;\n+        ResponseMsg responseACK = getResponseMsg(\n+                getBasicHeader(false, false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzU0OTkyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoyNDowOFrOH8QP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjoyNDowOFrOH8QP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0MjgzNw==", "bodyText": "This can be removed as this is the default behaviour in AbstractServer.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532942837", "createdAt": "2020-11-30T22:24:08Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -101,19 +96,18 @@ public LayoutServer(@Nonnull ServerContext serverContext) {\n                 .dataStore(serverContext.getDataStore())\n                 .build();\n \n-        executor = Executors.newFixedThreadPool(\n-                serverContext.getLayoutServerThreadCount(),\n-                new ServerThreadFactory(\"layoutServer-\", new ExceptionHandler())\n-        );\n+        this.executor = serverContext.getExecutorService(\n+                serverContext.getLayoutServerThreadCount(), \"layoutServer-\");\n \n         if (serverContext.installSingleNodeLayoutIfAbsent()) {\n             setLayoutInHistory(getCurrentLayout());\n         }\n     }\n \n     @Override\n+    @Deprecated\n     protected void processRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        executor.submit(() -> getHandler().handle(msg, ctx, r));\n+        throw new UnsupportedOperationException(\"CorfuMsg is no longer supported, please use Protobuf\");\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzU3MDk2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo1N1rOH8QceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo1N1rOH8QceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NjA0MQ==", "bodyText": "Since getLayout() can return null, we should also perform a check for null here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532946041", "createdAt": "2020-11-30T22:30:57Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if (payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (getCurrentLayout() != null) {\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n+            r.sendResponse(response, ctx);\n+            return;\n+        }\n \n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                setCurrentLayout(layout);\n-                serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+        final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+\n+        if (layout.getClusterId() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzU5MTkzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozNzo1M1rOH8QotQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozNzo1M1rOH8QotQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0OTE3Mw==", "bodyText": "Should we perform a check for null before this?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532949173", "createdAt": "2020-11-30T22:37:53Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if (payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (getCurrentLayout() != null) {\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n+            r.sendResponse(response, ctx);\n+            return;\n+        }\n \n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                setCurrentLayout(layout);\n-                serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+        final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+\n+        if (layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                    requestHeader.getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader,\n+                    getBootstrapLayoutResponseMsg(false));\n         } else {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleMessageLayoutBootstrap: Got a request to bootstrap a server which is \"\n-                    + \"already bootstrapped, rejecting!\");\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+            setCurrentLayout(layout);\n+            serverContext.setServerEpoch(layout.getEpoch(), r);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader,\n+                    getBootstrapLayoutResponseMsg(true));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a prepare message if the rank is higher than any accepted so far.\n      *\n-     * @param msg corfu message containing LAYOUT_PREPARE\n+     * @param req corfu message containing PREPARE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    // TODO this can work under a separate lock for this step as it does not change the global\n-    // components\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PREPARE)\n-    public synchronized void handleMessageLayoutPrepare(\n-            @NonNull CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        // Check if the prepare is for the correct epoch\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    // TODO this can work under a separate lock for this step as it does not change the global components\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PREPARE_LAYOUT_REQUEST)\n+    public synchronized void handlePrepareLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final PrepareLayoutRequestMsg payload = req.getPayload().getPrepareLayoutRequest();\n+\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();;\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank prepareRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank prepareRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n         if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPrepare: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\",\n-                    msg.getPayload().getEpoch(), serverEpoch, msg);\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n-        Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        final Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n \n-        // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.\n+        // If the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n         if (phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPrepare: Rejected phase 1 prepare of rank={}, \"\n-                    + \"phase1Rank={}\", prepareRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_REJECT.payloadMsg(new\n-                    LayoutPrepareResponse(phase1Rank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: Rejected phase 1 prepare of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), prepareRank, phase1Rank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    false, phase1Rank.getRank(), proposedLayout));\n         } else {\n             // Return the layout with the highest rank proposed before.\n-            Rank highestProposedRank = proposedLayout == null ? new Rank(-1L, msg.getClientID())\n-                    : getPhase2Rank(payloadEpoch);\n+            Rank highestProposedRank = proposedLayout == null ?\n+                    new Rank(-1L, getUUID(requestHeader.getClientId())) : getPhase2Rank(payloadEpoch);\n+\n             setPhase1Rank(prepareRank, payloadEpoch);\n-            log.debug(\"handleMessageLayoutPrepare: New phase 1 rank={}\", prepareRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_ACK.payloadMsg(new\n-                    LayoutPrepareResponse(highestProposedRank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: New phase 1 rank={}\", requestHeader.getRequestId(), prepareRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    true, highestProposedRank.getRank(), proposedLayout));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a proposal for which it had accepted in the prepare phase.\n      * A minor optimization is to reject any duplicate propose messages.\n      *\n-     * @param msg corfu message containing LAYOUT_PROPOSE\n+     * @param req corfu message containing PROPOSE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PROPOSE)\n-    public synchronized void handleMessageLayoutPropose(\n-            @NonNull CorfuPayloadMsg<LayoutProposeRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PROPOSE_LAYOUT_REQUEST)\n+    public synchronized void handleProposeLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final ProposeLayoutRequestMsg payload = req.getPayload().getProposeLayoutRequest();\n \n-        if (!isBootstrapped(msg, ctx, r)) {\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank proposeRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank proposeRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n-        // Check if the propose is for the correct epoch\n         if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPropose: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\", payloadEpoch, serverEpoch, msg);\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n             return;\n         }\n-        // This is a propose. If no prepare, reject.\n+\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        // If there is not corresponding PREPARE_LAYOUT_REQUEST, reject.\n         if (phase1Rank == null) {\n-            log.debug(\"handleMessageLayoutPropose: Rejected phase 2 propose of rank={}, \"\n-                    + \"phase1Rank=none\", proposeRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(-1)));\n+            log.debug(\"handleProposeLayoutRequest[{}]: Rejected phase 2 propose of rank={}, phase1Rank=none\",\n+                    requestHeader.getRequestId(), proposeRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, -1L));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n-        // This is a propose. If the rank in the proposal is less than or equal to the highest yet\n-        // observed prepare rank, reject.\n+\n+        // If the rank in PROPOSE_LAYOUT_REQUEST is less than or equal to the highest observed\n+        // rank from PREPARE_LAYOUT_REQUEST, reject.\n         if (!proposeRank.equals(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPropose: Rejected phase 2 propose of rank={}, \"\n-                    + \"phase1Rank={}\", proposeRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(phase1Rank.getRank())));\n+            log.debug(\"handleProposeLayoutRequest[{}]: Rejected phase 2 propose of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), proposeRank, phase1Rank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, phase1Rank.getRank()));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n         final Rank phase2Rank = getPhase2Rank(payloadEpoch);\n-        final Layout proposeLayout = msg.getPayload().getLayout();\n+        final Layout proposeLayout = getLayout(payload.getLayout());\n \n-        // Make sure that the layout epoch is the same as the LayoutProposeRequest epoch.\n+        // Make sure that the layout epoch is the same as the PROPOSE_LAYOUT_REQUEST epoch.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzU5Nzc1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozOTo0OVrOH8QsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozOTo0OVrOH8QsJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1MDA1Mw==", "bodyText": "getHeaderMsg(requestHeader, false, true) since successful?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532950053", "createdAt": "2020-11-30T22:39:49Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long msgEpoch = msg.getPayload();\n+        final long payloadEpoch = req.getPayload().getLayoutRequest().getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        if (msgEpoch <= serverEpoch) {\n-            r.sendResponse(ctx, msg, new LayoutMsg(getCurrentLayout(), CorfuMsgType\n-                    .LAYOUT_RESPONSE));\n+        if (payloadEpoch <= serverEpoch) {\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getLayoutResponseMsg(getCurrentLayout()));\n+            r.sendResponse(response, ctx);\n         } else {\n-            // else the client is somehow ahead of the server.\n-            //TODO figure out a strategy to deal with this situation\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.warn(\"handleMessageLayoutRequest: Message Epoch {} ahead of Server epoch {}\",\n-                    msgEpoch, serverEpoch);\n+            log.warn(\"handleLayoutRequest[{}]: Payload epoch {} ahead of Server epoch {}\",\n+                    req.getHeader().getRequestId(), payloadEpoch, serverEpoch);\n+\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n         }\n     }\n \n     /**\n      * Sets the new layout if the server has not been bootstrapped with one already.\n      *\n-     * @param msg corfu message containing LAYOUT_BOOTSTRAP\n+     * @param req corfu message containing BOOTSTRAP_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_BOOTSTRAP)\n-    public synchronized void handleMessageLayoutBootstrap(\n-            @NonNull CorfuPayloadMsg<LayoutBootstrapRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n+    public synchronized void handleBootstrapLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (getCurrentLayout() != null) {\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: Got a request to bootstrap a server which is \"\n+                    + \"already bootstrapped, rejecting!\", requestHeader.getRequestId());\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n+            r.sendResponse(response, ctx);\n+            return;\n+        }\n \n-        if (getCurrentLayout() == null) {\n-            Layout layout = msg.getPayload().getLayout();\n-\n-            log.info(\"handleMessageLayoutBootstrap: Bootstrap with new layout={}, {}\",\n-                    layout, msg);\n-\n-            if (layout.getClusterId() == null) {\n-                log.warn(\"handleMessageLayoutBootstrap: The layout does {} not have a clusterId\",\n-                        layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                setCurrentLayout(layout);\n-                serverContext.setServerEpoch(layout.getEpoch(), r);\n-                //send a response that the bootstrap was successful.\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+        final Layout layout = getLayout(req.getPayload().getBootstrapLayoutRequest().getLayout());\n+\n+        if (layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapLayoutRequest[{}]: The layout={} does not have a clusterId\",\n+                    requestHeader.getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader,\n+                    getBootstrapLayoutResponseMsg(false));\n         } else {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleMessageLayoutBootstrap: Got a request to bootstrap a server which is \"\n-                    + \"already bootstrapped, rejecting!\");\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP));\n+            log.info(\"handleBootstrapLayoutRequest[{}]: Bootstrap with new layout={}\", requestHeader.getRequestId(), layout);\n+            setCurrentLayout(layout);\n+            serverContext.setServerEpoch(layout.getEpoch(), r);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader,\n+                    getBootstrapLayoutResponseMsg(true));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a prepare message if the rank is higher than any accepted so far.\n      *\n-     * @param msg corfu message containing LAYOUT_PREPARE\n+     * @param req corfu message containing PREPARE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    // TODO this can work under a separate lock for this step as it does not change the global\n-    // components\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PREPARE)\n-    public synchronized void handleMessageLayoutPrepare(\n-            @NonNull CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n-\n-        // Check if the prepare is for the correct epoch\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    // TODO this can work under a separate lock for this step as it does not change the global components\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PREPARE_LAYOUT_REQUEST)\n+    public synchronized void handlePrepareLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final PrepareLayoutRequestMsg payload = req.getPayload().getPrepareLayoutRequest();\n+\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();;\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank prepareRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank prepareRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n         if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPrepare: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\",\n-                    msg.getPayload().getEpoch(), serverEpoch, msg);\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n-        Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        final Layout proposedLayout = getProposedLayout(payloadEpoch);\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n \n-        // This is a prepare. If the rank is less than or equal to the phase 1 rank, reject.\n+        // If the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n         if (phase1Rank != null && prepareRank.lessThanEqualTo(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPrepare: Rejected phase 1 prepare of rank={}, \"\n-                    + \"phase1Rank={}\", prepareRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_REJECT.payloadMsg(new\n-                    LayoutPrepareResponse(phase1Rank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: Rejected phase 1 prepare of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), prepareRank, phase1Rank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    false, phase1Rank.getRank(), proposedLayout));\n         } else {\n             // Return the layout with the highest rank proposed before.\n-            Rank highestProposedRank = proposedLayout == null ? new Rank(-1L, msg.getClientID())\n-                    : getPhase2Rank(payloadEpoch);\n+            Rank highestProposedRank = proposedLayout == null ?\n+                    new Rank(-1L, getUUID(requestHeader.getClientId())) : getPhase2Rank(payloadEpoch);\n+\n             setPhase1Rank(prepareRank, payloadEpoch);\n-            log.debug(\"handleMessageLayoutPrepare: New phase 1 rank={}\", prepareRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PREPARE_ACK.payloadMsg(new\n-                    LayoutPrepareResponse(highestProposedRank.getRank(), proposedLayout)));\n+            log.debug(\"handlePrepareLayoutRequest[{}]: New phase 1 rank={}\", requestHeader.getRequestId(), prepareRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, true);\n+            response = getResponseMsg(responseHeader, getPrepareLayoutResponseMsg(\n+                    true, highestProposedRank.getRank(), proposedLayout));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Accepts a proposal for which it had accepted in the prepare phase.\n      * A minor optimization is to reject any duplicate propose messages.\n      *\n-     * @param msg corfu message containing LAYOUT_PROPOSE\n+     * @param req corfu message containing PROPOSE_LAYOUT_REQUEST\n      * @param ctx netty ChannelHandlerContext\n      * @param r   server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_PROPOSE)\n-    public synchronized void handleMessageLayoutPropose(\n-            @NonNull CorfuPayloadMsg<LayoutProposeRequest> msg,\n-            ChannelHandlerContext ctx,\n-            @NonNull IServerRouter r) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.PROPOSE_LAYOUT_REQUEST)\n+    public synchronized void handleProposeLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final HeaderMsg requestHeader = req.getHeader();\n+        final ProposeLayoutRequestMsg payload = req.getPayload().getProposeLayoutRequest();\n \n-        if (!isBootstrapped(msg, ctx, r)) {\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);\n             return;\n         }\n \n-        final long payloadEpoch = msg.getPayload().getEpoch();\n+        final long payloadEpoch = payload.getEpoch();\n         final long serverEpoch = getServerEpoch();\n \n-        final Rank proposeRank = new Rank(msg.getPayload().getRank(), msg.getClientID());\n         final Rank phase1Rank = getPhase1Rank(payloadEpoch);\n+        final Rank proposeRank = new Rank(payload.getRank(), getUUID(requestHeader.getClientId()));\n \n-        // Check if the propose is for the correct epoch\n         if (payloadEpoch != serverEpoch) {\n-            r.sendResponse(ctx, msg, new CorfuPayloadMsg<>(CorfuMsgType.WRONG_EPOCH, serverEpoch));\n-            log.trace(\"handleMessageLayoutPropose: Incoming message with wrong epoch, got {}, \"\n-                            + \"expected {}, message was: {}\", payloadEpoch, serverEpoch, msg);\n+            HeaderMsg responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            ResponseMsg response = getResponseMsg(responseHeader, getWrongEpochErrorMsg(serverEpoch));\n+            r.sendResponse(response, ctx);\n             return;\n         }\n-        // This is a propose. If no prepare, reject.\n+\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        // If there is not corresponding PREPARE_LAYOUT_REQUEST, reject.\n         if (phase1Rank == null) {\n-            log.debug(\"handleMessageLayoutPropose: Rejected phase 2 propose of rank={}, \"\n-                    + \"phase1Rank=none\", proposeRank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(-1)));\n+            log.debug(\"handleProposeLayoutRequest[{}]: Rejected phase 2 propose of rank={}, phase1Rank=none\",\n+                    requestHeader.getRequestId(), proposeRank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, -1L));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n-        // This is a propose. If the rank in the proposal is less than or equal to the highest yet\n-        // observed prepare rank, reject.\n+\n+        // If the rank in PROPOSE_LAYOUT_REQUEST is less than or equal to the highest observed\n+        // rank from PREPARE_LAYOUT_REQUEST, reject.\n         if (!proposeRank.equals(phase1Rank)) {\n-            log.debug(\"handleMessageLayoutPropose: Rejected phase 2 propose of rank={}, \"\n-                    + \"phase1Rank={}\", proposeRank, phase1Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(phase1Rank.getRank())));\n+            log.debug(\"handleProposeLayoutRequest[{}]: Rejected phase 2 propose of rank={}, phase1Rank={}\",\n+                    requestHeader.getRequestId(), proposeRank, phase1Rank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, phase1Rank.getRank()));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n         final Rank phase2Rank = getPhase2Rank(payloadEpoch);\n-        final Layout proposeLayout = msg.getPayload().getLayout();\n+        final Layout proposeLayout = getLayout(payload.getLayout());\n \n-        // Make sure that the layout epoch is the same as the LayoutProposeRequest epoch.\n+        // Make sure that the layout epoch is the same as the PROPOSE_LAYOUT_REQUEST epoch.\n         if (proposeLayout.getEpoch() != payloadEpoch) {\n-            log.debug(\"Phase II error: layout {} and payload {} epoch should be the same\",\n-                    proposeLayout.getEpoch(), payloadEpoch);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(phase1Rank.getRank())));\n+            log.debug(\"handleProposeLayoutRequest[{}]: layout {} and payload {} epoch should be the same\",\n+                    requestHeader.getRequestId(), proposeLayout.getEpoch(), payloadEpoch);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, phase1Rank.getRank()));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n-        // In addition, if the rank in the propose message is equal to the current phase 2 rank\n-        // (already accepted message), reject.\n-        // This can happen in case of duplicate messages.\n+        // In addition, if the rank in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank,\n+        // reject. This can happen in case of duplicate messages.\n         if (proposeRank.equals(phase2Rank)) {\n-            log.debug(\"handleMessageLayoutPropose: Rejected phase 2 propose of rank={}, \"\n-                    + \"phase2Rank={}\", proposeRank, phase2Rank);\n-            r.sendResponse(ctx, msg, CorfuMsgType.LAYOUT_PROPOSE_REJECT.payloadMsg(new\n-                    LayoutProposeResponse(phase2Rank.getRank())));\n+            log.debug(\"handleProposeLayoutRequest[{}]: Rejected phase 2 propose of rank={}, phase2Rank={}\",\n+                    requestHeader.getRequestId(), proposeRank, phase2Rank);\n+\n+            responseHeader = getHeaderMsg(requestHeader, false, false);\n+            response = getResponseMsg(responseHeader, getProposeLayoutResponseMsg(false, phase2Rank.getRank()));\n+\n+            r.sendResponse(response, ctx);\n             return;\n         }\n \n-        log.debug(\"handleMessageLayoutPropose: New phase 2 rank={}, layout={}\",\n-                proposeRank, proposeLayout);\n+        log.debug(\"handleProposeLayoutRequest[{}]: New phase 2 rank={}, layout={}\",\n+                requestHeader.getRequestId(), proposeRank, proposeLayout);\n+\n         setPhase2Data(new Phase2Data(proposeRank, proposeLayout), payloadEpoch);\n-        r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-    }\n+        responseHeader = getHeaderMsg(requestHeader, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 450}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzYxOTY5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0NzoxMlrOH8Q5Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0NzoxMlrOH8Q5Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1MzQwMw==", "bodyText": "Can we also verify that the setCurrentLayout method was called on the mockServerContext?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532953403", "createdAt": "2020-11-30T22:47:12Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzYyMjEyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0ODoxMFrOH8Q6tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0ODoxMFrOH8Q6tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1Mzc4Mw==", "bodyText": "Consider also verifying that setCurrentLayout was not called in this case?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532953783", "createdAt": "2020-11-30T22:48:10Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzYyNDkxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0OToxMVrOH8Q8bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo0OToxMVrOH8Q8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NDIyMA==", "bodyText": "Same here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532954220", "createdAt": "2020-11-30T22:49:11Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzYzMjM0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo1MToyN1rOH8RAeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo1MToyN1rOH8RAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NTI1OA==", "bodyText": "Can you also verify the correct epoch argument is what you expect?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532955258", "createdAt": "2020-11-30T22:51:27Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzYzODA2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjo1MzoyMlrOH8RDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzo0ODo0NFrOH9JVaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NjA5Ng==", "bodyText": "Can we also add a test that the request is ignored and that an error is sent if the server isn't bootstrapped yet? Consider doing so for the other RPCs too, where applicable.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532956096", "createdAt": "2020-11-30T22:53:22Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a PREPARE_LAYOUT_REQUEST.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3ODEyMQ==", "bodyText": "Added, thanks!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533878121", "createdAt": "2020-12-02T03:48:44Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a PREPARE_LAYOUT_REQUEST.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1NjA5Ng=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzY2MTk2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowMTozM1rOH8RRcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowMTozM1rOH8RRcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1OTYwMw==", "bodyText": "Can you also verify that the correct epoch is what you expect?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532959603", "createdAt": "2020-11-30T23:01:33Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testPrepareAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Rank>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Rank> rankCaptor = ArgumentCaptor.forClass(Rank.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), rankCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        KvRecord<Rank> record = recordCaptor.getValue();\n+        Rank rank = rankCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // Verify the LayoutServer performs setPhase1Rank through the paxosDataStore with expected values\n+        assertEquals(rank.getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_1_\" + payloadEpoch + \"RANK\");\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), defaultRank);\n+        assertTrue(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PREPARE_LAYOUT_REQUEST when\n+     * the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n+     */\n+    @Test\n+    public void testPrepareWrongPrepareRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long highestPhase1Rank = 10L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(highestPhase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        // PREPARE_LAYOUT_REQUEST should be rejected and the highest phase 1 rank should be returned.\n+        assertFalse(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), highestPhase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a PROPOSE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testProposeAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Phase2Data>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Phase2Data> phase2DataCaptor = ArgumentCaptor.forClass(Phase2Data.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), phase2DataCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        KvRecord<Phase2Data> record = recordCaptor.getValue();\n+        Phase2Data phase2Data = phase2DataCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // Verify the LayoutServer performs setPhase2Rank through the paxosDataStore with expected values\n+        assertEquals(phase2Data.getRank().getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_2_\" + payloadEpoch + \"DATA\");\n+        // The PROPOSE_LAYOUT_REQUEST should succeed and proposed rank should equal to the rank in proposeRequest\n+        assertTrue(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * there is not corresponding PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testProposeRejectNoPrepare() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasProposeLayoutResponse());\n+        // Propose request should be rejected because there were no phase 1 rank\n+        assertFalse(response.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(response.getPayload().getProposeLayoutResponse().getRank(), defaultRank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the Layout epoch is not equal to payload epoch.\n+     */\n+    @Test\n+    public void testProposeWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongEpoch = 5L;\n+        l.setEpoch(wrongEpoch);\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the Layout epoch is not equal to payload epoch\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is less than or equal to the phase1rank\n+     */\n+    @Test\n+    public void testProposeWrongProposeRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongProposeRank = 10L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, wrongProposeRank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected due to wrong propose rank\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+     */\n+    @Test\n+    public void testProposeDuplicateMessage() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        when(mockDataStore.get(argThat(new Phase2Matcher(payloadEpoch))))\n+                .thenReturn(new Phase2Data(new Rank(phase1Rank, DEFAULT_UUID), l));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the rank\n+        // in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a COMMIT_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testCommitAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(false, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+        ArgumentCaptor<Long> serverEpochCaptor = ArgumentCaptor.forClass(Long.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerContext).setCurrentLayout(layoutCaptor.capture());\n+        verify(mockServerContext).setServerEpoch(serverEpochCaptor.capture(), any(IServerRouter.class));\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        Layout currentLayout = layoutCaptor.getValue();\n+        long serverEpoch = serverEpochCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasCommitLayoutResponse());\n+        assertTrue(response.getPayload().getCommitLayoutResponse().getCommitted());\n+        // Verify the serverContext performs setCurrentLayout and setServerEpoch with expected values\n+        assertLayoutMatch(currentLayout);\n+        assertEquals(serverEpoch, payloadEpoch);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a COMMIT_LAYOUT_REQUEST when\n+     * the payloadEpoch is not equal to serverEpoch..\n+     */\n+    @Test\n+    public void testCommitWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long serverEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(false, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockServerContext.getServerEpoch()).thenReturn(serverEpoch);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerContext, never()).setCurrentLayout(any());\n+        verify(mockServerContext, never()).setServerEpoch(anyLong(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 576}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzY3MzYzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNTo1NFrOH8RYHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNTo1NFrOH8RYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MTMwOA==", "bodyText": "Are these argument captors necessary? I think calling verify with the expected object should suffice here. In most cases, if you know the result ahead of time, you don't need an argument captor.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532961308", "createdAt": "2020-11-30T23:05:54Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testPrepareAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Rank>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Rank> rankCaptor = ArgumentCaptor.forClass(Rank.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), rankCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        KvRecord<Rank> record = recordCaptor.getValue();\n+        Rank rank = rankCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // Verify the LayoutServer performs setPhase1Rank through the paxosDataStore with expected values\n+        assertEquals(rank.getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_1_\" + payloadEpoch + \"RANK\");\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), defaultRank);\n+        assertTrue(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PREPARE_LAYOUT_REQUEST when\n+     * the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n+     */\n+    @Test\n+    public void testPrepareWrongPrepareRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long highestPhase1Rank = 10L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(highestPhase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        // PREPARE_LAYOUT_REQUEST should be rejected and the highest phase 1 rank should be returned.\n+        assertFalse(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), highestPhase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a PROPOSE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testProposeAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Phase2Data>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Phase2Data> phase2DataCaptor = ArgumentCaptor.forClass(Phase2Data.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), phase2DataCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        KvRecord<Phase2Data> record = recordCaptor.getValue();\n+        Phase2Data phase2Data = phase2DataCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // Verify the LayoutServer performs setPhase2Rank through the paxosDataStore with expected values\n+        assertEquals(phase2Data.getRank().getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_2_\" + payloadEpoch + \"DATA\");\n+        // The PROPOSE_LAYOUT_REQUEST should succeed and proposed rank should equal to the rank in proposeRequest\n+        assertTrue(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * there is not corresponding PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testProposeRejectNoPrepare() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasProposeLayoutResponse());\n+        // Propose request should be rejected because there were no phase 1 rank\n+        assertFalse(response.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(response.getPayload().getProposeLayoutResponse().getRank(), defaultRank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the Layout epoch is not equal to payload epoch.\n+     */\n+    @Test\n+    public void testProposeWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongEpoch = 5L;\n+        l.setEpoch(wrongEpoch);\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the Layout epoch is not equal to payload epoch\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is less than or equal to the phase1rank\n+     */\n+    @Test\n+    public void testProposeWrongProposeRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongProposeRank = 10L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, wrongProposeRank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected due to wrong propose rank\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+     */\n+    @Test\n+    public void testProposeDuplicateMessage() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        when(mockDataStore.get(argThat(new Phase2Matcher(payloadEpoch))))\n+                .thenReturn(new Phase2Data(new Rank(phase1Rank, DEFAULT_UUID), l));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the rank\n+        // in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a COMMIT_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testCommitAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(false, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+        ArgumentCaptor<Long> serverEpochCaptor = ArgumentCaptor.forClass(Long.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 525}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzY3NDc2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNjoyNVrOH8RY3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNjoyNVrOH8RY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MTUwMQ==", "bodyText": "Same here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r532961501", "createdAt": "2020-11-30T23:06:25Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuLayoutServerTest.java", "diffHunk": "@@ -0,0 +1,710 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.datastore.DataStore;\n+import org.corfudb.infrastructure.datastore.KvDataStore.KvRecord;\n+import org.corfudb.protocols.CorfuProtocolCommon;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.RequestMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutRequestMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getRequestMsg;\n+import static org.corfudb.runtime.proto.ServerErrors.ServerErrorMsg;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@Slf4j\n+public class CorfuLayoutServerTest {\n+\n+    @Rule\n+    public MockitoRule mockito = MockitoJUnit.rule();\n+\n+    // LayoutServer instance used for testing\n+    private LayoutServer layoutServer;\n+\n+    // Objects that need to be mocked\n+    private ServerContext mockServerContext;\n+    private IServerRouter mockServerRouter;\n+    private ChannelHandlerContext mockChannelHandlerContext;\n+    private DataStore mockDataStore;\n+\n+    private final AtomicInteger requestCounter = new AtomicInteger();\n+\n+    /**\n+     * A helper method that creates a basic message header populated\n+     * with default values.\n+     *\n+     * @param ignoreClusterId   indicates if the message is clusterId aware\n+     * @param ignoreEpoch       indicates if the message is epoch aware\n+     * @return                  the corresponding HeaderMsg\n+     */\n+    private HeaderMsg getBasicHeader(boolean ignoreClusterId, boolean ignoreEpoch) {\n+        return getHeaderMsg(requestCounter.incrementAndGet(), PriorityLevel.NORMAL, 0L,\n+                getUuidMsg(DEFAULT_UUID), getUuidMsg(DEFAULT_UUID), ignoreClusterId, ignoreEpoch);\n+    }\n+\n+    /**\n+     * A helper method that compares the base fields of two message headers.\n+     * These include the request ID, the epoch, the client ID, and the cluster ID.\n+     * @param requestHeader   the header from the request message\n+     * @param responseHeader  the header from the response message\n+     * @return                true if the two headers have the same base field values\n+     */\n+    private boolean compareBaseHeaderFields(HeaderMsg requestHeader, HeaderMsg responseHeader) {\n+        return requestHeader.getRequestId() == responseHeader.getRequestId() &&\n+                requestHeader.getEpoch() == responseHeader.getEpoch() &&\n+                requestHeader.getClientId().equals(responseHeader.getClientId()) &&\n+                requestHeader.getClusterId().equals(responseHeader.getClusterId());\n+    }\n+\n+    /**\n+     * Perform the required preparation before running individual tests.\n+     * This includes preparing the mocks and initializing the DirectExecutorService.\n+     */\n+    @Before\n+    public void setup() {\n+        mockServerContext = mock(ServerContext.class);\n+        mockServerRouter = mock(IServerRouter.class);\n+        mockChannelHandlerContext = mock(ChannelHandlerContext.class);\n+        mockDataStore = mock(DataStore.class);\n+\n+        // Initialize with newDirectExecutorService to execute the server RPC\n+        // handler methods on the calling thread\n+        when(mockServerContext.getExecutorService(anyInt(), anyString()))\n+                .thenReturn(MoreExecutors.newDirectExecutorService());\n+\n+        // Initialize mocked DataStore for LayoutServer\n+        when(mockServerContext.getDataStore()).thenReturn(mockDataStore);\n+\n+        layoutServer = new LayoutServer(mockServerContext);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testBootstrapLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertTrue(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a BOOTSTRAP_LAYOUT_REQUEST\n+     * with a legacy layout having a null clusterId\u3002\n+     */\n+    @Test\n+    public void testBootstrapLayoutWithNullClusterId() throws IOException {\n+        Layout l = getDefaultLayout();\n+        l.setClusterId(null);\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasBootstrapLayoutResponse());\n+        assertFalse(response.getPayload().getBootstrapLayoutResponse().getBootstrapped());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly sends a BootstrappedErrorMsg.\n+     */\n+    @Test\n+    public void testBootstrappedLayout() throws IOException {\n+        Layout l = getDefaultLayout();\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getBootstrapLayoutRequestMsg(l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a BOOTSTRAP_LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a BootstrappedErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasBootstrappedError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testGetLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(payloadEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasLayoutResponse());\n+\n+        Layout retLayout = CorfuProtocolCommon.getLayout(response.getPayload().getLayoutResponse().getLayout());\n+        assertLayoutMatch(retLayout);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a LAYOUT_REQUEST with wrong epoch.\n+     */\n+    @Test\n+    public void testGetLayoutWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long wrongEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(true, true),\n+                getLayoutRequestMsg(wrongEpoch)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly handles a PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testPrepareAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Rank>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Rank> rankCaptor = ArgumentCaptor.forClass(Rank.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), rankCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        KvRecord<Rank> record = recordCaptor.getValue();\n+        Rank rank = rankCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // Verify the LayoutServer performs setPhase1Rank through the paxosDataStore with expected values\n+        assertEquals(rank.getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_1_\" + payloadEpoch + \"RANK\");\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), defaultRank);\n+        assertTrue(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PREPARE_LAYOUT_REQUEST when\n+     * the PREPARE_LAYOUT_REQUEST rank is less than or equal to the highest phase 1 rank, reject.\n+     */\n+    @Test\n+    public void testPrepareWrongPrepareRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long highestPhase1Rank = 10L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getPrepareLayoutRequestMsg(payloadEpoch, phase1Rank)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(highestPhase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasPrepareLayoutResponse());\n+        // There should not be proposed layout before and the highest rank was set to -1\n+        assertNull(CorfuProtocolCommon.getLayout(response.getPayload().getPrepareLayoutResponse().getLayout()));\n+        // PREPARE_LAYOUT_REQUEST should be rejected and the highest phase 1 rank should be returned.\n+        assertFalse(response.getPayload().getPrepareLayoutResponse().getPrepared());\n+        assertEquals(response.getPayload().getPrepareLayoutResponse().getRank(), highestPhase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a PROPOSE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testProposeAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<KvRecord<Phase2Data>> recordCaptor = ArgumentCaptor.forClass(KvRecord.class);\n+        ArgumentCaptor<Phase2Data> phase2DataCaptor = ArgumentCaptor.forClass(Phase2Data.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore).put(recordCaptor.capture(), phase2DataCaptor.capture());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        KvRecord<Phase2Data> record = recordCaptor.getValue();\n+        Phase2Data phase2Data = phase2DataCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // Verify the LayoutServer performs setPhase2Rank through the paxosDataStore with expected values\n+        assertEquals(phase2Data.getRank().getRank().longValue(), phase1Rank);\n+        assertEquals(record.getFullKeyName(), \"PHASE_2_\" + payloadEpoch + \"DATA\");\n+        // The PROPOSE_LAYOUT_REQUEST should succeed and proposed rank should equal to the rank in proposeRequest\n+        assertTrue(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * there is not corresponding PREPARE_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testProposeRejectNoPrepare() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        // when there were no proposed rank before\n+        long defaultRank = -1L;\n+\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasProposeLayoutResponse());\n+        // Propose request should be rejected because there were no phase 1 rank\n+        assertFalse(response.getPayload().getProposeLayoutResponse().getProposed());\n+        assertEquals(response.getPayload().getProposeLayoutResponse().getRank(), defaultRank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the Layout epoch is not equal to payload epoch.\n+     */\n+    @Test\n+    public void testProposeWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongEpoch = 5L;\n+        l.setEpoch(wrongEpoch);\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the Layout epoch is not equal to payload epoch\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is less than or equal to the phase1rank\n+     */\n+    @Test\n+    public void testProposeWrongProposeRank() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+        long wrongProposeRank = 10L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, wrongProposeRank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected due to wrong propose rank\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+        // The LayoutServer should send back the expected phase1rank\n+        assertEquals(proposeResponse.getPayload().getProposeLayoutResponse().getRank(), phase1Rank);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a PROPOSE_LAYOUT_REQUEST when\n+     * the rank in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+     */\n+    @Test\n+    public void testProposeDuplicateMessage() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long phase1Rank = 5L;\n+\n+        RequestMsg proposeRequest = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getProposeLayoutRequestMsg(payloadEpoch, phase1Rank, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockDataStore.get(argThat(new Phase1Matcher(payloadEpoch))))\n+                .thenReturn(new Rank(phase1Rank, DEFAULT_UUID));\n+        when(mockDataStore.get(argThat(new Phase2Matcher(payloadEpoch))))\n+                .thenReturn(new Phase2Data(new Rank(phase1Rank, DEFAULT_UUID), l));\n+        layoutServer.handleMessage(proposeRequest, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockDataStore, never()).put(any(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg proposeResponse = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(proposeRequest.getHeader(), proposeResponse.getHeader()));\n+        assertTrue(proposeResponse.getPayload().hasProposeLayoutResponse());\n+        // The PROPOSE_LAYOUT_REQUEST should be rejected because the rank\n+        // in PROPOSE_LAYOUT_REQUEST is equal to the current phase 2 rank.\n+        assertFalse(proposeResponse.getPayload().getProposeLayoutResponse().getProposed());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a COMMIT_LAYOUT_REQUEST.\n+     */\n+    @Test\n+    public void testCommitAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(false, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+        ArgumentCaptor<Long> serverEpochCaptor = ArgumentCaptor.forClass(Long.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerContext).setCurrentLayout(layoutCaptor.capture());\n+        verify(mockServerContext).setServerEpoch(serverEpochCaptor.capture(), any(IServerRouter.class));\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        Layout currentLayout = layoutCaptor.getValue();\n+        long serverEpoch = serverEpochCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasCommitLayoutResponse());\n+        assertTrue(response.getPayload().getCommitLayoutResponse().getCommitted());\n+        // Verify the serverContext performs setCurrentLayout and setServerEpoch with expected values\n+        assertLayoutMatch(currentLayout);\n+        assertEquals(serverEpoch, payloadEpoch);\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly rejects a COMMIT_LAYOUT_REQUEST when\n+     * the payloadEpoch is not equal to serverEpoch..\n+     */\n+    @Test\n+    public void testCommitWrongEpoch() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        long serverEpoch = 5L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(false, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+\n+        when(mockServerContext.getCurrentLayout()).thenReturn(l);\n+        when(mockServerContext.getServerEpoch()).thenReturn(serverEpoch);\n+        layoutServer.handleMessage(request, mockChannelHandlerContext, mockServerRouter);\n+        verify(mockServerContext, never()).setCurrentLayout(any());\n+        verify(mockServerContext, never()).setServerEpoch(anyLong(), any());\n+        verify(mockServerRouter).sendResponse(responseCaptor.capture(), any(ChannelHandlerContext.class));\n+\n+        ResponseMsg response = responseCaptor.getValue();\n+        // Assert that the payload has a LAYOUT_RESPONSE and that the base\n+        // header fields have remained the same\n+        assertTrue(compareBaseHeaderFields(request.getHeader(), response.getHeader()));\n+        assertTrue(response.getPayload().hasServerError());\n+        // Check that Layout Server handler sends a WrongEpochErrorMsg\n+        ServerErrorMsg serverErrorMsg = response.getPayload().getServerError();\n+        assertTrue(serverErrorMsg.hasWrongEpochError());\n+    }\n+\n+    /**\n+     * Test that the LayoutServer correctly acknowledges a COMMIT_LAYOUT_REQUEST that is forced set to true.\n+     */\n+    @Test\n+    public void testForceLayoutAck() throws IOException {\n+        Layout l = getDefaultLayout();\n+        long payloadEpoch = 0L;\n+        RequestMsg request = getRequestMsg(\n+                getBasicHeader(false, true),\n+                getCommitLayoutRequestMsg(true, payloadEpoch, l)\n+        );\n+\n+        ArgumentCaptor<ResponseMsg> responseCaptor = ArgumentCaptor.forClass(ResponseMsg.class);\n+        ArgumentCaptor<Layout> layoutCaptor = ArgumentCaptor.forClass(Layout.class);\n+        ArgumentCaptor<Long> serverEpochCaptor = ArgumentCaptor.forClass(Long.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 593}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE4MDM3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1Nzo1MVrOH9GAPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMjoyMTozMVrOIHhowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzU1MQ==", "bodyText": "Notice that this check is called on all the handlers except for the actual bootstrap call. I would recommend that this check is executed in the entry point, i.e, processRequest.\n@Override\n    protected void processRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n        executor.submit(() -> {\n\n\n            if (!req.getPayload().getPayloadCase().equals(RequestPayloadMsg.PayloadCase.BOOTSTRAP_LAYOUT_REQUEST)\n            && !isBootstrapped(req)) {\n                r.sendNoBootstrapError(req.getHeader(), ctx);\n                return;\n            }\n\n            // Don't process layout server requests unless the server is bootstrapped \n            getHandlerMethods().handle(req, ctx, r);\n        });\n    }", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533823551", "createdAt": "2020-12-02T00:57:51Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -127,10 +121,9 @@ public void shutdown() {\n         executor.shutdown();\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    private boolean isBootstrapped(RequestMsg requestMsg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MDY5NQ==", "bodyText": "Yeah it's called for most handlers. But @zfrenette formerly brought up a concern that, by this way we are performing the check before the task is submitted to the executor service, and the status could change by the time the new thread is actually executing the handler. (#2823 (comment)) I think it's reasonable, but would like to know your opinion for this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533880695", "createdAt": "2020-12-02T03:58:02Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -127,10 +121,9 @@ public void shutdown() {\n         executor.shutdown();\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    private boolean isBootstrapped(RequestMsg requestMsg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzU1MQ=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4MTk5Mw==", "bodyText": "but hmm followed by your next comment, those handlers are literally single threaded, then it should be fine to move this check to processRequest :-)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533881993", "createdAt": "2020-12-02T04:02:41Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -127,10 +121,9 @@ public void shutdown() {\n         executor.shutdown();\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    private boolean isBootstrapped(RequestMsg requestMsg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzU1MQ=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc2MjA1MA==", "bodyText": "The status cannot change if only one thread is executing all handlers", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r544762050", "createdAt": "2020-12-17T02:21:31Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -127,10 +121,9 @@ public void shutdown() {\n         executor.shutdown();\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    private boolean isBootstrapped(RequestMsg requestMsg) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzU1MQ=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE4ODYxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTowMTowMFrOH9GE7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDoyMjoxNVrOH9sqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDc0OA==", "bodyText": "I know this predates your patch, but honestly this doesn't make sense at all: having a multi-threaded executor to server the request handlers and marking all the handlers as synchronized is just lol.\nCan you just change this.executor  to be single threaded and drop all the synchronized ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533824748", "createdAt": "2020-12-02T01:01:00Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNTUxOQ==", "bodyText": "With Biased locking (hotspot optimization) having synchronized without contention should be cheap, so you can keep the synchronized methods, but change the executor to a single thread.\nI would just remove the synchronized though, it seems super unnecessary.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533825519", "createdAt": "2020-12-02T01:03:12Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDc0OA=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ1Njg4Mg==", "bodyText": "Removed the synchronized, thanks!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r534456882", "createdAt": "2020-12-02T20:22:15Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LayoutServer.java", "diffHunk": "@@ -141,275 +134,317 @@ private boolean isBootstrapped(CorfuMsg msg, ChannelHandlerContext ctx, IServerR\n     /**\n      * Handle a layout request message.\n      *\n-     * @param msg              corfu message containing LAYOUT_REQUEST\n+     * @param req              corfu message containing LAYOUT_REQUEST\n      * @param ctx              netty ChannelHandlerContext\n      * @param r                server router\n      */\n-    @ServerHandler(type = CorfuMsgType.LAYOUT_REQUEST)\n-    public synchronized void handleMessageLayoutRequest(CorfuPayloadMsg<Long> msg,\n-                                                    ChannelHandlerContext ctx, IServerRouter r) {\n-        if (!isBootstrapped(msg, ctx, r)) {\n+    @RequestHandler(type = RequestPayloadMsg.PayloadCase.LAYOUT_REQUEST)\n+    public synchronized void handleLayoutRequest(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDc0OA=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTIzODE5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMToxODoyN1rOH9Gf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTozMToxNlrOH9GxVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMTY0Nw==", "bodyText": "This is a bug. The clients are expecting an exception to be thrown when this response is sent back, but this will return a value.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533831647", "createdAt": "2020-12-02T01:18:27Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();\n+    }\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n     @ClientHandler(type = CorfuMsgType.LAYOUT_RESPONSE)\n     private static Object handleLayoutResponse(CorfuMsg msg,\n                                                ChannelHandlerContext ctx, IClientRouter r) {\n         return ((LayoutMsg) msg).getLayout();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_ACK)\n-    private static Object handleLayoutPrepareAck(CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r) {\n-        return msg.getPayload();\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n-    private static Object handleNoBootstrap(CorfuMsg msg,\n-                                            ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new NoBootstrapException();\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        boolean prepared = prepareLayoutMsg.getPrepared();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        if (!prepared) {\n+            throw new OutrankedException(rank, layout);\n+        }\n+        return new LayoutPrepareResponse(rank, layout);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_REJECT)\n-    private static Object handlePrepareReject(CorfuPayloadMsg<LayoutPrepareResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutPrepareResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank(), response.getLayout());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        boolean proposed = proposeLayoutMsg.getProposed();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        if (!proposed) {\n+            throw new OutrankedException(rank);\n+        }\n+        return true;\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PROPOSE_REJECT)\n-    private static Object handleProposeReject(CorfuPayloadMsg<LayoutProposeResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutProposeResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+\n+        return commitLayoutMsg.getCommitted();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP)\n-    private static Object handleAlreadyBootstrap(CorfuMsg msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new AlreadyBootstrappedException();\n+    /**\n+     * Handle a bootstrap layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, false if NACK.\n+     */\n+    @ResponseHandler(type = PayloadCase.BOOTSTRAP_LAYOUT_RESPONSE)\n+    private static Object handleBootstrapLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                        IClientRouter r) {\n+        BootstrapLayoutResponseMsg bootstrapLayoutMsg =  msg.getPayload().getBootstrapLayoutResponse();\n+\n+        return bootstrapLayoutMsg.getBootstrapped();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMjk2Ng==", "bodyText": "If you look here: https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/view/LayoutView.java#L328\nA lot of code paths that rely on the exception to be thrown won't execute, because this changes the semantics of the method, but code that consumes this wasn't changed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533832966", "createdAt": "2020-12-02T01:21:51Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();\n+    }\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n     @ClientHandler(type = CorfuMsgType.LAYOUT_RESPONSE)\n     private static Object handleLayoutResponse(CorfuMsg msg,\n                                                ChannelHandlerContext ctx, IClientRouter r) {\n         return ((LayoutMsg) msg).getLayout();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_ACK)\n-    private static Object handleLayoutPrepareAck(CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r) {\n-        return msg.getPayload();\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n-    private static Object handleNoBootstrap(CorfuMsg msg,\n-                                            ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new NoBootstrapException();\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        boolean prepared = prepareLayoutMsg.getPrepared();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        if (!prepared) {\n+            throw new OutrankedException(rank, layout);\n+        }\n+        return new LayoutPrepareResponse(rank, layout);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_REJECT)\n-    private static Object handlePrepareReject(CorfuPayloadMsg<LayoutPrepareResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutPrepareResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank(), response.getLayout());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        boolean proposed = proposeLayoutMsg.getProposed();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        if (!proposed) {\n+            throw new OutrankedException(rank);\n+        }\n+        return true;\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PROPOSE_REJECT)\n-    private static Object handleProposeReject(CorfuPayloadMsg<LayoutProposeResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutProposeResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+\n+        return commitLayoutMsg.getCommitted();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP)\n-    private static Object handleAlreadyBootstrap(CorfuMsg msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new AlreadyBootstrappedException();\n+    /**\n+     * Handle a bootstrap layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, false if NACK.\n+     */\n+    @ResponseHandler(type = PayloadCase.BOOTSTRAP_LAYOUT_RESPONSE)\n+    private static Object handleBootstrapLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                        IClientRouter r) {\n+        BootstrapLayoutResponseMsg bootstrapLayoutMsg =  msg.getPayload().getBootstrapLayoutResponse();\n+\n+        return bootstrapLayoutMsg.getBootstrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMTY0Nw=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNjExOA==", "bodyText": "Ops, I'm wrong.\nThere's a test for this and it is handled in the base handler. Kind of confusing when some errors return a false bool and some throw an exception.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533836118", "createdAt": "2020-12-02T01:31:16Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();\n+    }\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n     @ClientHandler(type = CorfuMsgType.LAYOUT_RESPONSE)\n     private static Object handleLayoutResponse(CorfuMsg msg,\n                                                ChannelHandlerContext ctx, IClientRouter r) {\n         return ((LayoutMsg) msg).getLayout();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_ACK)\n-    private static Object handleLayoutPrepareAck(CorfuPayloadMsg<LayoutPrepareRequest> msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r) {\n-        return msg.getPayload();\n+    /**\n+     * Handle a layout response from the server.\n+     *\n+     * @param msg The layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link Layout} sent back from server.\n+     */\n+    @ResponseHandler(type = PayloadCase.LAYOUT_RESPONSE)\n+    private static Object handleLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                               IClientRouter r) {\n+        LayoutResponseMsg layoutResponse = msg.getPayload().getLayoutResponse();\n+        RpcCommon.LayoutMsg layoutMsg = layoutResponse.getLayout();\n+\n+        return CorfuProtocolCommon.getLayout(layoutMsg);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n-    private static Object handleNoBootstrap(CorfuMsg msg,\n-                                            ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new NoBootstrapException();\n+    /**\n+     * Handle a prepare layout response from the server.\n+     *\n+     * @param msg The prepare layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return {@link LayoutPrepareResponse} if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PREPARE_LAYOUT_RESPONSE)\n+    private static Object handlePrepareLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        PrepareLayoutResponseMsg prepareLayoutMsg = msg.getPayload().getPrepareLayoutResponse();\n+        boolean prepared = prepareLayoutMsg.getPrepared();\n+        long rank = prepareLayoutMsg.getRank();\n+        Layout layout = CorfuProtocolCommon.getLayout(prepareLayoutMsg.getLayout());\n+\n+        if (!prepared) {\n+            throw new OutrankedException(rank, layout);\n+        }\n+        return new LayoutPrepareResponse(rank, layout);\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PREPARE_REJECT)\n-    private static Object handlePrepareReject(CorfuPayloadMsg<LayoutPrepareResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutPrepareResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank(), response.getLayout());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.PROPOSE_LAYOUT_RESPONSE)\n+    private static Object handleProposeLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                      IClientRouter r) {\n+        ProposeLayoutResponseMsg proposeLayoutMsg = msg.getPayload().getProposeLayoutResponse();\n+        boolean proposed = proposeLayoutMsg.getProposed();\n+        long rank = proposeLayoutMsg.getRank();\n+\n+        if (!proposed) {\n+            throw new OutrankedException(rank);\n+        }\n+        return true;\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_PROPOSE_REJECT)\n-    private static Object handleProposeReject(CorfuPayloadMsg<LayoutProposeResponse> msg,\n-                                              ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        LayoutProposeResponse response = msg.getPayload();\n-        throw new OutrankedException(response.getRank());\n+    /**\n+     * Handle a propose layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, throw an {@link OutrankedException} if REJECT.\n+     */\n+    @ResponseHandler(type = PayloadCase.COMMIT_LAYOUT_RESPONSE)\n+    private static Object handleCommitLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                     IClientRouter r) {\n+        CommitLayoutResponseMsg commitLayoutMsg = msg.getPayload().getCommitLayoutResponse();\n+\n+        return commitLayoutMsg.getCommitted();\n     }\n \n-    @ClientHandler(type = CorfuMsgType.LAYOUT_ALREADY_BOOTSTRAP)\n-    private static Object handleAlreadyBootstrap(CorfuMsg msg,\n-                                                 ChannelHandlerContext ctx, IClientRouter r)\n-            throws Exception {\n-        throw new AlreadyBootstrappedException();\n+    /**\n+     * Handle a bootstrap layout response from the server.\n+     *\n+     * @param msg The propose layout response message.\n+     * @param ctx The context the message was sent under.\n+     * @param r A reference to the router.\n+     * @return True if ACK, false if NACK.\n+     */\n+    @ResponseHandler(type = PayloadCase.BOOTSTRAP_LAYOUT_RESPONSE)\n+    private static Object handleBootstrapLayoutResponse(ResponseMsg msg, ChannelHandlerContext ctx,\n+                                                        IClientRouter r) {\n+        BootstrapLayoutResponseMsg bootstrapLayoutMsg =  msg.getPayload().getBootstrapLayoutResponse();\n+\n+        return bootstrapLayoutMsg.getBootstrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzMTY0Nw=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTI3NDQwOnYy", "diffSide": "RIGHT", "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTozMzo0NFrOH9G0iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo0ODoyOVrOH9m8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNjkzNw==", "bodyText": "Can you remove the tests in LayoutHandlerTest and replace them with these tests?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533836937", "createdAt": "2020-12-02T01:33:44Z", "author": {"login": "Maithem"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.exceptions.SerializerException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.corfudb.runtime.view.Layout.fromJSONString;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2MzIxNA==", "bodyText": "How about just delete the old LayoutHanlderTest?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r534363214", "createdAt": "2020-12-02T17:48:29Z", "author": {"login": "xcchang"}, "path": "runtime/src/test/java/org/corfudb/runtime/clients/CorfuLayoutHandlerTest.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package org.corfudb.runtime.clients;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.protocols.wireprotocol.LayoutPrepareResponse;\n+import org.corfudb.runtime.exceptions.OutrankedException;\n+import org.corfudb.runtime.exceptions.SerializerException;\n+import org.corfudb.runtime.proto.service.CorfuMessage.HeaderMsg;\n+import org.corfudb.runtime.proto.service.CorfuMessage.PriorityLevel;\n+import org.corfudb.runtime.proto.service.CorfuMessage.ResponseMsg;\n+import org.corfudb.runtime.view.Layout;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.LinkedList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.corfudb.protocols.CorfuProtocolCommon.DEFAULT_UUID;\n+import static org.corfudb.protocols.CorfuProtocolCommon.getUuidMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getBootstrapLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getCommitLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getPrepareLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolLayout.getProposeLayoutResponseMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getHeaderMsg;\n+import static org.corfudb.protocols.service.CorfuProtocolMessage.getResponseMsg;\n+import static org.corfudb.runtime.view.Layout.fromJSONString;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@Slf4j\n+@RunWith(MockitoJUnitRunner.class)\n+public class CorfuLayoutHandlerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNjkzNw=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTI3NzY1OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTozNTowNFrOH9G2Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNDoyMzo1N1rOH9J67w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNzM5MQ==", "bodyText": "Can you delete these instead of deprecating ?\nThey are not exposed publicly and we dont support backward compatibility.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533837391", "createdAt": "2020-12-02T01:35:04Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg4NzcyNw==", "bodyText": "Yeah they will be deleted after the following PRs get merged. Currently they are still used by some other CorfuMsg RPCs even if all the Layout RPCs has been replaced by Protobuf.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r533887727", "createdAt": "2020-12-02T04:23:57Z", "author": {"login": "xcchang"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/LayoutHandler.java", "diffHunk": "@@ -52,46 +59,116 @@ public LayoutClient getClient(long epoch, UUID clusterID) {\n             .generateHandlers(MethodHandles.lookup(), this)\n             .generateErrorHandlers(MethodHandles.lookup(), this);\n \n+    /**\n+     * TODO: Remove this method when Management RPC get landed.\n+     */\n+    @Deprecated\n+    @ClientHandler(type = CorfuMsgType.LAYOUT_NOBOOTSTRAP)\n+    private static Object handleNoBootstrap(CorfuMsg msg,\n+                                            ChannelHandlerContext ctx, IClientRouter r)\n+            throws Exception {\n+        throw new NoBootstrapException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgzNzM5MQ=="}, "originalCommit": {"oid": "4490e7ac4f944ca0e5f963f8d0eb49930f56557f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjA0NTA0OnYy", "diffSide": "LEFT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/LayoutPrepareResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo1M1rOH9grRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo1M1rOH9grRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDU0OA==", "bodyText": "You can also remove the unused ByteBuf import here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2823#discussion_r534260548", "createdAt": "2020-12-02T15:32:53Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/LayoutPrepareResponse.java", "diffHunk": "@@ -19,30 +19,7 @@\n  */\n @Data\n @AllArgsConstructor\n-public class LayoutPrepareResponse implements ICorfuPayload<LayoutPrepareResponse> {\n+public class LayoutPrepareResponse {\n     private long rank;\n     private Layout layout;\n-\n-    /**\n-     * Constructor for layout server response in first phase of Paxos.\n-     */\n-    public LayoutPrepareResponse(ByteBuf buf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63734e2bf06f27e0390d471b8cffb91a0feb5f45"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}