{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NjA0OTA3", "number": 2712, "title": "Fail Non-Transactional Enqueue", "bodyText": "Overview\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction.\nDescription:\nWhy should this be merged: Addresses #2710\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-08-13T20:01:20Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712", "merged": true, "mergeCommit": {"oid": "84fe029c94d9c3242e92aab9d60c083c9430250f"}, "closed": true, "closedAt": "2020-08-14T07:01:28Z", "author": {"login": "Maithem"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-nYv7gFqTQ2NzE2MTI2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-o_2kAFqTQ2NzIxMzQ4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTYxMjY5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467161269", "createdAt": "2020-08-13T22:02:42Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMjo0MlrOHAfPhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMjo0MlrOHAfPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3MzkyNA==", "bodyText": "I'm concerned, if this change could affect the clients since we changed contract, hope it works", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#discussion_r470273924", "createdAt": "2020-08-13T22:02:42Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -157,40 +160,38 @@ public int hashCode() {\n      *         element prevents it from being added to this queue\n      */\n     public CorfuRecordId enqueue(E e) {\n+        checkState(TransactionalContext.isInTransaction(), \"must be called within a transaction!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTYxNTQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467161540", "createdAt": "2020-08-13T22:03:18Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzoxOFrOHAfQVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzoxOFrOHAfQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NDEzMg==", "bodyText": "final?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#discussion_r470274132", "createdAt": "2020-08-13T22:03:18Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -157,40 +160,38 @@ public int hashCode() {\n      *         element prevents it from being added to this queue\n      */\n     public CorfuRecordId enqueue(E e) {\n+        checkState(TransactionalContext.isInTransaction(), \"must be called within a transaction!\");\n         final CorfuRecordId id = new CorfuRecordId(0, guidGenerator.nextLong());\n \n-        // If we are in a transaction, then we need the commit address of this transaction\n-        // to fix up as the txSequence\n-        if (TransactionalContext.isInTransaction()) {\n-            /**\n-             * This is a callback that is placed into the root transaction's context on\n-             * the thread local stack which will be invoked right after this transaction\n-             * is deemed successful and has obtained a final sequence number to write.\n-             */\n-            class QueueEntryAddressGetter implements PreCommitListener {\n-                private CorfuRecordId recordId;\n-                private QueueEntryAddressGetter(CorfuRecordId recordId) {\n-                    this.recordId = recordId;\n-                }\n-\n-                /**\n-                 * If we are in a transaction, determine the commit address and fix it up in\n-                 * the queue entry.\n-                 * @param tokenResponse\n-                 */\n-                @Override\n-                public void preCommitCallback(TokenResponse tokenResponse) {\n-                    recordId.setTxSequence(tokenResponse.getSequence());\n-                    log.trace(\"preCommitCallback for Queue: \" + recordId.toString());\n-                }\n-            }\n-            QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(id);\n-            log.trace(\"enqueue: Adding preCommitListener for Queue: \" + id.toString());\n-            TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n-        }\n-\n-        corfuTable.put(id, e);\n-        return id;\n+        /**\n+         * This is a callback that is placed into the root transaction's context on\n+         * the thread local stack which will be invoked right after this transaction\n+         * is deemed successful and has obtained a final sequence number to write.\n+         */\n+         class QueueEntryAddressGetter implements PreCommitListener {\n+             private CorfuRecordId recordId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTYxNjcz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467161673", "createdAt": "2020-08-13T22:03:35Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzozNVrOHAfQuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowMzozNVrOHAfQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NDIzMg==", "bodyText": "@AllArgsConstructor ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#discussion_r470274232", "createdAt": "2020-08-13T22:03:35Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -157,40 +160,38 @@ public int hashCode() {\n      *         element prevents it from being added to this queue\n      */\n     public CorfuRecordId enqueue(E e) {\n+        checkState(TransactionalContext.isInTransaction(), \"must be called within a transaction!\");\n         final CorfuRecordId id = new CorfuRecordId(0, guidGenerator.nextLong());\n \n-        // If we are in a transaction, then we need the commit address of this transaction\n-        // to fix up as the txSequence\n-        if (TransactionalContext.isInTransaction()) {\n-            /**\n-             * This is a callback that is placed into the root transaction's context on\n-             * the thread local stack which will be invoked right after this transaction\n-             * is deemed successful and has obtained a final sequence number to write.\n-             */\n-            class QueueEntryAddressGetter implements PreCommitListener {\n-                private CorfuRecordId recordId;\n-                private QueueEntryAddressGetter(CorfuRecordId recordId) {\n-                    this.recordId = recordId;\n-                }\n-\n-                /**\n-                 * If we are in a transaction, determine the commit address and fix it up in\n-                 * the queue entry.\n-                 * @param tokenResponse\n-                 */\n-                @Override\n-                public void preCommitCallback(TokenResponse tokenResponse) {\n-                    recordId.setTxSequence(tokenResponse.getSequence());\n-                    log.trace(\"preCommitCallback for Queue: \" + recordId.toString());\n-                }\n-            }\n-            QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(id);\n-            log.trace(\"enqueue: Adding preCommitListener for Queue: \" + id.toString());\n-            TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n-        }\n-\n-        corfuTable.put(id, e);\n-        return id;\n+        /**\n+         * This is a callback that is placed into the root transaction's context on\n+         * the thread local stack which will be invoked right after this transaction\n+         * is deemed successful and has obtained a final sequence number to write.\n+         */\n+         class QueueEntryAddressGetter implements PreCommitListener {\n+             private CorfuRecordId recordId;\n+             private QueueEntryAddressGetter(CorfuRecordId recordId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTYyOTk5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467162999", "createdAt": "2020-08-13T22:06:29Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowNjoyOVrOHAfU7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowNjoyOVrOHAfU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NTMwOQ==", "bodyText": "Just a question: Are we ok with IllegalStateException? Maybe we have a more specific exception?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#discussion_r470275309", "createdAt": "2020-08-13T22:06:29Z", "author": {"login": "xnull"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuQueueTest.java", "diffHunk": "@@ -1,38 +1,58 @@\n package org.corfudb.runtime.collections;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+\n import com.google.common.primitives.UnsignedBytes;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n import lombok.Getter;\n+import lombok.extern.slf4j.Slf4j;\n+import org.assertj.core.api.Assertions;\n+import org.corfudb.runtime.CorfuRuntime;\n import org.corfudb.runtime.collections.CorfuQueue.CorfuQueueRecord;\n import org.corfudb.runtime.view.AbstractViewTest;\n import org.corfudb.util.serializer.Serializers;\n import org.junit.Test;\n \n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.TreeMap;\n-\n /**\n  * Created by Sundar Sridharan on May 22, 2019\n  */\n-import static org.assertj.core.api.Assertions.assertThat;\n-import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n /**\n  * Simple test of basic operations to check that insert order is preserved in the queue.\n  * Created by hisundar on 05/27/2019\n  */\n+@Slf4j\n public class CorfuQueueTest extends AbstractViewTest {\n \n+    @Test\n+    public void failNonTxnEnqueue() {\n+        CorfuQueue<String>\n+                corfuQueue = new CorfuQueue<>(getDefaultRuntime(), \"test\");\n+        Assertions.assertThatThrownBy(() -> corfuQueue.enqueue(\"c\"))\n+                .isInstanceOf(IllegalStateException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTY0NTc0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467164574", "createdAt": "2020-08-13T22:09:53Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTo1M1rOHAfZ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMjowOTo1M1rOHAfZ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI3NjU2OA==", "bodyText": "@hisundar we never clean PreCommitListeners? Is it ok?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#discussion_r470276568", "createdAt": "2020-08-13T22:09:53Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -157,40 +160,38 @@ public int hashCode() {\n      *         element prevents it from being added to this queue\n      */\n     public CorfuRecordId enqueue(E e) {\n+        checkState(TransactionalContext.isInTransaction(), \"must be called within a transaction!\");\n         final CorfuRecordId id = new CorfuRecordId(0, guidGenerator.nextLong());\n \n-        // If we are in a transaction, then we need the commit address of this transaction\n-        // to fix up as the txSequence\n-        if (TransactionalContext.isInTransaction()) {\n-            /**\n-             * This is a callback that is placed into the root transaction's context on\n-             * the thread local stack which will be invoked right after this transaction\n-             * is deemed successful and has obtained a final sequence number to write.\n-             */\n-            class QueueEntryAddressGetter implements PreCommitListener {\n-                private CorfuRecordId recordId;\n-                private QueueEntryAddressGetter(CorfuRecordId recordId) {\n-                    this.recordId = recordId;\n-                }\n-\n-                /**\n-                 * If we are in a transaction, determine the commit address and fix it up in\n-                 * the queue entry.\n-                 * @param tokenResponse\n-                 */\n-                @Override\n-                public void preCommitCallback(TokenResponse tokenResponse) {\n-                    recordId.setTxSequence(tokenResponse.getSequence());\n-                    log.trace(\"preCommitCallback for Queue: \" + recordId.toString());\n-                }\n-            }\n-            QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(id);\n-            log.trace(\"enqueue: Adding preCommitListener for Queue: \" + id.toString());\n-            TransactionalContext.getRootContext().addPreCommitListener(addressGetter);\n-        }\n-\n-        corfuTable.put(id, e);\n-        return id;\n+        /**\n+         * This is a callback that is placed into the root transaction's context on\n+         * the thread local stack which will be invoked right after this transaction\n+         * is deemed successful and has obtained a final sequence number to write.\n+         */\n+         class QueueEntryAddressGetter implements PreCommitListener {\n+             private CorfuRecordId recordId;\n+             private QueueEntryAddressGetter(CorfuRecordId recordId) {\n+                 this.recordId = recordId;\n+             }\n+\n+             /**\n+              * If we are in a transaction, determine the commit address and fix it up in\n+              * the queue entry.\n+              * @param tokenResponse\n+              */\n+             @Override\n+             public void preCommitCallback(TokenResponse tokenResponse) {\n+                 recordId.setTxSequence(tokenResponse.getSequence());\n+                 log.trace(\"preCommitCallback for Queue: \" + recordId.toString());\n+             }\n+         }\n+\n+         QueueEntryAddressGetter addressGetter = new QueueEntryAddressGetter(id);\n+         log.trace(\"enqueue: Adding preCommitListener for Queue: \" + id.toString());\n+         TransactionalContext.getRootContext().addPreCommitListener(addressGetter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTY1MjIz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467165223", "createdAt": "2020-08-13T22:11:09Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTY5MDY0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467169064", "createdAt": "2020-08-13T22:19:22Z", "commit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2e7c9b86cdd870ad27535afdf98c96ecbad6930", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a2e7c9b86cdd870ad27535afdf98c96ecbad6930", "committedDate": "2020-08-13T19:59:12Z", "message": "Fail Non-Transactional Enqueues\n\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction."}, "afterCommit": {"oid": "44c5f6efd1b68484c6d7c9b17158f033ccf1bef8", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/44c5f6efd1b68484c6d7c9b17158f033ccf1bef8", "committedDate": "2020-08-13T22:27:44Z", "message": "Fail Non-Transactional Enqueues\n\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4345276801e5f7881150150eabb6f403de68f4e6", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4345276801e5f7881150150eabb6f403de68f4e6", "committedDate": "2020-08-13T23:18:50Z", "message": "Fail Non-Transactional Enqueue\n\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44c5f6efd1b68484c6d7c9b17158f033ccf1bef8", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/44c5f6efd1b68484c6d7c9b17158f033ccf1bef8", "committedDate": "2020-08-13T22:27:44Z", "message": "Fail Non-Transactional Enqueues\n\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction."}, "afterCommit": {"oid": "4345276801e5f7881150150eabb6f403de68f4e6", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4345276801e5f7881150150eabb6f403de68f4e6", "committedDate": "2020-08-13T23:18:50Z", "message": "Fail Non-Transactional Enqueue\n\nSince CorfuQueue::enqueue depends on a transactional context to\nwork correctly, a validation step is required to fail enqueue\ncalls that are not within a transaction."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjEzNDgw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2712#pullrequestreview-467213480", "createdAt": "2020-08-13T23:55:20Z", "commit": {"oid": "4345276801e5f7881150150eabb6f403de68f4e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4418, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}