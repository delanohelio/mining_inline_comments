{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MjQ3NzMz", "number": 2335, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMzo1OVrODcEJ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMzo1OVrODcEJ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU0Nzg4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/CompressionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMzo1OVrOFj6YUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMzo0NFrOFo9oYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMDk3OQ==", "bodyText": "can we pass an enum in the method instead of string?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2335#discussion_r373200979", "createdAt": "2020-01-30T21:23:59Z", "author": {"login": "xnull"}, "path": "test/src/test/java/org/corfudb/runtime/CompressionTest.java", "diffHunk": "@@ -73,7 +73,7 @@ private Object read(CorfuRuntime rt, long address) {\n     private List<String> getReadersCodec(String codec) {\n         return Stream.of(Codec.Type.values())\n                 .map(Codec.Type::name)\n-                .filter(type -> type != codec)\n+                .filter(type -> !type.equals(codec))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7096fd9b1455334b0f4dd56ac9550c2a8628b45"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NzEyMQ==", "bodyText": "Changed strings to Enums.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2335#discussion_r378497121", "createdAt": "2020-02-12T20:33:44Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/CompressionTest.java", "diffHunk": "@@ -73,7 +73,7 @@ private Object read(CorfuRuntime rt, long address) {\n     private List<String> getReadersCodec(String codec) {\n         return Stream.of(Codec.Type.values())\n                 .map(Codec.Type::name)\n-                .filter(type -> type != codec)\n+                .filter(type -> !type.equals(codec))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMDk3OQ=="}, "originalCommit": {"oid": "f7096fd9b1455334b0f4dd56ac9550c2a8628b45"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2075, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}