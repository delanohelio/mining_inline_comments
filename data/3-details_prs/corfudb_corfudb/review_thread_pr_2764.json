{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMzM5NjMy", "number": 2764, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozNzo0MFrOEhc1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTozNTo0NVrOEh9RUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTEwOTcwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/redundancy/RedundancyCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzozNzo0MFrOHOxd3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxOTo1Njo0MFrOHQDmRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MjU3NA==", "bodyText": "maybe use two filter methods?\n.filter(segment -> segment.getEnd() <= trimMark)\n.filter(segment ->  !segmentContainsServer(segment, getServer()))", "url": "https://github.com/CorfuDB/CorfuDB/pull/2764#discussion_r485252574", "createdAt": "2020-09-08T23:37:40Z", "author": {"login": "xnull"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/redundancy/RedundancyCalculator.java", "diffHunk": "@@ -222,6 +223,38 @@ public static boolean canRestoreRedundancyOrMergeSegments(Layout layout, String\n                 .collect(ImmutableList.toImmutableList());\n     }\n \n+    /**\n+     * Get all the layout segments that were trimmed and that do not contain a current server, and\n+     * return them as TRANSFERRED segments. Since these segments were trimmed, they\n+     * contain zero transferable addresses, and hence are not eligible for state transfer.\n+     * However, since they also do not contain a current server, they should be considered\n+     * TRANSFERRED, eligible for the layout redundancy restoration.\n+     *\n+     * @param layout   A current layout.\n+     * @param trimMark A current global trim mark.\n+     * @return A list of transfer segments.\n+     */\n+    public ImmutableList<TransferSegment> getTrimmedNotRestoredSegments(Layout layout, long trimMark) {\n+        return layout.getSegments()\n+                .stream()\n+                .filter(segment -> segment.getEnd() <= trimMark && !segmentContainsServer(segment, getServer()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6082b0968fc425c4a35b10ee19fa651dda48ba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU5ODIxNA==", "bodyText": "Usually, when there are multiple consecutive HOFs I think it's better to merge them into one HOF. For example,\n.map(x -> x + 1)\n.map(x -> x * 2) \n\nI think is better expressed as .map(x -> (x + 1) * 2)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2764#discussion_r486598214", "createdAt": "2020-09-10T19:56:40Z", "author": {"login": "PavelZaytsev"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/redundancy/RedundancyCalculator.java", "diffHunk": "@@ -222,6 +223,38 @@ public static boolean canRestoreRedundancyOrMergeSegments(Layout layout, String\n                 .collect(ImmutableList.toImmutableList());\n     }\n \n+    /**\n+     * Get all the layout segments that were trimmed and that do not contain a current server, and\n+     * return them as TRANSFERRED segments. Since these segments were trimmed, they\n+     * contain zero transferable addresses, and hence are not eligible for state transfer.\n+     * However, since they also do not contain a current server, they should be considered\n+     * TRANSFERRED, eligible for the layout redundancy restoration.\n+     *\n+     * @param layout   A current layout.\n+     * @param trimMark A current global trim mark.\n+     * @return A list of transfer segments.\n+     */\n+    public ImmutableList<TransferSegment> getTrimmedNotRestoredSegments(Layout layout, long trimMark) {\n+        return layout.getSegments()\n+                .stream()\n+                .filter(segment -> segment.getEnd() <= trimMark && !segmentContainsServer(segment, getServer()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI1MjU3NA=="}, "originalCommit": {"oid": "ff6082b0968fc425c4a35b10ee19fa651dda48ba"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDQyMzIyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/redundancy/RedundancyCalculatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNTozNTo0NVrOHPjvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyNDo0N1rOHQAhxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3NjIwOQ==", "bodyText": "Even if addresses before the trim mark have been trimmed, they are on disk right?  How is that data restored on B and C?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2764#discussion_r486076209", "createdAt": "2020-09-10T05:35:45Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/redundancy/RedundancyCalculatorTest.java", "diffHunk": "@@ -556,4 +558,47 @@ public void testPrepareTransferWorkloadCommittedTailSplitsSegment() {\n                 s -> s.equals(testSegments.get(1).getStatus()))).isTrue();\n     }\n \n+    @Test\n+    public void testGetTrimmedNotRestoredSegments() {\n+        Layout.ReplicationMode replicationMode = CHAIN_REPLICATION;\n+        LayoutStripe layoutStripe1 = new LayoutStripe(ImmutableList.of(\"A\"));\n+        LayoutSegment segment1 = new LayoutSegment(replicationMode, 0L, 100L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6082b0968fc425c4a35b10ee19fa651dda48ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NzkxMA==", "bodyText": "There is no real reason to transfer trimmed addresses because logically they are trimmed. The starting address has moved and is past the trim mark. So whether they are present on disk or not, we check it either way and get the same result:\nprivate boolean isTrimmed(long address) {\n        return address < dataStore.getStartingAddress();\n    }", "url": "https://github.com/CorfuDB/CorfuDB/pull/2764#discussion_r486547910", "createdAt": "2020-09-10T18:24:47Z", "author": {"login": "PavelZaytsev"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/redundancy/RedundancyCalculatorTest.java", "diffHunk": "@@ -556,4 +558,47 @@ public void testPrepareTransferWorkloadCommittedTailSplitsSegment() {\n                 s -> s.equals(testSegments.get(1).getStatus()))).isTrue();\n     }\n \n+    @Test\n+    public void testGetTrimmedNotRestoredSegments() {\n+        Layout.ReplicationMode replicationMode = CHAIN_REPLICATION;\n+        LayoutStripe layoutStripe1 = new LayoutStripe(ImmutableList.of(\"A\"));\n+        LayoutSegment segment1 = new LayoutSegment(replicationMode, 0L, 100L,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA3NjIwOQ=="}, "originalCommit": {"oid": "ff6082b0968fc425c4a35b10ee19fa651dda48ba"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1672, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}