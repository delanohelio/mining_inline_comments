{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjIzNDYx", "number": 2681, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMToxNFrOEVob8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODo1MlrOEV-cTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTE4MDY3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMToxNFrOG8f6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMToxNFrOG8f6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MDU4Mg==", "bodyText": "I think we should rephrase this, it is not true that each entry sent is a snapshot of the corresponding stream. Maybe 6 entries are required to send the snapshot of a stream, therefore a single entry does not guarantee to represent a snapshot of the stream.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466090582", "createdAt": "2020-08-06T01:21:14Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTE4MDgxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMToyMFrOG8f6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMToyMFrOG8f6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MDYwMg==", "bodyText": "nit -> white space before '='", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466090602", "createdAt": "2020-08-06T01:21:20Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -34,8 +35,7 @@\n      */\n     private static int ACKED_TS_READ_INTERVAL_SECONDS = 15;\n \n-    private static int FULL_REPLICATION_REMAINING_PERCENT = 100;\n-    private static int NO_REPLICATION_REMAINING_PERCENT = 0;\n+    private static int NO_REPLICATION_REMAINING_ENTRIES= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTE5NDc2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyOToxNFrOG8gCgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyOToxNFrOG8gCgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MjY3NA==", "bodyText": "Maybe we can add something like: Since exact number of entries cannot be inferred as data might have been checkpointed, we'll send the max stream tail.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466092674", "createdAt": "2020-08-06T01:29:14Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and\n+     * non-replicated streams.  So it does not accurately represent the remaining entries to send for replicated streams.\n+     *\n+     * If there is no data on the active, it returns 0, which means no replication remaining.\n+     * If the ack'd timestamp is uninitialized(no ack received), it returns the log tail, which means no replication has\n+     * been done.\n      */\n     private long calculateRemainingEntriesToSend(long ackedTimestamp) {\n         long maxReplicatedStreamTail = getMaxReplicatedStreamsTail();\n \n+        // No data to send on the Active, so no replication remaining\n         if (maxReplicatedStreamTail == Address.NON_ADDRESS) {\n-            // No data to send.  No Replication remaining\n-            return NO_REPLICATION_REMAINING_PERCENT;\n+            return NO_REPLICATION_REMAINING_ENTRIES;\n         }\n-        if (ackedTimestamp == Address.NON_ADDRESS) {\n-            return FULL_REPLICATION_REMAINING_PERCENT;\n+\n+        // If doing a snapshot sync and nothing has been acked, all replication is remaining.\n+        // So send the stream tail.\n+        // NOTE: This is an approximation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTMxMDYwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjozMzoxMVrOG8hFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjozMzoxMVrOG8hFyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEwOTg5Ng==", "bodyText": "This is true but a bit misleading as someone could say well don't return global tail but maxTailStreamsToReplicate, and it still holds true that this is not accurate as there is no guarantee that up to maxTailStreamsToReplicate all data is to be replicated. We might rephrase saying something like: Note this method is not accurate as the max tail can reflect the interleaving of replicated and non-replicated streams (or something similar)...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466109896", "createdAt": "2020-08-06T02:33:11Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTMxNDQxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMjozNToyNVrOG8hIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzowOTo0NlrOG8hpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMDQ3Ng==", "bodyText": "I was thinking, we might not need this, right? Also it could be imprecise, in the case deltas are already coming in, so the maxReplicatedStreamTail is moving beyond global tail... we could just calculate all snapshot sync in L145, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466110476", "createdAt": "2020-08-06T02:35:25Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and\n+     * non-replicated streams.  So it does not accurately represent the remaining entries to send for replicated streams.\n+     *\n+     * If there is no data on the active, it returns 0, which means no replication remaining.\n+     * If the ack'd timestamp is uninitialized(no ack received), it returns the log tail, which means no replication has\n+     * been done.\n      */\n     private long calculateRemainingEntriesToSend(long ackedTimestamp) {\n         long maxReplicatedStreamTail = getMaxReplicatedStreamsTail();\n \n+        // No data to send on the Active, so no replication remaining\n         if (maxReplicatedStreamTail == Address.NON_ADDRESS) {\n-            // No data to send.  No Replication remaining\n-            return NO_REPLICATION_REMAINING_PERCENT;\n+            return NO_REPLICATION_REMAINING_ENTRIES;\n         }\n-        if (ackedTimestamp == Address.NON_ADDRESS) {\n-            return FULL_REPLICATION_REMAINING_PERCENT;\n+\n+        // If doing a snapshot sync and nothing has been acked, all replication is remaining.\n+        // So send the stream tail.\n+        // NOTE: This is an approximation\n+        if (ackedTimestamp == Address.NON_ADDRESS &&\n+                lastSyncType == LogReplicationMetadata.ReplicationStatusVal.SyncType.SNAPSHOT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNTQ1MA==", "bodyText": "that's correct.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466115450", "createdAt": "2020-08-06T02:54:36Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and\n+     * non-replicated streams.  So it does not accurately represent the remaining entries to send for replicated streams.\n+     *\n+     * If there is no data on the active, it returns 0, which means no replication remaining.\n+     * If the ack'd timestamp is uninitialized(no ack received), it returns the log tail, which means no replication has\n+     * been done.\n      */\n     private long calculateRemainingEntriesToSend(long ackedTimestamp) {\n         long maxReplicatedStreamTail = getMaxReplicatedStreamsTail();\n \n+        // No data to send on the Active, so no replication remaining\n         if (maxReplicatedStreamTail == Address.NON_ADDRESS) {\n-            // No data to send.  No Replication remaining\n-            return NO_REPLICATION_REMAINING_PERCENT;\n+            return NO_REPLICATION_REMAINING_ENTRIES;\n         }\n-        if (ackedTimestamp == Address.NON_ADDRESS) {\n-            return FULL_REPLICATION_REMAINING_PERCENT;\n+\n+        // If doing a snapshot sync and nothing has been acked, all replication is remaining.\n+        // So send the stream tail.\n+        // NOTE: This is an approximation\n+        if (ackedTimestamp == Address.NON_ADDRESS &&\n+                lastSyncType == LogReplicationMetadata.ReplicationStatusVal.SyncType.SNAPSHOT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMDQ3Ng=="}, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNjE4NQ==", "bodyText": "the only thing is, Address.NON_ADDRESS is -1, so we will add 1 to the baseSnapshotTimestamp.  Should I change the ackedTimestamp to 0 in this condition?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466116185", "createdAt": "2020-08-06T02:57:47Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and\n+     * non-replicated streams.  So it does not accurately represent the remaining entries to send for replicated streams.\n+     *\n+     * If there is no data on the active, it returns 0, which means no replication remaining.\n+     * If the ack'd timestamp is uninitialized(no ack received), it returns the log tail, which means no replication has\n+     * been done.\n      */\n     private long calculateRemainingEntriesToSend(long ackedTimestamp) {\n         long maxReplicatedStreamTail = getMaxReplicatedStreamsTail();\n \n+        // No data to send on the Active, so no replication remaining\n         if (maxReplicatedStreamTail == Address.NON_ADDRESS) {\n-            // No data to send.  No Replication remaining\n-            return NO_REPLICATION_REMAINING_PERCENT;\n+            return NO_REPLICATION_REMAINING_ENTRIES;\n         }\n-        if (ackedTimestamp == Address.NON_ADDRESS) {\n-            return FULL_REPLICATION_REMAINING_PERCENT;\n+\n+        // If doing a snapshot sync and nothing has been acked, all replication is remaining.\n+        // So send the stream tail.\n+        // NOTE: This is an approximation\n+        if (ackedTimestamp == Address.NON_ADDRESS &&\n+                lastSyncType == LogReplicationMetadata.ReplicationStatusVal.SyncType.SNAPSHOT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMDQ3Ng=="}, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExOTExOA==", "bodyText": "Yes, that's a good option.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466119118", "createdAt": "2020-08-06T03:09:46Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -98,28 +98,51 @@ private long getMaxReplicatedStreamsTail() {\n      *\n      * For Log Entry Sync, this function returns the total number of entries remaining to be sent across all replicated\n      * streams.\n-     * For Snapshot Sync, each entry sent is a snapshot.  So this function returns the total number of snapshots\n-     * remaining to be sent.\n-     * If the ack'd timestamp is uninitialized, it returns 100%, which means no replication has been done.\n+     *\n+     * For Snapshot Sync, each entry sent is a snapshot of the corresponding stream.  The stream could have been\n+     * checkpointed and trimmed so we cannot find the remaining number of entries accurately.  In this case, we simply\n+     * subtract the acked timestamp from the global log tail when the snapshot sync started.\n+     * Note that this method is not accurate because the global tail advances on writes for both replicated and\n+     * non-replicated streams.  So it does not accurately represent the remaining entries to send for replicated streams.\n+     *\n+     * If there is no data on the active, it returns 0, which means no replication remaining.\n+     * If the ack'd timestamp is uninitialized(no ack received), it returns the log tail, which means no replication has\n+     * been done.\n      */\n     private long calculateRemainingEntriesToSend(long ackedTimestamp) {\n         long maxReplicatedStreamTail = getMaxReplicatedStreamsTail();\n \n+        // No data to send on the Active, so no replication remaining\n         if (maxReplicatedStreamTail == Address.NON_ADDRESS) {\n-            // No data to send.  No Replication remaining\n-            return NO_REPLICATION_REMAINING_PERCENT;\n+            return NO_REPLICATION_REMAINING_ENTRIES;\n         }\n-        if (ackedTimestamp == Address.NON_ADDRESS) {\n-            return FULL_REPLICATION_REMAINING_PERCENT;\n+\n+        // If doing a snapshot sync and nothing has been acked, all replication is remaining.\n+        // So send the stream tail.\n+        // NOTE: This is an approximation\n+        if (ackedTimestamp == Address.NON_ADDRESS &&\n+                lastSyncType == LogReplicationMetadata.ReplicationStatusVal.SyncType.SNAPSHOT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExMDQ3Ng=="}, "originalCommit": {"oid": "277a5b72513b9695caf2a74d097f098318647fa9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4NjA1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODo1MlrOG9Ciwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODo1MlrOG9Ciwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzk4Ng==", "bodyText": "it could be read and written concurrently, right? cause the calculation is scheduled and it could happen to coincide?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2681#discussion_r466657986", "createdAt": "2020-08-06T20:08:52Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationAckReader.java", "diffHunk": "@@ -23,6 +22,9 @@\n     private LogReplicationConfig config;\n     private CorfuRuntime runtime;\n     private String remoteClusterId;\n+    // Log tail when the current snapshot sync started.  We do not need to synchronize access to it because it will not\n+    // be read(calculateRemainingEntriesToSend) and written(setBaseSnapshot) concurrently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714f6c030c6f70f1837f9f6c2b4a298ac3567717"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1895, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}