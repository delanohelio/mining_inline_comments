{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjU4MTYz", "number": 2683, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxMzoxMFrOEVmHmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo0NDoxOVrOEVmjwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgwMDg5OnYy", "diffSide": "RIGHT", "path": "utils/src/main/java/org/corfudb/utils/lock/LockClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoxMzoxMFrOG8cb8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo1Nzo0NFrOG8dYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzY0OQ==", "bodyText": "What is the original value? The monitoring can be smaller so that when the lease expires, the other waiters can get hold of the lease quickly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466033649", "createdAt": "2020-08-05T22:13:10Z", "author": {"login": "xiaoqin2012"}, "path": "utils/src/main/java/org/corfudb/utils/lock/LockClient.java", "diffHunk": "@@ -48,9 +48,13 @@\n     // single threaded scheduler to monitor locks\n     private final ScheduledExecutorService lockMonitorScheduler;\n \n+    private final ScheduledExecutorService taskScheduler;\n+\n+    private final ExecutorService lockListenerExecutor;\n+\n     // duration between monitoring runs\n     @Setter\n-    private static int DurationBetweenLockMonitorRuns = 60;\n+    private static int DurationBetweenLockMonitorRuns = 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTEyNA==", "bodyText": "The original lease value is 60seconds, to 10 maybe?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466049124", "createdAt": "2020-08-05T22:57:44Z", "author": {"login": "annym"}, "path": "utils/src/main/java/org/corfudb/utils/lock/LockClient.java", "diffHunk": "@@ -48,9 +48,13 @@\n     // single threaded scheduler to monitor locks\n     private final ScheduledExecutorService lockMonitorScheduler;\n \n+    private final ScheduledExecutorService taskScheduler;\n+\n+    private final ExecutorService lockListenerExecutor;\n+\n     // duration between monitoring runs\n     @Setter\n-    private static int DurationBetweenLockMonitorRuns = 60;\n+    private static int DurationBetweenLockMonitorRuns = 30;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzMzY0OQ=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyMjIyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjowOVrOG8cokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjowOVrOG8cokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNjg4Mg==", "bodyText": "Can we make the monitor fraction bigger such as 10 or 20, so that the lease acquire/release can happen with smaller delay?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466036882", "createdAt": "2020-08-05T22:22:09Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -52,6 +54,16 @@\n      */\n     private static final int FETCH_THRESHOLD = 300;\n \n+    /**\n+     * Fraction of Lease Duration for Lease Renewal\n+     */\n+    private static final int RENEWAL_LEASE_FRACTION = 4;\n+\n+    /**\n+     * Fraction of Lease Duration for Lease Monitoring\n+     */\n+    private static final int MONITOR_LEASE_FRACTION = 2;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyMzQzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo0MFrOG8cpRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyMjo0MFrOG8cpRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzA2MA==", "bodyText": "is it better to rename to lockClient?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466037060", "createdAt": "2020-08-05T22:22:40Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -131,6 +143,8 @@\n \n     private LogReplicationServer logReplicationServerHandler;\n \n+    private LockClient lock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgyNzUwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNDoxNFrOG8crgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowMjo0MVrOG8de2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzYzNA==", "bodyText": "Will it cleaner to call lock.shutdown in the server shutdown call?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466037634", "createdAt": "2020-08-05T22:24:14Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -704,6 +720,10 @@ public void shutdown() {\n         if(clusterManagerAdapter != null) {\n             clusterManagerAdapter.shutdown();\n         }\n+\n+        if (lock != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MDc3OQ==", "bodyText": "That would mean exposing it. And the lock is really created by the Discovery Service, I think keeping it to the DiscoveryService scope is fine.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466050779", "createdAt": "2020-08-05T23:02:41Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -704,6 +720,10 @@ public void shutdown() {\n         if(clusterManagerAdapter != null) {\n             clusterManagerAdapter.shutdown();\n         }\n+\n+        if (lock != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzNzYzNA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDgzMDgxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyOFrOG8ctRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjoyNToyOFrOG8ctRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAzODA4Nw==", "bodyText": "..fraction of lease duration after which lease renewal thread will run?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466038087", "createdAt": "2020-08-05T22:25:28Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -52,6 +54,16 @@\n      */\n     private static final int FETCH_THRESHOLD = 300;\n \n+    /**\n+     * Fraction of Lease Duration for Lease Renewal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg0NDkwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/CorfuLogReplicationRuntime.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjozMToyN1rOG8c1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzo1NTowN1rOG8efGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MDI1MA==", "bodyText": "does it need to be concurrent?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466040250", "createdAt": "2020-08-05T22:31:27Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/CorfuLogReplicationRuntime.java", "diffHunk": "@@ -158,6 +159,7 @@ public CorfuLogReplicationRuntime(LogReplicationRuntimeParameters parameters, Lo\n         this.router.addClient(new LogReplicationHandler());\n         this.sourceManager = new LogReplicationSourceManager(parameters, new LogReplicationClient(router, remoteClusterId),\n             metadataManager);\n+        this.connectedEndpoints = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NzIyNw==", "bodyText": "I removed that as all the methods that modify or access this object are synchronized.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466067227", "createdAt": "2020-08-05T23:55:07Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/CorfuLogReplicationRuntime.java", "diffHunk": "@@ -158,6 +159,7 @@ public CorfuLogReplicationRuntime(LogReplicationRuntimeParameters parameters, Lo\n         this.router.addClient(new LogReplicationHandler());\n         this.sourceManager = new LogReplicationSourceManager(parameters, new LogReplicationClient(router, remoteClusterId),\n             metadataManager);\n+        this.connectedEndpoints = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MDI1MA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg1NjcxOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjozNjozNVrOG8c8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjozNjozNVrOG8c8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0MjAwNQ==", "bodyText": "Can you add a comment saying what these tests do?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466042005", "createdAt": "2020-08-05T22:36:35Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.corfudb.integration;\n+\n+import org.corfudb.util.Sleep;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg3MjE0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo0Mzo1NVrOG8dF6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMDowODowNFrOG8etlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA==", "bodyText": "When will this callback be called? Which component detects the connection down?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466044394", "createdAt": "2020-08-05T22:43:55Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MDkyOQ==", "bodyText": "The Transport Plugin is the one detecting connections coming up or down.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466050929", "createdAt": "2020-08-05T23:03:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzczNg==", "bodyText": "I am just wondering what happen to the snapshot sender/log entry sender  when there is a connection loss and what happen to the fsm state machine.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466053736", "createdAt": "2020-08-05T23:11:10Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2MjQ2OQ==", "bodyText": "Currently, what happens is that if connection is lost to the remote leader we move to verify remote leader state (if any other connection is still up) or to wait for connections (if no connection is available). But we don't do anything to the snapshot/log entry senders. So good point, this is something we should add. I'm adding that we stop log replication, can you help confirm if that does the correct configuration of the snapshot/log entry sender? or if something else is needed...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466062469", "createdAt": "2020-08-05T23:38:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NTk0OQ==", "bodyText": "I saw that the sender catch all exceptions and called cancel.  There are two options:\n\nthe sender identify the exception type and generate stop event instead of cancel.\nwhen the replication state machine detects the current leader connection loss, put a stop event for FSM.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466065949", "createdAt": "2020-08-05T23:50:39Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2NjAzOQ==", "bodyText": "We can do in another PR ...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466066039", "createdAt": "2020-08-05T23:50:56Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA2ODU4MA==", "bodyText": "I did the option 2.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466068580", "createdAt": "2020-08-05T23:59:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3MDkzNA==", "bodyText": "We need to add try and catch for processReads to catch the exceptions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466070934", "createdAt": "2020-08-06T00:08:04Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -413,7 +413,8 @@ public synchronized void onConnectionUp(String endpoint) {\n      */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDM5NA=="}, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDg3Mjk3OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo0NDoxOVrOG8dGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMjo0NDoxOVrOG8dGbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NDUyNg==", "bodyText": "pn -> on", "url": "https://github.com/CorfuDB/CorfuDB/pull/2683#discussion_r466044526", "createdAt": "2020-08-05T22:44:19Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationReconfigurationIT.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.corfudb.integration;\n+\n+import org.corfudb.util.Sleep;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+public class CorfuReplicationReconfigurationIT extends LogReplicationAbstractIT {\n+\n+    private static final int SLEEP_DURATION = 5;\n+\n+    /**\n+     * Sets the plugin path before starting any test\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setupPluginPath() {\n+        if(runProcess) {\n+            File f = new File(nettyConfig);\n+            this.pluginConfigFilePath = f.getAbsolutePath();\n+        } else {\n+            this.pluginConfigFilePath = nettyConfig;\n+        }\n+    }\n+\n+    /**\n+     * Test the case where Standby leader node is restarted during log entry sync.\n+     *\n+     * The expectation is that replication should resume.\n+     */\n+    @Test\n+    public void testStandbyClusterReset() throws Exception {\n+        // (1) Snapshot and Log Entry Sync\n+        System.out.println(\">>> (1) Start Snapshot and Log Entry Sync\");\n+        testEndToEndSnapshotAndLogEntrySync();\n+\n+        ExecutorService writerService = Executors.newSingleThreadExecutor();\n+\n+        // (2) Stop Standby Log Replicator Server\n+        System.out.println(\">>> (2) Stop Standby Node\");\n+        stopStandbyLogReplicator();\n+\n+        // (3) Start daemon thread writing data to active\n+        System.out.println(\">>> (3) Start daemon writer service\");\n+        // Since step (1) wrote numWrites for snapshotSync and numWrites/2 in logEntrySync, continue from this starting point\n+        writerService.submit(() -> writeToActive((numWrites + numWrites/2), numWrites));\n+\n+        // (4) Sleep Interval so writes keep going through, while standby is down\n+        System.out.println(\">>> (4) Wait for some time\");\n+        Sleep.sleepUninterruptibly(Duration.ofSeconds(SLEEP_DURATION));\n+\n+        // (5) Restart Standby Log Replicator\n+        System.out.println(\">>> (5) Restart Standby Node\");\n+        startStandbyLogReplicator();\n+\n+        // (6) Verify Data pn Standby after Restart", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "381e320c2747d07a1b890e41e1c90cad8f4e1738"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}