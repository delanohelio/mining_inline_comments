{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjE3NTU1", "number": 2485, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0MDo1OVrODpq5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowNzoxNlrODqllzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDIxMDk1OnYy", "diffSide": "RIGHT", "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0MDo1OVrOF4_oug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjozODo0M1rOF5Cwng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzE5NA==", "bodyText": "please make batchSize configurable", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395307194", "createdAt": "2020-03-19T20:40:59Z", "author": {"login": "xnull"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -124,12 +128,18 @@ public int printTable(String namespace, String tablename) {\n \n         CorfuTable<CorfuDynamicKey, CorfuDynamicRecord> table = getTable(namespace, tablename);\n         int size = table.size();\n-        for (CorfuDynamicKey entry : table.keySet()) {\n-            builder = new StringBuilder(\"\\nKey:\\n\" + entry.getKey())\n-                .append(\"\\nPayload:\\n\" + table.get(entry).getPayload())\n-                .append(\"\\nMetadata:\\n\" + table.get(entry).getMetadata())\n-                .append(\"\\n====================\\n\");\n-            log.info(builder.toString());\n+        final int batchSize = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f352c91ef80a2dda6e92b146d156a5982ae64a6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyOTIxOA==", "bodyText": "this is an internal setting that should not be tunable but I will expose it anyway, thanks", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395329218", "createdAt": "2020-03-19T21:26:55Z", "author": {"login": "hisundar"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -124,12 +128,18 @@ public int printTable(String namespace, String tablename) {\n \n         CorfuTable<CorfuDynamicKey, CorfuDynamicRecord> table = getTable(namespace, tablename);\n         int size = table.size();\n-        for (CorfuDynamicKey entry : table.keySet()) {\n-            builder = new StringBuilder(\"\\nKey:\\n\" + entry.getKey())\n-                .append(\"\\nPayload:\\n\" + table.get(entry).getPayload())\n-                .append(\"\\nMetadata:\\n\" + table.get(entry).getMetadata())\n-                .append(\"\\n====================\\n\");\n-            log.info(builder.toString());\n+        final int batchSize = 50;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzE5NA=="}, "originalCommit": {"oid": "2f352c91ef80a2dda6e92b146d156a5982ae64a6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1ODM2Ng==", "bodyText": "actually just had a conversation with the folks using this, we feel exposing this to the browser can cause a lot more confusion than help. this is really an internal batching for RocksDB partitions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395358366", "createdAt": "2020-03-19T22:38:43Z", "author": {"login": "hisundar"}, "path": "corfudb-tools/src/main/java/org/corfudb/browser/CorfuStoreBrowser.java", "diffHunk": "@@ -124,12 +128,18 @@ public int printTable(String namespace, String tablename) {\n \n         CorfuTable<CorfuDynamicKey, CorfuDynamicRecord> table = getTable(namespace, tablename);\n         int size = table.size();\n-        for (CorfuDynamicKey entry : table.keySet()) {\n-            builder = new StringBuilder(\"\\nKey:\\n\" + entry.getKey())\n-                .append(\"\\nPayload:\\n\" + table.get(entry).getPayload())\n-                .append(\"\\nMetadata:\\n\" + table.get(entry).getMetadata())\n-                .append(\"\\n====================\\n\");\n-            log.info(builder.toString());\n+        final int batchSize = 50;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwNzE5NA=="}, "originalCommit": {"oid": "2f352c91ef80a2dda6e92b146d156a5982ae64a6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDIyMzU2OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDo0NToxNFrOF4_w3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMToyOTowMFrOF5BCYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTI3Nw==", "bodyText": "please make it configurable", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395309277", "createdAt": "2020-03-19T20:45:14Z", "author": {"login": "xnull"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "diffHunk": "@@ -264,6 +267,19 @@ public void checkMetadataTransactions() throws Exception {\n         assertThatThrownBy(() ->\n                 table.update(key1, EventInfo.getDefaultInstance(), wrongRevisionMetadata))\n                 .isExactlyInstanceOf(RuntimeException.class);\n+\n+        // Verify the table is readable using entryStream()\n+        final int batchSize = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f352c91ef80a2dda6e92b146d156a5982ae64a6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMDE0Ng==", "bodyText": "this is a unit test", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395330146", "createdAt": "2020-03-19T21:29:00Z", "author": {"login": "hisundar"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "diffHunk": "@@ -264,6 +267,19 @@ public void checkMetadataTransactions() throws Exception {\n         assertThatThrownBy(() ->\n                 table.update(key1, EventInfo.getDefaultInstance(), wrongRevisionMetadata))\n                 .isExactlyInstanceOf(RuntimeException.class);\n+\n+        // Verify the table is readable using entryStream()\n+        final int batchSize = 50;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMwOTI3Nw=="}, "originalCommit": {"oid": "2f352c91ef80a2dda6e92b146d156a5982ae64a6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyODUyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNjo1OFrOF5Du1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzozOTo1MVrOF5D9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NDI5NQ==", "bodyText": "Can we have a test where the number of entries > batchsize and then verify that the number of partitions is correct and all entries are included in the entryStream api?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395374295", "createdAt": "2020-03-19T23:26:58Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "diffHunk": "@@ -264,6 +267,19 @@ public void checkMetadataTransactions() throws Exception {\n         assertThatThrownBy(() ->\n                 table.update(key1, EventInfo.getDefaultInstance(), wrongRevisionMetadata))\n                 .isExactlyInstanceOf(RuntimeException.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b069c93ba418556811b79befd1ea2e30192fcf4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3ODAyMg==", "bodyText": "this api is using the same parameters as checkpoint writer\nI think these good suggestions but are tests we should add to the checkpointer writer probably not here right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r395378022", "createdAt": "2020-03-19T23:39:51Z", "author": {"login": "hisundar"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreTest.java", "diffHunk": "@@ -264,6 +267,19 @@ public void checkMetadataTransactions() throws Exception {\n         assertThatThrownBy(() ->\n                 table.update(key1, EventInfo.getDefaultInstance(), wrongRevisionMetadata))\n                 .isExactlyInstanceOf(RuntimeException.class);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NDI5NQ=="}, "originalCommit": {"oid": "5b069c93ba418556811b79befd1ea2e30192fcf4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTgxNTc4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowMjozOFrOF6bSAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDoxNzoxNFrOF7H1Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwODcwNg==", "bodyText": "Should this be log.warn?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r396808706", "createdAt": "2020-03-23T23:02:38Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "diffHunk": "@@ -163,10 +165,35 @@ void registerTable(@Nonnull String namespace,\n \n         TableMetadata.Builder metadataBuilder = TableMetadata.newBuilder();\n         metadataBuilder.setDiskBased(tableOptions.getPersistentDataPath().isPresent());\n+\n+        // Schema validation to ensure that there is either proper modification of the schema across open calls.\n+        // Or no modification to the protobuf files.\n+        boolean hasSchemaChanged = false;\n+        CorfuRecord<TableDescriptors, TableMetadata> oldRecord = this.registryTable.get(tableNameKey);\n+        if (oldRecord != null) {\n+            if (!oldRecord.getPayload().getFileDescriptorsMap().equals(tableDescriptors.getFileDescriptorsMap())) {\n+                hasSchemaChanged = true;\n+                int oldTableEntries = tableMap.get(\n+                        TableRegistry.getFullyQualifiedTableName(namespace, tableName)\n+                ).count();\n+                log.error(\"registerTable: Schema update detected for table \"+namespace+\" \"+ tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTIxOA==", "bodyText": "I kept it as error because it is unsupported at this time and folks should really never see this.\nIn next release, we can move this to info once a migration path has been established.\nDoes that sound ok?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r397535218", "createdAt": "2020-03-25T00:06:24Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "diffHunk": "@@ -163,10 +165,35 @@ void registerTable(@Nonnull String namespace,\n \n         TableMetadata.Builder metadataBuilder = TableMetadata.newBuilder();\n         metadataBuilder.setDiskBased(tableOptions.getPersistentDataPath().isPresent());\n+\n+        // Schema validation to ensure that there is either proper modification of the schema across open calls.\n+        // Or no modification to the protobuf files.\n+        boolean hasSchemaChanged = false;\n+        CorfuRecord<TableDescriptors, TableMetadata> oldRecord = this.registryTable.get(tableNameKey);\n+        if (oldRecord != null) {\n+            if (!oldRecord.getPayload().getFileDescriptorsMap().equals(tableDescriptors.getFileDescriptorsMap())) {\n+                hasSchemaChanged = true;\n+                int oldTableEntries = tableMap.get(\n+                        TableRegistry.getFullyQualifiedTableName(namespace, tableName)\n+                ).count();\n+                log.error(\"registerTable: Schema update detected for table \"+namespace+\" \"+ tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwODcwNg=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODY0Nw==", "bodyText": "Sure.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r397538647", "createdAt": "2020-03-25T00:17:14Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "diffHunk": "@@ -163,10 +165,35 @@ void registerTable(@Nonnull String namespace,\n \n         TableMetadata.Builder metadataBuilder = TableMetadata.newBuilder();\n         metadataBuilder.setDiskBased(tableOptions.getPersistentDataPath().isPresent());\n+\n+        // Schema validation to ensure that there is either proper modification of the schema across open calls.\n+        // Or no modification to the protobuf files.\n+        boolean hasSchemaChanged = false;\n+        CorfuRecord<TableDescriptors, TableMetadata> oldRecord = this.registryTable.get(tableNameKey);\n+        if (oldRecord != null) {\n+            if (!oldRecord.getPayload().getFileDescriptorsMap().equals(tableDescriptors.getFileDescriptorsMap())) {\n+                hasSchemaChanged = true;\n+                int oldTableEntries = tableMap.get(\n+                        TableRegistry.getFullyQualifiedTableName(namespace, tableName)\n+                ).count();\n+                log.error(\"registerTable: Schema update detected for table \"+namespace+\" \"+ tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwODcwNg=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTgyMDg4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowNDo0NFrOF6bVDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDowNzoxOFrOF7HpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwOTQ4NQ==", "bodyText": "log.error? Is this used when you were debugging and forgot to delete?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r396809485", "createdAt": "2020-03-23T23:04:44Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "diffHunk": "@@ -238,6 +265,7 @@ public static String getFullyQualifiedTableName(String namespace, String tableNa\n      */\n     private <T extends Message> void addTypeToClassMap(T msg) {\n         String typeUrl = getTypeUrl(msg.getDescriptorForType());\n+        log.error(\"Adding \"+ typeUrl + \" serializer map..\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTU1MA==", "bodyText": "Good catch! thanks - this is from the debugging patch.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r397535550", "createdAt": "2020-03-25T00:07:18Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/TableRegistry.java", "diffHunk": "@@ -238,6 +265,7 @@ public static String getFullyQualifiedTableName(String namespace, String tableNa\n      */\n     private <T extends Message> void addTypeToClassMap(T msg) {\n         String typeUrl = getTypeUrl(msg.getDescriptorForType());\n+        log.error(\"Adding \"+ typeUrl + \" serializer map..\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwOTQ4NQ=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTgyNjcxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/util/serializer/ProtobufSerializer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzowNzoxNlrOF6bYyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozMDozM1rOF7mZ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDQ0Mg==", "bodyText": "Same here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r396810442", "createdAt": "2020-03-23T23:07:16Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/serializer/ProtobufSerializer.java", "diffHunk": "@@ -86,6 +86,13 @@ public Object deserialize(ByteBuf b, CorfuRuntime rt) {\n             bbis.readFully(data);\n             Record record = Record.parseFrom(data);\n             Any payload = record.getPayload();\n+            if (!classMap.containsKey(payload.getTypeUrl())) {\n+                log.error(\"Deserialization error: Unknown type \"+payload.getTypeUrl()+ \" dumping map..\\n\");\n+                for (String entry: classMap.keySet()) {\n+                    log.error(entry + \"=>\" + classMap.get(entry));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTc4NA==", "bodyText": "No, we want this line to be printed out even going forward, since it helps diagnose a tricky deserialization issue, so this is intentional!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r397535784", "createdAt": "2020-03-25T00:08:06Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/util/serializer/ProtobufSerializer.java", "diffHunk": "@@ -86,6 +86,13 @@ public Object deserialize(ByteBuf b, CorfuRuntime rt) {\n             bbis.readFully(data);\n             Record record = Record.parseFrom(data);\n             Any payload = record.getPayload();\n+            if (!classMap.containsKey(payload.getTypeUrl())) {\n+                log.error(\"Deserialization error: Unknown type \"+payload.getTypeUrl()+ \" dumping map..\\n\");\n+                for (String entry: classMap.keySet()) {\n+                    log.error(entry + \"=>\" + classMap.get(entry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDQ0Mg=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzODg2Mw==", "bodyText": "Okay, btw can you make it more descriptive?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r397538863", "createdAt": "2020-03-25T00:17:56Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/serializer/ProtobufSerializer.java", "diffHunk": "@@ -86,6 +86,13 @@ public Object deserialize(ByteBuf b, CorfuRuntime rt) {\n             bbis.readFully(data);\n             Record record = Record.parseFrom(data);\n             Any payload = record.getPayload();\n+            if (!classMap.containsKey(payload.getTypeUrl())) {\n+                log.error(\"Deserialization error: Unknown type \"+payload.getTypeUrl()+ \" dumping map..\\n\");\n+                for (String entry: classMap.keySet()) {\n+                    log.error(entry + \"=>\" + classMap.get(entry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDQ0Mg=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzOTUzMQ==", "bodyText": "ok I will try", "url": "https://github.com/CorfuDB/CorfuDB/pull/2485#discussion_r398039531", "createdAt": "2020-03-25T17:30:33Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/util/serializer/ProtobufSerializer.java", "diffHunk": "@@ -86,6 +86,13 @@ public Object deserialize(ByteBuf b, CorfuRuntime rt) {\n             bbis.readFully(data);\n             Record record = Record.parseFrom(data);\n             Any payload = record.getPayload();\n+            if (!classMap.containsKey(payload.getTypeUrl())) {\n+                log.error(\"Deserialization error: Unknown type \"+payload.getTypeUrl()+ \" dumping map..\\n\");\n+                for (String entry: classMap.keySet()) {\n+                    log.error(entry + \"=>\" + classMap.get(entry));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgxMDQ0Mg=="}, "originalCommit": {"oid": "8a03a320df6ccf299a9b1861e4428424e3d1fe90"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1949, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}