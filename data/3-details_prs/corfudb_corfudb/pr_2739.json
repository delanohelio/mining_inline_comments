{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDYzMzkx", "number": 2739, "title": "Two-Phase Snapshot Sync", "bodyText": "Overview\nDescription:\nSeparate snapshot sync in two stages: transfer and apply stages.\nThe transfer stage ensures data is transferred to the remote cluster and played into the shadow streams. This stage completes once a SNAPSHOT_END marker is received and with it an ACK of type SNAPSHOT_TRANSFER_COMPLETE is sent to the sender.\nThe sender will query for completeness of snapshot apply on a periodic basis.\nThe apply stage ensures that data is copied from shadow streams to actual streams. The apply stage is asynchronous and starts once the SNAPSHOT_END marker is received. Once snapshot apply stage completes the metadata is updated, from which sender will realize he can move onto log entry sync and start incremental updates.\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-08-28T03:19:49Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739", "merged": true, "mergeCommit": {"oid": "785f8ba21792fbaf816de60e90df0996ea2de1f1"}, "closed": true, "closedAt": "2020-09-04T02:50:12Z", "author": {"login": "annym"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDMWLzABqjM3MDIxOTA1NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFcDQGgFqTQ4MjMyMjAzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b3d9aa080a16e85c30cc52a83098f653515551", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/32b3d9aa080a16e85c30cc52a83098f653515551", "committedDate": "2020-08-28T03:14:35Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "75507c87359123437a69eaf735c4cd8618f3084b", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/75507c87359123437a69eaf735c4cd8618f3084b", "committedDate": "2020-08-28T03:21:50Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75507c87359123437a69eaf735c4cd8618f3084b", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/75507c87359123437a69eaf735c4cd8618f3084b", "committedDate": "2020-08-28T03:21:50Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "35162854c15f329fccf0670d0a1d06dceb491db3", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/35162854c15f329fccf0670d0a1d06dceb491db3", "committedDate": "2020-08-28T03:31:29Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35162854c15f329fccf0670d0a1d06dceb491db3", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/35162854c15f329fccf0670d0a1d06dceb491db3", "committedDate": "2020-08-28T03:31:29Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "a3f7a81fb5df2781033233c75265db2c763ecdd8", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a3f7a81fb5df2781033233c75265db2c763ecdd8", "committedDate": "2020-08-28T03:33:50Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3f7a81fb5df2781033233c75265db2c763ecdd8", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a3f7a81fb5df2781033233c75265db2c763ecdd8", "committedDate": "2020-08-28T03:33:50Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "f92bd9b63bfeeae3fdc01b476ad162f67c47286e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f92bd9b63bfeeae3fdc01b476ad162f67c47286e", "committedDate": "2020-08-28T03:36:53Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f92bd9b63bfeeae3fdc01b476ad162f67c47286e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f92bd9b63bfeeae3fdc01b476ad162f67c47286e", "committedDate": "2020-08-28T03:36:53Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "0726e56a50e0ce9768b3cff4b73960e7485556d2", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0726e56a50e0ce9768b3cff4b73960e7485556d2", "committedDate": "2020-08-28T03:43:09Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0726e56a50e0ce9768b3cff4b73960e7485556d2", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0726e56a50e0ce9768b3cff4b73960e7485556d2", "committedDate": "2020-08-28T03:43:09Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "2912729585a7da58b295816ed7c66d21296dec99", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2912729585a7da58b295816ed7c66d21296dec99", "committedDate": "2020-08-28T04:08:52Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2912729585a7da58b295816ed7c66d21296dec99", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2912729585a7da58b295816ed7c66d21296dec99", "committedDate": "2020-08-28T04:08:52Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "249bf8ff9fe47fc3ad74595cf94da7f8966a6409", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/249bf8ff9fe47fc3ad74595cf94da7f8966a6409", "committedDate": "2020-08-28T07:12:58Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "249bf8ff9fe47fc3ad74595cf94da7f8966a6409", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/249bf8ff9fe47fc3ad74595cf94da7f8966a6409", "committedDate": "2020-08-28T07:12:58Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "7fe08333648b24e0147cba27d1e5e8168ff8c9ec", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7fe08333648b24e0147cba27d1e5e8168ff8c9ec", "committedDate": "2020-08-28T18:49:14Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7fe08333648b24e0147cba27d1e5e8168ff8c9ec", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7fe08333648b24e0147cba27d1e5e8168ff8c9ec", "committedDate": "2020-08-28T18:49:14Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "ec868dec82696a419eed1becebfe59298cb533be", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ec868dec82696a419eed1becebfe59298cb533be", "committedDate": "2020-08-28T18:59:17Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec868dec82696a419eed1becebfe59298cb533be", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ec868dec82696a419eed1becebfe59298cb533be", "committedDate": "2020-08-28T18:59:17Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f061f089f97b1ddef3980dfad202ed627a5753b9", "committedDate": "2020-09-01T23:36:46Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MDM3MjAw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-478037200", "createdAt": "2020-08-28T21:32:57Z", "commit": {"oid": "ec868dec82696a419eed1becebfe59298cb533be"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMTozMjo1N1rOHJVCaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTozNjoxNlrOHLOaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU0MzkxNQ==", "bodyText": "Negotiation -> metadata", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r479543915", "createdAt": "2020-08-28T21:32:57Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/LogReplicationServer.java", "diffHunk": "@@ -100,27 +100,27 @@ private void handleLogReplicationEntry(CorfuPayloadMsg<LogReplicationEntry> msg,\n         }\n     }\n \n-    @ServerHandler(type = CorfuMsgType.LOG_REPLICATION_NEGOTIATION_REQUEST)\n-    private void handleLogReplicationNegotiationRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        log.info(\"Log Replication Negotiation Request received by Server.\");\n+    @ServerHandler(type = CorfuMsgType.LOG_REPLICATION_METADATA_REQUEST)\n+    private void handleMetadataRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.info(\"Log Replication Metadata Request received by Server.\");\n \n         if (isLeader(msg, r)) {\n             LogReplicationMetadataManager metadataMgr = sinkManager.getLogReplicationMetadataManager();\n \n-            // TODO (Xiaoqin Ma): That's 6 independent DB calls per one LOG_REPLICATION_NEGOTIATION_REQUEST.\n+            // TODO (Xiaoqin Ma): That's 6 independent DB calls per one request.\n             //  Can we do just one? Also, It does not look like we handle failures if one of them fails, for example.\n-            LogReplicationNegotiationResponse response = new LogReplicationNegotiationResponse(\n+            LogReplicationMetadataResponse response = new LogReplicationMetadataResponse(\n                     metadataMgr.getTopologyConfigId(),\n                     metadataMgr.getVersion(),\n-                    metadataMgr.getLastSnapStartTimestamp(),\n-                    metadataMgr.getLastSnapTransferDoneTimestamp(),\n-                    metadataMgr.getLastAppliedBaseSnapshotTimestamp(),\n-                    metadataMgr.getLastProcessedLogTimestamp());\n+                    metadataMgr.getLastStartedSnapshotTimestamp(),\n+                    metadataMgr.getLastTransferredSnapshotTimestamp(),\n+                    metadataMgr.getLastAppliedSnapshotTimestamp(),\n+                    metadataMgr.getLastProcessedLogEntryTimestamp());\n             log.info(\"Send Negotiation response\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec868dec82696a419eed1becebfe59298cb533be"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwMjg4MA==", "bodyText": "Each LOG_ENTRY_SYNC_REPLICATED event will print an error log in FSM consumer. Can we disable the error log for this event?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r481502880", "createdAt": "2020-09-02T00:20:53Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InLogEntrySyncState.java", "diffHunk": "@@ -74,6 +74,15 @@ public LogReplicationState processEvent(LogReplicationEvent event) throws Illega\n             case REPLICATION_SHUTDOWN:\n                 cancelLogEntrySync(\"replication terminated.\");\n                 return fsm.getStates().get(LogReplicationStateType.STOPPED);\n+            case LOG_ENTRY_SYNC_REPLICATED:\n+                // Verify the replicated entry corresponds to the current log entry sync cycle (and not a previous/old one)\n+                if (transitionEventId.equals(event.getMetadata().getRequestId())) {\n+                    log.debug(\"Log Entry Sync ACK, update last ack timestamp to {}\", event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                    fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                }\n+                // Do not return a new state as there is no actual transition, the IllegalTransitionException\n+                // will allow us to avoid any transition from this state given the event.\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNDY1Ng==", "bodyText": "Is it possible that ACK is out of order? It is from CF.Anyof pendingCompletableFutureForAcks.\nIf so, do we need to make fsm's AckedTimestamp increase monotonically?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r481504656", "createdAt": "2020-09-02T00:27:24Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InLogEntrySyncState.java", "diffHunk": "@@ -74,6 +74,15 @@ public LogReplicationState processEvent(LogReplicationEvent event) throws Illega\n             case REPLICATION_SHUTDOWN:\n                 cancelLogEntrySync(\"replication terminated.\");\n                 return fsm.getStates().get(LogReplicationStateType.STOPPED);\n+            case LOG_ENTRY_SYNC_REPLICATED:\n+                // Verify the replicated entry corresponds to the current log entry sync cycle (and not a previous/old one)\n+                if (transitionEventId.equals(event.getMetadata().getRequestId())) {\n+                    log.debug(\"Log Entry Sync ACK, update last ack timestamp to {}\", event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                    fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMDM1Mg==", "bodyText": "Looks like we don't have a timeout here, does it mean we will retry to verify forever if standby's apply phase is stuck? In this case, we need a user to enforce snapshot sync?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r481530352", "createdAt": "2020-09-02T01:32:49Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/WaitSnapshotApplyState.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.corfudb.infrastructure.logreplication.replication.fsm;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.DataSender;\n+import org.corfudb.infrastructure.logreplication.replication.send.LogReplicationEventMetadata;\n+import org.corfudb.infrastructure.logreplication.runtime.CorfuLogReplicationRuntime;\n+import org.corfudb.protocols.wireprotocol.logreplication.LogReplicationMetadataResponse;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * This class represents the WaitSnapshotApply state of the Log Replication State Machine.\n+ *\n+ * In this state the remote cluster is queried to verify snapshot sync has been applied\n+ * and move onto log entry sync (incremental update replication).\n+ *\n+ * This state is an optimization such that snapshot sync is separated into transfer and apply phases.\n+ * If data has been completely transferred and some failure occurs immediately after, the receiver can still\n+ * recover and data does not need to be transferred all over again.\n+ */\n+@Slf4j\n+public class WaitSnapshotApplyState implements LogReplicationState {\n+\n+    /**\n+     * Delay in milliseconds to monitor replication status on receiver, when snapshot sync apply is in progress.\n+     */\n+    private static final int SCHEDULE_APPLY_MONITOR_DELAY = 2000;\n+\n+    /**\n+     * Log Replication Finite State Machine Instance\n+     */\n+    private final LogReplicationFSM fsm;\n+\n+    /**\n+     Uniquely identifies the snapshot sync to which this wait state is associated.\n+     */\n+    private UUID transitionEventId;\n+\n+    /**\n+     * Route query metadata messages to the remote cluster\n+     */\n+    private DataSender dataSender;\n+\n+    /**\n+     * Base Snapshot Timestamp for current Snapshot Sync\n+     */\n+    private long baseSnapshotTimestamp;\n+\n+    private ScheduledExecutorService snapshotSyncApplyMonitorExecutor;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param logReplicationFSM log replication state machine\n+     */\n+    public WaitSnapshotApplyState(LogReplicationFSM logReplicationFSM, DataSender dataSender) {\n+        this.fsm = logReplicationFSM;\n+        this.dataSender = dataSender;\n+        this.snapshotSyncApplyMonitorExecutor = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder()\n+                .setDaemon(true)\n+                .setNameFormat(\"snapshotSyncApplyVerificationScheduler\")\n+                .build());\n+    }\n+\n+    @Override\n+    public LogReplicationState processEvent(LogReplicationEvent event) throws IllegalTransitionException {\n+        switch (event.getType()) {\n+            case SNAPSHOT_SYNC_REQUEST:\n+                log.info(\"Snapshot Sync requested {} while waiting for {} to complete.\", event.getEventID(), getTransitionEventId());\n+                LogReplicationState snapshotSyncState = fsm.getStates().get(LogReplicationStateType.IN_SNAPSHOT_SYNC);\n+                snapshotSyncState.setTransitionEventId(event.getEventID());\n+                return snapshotSyncState;\n+            case SYNC_CANCEL:\n+                log.debug(\"Sync has been canceled while waiting for Snapshot Sync {} to complete apply. Restart.\", transitionEventId);\n+                LogReplicationState inSnapshotSyncState = fsm.getStates().get(LogReplicationStateType.IN_SNAPSHOT_SYNC);\n+                inSnapshotSyncState.setTransitionEventId(UUID.randomUUID());\n+                return inSnapshotSyncState;\n+            case SNAPSHOT_APPLY_IN_PROGRESS:\n+                log.debug(\"Snapshot Apply in progress {}. Verify status.\", transitionEventId);\n+                return this;\n+            case SNAPSHOT_APPLY_COMPLETE:\n+                UUID snapshotSyncApplyId = event.getMetadata().getRequestId();\n+                /*\n+                 This is required as in the following sequence of events:\n+\n+                 1. SNAPSHOT_SYNC_REQUEST (ID = 1) EXTERNAL\n+                 2. SYNC_CANCEL (ID = 1) EXTERNAL\n+                 3. SNAPSHOT_SYNC_REQUEST (ID = 2) EXTERNAL\n+\n+                 Snapshot Sync with ID = 1 could be completed in between (1 and 2) but show up in the queue\n+                 as 4, attempting to process a completion event for the incorrect snapshot sync.\n+                 */\n+                if (snapshotSyncApplyId.equals(transitionEventId)) {\n+                    LogReplicationState logEntrySyncState = fsm.getStates()\n+                            .get(LogReplicationStateType.IN_LOG_ENTRY_SYNC);\n+                    // We need to set a new transition event Id, so anything happening on this new state\n+                    // is marked with this unique Id and correlated to cancel or trimmed events.\n+                    logEntrySyncState.setTransitionEventId(event.getEventID());\n+                    fsm.setBaseSnapshot(event.getMetadata().getLastTransferredBaseSnapshot());\n+                    fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                    log.info(\"Snapshot Sync apply completed, syncRequestId={}, baseSnapshot={}. Transition to LOG_ENTRY_SYNC\",\n+                            event.getEventID(), event.getMetadata().getLastTransferredBaseSnapshot());\n+                    return logEntrySyncState;\n+                }\n+\n+                log.warn(\"Ignoring snapshot sync apply complete event, for request {}, as ongoing snapshot sync is {}\",\n+                        snapshotSyncApplyId, transitionEventId);\n+                return this;\n+            case REPLICATION_STOP:\n+                log.debug(\"Stop Log Replication while waiting for snapshot sync apply to complete id={}\", transitionEventId);\n+                return fsm.getStates().get(LogReplicationStateType.INITIALIZED);\n+            case REPLICATION_SHUTDOWN:\n+                log.debug(\"Shutdown Log Replication while waiting for snapshot sync apply to complete id={}\", transitionEventId);\n+                return fsm.getStates().get(LogReplicationStateType.STOPPED);\n+            default: {\n+                log.warn(\"Unexpected log replication event {} when in wait snapshot sync apply state.\", event.getType());\n+                throw new IllegalTransitionException(event.getType(), getType());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onEntry(LogReplicationState from) {\n+        log.info(\"OnEntry :: wait snapshot apply state\");\n+        this.fsm.getLogReplicationFSMWorkers().submit(this::verifyStatusOfSnapshotSyncApply);\n+    }\n+\n+    private void verifyStatusOfSnapshotSyncApply() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUzMjQ0Ng==", "bodyText": "If there is an exception, looks like we are not able to input an event to FSM and not able to start the executor?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r481532446", "createdAt": "2020-09-02T01:36:16Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/WaitSnapshotApplyState.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.corfudb.infrastructure.logreplication.replication.fsm;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.DataSender;\n+import org.corfudb.infrastructure.logreplication.replication.send.LogReplicationEventMetadata;\n+import org.corfudb.infrastructure.logreplication.runtime.CorfuLogReplicationRuntime;\n+import org.corfudb.protocols.wireprotocol.logreplication.LogReplicationMetadataResponse;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * This class represents the WaitSnapshotApply state of the Log Replication State Machine.\n+ *\n+ * In this state the remote cluster is queried to verify snapshot sync has been applied\n+ * and move onto log entry sync (incremental update replication).\n+ *\n+ * This state is an optimization such that snapshot sync is separated into transfer and apply phases.\n+ * If data has been completely transferred and some failure occurs immediately after, the receiver can still\n+ * recover and data does not need to be transferred all over again.\n+ */\n+@Slf4j\n+public class WaitSnapshotApplyState implements LogReplicationState {\n+\n+    /**\n+     * Delay in milliseconds to monitor replication status on receiver, when snapshot sync apply is in progress.\n+     */\n+    private static final int SCHEDULE_APPLY_MONITOR_DELAY = 2000;\n+\n+    /**\n+     * Log Replication Finite State Machine Instance\n+     */\n+    private final LogReplicationFSM fsm;\n+\n+    /**\n+     Uniquely identifies the snapshot sync to which this wait state is associated.\n+     */\n+    private UUID transitionEventId;\n+\n+    /**\n+     * Route query metadata messages to the remote cluster\n+     */\n+    private DataSender dataSender;\n+\n+    /**\n+     * Base Snapshot Timestamp for current Snapshot Sync\n+     */\n+    private long baseSnapshotTimestamp;\n+\n+    private ScheduledExecutorService snapshotSyncApplyMonitorExecutor;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param logReplicationFSM log replication state machine\n+     */\n+    public WaitSnapshotApplyState(LogReplicationFSM logReplicationFSM, DataSender dataSender) {\n+        this.fsm = logReplicationFSM;\n+        this.dataSender = dataSender;\n+        this.snapshotSyncApplyMonitorExecutor = Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder()\n+                .setDaemon(true)\n+                .setNameFormat(\"snapshotSyncApplyVerificationScheduler\")\n+                .build());\n+    }\n+\n+    @Override\n+    public LogReplicationState processEvent(LogReplicationEvent event) throws IllegalTransitionException {\n+        switch (event.getType()) {\n+            case SNAPSHOT_SYNC_REQUEST:\n+                log.info(\"Snapshot Sync requested {} while waiting for {} to complete.\", event.getEventID(), getTransitionEventId());\n+                LogReplicationState snapshotSyncState = fsm.getStates().get(LogReplicationStateType.IN_SNAPSHOT_SYNC);\n+                snapshotSyncState.setTransitionEventId(event.getEventID());\n+                return snapshotSyncState;\n+            case SYNC_CANCEL:\n+                log.debug(\"Sync has been canceled while waiting for Snapshot Sync {} to complete apply. Restart.\", transitionEventId);\n+                LogReplicationState inSnapshotSyncState = fsm.getStates().get(LogReplicationStateType.IN_SNAPSHOT_SYNC);\n+                inSnapshotSyncState.setTransitionEventId(UUID.randomUUID());\n+                return inSnapshotSyncState;\n+            case SNAPSHOT_APPLY_IN_PROGRESS:\n+                log.debug(\"Snapshot Apply in progress {}. Verify status.\", transitionEventId);\n+                return this;\n+            case SNAPSHOT_APPLY_COMPLETE:\n+                UUID snapshotSyncApplyId = event.getMetadata().getRequestId();\n+                /*\n+                 This is required as in the following sequence of events:\n+\n+                 1. SNAPSHOT_SYNC_REQUEST (ID = 1) EXTERNAL\n+                 2. SYNC_CANCEL (ID = 1) EXTERNAL\n+                 3. SNAPSHOT_SYNC_REQUEST (ID = 2) EXTERNAL\n+\n+                 Snapshot Sync with ID = 1 could be completed in between (1 and 2) but show up in the queue\n+                 as 4, attempting to process a completion event for the incorrect snapshot sync.\n+                 */\n+                if (snapshotSyncApplyId.equals(transitionEventId)) {\n+                    LogReplicationState logEntrySyncState = fsm.getStates()\n+                            .get(LogReplicationStateType.IN_LOG_ENTRY_SYNC);\n+                    // We need to set a new transition event Id, so anything happening on this new state\n+                    // is marked with this unique Id and correlated to cancel or trimmed events.\n+                    logEntrySyncState.setTransitionEventId(event.getEventID());\n+                    fsm.setBaseSnapshot(event.getMetadata().getLastTransferredBaseSnapshot());\n+                    fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                    log.info(\"Snapshot Sync apply completed, syncRequestId={}, baseSnapshot={}. Transition to LOG_ENTRY_SYNC\",\n+                            event.getEventID(), event.getMetadata().getLastTransferredBaseSnapshot());\n+                    return logEntrySyncState;\n+                }\n+\n+                log.warn(\"Ignoring snapshot sync apply complete event, for request {}, as ongoing snapshot sync is {}\",\n+                        snapshotSyncApplyId, transitionEventId);\n+                return this;\n+            case REPLICATION_STOP:\n+                log.debug(\"Stop Log Replication while waiting for snapshot sync apply to complete id={}\", transitionEventId);\n+                return fsm.getStates().get(LogReplicationStateType.INITIALIZED);\n+            case REPLICATION_SHUTDOWN:\n+                log.debug(\"Shutdown Log Replication while waiting for snapshot sync apply to complete id={}\", transitionEventId);\n+                return fsm.getStates().get(LogReplicationStateType.STOPPED);\n+            default: {\n+                log.warn(\"Unexpected log replication event {} when in wait snapshot sync apply state.\", event.getType());\n+                throw new IllegalTransitionException(event.getType(), getType());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onEntry(LogReplicationState from) {\n+        log.info(\"OnEntry :: wait snapshot apply state\");\n+        this.fsm.getLogReplicationFSMWorkers().submit(this::verifyStatusOfSnapshotSyncApply);\n+    }\n+\n+    private void verifyStatusOfSnapshotSyncApply() {\n+        try {\n+            log.debug(\"Verify snapshot sync apply status, sync={}\", transitionEventId);\n+\n+            // Query metadata on remote cluster to verify the status of the snapshot sync apply\n+            CompletableFuture<LogReplicationMetadataResponse> metadataResponseCompletableFuture = dataSender.sendMetadataRequest();\n+            LogReplicationMetadataResponse metadataResponse = metadataResponseCompletableFuture.get(CorfuLogReplicationRuntime.DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS);\n+\n+            // If snapshot sync apply phase has been completed on remote cluster, transition to Log Entry Sync\n+            // (incremental update replication), otherwise, schedule new query.\n+            if (metadataResponse.getLastLogProcessed() == metadataResponse.getSnapshotApplied() &&\n+                    metadataResponse.getSnapshotApplied() == baseSnapshotTimestamp) {\n+                log.info(\"Snapshot sync apply is complete appliedTs={}, baseTs={}\", metadataResponse.getSnapshotApplied(),\n+                        baseSnapshotTimestamp);\n+                fsm.input(new LogReplicationEvent(LogReplicationEvent.LogReplicationEventType.SNAPSHOT_APPLY_COMPLETE,\n+                        new LogReplicationEventMetadata(transitionEventId, baseSnapshotTimestamp, baseSnapshotTimestamp)));\n+            } else {\n+                log.debug(\"Snapshot sync apply is still in progress, appliedTs={}, baseTs={}, sync_id={}\", metadataResponse.getSnapshotApplied(),\n+                        baseSnapshotTimestamp, transitionEventId);\n+                // Schedule a one time action which will verify the snapshot apply status after a given delay\n+                this.snapshotSyncApplyMonitorExecutor.schedule(this::scheduleSnapshotApplyVerification, SCHEDULE_APPLY_MONITOR_DELAY,\n+                        TimeUnit.MILLISECONDS);\n+            }\n+        } catch (TimeoutException te) {\n+            log.error(\"Snapshot sync apply verification timed out.\", te);\n+        } catch (ExecutionException ee) {\n+            // Completable future completed exceptionally\n+            log.error(\"Snapshot sync apply verification failed.\", ee);\n+        } catch (Exception e) {\n+            log.error(\"Snapshot sync apply verification failed.\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9"}, "originalPosition": 165}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f061f089f97b1ddef3980dfad202ed627a5753b9", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f061f089f97b1ddef3980dfad202ed627a5753b9", "committedDate": "2020-09-01T23:36:46Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}, "afterCommit": {"oid": "0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5", "committedDate": "2020-09-02T08:04:44Z", "message": "Two-Phase Snapshot Sync\n\n    - 2-phase snapshot sync: transfer and apply phases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTQyNzE1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481142715", "createdAt": "2020-09-02T18:14:40Z", "commit": {"oid": "0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxNDo0MFrOHL7cPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyNDowMFrOHL_R6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MDI3MQ==", "bodyText": "ts <= persistedTopologyConfigId or persistedSnapshotStart", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482270271", "createdAt": "2020-09-02T18:14:40Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationMetadataManager.java", "diffHunk": "@@ -251,73 +258,69 @@ public boolean setSrcBaseSnapshotStart(long topologyConfigId, long ts) {\n                         \"persistedSnapshotStart={}\",\n                 topologyConfigId, ts, persistedTopologyConfigID, persistSnapStart);\n \n-        return (ts == getLastSnapStartTimestamp() && topologyConfigId == getTopologyConfigId());\n+        return (ts == getLastStartedSnapshotTimestamp() && topologyConfigId == getTopologyConfigId());\n     }\n \n \n     /**\n-     * This call should be done in a transaction after a transfer done and before apply the snapshot.\n-     * @param ts\n+     * This call should be done in a transaction after a snapshot transfer is complete and before the apply starts.\n+     *\n+     * @param topologyConfigId current topology config identifier\n+     * @param ts timestamp of completed snapshot sync transfer\n      */\n-    public void setLastSnapTransferDoneTimestamp(long topologyConfigId, long ts) {\n+    public void setLastSnapshotTransferCompleteTimestamp(long topologyConfigId, long ts) {\n         CorfuStoreMetadata.Timestamp timestamp = corfuStore.getTimestamp();\n         long persistedTopologyConfigId = query(timestamp, LogReplicationMetadataType.TOPOLOGY_CONFIG_ID);\n-        long persistSnapStart = query(timestamp, LogReplicationMetadataType.LAST_SNAPSHOT_STARTED);\n+        long persistedSnapshotStart = query(timestamp, LogReplicationMetadataType.LAST_SNAPSHOT_STARTED);\n \n         log.debug(\"setLastSnapTransferDone snapshotStart topologyConfigId={}, ts={}, persistedTopologyConfigID={},\" +\n                 \" persistedSiteConfigID={}, persistedSnapshotStart={}\", topologyConfigId, ts, persistedTopologyConfigId,\n-                persistSnapStart);\n+                persistedSnapshotStart);\n \n         // It means the cluster config has changed, ignore the update operation.\n         if (topologyConfigId != persistedTopologyConfigId || ts <= persistedTopologyConfigId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MTUzMA==", "bodyText": "need to remove persistedSiteConfigID={}", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482271530", "createdAt": "2020-09-02T18:16:54Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationMetadataManager.java", "diffHunk": "@@ -251,73 +258,69 @@ public boolean setSrcBaseSnapshotStart(long topologyConfigId, long ts) {\n                         \"persistedSnapshotStart={}\",\n                 topologyConfigId, ts, persistedTopologyConfigID, persistSnapStart);\n \n-        return (ts == getLastSnapStartTimestamp() && topologyConfigId == getTopologyConfigId());\n+        return (ts == getLastStartedSnapshotTimestamp() && topologyConfigId == getTopologyConfigId());\n     }\n \n \n     /**\n-     * This call should be done in a transaction after a transfer done and before apply the snapshot.\n-     * @param ts\n+     * This call should be done in a transaction after a snapshot transfer is complete and before the apply starts.\n+     *\n+     * @param topologyConfigId current topology config identifier\n+     * @param ts timestamp of completed snapshot sync transfer\n      */\n-    public void setLastSnapTransferDoneTimestamp(long topologyConfigId, long ts) {\n+    public void setLastSnapshotTransferCompleteTimestamp(long topologyConfigId, long ts) {\n         CorfuStoreMetadata.Timestamp timestamp = corfuStore.getTimestamp();\n         long persistedTopologyConfigId = query(timestamp, LogReplicationMetadataType.TOPOLOGY_CONFIG_ID);\n-        long persistSnapStart = query(timestamp, LogReplicationMetadataType.LAST_SNAPSHOT_STARTED);\n+        long persistedSnapshotStart = query(timestamp, LogReplicationMetadataType.LAST_SNAPSHOT_STARTED);\n \n         log.debug(\"setLastSnapTransferDone snapshotStart topologyConfigId={}, ts={}, persistedTopologyConfigID={},\" +\n                 \" persistedSiteConfigID={}, persistedSnapshotStart={}\", topologyConfigId, ts, persistedTopologyConfigId,\n-                persistSnapStart);\n+                persistedSnapshotStart);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMzE2Mw==", "bodyText": "Why we need to update topologyConfigId here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482333163", "createdAt": "2020-09-02T19:24:00Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -403,17 +412,39 @@ private void processSnapshotMessage(LogReplicationEntry message) {\n                 snapshotWriter.apply(message);\n                 break;\n             case SNAPSHOT_END:\n-                setDataConsistent(false);\n-                snapshotWriter.snapshotTransferDone(message);\n-                completeSnapshotApply(message);\n-                setDataConsistent(true);\n+                if (snapshotWriter.getPhase() != StreamsSnapshotWriter.Phase.APPLY_PHASE) {\n+                    // Mark Snapshot Sync Transfer as complete and return ACK right away\n+                    completeSnapshotTransfer(message);\n+                    startSnapshotApplyAsync(message);\n+                }\n                 break;\n             default:\n-                log.warn(\"Message type {} should not be applied as snapshot sync.\", message.getMetadata().getMessageMetadataType());\n+                log.warn(\"Message type {} should not be applied during snapshot sync.\", message.getMetadata().getMessageMetadataType());\n                 break;\n         }\n     }\n \n+    private void startSnapshotApplyAsync(LogReplicationEntry entry) {\n+        applyExecutor.submit(() -> startSnapshotApply(entry));\n+    }\n+\n+    private void startSnapshotApply(LogReplicationEntry entry) {\n+        log.debug(\"OnEntry :: Snapshot Sync apply, id={}\", entry.getMetadata().getSyncRequestId());\n+        setDataConsistent(false);\n+        snapshotWriter.startSnapshotSyncApply();\n+        completeSnapshotApply(entry);\n+        setDataConsistent(true);\n+        log.debug(\"OnExit :: Snapshot Sync apply, id={}\", entry.getMetadata().getSyncRequestId());\n+    }\n+\n+    private void completeSnapshotTransfer(LogReplicationEntry message) {\n+        topologyConfigId = message.getMetadata().getTopologyConfigId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ce9bddf8ea7f8fc41485b2afc6c77f0971f8fd5"}, "originalPosition": 256}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd3f74099b872817538a28ab22a3d19922782bda", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/bd3f74099b872817538a28ab22a3d19922782bda", "committedDate": "2020-09-02T21:26:50Z", "message": "Additional changes for 2-phased snapshot sync"}, "afterCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/90316aa9b32672d3159c7aabe510b7af8bba2d97", "committedDate": "2020-09-02T21:27:40Z", "message": "Additional changes for 2-phased snapshot sync"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzUyMTQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481352140", "createdAt": "2020-09-02T22:19:59Z", "commit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoxOTo1OVrOHMLYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoxOTo1OVrOHMLYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMTUyNw==", "bodyText": "Should add break at the above line.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482531527", "createdAt": "2020-09-02T22:19:59Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InLogEntrySyncState.java", "diffHunk": "@@ -89,9 +99,9 @@ public LogReplicationState processEvent(LogReplicationEvent event) throws Illega\n             default: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzU0NDYz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481354463", "createdAt": "2020-09-02T22:21:17Z", "commit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyMToxOFrOHMLdRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyMToxOFrOHMLdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzMjY3Ng==", "bodyText": "Just one variable is need for the log.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482532676", "createdAt": "2020-09-02T22:21:18Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InSnapshotSyncState.java", "diffHunk": "@@ -82,13 +82,21 @@ public LogReplicationState processEvent(LogReplicationEvent event) throws Illega\n                  batch of updates for the current snapshot sync.\n                  */\n                 if (event.getMetadata().getRequestId() == transitionEventId) {\n-                    log.debug(\"InSnapshotSync[{}] :: Continuation of snapshot sync for {}\", this, event.getEventID());\n+                    log.debug(\"InSnapshotSync :: Continuation of snapshot sync for {}\", transitionEventId, event.getEventID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzU2MTg4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481356188", "createdAt": "2020-09-02T22:25:08Z", "commit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyNTowOVrOHMLu2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjoyNTowOVrOHMLu2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUzNzE3OA==", "bodyText": "Why do there are two places to need to setup fsm.setBaseSnapshot, and fsm.setAckedTimestamp?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482537178", "createdAt": "2020-09-02T22:25:09Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InitializedState.java", "diffHunk": "@@ -33,19 +33,28 @@ public InitializedState(LogReplicationFSM logReplicationFSM) {\n     public LogReplicationState processEvent(LogReplicationEvent event) throws IllegalTransitionException {\n         switch (event.getType()) {\n             case SNAPSHOT_SYNC_REQUEST:\n-            case SNAPSHOT_WAIT_COMPLETE:\n                 log.info(\"Start Snapshot Sync, requestId={}\", event.getEventID());\n                 // Set the id of the event that caused the transition to the new state\n                 // This is used to correlate trim or error events that derive from this state\n                 LogReplicationState snapshotSyncState = fsm.getStates().get(LogReplicationStateType.IN_SNAPSHOT_SYNC);\n                 snapshotSyncState.setTransitionEventId(event.getEventID());\n                 return snapshotSyncState;\n-            case REPLICATION_START:\n+            case SNAPSHOT_TRANSFER_COMPLETE:\n+                log.info(\"Snapshot Sync transfer completed. Wait for snapshot apply to complete.\");\n+                WaitSnapshotApplyState waitSnapshotApplyState = (WaitSnapshotApplyState)fsm.getStates().get(LogReplicationStateType.WAIT_SNAPSHOT_APPLY);\n+                waitSnapshotApplyState.setTransitionEventId(event.getEventID());\n+                waitSnapshotApplyState.setBaseSnapshotTimestamp(fsm.getBaseSnapshot());\n+                fsm.setBaseSnapshot(event.getMetadata().getLastTransferredBaseSnapshot());\n+                fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                return waitSnapshotApplyState;\n+            case LOG_ENTRY_SYNC_REQUEST:\n                 log.info(\"Start Log Entry Sync, requestId={}\", event.getEventID());\n                 // Set the id of the event that caused the transition to the new state\n                 // This is used to correlate trim or error events that derive from this state\n                 LogReplicationState logEntrySyncState = fsm.getStates().get(LogReplicationStateType.IN_LOG_ENTRY_SYNC);\n                 logEntrySyncState.setTransitionEventId(event.getEventID());\n+                fsm.setBaseSnapshot(event.getMetadata().getLastTransferredBaseSnapshot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzY5NDc2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481369476", "createdAt": "2020-09-02T22:58:21Z", "commit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1ODoyMVrOHMOM3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1ODoyMVrOHMOM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3NzYyOA==", "bodyText": "How  IN_SNAPSHOT_SYNC get a SNAPSHOT_REQUEST or SNAPSHOT_CANCEL and go to WAIT_SNAPSHOT_APPLY ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482577628", "createdAt": "2020-09-02T22:58:21Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -39,64 +40,84 @@\n  * communication channels.\n  *\n  * Log Replication on the source cluster is defined by an event-driven finite state machine, with 5 states\n- * and 8 events/messages---which can trigger the transition between states.\n+ * and 10 events/messages---which can trigger the transition between states.\n  *\n  * States:\n  * ------\n  *  - Initialized (initial state)\n  *  - In_Log_Entry_Sync\n  *  - In_Snapshot_Sync\n- *  - Snapshot_Sync_Required\n+ *  - Wait_Snapshot_Apply\n  *  - Stopped\n  *\n  * Events:\n  * ------\n- *  - replication_start\n- *  - replication_stop\n  *  - snapshot_sync_request\n- *  - snapshot_sync_complete\n  *  - snapshot_sync_continue\n+ *  - snapshot_transfer_complete\n+ *  - snapshot_apply_in_progress\n+ *  - snapshot_apply_complete\n+ *  - log_entry_sync_request\n+ *  - log_entry_sync_continue\n  *  - sync_cancel\n- *  - log_entry_sync_replicated\n+ *  - replication_stop\n  *  - replication_shutdown\n  *\n  *\n  * The following diagram illustrates the Log Replication FSM state transition:\n  *\n  *\n- *                                       replication_stop\n- *                      +-------------------------------------------------+\n- *    replication_stop  |                                                 |\n- *             +-----+  |              replication_stop                   |\n- *             |     |  v      v-----------------------------+            |\n- *             |    ++--+---------+                          |        +---+--------------------+\n- *             +--->+ INITIALIZED +------------------------+ |        | SNAPSHOT_SYNC_REQUIRED +<---+\n- *                  +---+----+----+ snapshot_sync_request  | |        +---+---------------+----+    |\n- *                      ^    |                             | |            |               ^         |\n- *                      |    |                             | |   snapshot |               |         |\n- *                      |    |                             | |    sync    |               |         |\n- *     replication_stop |    | replication_start           | |    request |               |         |\n- *                      |    |                             | |            |               |         |\n- *                      |    v                             v |            v               |         |\n- *               +------+----+-------+  snapshot_sync    +-+-+------------+-+             |         |\n- *         +-----| IN_LOG_ENTRY_SYNC |     request       | IN_SNAPSHOT_SYNC +             |         |\n- *         |     |                   +------------------>+                  |             |         |\n- *         |     +----+----+---------+                   +---+---+----------+-------------+         |\n- *         |       ^  |   ^                                 |    |        ^        sync             |\n- *         |       |  |   +---------------------------------+    |        |       cancel            |\n- *         + ----- +  |                snapshot_sync             + -------+                         |\n- *  log_entry_sync    |                  complete               snapshot_sync                       |\n- *    continue        |                                           continue                          |\n- *                    +-----------------------------------------------------------------------------+\n- *                                                     sync_cancel\n- *               replication\n- * +---------+    shutdown    +------------+\n- * | STOPPED +<---------------+ ALL_STATES |\n- * +---------+                +------------+\n+ *\n+ *                                          REPLICATION_STOP\n+ *                                              +------+\n+ *                                              |      |\n+ *                                              |      |\n+ *                LOG_ENTRY_SYNC_REQUEST   +----+------v-----+    SNAPSHOT_SYNC_REQUEST\n+ *             +---------------------------+   INITIALIZED   +-----------------------------+\n+ *             |                           +-^---^--+------^-+                             |\n+ *             |                             |   |  |      |                               |\n+ *             |                             |   |  |      |                               |\n+ *             |                             |   |  |      |                               |\n+ *             |                             |   |  |      |                               |\n+ *             |                             |   |  |      |                               |\n+ *             |                             |   |  |      |                               |     SYNC\n+ *             |                             |   |  |      |                               |    CANCEL\n+ *             |                             |   |  |      |                               |   +------+\n+ *             |                             |   |  |      |                               |   |      |\n+ *             |                             |   |  |      |                               |   |      |\n+ * +-----------v-----------+   REPLICATION   |   |  |      |   REPLICATION     +-----------v---+------v--+\n+ * |   IN_LOG_ENTRY_SYNC   +------STOP-------+   |  |      +------STOP---------+    IN_SNAPSHOT_SYNC     |\n+ * +----+-----^---+------^-+                     |  |                          +-^-----+---^-----+-----^-+\n+ *      |     |   |      |                       |  |                            |     |   |     |     |\n+ *      |     |   |      |                       |  |                            |     |   |     |     |\n+ *      |     |   +------+           REPLICATION |  | SNAPSHOT_TRANSFER          +-----+   |     |     |\n+ *      |     |   LOG_ENTRY              STOP    |  |      COMPLETE              SNAPSHOT  |     |     |\n+ *      |     | SYNC_CONTINUE                    |  |                              SYNC    |     |     |\n+ *      |     |                                  |  |                            CONTINUE  |     |     |\n+ *      |     |                                  |  |                                      |     |     |\n+ *      |     |                                  |  |                                      |     |     |\n+ *      |     |                                  |  |                                      |     |     |\n+ *      |     |                         +--------+--v-------------+  SNAPSHOT_SYNC_REQUEST |     |     |\n+ *      |     +-----SNAPSHOT_APPLY------+   WAIT_SNAPSHOT_APPLY   +------------------------+     |     |\n+ *      |              COMPLETE         +-^----+---^--------------+       SYNC_CANCEL            |     |\n+ *      |                                 |    |   |                                             |     |\n+ *      |                                 |    |   +-----------SNAPSHOT_TRANSFER_COMPLETE--------+     |\n+ *      |                                 +----+                                                       |\n+ *      |                             SNAPSHOT_APPLY                                                   |\n+ *      |                               IN_PROGRESS                                                    |\n+ *      |                                                                                              |\n+ *      +----------------------------------------SYNC_CANCEL-------------------------------------------+\n+ *                                          SNAPSHOT_SYNC_REQUEST\n+ *\n+ *\n+ *\n+ *\n+ *     +-------------+\n+ *     |   STOPPED   <-----REPLICATION-----  ALL_STATES\n+ *     +-------------+       SHUTDOWN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97"}, "originalPosition": 121}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90316aa9b32672d3159c7aabe510b7af8bba2d97", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/90316aa9b32672d3159c7aabe510b7af8bba2d97", "committedDate": "2020-09-02T21:27:40Z", "message": "Additional changes for 2-phased snapshot sync"}, "afterCommit": {"oid": "8de9bdb9c1972ce036bb7834e7b1e29e64093f5e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8de9bdb9c1972ce036bb7834e7b1e29e64093f5e", "committedDate": "2020-09-03T03:29:33Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8de9bdb9c1972ce036bb7834e7b1e29e64093f5e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8de9bdb9c1972ce036bb7834e7b1e29e64093f5e", "committedDate": "2020-09-03T03:29:33Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}, "afterCommit": {"oid": "386fc147f9d5fabbbdead1038ce5f23393283188", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/386fc147f9d5fabbbdead1038ce5f23393283188", "committedDate": "2020-09-03T03:36:11Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDY4NzM1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481468735", "createdAt": "2020-09-03T03:36:26Z", "commit": {"oid": "8de9bdb9c1972ce036bb7834e7b1e29e64093f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzozNjoyNlrOHMUpAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMzozNjoyNlrOHMUpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4MzEzNw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.corfudb.protocols.wireprotocol.logreplication.MessageType'", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482683137", "createdAt": "2020-09-03T03:36:26Z", "author": {"login": "corfudb-bot"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -8,9 +8,12 @@\n import org.corfudb.infrastructure.logreplication.infrastructure.plugins.LogReplicationPluginConfig;\n import org.corfudb.infrastructure.logreplication.infrastructure.ClusterDescriptor;\n import org.corfudb.infrastructure.logreplication.runtime.fsm.LogReplicationRuntimeEvent;\n+import org.corfudb.infrastructure.logreplication.runtime.fsm.LogReplicationRuntimeEvent.LogReplicationRuntimeEventType;\n import org.corfudb.infrastructure.logreplication.utils.CorfuMessageConverterUtils;\n import org.corfudb.protocols.wireprotocol.CorfuMsg;\n import org.corfudb.protocols.wireprotocol.CorfuMsgType;\n+import org.corfudb.protocols.wireprotocol.logreplication.LogReplicationEntry;\n+import org.corfudb.protocols.wireprotocol.logreplication.MessageType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8de9bdb9c1972ce036bb7834e7b1e29e64093f5e"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "386fc147f9d5fabbbdead1038ce5f23393283188", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/386fc147f9d5fabbbdead1038ce5f23393283188", "committedDate": "2020-09-03T03:36:11Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}, "afterCommit": {"oid": "f029fcd3b49eeb157f4aaf2f7c77b353b539d097", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f029fcd3b49eeb157f4aaf2f7c77b353b539d097", "committedDate": "2020-09-03T04:17:43Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDg3NDkz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481487493", "createdAt": "2020-09-03T04:41:50Z", "commit": {"oid": "f029fcd3b49eeb157f4aaf2f7c77b353b539d097"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo0MTo1MFrOHMVq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo0MTo1MFrOHMVq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwMDAxNg==", "bodyText": "INFO?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482700016", "createdAt": "2020-09-03T04:41:50Z", "author": {"login": "zhangn49"}, "path": "test/src/test/resources/logback-test.xml", "diffHunk": "@@ -44,7 +44,7 @@\n     </logger>\n \n \n-    <root level=\"INFO\">\n+    <root level=\"DEBUG\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f029fcd3b49eeb157f4aaf2f7c77b353b539d097"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7b6067137d81cc1da2e34d748ca3caef266a9314", "committedDate": "2020-09-03T04:53:27Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f029fcd3b49eeb157f4aaf2f7c77b353b539d097", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f029fcd3b49eeb157f4aaf2f7c77b353b539d097", "committedDate": "2020-09-03T04:17:43Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}, "afterCommit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7b6067137d81cc1da2e34d748ca3caef266a9314", "committedDate": "2020-09-03T04:53:27Z", "message": "Two-Phase Snapshot Sync\n\n     Separate snapshot sync in two stages: transfer and apply stages."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDkyNjkw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481492690", "createdAt": "2020-09-03T04:58:35Z", "commit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1ODozNVrOHMV8ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1ODozNVrOHMV8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNDUwNw==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482704507", "createdAt": "2020-09-03T04:58:35Z", "author": {"login": "corfudb-bot"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -1038,6 +986,80 @@ public void testLogEntrySyncLargeTables() throws Exception {\n         cleanEnv();\n     }\n \n+    /**\n+     * Test the case where a Snapshot Sync apply phase takes several cycles to complete.\n+     * We need to ensure the Sender re-schedules verification of snapshot sync status and\n+     * once completed moves onto Log Entry Sync.\n+     */\n+    @Test\n+    public void testSnapshotSyncLongDurationApply() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "originalPosition": 213}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDkyNjk1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-481492695", "createdAt": "2020-09-03T04:58:36Z", "commit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1ODozNlrOHMV8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDo1ODozNlrOHMV8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcwNDUxMA==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#discussion_r482704510", "createdAt": "2020-09-03T04:58:36Z", "author": {"login": "corfudb-bot"}, "path": "test/src/test/java/org/corfudb/integration/LogReplicationIT.java", "diffHunk": "@@ -1038,6 +986,80 @@ public void testLogEntrySyncLargeTables() throws Exception {\n         cleanEnv();\n     }\n \n+    /**\n+     * Test the case where a Snapshot Sync apply phase takes several cycles to complete.\n+     * We need to ensure the Sender re-schedules verification of snapshot sync status and\n+     * once completed moves onto Log Entry Sync.\n+     */\n+    @Test\n+    public void testSnapshotSyncLongDurationApply() throws Exception {\n+        final int numCyclesToDelayApply = 3;\n+        testSnapshotSyncAndLogEntrySync(numCyclesToDelayApply, false);\n+    }\n+\n+    /**\n+     * Test the case where a Snapshot Sync apply metadata response is delayed causing TimeoutExceptions.\n+     * Verify we are able to recover.\n+     */\n+    @Test\n+    public void testSnapshotSyncDelayedApplyResponse() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzIyMDAw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-482322000", "createdAt": "2020-09-04T02:47:38Z", "commit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzIyMDM3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2739#pullrequestreview-482322037", "createdAt": "2020-09-04T02:47:45Z", "commit": {"oid": "7b6067137d81cc1da2e34d748ca3caef266a9314"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4006, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}