{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzY4MzUz", "number": 2501, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1ODoxMlrODvOGxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1ODo0NlrODvVdAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODQwNzczOnYy", "diffSide": "RIGHT", "path": "docs/corfu-queue/corfu-queue-design.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1ODoxMlrOGBhMJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjo1OToxN1rOGBhPAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NTU0Mw==", "bodyText": "I think you want to say transaction's commit order and probably not address.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404245543", "createdAt": "2020-04-06T16:58:12Z", "author": {"login": "medhavidhawan"}, "path": "docs/corfu-queue/corfu-queue-design.md", "diffHunk": "@@ -1,12 +1,11 @@\n The class `CorfuQueue` implements a persisted queue over the abstraction of a CorfuTable. CorfuTable that only uses a HashMap<> to represent the materialized view of a distributed map does not carry a notion of ordering natively. However when implemented over the abstraction of a distributed shared log, the elements added to the map do, in fact, have an ordering imposed by their append or transaction commit operations into the global log. The class `CorfuQueue` attempts to expose this inherent ordering as a persisted Queue with three simple apis:\n \n ###  1. `CorfuRecordId enqueue(E)`\n-Since a map has a key and value, where key is a conflict parameter, enqueue generates a non-conflicting Long as the key and inserts the Entry as a value into a CorfuTable. The generated Long is packed into the LSB of a UUID and returned to the caller as a CorfuRecordId. Note that this Id does not carry ordering since the operation could be part of a transaction that has not committed yet.\n+Since a map has a key and value, where key is a conflict parameter, enqueue generates a non-conflicting Long as the key and inserts the Entry as a value into a CorfuTable. If enqueue() is wrapped in a Corfu transaction this CorfuRecordId returned will capture the transaction's commit address and together with the entryId define the global cluster-wide order of the entry in the Queue.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07d5cfadf63c214289170db060a7c512eabfa894"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NjI3Mg==", "bodyText": "done. thanks", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404246272", "createdAt": "2020-04-06T16:59:17Z", "author": {"login": "hisundar"}, "path": "docs/corfu-queue/corfu-queue-design.md", "diffHunk": "@@ -1,12 +1,11 @@\n The class `CorfuQueue` implements a persisted queue over the abstraction of a CorfuTable. CorfuTable that only uses a HashMap<> to represent the materialized view of a distributed map does not carry a notion of ordering natively. However when implemented over the abstraction of a distributed shared log, the elements added to the map do, in fact, have an ordering imposed by their append or transaction commit operations into the global log. The class `CorfuQueue` attempts to expose this inherent ordering as a persisted Queue with three simple apis:\n \n ###  1. `CorfuRecordId enqueue(E)`\n-Since a map has a key and value, where key is a conflict parameter, enqueue generates a non-conflicting Long as the key and inserts the Entry as a value into a CorfuTable. The generated Long is packed into the LSB of a UUID and returned to the caller as a CorfuRecordId. Note that this Id does not carry ordering since the operation could be part of a transaction that has not committed yet.\n+Since a map has a key and value, where key is a conflict parameter, enqueue generates a non-conflicting Long as the key and inserts the Entry as a value into a CorfuTable. If enqueue() is wrapped in a Corfu transaction this CorfuRecordId returned will capture the transaction's commit address and together with the entryId define the global cluster-wide order of the entry in the Queue.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI0NTU0Mw=="}, "originalCommit": {"oid": "07d5cfadf63c214289170db060a7c512eabfa894"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTYxMTUyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1ODo0NlrOGBs7pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxNDoxNFrOGB0ULQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNzkyNQ==", "bodyText": "Complete Javadoc", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404437925", "createdAt": "2020-04-06T22:58:46Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -77,60 +77,58 @@ public int size() {\n     /**\n      * Each entry in the Queue is tagged with a unique Id. Internally this Id is a long.\n      * However, once we get all the entries out via entryList() api, these Ids are prefixed\n-     * with their snapshot+index id (also a long) which represents a global comparable ordering.\n+     * with their transactional sequence numbers which represents order if enqueue()\n+     * were in wrapped a corfu transaction.\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     @EqualsAndHashCode\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n         @Setter\n         @Getter\n-        private long epoch;\n-\n-        @Setter\n-        @Getter\n-        private long sequence;\n+        private long txSequence;\n \n         @Getter\n         private long entryId;\n \n-        public CorfuRecordId(long epoch, long sequence, long entryId) {\n-            this.epoch = epoch;\n-            this.sequence = sequence;\n+        public CorfuRecordId(long txSequence, long entryId) {\n+            this.txSequence = txSequence;\n             this.entryId = entryId;\n         }\n \n-        final static int BITS_FOR_SEQUENCE = 40;\n-        public CorfuRecordId(UUID from) {\n-            this.epoch = from.getMostSignificantBits()>>BITS_FOR_SEQUENCE;\n-            this.sequence = from.getMostSignificantBits()&((1L<<BITS_FOR_SEQUENCE) - 1);\n-            this.entryId = from.getLeastSignificantBits();\n+        /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52c1207236b2b16bbb4989f8258dd38d7a0acd6e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1ODg5Mw==", "bodyText": "done. thanks", "url": "https://github.com/CorfuDB/CorfuDB/pull/2501#discussion_r404558893", "createdAt": "2020-04-07T06:14:14Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -77,60 +77,58 @@ public int size() {\n     /**\n      * Each entry in the Queue is tagged with a unique Id. Internally this Id is a long.\n      * However, once we get all the entries out via entryList() api, these Ids are prefixed\n-     * with their snapshot+index id (also a long) which represents a global comparable ordering.\n+     * with their transactional sequence numbers which represents order if enqueue()\n+     * were in wrapped a corfu transaction.\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     @EqualsAndHashCode\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n         @Setter\n         @Getter\n-        private long epoch;\n-\n-        @Setter\n-        @Getter\n-        private long sequence;\n+        private long txSequence;\n \n         @Getter\n         private long entryId;\n \n-        public CorfuRecordId(long epoch, long sequence, long entryId) {\n-            this.epoch = epoch;\n-            this.sequence = sequence;\n+        public CorfuRecordId(long txSequence, long entryId) {\n+            this.txSequence = txSequence;\n             this.entryId = entryId;\n         }\n \n-        final static int BITS_FOR_SEQUENCE = 40;\n-        public CorfuRecordId(UUID from) {\n-            this.epoch = from.getMostSignificantBits()>>BITS_FOR_SEQUENCE;\n-            this.sequence = from.getMostSignificantBits()&((1L<<BITS_FOR_SEQUENCE) - 1);\n-            this.entryId = from.getLeastSignificantBits();\n+        /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNzkyNQ=="}, "originalCommit": {"oid": "52c1207236b2b16bbb4989f8258dd38d7a0acd6e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1964, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}