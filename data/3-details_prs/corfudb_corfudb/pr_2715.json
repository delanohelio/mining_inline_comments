{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NzMyMjAx", "number": 2715, "title": "Sequencer Reconfiguration Corruption Fixes", "bodyText": "Overview\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch.\nWhy should this be merged: Fixes data loss/inconsistency/stability issues\nRelated issue(s) (if applicable): #2678\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-08-14T02:33:05Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715", "merged": true, "mergeCommit": {"oid": "4530118dc80fee2c3a896910bb4fc88ecf6775d3"}, "closed": true, "closedAt": "2020-08-15T20:12:24Z", "author": {"login": "Maithem"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-rTqhgBqjM2NTQ1MzA4NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_DQWUgBqjM2NTgyNzEwMzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7867d08b988e90eef2d92a704722b9b9c35d85de", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7867d08b988e90eef2d92a704722b9b9c35d85de", "committedDate": "2020-08-14T02:27:41Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}, "afterCommit": {"oid": "b5d853d4f702b395f9d5c475d15abb7d0810be22", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b5d853d4f702b395f9d5c475d15abb7d0810be22", "committedDate": "2020-08-14T02:36:26Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5d853d4f702b395f9d5c475d15abb7d0810be22", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b5d853d4f702b395f9d5c475d15abb7d0810be22", "committedDate": "2020-08-14T02:36:26Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}, "afterCommit": {"oid": "3a21c269f66aeb93a3e21450e4aae99483490794", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3a21c269f66aeb93a3e21450e4aae99483490794", "committedDate": "2020-08-14T07:00:50Z", "message": "fix tail query epoch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a21c269f66aeb93a3e21450e4aae99483490794", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3a21c269f66aeb93a3e21450e4aae99483490794", "committedDate": "2020-08-14T07:00:50Z", "message": "fix tail query epoch"}, "afterCommit": {"oid": "49b5c6050b2943ce1ac5cfd24c78bfc0319e5fbe", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/49b5c6050b2943ce1ac5cfd24c78bfc0319e5fbe", "committedDate": "2020-08-14T07:17:22Z", "message": "fix tail query epoch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49b5c6050b2943ce1ac5cfd24c78bfc0319e5fbe", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/49b5c6050b2943ce1ac5cfd24c78bfc0319e5fbe", "committedDate": "2020-08-14T07:17:22Z", "message": "fix tail query epoch"}, "afterCommit": {"oid": "7e377a88863233e38efc20a7fb5cbf2f1446279a", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7e377a88863233e38efc20a7fb5cbf2f1446279a", "committedDate": "2020-08-14T07:24:47Z", "message": "fix tail query epoch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e377a88863233e38efc20a7fb5cbf2f1446279a", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7e377a88863233e38efc20a7fb5cbf2f1446279a", "committedDate": "2020-08-14T07:24:47Z", "message": "fix tail query epoch"}, "afterCommit": {"oid": "4d113d9a9f9b8205ab3d17be51464a4432968710", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4d113d9a9f9b8205ab3d17be51464a4432968710", "committedDate": "2020-08-14T21:57:48Z", "message": "fix tail query epoch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d113d9a9f9b8205ab3d17be51464a4432968710", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4d113d9a9f9b8205ab3d17be51464a4432968710", "committedDate": "2020-08-14T21:57:48Z", "message": "fix tail query epoch"}, "afterCommit": {"oid": "be0c1a1271fa3fbd23aea6771b03b0545e18b710", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/be0c1a1271fa3fbd23aea6771b03b0545e18b710", "committedDate": "2020-08-14T22:20:23Z", "message": "Added StreamAddressSpace Unit Tesst"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ff11ef0b2aa2d4d7ef8f9536b89726124accc7f", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1ff11ef0b2aa2d4d7ef8f9536b89726124accc7f", "committedDate": "2020-08-14T23:51:53Z", "message": "more unit tests"}, "afterCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5338e61051943a191bf15644f437fa5a9145ca8a", "committedDate": "2020-08-15T00:28:24Z", "message": "more unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMwNjky", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#pullrequestreview-467930692", "createdAt": "2020-08-15T00:29:16Z", "commit": {"oid": "1ff11ef0b2aa2d4d7ef8f9536b89726124accc7f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoyOTo0M1rOHBGVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDo1Nzo0OFrOHBGiog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNDMzMg==", "bodyText": "This can be moved to the first line.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470914332", "createdAt": "2020-08-15T00:29:43Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -205,99 +229,78 @@ public static void updateCommittedTail(RuntimeLayout runtimeLayout,\n     }\n \n     /**\n-     * Get global log tail.\n+     * Find the chain's head node of each segment\n+     * @param layout layout to search in\n+     * @return returns a set of nodes the represent the first node in all segments\n+     */\n+    private static Set<String> getChainHeadFromAllSegments(Layout layout) {\n+        List<Layout.LayoutSegment> segments = layout.getSegments();\n+        validateSegments(layout.getSegments());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTI1Mg==", "bodyText": "AtomicLong is cleaner than array.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470915252", "createdAt": "2020-08-15T00:36:26Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -205,99 +229,78 @@ public static void updateCommittedTail(RuntimeLayout runtimeLayout,\n     }\n \n     /**\n-     * Get global log tail.\n+     * Find the chain's head node of each segment\n+     * @param layout layout to search in\n+     * @return returns a set of nodes the represent the first node in all segments\n+     */\n+    private static Set<String> getChainHeadFromAllSegments(Layout layout) {\n+        List<Layout.LayoutSegment> segments = layout.getSegments();\n+        validateSegments(layout.getSegments());\n+        return segments.stream()\n+                .map(Layout.LayoutSegment::getFirstStripe)\n+                .map(Layout.LayoutStripe::getLogServers)\n+                .map(strip -> strip.get(0))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Compute the max tail across the first node of each segment in the layout\n+     * on the same epoch.\n      *\n      * @param runtimeLayout current RuntimeLayout\n      * @return Log global tail\n      */\n     public static long getLogTail(RuntimeLayout runtimeLayout) {\n-        long globalLogTail = Address.NON_EXIST;\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                TailsResponse response = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogTail());\n-                globalLogTail = Long.max(globalLogTail, response.getLogTail());\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        long globalLogTail = segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getLogTail())\n+                .map(CFUtils::getUninterruptibly)\n+                .mapToLong(TailsResponse::getLogTail)\n+                .max().orElseThrow(NoSuchElementException::new);\n \n+        log.debug(\"getLogTail: nodes selected {} global tail {}\",\n+                segmentsHeadNodes,globalLogTail);\n         return globalLogTail;\n     }\n \n     /**\n      * Fetches the max global log tail and all stream tails from the log unit cluster. This depends on the mode of\n      * replication being used.\n-     * CHAIN: Block on fetch of global log tail from the head log unit in every stripe.\n-     * QUORUM: Block on fetch of global log tail from a majority in every stripe.\n-     *\n+     * CHAIN: Block on fetch of global log tail from the head log unit in every segment.*\n      * @param runtimeLayout current RuntimeLayout\n-     * @return The max global log tail obtained from the log unit servers.\n+     * @return The max global log tail and max global tails across all segments\n      */\n     public static TailsResponse getAllTails(RuntimeLayout runtimeLayout) {\n-        Set<TailsResponse> luResponses = new HashSet<>();\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n \n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the tail of the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                TailsResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getAllTails());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n+        long[] globalTail = {Address.NON_EXIST};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNTI3NQ==", "bodyText": "AtomicLong is cleaner than array.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470915275", "createdAt": "2020-08-15T00:36:33Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -307,34 +310,27 @@ static TailsResponse aggregateLogUnitTails(Set<TailsResponse> responses) {\n      * @return response with all streams addresses and global log tail.\n      */\n     public static StreamsAddressResponse getLogAddressSpace(RuntimeLayout runtimeLayout) {\n-        Set<StreamsAddressResponse> luResponses = new HashSet<>();\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                StreamsAddressResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogAddressSpace());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        return aggregateLogAddressSpace(luResponses);\n-    }\n-\n-    static StreamsAddressResponse aggregateLogAddressSpace(Set<StreamsAddressResponse> responses) {\n-        Map<UUID, StreamAddressSpace> streamAddressSpace = new HashMap<>();\n-        long logTail = Address.NON_ADDRESS;\n-\n-        for (StreamsAddressResponse res : responses) {\n-            logTail = Math.max(logTail, res.getLogTail());\n-            streamAddressSpace = aggregateStreamAddressMap(res.getAddressMap(), streamAddressSpace);\n-        }\n-        return new StreamsAddressResponse(logTail, streamAddressSpace);\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        long[] globalTail = {Address.NON_EXIST};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNzQzNw==", "bodyText": "Because of java stream's lazy evaluation property, if CFUtils.get is put in map(), then the futures are actually executed sequentially. We need to parallelize it to get better performance, by gathering all the futures first and then wait on them, similar to this: https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/util/Utils.java#L152-L162", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470917437", "createdAt": "2020-08-15T00:54:45Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -205,99 +229,78 @@ public static void updateCommittedTail(RuntimeLayout runtimeLayout,\n     }\n \n     /**\n-     * Get global log tail.\n+     * Find the chain's head node of each segment\n+     * @param layout layout to search in\n+     * @return returns a set of nodes the represent the first node in all segments\n+     */\n+    private static Set<String> getChainHeadFromAllSegments(Layout layout) {\n+        List<Layout.LayoutSegment> segments = layout.getSegments();\n+        validateSegments(layout.getSegments());\n+        return segments.stream()\n+                .map(Layout.LayoutSegment::getFirstStripe)\n+                .map(Layout.LayoutStripe::getLogServers)\n+                .map(strip -> strip.get(0))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Compute the max tail across the first node of each segment in the layout\n+     * on the same epoch.\n      *\n      * @param runtimeLayout current RuntimeLayout\n      * @return Log global tail\n      */\n     public static long getLogTail(RuntimeLayout runtimeLayout) {\n-        long globalLogTail = Address.NON_EXIST;\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                TailsResponse response = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogTail());\n-                globalLogTail = Long.max(globalLogTail, response.getLogTail());\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        long globalLogTail = segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getLogTail())\n+                .map(CFUtils::getUninterruptibly)\n+                .mapToLong(TailsResponse::getLogTail)\n+                .max().orElseThrow(NoSuchElementException::new);\n \n+        log.debug(\"getLogTail: nodes selected {} global tail {}\",\n+                segmentsHeadNodes,globalLogTail);\n         return globalLogTail;\n     }\n \n     /**\n      * Fetches the max global log tail and all stream tails from the log unit cluster. This depends on the mode of\n      * replication being used.\n-     * CHAIN: Block on fetch of global log tail from the head log unit in every stripe.\n-     * QUORUM: Block on fetch of global log tail from a majority in every stripe.\n-     *\n+     * CHAIN: Block on fetch of global log tail from the head log unit in every segment.*\n      * @param runtimeLayout current RuntimeLayout\n-     * @return The max global log tail obtained from the log unit servers.\n+     * @return The max global log tail and max global tails across all segments\n      */\n     public static TailsResponse getAllTails(RuntimeLayout runtimeLayout) {\n-        Set<TailsResponse> luResponses = new HashSet<>();\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n \n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the tail of the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                TailsResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getAllTails());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n+        long[] globalTail = {Address.NON_EXIST};\n+        final Map<UUID, Long> streamTails = new HashMap<>();\n \n-        return aggregateLogUnitTails(luResponses);\n-    }\n-\n-    /**\n-     * Given a set of request tails, we aggregate them and maintain\n-     * the greatest address per stream and the greatest tail over\n-     * all responses.\n-     * @param responses a set of tail responses\n-     * @return An max-aggregation of all tails\n-     */\n-    static TailsResponse aggregateLogUnitTails(Set<TailsResponse> responses) {\n-        long globalTail = Address.NON_ADDRESS;\n-        Map<UUID, Long> globalStreamTails = new HashMap<>();\n-\n-        for (TailsResponse res : responses) {\n-            globalTail = Math.max(globalTail, res.getLogTail());\n-\n-            for (Map.Entry<UUID, Long> stream : res.getStreamTails().entrySet()) {\n-                long streamTail = globalStreamTails.getOrDefault(stream.getKey(), Address.NON_ADDRESS);\n-                globalStreamTails.put(stream.getKey(), Math.max(streamTail, stream.getValue()));\n-            }\n-        }\n-        // All epochs should be equal as all the tails are queried using a single runtime layout.\n-        return new TailsResponse(globalTail, globalStreamTails);\n+        segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getAllTails())\n+                .map(CFUtils::getUninterruptibly)\n+                .forEach(resp -> {\n+                    // All responses should be computed on the same epoch\n+                    checkArgument(resp.getEpoch() == runtimeLayout.getLayout().getEpoch());\n+                    // Find the global max global tail and stream tails across all responses\n+                    globalTail[0] = Long.max(resp.getLogTail(), globalTail[0]);\n+                    resp.getStreamTails().forEach((k, v) -> streamTails.merge(k, v, Long::max));\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNzc5NA==", "bodyText": "Same here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470917794", "createdAt": "2020-08-15T00:57:48Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -307,34 +310,27 @@ static TailsResponse aggregateLogUnitTails(Set<TailsResponse> responses) {\n      * @return response with all streams addresses and global log tail.\n      */\n     public static StreamsAddressResponse getLogAddressSpace(RuntimeLayout runtimeLayout) {\n-        Set<StreamsAddressResponse> luResponses = new HashSet<>();\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                StreamsAddressResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogAddressSpace());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        return aggregateLogAddressSpace(luResponses);\n-    }\n-\n-    static StreamsAddressResponse aggregateLogAddressSpace(Set<StreamsAddressResponse> responses) {\n-        Map<UUID, StreamAddressSpace> streamAddressSpace = new HashMap<>();\n-        long logTail = Address.NON_ADDRESS;\n-\n-        for (StreamsAddressResponse res : responses) {\n-            logTail = Math.max(logTail, res.getLogTail());\n-            streamAddressSpace = aggregateStreamAddressMap(res.getAddressMap(), streamAddressSpace);\n-        }\n-        return new StreamsAddressResponse(logTail, streamAddressSpace);\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        long[] globalTail = {Address.NON_EXIST};\n+        final Map<UUID, StreamAddressSpace> streamsAddressSpace = new HashMap<>();\n+        segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getLogAddressSpace())\n+                .map(CFUtils::getUninterruptibly)\n+                .forEach(resp -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a"}, "originalPosition": 273}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5338e61051943a191bf15644f437fa5a9145ca8a", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5338e61051943a191bf15644f437fa5a9145ca8a", "committedDate": "2020-08-15T00:28:24Z", "message": "more unit tests"}, "afterCommit": {"oid": "26238bfd82ddd6f128a9b55bc64a2aa7565999c1", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/26238bfd82ddd6f128a9b55bc64a2aa7565999c1", "committedDate": "2020-08-15T01:03:50Z", "message": "more unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTMwNDM0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#pullrequestreview-467930434", "createdAt": "2020-08-15T00:27:06Z", "commit": {"oid": "1ff11ef0b2aa2d4d7ef8f9536b89726124accc7f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMDoyNzowNlrOHBGTvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTowODoxMlrOHBGnXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxMzk4MA==", "bodyText": "*returns a", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470913980", "createdAt": "2020-08-15T00:27:06Z", "author": {"login": "PavelZaytsev"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/StreamAddressSpace.java", "diffHunk": "@@ -41,10 +41,36 @@ public StreamAddressSpace(long trimMark, Roaring64NavigableMap addressMap) {\n         this.addressMap = addressMap;\n     }\n \n+    public StreamAddressSpace() {\n+        this.addressMap = Roaring64NavigableMap.bitmapOf();\n+        this.trimMark = Address.NON_ADDRESS;\n+    }\n+\n     public Roaring64NavigableMap getAddressMap() {\n         return addressMap;\n     }\n \n+    /**\n+     * Merges b into a and returns b as the final result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff11ef0b2aa2d4d7ef8f9536b89726124accc7f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxOTAwNw==", "bodyText": "Why did we comment this check out?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470919007", "createdAt": "2020-08-15T01:08:12Z", "author": {"login": "PavelZaytsev"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -307,34 +313,27 @@ static TailsResponse aggregateLogUnitTails(Set<TailsResponse> responses) {\n      * @return response with all streams addresses and global log tail.\n      */\n     public static StreamsAddressResponse getLogAddressSpace(RuntimeLayout runtimeLayout) {\n-        Set<StreamsAddressResponse> luResponses = new HashSet<>();\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                StreamsAddressResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogAddressSpace());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        return aggregateLogAddressSpace(luResponses);\n-    }\n-\n-    static StreamsAddressResponse aggregateLogAddressSpace(Set<StreamsAddressResponse> responses) {\n-        Map<UUID, StreamAddressSpace> streamAddressSpace = new HashMap<>();\n-        long logTail = Address.NON_ADDRESS;\n-\n-        for (StreamsAddressResponse res : responses) {\n-            logTail = Math.max(logTail, res.getLogTail());\n-            streamAddressSpace = aggregateStreamAddressMap(res.getAddressMap(), streamAddressSpace);\n-        }\n-        return new StreamsAddressResponse(logTail, streamAddressSpace);\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        long[] globalTail = {Address.NON_EXIST};\n+        final Map<UUID, StreamAddressSpace> streamsAddressSpace = new HashMap<>();\n+        segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getLogAddressSpace())\n+                .map(CFUtils::getUninterruptibly)\n+                .forEach(resp -> {\n+                    // All responses should be computed on the same epoch\n+                    //checkArgument(resp.getEpoch() == runtimeLayout.getLayout().getEpoch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26238bfd82ddd6f128a9b55bc64a2aa7565999c1"}, "originalPosition": 279}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26238bfd82ddd6f128a9b55bc64a2aa7565999c1", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/26238bfd82ddd6f128a9b55bc64a2aa7565999c1", "committedDate": "2020-08-15T01:03:50Z", "message": "more unit tests"}, "afterCommit": {"oid": "2645860890a538f7c45c6082600f184c7d9293d8", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2645860890a538f7c45c6082600f184c7d9293d8", "committedDate": "2020-08-15T01:08:59Z", "message": "more unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2645860890a538f7c45c6082600f184c7d9293d8", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2645860890a538f7c45c6082600f184c7d9293d8", "committedDate": "2020-08-15T01:08:59Z", "message": "more unit tests"}, "afterCommit": {"oid": "2a3e17c4d7f5486342c04902b746806621d35230", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2a3e17c4d7f5486342c04902b746806621d35230", "committedDate": "2020-08-15T01:26:10Z", "message": "more unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a3e17c4d7f5486342c04902b746806621d35230", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2a3e17c4d7f5486342c04902b746806621d35230", "committedDate": "2020-08-15T01:26:10Z", "message": "more unit tests"}, "afterCommit": {"oid": "c1beca7da7d7966b0b9c055b93a2e37337298199", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c1beca7da7d7966b0b9c055b93a2e37337298199", "committedDate": "2020-08-15T01:51:35Z", "message": "addressed comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1beca7da7d7966b0b9c055b93a2e37337298199", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c1beca7da7d7966b0b9c055b93a2e37337298199", "committedDate": "2020-08-15T01:51:35Z", "message": "addressed comments"}, "afterCommit": {"oid": "3ab3138e0c61e764c107b7e354a731715c7dd6a5", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3ab3138e0c61e764c107b7e354a731715c7dd6a5", "committedDate": "2020-08-15T01:53:23Z", "message": "addressed comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ab3138e0c61e764c107b7e354a731715c7dd6a5", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3ab3138e0c61e764c107b7e354a731715c7dd6a5", "committedDate": "2020-08-15T01:53:23Z", "message": "addressed comments"}, "afterCommit": {"oid": "75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f", "committedDate": "2020-08-15T01:58:41Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM5MDcw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#pullrequestreview-467939070", "createdAt": "2020-08-15T02:01:34Z", "commit": {"oid": "75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjowMTozNFrOHBG8ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMjowMTozNFrOHBG8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyNDM5NA==", "bodyText": "This will throw IllegalArgumentException, but should be throw WrongEpochException to be more clear?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#discussion_r470924394", "createdAt": "2020-08-15T02:01:34Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/util/Utils.java", "diffHunk": "@@ -307,34 +319,29 @@ static TailsResponse aggregateLogUnitTails(Set<TailsResponse> responses) {\n      * @return response with all streams addresses and global log tail.\n      */\n     public static StreamsAddressResponse getLogAddressSpace(RuntimeLayout runtimeLayout) {\n-        Set<StreamsAddressResponse> luResponses = new HashSet<>();\n-\n-        Layout.LayoutSegment segment = runtimeLayout.getLayout().getLatestSegment();\n-\n-        // Query the head log unit in every stripe.\n-        if (segment.getReplicationMode() == Layout.ReplicationMode.CHAIN_REPLICATION) {\n-            for (Layout.LayoutStripe stripe : segment.getStripes()) {\n-\n-                StreamsAddressResponse res = CFUtils.getUninterruptibly(runtimeLayout\n-                                .getLogUnitClient(stripe.getLogServers().get(DEFAULT_LOGUNIT))\n-                                .getLogAddressSpace());\n-                luResponses.add(res);\n-            }\n-        } else if (segment.getReplicationMode() == Layout.ReplicationMode.QUORUM_REPLICATION) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        return aggregateLogAddressSpace(luResponses);\n-    }\n-\n-    static StreamsAddressResponse aggregateLogAddressSpace(Set<StreamsAddressResponse> responses) {\n-        Map<UUID, StreamAddressSpace> streamAddressSpace = new HashMap<>();\n-        long logTail = Address.NON_ADDRESS;\n+        // Since a node can exist as a head for multiple segments we need to a set to\n+        // coalesce the candidates to unique nodes only\n+        Set<String> segmentsHeadNodes = getChainHeadFromAllSegments(runtimeLayout.getLayout());\n+        AtomicLong globalTail = new AtomicLong(Address.NON_EXIST);\n+        final Map<UUID, StreamAddressSpace> streamsAddressSpace = new HashMap<>();\n+        List<CompletableFuture<StreamsAddressResponse>> cfs = segmentsHeadNodes.stream()\n+                .map(node -> runtimeLayout\n+                        .getLogUnitClient(node)\n+                        .getLogAddressSpace())\n+                .collect(Collectors.toList());\n \n-        for (StreamsAddressResponse res : responses) {\n-            logTail = Math.max(logTail, res.getLogTail());\n-            streamAddressSpace = aggregateStreamAddressMap(res.getAddressMap(), streamAddressSpace);\n-        }\n-        return new StreamsAddressResponse(logTail, streamAddressSpace);\n+        cfs.stream().map(CFUtils::getUninterruptibly)\n+                .forEach(resp -> {\n+                    // All responses should be computed on the same epoch\n+                    checkArgument(resp.getEpoch() == runtimeLayout.getLayout().getEpoch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f"}, "originalPosition": 301}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM5MDc4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2715#pullrequestreview-467939078", "createdAt": "2020-08-15T02:01:38Z", "commit": {"oid": "75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/75cd7e7f9e5a18858cc4c4649a6497eb477f4e4f", "committedDate": "2020-08-15T01:58:41Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}, "afterCommit": {"oid": "0a26b937b58a948d3f55720f276fac260d6b1617", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0a26b937b58a948d3f55720f276fac260d6b1617", "committedDate": "2020-08-15T03:59:14Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a26b937b58a948d3f55720f276fac260d6b1617", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0a26b937b58a948d3f55720f276fac260d6b1617", "committedDate": "2020-08-15T03:59:14Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}, "afterCommit": {"oid": "ec0f37479fac449abba32d92a14ab94e34798cff", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ec0f37479fac449abba32d92a14ab94e34798cff", "committedDate": "2020-08-15T06:12:33Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f2ba44ec63101d5eebae62bcf7dbeca22a1f6e9", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2f2ba44ec63101d5eebae62bcf7dbeca22a1f6e9", "committedDate": "2020-08-15T06:30:36Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec0f37479fac449abba32d92a14ab94e34798cff", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ec0f37479fac449abba32d92a14ab94e34798cff", "committedDate": "2020-08-15T06:12:33Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}, "afterCommit": {"oid": "2f2ba44ec63101d5eebae62bcf7dbeca22a1f6e9", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2f2ba44ec63101d5eebae62bcf7dbeca22a1f6e9", "committedDate": "2020-08-15T06:30:36Z", "message": "Sequencer Reconfiguration Corruption Fixes\n\nPrior to this patch, the global tail, stream tails and stream bit\nsets were retrieved and computed from the first node in the last\nsegment. This assumption is incorrect because it can be a node\nthat is being rebuilt (via state transfer), or in some edge cases\nit is not possible to compute the sequencer state from a single node.\nThis leads to the possibility of computing a view of the log that\nis incomplete during reconfiguration of the sequencer. In\nconsequence, leading to inconsistent reads, data loss and\ncluster instability.\n\nThis patch introduces multiple fixes to compute the sequencer's\nstate from all the segments (possibly aggregating views from different\nnodes) and forcing the view computation and the reconfiguration to\nhappen on the same epoch."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4421, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}