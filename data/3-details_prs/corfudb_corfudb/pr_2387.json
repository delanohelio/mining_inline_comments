{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzM2Njc5", "number": 2387, "title": "A workaround to hole in tail issue.", "bodyText": "Overview\nDescription:\nWhen a stream's tail is a hole, VLO will try to sync up to tail but never add hole to its resolved queue, which means each sync will query sequencer again.\n@lixinchengdu and I bring a workaround that adds hole to resolved queue to avoid re-sync.\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-02-10T20:27:10Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387", "merged": true, "mergeCommit": {"oid": "33829162a94ccb4a9058cc5e8925eec6acf4df3b"}, "closed": true, "closedAt": "2020-04-03T20:32:11Z", "author": {"login": "zhangn49"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDDklmAFqTM1NjI1NzI3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTyNQ1gH2gAyMzczMzM2Njc5OjM2NWM1NGZlYmM4MjlhYzIzOWZmYzBjNTE4OTJmOTVkODczNjRiMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjU3Mjc4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-356257278", "createdAt": "2020-02-10T20:57:32Z", "commit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo1NzozMlrOFn1TNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo1NzozMlrOFn1TNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMjA1Mg==", "bodyText": "I think its cleaner to just have an SMR that is a whole which is always undoable. When applyUndoRecordUnsafe is called, it just results in a no-op.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r377312052", "createdAt": "2020-02-10T20:57:32Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -629,27 +631,40 @@ protected void rollbackStreamUnsafe(ISMRStream stream, long rollbackVersion) {\n             return;\n         }\n \n-        List<SMREntry> entries = stream.current();\n+        boolean isHole = false;\n+        List<SMREntry> entries = null;\n+        try {\n+            entries = stream.current();\n+        } catch (HoleInStreamException ex) {\n+            isHole = true;\n+        }\n \n-        while (!entries.isEmpty()) {\n-            if (entries.stream().allMatch(SMREntry::isUndoable)) {\n-                // start from the end, process one at a time\n-                ListIterator<SMREntry> it = entries.listIterator(entries.size());\n-                while (it.hasPrevious()) {\n-                    applyUndoRecordUnsafe(it.previous(), stream);\n-                }\n-            } else {\n-                Optional<SMREntry> entry = entries.stream().findFirst();\n-                if (log.isTraceEnabled()) {\n-                    log.trace(\"rollbackStreamUnsafe: one or more stream entries in address @{} are not undoable. \" +\n-                                    \"Undoable entries: {}/{}\", stream.pos(),\n-                            (int) entries.stream().filter(SMREntry::isUndoable).count(),\n-                            entries.size());\n+        while (isHole || !entries.isEmpty()) {\n+            if (!isHole) {\n+                if (entries.stream().allMatch(SMREntry::isUndoable)) {\n+                    // start from the end, process one at a time\n+                    ListIterator<SMREntry> it = entries.listIterator(entries.size());\n+                    while (it.hasPrevious()) {\n+                        applyUndoRecordUnsafe(it.previous(), stream);\n+                    }\n+                } else {\n+                    Optional<SMREntry> entry = entries.stream().findFirst();\n+                    if (log.isTraceEnabled()) {\n+                        log.trace(\"rollbackStreamUnsafe: one or more stream entries in address @{} are not undoable. \" +\n+                                        \"Undoable entries: {}/{}\", stream.pos(),\n+                                (int) entries.stream().filter(SMREntry::isUndoable).count(),\n+                                entries.size());\n+                    }\n+                    throw new NoRollbackException(entry, stream.pos(), rollbackVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjU4NTQ1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-356258545", "createdAt": "2020-02-10T20:59:24Z", "commit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDUxMTUw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-357051150", "createdAt": "2020-02-11T22:41:50Z", "commit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MTo1MFrOFob19g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo0MTo1MFrOFob19g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzU0Mg==", "bodyText": "Rather than signaling this condition via an exception, maybe a better approach would be to have a globally unique instance that signals a hole.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r377943542", "createdAt": "2020-02-11T22:41:50Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/StreamViewSMRAdapter.java", "diffHunk": "@@ -96,6 +97,10 @@ public void gc(long trimMark) {\n      */\n     public List<SMREntry> current() {\n         ILogData data = streamView.current();\n+        if (data != null && data.isHole()) {\n+            throw new HoleInStreamException();\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a89476ad8648ec5e5ec05f5c4b7ac55e10d9e275", "committedDate": "2020-02-10T19:43:39Z", "message": "fix hole in tail"}, "afterCommit": {"oid": "f7d065b87a2ce039f0c85873df18d303bd2cf652", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f7d065b87a2ce039f0c85873df18d303bd2cf652", "committedDate": "2020-02-19T01:30:32Z", "message": "fix hole in tail"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7d065b87a2ce039f0c85873df18d303bd2cf652", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f7d065b87a2ce039f0c85873df18d303bd2cf652", "committedDate": "2020-02-19T01:30:32Z", "message": "fix hole in tail"}, "afterCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/91b14a7ae2d3034b2b372303cdbb241be08bdbdf", "committedDate": "2020-02-19T19:12:15Z", "message": "fix hole in tail"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTI1MDYx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-361525061", "createdAt": "2020-02-19T23:57:27Z", "commit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo1NzoyN1rOFr8ATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo1NzoyN1rOFr8ATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNjIwNA==", "bodyText": "Can you move this to the caller? if its a no-op, then you skip calling applyUpdateUnsafe", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r381616204", "createdAt": "2020-02-19T23:57:27Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -571,6 +577,10 @@ private Object applyUpdateUnsafe(SMREntry entry, long timestamp) {\n                 Address.isAddress(entry.getGlobalAddress()) ? entry.getGlobalAddress() : \"OPT\",\n                 entry.getSMRArguments());\n \n+        if (SMREntry.isNOP(entry)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTI4NDIw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-361528420", "createdAt": "2020-02-20T00:06:58Z", "commit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDowNjo1OFrOFr8LUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDowNjo1OFrOFr8LUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxOTAyNw==", "bodyText": "This layer only understands ILogData can you move this conversion to StreamViewSMRAdapter which actually maps ILogData to SMREntry", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r381619027", "createdAt": "2020-02-20T00:06:58Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -84,11 +86,16 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                 // to be serviced immediately, rather than reading one entry at a time.\n                 ld = read(currentRead, queue);\n \n-                if (queue == getCurrentContext().readQueue && ld != null) {\n+                if (queue == getCurrentContext().readQueue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.getType() == DataType.HOLE || (ld.containsStream(this.id) &&\n+                            ld.getType() == DataType.DATA)) {\n+                        // Convert hole to NOP\n+                        if (ld.isHole()) {\n+                            ld = new LogData(DataType.DATA, SMREntry.getNOP(), ld.getMetadataMap());\n+                        }\n                         addToResolvedQueue(getCurrentContext(), currentRead);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTI4Nzgy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-361528782", "createdAt": "2020-02-20T00:08:00Z", "commit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDowODowMFrOFr8Miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDowODowMFrOFr8Miw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxOTMzOQ==", "bodyText": "Can you read back the address and make sure its a hole?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r381619339", "createdAt": "2020-02-20T00:08:00Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuTableTest.java", "diffHunk": "@@ -245,4 +254,46 @@ public void snapshotInvariant() {\n         final Stream<Map.Entry<Integer, Integer>> result = map.entryStream();\n         result.forEach(e -> map.put(new Random().nextInt(), 0));\n     }\n+\n+    @Test\n+    @SuppressWarnings({\"unchecked\", \"checkstyle:magicnumber\"})\n+    public void canHandleHoleInTail() {\n+        UUID streamID = UUID.randomUUID();\n+\n+        CorfuTable<String, String> corfuTable = getDefaultRuntime()\n+                .getObjectsView()\n+                .build()\n+                .setTypeToken(new TypeToken<CorfuTable<String, String>>() {})\n+                .setStreamID(streamID)\n+                .open();\n+\n+        corfuTable.put(\"k1\", \"dog fox cat\");\n+        corfuTable.put(\"k2\", \"dog bat\");\n+        corfuTable.put(\"k3\", \"fox\");\n+\n+        // create a hole\n+        TokenResponse tokenResponse =  getDefaultRuntime()\n+                .getSequencerView()\n+                .next(streamID);\n+\n+        Token token = tokenResponse.getToken();\n+\n+        getDefaultRuntime().getAddressSpaceView()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTI5NzE4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-361529718", "createdAt": "2020-02-20T00:10:40Z", "commit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxMDo0MFrOFr8Ppg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMDoxMDo0MFrOFr8Ppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMDEzNA==", "bodyText": "Yea can get rid of the NOP notion by propagating the holes to the Stream layer but then filtering them out just before consumption in the StreamViewSMRAdapter", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r381620134", "createdAt": "2020-02-20T00:10:40Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/SMREntry.java", "diffHunk": "@@ -68,6 +77,11 @@\n     @Getter\n     public transient boolean haveUpcallResult = false;\n \n+    /** If smrEntry is NOP for hole */\n+    public static boolean isNOP(SMREntry smrEntry) {\n+        return smrEntry == NOP;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91b14a7ae2d3034b2b372303cdbb241be08bdbdf", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/91b14a7ae2d3034b2b372303cdbb241be08bdbdf", "committedDate": "2020-02-19T19:12:15Z", "message": "fix hole in tail"}, "afterCommit": {"oid": "07fc9ff8376710e447f26ababd147c04fde5e7a7", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/07fc9ff8376710e447f26ababd147c04fde5e7a7", "committedDate": "2020-02-20T01:38:52Z", "message": "fix hole in tail"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDY1MjYx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-364465261", "createdAt": "2020-02-25T21:35:11Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNToxMVrOFuWCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNToxMVrOFuWCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzOTg2Mw==", "bodyText": "@lixinchengdu I think your initial argument that the object layer should always see SMREntry makes more sense. But even on master, it seems like an empty list is returned (look at line 100).\nI think returning an empty list is error-prone can hide issues, maybe we should explicitly fail if the entry is not ISMRConsumable or a DataType.DATA", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r384139863", "createdAt": "2020-02-25T21:35:11Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/StreamViewSMRAdapter.java", "diffHunk": "@@ -96,6 +96,7 @@ public void gc(long trimMark) {\n      */\n     public List<SMREntry> current() {\n         ILogData data = streamView.current();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDY2MjI3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-364466227", "createdAt": "2020-02-25T21:36:47Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNjo0N1rOFuWFWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozNjo0N1rOFuWFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MDYzNA==", "bodyText": "Sorry for going back and forth on this, but can we reintroduce the NO-OP SMR ? I think its better to be more concise and handle holes explicitly in the object layer instead of just using an empty list as a signal.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r384140634", "createdAt": "2020-02-25T21:36:47Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/StreamViewSMRAdapter.java", "diffHunk": "@@ -96,6 +96,7 @@ public void gc(long trimMark) {\n      */\n     public List<SMREntry> current() {\n         ILogData data = streamView.current();\n+\n         if (data == null\n                 || data.getType() != DataType.DATA\n                 || !(data.getPayload(runtime) instanceof ISMRConsumable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDY4MDY5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-364468069", "createdAt": "2020-02-25T21:39:46Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozOTo0NlrOFuWLAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTozOTo0NlrOFuWLAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MjA4MQ==", "bodyText": "If the SMREntry is a no-op we can skip calling applyUndo, likewise we can skip the apply on stream forward?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r384142081", "createdAt": "2020-02-25T21:39:46Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -631,7 +632,10 @@ protected void rollbackStreamUnsafe(ISMRStream stream, long rollbackVersion) {\n \n         List<SMREntry> entries = stream.current();\n \n-        while (!entries.isEmpty()) {\n+        while (stream.pos() > rollbackVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDY5MDU3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-364469057", "createdAt": "2020-02-25T21:41:15Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo0MToxNVrOFuWOMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo0MToxNVrOFuWOMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0Mjg5Nw==", "bodyText": "By the way this will break existing consumers of IStreamView (i.e. transaction pollers), because now see unexpected holes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r384142897", "createdAt": "2020-02-25T21:41:15Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -88,7 +88,8 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.getType() == DataType.HOLE || (ld.containsStream(this.id) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzYwMzM4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-366760338", "createdAt": "2020-02-29T00:52:30Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo1MjozMFrOFwGkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTowMTo1M1rOFwGpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzY0OA==", "bodyText": "Just making sure my reasoning is correct. If the current entry is a hole, the entries list is going to be empty, making entries.stream().allMatch(SMREntry::isUndoable) evaluate to true.\nAlso, since the list is empty, it.hasPrevious() will always be false.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385983648", "createdAt": "2020-02-29T00:52:30Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -631,7 +632,10 @@ protected void rollbackStreamUnsafe(ISMRStream stream, long rollbackVersion) {\n \n         List<SMREntry> entries = stream.current();\n \n-        while (!entries.isEmpty()) {\n+        while (stream.pos() > rollbackVersion) {\n+            if (Address.nonAddress(stream.pos())) {\n+                throw new NoRollbackException(stream.pos(), rollbackVersion);\n+            }\n             if (entries.stream().allMatch(SMREntry::isUndoable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mzk0Nw==", "bodyText": "You can make this a bit cleaner by calling data.isData() and data.isHole().", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385983947", "createdAt": "2020-02-29T00:54:50Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractContextStreamView.java", "diffHunk": "@@ -284,7 +284,8 @@ protected boolean doesEntryUpdateContext(final ILogData data) {\n      */\n     private void updatePointer(final ILogData data) {\n         // Update the global pointer, if it is non-checkpoint data.\n-        if (data.getType() == DataType.DATA && !data.hasCheckpointMetadata()) {\n+        if ((data.getType() == DataType.DATA || data.getType() == DataType.HOLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDI1Mw==", "bodyText": "Same comment applies here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385984253", "createdAt": "2020-02-29T00:57:12Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -88,7 +88,8 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.getType() == DataType.HOLE || (ld.containsStream(this.id) &&\n+                            ld.getType() == DataType.DATA)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NDg1OQ==", "bodyText": "They should not IMO. What entries are seen by the client is dictated by getNextEntries() and that function filters out the holes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385984859", "createdAt": "2020-02-29T01:01:53Z", "author": {"login": "vjeko"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -88,7 +88,8 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.getType() == DataType.HOLE || (ld.containsStream(this.id) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0Mjg5Nw=="}, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/09d869b36f618f4e922a97f61ce9472ffb883762", "committedDate": "2020-02-22T01:45:53Z", "message": "Fix assertThat"}, "afterCommit": {"oid": "6e14cd9eb6ac0aa9200a0aafab7d7e2a23154274", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/6e14cd9eb6ac0aa9200a0aafab7d7e2a23154274", "committedDate": "2020-02-29T01:31:09Z", "message": "Fix assertThat and address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzY0ODE4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-366764818", "createdAt": "2020-02-29T01:25:31Z", "commit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToyNTozMlrOFwG0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTozNzowNVrOFwG5Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NzYzMA==", "bodyText": "Can you please add a note that this getter is for testing purposes or perhaps the annotation VisibleForTesting", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385987630", "createdAt": "2020-02-29T01:25:32Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -84,6 +84,7 @@\n     /**\n      * The stream view this object is backed by.\n      */\n+    @Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d869b36f618f4e922a97f61ce9472ffb883762"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4ODg5OQ==", "bodyText": "I am a bit confused, why do we want to surface the hole itself to the object layer? wouldn't that give the wrong behavior? If we are enforcing holes for different reasons (materialize a stream or any other reason), a client should not perceive it...If we are directly consuming the stream it would perceive them right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r385988899", "createdAt": "2020-02-29T01:37:05Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -84,11 +84,11 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                 // to be serviced immediately, rather than reading one entry at a time.\n                 ld = read(currentRead, queue);\n \n-                if (queue == getCurrentContext().readQueue && ld != null) {\n+                if (queue == getCurrentContext().readQueue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.isHole() || (ld.containsStream(this.id) && ld.isData())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e14cd9eb6ac0aa9200a0aafab7d7e2a23154274"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzcwNTc2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-366770576", "createdAt": "2020-02-29T02:33:53Z", "commit": {"oid": "c46c10c793537354143e42191c57895d2bc76670"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjIzMDAx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-367623001", "createdAt": "2020-03-03T00:16:23Z", "commit": {"oid": "8d07c2e2f22f36e4e2abdc12f9fd27cb450b4924"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjI3NjQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-367627640", "createdAt": "2020-03-03T00:29:26Z", "commit": {"oid": "8d07c2e2f22f36e4e2abdc12f9fd27cb450b4924"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73271a29cb629b77acb33a50f134270dd2ebabfe", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/73271a29cb629b77acb33a50f134270dd2ebabfe", "committedDate": "2020-03-31T16:05:47Z", "message": "Merge branch 'master' into hole_in_tail"}, "afterCommit": {"oid": "a5c4516c013a0f3111fbb46d345e0aecf220105b", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a5c4516c013a0f3111fbb46d345e0aecf220105b", "committedDate": "2020-03-31T17:43:52Z", "message": "fix hole in tail\n\nfix test\n\nFix assertThat and address comment\n\nAddress comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDIwMzk2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-386020396", "createdAt": "2020-04-01T23:37:46Z", "commit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozNzo0NlrOF_WXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzo1Nzo0NVrOF_Wvvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTA4NA==", "bodyText": "Resursive call is not good practice in production, it could blow up stack. I know you are referencing from the recursive code right below, but that is basically dead code.\nAlso, why don't we do this in removeFromQueue?  We can read the next one if current is a hole in removeFromQueue right? That seems cleaner.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r401971084", "createdAt": "2020-04-01T23:37:46Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractContextStreamView.java", "diffHunk": "@@ -135,6 +134,13 @@ public final synchronized ILogData nextUpTo(final long maxGlobal) {\n             // Update the pointer.\n             updatePointer(entry);\n \n+            // We added hole to StreamView layer, in order to enable VLO sync to a hole\n+            // and in this way, we can avoid unnecessary sync that call sequencer every time.\n+            // It can expose a hole to sv consumer, so check if entry is a hole.\n+            if (entry.isHole()) {\n+                return nextUpTo(maxGlobal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NTQwNA==", "bodyText": "I feel this might not be completely correct in case of sequencer regress.  I think we need to check containsStream() even for a hole, as a hole could be a real hole, which has no stream info, or a no-op which still belongs to some stream. Consider this case:\n\nIn epoch 0, sequencer issues a token with address 100 to stream A.\nNo one writes to this token, but the client queries sequencer for stream A and get back a bitmap that 100 belongs to stream A.\nEpoch changes to 1, new sequencer boots up, recovers the stream tail map from log unit, since no one writes to that token with address 100, log unit does not know about that token, neither does new sequencer.\nNew sequencer issues token 100 to stream B to new client\nNew client uses this token to enforce a hole for stream B (the checkpoint hole).\nNow the old client which operates on stream A finish the read, but it reads a hole with backpointer of stream B, since it's a hole, you will update the stream A's pointer to point to 100, which belongs to stream B and also put it in to the resolved queue.\n\nSo in this case we end up pointing stream A's pointer to a hole that belongs to stream B and put it into A's resolved queue.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r401975404", "createdAt": "2020-04-01T23:51:39Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -84,11 +84,11 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                 // to be serviced immediately, rather than reading one entry at a time.\n                 ld = read(currentRead, queue);\n \n-                if (queue == getCurrentContext().readQueue && ld != null) {\n+                if (queue == getCurrentContext().readQueue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if (ld.isHole() || (ld.containsStream(this.id) && ld.isData())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3NzI3OA==", "bodyText": "Same here, we might end up pointing to an address belonging to a different stream.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r401977278", "createdAt": "2020-04-01T23:57:45Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractContextStreamView.java", "diffHunk": "@@ -284,7 +290,7 @@ protected boolean doesEntryUpdateContext(final ILogData data) {\n      */\n     private void updatePointer(final ILogData data) {\n         // Update the global pointer, if it is non-checkpoint data.\n-        if (data.getType() == DataType.DATA && !data.hasCheckpointMetadata()) {\n+        if ((data.isData() || data.isHole()) && !data.hasCheckpointMetadata()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26db940be21a14202929e999696b809df7d22d89", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/26db940be21a14202929e999696b809df7d22d89", "committedDate": "2020-04-02T03:11:00Z", "message": "Fix hole in tail"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/aefcaf65e973053abc99dd96c7232af5c2db645a", "committedDate": "2020-04-01T23:07:20Z", "message": "Merge branch 'master' into hole_in_tail"}, "afterCommit": {"oid": "26db940be21a14202929e999696b809df7d22d89", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/26db940be21a14202929e999696b809df7d22d89", "committedDate": "2020-04-02T03:11:00Z", "message": "Fix hole in tail"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDkzNTgy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-386093582", "createdAt": "2020-04-02T03:59:48Z", "commit": {"oid": "26db940be21a14202929e999696b809df7d22d89"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMzo1OTo0OFrOF_agcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDowNjoyMlrOF_amEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjAzODg5Nw==", "bodyText": "This is quite complex, I think it can be simplified to\nif ((ld.isData() || ld.isHole()) && ld.containsStream(this.id)) {\n(You don't need to check ld.getBackpointerMap().isEmpty(), containsStream is enough)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r402038897", "createdAt": "2020-04-02T03:59:48Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -84,11 +84,13 @@ protected ILogData removeFromQueue(NavigableSet<Long> queue) {\n                 // to be serviced immediately, rather than reading one entry at a time.\n                 ld = read(currentRead, queue);\n \n-                if (queue == getCurrentContext().readQueue && ld != null) {\n+                if (queue == getCurrentContext().readQueue) {\n                     // Validate that the data entry belongs to this stream, otherwise, skip.\n                     // This verification protects from sequencer regression (tokens assigned in an older epoch\n                     // that were never written to, and reassigned on a newer epoch)\n-                    if (ld.containsStream(this.id) && ld.getType() == DataType.DATA) {\n+                    if ((ld.containsStream(this.id) && ld.isData()) ||\n+                            (ld.isHole() && (ld.getBackpointerMap().isEmpty() || ld.containsStream(this.id)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26db940be21a14202929e999696b809df7d22d89"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0MDMzOQ==", "bodyText": "This the problem of existing code organization, we need to clean it up later.\nThough I think this does not matter in your case, as long as you put the hole into the resolvedQueue via addToResolvedQueue, the maxResolution will be updated: https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java#L87\nthen next time maxResolution will prevent extra sequencer call. But using globalPointer instead of maxResolution can prevent unnecessary TrimmedException, so it's ok for now. I think later on we should reorg this part of code.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r402040339", "createdAt": "2020-04-02T04:06:22Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractContextStreamView.java", "diffHunk": "@@ -135,6 +134,13 @@ public final synchronized ILogData nextUpTo(final long maxGlobal) {\n             // Update the pointer.\n             updatePointer(entry);\n \n+            // We added hole to StreamView layer, in order to enable VLO sync to a hole\n+            // and in this way, we can avoid unnecessary sync that call sequencer every time.\n+            // It can expose a hole to sv consumer, so check if entry is a hole.\n+            if (entry.isHole()) {\n+                return nextUpTo(maxGlobal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MTA4NA=="}, "originalCommit": {"oid": "aefcaf65e973053abc99dd96c7232af5c2db645a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTA0MzEx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-386104311", "createdAt": "2020-04-02T04:45:50Z", "commit": {"oid": "26db940be21a14202929e999696b809df7d22d89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0NTo1MFrOF_bHPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNDo0NTo1MFrOF_bHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA0ODgzMA==", "bodyText": "I think we probably don't need to check containsStream here because when we call this method, logdata that does not belong to this stream should already be filtered out, could you double check?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#discussion_r402048830", "createdAt": "2020-04-02T04:45:50Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractContextStreamView.java", "diffHunk": "@@ -284,7 +290,9 @@ protected boolean doesEntryUpdateContext(final ILogData data) {\n      */\n     private void updatePointer(final ILogData data) {\n         // Update the global pointer, if it is non-checkpoint data.\n-        if (data.getType() == DataType.DATA && !data.hasCheckpointMetadata()) {\n+        if ((data.isData() && !data.hasCheckpointMetadata()) ||\n+                (data.isHole() && (data.getBackpointerMap().isEmpty() || data.containsStream(getCurrentContext().id)))\n+        ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26db940be21a14202929e999696b809df7d22d89"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3df5889a2830524f0685b045efecc832b4d7dc59", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3df5889a2830524f0685b045efecc832b4d7dc59", "committedDate": "2020-04-02T05:54:02Z", "message": "Addressed comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTMwMDE5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2387#pullrequestreview-386130019", "createdAt": "2020-04-02T06:10:41Z", "commit": {"oid": "3df5889a2830524f0685b045efecc832b4d7dc59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "365c54febc829ac239ffc0c51892f95d87364b04", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/365c54febc829ac239ffc0c51892f95d87364b04", "committedDate": "2020-04-02T20:20:23Z", "message": "Merge branch 'master' into hole_in_tail"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3330, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}