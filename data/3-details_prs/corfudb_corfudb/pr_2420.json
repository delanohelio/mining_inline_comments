{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzQ4NzQz", "number": 2420, "title": "Change how StreamView interacts with its trim mark", "bodyText": "When StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark.\nOverview\nDescription:\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-02-19T19:22:48Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420", "merged": true, "mergeCommit": {"oid": "bec2faee73899acfcfdddbfc0165de4a158613d7"}, "closed": true, "closedAt": "2020-03-06T01:09:05Z", "author": {"login": "vjeko"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF7pMlABqjMwNTMwNzM3MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKyDVMgBqjMxMDI5MDE4NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e475ae33388c41d7980827a6a2cb5e96bcb24977", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e475ae33388c41d7980827a6a2cb5e96bcb24977", "committedDate": "2020-02-19T19:07:12Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "372cadc82f2885eae1e11aba80c7e2f7ad672511", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/372cadc82f2885eae1e11aba80c7e2f7ad672511", "committedDate": "2020-02-19T19:24:53Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "372cadc82f2885eae1e11aba80c7e2f7ad672511", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/372cadc82f2885eae1e11aba80c7e2f7ad672511", "committedDate": "2020-02-19T19:24:53Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "478420a40def611f4ee0ec1ef41c24559c426cf5", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/478420a40def611f4ee0ec1ef41c24559c426cf5", "committedDate": "2020-02-19T19:49:30Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "478420a40def611f4ee0ec1ef41c24559c426cf5", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/478420a40def611f4ee0ec1ef41c24559c426cf5", "committedDate": "2020-02-19T19:49:30Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "ac193cbc51588bf20c68c964bbc4e616961d4684", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ac193cbc51588bf20c68c964bbc4e616961d4684", "committedDate": "2020-02-19T20:57:17Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac193cbc51588bf20c68c964bbc4e616961d4684", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ac193cbc51588bf20c68c964bbc4e616961d4684", "committedDate": "2020-02-19T20:57:17Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a", "committedDate": "2020-02-19T21:10:08Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzc0NTE2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#pullrequestreview-363774516", "createdAt": "2020-02-24T23:28:11Z", "commit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMzoyODoxMlrOFtzldw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNDo1MToyNFrOFt4l3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU3NTQxNQ==", "bodyText": "typo -> immediately", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383575415", "createdAt": "2020-02-24T23:28:12Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(\n+                stream.remainingUpTo(Long.MAX_VALUE), stream.remainingUpTo(Long.MAX_VALUE))\n                 .map(List::size).mapToInt(Integer::intValue).sum())\n                 .isEqualTo(BATCH_SIZE);\n \n         trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n         IntStream.range(0, BATCH_SIZE).forEach(idx -> newMap.put(idx, idx));\n-        Assertions.assertThatThrownBy(() -> s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThatThrownBy(() -> stream.remainingUpTo(Long.MAX_VALUE))\n                 .isInstanceOf(TrimmedException.class);\n     }\n \n+    /**\n+     * Verify that the streaming interface can be consumed directly after\n+     * several checkpoint and trim cycles.\n+     */\n+    @Test\n+    public void rawStreamConsumerMultipleCheckpointTrim() {\n+        final int BATCH_SIZE = 10;\n+        final int CHECKPOINT_SIZE = 3;\n+        final String CHECKPOINT_AUTHOR = \"Author\";\n+        final String tableName = \"test\";\n+        final CorfuTable<Integer, Integer> map = getDefaultRuntime().getObjectsView().build()\n+                .setTypeToken(new TypeToken<CorfuTable<Integer, Integer>>() {})\n+                .setStreamName(tableName)\n+                .open();\n+\n+        final MultiCheckpointWriter<CorfuTable> mcw = new MultiCheckpointWriter();\n+        mcw.addMap(map);\n+\n+        IntStream.range(0, BATCH_SIZE).forEach(idx -> map.put(idx, idx));\n+        trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n+        IntStream.range(0, BATCH_SIZE).forEach(idx -> map.put(idx, idx));\n+\n+        CorfuRuntime newRuntime = getNewRuntime(getDefaultNode()).connect();\n+\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n+        // Replay to the stream to the latest address.\n+        // The first call to remainingUpTo() will load the checkpoint, and the\n+        // second one will fetch the actual data.\n+        Assertions.assertThat(Stream.of(\n+                stream.remainingUpTo(Long.MAX_VALUE), stream.remainingUpTo(Long.MAX_VALUE))\n+                .map(List::size).mapToInt(Integer::intValue).sum())\n+                .isEqualTo(BATCH_SIZE);\n+\n+        // Create a new checkpoint, produce some data and imediatelly consume it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4MDEzNw==", "bodyText": "Could we change this to (BATCH_SIZE, BATCH_SIZE*2)? so we have different indexes, and easily verify if the checkpoint was loaded?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383580137", "createdAt": "2020-02-24T23:43:15Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -200,7 +201,6 @@ public void rawStreamConsumer() {\n \n         IntStream.range(0, BATCH_SIZE).forEach(idx -> map.put(idx, idx));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNDU0Nw==", "bodyText": "By looking at this comment \"the first call to remainingUpTo will load the checkpoint, and the second will fetch the actual data\" made me think that we might also have a problem in the AbstractQueuedStreamView, getNextEntries. Because think of the behavior. If you seek up to 13, and you ask for the remaining up to 'X', you should directly obtain all the remaining entries from 13 up to to 'X', you shouldn't have to run it twice, once to load the checkpoint (which anyways is not used because we don't care about the checkpoint entries in this case) and then to complete the rest (13-24).\nNote that this does not affect the Object Layer, cause the object layer goes through the getNextEntry, which first loads from the checkpoint and after (in the same call) looks for the rest. Which is the right behavior to ensure there's no data loss.\nAlso, maybe we don't even need to load the checkpoint (in all cases)... The side door to the stream access (not through the object layer) could probably ignore the checkpoint (in some cases), anyways it is strictly returning the remainingUpTo ... from seek to 'X'.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383634547", "createdAt": "2020-02-25T03:01:46Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNjU5OQ==", "bodyText": "I tried placing a second\nboolean readQueue2IsEmpty = !fillReadQueue(maxGlobal, context);\n(for quickly testing) in the getNextEntries of AbstractQueueStreamView and that does the job. This would cause the first one to load the checkpoint and the second to load from the regular stream. Perhaps we could push it down to the fillReadQueue so it also discovers the address space for the regular stream after it does it for the checkpoint (we need to double check that does not affect the object layer). I think it won't as the object layer does this through the getNextEntry anyways. But again, maybe we can think of a better strategy as to not load the checkpoint if not needed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383636599", "createdAt": "2020-02-25T03:10:59Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNDU0Nw=="}, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MDg4Mg==", "bodyText": "Also, this second shouldn't really fail, cause think about it, we did a remaining up to which brought addresses 14-23. The problem is that because of another issue we're writing a hole for every checkpoint and this hole, makes the stream layer try to sync up to 24 (though 24 is a hole, but there's no way for us to know)... This means that, someone consuming the stream regularly will eventually hit this issue whenever the remainingUpTo happens after the checkpoint/trim.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383640882", "createdAt": "2020-02-25T03:30:27Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(\n+                stream.remainingUpTo(Long.MAX_VALUE), stream.remainingUpTo(Long.MAX_VALUE))\n                 .map(List::size).mapToInt(Integer::intValue).sum())\n                 .isEqualTo(BATCH_SIZE);\n \n         trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n         IntStream.range(0, BATCH_SIZE).forEach(idx -> newMap.put(idx, idx));\n-        Assertions.assertThatThrownBy(() -> s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThatThrownBy(() -> stream.remainingUpTo(Long.MAX_VALUE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MTYzMg==", "bodyText": "Now, we should try to live with this additional hole (at least for now) as it is solving another issue and the alternative to solve that issue had implications in data migration. Still, we might need a notion of the maximum resolved address (including holes) because we filter them in the AbstractQueuedStreamView. This would protect us, when the remainingUpTo is executed before the checkpoint/trim and the last address was a hole.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383641632", "createdAt": "2020-02-25T03:33:59Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(\n+                stream.remainingUpTo(Long.MAX_VALUE), stream.remainingUpTo(Long.MAX_VALUE))\n                 .map(List::size).mapToInt(Integer::intValue).sum())\n                 .isEqualTo(BATCH_SIZE);\n \n         trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n         IntStream.range(0, BATCH_SIZE).forEach(idx -> newMap.put(idx, idx));\n-        Assertions.assertThatThrownBy(() -> s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThatThrownBy(() -> stream.remainingUpTo(Long.MAX_VALUE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0MDg4Mg=="}, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1NzQzNg==", "bodyText": "This part of the code is the same as per the preview test, we can move it to a function to reuse.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r383657436", "createdAt": "2020-02-25T04:51:24Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/runtime/checkpoint/CheckpointTrimTest.java", "diffHunk": "@@ -210,21 +210,76 @@ public void rawStreamConsumer() {\n                 .setStreamName(tableName)\n                 .open();\n \n-        IStreamView s = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n-        s.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n-        // Seek beyond the last trimmed address.\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n         // The first call to remainingUpTo() will load the checkpoint, and the\n         // second one will fetch the actual data.\n-        Assertions.assertThat(Stream.of(s.remainingUpTo(Long.MAX_VALUE), s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThat(Stream.of(\n+                stream.remainingUpTo(Long.MAX_VALUE), stream.remainingUpTo(Long.MAX_VALUE))\n                 .map(List::size).mapToInt(Integer::intValue).sum())\n                 .isEqualTo(BATCH_SIZE);\n \n         trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n         IntStream.range(0, BATCH_SIZE).forEach(idx -> newMap.put(idx, idx));\n-        Assertions.assertThatThrownBy(() -> s.remainingUpTo(Long.MAX_VALUE))\n+        Assertions.assertThatThrownBy(() -> stream.remainingUpTo(Long.MAX_VALUE))\n                 .isInstanceOf(TrimmedException.class);\n     }\n \n+    /**\n+     * Verify that the streaming interface can be consumed directly after\n+     * several checkpoint and trim cycles.\n+     */\n+    @Test\n+    public void rawStreamConsumerMultipleCheckpointTrim() {\n+        final int BATCH_SIZE = 10;\n+        final int CHECKPOINT_SIZE = 3;\n+        final String CHECKPOINT_AUTHOR = \"Author\";\n+        final String tableName = \"test\";\n+        final CorfuTable<Integer, Integer> map = getDefaultRuntime().getObjectsView().build()\n+                .setTypeToken(new TypeToken<CorfuTable<Integer, Integer>>() {})\n+                .setStreamName(tableName)\n+                .open();\n+\n+        final MultiCheckpointWriter<CorfuTable> mcw = new MultiCheckpointWriter();\n+        mcw.addMap(map);\n+\n+        IntStream.range(0, BATCH_SIZE).forEach(idx -> map.put(idx, idx));\n+        trim(mcw.appendCheckpoints(getRuntime(), CHECKPOINT_AUTHOR));\n+        IntStream.range(0, BATCH_SIZE).forEach(idx -> map.put(idx, idx));\n+\n+        CorfuRuntime newRuntime = getNewRuntime(getDefaultNode()).connect();\n+\n+        // Create a new stream and seek beyond the last trimmed address.\n+        IStreamView stream = newRuntime.getStreamsView().get(CorfuRuntime.getStreamID(tableName));\n+        stream.seek(BATCH_SIZE + CHECKPOINT_SIZE);\n+\n+        // Replay to the stream to the latest address.\n+        // The first call to remainingUpTo() will load the checkpoint, and the\n+        // second one will fetch the actual data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cba9020c1ce4da133ea62cd6fe0e44b0d1fb546a", "committedDate": "2020-02-19T21:10:08Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "269f140754a6184419e4cf4ae11e28a509b2e87d", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/269f140754a6184419e4cf4ae11e28a509b2e87d", "committedDate": "2020-02-25T21:51:39Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "269f140754a6184419e4cf4ae11e28a509b2e87d", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/269f140754a6184419e4cf4ae11e28a509b2e87d", "committedDate": "2020-02-25T21:51:39Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "85a8cc0205560f177f74d4fcb62b59672779812c", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/85a8cc0205560f177f74d4fcb62b59672779812c", "committedDate": "2020-02-25T23:55:19Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85a8cc0205560f177f74d4fcb62b59672779812c", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/85a8cc0205560f177f74d4fcb62b59672779812c", "committedDate": "2020-02-25T23:55:19Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "0bd6a52fa97cc0d9e491f8f8d7ee3e8afb7e1846", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0bd6a52fa97cc0d9e491f8f8d7ee3e8afb7e1846", "committedDate": "2020-02-26T00:09:33Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bd6a52fa97cc0d9e491f8f8d7ee3e8afb7e1846", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0bd6a52fa97cc0d9e491f8f8d7ee3e8afb7e1846", "committedDate": "2020-02-26T00:09:33Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "a1dc23cf30684ac0bbb431dcd5519f857de67e7c", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a1dc23cf30684ac0bbb431dcd5519f857de67e7c", "committedDate": "2020-02-26T00:43:23Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1dc23cf30684ac0bbb431dcd5519f857de67e7c", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a1dc23cf30684ac0bbb431dcd5519f857de67e7c", "committedDate": "2020-02-26T00:43:23Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "253f74158530d80e5ce1dc4a4531877c7c84e2a5", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/253f74158530d80e5ce1dc4a4531877c7c84e2a5", "committedDate": "2020-02-26T00:44:42Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "253f74158530d80e5ce1dc4a4531877c7c84e2a5", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/253f74158530d80e5ce1dc4a4531877c7c84e2a5", "committedDate": "2020-02-26T00:44:42Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "5ac9712295e217256b93b4cd29906c87b3cecaf2", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5ac9712295e217256b93b4cd29906c87b3cecaf2", "committedDate": "2020-02-26T00:58:35Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ac9712295e217256b93b4cd29906c87b3cecaf2", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/5ac9712295e217256b93b4cd29906c87b3cecaf2", "committedDate": "2020-02-26T00:58:35Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "382aee629b98501bae72d5fdabaed2f424607035", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/382aee629b98501bae72d5fdabaed2f424607035", "committedDate": "2020-02-26T02:08:16Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "382aee629b98501bae72d5fdabaed2f424607035", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/382aee629b98501bae72d5fdabaed2f424607035", "committedDate": "2020-02-26T02:08:16Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "d6da345a04d5e9070d145b0fd1ac269ac7338de4", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d6da345a04d5e9070d145b0fd1ac269ac7338de4", "committedDate": "2020-02-26T20:33:57Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6da345a04d5e9070d145b0fd1ac269ac7338de4", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d6da345a04d5e9070d145b0fd1ac269ac7338de4", "committedDate": "2020-02-26T20:33:57Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "ccdf514b2446cb78a01ef0ed8129a6017ffae3a4", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ccdf514b2446cb78a01ef0ed8129a6017ffae3a4", "committedDate": "2020-02-26T22:45:14Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccdf514b2446cb78a01ef0ed8129a6017ffae3a4", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ccdf514b2446cb78a01ef0ed8129a6017ffae3a4", "committedDate": "2020-02-26T22:45:14Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c9349ea1b7f9a6220327e40b5d27117f4d1510d1", "committedDate": "2020-02-26T23:51:19Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTUxODgy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#pullrequestreview-366151882", "createdAt": "2020-02-28T04:13:29Z", "commit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNDoxMzoyOVrOFvpCcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNjowOToyMlrOFvqaCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5OTc2MA==", "bodyText": "How could this happen? An entry can't be a hole and a trimmed address at the same time, right? or did you mean to remove them from the uncached data?, in which case for what reason?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385499760", "createdAt": "2020-02-28T04:13:29Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/AddressSpaceView.java", "diffHunk": "@@ -419,7 +419,10 @@ private ILogData cacheLoadAndGet(@NonNull Cache<Long, ILogData> cache, long addr\n \n         final Map<Long, ILogData> uncachedData = fetchAll(addressesToFetch, options);\n         final List<Long> trimmedAddresses = filterTrimmedAddresses(uncachedData);\n+        final List<Long> holes = filterHoles(uncachedData);\n+\n         trimmedAddresses.forEach(uncachedData::remove);\n+        holes.forEach(trimmedAddresses::remove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNzIyNg==", "bodyText": "Let's add a comment on why we'll allow holes to surface to upper layers...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385507226", "createdAt": "2020-02-28T04:54:50Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -341,7 +340,7 @@ private void processTrimmedException(TrimmedException te) {\n \n         // The list to store read results in\n         List<ILogData> readFrom = readAll(toRead).stream()\n-                .filter(x -> x.getType() == DataType.DATA)\n+                .filter(x -> x.getType() == DataType.DATA || x.getType() == DataType.HOLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODMzMQ==", "bodyText": "Please add comment with example on why we don't filter out the holes ... this will ease future discussions on why this is done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385508331", "createdAt": "2020-02-28T05:01:16Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -363,16 +362,16 @@ private void processTrimmedException(TrimmedException te) {\n         }\n \n         // Transfer the addresses of the read entries to the resolved queue\n-        readFrom.stream()\n-                .forEach(x -> addToResolvedQueue(context, x.getGlobalAddress()));\n+        readFrom.forEach(entry -> addToResolvedQueue(context, entry.getGlobalAddress()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwODQwMQ==", "bodyText": "Please add a final note on why we filter holes right before returning...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385508401", "createdAt": "2020-02-28T05:01:38Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -363,16 +362,16 @@ private void processTrimmedException(TrimmedException te) {\n         }\n \n         // Transfer the addresses of the read entries to the resolved queue\n-        readFrom.stream()\n-                .forEach(x -> addToResolvedQueue(context, x.getGlobalAddress()));\n+        readFrom.forEach(entry -> addToResolvedQueue(context, entry.getGlobalAddress()));\n \n         // Update the global pointer\n         if (readFrom.size() > 0) {\n             context.setGlobalPointerCheckGCTrimMark(readFrom.get(readFrom.size() - 1)\n                     .getGlobalAddress());\n         }\n \n-        return readFrom;\n+        return readFrom.stream().filter(entry -> !entry.isHole())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMjE4NQ==", "bodyText": "Can you please add a comment on why we need to set the global pointer, it is not obvious for someone with little context.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385522185", "createdAt": "2020-02-28T06:09:22Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -417,7 +416,9 @@ protected boolean fillReadQueue(final long maxGlobal,\n                     log.trace(\"Fill_Read_Queue[{}] Get Stream Address Map using checkpoint with {} entries\",\n                             this, context.readCpQueue.size());\n \n-                    return true;\n+                    // Note: this is a checkpoint, we do not need to verify it is before the trim mark, it actually should be\n+                    // cause this is the last address of the trimmed range.\n+                    context.setGlobalPointer(context.checkpoint.startAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9349ea1b7f9a6220327e40b5d27117f4d1510d1", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c9349ea1b7f9a6220327e40b5d27117f4d1510d1", "committedDate": "2020-02-26T23:51:19Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "a461ae7f6abb99b49ca81547e6e93bc484041c19", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a461ae7f6abb99b49ca81547e6e93bc484041c19", "committedDate": "2020-02-28T07:36:34Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a461ae7f6abb99b49ca81547e6e93bc484041c19", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a461ae7f6abb99b49ca81547e6e93bc484041c19", "committedDate": "2020-02-28T07:36:34Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "2e7c87caa44d030bd646b70bdcb9a481683c0ce1", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2e7c87caa44d030bd646b70bdcb9a481683c0ce1", "committedDate": "2020-02-28T07:38:16Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e7c87caa44d030bd646b70bdcb9a481683c0ce1", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2e7c87caa44d030bd646b70bdcb9a481683c0ce1", "committedDate": "2020-02-28T07:38:16Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}, "afterCommit": {"oid": "53e37ce605637531df37a2be340755cf3273e797", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/53e37ce605637531df37a2be340755cf3273e797", "committedDate": "2020-02-28T19:07:58Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NjMxNzA4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#pullrequestreview-366631708", "createdAt": "2020-02-28T19:26:09Z", "commit": {"oid": "53e37ce605637531df37a2be340755cf3273e797"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyNjowOVrOFwANnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxOToyNjowOVrOFwANnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3OTQ1Mw==", "bodyText": "typo -> any", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385879453", "createdAt": "2020-02-28T19:26:09Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -363,16 +373,18 @@ private void processTrimmedException(TrimmedException te) {\n         }\n \n         // Transfer the addresses of the read entries to the resolved queue\n-        readFrom.stream()\n-                .forEach(x -> addToResolvedQueue(context, x.getGlobalAddress()));\n+        readFrom.forEach(entry -> addToResolvedQueue(context, entry.getGlobalAddress()));\n \n         // Update the global pointer\n         if (readFrom.size() > 0) {\n             context.setGlobalPointerCheckGCTrimMark(readFrom.get(readFrom.size() - 1)\n                     .getGlobalAddress());\n         }\n \n-        return readFrom;\n+        // Make sure to filter out eny entries that are holes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e37ce605637531df37a2be340755cf3273e797"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzE0MjIw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#pullrequestreview-366714220", "createdAt": "2020-02-28T22:07:24Z", "commit": {"oid": "53e37ce605637531df37a2be340755cf3273e797"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjowNzoyNVrOFwEMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjowODowNlrOFwENOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0NDY1OA==", "bodyText": "I think we can combine these two conditions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385944658", "createdAt": "2020-02-28T22:07:25Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -155,53 +155,74 @@ protected boolean discoverAddressSpace(final UUID streamId,\n             if (checkpoint) {\n                 processCheckpoint(streamAddressSpace, filter, queue);\n             } else {\n-                // Transfer discovered addresses to queue. We must limit to maxGlobal,\n-                // as startAddress could be ahead of maxGlobal---in case it reflects\n-                // the tail of the stream.\n-                queue.addAll(streamAddressSpace.copyAddressesToSet(maxGlobal));\n-\n-                long trimMark = streamAddressSpace.getTrimMark();\n-\n-                // In case we are dealing with a stream that does not have the checkpoint\n-                // capability, check to see if we are trying to access an address that has been\n-                // previously trimmed.\n-                if (!isCheckpointCapable()\n-                        && Address.isAddress(trimMark)\n-                        && trimMark > stopAddress) {\n-                    String message = String.format(\"getStreamAddressMap[{%s}] stream has been \" +\n-                                    \"trimmed at address %s and we are trying to access the \" +\n-                                    \"stream starting at address %s. This stream does not have \" +\n-                                    \"the checkpoint capability.\", this, trimMark, stopAddress);\n-                    log.info(message);\n-                    throw new TrimmedException(message);\n-                }\n-                // Address maps might have been trimmed, hence not reflecting all updates to the stream\n-                // For this reason, in the case of a valid trim mark, we must be sure this space is\n-                // already resolved or loaded by a checkpoint.\n-                if (isCheckpointCapable()\n-                        && Address.isAddress(trimMark)\n-                        && !isTrimCoveredByCheckpointOrLocalView(trimMark)) {\n-                    if (getReadOptions().isIgnoreTrim()) {\n-                        log.debug(\"getStreamAddressMap[{}]: Ignoring trimmed exception for address[{}].\",\n-                                this, streamAddressSpace.getTrimMark());\n-                    } else {\n-                        String message = String.format(\"getStreamAddressMap[{%s}] [%d, %d] \" +\n-                                        \"stream has been trimmed at address %s and this space is \" +\n-                                        \"not covered by the loaded checkpoint with start \" +\n-                                        \"address %s, while accessing the stream at version \" +\n-                                        \"%s. Looking for a new checkpoint.\",\n-                                this, stopAddress, startAddress, trimMark,\n-                                getCurrentContext().getCheckpoint().startAddress, maxGlobal);\n-                        throw new TrimmedException(message);\n-                    }\n-                }\n+                moveToReadQueue(streamAddressSpace, queue, startAddress, stopAddress, maxGlobal);\n             }\n         }\n \n         addressCount += queue.size();\n         return !queue.isEmpty();\n     }\n \n+    private void moveToReadQueue(final StreamAddressSpace streamAddressSpace,\n+                                  final NavigableSet<Long> queue,\n+                                  final long startAddress,\n+                                  final long stopAddress,\n+                                  final long maxGlobal) {\n+\n+        // Transfer discovered addresses to queue. We must limit to maxGlobal,\n+        // as startAddress could be ahead of maxGlobal---in case it reflects\n+        // the tail of the stream.\n+        queue.addAll(streamAddressSpace.copyAddressesToSet(maxGlobal));\n+\n+        final long trimMark = streamAddressSpace.getTrimMark();\n+\n+        // No valid trim-mark has been defined,\n+        // thus we cannot run into trimmed address space.\n+        if (!Address.isAddress(trimMark)) {\n+            return;\n+        }\n+\n+        // Trim-mark is below or equal to the lowest address,\n+        // thus we cannot run into trimmed address space.\n+        if (trimMark <= stopAddress) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e37ce605637531df37a2be340755cf3273e797"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0NDg4OQ==", "bodyText": "isCheckpointCapable() becomes redundant now.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r385944889", "createdAt": "2020-02-28T22:08:06Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AddressMapStreamView.java", "diffHunk": "@@ -155,53 +155,74 @@ protected boolean discoverAddressSpace(final UUID streamId,\n             if (checkpoint) {\n                 processCheckpoint(streamAddressSpace, filter, queue);\n             } else {\n-                // Transfer discovered addresses to queue. We must limit to maxGlobal,\n-                // as startAddress could be ahead of maxGlobal---in case it reflects\n-                // the tail of the stream.\n-                queue.addAll(streamAddressSpace.copyAddressesToSet(maxGlobal));\n-\n-                long trimMark = streamAddressSpace.getTrimMark();\n-\n-                // In case we are dealing with a stream that does not have the checkpoint\n-                // capability, check to see if we are trying to access an address that has been\n-                // previously trimmed.\n-                if (!isCheckpointCapable()\n-                        && Address.isAddress(trimMark)\n-                        && trimMark > stopAddress) {\n-                    String message = String.format(\"getStreamAddressMap[{%s}] stream has been \" +\n-                                    \"trimmed at address %s and we are trying to access the \" +\n-                                    \"stream starting at address %s. This stream does not have \" +\n-                                    \"the checkpoint capability.\", this, trimMark, stopAddress);\n-                    log.info(message);\n-                    throw new TrimmedException(message);\n-                }\n-                // Address maps might have been trimmed, hence not reflecting all updates to the stream\n-                // For this reason, in the case of a valid trim mark, we must be sure this space is\n-                // already resolved or loaded by a checkpoint.\n-                if (isCheckpointCapable()\n-                        && Address.isAddress(trimMark)\n-                        && !isTrimCoveredByCheckpointOrLocalView(trimMark)) {\n-                    if (getReadOptions().isIgnoreTrim()) {\n-                        log.debug(\"getStreamAddressMap[{}]: Ignoring trimmed exception for address[{}].\",\n-                                this, streamAddressSpace.getTrimMark());\n-                    } else {\n-                        String message = String.format(\"getStreamAddressMap[{%s}] [%d, %d] \" +\n-                                        \"stream has been trimmed at address %s and this space is \" +\n-                                        \"not covered by the loaded checkpoint with start \" +\n-                                        \"address %s, while accessing the stream at version \" +\n-                                        \"%s. Looking for a new checkpoint.\",\n-                                this, stopAddress, startAddress, trimMark,\n-                                getCurrentContext().getCheckpoint().startAddress, maxGlobal);\n-                        throw new TrimmedException(message);\n-                    }\n-                }\n+                moveToReadQueue(streamAddressSpace, queue, startAddress, stopAddress, maxGlobal);\n             }\n         }\n \n         addressCount += queue.size();\n         return !queue.isEmpty();\n     }\n \n+    private void moveToReadQueue(final StreamAddressSpace streamAddressSpace,\n+                                  final NavigableSet<Long> queue,\n+                                  final long startAddress,\n+                                  final long stopAddress,\n+                                  final long maxGlobal) {\n+\n+        // Transfer discovered addresses to queue. We must limit to maxGlobal,\n+        // as startAddress could be ahead of maxGlobal---in case it reflects\n+        // the tail of the stream.\n+        queue.addAll(streamAddressSpace.copyAddressesToSet(maxGlobal));\n+\n+        final long trimMark = streamAddressSpace.getTrimMark();\n+\n+        // No valid trim-mark has been defined,\n+        // thus we cannot run into trimmed address space.\n+        if (!Address.isAddress(trimMark)) {\n+            return;\n+        }\n+\n+        // Trim-mark is below or equal to the lowest address,\n+        // thus we cannot run into trimmed address space.\n+        if (trimMark <= stopAddress) {\n+            return;\n+        }\n+\n+        // In case we are dealing with a stream that does not have the checkpoint\n+        // capability (transactional stream for example), raise the exception.\n+        if (!isCheckpointCapable()) {\n+            String message = String.format(\"getStreamAddressMap[{%s}] stream has been \" +\n+                    \"trimmed at address %s and we are trying to access the \" +\n+                    \"stream starting at address %s. This stream does not have \" +\n+                    \"the checkpoint capability.\", this, trimMark, stopAddress);\n+            log.info(message);\n+            throw new TrimmedException(message);\n+        }\n+\n+        // Address maps might have been trimmed, hence not reflecting all updates to the stream\n+        // For this reason, in the case of a valid trim mark, we must be sure this space is\n+        // already resolved or loaded by a checkpoint.\n+        //\n+        // In case of a raw stream (a stream that is not consumed as part of an SMR object),\n+        // checkpoint start address and the trim mark will never match, causing the\n+        // TrimmedException to be thrown whenever trimMark > stopAddress.\n+        if (isCheckpointCapable() && !isTrimCoveredByCheckpointOrLocalView(trimMark)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e37ce605637531df37a2be340755cf3273e797"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDc5MzAw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#pullrequestreview-367479300", "createdAt": "2020-03-02T19:49:08Z", "commit": {"oid": "c00eadead6638de0213b667d014e7e7394455e8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo0OTowOFrOFws88w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo0OTowOFrOFws88w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMjQ2Nw==", "bodyText": "Isn't this what @zhangn49 is addressing in PR #2387?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2420#discussion_r386612467", "createdAt": "2020-03-02T19:49:08Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/stream/AbstractQueuedStreamView.java", "diffHunk": "@@ -341,7 +342,16 @@ private void processTrimmedException(TrimmedException te) {\n \n         // The list to store read results in\n         List<ILogData> readFrom = readAll(toRead).stream()\n-                .filter(x -> x.getType() == DataType.DATA)\n+                // If the last address is a hole, we want to update the\n+                // global pointer to include that address as well.\n+                // During a checkpoint, a hole is appended at the end of each\n+                // stream which might end up being used as a trim mark in the\n+                // next trim cycle. If there are no updates between the checkpoint\n+                // and the trim cycle for that stream, there is a chance that the\n+                // last address (hole) will be trimmed, causing the TrimmedException\n+                // to be thrown. By updating the global pointer to include the hole,\n+                // we prevent that from happening.\n+                .filter(x -> x.isData() || x.isHole())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c00eadead6638de0213b667d014e7e7394455e8d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d11583214d77aa1eb3f1ddf42a515e7d74b9bf4f", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d11583214d77aa1eb3f1ddf42a515e7d74b9bf4f", "committedDate": "2020-03-05T21:04:06Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c00eadead6638de0213b667d014e7e7394455e8d", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c00eadead6638de0213b667d014e7e7394455e8d", "committedDate": "2020-03-02T19:45:06Z", "message": "Merge branch 'trimMark' of github.com:CorfuDB/CorfuDB into trimMark"}, "afterCommit": {"oid": "d11583214d77aa1eb3f1ddf42a515e7d74b9bf4f", "author": {"user": {"login": "vjeko", "name": "Vjekoslav Brajkovic"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d11583214d77aa1eb3f1ddf42a515e7d74b9bf4f", "committedDate": "2020-03-05T21:04:06Z", "message": "Change how StreamView interacts with its trim mark\n\nWhen StreamView is being consumed directly, its trim mark will change\ndue to externally triggered calls to gc(...). Even when the read range\nis above the trim mark, TrimmedException will be thrown because\ngetCheckpoint().startAddress < trimMark."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3348, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}