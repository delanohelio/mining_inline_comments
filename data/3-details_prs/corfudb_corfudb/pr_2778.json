{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NTA1MzUy", "number": 2778, "title": "Lr metrics", "bodyText": "Overview\nDescription:\n\nIntroduce micrometer library - facade, over the instrumentation clients that allows to instrument the application without having to lock in on the backend.\nConfigure the LoggingMeterRegistry - allows metrics to be exportable via a separate logger with a defined frequency (1 min by default).\nIntroduce a custom logging sink - InfluxLineProtocolLoggingSink - allows exporting metrics in the InfuxDb Line Protocol format to ease the subsequent export of the metrics.\nInstrument LR. In order to enable metrics a logback.xml file needs to be appropriately configured. See logback-test-lr-metrics.xml for an example, also a flag --metrics needs to be passed on a startup.\n\nFurther changes:\n\nConfigure logback.xml in production repo to enable a separate async logger for the metrics.\nPass a flag --metrics on startup in the production repo.\nSet up and configure infra for the metrics ingestion, analysis and visualization in the infra repo.\n\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-09-29T02:37:56Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778", "merged": true, "mergeCommit": {"oid": "c7f907a2fb05f11b89220cc9e14a27b6c55ccfca"}, "closed": true, "closedAt": "2020-10-08T23:02:39Z", "author": {"login": "PavelZaytsev"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLNhqOAH2gAyNDk0NTA1MzUyOjgyYmUzNjhiZmFhYzJlOGQ1OGM3OWY5NzkwMTQyZmZlZDFiN2Y5YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQnY6eAFqTUwNTEzMTE5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "82be368bfaac2e8d58c79f9790142ffed1b7f9ac", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/82be368bfaac2e8d58c79f9790142ffed1b7f9ac", "committedDate": "2020-09-22T01:15:56Z", "message": "Instrumentation init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c35bcdcbbf6ef55d327fab8693796ea7235ac1", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e3c35bcdcbbf6ef55d327fab8693796ea7235ac1", "committedDate": "2020-09-25T00:17:06Z", "message": "Continue instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29e554b887dfed5f5660e37dd5be22d52bf667dc", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/29e554b887dfed5f5660e37dd5be22d52bf667dc", "committedDate": "2020-09-29T02:31:08Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09e4e4f0418abcecb4d8a41ee7a46f5db59dd548", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/09e4e4f0418abcecb4d8a41ee7a46f5db59dd548", "committedDate": "2020-09-29T02:37:15Z", "message": "Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzY2NTk0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-498766594", "createdAt": "2020-09-29T18:29:36Z", "commit": {"oid": "09e4e4f0418abcecb4d8a41ee7a46f5db59dd548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyOTozNlrOHZ7hsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyOTozNlrOHZ7hsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTcyOA==", "bodyText": "you would have a race condition here in multi-threaded env", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r496951728", "createdAt": "2020-09-29T18:29:36Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import org.slf4j.Logger;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A configuration class for a meter (metrics) registry.\n+ */\n+public class MeterRegistryProvider {\n+    private static Optional<MeterRegistry> meterRegistry = Optional.empty();\n+\n+    private MeterRegistryProvider() {\n+\n+    }\n+\n+    /**\n+     * Get the previously configured meter registry.\n+     * If the registry has not been previously configured return an\n+     * empty option.\n+     * @return An optional configured meter registry.\n+     */\n+    public static Optional<MeterRegistry> getInstance() {\n+        return meterRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09e4e4f0418abcecb4d8a41ee7a46f5db59dd548"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac17d91e1a73b6daf4a21bdde73d9648e03f88f2", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ac17d91e1a73b6daf4a21bdde73d9648e03f88f2", "committedDate": "2020-09-29T19:35:25Z", "message": "Double locking on getInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f79f29df330faaf52ef9d035ba55d411a45bf3c", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3f79f29df330faaf52ef9d035ba55d411a45bf3c", "committedDate": "2020-09-29T19:36:50Z", "message": "Unsued imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0dbd83a4d5a53c1b11844a5b122eeab63ee7f6", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8f0dbd83a4d5a53c1b11844a5b122eeab63ee7f6", "committedDate": "2020-09-30T19:08:42Z", "message": "Merge branch 'master' into lr-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc47951eace8f0745a5488cd1f4df02b023d37c8", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cc47951eace8f0745a5488cd1f4df02b023d37c8", "committedDate": "2020-09-30T22:48:34Z", "message": "Add metrics to tests, add common tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a498a7218a01c6b508683a28cc62239ea5b73248", "committedDate": "2020-10-02T01:33:23Z", "message": "Provide InfluxDb line protocol sink for logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODkzOTY5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-500893969", "createdAt": "2020-10-02T06:52:48Z", "commit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNjo1Mjo0OVrOHbiyUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoxMjowOFrOHbjMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0MzUzNw==", "bodyText": "Should we throw an exception here or provide a default value? I'm worried about null", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498643537", "createdAt": "2020-10-02T06:52:49Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/IntervalLoggingConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import lombok.AllArgsConstructor;\n+\n+import java.time.Duration;\n+\n+/**\n+ * A configuration for the logging meter registry that configures the interval\n+ * between each logging event.\n+ */\n+@AllArgsConstructor\n+public class IntervalLoggingConfig implements LoggingRegistryConfig {\n+\n+    private final Duration intervalBetweenLogs;\n+\n+    @Override\n+    public Duration step() {\n+        return intervalBetweenLogs;\n+    }\n+\n+    @Override\n+    public String get(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NjQzMQ==", "bodyText": "here is a possible race. Imagine you have two threads\nt1->getInstance()\nt2->getInstance()\nt1-> meterRegistry is not present\nat the  same time\nt12-> meterRegistry is not present ALSO\nt1->creates LoggingMeterRegistry\nt2->creates LoggingMeterRegistry\nPlease take a look https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples\nI would prefer \"Eager initialization\" approach, if possible.\nIf you would like to use your method you need to add an additional check, see \"4. Thread Safe Singleton\"", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498646431", "createdAt": "2020-10-02T07:01:26Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import org.corfudb.common.metrics.micrometer.loggingsink.InfluxLineProtocolLoggingSink;\n+import org.corfudb.common.metrics.micrometer.loggingsink.LoggingSink;\n+import org.slf4j.Logger;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A configuration class for a meter (metrics) registry.\n+ */\n+public class MeterRegistryProvider {\n+    private static Optional<MeterRegistry> meterRegistry = Optional.empty();\n+\n+    private MeterRegistryProvider() {\n+\n+    }\n+\n+    /**\n+     * Get the previously configured meter registry.\n+     * If the registry has not been previously configured, create a default logging MeterRegistry\n+     * and return.\n+     * @return An optional configured meter registry.\n+     */\n+    public static Optional<MeterRegistry> getInstance() {\n+        if (!meterRegistry.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NzQ0Mw==", "bodyText": "It seems to me meterRegistry must be present no matter what.\nIs it better not to use Optional but provide guarantees that MeterRegistry always exists?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498647443", "createdAt": "2020-10-02T07:04:21Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import org.corfudb.common.metrics.micrometer.loggingsink.InfluxLineProtocolLoggingSink;\n+import org.corfudb.common.metrics.micrometer.loggingsink.LoggingSink;\n+import org.slf4j.Logger;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A configuration class for a meter (metrics) registry.\n+ */\n+public class MeterRegistryProvider {\n+    private static Optional<MeterRegistry> meterRegistry = Optional.empty();\n+\n+    private MeterRegistryProvider() {\n+\n+    }\n+\n+    /**\n+     * Get the previously configured meter registry.\n+     * If the registry has not been previously configured, create a default logging MeterRegistry\n+     * and return.\n+     * @return An optional configured meter registry.\n+     */\n+    public static Optional<MeterRegistry> getInstance() {\n+        if (!meterRegistry.isPresent()) {\n+            synchronized (MeterRegistry.class) {\n+                createLoggingMeterRegistry();\n+                return meterRegistry;\n+            }\n+        }\n+        return meterRegistry;\n+    }\n+\n+    /**\n+     * Configure the meter registry of type LoggingMeterRegistry. All the metrics registered\n+     * with this meter registry will be exported in the InfluxDB line protocol format\n+     * (https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/)\n+     * with  the provided loggingInterval frequency.\n+     * @param logger A configured logger.\n+     * @param loggingInterval A duration between log appends for every metric.\n+     * @param localEndpoint A local endpoint to tag every metric with.\n+     */\n+    public static void createLoggingMeterRegistry(Logger logger, Duration loggingInterval,\n+                                                  String localEndpoint) {\n+        InfluxLineProtocolLoggingSink influxLineProtocolLoggingSink =\n+                new InfluxLineProtocolLoggingSink(logger);\n+        createLoggingMeterRegistry(loggingInterval, localEndpoint, influxLineProtocolLoggingSink);\n+    }\n+\n+    /**\n+     * Configure the meter registry of type LoggingMeterRegistry. All the metrics registered\n+     * with this meter registry will be exported via provided logging sink with\n+     * the provided loggingInterval frequency.\n+     * @param sink A configured logging sink.\n+     * @param loggingInterval A duration between log appends for every metric.\n+     * @param localEndpoint A local endpoint to tag every metric with.\n+     */\n+    public static void createLoggingMeterRegistry(Duration loggingInterval,\n+                                                  String localEndpoint,\n+                                                  LoggingSink sink) {\n+        Supplier<Optional<MeterRegistry>> supplier = () -> {\n+            LoggingRegistryConfig config = new IntervalLoggingConfig(loggingInterval);\n+            LoggingMeterRegistry registry = LoggingMeterRegistry.builder(config)\n+                    .loggingSink(sink).build();\n+            registry.config().commonTags(\"endpoint\", localEndpoint);\n+            return Optional.of(registry);\n+        };\n+\n+        create(supplier);\n+    }\n+\n+    /**\n+     * Configure the default registry of type LoggingMeterRegistry.\n+     */\n+    public static void createLoggingMeterRegistry() {\n+        Supplier<Optional<MeterRegistry>> supplier = () -> Optional.of(new LoggingMeterRegistry());\n+        create(supplier);\n+    }\n+\n+    private static synchronized void create(Supplier<Optional<MeterRegistry>> meterRegistrySupplier) {\n+        if (!meterRegistry.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0NzgwOA==", "bodyText": "please add @NonNull lombok annotation", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498647808", "createdAt": "2020-10-02T07:05:31Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/loggingsink/DefaultLoggingSink.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.corfudb.common.metrics.micrometer.loggingsink;\n+\n+import lombok.AllArgsConstructor;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A default logging sink. It prints the line in the default format.\n+ */\n+@AllArgsConstructor\n+public class DefaultLoggingSink implements LoggingSink {\n+    private final Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0Nzk0NA==", "bodyText": "please add @nonnull lombok annotation", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498647944", "createdAt": "2020-10-02T07:05:57Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/loggingsink/InfluxLineProtocolLoggingSink.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.corfudb.common.metrics.micrometer.loggingsink;\n+\n+import com.google.common.collect.ImmutableList;\n+import lombok.AllArgsConstructor;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.LineTransformer;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.influx.ByteDistSummaryInfluxLineTransformer;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.influx.CounterInfluxLineTransformer;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.influx.GaugeInfluxLineTransformer;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.influx.LongRunningTaskInfluxLineTransformer;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.influx.TimerInfluxLineTransformer;\n+import org.slf4j.Logger;\n+\n+/**\n+ * This sink prints the lines to the log in the InfluxDb line protocol.\n+ * https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/\n+ */\n+@AllArgsConstructor\n+public class InfluxLineProtocolLoggingSink implements LoggingSink {\n+\n+    private final Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0ODMzMg==", "bodyText": "please add @NonNull lombok annotation", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498648332", "createdAt": "2020-10-02T07:07:02Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/protocoltransformer/LineTransformer.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.corfudb.common.metrics.micrometer.protocoltransformer;\n+\n+import com.google.common.collect.ImmutableList;\n+import lombok.AllArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Matches and transforms the line with one of the provided matcher transformers.\n+ */\n+@AllArgsConstructor\n+@Slf4j\n+public class LineTransformer {\n+    private final ImmutableList<MatcherTransformer> matcherTransformers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY0OTQwNw==", "bodyText": "please add @NonNull lombok annotation for all String fields", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498649407", "createdAt": "2020-10-02T07:10:05Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/protocoltransformer/influx/InfluxLineProtocolTransformer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.corfudb.common.metrics.micrometer.protocoltransformer.influx;\n+\n+import lombok.AllArgsConstructor;\n+import org.corfudb.common.metrics.micrometer.protocoltransformer.MatcherTransformer;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Matcher transformer that transforms the line into the InfluxDb line protocol.\n+ */\n+public interface InfluxLineProtocolTransformer extends MatcherTransformer {\n+    /**\n+     * Measurement, tagSet and fieldSet.\n+     */\n+    int NUM_GROUPS = 3;\n+\n+    /**\n+     * A definition of the InfluxDb data point.\n+     */\n+    @AllArgsConstructor\n+    class InfluxLineProtocolPoint {\n+        private final String measurement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1MDIyMg==", "bodyText": "ifPresent will work better", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r498650222", "createdAt": "2020-10-02T07:12:08Z", "author": {"login": "xnull"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InLogEntrySyncState.java", "diffHunk": "@@ -141,7 +154,13 @@ public void onEntry(LogReplicationState from) {\n                 logEntrySender.reset(fsm.getBaseSnapshot(), fsm.getAckedTimestamp());\n             }\n \n-            logEntrySyncFuture = fsm.getLogReplicationFSMWorkers().submit(() -> logEntrySender.send(transitionEventId));\n+            Runnable logEntrySendTask = () -> logEntrySender.send(transitionEventId);\n+\n+            if (senderTimer.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a498a7218a01c6b508683a28cc62239ea5b73248"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97cc60fdc2d1abcf02abb995673209377b749d3", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a97cc60fdc2d1abcf02abb995673209377b749d3", "committedDate": "2020-10-02T21:37:42Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3940b5a7efa8a4c949935bc30e2c1c9cc84d001d", "committedDate": "2020-10-05T20:52:17Z", "message": "Merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNTIyMTk3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-502522197", "createdAt": "2020-10-06T01:18:52Z", "commit": {"oid": "a97cc60fdc2d1abcf02abb995673209377b749d3"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMToyMDoyM1rOHcy2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoxMjo0MlrOHdeLCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1NTI3Mw==", "bodyText": "nit -> white space MeterRegistryProvider{", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r499955273", "createdAt": "2020-10-06T01:20:23Z", "author": {"login": "annym"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import org.corfudb.common.metrics.micrometer.loggingsink.InfluxLineProtocolLoggingSink;\n+import org.corfudb.common.metrics.micrometer.loggingsink.LoggingSink;\n+import org.slf4j.Logger;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A configuration class for a meter (metrics) registry.\n+ */\n+public class MeterRegistryProvider {\n+    private static Optional<MeterRegistry> meterRegistry = Optional.empty();\n+\n+    private MeterRegistryProvider() {\n+\n+    }\n+\n+    /**\n+     * Class that initializes the Meter Registry.\n+     */\n+    public static class MeterRegistryInitializer extends MeterRegistryProvider{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMDI4Ng==", "bodyText": "No need to pass lockAcquireSample, right? it's a class level variable.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500630286", "createdAt": "2020-10-06T22:24:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -529,16 +536,18 @@ public void processLockRelease() {\n         stopLogReplication();\n         // Signal Log Replication Server/Sink to stop receiving messages, leadership loss\n         interClusterReplicationService.getLogReplicationServer().setLeadership(false);\n+        recordLockRelease(lockAcquireSample);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMDkwMg==", "bodyText": "This only keeps metrics around duration of a lock, correct? Is it worth also collecting metrics around how many times the lock is acquired/released?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500630902", "createdAt": "2020-10-06T22:26:41Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -806,4 +814,18 @@ public void shutdown() {\n     private String getLocalHost() {\n         return NodeLocator.parseString(serverContext.getLocalEndpoint()).getHost();\n     }\n+\n+\n+    private Optional<LongTaskTimer.Sample> recordLockAcquire(ClusterRole role) {\n+        return MeterRegistryProvider.getInstance()\n+                .map(registry -> registry.more()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1Nzk2Ng==", "bodyText": "This seems to reflect the duration of sending a message. However, if no data is available this returns right away. So it could gather some incorrect data, right? Let's say the metric collection looks like 10s, 0s, 0s, 0s, 0s... because no further data was found to send.. then it would look like the average is 2s, when in fact those 0s are not valid... Probably the correct place to gather this metric is the sendWithBuffering in the SendBufferManager class or the send method in the CorfuDataSender... let me know your thoughts...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500657966", "createdAt": "2020-10-06T23:49:00Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InLogEntrySyncState.java", "diffHunk": "@@ -171,4 +191,18 @@ public UUID getTransitionEventId() {\n     public LogReplicationStateType getType() {\n         return LogReplicationStateType.IN_LOG_ENTRY_SYNC;\n     }\n+\n+    private Optional<AtomicLong> configureAcksCounter() {\n+        return MeterRegistryProvider.getInstance()\n+                .map(registry -> registry.gauge(\"logreplication.messages\",\n+                        ImmutableList.of(Tag.of(\"replication.type\", \"logentry\")),\n+                        new AtomicLong(0)));\n+    }\n+\n+    private Optional<Timer> configureSenderTimer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTIyOA==", "bodyText": "I believe this metric is not correct.. If placed here it represents the number of completed Snapshot Sync and not the number of acks for snapshot sync (like the tag indicates)... Consider this case, a snapshot sync which ends up sending 10 different messages, it will reach this point only at the end of the 10 messages being sent, so it won't count the 10 acks, but only after the 10 acks are received. I would suggest to change the name of the metric (as I do believe it is useful) and probably add the ack in the actual place where ACKs are received.. which might be under processAcks in SenderBufferManager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500661228", "createdAt": "2020-10-06T23:59:30Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InSnapshotSyncState.java", "diffHunk": "@@ -103,6 +117,14 @@ public LogReplicationState processEvent(LogReplicationEvent event) throws Illega\n                 waitSnapshotApplyState.setBaseSnapshotTimestamp(snapshotSender.getBaseSnapshotTimestamp());\n                 fsm.setBaseSnapshot(event.getMetadata().getLastTransferredBaseSnapshot());\n                 fsm.setAckedTimestamp(event.getMetadata().getLastLogEntrySyncedTimestamp());\n+                snapshotSyncAcksCounter.ifPresent(AtomicLong::getAndIncrement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2Mjc1NQ==", "bodyText": "I believe we would have the same issue described InLogEntrySyncState here.. the transmit will not reflect accurately the time for sending a snapshot message as it might not send anything at all...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500662755", "createdAt": "2020-10-07T00:04:40Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/InSnapshotSyncState.java", "diffHunk": "@@ -149,9 +171,14 @@ public void onEntry(LogReplicationState from) {\n             if (from != this) {\n                 snapshotSender.reset();\n                 fsm.getAckReader().markSnapshotSyncInfoOngoing(forcedSnapshotSync, transitionEventId);\n-            }\n+                snapshotSyncTimerSample = MeterRegistryProvider.getInstance().map(Timer::start);\n \n-            transmitFuture = fsm.getLogReplicationFSMWorkers().submit(() -> snapshotSender.transmit(transitionEventId));\n+            }\n+            Runnable snapShotSendTask = () -> snapshotSender.transmit(transitionEventId);\n+            if (senderTimer.isPresent()) {\n+                snapShotSendTask = senderTimer.get().wrap(snapShotSendTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2Mzc4MQ==", "bodyText": "By looking at this, maybe another good metric to expose is in average how many opaque entries are sent per message... opaqueEntryList.size()", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500663781", "createdAt": "2020-10-07T00:08:19Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -197,12 +204,17 @@ public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException\n                 }\n \n                 lastOpaqueEntry = txOpaqueStream.next();\n+                deltaCounter.ifPresent(Counter::increment);\n+\n                 lastOpaqueEntryValid = isValidTransactionEntry(lastOpaqueEntry);\n                 currentProcessedEntryMetadata = new StreamIteratorMetadata(txOpaqueStream.txStream.pos(), lastOpaqueEntryValid);\n             }\n \n             log.trace(\"Generate LogEntryDataMessage size {} with {} entries for maxDataSizePerMsg {}. lastEntry size {}\",\n                     currentMsgSize, opaqueEntryList.size(), maxDataSizePerMsg, lastOpaqueEntry == null ? 0 : currentEntrySize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NTA5Nw==", "bodyText": "I believe this count should be after L.209 only if lastOpaqueEntryValid is true... cause if not, we will be counting transaction entries which are not intended to be replicated. For instance, consider 5 entries in the transaction stream, but only 1 is valid (has streams to replicate).. we would be counting 5 deltas when we should really count 1... or maybe we can count both (in different metrics)... to know which proportion of the transaction stream ends up being required for replication (1 out of 5 in this case).. I think that could be a nice way of analyzing the data available... to see how noisy the tx stream can be with regards to the data to be replicated..", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r500665097", "createdAt": "2020-10-07T00:12:42Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/logreader/StreamsLogEntryReader.java", "diffHunk": "@@ -197,12 +204,17 @@ public LogReplicationEntry read(UUID logEntryRequestId) throws TrimmedException\n                 }\n \n                 lastOpaqueEntry = txOpaqueStream.next();\n+                deltaCounter.ifPresent(Counter::increment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3940b5a7efa8a4c949935bc30e2c1c9cc84d001d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abcba255d32368a4683729acf3a1ddab49ccf438", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/abcba255d32368a4683729acf3a1ddab49ccf438", "committedDate": "2020-10-08T01:30:37Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe5cec55c28bbf6458bf49acc77db34901a6990", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/bbe5cec55c28bbf6458bf49acc77db34901a6990", "committedDate": "2020-10-08T04:18:34Z", "message": "fix timed send"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b69d07360a26250f5fa54f10761546aafc0d49c", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9b69d07360a26250f5fa54f10761546aafc0d49c", "committedDate": "2020-10-08T19:42:43Z", "message": "Some fixes and readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTE3MTUz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505117153", "createdAt": "2020-10-08T19:53:21Z", "commit": {"oid": "9b69d07360a26250f5fa54f10761546aafc0d49c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9718b948b51b6ac301ad9b6ffa462f6721b33b24", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9718b948b51b6ac301ad9b6ffa462f6721b33b24", "committedDate": "2020-10-08T19:57:25Z", "message": "Coadacy fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f8cf3bd36908393fa341ea4bbe99f437e6b59ec8", "committedDate": "2020-10-08T20:04:34Z", "message": "Merge branch 'master' into lr-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDQx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131041", "createdAt": "2020-10-08T20:13:19Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoxOVrOHeuxLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoxOVrOHeuxLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTU4MQ==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985581", "createdAt": "2020-10-08T20:13:19Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.\n+  * Number of acks, distinguished by replication type (snapshot, logentry): **logreplication.acks**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDQ4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131048", "createdAt": "2020-10-08T20:13:20Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMFrOHeuxMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMFrOHeuxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTU4NQ==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985585", "createdAt": "2020-10-08T20:13:20Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDU4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131058", "createdAt": "2020-10-08T20:13:21Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMVrOHeuxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMVrOHeuxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTU5MQ==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985591", "createdAt": "2020-10-08T20:13:21Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDY5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131069", "createdAt": "2020-10-08T20:13:22Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMlrOHeuxQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyMlrOHeuxQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTYwMw==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985603", "createdAt": "2020-10-08T20:13:22Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDc4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131078", "createdAt": "2020-10-08T20:13:23Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyM1rOHeuxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyM1rOHeuxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTYxMg==", "bodyText": "Codacy found an issue: The utility class name 'MeterRegistryProvider' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)'", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985612", "createdAt": "2020-10-08T20:13:23Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/MeterRegistryProvider.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry;\n+import io.micrometer.core.instrument.logging.LoggingRegistryConfig;\n+import org.corfudb.common.metrics.micrometer.loggingsink.InfluxLineProtocolLoggingSink;\n+import org.corfudb.common.metrics.micrometer.loggingsink.LoggingSink;\n+import org.slf4j.Logger;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * A configuration class for a meter (metrics) registry.\n+ */\n+public class MeterRegistryProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMDkw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131090", "createdAt": "2020-10-08T20:13:24Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNFrOHeuxVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNFrOHeuxVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTYyMA==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985620", "createdAt": "2020-10-08T20:13:24Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.\n+  * Number of acks, distinguished by replication type (snapshot, logentry): **logreplication.acks**.\n+  * Number of messages sent, distinguished by replication type (snapshot, logentry): **logreplication.messages**.\n+  * Number of opaque entries per message (rate, mean, max): **logreplication.opaque.count_valid**.\n+  * Number of overall opaque entries (rate, mean, max): **logreplication.opaque.count_total**.\n+  * Number of valid opaque entries (rate, mean, max): **logreplication.opaque.count_valid**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTA3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131107", "createdAt": "2020-10-08T20:13:25Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNVrOHeuxYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNVrOHeuxYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTYzMw==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985633", "createdAt": "2020-10-08T20:13:25Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.\n+  * Number of acks, distinguished by replication type (snapshot, logentry): **logreplication.acks**.\n+  * Number of messages sent, distinguished by replication type (snapshot, logentry): **logreplication.messages**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTE2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131116", "createdAt": "2020-10-08T20:13:26Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNlrOHeuxaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNlrOHeuxaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY0MA==", "bodyText": "Codacy found an issue: Double quote to prevent globbing and word splitting.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985640", "createdAt": "2020-10-08T20:13:26Z", "author": {"login": "corfudb-bot"}, "path": "scripts/corfu_replication_server.sh", "diffHunk": "@@ -35,10 +35,13 @@ then\n     CLASSPATH=`cygpath -wp \"$CLASSPATH\"`\n fi\n \n+if [ \"$METRICS_CONFIG_FILE\" != \"\" ]; then\n+  LOGBACK_CONFIGURATION=\"-Dlogback.configurationFile=${METRICS_CONFIG_FILE}\"\n+  JAVA=\"$JAVA $LOGBACK_CONFIGURATION\"\n+fi\n \n # default heap for corfudb\n CORFUDB_HEAP=\"${CORFUDB_HEAP:-2000}\"\n export JVMFLAGS=\"-Xmx${CORFUDB_HEAP}m $SERVER_JVMFLAGS\"\n \n-\n-\"$JAVA\" -cp \"$CLASSPATH\" $JVMFLAGS org.corfudb.infrastructure.logreplication.infrastructure.CorfuInterClusterReplicationServer $*\n+$JAVA -cp \"$CLASSPATH\" $JVMFLAGS org.corfudb.infrastructure.logreplication.infrastructure.CorfuInterClusterReplicationServer $*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTMx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131131", "createdAt": "2020-10-08T20:13:26Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNlrOHeuxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyNlrOHeuxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY1OQ==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985659", "createdAt": "2020-10-08T20:13:26Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTQ1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131145", "createdAt": "2020-10-08T20:13:27Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyN1rOHeuxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyN1rOHeuxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY2OA==", "bodyText": "Codacy found an issue: [no-heading-punctuation] Don\u2019t add a trailing : to headings", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985668", "createdAt": "2020-10-08T20:13:27Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTU3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131157", "createdAt": "2020-10-08T20:13:28Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyOFrOHeuxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyOFrOHeuxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY3Nw==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985677", "createdAt": "2020-10-08T20:13:28Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTY0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131164", "createdAt": "2020-10-08T20:13:29Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyOVrOHeuxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzoyOVrOHeuxkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY4MA==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985680", "createdAt": "2020-10-08T20:13:29Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.\n+  * Number of acks, distinguished by replication type (snapshot, logentry): **logreplication.acks**.\n+  * Number of messages sent, distinguished by replication type (snapshot, logentry): **logreplication.messages**.\n+  * Number of opaque entries per message (rate, mean, max): **logreplication.opaque.count_valid**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTc0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131174", "createdAt": "2020-10-08T20:13:30Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMFrOHeuxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMFrOHeuxlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY4Nw==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985687", "createdAt": "2020-10-08T20:13:30Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTgz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131183", "createdAt": "2020-10-08T20:13:31Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMVrOHeuxnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMVrOHeuxnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY5Mw==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985693", "createdAt": "2020-10-08T20:13:31Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.\n+  * Duration of sending a message overall (throughput, mean and max): **logreplication.rtt.seconds**.\n+  * Number of snapshot syncs completed. **logreplication.snapshot.completed.count**.\n+  * Duration of completing a snapshot sync in seconds (throughput, mean and max): **logreplication.snapshot.duration**.\n+  * Number of acks, distinguished by replication type (snapshot, logentry): **logreplication.acks**.\n+  * Number of messages sent, distinguished by replication type (snapshot, logentry): **logreplication.messages**.\n+  * Number of opaque entries per message (rate, mean, max): **logreplication.opaque.count_valid**.\n+  * Number of overall opaque entries (rate, mean, max): **logreplication.opaque.count_total**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTMxMTk0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#pullrequestreview-505131194", "createdAt": "2020-10-08T20:13:31Z", "commit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMVrOHeuxow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxMzozMVrOHeuxow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NTY5OQ==", "bodyText": "Codacy found an issue: [list-item-bullet-indent] Incorrect indentation before bullet: remove 2 spaces", "url": "https://github.com/CorfuDB/CorfuDB/pull/2778#discussion_r501985699", "createdAt": "2020-10-08T20:13:31Z", "author": {"login": "corfudb-bot"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/README.md", "diffHunk": "@@ -0,0 +1,14 @@\n+### Current metrics collected for LR:\n+\n+  * Message size in bytes (throughput, mean and max), distinguished by replication type (snapshot, logentry): **logreplication.message.size.bytes**.\n+  * Duration of holding a leadership lock in seconds, distinguished by role (active, standby): **logreplication.lock.duration**.\n+  * Number of times a leadership lock was acquired, distinguised by role (active, standby): **logreplication.lock.acquire.count**.\n+  * Duration of sending a logentry in seconds (throughput, mean and max), distinguished by replication type (snapshot, logentry) and status (success, failure): **logreplication.sender.duration.seconds**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8cf3bd36908393fa341ea4bbe99f437e6b59ec8"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4073, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}