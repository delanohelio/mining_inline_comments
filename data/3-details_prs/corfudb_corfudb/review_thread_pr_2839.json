{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODg1OTU1", "number": 2839, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyNzo0NlrOFCGm3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowNjo1NFrOFCnojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzQ5NzI0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/JVMMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzoyNzo0NlrOIBFR-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozMzo0OVrOIBFZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNjAxMA==", "bodyText": "maybe we should use micrometer's JVM metrics? https://micrometer.io/docs/ref/jvm", "url": "https://github.com/CorfuDB/CorfuDB/pull/2839#discussion_r538006010", "createdAt": "2020-12-08T03:27:46Z", "author": {"login": "xnull"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/JVMMetrics.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import java.util.Optional;\n+import lombok.Data;\n+import lombok.Getter;\n+import sun.management.HotspotRuntimeMBean;\n+import sun.management.ManagementFactoryHelper;\n+\n+/** Provides JVM level metrics. */\n+\n+public final class JVMMetrics {\n+\n+    @Getter(lazy=true)\n+    private final static HotspotRuntimeMBean runtimeMBean = ManagementFactoryHelper.getHotspotRuntimeMBean();\n+\n+    @Data\n+    private static class SafePointStats {\n+        long safepointTime;\n+        long safepointCount;\n+    }\n+\n+    public static void register(Optional<MeterRegistry> metricsRegistry) {\n+\n+        if (metricsRegistry.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "537f5f1a7bb4fe46d5432cdb24750862206549c5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwODAwMA==", "bodyText": "I checked micrometer's jvm metrics, but they don't collect TotalSafepointTime. Maybe because its a \"private\" API.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2839#discussion_r538008000", "createdAt": "2020-12-08T03:33:49Z", "author": {"login": "Maithem"}, "path": "common/src/main/java/org/corfudb/common/metrics/micrometer/JVMMetrics.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.corfudb.common.metrics.micrometer;\n+\n+import io.micrometer.core.instrument.Gauge;\n+import io.micrometer.core.instrument.MeterRegistry;\n+import java.util.Optional;\n+import lombok.Data;\n+import lombok.Getter;\n+import sun.management.HotspotRuntimeMBean;\n+import sun.management.ManagementFactoryHelper;\n+\n+/** Provides JVM level metrics. */\n+\n+public final class JVMMetrics {\n+\n+    @Getter(lazy=true)\n+    private final static HotspotRuntimeMBean runtimeMBean = ManagementFactoryHelper.getHotspotRuntimeMBean();\n+\n+    @Data\n+    private static class SafePointStats {\n+        long safepointTime;\n+        long safepointCount;\n+    }\n+\n+    public static void register(Optional<MeterRegistry> metricsRegistry) {\n+\n+        if (metricsRegistry.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwNjAxMA=="}, "originalCommit": {"oid": "537f5f1a7bb4fe46d5432cdb24750862206549c5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjkwODI4OnYy", "diffSide": "LEFT", "path": "infrastructure/src/main/resources/logback.prod.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjowNjo1NFrOIB4Ypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMjoxNjo0OFrOIB4ufQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0MzMwMg==", "bodyText": "@PavelZaytsev this is a bug right? PR #2841 will disable the server metrics.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2839#discussion_r538843302", "createdAt": "2020-12-08T22:06:54Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/resources/logback.prod.xml", "diffHunk": "@@ -50,7 +50,7 @@\n     <root level=\"info\">\n         <appender-ref ref=\"async_file\"/>\n     </root>\n-    <logger additivity=\"false\" level=\"info\" name=\"org.corfudb.metricsdata\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "680c163f98dadfbcbd94b12c7bbcc05a3d2832b4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0ODg5Mw==", "bodyText": "This line should be 'debug' because in MeterRegistryInitializer we pass logger consumer as logger.debug. It needs to be whatever the consumer we are passing to create a registry", "url": "https://github.com/CorfuDB/CorfuDB/pull/2839#discussion_r538848893", "createdAt": "2020-12-08T22:16:48Z", "author": {"login": "PavelZaytsev"}, "path": "infrastructure/src/main/resources/logback.prod.xml", "diffHunk": "@@ -50,7 +50,7 @@\n     <root level=\"info\">\n         <appender-ref ref=\"async_file\"/>\n     </root>\n-    <logger additivity=\"false\" level=\"info\" name=\"org.corfudb.metricsdata\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0MzMwMg=="}, "originalCommit": {"oid": "680c163f98dadfbcbd94b12c7bbcc05a3d2832b4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1817, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}