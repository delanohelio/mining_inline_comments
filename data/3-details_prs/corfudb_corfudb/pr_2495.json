{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MDE4MTk3", "number": 2495, "title": "CorfuQueue: Capture commit token & fix up Queue for ordering", "bodyText": "Overview\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\nRandomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma maxiaoqin2005@gmail.com\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-03-31T02:13:46Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495", "merged": true, "mergeCommit": {"oid": "25ed0fc9ecca365635c46f59a4f6e2718d814d24"}, "closed": true, "closedAt": "2020-04-01T07:10:12Z", "author": {"login": "hisundar"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS9GG8ABqjMxODE3MzE0MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTPpUYgBqjMxODYwODYyNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16f911f0e2971c8cea5d3b1a704d6466a49cb3f7", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/16f911f0e2971c8cea5d3b1a704d6466a49cb3f7", "committedDate": "2020-03-31T02:13:16Z", "message": "CorfuQueue: Capture commit token & fix up Queue for ordering"}, "afterCommit": {"oid": "4a325ac417ba93aef1ead481d394a44f4b24f7df", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4a325ac417ba93aef1ead481d394a44f4b24f7df", "committedDate": "2020-03-31T06:24:34Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a325ac417ba93aef1ead481d394a44f4b24f7df", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/4a325ac417ba93aef1ead481d394a44f4b24f7df", "committedDate": "2020-03-31T06:24:34Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably."}, "afterCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "committedDate": "2020-03-31T17:38:45Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTYyNzQ3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-384962747", "createdAt": "2020-03-31T17:42:56Z", "commit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0Mjo1NlrOF-hCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0Mjo1NlrOF-hCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5NzMzMA==", "bodyText": "is it possible to get rid of setters?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401097330", "createdAt": "2020-03-31T17:42:56Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -76,23 +77,21 @@ public int size() {\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTY2ODgx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-384966881", "createdAt": "2020-03-31T17:48:29Z", "commit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0ODoyOVrOF-hP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0ODoyOVrOF-hP1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMDc1OQ==", "bodyText": "When you implement equals method you have to implement a hashCode method, if not then functionality will be broken.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401100759", "createdAt": "2020-03-31T17:48:29Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -123,11 +114,11 @@ public int compareTo(CorfuRecordId o) {\n          * @return\n          */\n         public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+            return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTY4Mzcz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-384968373", "createdAt": "2020-03-31T17:50:31Z", "commit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1MDozMlrOF-hUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1NzoyN1rOF-hlpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMjAxMw==", "bodyText": "Also, please add @Owerride", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401102013", "createdAt": "2020-03-31T17:50:32Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -123,11 +114,11 @@ public int compareTo(CorfuRecordId o) {\n          * @return\n          */\n         public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+            return (epoch == o.getEpoch()) && (sequence == o.getSequence()) && entryId == o.getEntryId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDIzMw==", "bodyText": "You must be very careful with setters. They always bring much more complexity to the code, make it fragile, more complicated to analyze and there are always problems with concurrency.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401104233", "createdAt": "2020-03-31T17:54:02Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -172,6 +180,7 @@ public CorfuRecordId enqueue(E e) {\n          * because if this method is wrapped in a transaction, the order is established only later.\n          */\n         @Getter\n+        @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNDY1NQ==", "bodyText": "why not to pass CorfuRecordId as a parameter?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401104655", "createdAt": "2020-03-31T17:54:42Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -181,8 +190,8 @@ public String toString() {\n             return String.format(\"%s=>%s\", recordId, entry);\n         }\n \n-        CorfuQueueRecord(long ordering, long entryId, E entry) {\n-            this.recordId = new CorfuRecordId(ordering, entryId);\n+        CorfuQueueRecord(long epoch, long ordering, long entryId, E entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjA5MQ==", "bodyText": "Please don't use TransactionalContext as a prefix. Please add TransactionalContext to imports", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401106091", "createdAt": "2020-03-31T17:57:01Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +250,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener);\n+\n+    @Getter\n+    private List<TransactionalContext.PreCommitListener> preCommitListeners = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNjM0Mw==", "bodyText": "please add TransactionalContext to imports", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401106343", "createdAt": "2020-03-31T17:57:27Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/SnapshotTransactionalContext.java", "diffHunk": "@@ -85,4 +85,9 @@ public SnapshotTransactionalContext(Transaction transaction) {\n     public void addTransaction(AbstractTransactionalContext tc) {\n         throw new UnsupportedOperationException(\"Can't merge into a readonly txn (yet)\");\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2f4e336eb5cdf4bbd5c4adba3962548f205f7454", "committedDate": "2020-03-31T17:38:45Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably."}, "afterCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "committedDate": "2020-03-31T18:52:13Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDI5MDE4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385029018", "createdAt": "2020-03-31T19:13:57Z", "commit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzo1N1rOF-kZgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMzo1N1rOF-kZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MjM4Nw==", "bodyText": "Actually instead of bolierplate code you should use @EqualsAndHashCode annotation from lombok. Can you make that change?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401152387", "createdAt": "2020-03-31T19:13:57Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -76,58 +78,56 @@ public int size() {\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter\n+        @Getter\n+        private long epoch;\n \n-        /**\n-         * @return Return only the unique part of the id without the ordering\n-         */\n-        public long getEntryId() {\n-            return id.getLeastSignificantBits();\n-        }\n+        @Setter\n+        @Getter\n+        private long sequence;\n \n-        /**\n-         * @return Return only the ordering part of the entry without the id.\n-         */\n-        public long getOrdering() {\n-            return id.getMostSignificantBits();\n+        @Getter\n+        private long entryId;\n+\n+        public CorfuRecordId(long epoch, long sequence, long entryId) {\n+            this.epoch = epoch;\n+            this.sequence = sequence;\n+            this.entryId = entryId;\n         }\n \n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n-         * @throws IllegalArgumentException if the two Ids are not comparable.\n          * @return results of comparison.\n          */\n         @Override\n         public int compareTo(CorfuRecordId o) {\n-            if (this.id.getMostSignificantBits() == 0 && o.id.getMostSignificantBits() != 0) {\n-                throw new IllegalArgumentException(\n-                        \"Incompatible CorfuRecordId comparison: ordering unavailable\");\n-            }\n-            if (this.id.getMostSignificantBits() !=0 && o.id.getMostSignificantBits() == 0) {\n-               throw new IllegalArgumentException(\n-                       \"Incompatible CorfuRecordId comparison: order of compared object unknown\");\n-            }\n-            if (this.id.getLeastSignificantBits() == o.id.getLeastSignificantBits()) {\n-                return 0;\n-            }\n-            return id.compareTo(o.id);\n+            return Comparator.comparing(CorfuRecordId::getEpoch)\n+                    .thenComparing(CorfuRecordId::getSequence)\n+                    .thenComparing(CorfuRecordId::getEntryId)\n+                    .compare(this, o);\n         }\n \n         /**\n-         * It is ok to check equality of a CorfuRecordId with ordering data against one without.\n-         * @param o object to compare against.\n+         * It is NOT ok to check equality of a CorfuRecordId with ordering data against one without.\n+         * @param otherObj object to compare against.\n          * @return\n          */\n-        public boolean equals(CorfuRecordId o) {\n-            return id.getLeastSignificantBits() == o.id.getLeastSignificantBits();\n+        @Override\n+        public boolean equals(Object otherObj) {\n+            if (this == otherObj) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDI5MzQw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385029340", "createdAt": "2020-03-31T19:14:25Z", "commit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDUzMTg2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385053186", "createdAt": "2020-03-31T19:49:40Z", "commit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0", "committedDate": "2020-03-31T18:52:13Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}, "afterCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/45b6120022507bd7ee1a2133c65de06d4286d7d8", "committedDate": "2020-03-31T19:49:46Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDMwNzc3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385030777", "createdAt": "2020-03-31T19:16:30Z", "commit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxNjozMFrOF-kfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTo1Mzo0MlrOF-lwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Mzg2Mg==", "bodyText": "Is it better to use invalid epoch and sequence instead of 0 ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401153862", "createdAt": "2020-03-31T19:16:30Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NDk3MQ==", "bodyText": "Private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401154971", "createdAt": "2020-03-31T19:18:29Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NTMwMg==", "bodyText": "Private", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401155302", "createdAt": "2020-03-31T19:19:03Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +149,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Nzg1OQ==", "bodyText": "ordering -> sequence ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401157859", "createdAt": "2020-03-31T19:23:36Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -181,15 +199,28 @@ public String toString() {\n             return String.format(\"%s=>%s\", recordId, entry);\n         }\n \n-        CorfuQueueRecord(long ordering, long entryId, E entry) {\n-            this.recordId = new CorfuRecordId(ordering, entryId);\n+        CorfuQueueRecord(long epoch, long ordering, long entryId, E entry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1OTU2MA==", "bodyText": "Fix Indent", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401159560", "createdAt": "2020-03-31T19:26:25Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NTU4Mg==", "bodyText": "You can put a .limit(maxEntries) after .filter() to avoid collecting and sorting all entries and ++index. This should be more efficient.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401165582", "createdAt": "2020-03-31T19:37:07Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+                r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n-        for (Long entryId : corfuTable.keySet().stream()\n-                .filter(e -> e > entriesAfter)\n-                .sorted().collect(Collectors.toList())) {\n+        for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n+                .filter(e -> e.getValue().getRecordId().compareTo(entriesAfter) > 0)\n+                .sorted(recordIdComparator).collect(Collectors.toList())) {\n             if (++index >= maxEntries) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NzAzOQ==", "bodyText": "Is it better to use invalid epoch and sequence instead of 0 ? Same for the rests", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401167039", "createdAt": "2020-03-31T19:39:47Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -285,23 +275,23 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(0L, MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0180e37c00bab9fe63b72f528b4fe96ddb0f6b0"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NDczMw==", "bodyText": "I'm wondering if this is correct in case of nested transactions. In that case we would merge the read/write set in the child transaction's context into parent's context, however the preCommitListeners seems not doing this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401174733", "createdAt": "2020-03-31T19:53:42Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +251,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(PreCommitListener preCommitListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTgwOTIw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-384980920", "createdAt": "2020-03-31T18:07:31Z", "commit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODowNzozMVrOF-h9Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDoyMjo1NlrOF-mxpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExMjM5MA==", "bodyText": "update method java doc, no returned value.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401112390", "createdAt": "2020-03-31T18:07:31Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExMzYxNQ==", "bodyText": "Can we have these two values '0', as statics with suggestive names that ease readability? Also, why do we enforce epoch to be 0? would it be better to have negative which means non-initialized?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401113615", "createdAt": "2020-03-31T18:09:33Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMTk0Ng==", "bodyText": "Add class description?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401121946", "createdAt": "2020-03-31T18:23:45Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyMjk2Mw==", "bodyText": "perhaps add a trace level logging line here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401122963", "createdAt": "2020-03-31T18:25:26Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                this.queueRecord = queueRecord;\n+            }\n+            @Override\n+            public void preCommitCallback(TokenResponse tokenResponse) {\n+                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNDk4Mg==", "bodyText": "Can we add a comment making clear that enqueue's occurring outside the transactional scope will not be guaranteed ordering.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401124982", "createdAt": "2020-03-31T18:28:39Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -149,10 +140,27 @@ public String toString() {\n      *          known until the transaction commits.\n      *          The ID returned here is only really useful for remove() operations.\n      */\n-    public CorfuRecordId enqueue(E e) {\n+    public void enqueue(E e) {\n         final Long id = guidGenerator.nextLong();\n-        corfuTable.put(id, e);\n-        return new CorfuRecordId(0, id);\n+        CorfuQueueRecord<E> queueEntry = new CorfuQueueRecord<E>(0, 0, id, e);\n+        class QueueEntryAddressGetter implements TransactionalContext.PreCommitListener {\n+            CorfuQueueRecord<E> queueRecord;\n+            QueueEntryAddressGetter(CorfuQueueRecord<E> queueRecord) {\n+                this.queueRecord = queueRecord;\n+            }\n+            @Override\n+            public void preCommitCallback(TokenResponse tokenResponse) {\n+                queueRecord.getRecordId().setEpoch(tokenResponse.getEpoch());\n+                queueRecord.getRecordId().setSequence(tokenResponse.getSequence());\n+            }\n+        }\n+        // If we are in a transaction, then we need the commit address of this transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f4e336eb5cdf4bbd5c4adba3962548f205f7454"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NTc4OA==", "bodyText": "If the copy is after the comparison, wouldn't it skip one. For instance maxEntries =1, on the first entry it would immediately break and not add the single entry. Or change to index++", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401175788", "createdAt": "2020-03-31T19:55:34Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -242,41 +253,20 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n             );\n         }\n \n-        // Bind the iteration order to a snapshot of the Queue using a transaction.\n-        long snapshotVersion;\n-        boolean startedNewTransaction = false;\n-        if (TransactionalContext.isInTransaction()) {\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-        } else {\n-            runtime.getObjectsView().TXBuild().type(TransactionType.WRITE_AFTER_WRITE)\n-                    .build()\n-                    .begin();\n-            snapshotVersion = TransactionalContext.getCurrentContext()\n-                    .getSnapshotTimestamp().getSequence();\n-            startedNewTransaction = true;\n-        }\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n \n+    Comparator<Map.Entry<Long, CorfuQueueRecord<E>>> recordIdComparator = (r1, r2) ->\n+                r1.getValue().getRecordId().compareTo(r2.getValue().recordId);\n         int index = 0;\n-        for (Long entryId : corfuTable.keySet().stream()\n-                .filter(e -> e > entriesAfter)\n-                .sorted().collect(Collectors.toList())) {\n+        for (Map.Entry<Long, CorfuQueueRecord<E>> entry : corfuTable.entryStream()\n+                .filter(e -> e.getValue().getRecordId().compareTo(entriesAfter) > 0)\n+                .sorted(recordIdComparator).collect(Collectors.toList())) {\n             if (++index >= maxEntries) {\n                 break;\n             }\n-            // Note that index is already limited to fit within MAX_BITS_FOR_INDEX\n-            long ordering = (snapshotVersion << MAX_BITS_FOR_INDEX) | index;\n-            CorfuQueueRecord<E> record = new CorfuQueueRecord<>(\n-                    ordering, entryId, corfuTable.get(entryId)\n-            );\n-            copy.add(record);\n-        }\n-        // Given that we are using a WRITE_AFTER_WRITE on a read-only txn, we expect no aborts.\n-        if (startedNewTransaction) {\n-            runtime.getObjectsView().TXEnd();\n+            copy.add(entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3NjU0NA==", "bodyText": "can we do the same, declare statics so it is easy to follow this init..", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401176544", "createdAt": "2020-03-31T19:56:58Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -285,23 +275,23 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n      * @return all the entries in the Queue\n      */\n     public List<CorfuQueueRecord<E>> entryList() {\n-        return this.entryList(0L, MAX_INDEX_ENTRIES);\n+        return this.entryList(new CorfuRecordId(0,0,0), MAX_INDEX_ENTRIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4NjM3Mw==", "bodyText": "add trace or debug logging?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401186373", "createdAt": "2020-03-31T20:14:30Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/OptimisticTransactionalContext.java", "diffHunk": "@@ -286,4 +286,9 @@ public long getConflictSetAndCommit(ConflictSetInfo conflictSet) {\n         log.trace(\"Commit[{}] Written to {}\", this, address);\n         return address;\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {\n+        this.getPreCommitListeners().add(preCommitListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MTMzNA==", "bodyText": "add some logging?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401191334", "createdAt": "2020-03-31T20:22:56Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/StreamsView.java", "diffHunk": "@@ -168,6 +168,17 @@ public long append(@Nonnull Object object, @Nullable TxResolutionInfo conflictIn\n             }\n \n             try {\n+                if (TransactionalContext.isInTransaction()) {\n+                    // If this transaction has entries that wish to capture the committed address\n+                    // invoke its preCommitCallbacks with the tokenResponse from the sequencer.\n+                    // Note that we might invoke the same method multiple times on retries,\n+                    // which means the preCommitCallback must be idempotent.\n+                    TokenResponse finalTokenResponse = tokenResponse;\n+                    TransactionalContext.getRootContext()\n+                            .getPreCommitListeners()\n+                            .forEach(e -> e.preCommitCallback(finalTokenResponse));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45b6120022507bd7ee1a2133c65de06d4286d7d8", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/45b6120022507bd7ee1a2133c65de06d4286d7d8", "committedDate": "2020-03-31T19:49:46Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}, "afterCommit": {"oid": "0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "committedDate": "2020-03-31T20:28:12Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0f15401bccd5ef01c58fe2e345247aaf2f0f03e7", "committedDate": "2020-03-31T20:28:12Z", "message": "Add test case for both inorder and our of order between enqueue op and txEnd."}, "afterCommit": {"oid": "facf49eaf3e1b3b25531872af891203fa18b6cb9", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/facf49eaf3e1b3b25531872af891203fa18b6cb9", "committedDate": "2020-03-31T20:31:52Z", "message": "Add test case for both inorder and out of order between enqueue op and txEnd."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "facf49eaf3e1b3b25531872af891203fa18b6cb9", "author": {"user": {"login": "xiaoqin2012", "name": "Xiaoqin Ma"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/facf49eaf3e1b3b25531872af891203fa18b6cb9", "committedDate": "2020-03-31T20:31:52Z", "message": "Add test case for both inorder and out of order between enqueue op and txEnd."}, "afterCommit": {"oid": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/60dad7d429b2bee6e3701e8d4e593f713965c1b1", "committedDate": "2020-03-31T20:57:34Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60dad7d429b2bee6e3701e8d4e593f713965c1b1", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/60dad7d429b2bee6e3701e8d4e593f713965c1b1", "committedDate": "2020-03-31T20:57:34Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}, "afterCommit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e3990910593367ba839bb9968c170516443a1ff5", "committedDate": "2020-03-31T22:12:41Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTU2MjY3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385156267", "createdAt": "2020-03-31T22:45:11Z", "commit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo0NToxMlrOF-q44A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo0NToxMlrOF-q44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1ODcyMA==", "bodyText": "Looks like you are still using 0, 0 for non-transactional entries (the else branch in enqueue) ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401258720", "createdAt": "2020-03-31T22:45:12Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -75,59 +80,55 @@ public int size() {\n      * with their snapshot+index id (also a long) which represents a global comparable ordering.\n      * This class encapsulates these two longs into one Id and add rules on comparability.\n      */\n+    @EqualsAndHashCode\n     public static class CorfuRecordId implements Comparable<CorfuRecordId> {\n-        private final UUID id;\n-        public CorfuRecordId(long ordering, long uniqueId) {\n-            this.id = new UUID(ordering, uniqueId);\n-        }\n+        @Setter\n+        @Getter\n+        private long epoch;\n \n-        /**\n-         * @return Return only the unique part of the id without the ordering\n-         */\n-        public long getEntryId() {\n-            return id.getLeastSignificantBits();\n+        @Setter\n+        @Getter\n+        private long sequence;\n+\n+        @Getter\n+        private long entryId;\n+\n+        public CorfuRecordId(long epoch, long sequence, long entryId) {\n+            this.epoch = epoch;\n+            this.sequence = sequence;\n+            this.entryId = entryId;\n         }\n \n         /**\n-         * @return Return only the ordering part of the entry without the id.\n+         * @return Pack CorfuRecordId into a 16 byte UUID\n+         * Q: Is it safe?\n+         * At the rate of 2ms per transaction, sequence will take  69 years to rollover.\n+         * At the rate of 1 cluster reconfig per minute, epoch will take 31 years to rollover.\n          */\n-        public long getOrdering() {\n-            return id.getMostSignificantBits();\n+        public UUID asUUID() {\n+            final int BITS_FOR_SEQUENCE = 40;\n+            return new UUID(epoch<<BITS_FOR_SEQUENCE | sequence, entryId);\n         }\n \n         /**\n          * It's NOT ok to compare two objects if their ordering metadata is dissimilar.\n          * @param o object to compare against.\n-         * @throws IllegalArgumentException if the two Ids are not comparable.\n          * @return results of comparison.\n          */\n         @Override\n         public int compareTo(CorfuRecordId o) {\n-            if (this.id.getMostSignificantBits() == 0 && o.id.getMostSignificantBits() != 0) {\n-                throw new IllegalArgumentException(\n-                        \"Incompatible CorfuRecordId comparison: ordering unavailable\");\n-            }\n-            if (this.id.getMostSignificantBits() !=0 && o.id.getMostSignificantBits() == 0) {\n-               throw new IllegalArgumentException(\n-                       \"Incompatible CorfuRecordId comparison: order of compared object unknown\");\n-            }\n-            if (this.id.getLeastSignificantBits() == o.id.getLeastSignificantBits()) {\n-                return 0;\n+            if ((this.sequence != Address.NON_ADDRESS && o.sequence == Address.NON_ADDRESS) ||\n+                    (this.sequence == Address.NON_ADDRESS && o.sequence != Address.NON_ADDRESS)) {\n+                throw new IllegalStateException(\"CorfuQueue cannot mix transactional and non-transactional types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTc0Mjg5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385174289", "createdAt": "2020-03-31T23:33:04Z", "commit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzozMzowNFrOF-r1TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzozMzowNFrOF-r1TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDE4OQ==", "bodyText": "Please fix\nlog.debug(\"ENQ: {} => {} at {}\", i, queueData, streamOffset);", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401274189", "createdAt": "2020-03-31T23:33:04Z", "author": {"login": "xnull"}, "path": "test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java", "diffHunk": "@@ -88,11 +93,13 @@ public Record(CorfuRecordId id, String data) {\n                     TXBegin(txnType);\n                     Long coinToss = new Random().nextLong() % numConflictKeys;\n                     conflictMap.put(coinToss, coinToss);\n+                    corfuQueue.enqueue(queueData);\n+                    // Each transaction may or may not sleep to simulate out of order between enQ & commit\n+                    TimeUnit.MILLISECONDS.sleep(coinToss);\n                     lock.lock();\n-                    CorfuRecordId id = corfuQueue.enqueue(queueData);\n                     final long streamOffset = TXEnd();\n-                    validator.add(new Record(id, queueData));\n-                    log.debug(\"ENQ:\" + id + \"=>\" + queueData + \" at \" + streamOffset);\n+                    validator.add(new Record(new CorfuRecordId(0,0,i), queueData));\n+                    log.debug(\"ENQ:\" + i + \"=>\" + queueData + \" at \" + streamOffset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3990910593367ba839bb9968c170516443a1ff5", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e3990910593367ba839bb9968c170516443a1ff5", "committedDate": "2020-03-31T22:12:41Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}, "afterCommit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/752605354b0c690f74b4f167c8b56dad195f8075", "committedDate": "2020-04-01T00:30:19Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjAyMDc1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385202075", "createdAt": "2020-04-01T00:59:41Z", "commit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo1OTo0MVrOF-tUtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo1OTo0MVrOF-tUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5ODYxNA==", "bodyText": "We should remove the lock and generated some tx abort scenarios. You can define validator as a hashtable instead of an array. I am not clear if tx aborted, if the record will be removed from the queue or not?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401298614", "createdAt": "2020-04-01T00:59:41Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/runtime/concurrent/CorfuQueueTxTest.java", "diffHunk": "@@ -88,11 +93,13 @@ public Record(CorfuRecordId id, String data) {\n                     TXBegin(txnType);\n                     Long coinToss = new Random().nextLong() % numConflictKeys;\n                     conflictMap.put(coinToss, coinToss);\n+                    corfuQueue.enqueue(queueData);\n+                    // Each transaction may or may not sleep to simulate out of order between enQ & commit\n+                    TimeUnit.MILLISECONDS.sleep(coinToss);\n                     lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjEwNjI1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#pullrequestreview-385210625", "createdAt": "2020-04-01T01:30:07Z", "commit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMDowN1rOF-ty3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMTozMjowMlrOF-t0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjMzNA==", "bodyText": "are snapshot transactions considered read-only?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401306334", "createdAt": "2020-04-01T01:30:07Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/SnapshotTransactionalContext.java", "diffHunk": "@@ -85,4 +85,9 @@ public SnapshotTransactionalContext(Transaction transaction) {\n     public void addTransaction(AbstractTransactionalContext tc) {\n         throw new UnsupportedOperationException(\"Can't merge into a readonly txn (yet)\");\n     }\n+\n+    @Override\n+    public void addPreCommitListener(TransactionalContext.PreCommitListener preCommitListener) {\n+        throw new UnsupportedOperationException(\"Can't register precommit hooks in readonly txn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMwNjgwMQ==", "bodyText": "Shouldnt it be overridden in WriteAfterWriteTransactionalContext as well?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2495#discussion_r401306801", "createdAt": "2020-04-01T01:32:02Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java", "diffHunk": "@@ -248,6 +251,17 @@ public void syncWithRetryUnsafe(VersionLockedObject vlo,\n      */\n     public abstract void addTransaction(AbstractTransactionalContext tc);\n \n+    /**\n+     * Add an object that needs extra processing right before commit happens\n+     *\n+     * @param preCommitListener The context of the object that needs extra processing\n+     *                         along with its lambda.\n+     */\n+    public abstract void addPreCommitListener(PreCommitListener preCommitListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4c087241e5eec956d3029ed52ba0234930b8aad", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a4c087241e5eec956d3029ed52ba0234930b8aad", "committedDate": "2020-04-01T04:03:54Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "752605354b0c690f74b4f167c8b56dad195f8075", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/752605354b0c690f74b4f167c8b56dad195f8075", "committedDate": "2020-04-01T00:30:19Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}, "afterCommit": {"oid": "a4c087241e5eec956d3029ed52ba0234930b8aad", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a4c087241e5eec956d3029ed52ba0234930b8aad", "committedDate": "2020-04-01T04:03:54Z", "message": "CorfuQueue: preCommitCallbacks to capture txn address\n\nThe Queue needs to capture the exact address its entries were\nwritten to, so it can then order its entries, of its orderless\nhashmap (corfuTable), in the same order that its transactions\nmaterialized.\n\nTo do this register a preCommitCallback that intercepts the\nSequencer's blessed tokenResponse and fills it up into\nthe payload of the fields of the Queue.\n\n+ Randomize sleep in test case to catch out of order reliably.\n\nAdd test case for both inorder and out of order between enqueue op and txEnd.\nCo-authored-by: Xiaoqin Ma <maxiaoqin2005@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}