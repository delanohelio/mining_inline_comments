{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NDY0NDAx", "number": 2478, "title": "Propagate exceptions when bootstrapping a management server during the AddNode workflow.", "bodyText": "Overview\nDescription:\nWhy should this be merged:\nThere is a join performed on the bootstrapManagementServer in the AddNode SendRequest method. If it fails, it throws the exception wrapped in the CompletionException, which does not get handled on the upper layers. Even if it is not wrapped in this exception, the root exception is still wrapped in the RuntimeException, so it still wont get caught. The goal is to propagate TimeOut and Network exceptions from this call, so it can get retried.\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-03-12T20:46:07Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478", "merged": true, "mergeCommit": {"oid": "f91bce559e1bd022526459ddd183a61cd2d7f8fb"}, "closed": true, "closedAt": "2020-03-13T21:43:56Z", "author": {"login": "PavelZaytsev"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNB84VAH2gAyMzg3NDY0NDAxOjg3NjkyYjA1Njk1ZWFiZmM0MGEwOTEzZmUzYzM3YmIzMjZhMWU1NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNG_7IgFqTM3NDAxMTk5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87692b05695eabfc40a0913fe3c37bb326a1e54b", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/87692b05695eabfc40a0913fe3c37bb326a1e54b", "committedDate": "2020-03-12T20:43:30Z", "message": "Handle timeouts when bootstrapping management or a layout server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczODk2NzU0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373896754", "createdAt": "2020-03-12T21:00:16Z", "commit": {"oid": "87692b05695eabfc40a0913fe3c37bb326a1e54b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTE5OTY2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373919966", "createdAt": "2020-03-12T21:37:27Z", "commit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNzoyN1rOF1wcVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1ODozNlrOF1xbyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMjUzMw==", "bodyText": "shouldnt timeoutException thrown from bootstrapManagementServer be caught here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391912533", "createdAt": "2020-03-12T21:37:27Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/workflows/AddNode.java", "diffHunk": "@@ -46,7 +46,12 @@ public AddNode(@NonNull String endpointToAdd, @NonNull CorfuRuntime runtime,\n     protected UUID sendRequest(@NonNull ManagementClient managementClient) throws TimeoutException {\n         // Bootstrap a management server first.\n         Layout layout = new Layout(runtime.getLayoutView().getLayout());\n-        runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout).join();\n+        boolean bootstrapped =\n+                runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyNzI4Nw==", "bodyText": "you can change the test comments to reflect this new behaviour", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391927287", "createdAt": "2020-03-12T21:56:43Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/runtime/view/ManagementViewTest.java", "diffHunk": "@@ -1640,7 +1640,7 @@ public void testPartialBootstrapNodeSuccess() throws ExecutionException, Interru\n         corfuRuntime.getLayoutView().getRuntimeLayout().getLayoutClient(SERVERS.ENDPOINT_1).bootstrapLayout(layout);\n         // Attempt bootstrapping the node. The node should attempt bootstrapping both the components Layout Server and\n         // Management Server.\n-        assertThat(corfuRuntime.getLayoutManagementView().bootstrapNewNode(SERVERS.ENDPOINT_1).get()).isTrue();\n+        assertThat(corfuRuntime.getLayoutManagementView().bootstrapNewNode(SERVERS.ENDPOINT_1).get()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyODc3Nw==", "bodyText": "minor - the variable name bootstrapped is confusing here.  If the server is bootstrapped, we log the warning.  But the check appears to be doing the opposite.  You can change the name to something else.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391928777", "createdAt": "2020-03-12T21:58:36Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/workflows/AddNode.java", "diffHunk": "@@ -46,7 +46,12 @@ public AddNode(@NonNull String endpointToAdd, @NonNull CorfuRuntime runtime,\n     protected UUID sendRequest(@NonNull ManagementClient managementClient) throws TimeoutException {\n         // Bootstrap a management server first.\n         Layout layout = new Layout(runtime.getLayoutView().getLayout());\n-        runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout).join();\n+        boolean bootstrapped =\n+                runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout);\n+\n+        if (!bootstrapped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTE4ODk3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373918897", "createdAt": "2020-03-12T21:35:12Z", "commit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTozNToxM1rOF1wVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTo1Nzo0OFrOF1xZUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxMDczNA==", "bodyText": "This seems hacky, and besides why this is needed?  bootstrapLayoutServer has an exceptionally block:\n.exceptionally(throwable -> {\n        try {\n                CFUtils.unwrap(throwable, AlreadyBootstrappedException.class);\n        } catch (AlreadyBootstrappedException e) {\n                log.info(\"bootstrapLayoutServer: Layout Server {} already bootstrapped.\", endpoint);\n        }\n        return true;\n})\nNotice this CFUtils.unwrap(throwable, AlreadyBootstrappedException.class); It will throw a RutimeException in case of exceptions other than AlreadyBootstrappedException, which makes the returned future exceptionally completed . Thus in this bootstrapNewNode method you will get a exceptionally completed future of RutimeException with a TimeoutException wrapped inside.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391910734", "createdAt": "2020-03-12T21:35:13Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/LayoutManagementView.java", "diffHunk": "@@ -99,17 +100,26 @@ public void handleFailure(IReconfigurationHandlerPolicy failureHandlerPolicy,\n      * This bootstraps the Layout server with the existing layout.\n      *\n      * @param endpoint New node endpoint.\n-     * @return Completable Future which completes when the node's layout is bootstrapped.\n+     * @return Completable Future which completes with true if the node's layout is bootstrapped,\n+     * false if it has already been bootstrapped. The future completes exceptionally if a time out\n+     * has occurred.\n      */\n     public CompletableFuture<Boolean> bootstrapNewNode(String endpoint) {\n \n         // Bootstrap the to-be added node with the old layout.\n         Layout layout = new Layout(runtime.getLayoutView().getLayout());\n-        return runtime.getLayoutView().bootstrapLayoutServer(endpoint, layout)\n-                .thenApply(result -> {\n-                    log.info(\"bootstrapNewNode: New node {} bootstrapped.\", endpoint);\n-                    return true;\n-                });\n+\n+        CompletableFuture<Boolean> future = new CompletableFuture<>();\n+\n+        try {\n+            boolean bootstrapped = runtime.getLayoutView().bootstrapLayoutServer(endpoint, layout);\n+            future.complete(bootstrapped);\n+            return future;\n+        }\n+        catch (TimeoutException toe){\n+            future.completeExceptionally(toe);\n+            return future;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkxOTkxNQ==", "bodyText": "I don't understand why we need to explicitly handle TimeoutException here. What about NetworkExceptions and other exceptions? Besides, the caller of this, namely BootstrapUtil.bootstrap() already logs and handles all exceptions: https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/BootstrapUtil.java#L128-L134", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391919915", "createdAt": "2020-03-12T21:47:28Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/BootstrapUtil.java", "diffHunk": "@@ -54,18 +55,22 @@ public static void bootstrap(@NonNull Layout layout,\n      * @param layout Layout to bootstrap with\n      */\n     private static void bootstrapLayoutServer(IClientRouter router, Layout layout)\n-            throws ExecutionException, InterruptedException, AlreadyBootstrappedException {\n+            throws ExecutionException, InterruptedException, AlreadyBootstrappedException, TimeoutException {\n         LayoutClient layoutClient = new LayoutClient(router, layout.getEpoch());\n \n         try {\n             CFUtils.getUninterruptibly(layoutClient.bootstrapLayout(layout),\n-                    AlreadyBootstrappedException.class);\n+                    AlreadyBootstrappedException.class, TimeoutException.class);\n         } catch (AlreadyBootstrappedException abe) {\n             if (!layoutClient.getLayout().get().equals(layout)) {\n                 log.error(\"BootstrapUtil: Layout Server {}:{} already bootstrapped with different \"\n                         + \"layout.\", router.getHost(), router.getPort());\n                 throw abe;\n             }\n+        } catch (TimeoutException toe){\n+            log.error(\"BootstrapUtil: Layout Server {}:{} timeout occurred.\",\n+                    router.getHost(), router.getPort());\n+            throw toe;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkyODE0NA==", "bodyText": "Why specifically handling TimeoutException, there are other exceptions like NetworkException right? As explained in previous comment, the existing bootstrapLayoutServer implementation does return an exceptionally completed future due to CFUtil.unwrap(), I think the problem might not be here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391928144", "createdAt": "2020-03-12T21:57:48Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/LayoutView.java", "diffHunk": "@@ -319,21 +319,26 @@ public void committed(long epoch, Layout layout, boolean force)\n      *\n      * @param endpoint Endpoint to bootstrap.\n      * @param layout   Layout to bootstrap with.\n-     * @return Completable Future which completes with True when the layout server is bootstrapped.\n+     * @return True when the layout server is bootstrapped, false otherwise.\n+     * @throws TimeoutException If a timeout has occurred.\n      */\n-    CompletableFuture<Boolean> bootstrapLayoutServer(@Nonnull String endpoint, @Nonnull Layout layout) {\n-        return getRuntimeLayout(layout).getLayoutClient(endpoint).bootstrapLayout(layout)\n-                .exceptionally(throwable -> {\n-                    try {\n-                        CFUtils.unwrap(throwable, AlreadyBootstrappedException.class);\n-                    } catch (AlreadyBootstrappedException e) {\n-                        log.info(\"bootstrapLayoutServer: Layout Server {} already bootstrapped.\", endpoint);\n-                    }\n-                    return true;\n-                })\n-                .thenApply(result -> {\n-                    log.info(\"bootstrapLayoutServer: Layout Server {} bootstrap successful\", endpoint);\n-                    return true;\n-                });\n+    boolean bootstrapLayoutServer(@Nonnull String endpoint, @Nonnull Layout layout) throws TimeoutException {\n+        try {\n+            CFUtils.getUninterruptibly(getRuntimeLayout(layout)\n+                    .getLayoutClient(endpoint)\n+                    .bootstrapLayout(layout),\n+                    AlreadyBootstrappedException.class,\n+                    TimeoutException.class);\n+            log.info(\"bootstrapLayoutServer: Layout Server {} bootstrap successful.\",\n+                    endpoint);\n+            return true;\n+        } catch (AlreadyBootstrappedException abe) {\n+            log.warn(\"bootstrapLayoutServer: Layout Server {} already bootstrapped.\",\n+                    endpoint);\n+            return false;\n+        } catch (TimeoutException te) {\n+            log.error(\"bootstrapLayoutServer: Timeout occurred.\");\n+            throw te;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8141034d92ca89d7390692f81ba8adea24268b0"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTQ4MTM2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373948136", "createdAt": "2020-03-12T22:43:53Z", "commit": {"oid": "d4617805572ab12b609c0746e3dfcb124ba2280d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0Mzo1NFrOF1yYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0Mzo1NFrOF1yYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDI4OQ==", "bodyText": "I don't think swallowing all exceptions is a good idea. The retry only needs to happen on timeout and network exceptions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391944289", "createdAt": "2020-03-12T22:43:54Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/workflows/WorkflowRequest.java", "diffHunk": "@@ -141,7 +141,7 @@ public void invoke() {\n                     throw new IllegalStateException(\"Orchestrator can not be selected\");\n                 }\n \n-            } catch (NetworkException | TimeoutException | IllegalStateException e) {\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4617805572ab12b609c0746e3dfcb124ba2280d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTQ4MzU0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373948354", "createdAt": "2020-03-12T22:44:32Z", "commit": {"oid": "d4617805572ab12b609c0746e3dfcb124ba2280d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0NDozMlrOF1yZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo0NDozMlrOF1yZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0NDQ2MA==", "bodyText": "You can pass Network/Timeout exceptions types.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391944460", "createdAt": "2020-03-12T22:44:32Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/workflows/AddNode.java", "diffHunk": "@@ -46,7 +47,7 @@ public AddNode(@NonNull String endpointToAdd, @NonNull CorfuRuntime runtime,\n     protected UUID sendRequest(@NonNull ManagementClient managementClient) throws TimeoutException {\n         // Bootstrap a management server first.\n         Layout layout = new Layout(runtime.getLayoutView().getLayout());\n-        runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout).join();\n+        CFUtils.getUninterruptibly(runtime.getManagementView().bootstrapManagementServer(nodeForWorkflow, layout));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4617805572ab12b609c0746e3dfcb124ba2280d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTcwOTk4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373970998", "createdAt": "2020-03-12T23:53:51Z", "commit": {"oid": "f691d6e25c41f4eb6c38c167634cb43deaa0b940"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTc0Mzcy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-373974372", "createdAt": "2020-03-13T00:05:27Z", "commit": {"oid": "f691d6e25c41f4eb6c38c167634cb43deaa0b940"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDowNToyN1rOF1zwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMDowNToyN1rOF1zwXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NjgxNA==", "bodyText": "I think later on there should a cleanup patch on all the inherited children of sendRequest because others are not taking care of NetworkException, and the signature suggests it only throws TimeoutException.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#discussion_r391966814", "createdAt": "2020-03-13T00:05:27Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/view/workflows/AddNode.java", "diffHunk": "@@ -44,9 +46,12 @@ public AddNode(@NonNull String endpointToAdd, @NonNull CorfuRuntime runtime,\n \n     @Override\n     protected UUID sendRequest(@NonNull ManagementClient managementClient) throws TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f691d6e25c41f4eb6c38c167634cb43deaa0b940"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e208497639144f840edbd91eee343a10885ebd23", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e208497639144f840edbd91eee343a10885ebd23", "committedDate": "2020-03-13T00:14:19Z", "message": "Propagate exceptions when bootstrapping a management server during the AddNode workflow"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f691d6e25c41f4eb6c38c167634cb43deaa0b940", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f691d6e25c41f4eb6c38c167634cb43deaa0b940", "committedDate": "2020-03-12T22:56:35Z", "message": "Cleanup"}, "afterCommit": {"oid": "e208497639144f840edbd91eee343a10885ebd23", "author": {"user": {"login": "PavelZaytsev", "name": "Pavel Zaytsev"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e208497639144f840edbd91eee343a10885ebd23", "committedDate": "2020-03-13T00:14:19Z", "message": "Propagate exceptions when bootstrapping a management server during the AddNode workflow"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDExOTk4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2478#pullrequestreview-374011998", "createdAt": "2020-03-13T02:36:21Z", "commit": {"oid": "e208497639144f840edbd91eee343a10885ebd23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3373, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}