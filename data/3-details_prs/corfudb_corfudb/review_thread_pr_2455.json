{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjYxOTY2", "number": 2455, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0OTowMVrODkekhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0OTowMVrODkekhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc2MTk3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0OTowMVrOFw0q4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyOTozM1rOFxVZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODkxNQ==", "bodyText": "Should we filter keys out before collecting to a list?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2455#discussion_r386738915", "createdAt": "2020-03-03T00:49:01Z", "author": {"login": "zhangn49"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -257,16 +259,19 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n+\n         int index = 0;\n-        for (Map.Entry<Long, E> entry : corfuTable.entrySet()) {\n+        for (Long entryId : corfuTable.keySet().stream().sorted().collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e23268a23379cd6736d6ca2f74fc748aa541a674"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MDIyNg==", "bodyText": "For maxEntries, maybe we can use Stream.limit()", "url": "https://github.com/CorfuDB/CorfuDB/pull/2455#discussion_r386740226", "createdAt": "2020-03-03T00:53:35Z", "author": {"login": "zhangn49"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -257,16 +259,19 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n+\n         int index = 0;\n-        for (Map.Entry<Long, E> entry : corfuTable.entrySet()) {\n+        for (Long entryId : corfuTable.keySet().stream().sorted().collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODkxNQ=="}, "originalCommit": {"oid": "e23268a23379cd6736d6ca2f74fc748aa541a674"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NjE3OA==", "bodyText": "I thought about this too, but if we specify stream.limit() then it is possible that the stream has only a small number of entries and if the user has specified a start point towards the end, then it will miss out on the entries.\nhere is the example,\nQ: 1, 2, 3, 4, 5\nUser wants 2 entries AFTER item number 3:\nWe should return: 4, 5\nWith Stream.limit() our collect() will have only 2 entries : 1, 2\nwhich means 4, 5 cannot be processed.\nHope this helps?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2455#discussion_r387256178", "createdAt": "2020-03-03T19:52:13Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -257,16 +259,19 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n+\n         int index = 0;\n-        for (Map.Entry<Long, E> entry : corfuTable.entrySet()) {\n+        for (Long entryId : corfuTable.keySet().stream().sorted().collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODkxNQ=="}, "originalCommit": {"oid": "e23268a23379cd6736d6ca2f74fc748aa541a674"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTIzNA==", "bodyText": "Fixed, I have used the stream.filter as suggested. thanks!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2455#discussion_r387275234", "createdAt": "2020-03-03T20:29:33Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuQueue.java", "diffHunk": "@@ -257,16 +259,19 @@ public int compareTo(CorfuQueueRecord<? extends E> o) {\n         List<CorfuQueueRecord<E>> copy = new ArrayList<>(\n                 Math.min(corfuTable.size(), maxEntries)\n         );\n+\n         int index = 0;\n-        for (Map.Entry<Long, E> entry : corfuTable.entrySet()) {\n+        for (Long entryId : corfuTable.keySet().stream().sorted().collect(Collectors.toList())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczODkxNQ=="}, "originalCommit": {"oid": "e23268a23379cd6736d6ca2f74fc748aa541a674"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2019, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}