{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MzQzNDU4", "number": 2758, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjozOTozNVrOEgQqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyMTo1NVrOEgjoWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjYyOTI2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjozOTozNVrOHNBemQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjozOTozNVrOHNBemQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxNzc1Mw==", "bodyText": "You need a break here otherwise it will run 2 times on every access.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483417753", "createdAt": "2020-09-04T06:39:35Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            timestamp.set(rt.getSequencerView()\n+                                    .query(getStreamID()));\n+                            o.syncObjectUnsafe(timestamp.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjYzODA4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjo0Mjo1N1rOHNBj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjo1ODoyMVrOHNB8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxOTA5Mg==", "bodyText": "Move this to the catch block otherwise you'll have two sequencer queries per access.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483419092", "createdAt": "2020-09-04T06:42:57Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            timestamp.set(rt.getSequencerView()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyNTM5Mg==", "bodyText": "FYI: This is different than like 201. Essentelly each non-transactional access will produce 3 sequence calls.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483425392", "createdAt": "2020-09-04T06:58:21Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            timestamp.set(rt.getSequencerView()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQxOTA5Mg=="}, "originalCommit": {"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjY2OTE5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNjo1NDoyNlrOHNB1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzozMzowOVrOHNC4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyMzczOQ==", "bodyText": "Btw, getUpcallResultInner has the same problem. The reset in the catch block should be part of the update lambda to be executed under the same lock.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483423739", "createdAt": "2020-09-04T06:54:26Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0MDcwMA==", "bodyText": "Good catch, changed it, please take a look.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483440700", "createdAt": "2020-09-04T07:33:09Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,34 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQyMzczOQ=="}, "originalCommit": {"oid": "f8a4fd4c322fa412161dbbe0e62af9f170aae835"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjg1NzQ0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1Njo1MVrOHNDmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1Njo1MVrOHNDmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1MjQyOQ==", "bodyText": "I think this line should be moved before the if check: for the last retry we also need to reset the object", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483452429", "createdAt": "2020-09-04T07:56:51Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            o.resetUnsafe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjkwNjAxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxMToyMFrOHNEDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMDo0OTo1OVrOHNeW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1OTg4Nw==", "bodyText": "Here reset should not be inside update() method, otherwise since StampedLock is not reentrant, this could be deadlock", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483459887", "createdAt": "2020-09-04T08:11:20Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MDkzNw==", "bodyText": "good catch, done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483890937", "createdAt": "2020-09-05T00:49:59Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ1OTg4Nw=="}, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjkyMDk4OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxNTozOVrOHNEMEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxNTozOVrOHNEMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2MjE2Mg==", "bodyText": "Can you add this log line in transactional access as well? https://github.com/CorfuDB/CorfuDB/blob/master/runtime/src/main/java/org/corfudb/runtime/object/transactions/AbstractTransactionalContext.java#L217\nWe used to have a hard time debugging trimmed exception in transaction case,  as there is no log, I think this could be an opportunity to add the same log line in transactional access as well.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483462162", "createdAt": "2020-09-04T08:15:39Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjk5MDc1OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODozNTo0MFrOHNE2JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODozNTo0MFrOHNE2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MjkzMw==", "bodyText": "NIT: this can be in one line.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483472933", "createdAt": "2020-09-04T08:35:40Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            o.resetUnsafe();\n+                            timestamp.set(rt.getSequencerView()\n+                                    .query(getStreamID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjk5Mjc2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODozNjoyMlrOHNE3aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMDo1ODowMlrOHNeapg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MzI1Nw==", "bodyText": "Maybe we should check the number of retries and throw ex in the catch block and remove this line (same as what we did in accessInner)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483473257", "createdAt": "2020-09-04T08:36:22Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });\n+                        }\n                     }\n \n-                    // The version is already ahead, but we don't have the result.\n-                    // The only way to get the correct result\n-                    // of the upcall would be to rollback. For now, we throw an exception\n-                    // since this is generally not expected. --- and probably a bug if it happens.\n-                    throw new RuntimeException(\"Attempted to get the result \"\n-                            + \"of an upcall@\" + timestamp + \" but we are @\"\n-                            + underlyingObject.getVersionUnsafe()\n-                            + \" and we don't have a copy\");\n-                });\n-            } catch (TrimmedException ex) {\n-                log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n-\n-        throw new TrimmedUpcallException(timestamp);\n+            throw new TrimmedUpcallException(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTg3OA==", "bodyText": "For this last comment, this function  needs to return a value, so if I move it in. I still need to throw some exception from the outside or we'll get missing return statement. Other than that addressed all other comments.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483891878", "createdAt": "2020-09-05T00:58:02Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,39 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            underlyingObject.update(obj -> {\n+                                obj.resetUnsafe();\n+                                return null;\n+                            });\n+                        }\n                     }\n \n-                    // The version is already ahead, but we don't have the result.\n-                    // The only way to get the correct result\n-                    // of the upcall would be to rollback. For now, we throw an exception\n-                    // since this is generally not expected. --- and probably a bug if it happens.\n-                    throw new RuntimeException(\"Attempted to get the result \"\n-                            + \"of an upcall@\" + timestamp + \" but we are @\"\n-                            + underlyingObject.getVersionUnsafe()\n-                            + \" and we don't have a copy\");\n-                });\n-            } catch (TrimmedException ex) {\n-                log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n-\n-        throw new TrimmedUpcallException(timestamp);\n+            throw new TrimmedUpcallException(timestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ3MzI1Nw=="}, "originalCommit": {"oid": "60fbf4cf56ceed9911d18b3ba2241582beea9aed"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTcyNjk0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMTowOTo1MlrOHNefTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMTowOTo1MlrOHNefTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MzA3MQ==", "bodyText": "nit - indentation", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483893071", "createdAt": "2020-09-05T01:09:52Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -280,39 +285,36 @@ private long logUpdateInner(String smrUpdateFunction, final boolean keepUpcallRe\n             return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n         }\n \n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            try {\n-                return underlyingObject.update(o -> {\n-                    o.syncObjectUnsafe(timestamp);\n-                    if (o.getUpcallResults().containsKey(timestamp)) {\n-                        log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n-                        R ret = (R) o.getUpcallResults().get(timestamp);\n-                        o.getUpcallResults().remove(timestamp);\n-                        return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+        return underlyingObject.update(o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp);\n+                            if (o.getUpcallResults().containsKey(timestamp)) {\n+                                log.trace(\"Upcall[{}] {} Sync'd\", this, timestamp);\n+                                R ret = (R) o.getUpcallResults().get(timestamp);\n+                                o.getUpcallResults().remove(timestamp);\n+                                return ret == VersionLockedObject.NullValue.NULL_VALUE ? null : ret;\n+                            }\n+\n+                            // The version is already ahead, but we don't have the result.\n+                            // The only way to get the correct result\n+                            // of the upcall would be to rollback. For now, we throw an exception\n+                            // since this is generally not expected. --- and probably a bug if it happens.\n+                            throw new RuntimeException(\"Attempted to get the result \"\n+                                    + \"of an upcall@\" + timestamp + \" but we are @\"\n+                                    + underlyingObject.getVersionUnsafe()\n+                                    + \" and we don't have a copy\");\n+                        } catch (TrimmedException ex) {\n+                            log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp, getStreamID(), x);\n+                            // We encountered a TRIM during sync, reset the object\n+                            o.resetUnsafe();\n+                        }\n                     }\n \n-                    // The version is already ahead, but we don't have the result.\n-                    // The only way to get the correct result\n-                    // of the upcall would be to rollback. For now, we throw an exception\n-                    // since this is generally not expected. --- and probably a bug if it happens.\n-                    throw new RuntimeException(\"Attempted to get the result \"\n-                            + \"of an upcall@\" + timestamp + \" but we are @\"\n-                            + underlyingObject.getVersionUnsafe()\n-                            + \" and we don't have a copy\");\n-                });\n-            } catch (TrimmedException ex) {\n-                log.info(\"getUpcallResultInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n-\n-        throw new TrimmedUpcallException(timestamp);\n+            throw new TrimmedUpcallException(timestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab88fd109efcceeee670c8953fbceb09c6ad65a6"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTczMjIzOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToxNTo1MVrOHNehuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToxNTo1MVrOHNehuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MzY4OA==", "bodyText": "nit - extra ws", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483893688", "createdAt": "2020-09-05T01:15:51Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -453,7 +453,7 @@ public void setUncommittedChanges(WriteSetSMRStream optimisticStream) {\n      *\n      * @return Returns the pointer position to the object in the stream.\n      */\n-    public long getVersionUnsafe() {\n+    public long  getVersionUnsafe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab88fd109efcceeee670c8953fbceb09c6ad65a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNTczNjU3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMToyMTo1NVrOHNekAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMTozOTozMFrOHNeqoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI3Mw==", "bodyText": "why do we need to set the timestamp here?  Is it expected to change after it was obtained in line 189?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483894273", "createdAt": "2020-09-05T01:21:55Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            o.resetUnsafe();\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            timestamp.set(rt.getSequencerView().query(getStreamID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab88fd109efcceeee670c8953fbceb09c6ad65a6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NTk2OQ==", "bodyText": "exactly, the state of the log might have changed and you want to provide the latest state.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2758#discussion_r483895969", "createdAt": "2020-09-05T01:39:30Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -184,31 +185,35 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n             }\n         }\n \n-        // Perform underlying access\n-        for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n-            // Linearize this read against a timestamp\n-            final long timestamp = rt.getSequencerView()\n-                            .query(getStreamID());\n-            log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n+        // Linearize this read against a timestamp\n+        AtomicLong timestamp = new AtomicLong(rt.getSequencerView().query(getStreamID()));\n \n-            try {\n-                return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp\n-                                && !o.isOptimisticallyModifiedUnsafe(),\n-                        o -> o.syncObjectUnsafe(timestamp),\n-                        o -> accessMethod.access(o));\n-            } catch (TrimmedException te) {\n-                log.info(\"accessInner: Encountered trimmed address space \" +\n-                    \"while accessing version {} of stream {} on attempt {}\",\n-                    timestamp, getStreamID(), x);\n-                // We encountered a TRIM during sync, reset the object\n-                underlyingObject.update(o -> {\n-                    o.resetUnsafe();\n-                    return null;\n-                });\n-            }\n-        }\n+        log.debug(\"Access[{}] conflictObj={} version={}\", this, conflictObject, timestamp);\n \n-        throw new TrimmedException();\n+        // Perform underlying access\n+        return underlyingObject.access(o -> o.getVersionUnsafe() >= timestamp.get()\n+                        && !o.isOptimisticallyModifiedUnsafe(),\n+                o -> {\n+                    for (int x = 0; x < rt.getParameters().getTrimRetry(); x++) {\n+                        try {\n+                            o.syncObjectUnsafe(timestamp.get());\n+                            break;\n+                        } catch (TrimmedException te) {\n+                            log.info(\"accessInner: Encountered trimmed address space \" +\n+                                            \"while accessing version {} of stream {} on attempt {}\",\n+                                    timestamp.get(), getStreamID(), x);\n+\n+                            o.resetUnsafe();\n+\n+                            if (x == (rt.getParameters().getTrimRetry() - 1)) {\n+                                throw te;\n+                            }\n+\n+                            timestamp.set(rt.getSequencerView().query(getStreamID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI3Mw=="}, "originalCommit": {"oid": "ab88fd109efcceeee670c8953fbceb09c6ad65a6"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1668, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}