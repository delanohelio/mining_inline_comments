{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5OTY1ODY2", "number": 2837, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyNzo1MlrOE-97qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyOToxMlrOFAkDyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYxODY2OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyNzo1MlrOH8Z0lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjozODowN1rOH8aCIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5OTY2OQ==", "bodyText": "So this is meant to go 2 levels right, not N levels? Or am I missing something?\n2 levels is actually fine too!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533099669", "createdAt": "2020-12-01T06:27:52Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a84621360a1d319c9759784e99ab943bb7ccfb1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMzEzOQ==", "bodyText": "It is bounded to nestedFields.length, so it can actually go to N levels. It will return outside of the for loop, unless a cast exception is encountered and it's in the last level.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533103139", "createdAt": "2020-12-01T06:38:07Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA5OTY2OQ=="}, "originalCommit": {"oid": "2a84621360a1d319c9759784e99ab943bb7ccfb1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDYyMjk1OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwNjoyOTo0MVrOH8Z3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMzoxNjo1NVrOH93pqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ==", "bodyText": "Shouldn't we also handle else if (fieldDescriptor.isRepeated()) { for indexes on collections?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533100289", "createdAt": "2020-12-01T06:29:41Z", "author": {"login": "hisundar"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i]));\n+                                    } catch (ClassCastException ce) {\n+                                        // Valid cast exception if its the last level (primitive type), but if the '.' separated secondary\n+                                        // key has still remaining levels, it is not well-formed.\n+                                        if (i != (nestedFields.length - 1)) {\n+                                            throw new IllegalArgumentException(\"Malformed secondary key=\" + indexName + \" primitive field :: \" + nestedFields[i]);\n+                                        }\n \n+                                        return ClassUtils.cast(subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i])));\n+                                    }\n+                                }\n+\n+                                return ClassUtils.cast(subMessage);\n+                            }\n+                            return null;\n+                        });\n+    }\n+\n+    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor, Message payloadSchema) {\n         if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).getSecondaryKey()) {\n             final String indexName = fieldDescriptor.getName();\n             if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n                 throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n             }\n             indices.put(indexName, getIndex(indexName, fieldDescriptor));\n+        } else if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).hasNestedSecondaryKeys()) {\n+            if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n+                throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a84621360a1d319c9759784e99ab943bb7ccfb1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMzQxMw==", "bodyText": "I didn't consider collections, let me work on adding it.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r533103413", "createdAt": "2020-12-01T06:39:02Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i]));\n+                                    } catch (ClassCastException ce) {\n+                                        // Valid cast exception if its the last level (primitive type), but if the '.' separated secondary\n+                                        // key has still remaining levels, it is not well-formed.\n+                                        if (i != (nestedFields.length - 1)) {\n+                                            throw new IllegalArgumentException(\"Malformed secondary key=\" + indexName + \" primitive field :: \" + nestedFields[i]);\n+                                        }\n \n+                                        return ClassUtils.cast(subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i])));\n+                                    }\n+                                }\n+\n+                                return ClassUtils.cast(subMessage);\n+                            }\n+                            return null;\n+                        });\n+    }\n+\n+    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor, Message payloadSchema) {\n         if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).getSecondaryKey()) {\n             final String indexName = fieldDescriptor.getName();\n             if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n                 throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n             }\n             indices.put(indexName, getIndex(indexName, fieldDescriptor));\n+        } else if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).hasNestedSecondaryKeys()) {\n+            if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n+                throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ=="}, "originalCommit": {"oid": "2a84621360a1d319c9759784e99ab943bb7ccfb1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDYzNjk2OA==", "bodyText": "Done, now it supports collections and nested secondary indexes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r534636968", "createdAt": "2020-12-03T03:16:55Z", "author": {"login": "annym"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/ProtobufIndexer.java", "diffHunk": "@@ -23,43 +26,136 @@\n         Message>> {\n \n     private final HashMap<String,\n-            Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>>\n+            Index.Spec<Message, CorfuRecord<Message, Message>, ?>>\n             indices = new HashMap<>();\n \n     ProtobufIndexer(Message payloadSchema) {\n-        payloadSchema.getDescriptorForType().getFields().forEach(this::registerIndices);\n+        payloadSchema.getDescriptorForType().getFields().forEach(field -> registerIndices(field, payloadSchema));\n     }\n \n-    private <T extends Comparable<T>> Index.Spec<Message, CorfuRecord<Message, Message>, ? extends Comparable<?>>\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n     getIndex(String indexName, FieldDescriptor fieldDescriptor) {\n-\n         return new Index.Spec<>(\n                 () -> indexName,\n                 (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n                         (key, val) -> ClassUtils.cast(val.getPayload().getField(fieldDescriptor)));\n     }\n \n-    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor) {\n+    private <T> Index.Spec<Message, CorfuRecord<Message, Message>, ?>\n+    getComplexIndex(String indexName) {\n+        return new Index.Spec<>(\n+                () -> indexName,\n+                (Index.Function<Message, CorfuRecord<Message, Message>, T>)\n+                        (key, val) -> {\n+                            // Get all nested fields, '.' separated\n+                            String[] nestedFields = indexName.split(\"\\\\.\");\n+\n+                            if (nestedFields.length > 0) {\n+                                Message subMessage = val.getPayload();\n+\n+                                for (int i =0; i < nestedFields.length; i++) {\n+                                    try {\n+                                        subMessage = (Message) subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i]));\n+                                    } catch (ClassCastException ce) {\n+                                        // Valid cast exception if its the last level (primitive type), but if the '.' separated secondary\n+                                        // key has still remaining levels, it is not well-formed.\n+                                        if (i != (nestedFields.length - 1)) {\n+                                            throw new IllegalArgumentException(\"Malformed secondary key=\" + indexName + \" primitive field :: \" + nestedFields[i]);\n+                                        }\n \n+                                        return ClassUtils.cast(subMessage.getField(\n+                                                subMessage.getDescriptorForType().findFieldByName(nestedFields[i])));\n+                                    }\n+                                }\n+\n+                                return ClassUtils.cast(subMessage);\n+                            }\n+                            return null;\n+                        });\n+    }\n+\n+    void registerIndices(final Descriptors.FieldDescriptor fieldDescriptor, Message payloadSchema) {\n         if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).getSecondaryKey()) {\n             final String indexName = fieldDescriptor.getName();\n             if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n                 throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n             }\n             indices.put(indexName, getIndex(indexName, fieldDescriptor));\n+        } else if (fieldDescriptor.getOptions().getExtension(CorfuOptions.schema).hasNestedSecondaryKeys()) {\n+            if (fieldDescriptor.getType() == FieldDescriptor.Type.GROUP) {\n+                throw new IllegalArgumentException(\"group is a deprecated, unsupported type\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEwMDI4OQ=="}, "originalCommit": {"oid": "2a84621360a1d319c9759784e99ab943bb7ccfb1"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgxOTQ0OnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NjoxM1rOH-2onw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjoxMjoyMVrOH-9qpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2ODg5NQ==", "bodyText": "These are really great examples, but if possible can the protobuf fields use the underscore instead of camel-case for the field names. There are some linters that check of that I think.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535668895", "createdAt": "2020-12-03T21:56:13Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4NDEwMQ==", "bodyText": "Good observation, required one change to make it work. But it's not really needed in all fields, right? in any case by changing 3 of them we now have samples of both formats.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535784101", "createdAt": "2020-12-04T02:12:21Z", "author": {"login": "annym"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2ODg5NQ=="}, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgyMzg3OnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1Njo1NFrOH-2rUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1Njo1NFrOH-2rUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2OTU4NA==", "bodyText": "can this be renamed to phone_numbers should we get hit by linters", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535669584", "createdAt": "2020-12-03T21:56:54Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"nonPrimitiveFieldLevel0.key1Level1, nonPrimitiveFieldLevel0.key2Level1.key1Level2\"];\n+}\n+\n+message NonPrimitiveValue {\n+    fixed64 key1Level1 = 1;\n+    NonPrimitiveNestedValue key2Level1 = 2;\n+}\n+\n+message NonPrimitiveNestedValue {\n+    string key1Level2 = 1;\n+    fixed64 levelNumber = 2;\n+}\n+\n+message InvalidExampleValue {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"field1.key1Level1, field2.key2Level1.key1Level2\"];\n+}\n+\n+message InvalidNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1, field2.key2Level1.deprecated\"];\n+}\n+\n+message InvalidFullNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1.key1Level2, field2.key2Level1.key1Level2\"];\n+}\n+\n+message NotNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field2\"];\n+    fixed64 field3 = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field3\"];\n+}\n+\n+message ClassRoom {\n+    repeated Student students = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"students.age\"];\n+    Infrastructure classInfra = 2;\n+}\n+\n+message Student {\n+    string name = 1;\n+    fixed64 age = 2;\n+}\n+\n+message Person {\n+    string name = 1;\n+    fixed64 age = 2;\n+    PhoneNumber phoneNumber = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"phoneNumber.mobile\"];\n+}\n+\n+message PhoneNumber {\n+    repeated string mobile = 1;\n+    string home = 2;\n+}\n+\n+message Office {\n+    repeated Department departments = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"departments.members.phoneNumbers\"];\n+}\n+\n+message Department {\n+    repeated Member members = 1;\n+}\n+\n+message Member {\n+    string name = 1;\n+    fixed64 age = 2;\n+    repeated string phoneNumbers = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgyNTA1OnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzowNlrOH-2r_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzowNlrOH-2r_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2OTc1Nw==", "bodyText": "can this be renamed to class_rooms please?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535669757", "createdAt": "2020-12-03T21:57:06Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"nonPrimitiveFieldLevel0.key1Level1, nonPrimitiveFieldLevel0.key2Level1.key1Level2\"];\n+}\n+\n+message NonPrimitiveValue {\n+    fixed64 key1Level1 = 1;\n+    NonPrimitiveNestedValue key2Level1 = 2;\n+}\n+\n+message NonPrimitiveNestedValue {\n+    string key1Level2 = 1;\n+    fixed64 levelNumber = 2;\n+}\n+\n+message InvalidExampleValue {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"field1.key1Level1, field2.key2Level1.key1Level2\"];\n+}\n+\n+message InvalidNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1, field2.key2Level1.deprecated\"];\n+}\n+\n+message InvalidFullNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1.key1Level2, field2.key2Level1.key1Level2\"];\n+}\n+\n+message NotNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field2\"];\n+    fixed64 field3 = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field3\"];\n+}\n+\n+message ClassRoom {\n+    repeated Student students = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"students.age\"];\n+    Infrastructure classInfra = 2;\n+}\n+\n+message Student {\n+    string name = 1;\n+    fixed64 age = 2;\n+}\n+\n+message Person {\n+    string name = 1;\n+    fixed64 age = 2;\n+    PhoneNumber phoneNumber = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"phoneNumber.mobile\"];\n+}\n+\n+message PhoneNumber {\n+    repeated string mobile = 1;\n+    string home = 2;\n+}\n+\n+message Office {\n+    repeated Department departments = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"departments.members.phoneNumbers\"];\n+}\n+\n+message Department {\n+    repeated Member members = 1;\n+}\n+\n+message Member {\n+    string name = 1;\n+    fixed64 age = 2;\n+    repeated string phoneNumbers = 3;\n+}\n+\n+message School {\n+    repeated ClassRoom classRooms = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"classRooms.classInfra.numberDesks, classRooms.classInfra.others\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgyNjMzOnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzoxOFrOH-2s3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzoxOFrOH-2s3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY2OTk4Mw==", "bodyText": "number_desks", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535669983", "createdAt": "2020-12-03T21:57:18Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"nonPrimitiveFieldLevel0.key1Level1, nonPrimitiveFieldLevel0.key2Level1.key1Level2\"];\n+}\n+\n+message NonPrimitiveValue {\n+    fixed64 key1Level1 = 1;\n+    NonPrimitiveNestedValue key2Level1 = 2;\n+}\n+\n+message NonPrimitiveNestedValue {\n+    string key1Level2 = 1;\n+    fixed64 levelNumber = 2;\n+}\n+\n+message InvalidExampleValue {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"field1.key1Level1, field2.key2Level1.key1Level2\"];\n+}\n+\n+message InvalidNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1, field2.key2Level1.deprecated\"];\n+}\n+\n+message InvalidFullNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1.key1Level2, field2.key2Level1.key1Level2\"];\n+}\n+\n+message NotNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field2\"];\n+    fixed64 field3 = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field3\"];\n+}\n+\n+message ClassRoom {\n+    repeated Student students = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"students.age\"];\n+    Infrastructure classInfra = 2;\n+}\n+\n+message Student {\n+    string name = 1;\n+    fixed64 age = 2;\n+}\n+\n+message Person {\n+    string name = 1;\n+    fixed64 age = 2;\n+    PhoneNumber phoneNumber = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"phoneNumber.mobile\"];\n+}\n+\n+message PhoneNumber {\n+    repeated string mobile = 1;\n+    string home = 2;\n+}\n+\n+message Office {\n+    repeated Department departments = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"departments.members.phoneNumbers\"];\n+}\n+\n+message Department {\n+    repeated Member members = 1;\n+}\n+\n+message Member {\n+    string name = 1;\n+    fixed64 age = 2;\n+    repeated string phoneNumbers = 3;\n+}\n+\n+message School {\n+    repeated ClassRoom classRooms = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"classRooms.classInfra.numberDesks, classRooms.classInfra.others\"];\n+}\n+\n+message Infrastructure {\n+    fixed64 numberDesks = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDgyNzM4OnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzozMlrOH-2tow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTo1NzozMlrOH-2tow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY3MDE3OQ==", "bodyText": "room_size_in_meters", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535670179", "createdAt": "2020-12-03T21:57:32Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,101 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"nonPrimitiveFieldLevel0.key1Level1, nonPrimitiveFieldLevel0.key2Level1.key1Level2\"];\n+}\n+\n+message NonPrimitiveValue {\n+    fixed64 key1Level1 = 1;\n+    NonPrimitiveNestedValue key2Level1 = 2;\n+}\n+\n+message NonPrimitiveNestedValue {\n+    string key1Level2 = 1;\n+    fixed64 levelNumber = 2;\n+}\n+\n+message InvalidExampleValue {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"field1.key1Level1, field2.key2Level1.key1Level2\"];\n+}\n+\n+message InvalidNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1, field2.key2Level1.deprecated\"];\n+}\n+\n+message InvalidFullNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                  \"field2.key1Level1.key1Level2, field2.key2Level1.key1Level2\"];\n+}\n+\n+message NotNestedSecondaryIndex {\n+    string field1 = 1;\n+    NonPrimitiveValue field2 = 2 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field2\"];\n+    fixed64 field3 = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"field3\"];\n+}\n+\n+message ClassRoom {\n+    repeated Student students = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"students.age\"];\n+    Infrastructure classInfra = 2;\n+}\n+\n+message Student {\n+    string name = 1;\n+    fixed64 age = 2;\n+}\n+\n+message Person {\n+    string name = 1;\n+    fixed64 age = 2;\n+    PhoneNumber phoneNumber = 3 [(org.corfudb.runtime.schema).nested_secondary_keys = \"phoneNumber.mobile\"];\n+}\n+\n+message PhoneNumber {\n+    repeated string mobile = 1;\n+    string home = 2;\n+}\n+\n+message Office {\n+    repeated Department departments = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"departments.members.phoneNumbers\"];\n+}\n+\n+message Department {\n+    repeated Member members = 1;\n+}\n+\n+message Member {\n+    string name = 1;\n+    fixed64 age = 2;\n+    repeated string phoneNumbers = 3;\n+}\n+\n+message School {\n+    repeated ClassRoom classRooms = 1 [(org.corfudb.runtime.schema).nested_secondary_keys = \"classRooms.classInfra.numberDesks, classRooms.classInfra.others\"];\n+}\n+\n+message Infrastructure {\n+    fixed64 numberDesks = 1;\n+    repeated string others = 2;\n+    fixed64 roomSizeInMeters = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDk2MDc0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjozMDoxNlrOH-3-Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjozMDoxNlrOH-3-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MDgzOQ==", "bodyText": "For 40 Class rooms, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535690839", "createdAt": "2020-12-03T22:30:16Z", "author": {"login": "zhangn49"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -199,6 +201,701 @@ public void testSecondaryIndexes() throws Exception {\n         log.debug(table.getMetrics().toString());\n     }\n \n+    /**\n+     * Simple example to see how nested secondary indexes work. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexes() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleValue, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleValue.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create 100 records\n+        final int totalRecords = 100;\n+        final long even = 0L;\n+        final long odd = 1L;\n+        List<Long> evenRecordIndexes = new ArrayList<>();\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalRecords; i++) {\n+            if(i % 2 == 0) {\n+                evenRecordIndexes.add(Long.valueOf(i));\n+            }\n+\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleValue.newBuilder()\n+                                .setPayload(\"payload_\" + i)\n+                                .setAnotherKey(System.currentTimeMillis())\n+                                .setEntryIndex(i)\n+                                .setNonPrimitiveFieldLevel0(ExampleSchemas.NonPrimitiveValue.newBuilder()\n+                                .setKey1Level1(i % 2 == 0 ? even : odd)\n+                                .setKey2Level1(ExampleSchemas.NonPrimitiveNestedValue.newBuilder()\n+                                        .setKey1Level2(i < (totalRecords/2) ? \"lower half\" : \"upper half\")\n+                                        .setLevelNumber(2)\n+                                        .build()))\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key1Level1\", even);\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata> entry = it.next();\n+                assertThat(evenRecordIndexes).contains(entry.getPayload().getEntryIndex());\n+                evenRecordIndexes.remove(entry.getPayload().getEntryIndex());\n+            }\n+\n+            assertThat(evenRecordIndexes).isEmpty();\n+            readWriteTxn.commit();\n+        }\n+\n+        // Get by secondary index from second level (nested), retrieve from database 'upper half'\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key2Level1.key1Level2\", \"upper half\");\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            long sum = 0;\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                sum = sum + it.next().getPayload().getEntryIndex();\n+            }\n+\n+            // Assert sum of consecutive numbers of \"upper half\" match the expected value\n+            assertThat(sum).isEqualTo(((totalRecords/2) / 2)*((totalRecords/2) + (totalRecords-1)));\n+            readWriteTxn.commit();\n+        }\n+\n+        log.debug(table.getMetrics().toString());\n+    }\n+\n+    /**\n+     * Simple example to see how nested secondary indexes work on repeated fields. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexesRepeatedField() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleSchemas.ClassRoom.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create records for 40 students", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDk2MzAyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjozMDo0OFrOH-3_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjozMDo0OFrOH-3_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY5MTE1Mw==", "bodyText": "totalRooms/2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535691153", "createdAt": "2020-12-03T22:30:48Z", "author": {"login": "zhangn49"}, "path": "test/src/test/java/org/corfudb/runtime/collections/CorfuStoreShimTest.java", "diffHunk": "@@ -199,6 +201,701 @@ public void testSecondaryIndexes() throws Exception {\n         log.debug(table.getMetrics().toString());\n     }\n \n+    /**\n+     * Simple example to see how nested secondary indexes work. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexes() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleValue, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleValue.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create 100 records\n+        final int totalRecords = 100;\n+        final long even = 0L;\n+        final long odd = 1L;\n+        List<Long> evenRecordIndexes = new ArrayList<>();\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalRecords; i++) {\n+            if(i % 2 == 0) {\n+                evenRecordIndexes.add(Long.valueOf(i));\n+            }\n+\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleValue.newBuilder()\n+                                .setPayload(\"payload_\" + i)\n+                                .setAnotherKey(System.currentTimeMillis())\n+                                .setEntryIndex(i)\n+                                .setNonPrimitiveFieldLevel0(ExampleSchemas.NonPrimitiveValue.newBuilder()\n+                                .setKey1Level1(i % 2 == 0 ? even : odd)\n+                                .setKey2Level1(ExampleSchemas.NonPrimitiveNestedValue.newBuilder()\n+                                        .setKey1Level2(i < (totalRecords/2) ? \"lower half\" : \"upper half\")\n+                                        .setLevelNumber(2)\n+                                        .build()))\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key1Level1\", even);\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata> entry = it.next();\n+                assertThat(evenRecordIndexes).contains(entry.getPayload().getEntryIndex());\n+                evenRecordIndexes.remove(entry.getPayload().getEntryIndex());\n+            }\n+\n+            assertThat(evenRecordIndexes).isEmpty();\n+            readWriteTxn.commit();\n+        }\n+\n+        // Get by secondary index from second level (nested), retrieve from database 'upper half'\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"nonPrimitiveFieldLevel0.key2Level1.key1Level2\", \"upper half\");\n+            assertThat(entries.size()).isEqualTo(totalRecords/2);\n+            long sum = 0;\n+            Iterator<CorfuStoreEntry<Uuid, ExampleValue, ManagedMetadata>> it = entries.iterator();\n+            while(it.hasNext()) {\n+                sum = sum + it.next().getPayload().getEntryIndex();\n+            }\n+\n+            // Assert sum of consecutive numbers of \"upper half\" match the expected value\n+            assertThat(sum).isEqualTo(((totalRecords/2) / 2)*((totalRecords/2) + (totalRecords-1)));\n+            readWriteTxn.commit();\n+        }\n+\n+        log.debug(table.getMetrics().toString());\n+    }\n+\n+    /**\n+     * Simple example to see how nested secondary indexes work on repeated fields. Please see example_schemas.proto.\n+     *\n+     * @throws Exception exception\n+     */\n+    @Test\n+    public void testNestedSecondaryIndexesRepeatedField() throws Exception {\n+\n+        // Get a Corfu Runtime instance.\n+        CorfuRuntime corfuRuntime = getTestRuntime();\n+\n+        // Creating Corfu Store using a connected corfu client.\n+        CorfuStoreShim shimStore = new CorfuStoreShim(corfuRuntime);\n+\n+        // Define a namespace for the table.\n+        final String someNamespace = \"some-namespace\";\n+        // Define table name.\n+        final String tableName = \"ManagedMetadata\";\n+\n+        // Create & Register the table.\n+        Table<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata> table = shimStore.openTable(\n+                someNamespace,\n+                tableName,\n+                Uuid.class,\n+                ExampleSchemas.ClassRoom.class,\n+                ManagedMetadata.class,\n+                // TableOptions includes option to choose - Memory/Disk based corfu table.\n+                TableOptions.builder().build());\n+\n+        // Create records for 40 students\n+        final int totalStudents = 40;\n+        final long youngStudent = 15L;\n+        final long olderStudent = 25L;\n+        ManagedMetadata user = ManagedMetadata.newBuilder().setCreateUser(\"user_UT\").build();\n+\n+        for(int i=0; i<totalStudents; i++) {\n+            UUID uuid = UUID.randomUUID();\n+            Uuid key = Uuid.newBuilder()\n+                    .setMsb(uuid.getMostSignificantBits()).setLsb(uuid.getLeastSignificantBits())\n+                    .build();\n+\n+            try (ManagedTxnContext txn = shimStore.txn(someNamespace)) {\n+                txn.putRecord(tableName, key,\n+                        ExampleSchemas.ClassRoom.newBuilder().addStudents(ExampleSchemas.Student.newBuilder()\n+                                .setName(\"MaleStudent_\" + i)\n+                                .setAge(i % 2 == 0 ? youngStudent : olderStudent).build())\n+                                .addStudents(ExampleSchemas.Student.newBuilder()\n+                                        .setName(\"FemaleStudent_\" + i)\n+                                        .setAge(i % 2 == 0 ? youngStudent : olderStudent).build())\n+                                .build(),\n+                        user);\n+                txn.commit();\n+            }\n+        }\n+\n+        // Get by secondary index, retrieve from database all even entries\n+        try (ManagedTxnContext readWriteTxn = shimStore.txn(someNamespace)) {\n+            List<CorfuStoreEntry<Uuid, ExampleSchemas.ClassRoom, ManagedMetadata>> entries = readWriteTxn\n+                    .getByIndex(table, \"students.age\", youngStudent);\n+            assertThat(entries.size()).isEqualTo(totalStudents/2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5b8082dc0efaa6d33dd6a3a7591eeb51b5e067"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTE2NjIwOnYy", "diffSide": "RIGHT", "path": "runtime/proto/corfu_options.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoyNTo0NVrOH-5yiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMzowMjo1MFrOH--sHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcyMDU4NQ==", "bodyText": "Is there any reason why we use comma-separated string instead of repeated string fields?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535720585", "createdAt": "2020-12-03T23:25:45Z", "author": {"login": "Lujie1996"}, "path": "runtime/proto/corfu_options.proto", "diffHunk": "@@ -17,6 +17,8 @@ message SchemaOptions {\n     optional bool is_federated = 4;\n     // Tag tables with unique stream listener tags for selectivity in receiving change notifications.\n     repeated string stream_tag = 5;\n+    // String of comma-separated nested secondary keys\n+    optional string nested_secondary_keys = 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99f786a0f8b1a940a9bef99b3028e9259ddc9471"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwMDg2Mg==", "bodyText": "I don't think so. I was not part of the design, I was already told of how it would look like, but one reason I could think of is simplification, as copying \"[(org.corfudb.runtime.schema).nested_secondary_keys = \" multiple times could be annoying. But I don't think there is any other special reason.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535800862", "createdAt": "2020-12-04T03:02:50Z", "author": {"login": "annym"}, "path": "runtime/proto/corfu_options.proto", "diffHunk": "@@ -17,6 +17,8 @@ message SchemaOptions {\n     optional bool is_federated = 4;\n     // Tag tables with unique stream listener tags for selectivity in receiving change notifications.\n     repeated string stream_tag = 5;\n+    // String of comma-separated nested secondary keys\n+    optional string nested_secondary_keys = 6;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcyMDU4NQ=="}, "originalCommit": {"oid": "99f786a0f8b1a940a9bef99b3028e9259ddc9471"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTM1MTE0OnYy", "diffSide": "RIGHT", "path": "runtime/proto/example_schemas.proto", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyOToxMlrOH-7YBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoyOToxMlrOH-7YBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NjU2Nw==", "bodyText": "can we try a oneOf here based on our meeting with the consumers?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2837#discussion_r535746567", "createdAt": "2020-12-04T00:29:12Z", "author": {"login": "hisundar"}, "path": "runtime/proto/example_schemas.proto", "diffHunk": "@@ -28,4 +28,105 @@ message ExampleValue {\n     string payload = 1;\n     fixed64 anotherKey = 2 [(org.corfudb.runtime.schema).secondary_key = true];\n     Uuid uuid = 3 [(org.corfudb.runtime.schema).secondary_key = true];\n+    fixed64 entryIndex = 4;\n+    NonPrimitiveValue nonPrimitiveFieldLevel0 = 5 [(org.corfudb.runtime.schema).nested_secondary_keys =\n+                                                   \"nonPrimitiveFieldLevel0.key1Level1, nonPrimitiveFieldLevel0.key2Level1.key1Level2\"];\n+}\n+\n+message NonPrimitiveValue {\n+    fixed64 key1Level1 = 1;\n+    NonPrimitiveNestedValue key2Level1 = 2;\n+}\n+\n+message NonPrimitiveNestedValue {\n+    string key1Level2 = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0baf1dfffdc8b3d1b9c9d77fdf1459d326f92fd1"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1812, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}