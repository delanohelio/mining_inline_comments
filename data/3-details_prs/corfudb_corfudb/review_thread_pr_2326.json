{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTc5NjMy", "number": 2326, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyODoxM1rODbC5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjoyMTo0M1rODcX5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg1NjkzOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjoyODoxM1rOFiTr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowNzoyM1rOFj58Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODQ0Mg==", "bodyText": "Do you not need a precheck for checkStatus before invoking api or checkHandle is enough ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r371518442", "createdAt": "2020-01-27T22:28:13Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();\n+        boolean res =  iterator.isValid();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToFirst() {\n+        checkHandle();\n+        iterator.seekToFirst();\n+        checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToLast() {\n+        throw new UnsupportedOperationException(\"seekToLast\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seek(byte[] target) {\n+        throw new UnsupportedOperationException(\"seek\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekForPrev(byte[] target){\n+        throw new UnsupportedOperationException(\"seekForPrev\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void next() {\n+       checkHandle();\n+       iterator.next();\n+       checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void prev() {\n+        throw new UnsupportedOperationException(\"prev\");\n+    }\n+\n+    /**\n+     * Returns the key of the current position of the iterator.\n+     */\n+    public byte[] key() {\n+        checkHandle();\n+        byte[] res = iterator.key();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5MzgyMg==", "bodyText": "The checkHandle and checkStatus  verifies the validity of the call.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r373193822", "createdAt": "2020-01-30T21:07:23Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();\n+        boolean res =  iterator.isValid();\n+        checkStatus();\n+        return res;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToFirst() {\n+        checkHandle();\n+        iterator.seekToFirst();\n+        checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekToLast() {\n+        throw new UnsupportedOperationException(\"seekToLast\");\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seek(byte[] target) {\n+        throw new UnsupportedOperationException(\"seek\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void seekForPrev(byte[] target){\n+        throw new UnsupportedOperationException(\"seekForPrev\");\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void next() {\n+       checkHandle();\n+       iterator.next();\n+       checkStatus();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void prev() {\n+        throw new UnsupportedOperationException(\"prev\");\n+    }\n+\n+    /**\n+     * Returns the key of the current position of the iterator.\n+     */\n+    public byte[] key() {\n+        checkHandle();\n+        byte[] res = iterator.key();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxODQ0Mg=="}, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg2NjYyOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjozMTo0OFrOFiTx1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowOToxNFrOFj5_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxOTk1Nw==", "bodyText": "Please add note on what it checks on rocksdb", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r371519957", "createdAt": "2020-01-27T22:31:48Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NDU5Mw==", "bodyText": "Added comment.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r373194593", "createdAt": "2020-01-30T21:09:14Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUxOTk1Nw=="}, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg3MTA3OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjozMzozOFrOFiT0kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjozMzozOFrOFiT0kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyMDY1OQ==", "bodyText": "nit:This code is repeated in every method.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r371520659", "createdAt": "2020-01-27T22:33:38Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CheckedRocksIterator.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.corfudb.runtime.collections;\n+\n+import org.corfudb.runtime.exceptions.unrecoverable.UnrecoverableCorfuError;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.RocksIteratorInterface;\n+\n+/**\n+ *\n+ * A wrapper class that makes a access to the RocksIterator safe: the rocks library does some checks but they\n+ * are enforced via assert, but assert checking is disabled on many jvms by default, hence the explicit checking.\n+ *\n+ * Created by Maithem on 1/24/20.\n+ */\n+public class CheckedRocksIterator implements RocksIteratorInterface {\n+\n+    private final RocksIterator iterator;\n+    public CheckedRocksIterator(RocksIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    private void checkHandle() {\n+        if (!iterator.isOwningHandle()) {\n+            throw new IllegalStateException(\"Handle is invalid\");\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean isValid() {\n+        checkHandle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Njg5ODM0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo0NDo0M1rOFiUFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMjo0NDo0M1rOFiUFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUyNTAxOQ==", "bodyText": "Could you please add comments as to reason why try with resources is necessary here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r371525019", "createdAt": "2020-01-27T22:44:43Z", "author": {"login": "medhavidhawan"}, "path": "runtime/src/main/java/org/corfudb/runtime/collections/CorfuTable.java", "diffHunk": "@@ -358,19 +358,21 @@ public void insert(@ConflictParameter K key, V value) {\n      */\n     @Accessor\n     public List<V> scanAndFilter(Predicate<? super V> valuePredicate) {\n-        return mainMap.entryStream()\n-                .map(Entry::getValue).filter(valuePredicate)\n-                .collect(Collectors.toCollection(ArrayList::new));\n+        try (Stream<Entry<K, V>> stream = mainMap.entryStream()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51439f225d709e2bd1134374603b0b45a0085bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDc4MjgwOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/CheckpointWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjoyMTo0M1rOFkZifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMjoyNDozMVrOFkZltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxMTQ4NA==", "bodyText": "With this change, shall we put this log info before the try-with statement?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r373711484", "createdAt": "2020-01-31T22:21:43Z", "author": {"login": "WenbinZhu"}, "path": "runtime/src/main/java/org/corfudb/runtime/CheckpointWriter.java", "diffHunk": "@@ -154,11 +148,10 @@ public Token appendCheckpoint(Token snapshotTimestamp) {\n                 .snapshot(snapshotTimestamp)\n                 .build()\n                 .begin();\n-        try (Timer.Context context = MetricsUtils.getConditionalContext(appendCheckpointTimer)) {\n+        try (Stream<Map.Entry> entries = this.map.entryStream()) {\n             // A checkpoint writer will do two accesses one to obtain the object\n             // vlo version and to get a shallow copy of the entry set\n             log.info(\"appendCheckpoint: Started checkpoint for {} at snapshot {}\", streamId, snapshotTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3026eab4ae8751a53fabe36047ab009c5db1c66"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxMjMwOQ==", "bodyText": "done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2326#discussion_r373712309", "createdAt": "2020-01-31T22:24:31Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/CheckpointWriter.java", "diffHunk": "@@ -154,11 +148,10 @@ public Token appendCheckpoint(Token snapshotTimestamp) {\n                 .snapshot(snapshotTimestamp)\n                 .build()\n                 .begin();\n-        try (Timer.Context context = MetricsUtils.getConditionalContext(appendCheckpointTimer)) {\n+        try (Stream<Map.Entry> entries = this.map.entryStream()) {\n             // A checkpoint writer will do two accesses one to obtain the object\n             // vlo version and to get a shallow copy of the entry set\n             log.info(\"appendCheckpoint: Started checkpoint for {} at snapshot {}\", streamId, snapshotTimestamp);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxMTQ4NA=="}, "originalCommit": {"oid": "c3026eab4ae8751a53fabe36047ab009c5db1c66"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2065, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}