{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMjg3MjQ3", "number": 2595, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozMjo0MFrOEKw2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMDoxOFrOENAXUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIxNDk0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozMjo0MFrOGr_LmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMDo1OToyOVrOGsc2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw==", "bodyText": "Shouldn't we call the clusterManagerAdapter.start() at this point? so it connects to the remote topology provider? If someone implements the interface this will never be triggered.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777113", "createdAt": "2020-07-02T06:32:40Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5MjYyNA==", "bodyText": "This is just set the DiscoveryService for callback when there is a new config. There is a start() that connects and registers at the upper application cluster manager.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449192624", "createdAt": "2020-07-02T18:17:29Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI0MTM3NQ==", "bodyText": "exactly, but I didn't see where the start is being called. I only see it in the abstract class clubbed with the setCorfuReplicationDiscoveryService. But for the case of someone directly implementing the interface, where is the start called? Maybe I missed it but I didn't see it.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449241375", "createdAt": "2020-07-02T20:06:36Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTI2MzE1Ng==", "bodyText": "Made the changes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449263156", "createdAt": "2020-07-02T20:59:29Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.setCorfuReplicationDiscoveryService(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzExMw=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIxODI3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNDoxMlrOGr_Nrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1Njo0NFrOGthizQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng==", "bodyText": "redundant accesor in the interface, we can remove this one like in the others...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448777646", "createdAt": "2020-07-02T06:34:12Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5Mzg3OA==", "bodyText": "Others will not be accessed outside the adapter, but this can be accessed outside. Also, it provides the api to get the currentTopology without contacting the upper layer.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449193878", "createdAt": "2020-07-02T18:20:08Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODY4NQ==", "bodyText": "But by definition all methods for an interface are 'public', that's why it is redundant. And sonarlint complains on the IDE for these things.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388685", "createdAt": "2020-07-06T17:56:44Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3NzY0Ng=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyMDYzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNTowN1rOGr_PEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNTowN1rOGr_PEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODAwMA==", "bodyText": "can we replace the siteManagers by Cluster/Topology Manager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778000", "createdAt": "2020-07-02T06:35:07Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyMjU3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNTo0OFrOGr_QMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxOTowMDozOVrOGsZxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODI4OA==", "bodyText": "can we rename to -> prepareClusterRoleChange", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778288", "createdAt": "2020-07-02T06:35:48Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIxMjg0NQ==", "bodyText": "actually if this is only called when an Active is transitioning to a Standby then can we just call it prepareToBecomeStandby() ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r449212845", "createdAt": "2020-07-02T19:00:39Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODI4OA=="}, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyMzcyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNjoxNVrOGr_Q6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNjoxNVrOGr_Q6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODQ3NA==", "bodyText": "site -> cluster... filp -> flip", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778474", "createdAt": "2020-07-02T06:36:15Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyNDU3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNjozOVrOGr_RaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozNjozOVrOGr_RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3ODYwMQ==", "bodyText": "typo -> query", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448778601", "createdAt": "2020-07-02T06:36:39Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service\n+    void start();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the siteManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a site flip, it is the API used to notify the current log\n+     * replication node to prepare a site role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareSiteRoleChange();\n+\n+    // While preparing a site filp, the application can query the log replication\n+    // status and do a smooth transition till the querry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIyOTUxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozODo0M1rOGr_UhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozODo0M1rOGr_UhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTM5Nw==", "bodyText": "Site -> Cluster", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779397", "createdAt": "2020-07-02T06:38:43Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NzIzMDg4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozOToxOFrOGr_VZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNjozOToxOFrOGr_VZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTYyMA==", "bodyText": "siteManager -> ClusterManager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r448779620", "createdAt": "2020-07-02T06:39:18Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationSiteManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Set the corfuReplicationDiscoveryServiceMember\n+     */\n+     void setCorfuReplicationDiscoveryService(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Site Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of site config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newSiteConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // Start the siteManager service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e08c127359e2af33011f514a879a5f085b4327"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzk0OTU0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MzoyNFrOGthbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1MzoyNFrOGthbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NjgzMg==", "bodyText": "Please remove this TODO right before this line as it is addressed with the rename.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450386832", "createdAt": "2020-07-06T17:53:24Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {\n         //TODO  It does not restrict ClusterRole change from standby -> active or active->standby however,\n         // our underlying only process one type. Maybe it's the naming? or revising the actual functionality?\n         if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzk2MjM5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo1NzowOFrOGthjog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNToxOVrOGuNttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA==", "bodyText": "typo -> ClusterManger -> ClusterManager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450388898", "createdAt": "2020-07-06T17:57:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjM3Mg==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112372", "createdAt": "2020-07-07T20:05:19Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4ODg5OA=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzk4MTIxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowMjozNVrOGthvLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDo1NTo0OFrOGuPRUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ==", "bodyText": "Assuming that the start should call the register is a bit loose, as implementers might not do the right thing. Maybe it's better if we call from the DiscoveryService start (which could be more of a setDiscoveryService) and register.... and avoid issues coming from an implementer not really doing the register explicitly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450391855", "createdAt": "2020-07-06T18:02:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NzM0Mg==", "bodyText": "+1.  My suggestion is to have a registerDiscoveryService() method here which is called by the discovery service to register itself.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450397342", "createdAt": "2020-07-06T18:12:50Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMjM3MQ==", "bodyText": "@xiaoqin2012 I was referring to this..", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451122371", "createdAt": "2020-07-07T20:25:09Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEzNzg3Mg==", "bodyText": "This is out of date.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451137872", "createdAt": "2020-07-07T20:55:48Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5MTg1NQ=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA1NDQ2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyNDozOVrOGtibjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyNDozOVrOGtibjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwMzIxMg==", "bodyText": "does this register the discovery service?  If so, my suggestion is to invoke it from discovery service instead.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450403212", "createdAt": "2020-07-06T18:24:39Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA2MDk3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyNjozMVrOGtifZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyNTo1NFrOGuKjjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDE5Ng==", "bodyText": "is this class needed?  We already have a default implementation of the adapter.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450404196", "createdAt": "2020-07-06T18:26:31Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MDYyMQ==", "bodyText": "It has the basic implementation that other clusterManagers can share and also it gives an example of the basic implementation flow.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451060621", "createdAt": "2020-07-07T18:25:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNDE5Ng=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA2Njk1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyODoxN1rOGtii_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoyMzoxNVrOGuOREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTExNg==", "bodyText": "this is not doing any registration...?  what does this method do?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405116", "createdAt": "2020-07-06T18:28:17Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     Thread thread = new Thread(siteManagerCallback);\n \n-    public void start() {\n+    public void register() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTQyNQ==", "bodyText": "It start to talk to the real ClusterManager and get the topology information.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451121425", "createdAt": "2020-07-07T20:23:15Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -49,7 +49,7 @@\n \n     Thread thread = new Thread(siteManagerCallback);\n \n-    public void start() {\n+    public void register() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTExNg=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA3MjA0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyOTo1N1rOGtimMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoyOTo1N1rOGtimMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTkzNg==", "bodyText": "can we rename this also to prepareToBecomeStandby() or something like that?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450405936", "createdAt": "2020-07-06T18:29:57Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {\n+    @Getter\n+    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+\n+    @Getter\n+    TopologyConfigurationMsg topologyConfig;\n+\n+    String localEndpoint;\n+\n+    public void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n+        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n+        register();\n+    }\n+\n+    public void setLocalEndpoint(String endpoint) {\n+        this.localEndpoint = endpoint;\n+    }\n+\n+    /**\n+     * Will be called when the cluster change and a new configuration is sent over\n+     *\n+     * @param newTopologyConfigMsg\n+     */\n+    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n+        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n+            topologyConfig = newTopologyConfigMsg;\n+            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n+        }\n+    }\n+\n+    public void prepareClusterRoleChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODgzODkwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNDozM1rOGtp7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNDozM1rOGtp7Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTk5MQ==", "bodyText": "Is it possible that we can merge these two queryTopologyConfig functions? Maybe use a boolean parameter to indicate query from the local cache or not.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450525991", "createdAt": "2020-07-06T23:14:33Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg0MTMzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNTo0MlrOGtp8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoxNTo0MlrOGtp8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNjMzOQ==", "bodyText": "Should we have a unified name 'prepareToBecomeStandby()'?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450526339", "createdAt": "2020-07-06T23:15:42Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -1,51 +1,59 @@\n package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n \n-import lombok.Getter;\n-\n import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n \n-public abstract class CorfuReplicationClusterManagerAdapter {\n-    @Getter\n-    CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService;\n+/**\n+ * This is the interface for CorfuReplicationClusterManager.\n+ * Implementation of this should have following members:\n+ * 1. corfuReplicationDiscoveryService that is needed to notify the cluster configuration change.\n+ * 2. localEndpoint that has the local node information.\n+ *\n+ */\n+public interface CorfuReplicationClusterManagerAdapter {\n \n-    @Getter\n-    TopologyConfigurationMsg topologyConfig;\n+    /**\n+     *   Register the discovery service and start the cluster manager callback service.\n+     *   Implementation of this function should call register(), register this ClusterManager at the upper\n+     *   layer to get the callback for topology change.\n+     */\n+     void start(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService);\n \n-    public void connect(CorfuReplicationDiscoveryServiceAdapter corfuReplicationDiscoveryService) {\n-        this.corfuReplicationDiscoveryService = corfuReplicationDiscoveryService;\n-        start();\n-    }\n+     /**\n+     * Set the localEndpoint\n+     */\n+    void setLocalEndpoint(String endpoint);\n \n-    public synchronized TopologyConfigurationMsg fetchTopology() {\n-        topologyConfig = queryTopologyConfig();\n-        return topologyConfig;\n-    }\n+    // This is the currentTopology cached at the adapter.\n+    public TopologyConfigurationMsg getTopologyConfig();\n \n-    /**\n-     * Will be called when the cluster change and a new configuration is sent over\n-     *\n-     * @param newTopologyConfigMsg\n-     */\n-    public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopologyConfigMsg) {\n-        if (newTopologyConfigMsg.getTopologyConfigID() > topologyConfig.getTopologyConfigID()) {\n-            topologyConfig = newTopologyConfigMsg;\n-            corfuReplicationDiscoveryService.updateTopology(topologyConfig);\n-        }\n-    }\n+    // This will talk to the real Cluster Manager and get the most current topology.\n+    TopologyConfigurationMsg queryTopologyConfig();\n \n-    public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareClusterRoleChange();\n-    }\n+    // This is called when get a notification of cluster config change.\n+    void updateTopologyConfig(TopologyConfigurationMsg newClusterConfigMsg);\n \n-    public int queryReplicationStatus() {\n-        return corfuReplicationDiscoveryService.queryReplicationStatus();\n-    }\n+    // the register at the upper layer to get cluster topology information\n+    void register();\n \n-    //TODO: handle the case that queryTopologyConfig return an exception.\n-    public abstract TopologyConfigurationMsg queryTopologyConfig();\n+    // Stop the ClusterManger service\n+    void shutdown();\n \n-    public abstract void start();\n \n-    public abstract void shutdown();\n+    /**\n+     * While doing a cluster role type flip, it is the API used to notify the current log\n+     * replication node to prepare a cluster role type change. It will do some\n+     * bookkeeping to calculate the number of log entries to be sent over\n+     *\n+     */\n+    void prepareClusterRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg0OTMwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyMDowM1rOGtqBQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODoyODoxOFrOGuKoRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzU1Mg==", "bodyText": "Is this abstract class used to guarantee that all cluster managers have corfuReplicationDiscoveryService and topologyConfig?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r450527552", "createdAt": "2020-07-06T23:20:03Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2MTgyOA==", "bodyText": "yes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451061828", "createdAt": "2020-07-07T18:28:18Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerBaseAdapter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.Getter;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.corfudb.infrastructure.logreplication.infrastructure.CorfuReplicationDiscoveryServiceAdapter;\n+import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n+\n+/***\n+ * This is the base class for CorfuReplicationSiteManager and implements the basic functionality.\n+ * Any SiteMangerImplementation should extend this class or implements the interface.\n+ *\n+ */\n+@Slf4j\n+public abstract class CorfuReplicationClusterManagerBaseAdapter implements CorfuReplicationClusterManagerAdapter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNzU1Mg=="}, "originalCommit": {"oid": "e6de0831d8e6390c8b4cb0f786e856855011d314"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjUwNTk0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTo1NjozM1rOGuNcfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNTowOFrOGuNtWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ==", "bodyText": "Let's remove the TODO below this line.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451107965", "createdAt": "2020-07-07T19:56:33Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjI4MQ==", "bodyText": "+1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112281", "createdAt": "2020-07-07T20:05:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -549,13 +549,13 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareClusterRoleChange() {\n+    public void prepareToBecomeStandby() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwNzk2NQ=="}, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjUzMTQ0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowNDo0OVrOGuNspg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoxNzo0MlrOGuOFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjEwMg==", "bodyText": "The start is still not being called. So, any implementation of the interface itself will miss running the start logic.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451112102", "createdAt": "2020-07-07T20:04:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.register(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExODM1Mw==", "bodyText": "It is said in the comment that any implementation of the register should call the start.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r451118353", "createdAt": "2020-07-07T20:17:42Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -211,9 +211,9 @@ private void connectAndQueryTopology() throws LogReplicationDiscoveryServiceExce\n             try {\n                 // Connect to Cluster Manager and Retrieve Topology Info\n                 log.info(\"Connecting to Cluster Manager adapter...\");\n-                clusterManagerAdapter.connect(this);\n+                clusterManagerAdapter.register(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMjEwMg=="}, "originalCommit": {"oid": "7d4ea794985e62b08688baccb1a4d12e40824580"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDcyOTE1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMDoxOFrOGvcqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToyNzo1MlrOGve1og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTgxOQ==", "bodyText": "please remove this otherwise compilation will fail", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r452405819", "createdAt": "2020-07-09T18:20:18Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -364,6 +364,7 @@ public void runSiteSwitch() throws Exception {\n                assertThat(mapA1.containsKey(String.valueOf(i))).isTrue();\n             }\n \n+            System.out.print(\"\\nTest Succeeds!!!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MTUwNg==", "bodyText": "This is the test, the system.out.print is allover in the tests.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2595#discussion_r452441506", "createdAt": "2020-07-09T19:27:52Z", "author": {"login": "xiaoqin2012"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -364,6 +364,7 @@ public void runSiteSwitch() throws Exception {\n                assertThat(mapA1.containsKey(String.valueOf(i))).isTrue();\n             }\n \n+            System.out.print(\"\\nTest Succeeds!!!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTgxOQ=="}, "originalCommit": {"oid": "39aed9fc7c53d7edfc5e6dce70e6ee4fe0b40dcb"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1820, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}