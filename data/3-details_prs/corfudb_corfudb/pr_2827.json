{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjEyMTMx", "number": 2827, "title": "Protobuf Management RPCs", "bodyText": "Overview\nDescription: Provides an implementation of Management RPCs using Protobuf messages.\nDone as part of an effort to support rolling upgrades.\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-11-22T00:55:26Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827", "merged": true, "mergeCommit": {"oid": "805ef812d278dbec2a6f3bba458114b1264ac009"}, "closed": true, "closedAt": "2020-12-04T18:53:32Z", "author": {"login": "zfrenette"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABde2zIQgBqjQwMjQzNzg2MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi4NxNgBqjQwNzI4MjAzMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5b53a53a7cf95c6579b3ddf57926ea2321f90f6", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/c5b53a53a7cf95c6579b3ddf57926ea2321f90f6", "committedDate": "2020-11-22T00:52:01Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "e1281ba4884a63fb9319c249af144f908e304040", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e1281ba4884a63fb9319c249af144f908e304040", "committedDate": "2020-11-22T02:05:17Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1281ba4884a63fb9319c249af144f908e304040", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e1281ba4884a63fb9319c249af144f908e304040", "committedDate": "2020-11-22T02:05:17Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "1bec6144ef1460e12544d58f9b52cf7a97fab8e6", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1bec6144ef1460e12544d58f9b52cf7a97fab8e6", "committedDate": "2020-11-22T18:17:33Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bec6144ef1460e12544d58f9b52cf7a97fab8e6", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1bec6144ef1460e12544d58f9b52cf7a97fab8e6", "committedDate": "2020-11-22T18:17:33Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "29e33208a49001da8c053a2f64bf710605892298", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/29e33208a49001da8c053a2f64bf710605892298", "committedDate": "2020-11-22T22:54:57Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29e33208a49001da8c053a2f64bf710605892298", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/29e33208a49001da8c053a2f64bf710605892298", "committedDate": "2020-11-22T22:54:57Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "e5dd4e71a127855393ea60aab8b79237e6b14882", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e5dd4e71a127855393ea60aab8b79237e6b14882", "committedDate": "2020-11-23T00:28:58Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5dd4e71a127855393ea60aab8b79237e6b14882", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e5dd4e71a127855393ea60aab8b79237e6b14882", "committedDate": "2020-11-23T00:28:58Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "b1f40e160d037304789104e7313a8c9504888022", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b1f40e160d037304789104e7313a8c9504888022", "committedDate": "2020-11-24T17:56:28Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1f40e160d037304789104e7313a8c9504888022", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/b1f40e160d037304789104e7313a8c9504888022", "committedDate": "2020-11-24T17:56:28Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "ea8e2a8f3c7cd827159a6d0063a7c256750f72a1", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ea8e2a8f3c7cd827159a6d0063a7c256750f72a1", "committedDate": "2020-11-26T23:13:38Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea8e2a8f3c7cd827159a6d0063a7c256750f72a1", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/ea8e2a8f3c7cd827159a6d0063a7c256750f72a1", "committedDate": "2020-11-26T23:13:38Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "17dd4f05ec3801d7cf26ab2ac054759cd2129ce8", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/17dd4f05ec3801d7cf26ab2ac054759cd2129ce8", "committedDate": "2020-11-30T01:14:31Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17dd4f05ec3801d7cf26ab2ac054759cd2129ce8", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/17dd4f05ec3801d7cf26ab2ac054759cd2129ce8", "committedDate": "2020-11-30T01:14:31Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "8748f25a6d6b767da2334879b93a15e79867edfb", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8748f25a6d6b767da2334879b93a15e79867edfb", "committedDate": "2020-11-30T17:05:35Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8748f25a6d6b767da2334879b93a15e79867edfb", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8748f25a6d6b767da2334879b93a15e79867edfb", "committedDate": "2020-11-30T17:05:35Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "a77e5667d1865c9e7711537764c3df76d6293990", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a77e5667d1865c9e7711537764c3df76d6293990", "committedDate": "2020-11-30T19:04:23Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a77e5667d1865c9e7711537764c3df76d6293990", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/a77e5667d1865c9e7711537764c3df76d6293990", "committedDate": "2020-11-30T19:04:23Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "e05955b8590de6f77f53a512b373c9f45aad3761", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e05955b8590de6f77f53a512b373c9f45aad3761", "committedDate": "2020-11-30T19:43:46Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e05955b8590de6f77f53a512b373c9f45aad3761", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/e05955b8590de6f77f53a512b373c9f45aad3761", "committedDate": "2020-11-30T19:43:46Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "426596757878ab669d4715863c1621f267974808", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/426596757878ab669d4715863c1621f267974808", "committedDate": "2020-11-30T21:31:15Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "426596757878ab669d4715863c1621f267974808", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/426596757878ab669d4715863c1621f267974808", "committedDate": "2020-11-30T21:31:15Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "8dda0236a13380c66b04b6caa14743d2a388c115", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8dda0236a13380c66b04b6caa14743d2a388c115", "committedDate": "2020-11-30T23:15:17Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8dda0236a13380c66b04b6caa14743d2a388c115", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8dda0236a13380c66b04b6caa14743d2a388c115", "committedDate": "2020-11-30T23:15:17Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9b57ee6e9db2e751de642d841c515dbcb12c0dc5", "committedDate": "2020-12-01T22:04:03Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNDI3Mzgy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-543427382", "createdAt": "2020-12-03T04:06:02Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowOToyOVrOH94qig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNzozOVrOH940hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzU3OA==", "bodyText": "I just noticed some old RPC handlers have Nonnull constraint of their arguments (but some don't, also for other servers...), will it be better if we add Nonnull consistently to all the arguments?\nCurrently I cannot image any case where the argument is null but this might be helpful for debugging sometime in the future?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534653578", "createdAt": "2020-12-03T04:09:29Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTE1NQ==", "bodyText": "Is there any specific criteria that some handlers are set to synchronized but some are not? It looks to me that the operations upon shared resources have been synchronized in a lower level, (i.e. methods in servercontext, some concurrenthashmap, etc), and all the synchronized signature could be removed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534655155", "createdAt": "2020-12-03T04:14:43Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NjEzMw==", "bodyText": "Is the exception expected to be thrown when getHandledTypes() returns empty set? I thought it might be better if we explicitly check if (client.getHandledTypes().isEmpty()) and log the warn/info. I'm not 100% sure that will it throw an exception or just pass silently if the streaming collection is empty", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534656133", "createdAt": "2020-12-03T04:17:39Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MzczMTQ5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544373149", "createdAt": "2020-12-03T20:06:50Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowNjo1MFrOH-vWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowNjo1MFrOH-vWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0OTQ0Nw==", "bodyText": "Can we improve the logging message here, maybe just \"handleBootstrapManagement[{}]: incomplete layout {}\" would suffice.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535549447", "createdAt": "2020-12-03T20:06:50Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 217}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Mzc1NTA4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544375508", "createdAt": "2020-12-03T20:08:23Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowODoyM1rOH-vZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowODoyM1rOH-vZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1MDI5Nw==", "bodyText": "\"handleBootstrapManagement[{}]: already bootstrapped with {}, rejecting {}\"", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535550297", "createdAt": "2020-12-03T20:08:23Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Mzk0MzE3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544394317", "createdAt": "2020-12-03T20:27:54Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyNzo1NFrOH-wq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyNzo1NFrOH-wq5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3MTE3Mg==", "bodyText": "Do we need to differentiate between a management server no bootstrap error and a non-management server bootstrap error? it seems like we used to have two different errors, but they were essentially the same.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535571172", "createdAt": "2020-12-03T20:27:54Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +\n+                    \"{}, which is already bootstrapped... Rejecting!\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         } else {\n-            Layout layout = msg.getPayload();\n-            log.info(\"handleManagementBootstrap: received bootstrap layout : {}\", layout);\n-            if(layout.getClusterId() == null){\n-                log.warn(\"handleManagementBootstrap: clusterId for the layout {} is not present.\",\n-                        layout.getClusterId());\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                serverContext.saveManagementLayout(layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+            log.info(\"handleBootstrapManagement[{}]: Received bootstrap \" +\n+                    \"layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            serverContext.saveManagementLayout(layout);\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(true));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Triggers the failure handler.\n      * The msg contains the failed/defected nodes.\n      *\n-     * @param msg corfu message containing MANAGEMENT_FAILURE_DETECTED\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a REPORT_FAILURE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_FAILURE_DETECTED)\n-    public void handleFailureDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n-                                         ChannelHandlerContext ctx, IServerRouter r) {\n-\n-        // This server has not been bootstrapped yet, ignore all requests.\n-        if (!isBootstrapped(msg)) {\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_NOBOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.REPORT_FAILURE_REQUEST)\n+    public void handleReportFailure(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        // If the server isn't bootstrapped yet, ignore the request\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDEwNzk5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544410799", "createdAt": "2020-12-03T20:37:15Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNzoxNVrOH-xS1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNzoxNVrOH-xS1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MTM5OQ==", "bodyText": "Why is this missing from the PR?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535581399", "createdAt": "2020-12-03T20:37:15Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -411,23 +399,19 @@ public void handleHealingDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n      * Default NodeState has been providing unless the node is not bootstrapped.\n      * Failure detector updates ClusterNodeState by current state then current NodeState can be provided to other nodes.\n      *\n-     * @param msg corfu message containing NODE_STATE_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r server router\n+     * @param req  a message containing a QUERY_NODE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.NODE_STATE_REQUEST)\n-    public void handleNodeStateRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    @RequestHandler(type = PayloadCase.QUERY_NODE_REQUEST)\n+    public void handleQueryNode(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n         NodeState nodeState = clusterContext.getClusterView()\n                 .getNode(serverContext.getLocalEndpoint())\n                 .orElseGet(this::buildDefaultNodeState);\n \n-        r.sendResponse(ctx, msg, CorfuMsgType.NODE_STATE_RESPONSE.payloadMsg(nodeState));\n-    }\n-\n-    @ServerHandler(type = CorfuMsgType.FAILURE_DETECTOR_METRICS_REQUEST)\n-    public void handleFailureDetectorMetricsRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        FailureDetectorMetrics metrics = serverContext.getFailureDetectorMetrics();\n-        r.sendResponse(ctx, msg, CorfuMsgType.FAILURE_DETECTOR_METRICS_RESPONSE.payloadMsg(metrics));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 496}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDI0MTgz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544424183", "createdAt": "2020-12-03T20:44:43Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NDo0M1rOH-xzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NDo0M1rOH-xzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4OTcxOA==", "bodyText": "Why can't we explicitly fail this, or log?\nAlso, what if the thread was interrupted, swallowing all exceptions might cause problems, like \"hanging\".", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535589718", "createdAt": "2020-12-03T20:44:43Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDI4NjIw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544428620", "createdAt": "2020-12-03T20:47:21Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NzoyMVrOH-x-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NzoyMVrOH-x-kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5MjU5NQ==", "bodyText": "This can be replaced with the getExecutor helper methods in server context, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535592595", "createdAt": "2020-12-03T20:47:21Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -69,70 +75,73 @@\n \n     final ExecutorService executor;\n \n+    final WorkflowFactory workflowFactory;\n+\n     public Orchestrator(@Nonnull SingletonResource<CorfuRuntime> runtime,\n-                        @Nonnull ServerContext serverContext) {\n+                        @Nonnull ServerContext serverContext,\n+                        @Nonnull WorkflowFactory workflowFactory) {\n         this.serverContext = serverContext;\n-        this.getRuntime = runtime;\n-\n-        executor = Executors.newFixedThreadPool(Runtime.getRuntime()\n-                .availableProcessors(), new ThreadFactory() {\n-\n-            final AtomicInteger threadNumber = new AtomicInteger(0);\n-\n-            @Override\n-            public Thread newThread(Runnable r) {\n-                Thread thread = new Thread(r);\n-                thread.setDaemon(true);\n-                String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n-                        + threadNumber.getAndIncrement();\n-                thread.setName(threadName);\n-                thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n-                return thread;\n-            }\n+        this.workflowFactory = workflowFactory;\n+        getRuntime = runtime;\n \n-            void handleUncaughtException(Thread t, @Nonnull Throwable e) {\n-                log.error(\"handleUncaughtException[{}]: Uncaught {}:{}\",\n-                        t.getName(),\n-                        e.getClass().getSimpleName(),\n-                        e.getMessage(),\n-                        e);\n-            }\n-        });\n-    }\n+        executor = serverContext.getExecutorService(Runtime.getRuntime().availableProcessors(),\n+                new ThreadFactory() {\n+\n+                    final AtomicInteger threadNumber = new AtomicInteger(0);\n \n-    public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                       @Nonnull ChannelHandlerContext ctx,\n-                       @Nonnull IServerRouter r) {\n+                    @Override\n+                    public Thread newThread(Runnable r) {\n+                        Thread thread = new Thread(r);\n+                        thread.setDaemon(true);\n+                        String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n+                                + threadNumber.getAndIncrement();\n+                        thread.setName(threadName);\n+                        thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n+                        return thread;\n+                    }\n+\n+                    void handleUncaughtException(Thread t, @Nonnull Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDMxNzQ1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544431745", "createdAt": "2020-12-03T20:49:08Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0OTowOVrOH-yGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0OTowOVrOH-yGQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NDU2Mw==", "bodyText": "Danger. Always use curly braces.\nhttps://www.imperialviolet.org/2014/02/22/applebug.html", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535594563", "createdAt": "2020-12-03T20:49:09Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -142,24 +151,22 @@ public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n      * Queries a workflow id and returns true if this orchestrator is still\n      * executing the workflow, otherwise return false.\n      *\n-     * @param msg corfu message containing the query request\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing the query request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    void query(CorfuPayloadMsg<OrchestratorMsg> msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        QueryRequest req = (QueryRequest) msg.getPayload().getRequest();\n+    void handleQuery(@Nonnull RequestMsg req, @Nonnull ChannelHandlerContext ctx, @Nonnull IServerRouter r) {\n+        final UUID workflowId = getUUID(req.getPayload().getOrchestratorRequest().getQuery().getWorkflowId());\n+        boolean isActive = false;\n \n-        Response resp;\n-        if (activeWorkflows.containsKey(req.getId())) {\n-            resp = new QueryResponse(true);\n-            log.trace(\"handleQuery: returning active for id {}\", req.getId());\n-        } else {\n-            resp = new QueryResponse(false);\n-            log.trace(\"handleQuery: returning not active for id {}\", req.getId());\n-        }\n+        if (activeWorkflows.containsKey(workflowId)) isActive = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDM3MDE4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544437018", "createdAt": "2020-12-03T20:52:24Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1MjoyNVrOH-yUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1MjoyNVrOH-yUoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5ODI0MA==", "bodyText": "Can we drop the \"Corfu\" prefix from the naming convention here, I feel like its superfluous.  Why don't you just replace the tests in ManagementServerTest?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535598240", "createdAt": "2020-12-03T20:52:25Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuManagementServerTest.java", "diffHunk": "@@ -0,0 +1,645 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDQzNzM4", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544443738", "createdAt": "2020-12-03T20:59:16Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1OToxN1rOH-y6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1OToxN1rOH-y6eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwNzkyOQ==", "bodyText": "Is it possible to collapse the CreateRequest and Request interfaces?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535607929", "createdAt": "2020-12-03T20:59:17Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/orchestrator/HealNodeRequest.java", "diffHunk": "@@ -1,14 +1,8 @@\n package org.corfudb.protocols.wireprotocol.orchestrator;\n \n-import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import lombok.Getter;\n \n-import org.corfudb.util.JsonUtils;\n+import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDU3Mjgy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544457282", "createdAt": "2020-12-03T21:19:05Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMToxOTowNVrOH-0WMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMToxOTowNVrOH-0WMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYzMTQwOQ==", "bodyText": "instead catching all exceptions can you just ignore unsupported operation and log it?\nAlso, why was this not an issue when we pushed in the new BaseServer changes?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535631409", "createdAt": "2020-12-03T21:19:05Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/NettyClientRouter.java", "diffHunk": "@@ -284,11 +284,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.trace(\"Registered {} to handle messages of type {}\", client, x);\n-                });\n+        try {\n+            client.getHandledTypes()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.trace(\"Registered {} to handle messages of type {}\", client, x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NDU4MjIw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544458220", "createdAt": "2020-12-03T21:20:28Z", "commit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9b57ee6e9db2e751de642d841c515dbcb12c0dc5", "committedDate": "2020-12-01T22:04:03Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/bf4eee30f4245b8005c018c733f126e482a074b7", "committedDate": "2020-12-03T22:47:55Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTk1MTc3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544595177", "createdAt": "2020-12-04T01:35:33Z", "commit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NzE3OTcz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#pullrequestreview-544717973", "createdAt": "2020-12-04T07:41:28Z", "commit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0MToyOFrOH_Ee0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0MTo1MVrOH_EfkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTc2MA==", "bodyText": "log.error() with the exception too? This might be one of the things we would need to handle for rolling upgrade in the future, if a client message arrives that does not have any registered handler right, so perhaps a comment or TODO for the same?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535895760", "createdAt": "2020-12-04T07:41:28Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (UnsupportedOperationException ex) {\n+            log.warn(\"No registered CorfuMsg handler for client {}\", client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTk1Mw==", "bodyText": "log.error with the exception perhaps?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535895953", "createdAt": "2020-12-04T07:41:51Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationServerRouter.java", "diffHunk": "@@ -71,7 +71,7 @@ public LogReplicationServerRouter(List<AbstractServer> servers) {\n             try {\n                 server.getHandler().getHandledTypes().forEach(x -> handlerMap.put(x, server));\n             } catch (UnsupportedOperationException ex) {\n-                // Ignore\n+                log.warn(\"No registered CorfuMsg handler for server {}\", server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "555130b064a8a3b62ccfcc22139aafa7ebdaae59", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/555130b064a8a3b62ccfcc22139aafa7ebdaae59", "committedDate": "2020-12-04T14:00:07Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/bf4eee30f4245b8005c018c733f126e482a074b7", "committedDate": "2020-12-03T22:47:55Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}, "afterCommit": {"oid": "555130b064a8a3b62ccfcc22139aafa7ebdaae59", "author": {"user": {"login": "zfrenette", "name": "Zachary Frenette"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/555130b064a8a3b62ccfcc22139aafa7ebdaae59", "committedDate": "2020-12-04T14:00:07Z", "message": "Add Implementation of Management RPCs using Protobuf\n\nProvides routing support for Protobuf messages and an implementation of Management\nRPCs using Protobuf messages. Done as part of an effort to support rolling upgrades."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4156, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}