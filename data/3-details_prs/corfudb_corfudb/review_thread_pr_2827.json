{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjEyMTMx", "number": 2827, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowOToyOVrOE_6zwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0MTo1MVrOFAqttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDU5MjY0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDowOToyOVrOH94qig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MDowN1rOH-4tfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzU3OA==", "bodyText": "I just noticed some old RPC handlers have Nonnull constraint of their arguments (but some don't, also for other servers...), will it be better if we add Nonnull consistently to all the arguments?\nCurrently I cannot image any case where the argument is null but this might be helpful for debugging sometime in the future?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534653578", "createdAt": "2020-12-03T04:09:29Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUzOTE1OQ==", "bodyText": "Those annotation can improve code inspection for inferring nullity\ufeff", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535539159", "createdAt": "2020-12-03T19:51:01Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzU3OA=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMjkwOA==", "bodyText": "Done. Added the @nonnull annotations to the handler methods.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535702908", "createdAt": "2020-12-03T22:50:07Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1MzU3OA=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDYwMzU4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNDo0M1rOH94wsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowMjo0MlrOH-vNCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTE1NQ==", "bodyText": "Is there any specific criteria that some handlers are set to synchronized but some are not? It looks to me that the operations upon shared resources have been synchronized in a lower level, (i.e. methods in servercontext, some concurrenthashmap, etc), and all the synchronized signature could be removed?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534655155", "createdAt": "2020-12-03T04:14:43Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQzMjkwNw==", "bodyText": "I am not sure if it's correct, but this is my reasoning. It does not always suffice to consider that the shared resources are themselves synchronized, but one also needs to look at the interaction between them. Consider the following scenario. The management server receives a BOOTSTRAP_MANAGEMENT request with Layout A. Since it isn't bootstrapped yet, the call to getManagementLayout will return null and the thread will enter the else clause. Now, before the thread has a chance to call setManagementLayout, it goes to sleep. Now the ManagementServer receives another BOOTSTRAP_MANAGEMENT request with Layout B. Since the first request did not complete, this thread will also get null from the call to getManagementLayout and enter the else clause. Now we are in the state where there are two bootstrap requests with different layouts calling setManagementLayout. If my understanding it correct, then this is problematic and leaving the synchronized keyword here will prevent such an issue.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535432907", "createdAt": "2020-12-03T17:23:09Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTE1NQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0NzE0Ng==", "bodyText": "Good point, this was actually a production bug at some point.\nSometimes you need a bigger lock to protect against interleaving with other \"synchronized APIs\". For example, think about the local data store where put/get are individually synchronized, but there are some code paths that do something like:\nval = datastore.get(key)\n// some computation on val\nval2 = someFunction(val)\ndatastore.put(key, val2)\nThis is a read-modify-write cycle where interleaving with another thread between the get and put can cause some inconsistency. Notice that this consistency can happen despite each API being thread-safe individually.\nAlthough this style of synchronization can be safe when implemented carefully, its usually fragile. Ideally, the datastore should expose an interface for some notion of a transaction, where multiple operations can be executed as a single atomic unit.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535547146", "createdAt": "2020-12-03T20:02:42Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NTE1NQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDYxMDQwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDoxNzozOVrOH940hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNToyMTowMVrOH-hntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NjEzMw==", "bodyText": "Is the exception expected to be thrown when getHandledTypes() returns empty set? I thought it might be better if we explicitly check if (client.getHandledTypes().isEmpty()) and log the warn/info. I'm not 100% sure that will it throw an exception or just pass silently if the streaming collection is empty", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r534656133", "createdAt": "2020-12-03T04:17:39Z", "author": {"login": "xcchang"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMyNDU5Ng==", "bodyText": "Not an empty set, but when it is simply called with no implementation.  If the clients don't provide a legacy message handler explicitly, then the underlying call to getMsgHandler throws an UnsupportedOperation exception. A set of size zero would cause no exception.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535324596", "createdAt": "2020-12-03T15:21:01Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY1NjEzMw=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA4NjU2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowNjo1MFrOH-vWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MDoyNVrOH-4uig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0OTQ0Nw==", "bodyText": "Can we improve the logging message here, maybe just \"handleBootstrapManagement[{}]: incomplete layout {}\" would suffice.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535549447", "createdAt": "2020-12-03T20:06:50Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0OTcyMg==", "bodyText": "Also, the log level should be log.error", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535549722", "createdAt": "2020-12-03T20:07:16Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0OTQ0Nw=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzE3OA==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535703178", "createdAt": "2020-12-03T22:50:25Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU0OTQ0Nw=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDA5MjQ2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDowODoyM1rOH-vZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MDozM1rOH-4u_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1MDI5Nw==", "bodyText": "\"handleBootstrapManagement[{}]: already bootstrapped with {}, rejecting {}\"", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535550297", "createdAt": "2020-12-03T20:08:23Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzI5NQ==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535703295", "createdAt": "2020-12-03T22:50:33Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1MDI5Nw=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDIyNDkyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoyNzo1NFrOH-wq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0Mjo0N1rOH-xr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3MTE3Mg==", "bodyText": "Do we need to differentiate between a management server no bootstrap error and a non-management server bootstrap error? it seems like we used to have two different errors, but they were essentially the same.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535571172", "createdAt": "2020-12-03T20:27:54Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +\n+                    \"{}, which is already bootstrapped... Rejecting!\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         } else {\n-            Layout layout = msg.getPayload();\n-            log.info(\"handleManagementBootstrap: received bootstrap layout : {}\", layout);\n-            if(layout.getClusterId() == null){\n-                log.warn(\"handleManagementBootstrap: clusterId for the layout {} is not present.\",\n-                        layout.getClusterId());\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                serverContext.saveManagementLayout(layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+            log.info(\"handleBootstrapManagement[{}]: Received bootstrap \" +\n+                    \"layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            serverContext.saveManagementLayout(layout);\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(true));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Triggers the failure handler.\n      * The msg contains the failed/defected nodes.\n      *\n-     * @param msg corfu message containing MANAGEMENT_FAILURE_DETECTED\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a REPORT_FAILURE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_FAILURE_DETECTED)\n-    public void handleFailureDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n-                                         ChannelHandlerContext ctx, IServerRouter r) {\n-\n-        // This server has not been bootstrapped yet, ignore all requests.\n-        if (!isBootstrapped(msg)) {\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_NOBOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.REPORT_FAILURE_REQUEST)\n+    public void handleReportFailure(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        // If the server isn't bootstrapped yet, ignore the request\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4Nzc5Mw==", "bodyText": "I haven't seen a need to. The same exception was thrown in both cases. The only difference now is that this is handled by BaseHandler.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535587793", "createdAt": "2020-12-03T20:42:47Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -203,109 +172,117 @@ private CorfuRuntime getNewCorfuRuntime() {\n         return runtime;\n     }\n \n-    private boolean isBootstrapped(CorfuMsg msg) {\n+    private boolean isBootstrapped(RequestMsg req) {\n         if (serverContext.getManagementLayout() == null) {\n-            log.warn(\"Received message but not bootstrapped! Message={}\", msg);\n+            log.warn(\"Received message but not bootstrapped! Message={}\", req.getHeader());\n             return false;\n         }\n+\n         return true;\n     }\n \n     /**\n      * Forward an orchestrator request to the orchestrator service.\n      *\n-     * @param msg corfu message containing ORCHESTRATOR_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing an ORCHESTRATOR request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.ORCHESTRATOR_REQUEST)\n-    public synchronized void handleOrchestratorMsg(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                                                   @Nonnull ChannelHandlerContext ctx,\n-                                                   @Nonnull IServerRouter r) {\n-        log.debug(\"Received an orchestrator message {}\", msg);\n-        orchestrator.handle(msg, ctx, r);\n+    @RequestHandler(type = PayloadCase.ORCHESTRATOR_REQUEST)\n+    public synchronized void handleOrchestratorMsg(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        log.debug(\"handleOrchestratorMsg: message:{}\", req.getPayload().getOrchestratorRequest());\n+        orchestrator.handle(req, ctx, r);\n     }\n \n     /**\n      * Bootstraps the management server.\n-     * The msg contains the layout to be bootstrapped.\n+     * The msg contains the Layout to be bootstrapped with.\n      *\n-     * @param msg corfu message containing MANAGEMENT_BOOTSTRAP_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a BOOTSTRAP_MANAGEMENT request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_BOOTSTRAP_REQUEST)\n-    public synchronized void handleManagementBootstrap(CorfuPayloadMsg<Layout> msg,\n-                                                       ChannelHandlerContext ctx, IServerRouter r) {\n-        if (serverContext.getManagementLayout() != null) {\n-            // We are already bootstrapped, bootstrap again is not allowed.\n-            log.warn(\"handleManagementBootstrap: Got a request to bootstrap a server \" +\n-                    \"with {} which is already bootstrapped, rejecting!\", msg.getPayload());\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_ALREADY_BOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.BOOTSTRAP_MANAGEMENT_REQUEST)\n+    public synchronized void handleBootstrapManagement(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        final Layout layout = getLayout(req.getPayload().getBootstrapManagementRequest().getLayout());\n+        HeaderMsg responseHeader;\n+        ResponseMsg response;\n+\n+        if (layout == null || layout.getClusterId() == null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server with \" +\n+                    \"incomplete layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, false);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(false));\n+        } else if (serverContext.getManagementLayout() != null) {\n+            log.warn(\"handleBootstrapManagement[{}]: Got a request to bootstrap a server, with layout \" +\n+                    \"{}, which is already bootstrapped... Rejecting!\", req.getHeader().getRequestId(), layout);\n+\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrappedErrorMsg());\n         } else {\n-            Layout layout = msg.getPayload();\n-            log.info(\"handleManagementBootstrap: received bootstrap layout : {}\", layout);\n-            if(layout.getClusterId() == null){\n-                log.warn(\"handleManagementBootstrap: clusterId for the layout {} is not present.\",\n-                        layout.getClusterId());\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.NACK));\n-            }\n-            else{\n-                serverContext.saveManagementLayout(layout);\n-                r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.ACK));\n-            }\n+            log.info(\"handleBootstrapManagement[{}]: Received bootstrap \" +\n+                    \"layout {}\", req.getHeader().getRequestId(), layout);\n+\n+            serverContext.saveManagementLayout(layout);\n+            responseHeader = getHeaderMsg(req.getHeader(), false, true);\n+            response = getResponseMsg(responseHeader, getBootstrapManagementResponseMsg(true));\n         }\n+\n+        r.sendResponse(response, ctx);\n     }\n \n     /**\n      * Triggers the failure handler.\n      * The msg contains the failed/defected nodes.\n      *\n-     * @param msg corfu message containing MANAGEMENT_FAILURE_DETECTED\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing a REPORT_FAILURE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.MANAGEMENT_FAILURE_DETECTED)\n-    public void handleFailureDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n-                                         ChannelHandlerContext ctx, IServerRouter r) {\n-\n-        // This server has not been bootstrapped yet, ignore all requests.\n-        if (!isBootstrapped(msg)) {\n-            r.sendResponse(ctx, msg, new CorfuMsg(CorfuMsgType.MANAGEMENT_NOBOOTSTRAP_ERROR));\n+    @RequestHandler(type = PayloadCase.REPORT_FAILURE_REQUEST)\n+    public void handleReportFailure(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n+        // If the server isn't bootstrapped yet, ignore the request\n+        if (!isBootstrapped(req)) {\n+            r.sendNoBootstrapError(req.getHeader(), ctx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU3MTE3Mg=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDI4NzE4OnYy", "diffSide": "LEFT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozNzoxNVrOH-xS1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDozOToxMVrOH-xbmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MTM5OQ==", "bodyText": "Why is this missing from the PR?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535581399", "createdAt": "2020-12-03T20:37:15Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -411,23 +399,19 @@ public void handleHealingDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n      * Default NodeState has been providing unless the node is not bootstrapped.\n      * Failure detector updates ClusterNodeState by current state then current NodeState can be provided to other nodes.\n      *\n-     * @param msg corfu message containing NODE_STATE_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r server router\n+     * @param req  a message containing a QUERY_NODE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.NODE_STATE_REQUEST)\n-    public void handleNodeStateRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    @RequestHandler(type = PayloadCase.QUERY_NODE_REQUEST)\n+    public void handleQueryNode(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n         NodeState nodeState = clusterContext.getClusterView()\n                 .getNode(serverContext.getLocalEndpoint())\n                 .orElseGet(this::buildDefaultNodeState);\n \n-        r.sendResponse(ctx, msg, CorfuMsgType.NODE_STATE_RESPONSE.payloadMsg(nodeState));\n-    }\n-\n-    @ServerHandler(type = CorfuMsgType.FAILURE_DETECTOR_METRICS_REQUEST)\n-    public void handleFailureDetectorMetricsRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        FailureDetectorMetrics metrics = serverContext.getFailureDetectorMetrics();\n-        r.sendResponse(ctx, msg, CorfuMsgType.FAILURE_DETECTOR_METRICS_RESPONSE.payloadMsg(metrics));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 496}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MzY0MA==", "bodyText": "It isn't currently being used anywhere and hasn't been enabled in a year. I spoke with @xnull and it seems fine to remove.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535583640", "createdAt": "2020-12-03T20:39:11Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/ManagementServer.java", "diffHunk": "@@ -411,23 +399,19 @@ public void handleHealingDetectedMsg(CorfuPayloadMsg<DetectorMsg> msg,\n      * Default NodeState has been providing unless the node is not bootstrapped.\n      * Failure detector updates ClusterNodeState by current state then current NodeState can be provided to other nodes.\n      *\n-     * @param msg corfu message containing NODE_STATE_REQUEST\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r server router\n+     * @param req  a message containing a QUERY_NODE request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    @ServerHandler(type = CorfuMsgType.NODE_STATE_REQUEST)\n-    public void handleNodeStateRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n+    @RequestHandler(type = PayloadCase.QUERY_NODE_REQUEST)\n+    public void handleQueryNode(RequestMsg req, ChannelHandlerContext ctx, IServerRouter r) {\n         NodeState nodeState = clusterContext.getClusterView()\n                 .getNode(serverContext.getLocalEndpoint())\n                 .orElseGet(this::buildDefaultNodeState);\n \n-        r.sendResponse(ctx, msg, CorfuMsgType.NODE_STATE_RESPONSE.payloadMsg(nodeState));\n-    }\n-\n-    @ServerHandler(type = CorfuMsgType.FAILURE_DETECTOR_METRICS_REQUEST)\n-    public void handleFailureDetectorMetricsRequest(CorfuMsg msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        FailureDetectorMetrics metrics = serverContext.getFailureDetectorMetrics();\n-        r.sendResponse(ctx, msg, CorfuMsgType.FAILURE_DETECTOR_METRICS_RESPONSE.payloadMsg(metrics));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4MTM5OQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 496}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDMzNzk4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NDo0M1rOH-xzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MDo1OVrOH-4wSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4OTcxOA==", "bodyText": "Why can't we explicitly fail this, or log?\nAlso, what if the thread was interrupted, swallowing all exceptions might cause problems, like \"hanging\".", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535589718", "createdAt": "2020-12-03T20:44:43Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NDE2MQ==", "bodyText": "We don't want to fail the creation of the router just because a particular client (or server in the case of a server-side router) doesn't implement a legacy message handler. If it doesn't, we simply want to continue on since it isn't a sign that something has gone wrong. I can add a log message saying that a particular client or server doesn't support the handling of old messages.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535594161", "createdAt": "2020-12-03T20:48:45Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4OTcxOA=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzYyNw==", "bodyText": "Added the appropriate logging statement.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535703627", "createdAt": "2020-12-03T22:50:59Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU4OTcxOA=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDM1NjQ0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0NzoyMVrOH-x-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1MTowMFrOH-yOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5MjU5NQ==", "bodyText": "This can be replaced with the getExecutor helper methods in server context, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535592595", "createdAt": "2020-12-03T20:47:21Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -69,70 +75,73 @@\n \n     final ExecutorService executor;\n \n+    final WorkflowFactory workflowFactory;\n+\n     public Orchestrator(@Nonnull SingletonResource<CorfuRuntime> runtime,\n-                        @Nonnull ServerContext serverContext) {\n+                        @Nonnull ServerContext serverContext,\n+                        @Nonnull WorkflowFactory workflowFactory) {\n         this.serverContext = serverContext;\n-        this.getRuntime = runtime;\n-\n-        executor = Executors.newFixedThreadPool(Runtime.getRuntime()\n-                .availableProcessors(), new ThreadFactory() {\n-\n-            final AtomicInteger threadNumber = new AtomicInteger(0);\n-\n-            @Override\n-            public Thread newThread(Runnable r) {\n-                Thread thread = new Thread(r);\n-                thread.setDaemon(true);\n-                String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n-                        + threadNumber.getAndIncrement();\n-                thread.setName(threadName);\n-                thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n-                return thread;\n-            }\n+        this.workflowFactory = workflowFactory;\n+        getRuntime = runtime;\n \n-            void handleUncaughtException(Thread t, @Nonnull Throwable e) {\n-                log.error(\"handleUncaughtException[{}]: Uncaught {}:{}\",\n-                        t.getName(),\n-                        e.getClass().getSimpleName(),\n-                        e.getMessage(),\n-                        e);\n-            }\n-        });\n-    }\n+        executor = serverContext.getExecutorService(Runtime.getRuntime().availableProcessors(),\n+                new ThreadFactory() {\n+\n+                    final AtomicInteger threadNumber = new AtomicInteger(0);\n \n-    public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                       @Nonnull ChannelHandlerContext ctx,\n-                       @Nonnull IServerRouter r) {\n+                    @Override\n+                    public Thread newThread(Runnable r) {\n+                        Thread thread = new Thread(r);\n+                        thread.setDaemon(true);\n+                        String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n+                                + threadNumber.getAndIncrement();\n+                        thread.setName(threadName);\n+                        thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n+                        return thread;\n+                    }\n+\n+                    void handleUncaughtException(Thread t, @Nonnull Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NjY4Mg==", "bodyText": "Can you clarify? The getExecutor helper method is indeed being called on line 87.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535596682", "createdAt": "2020-12-03T20:51:00Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -69,70 +75,73 @@\n \n     final ExecutorService executor;\n \n+    final WorkflowFactory workflowFactory;\n+\n     public Orchestrator(@Nonnull SingletonResource<CorfuRuntime> runtime,\n-                        @Nonnull ServerContext serverContext) {\n+                        @Nonnull ServerContext serverContext,\n+                        @Nonnull WorkflowFactory workflowFactory) {\n         this.serverContext = serverContext;\n-        this.getRuntime = runtime;\n-\n-        executor = Executors.newFixedThreadPool(Runtime.getRuntime()\n-                .availableProcessors(), new ThreadFactory() {\n-\n-            final AtomicInteger threadNumber = new AtomicInteger(0);\n-\n-            @Override\n-            public Thread newThread(Runnable r) {\n-                Thread thread = new Thread(r);\n-                thread.setDaemon(true);\n-                String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n-                        + threadNumber.getAndIncrement();\n-                thread.setName(threadName);\n-                thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n-                return thread;\n-            }\n+        this.workflowFactory = workflowFactory;\n+        getRuntime = runtime;\n \n-            void handleUncaughtException(Thread t, @Nonnull Throwable e) {\n-                log.error(\"handleUncaughtException[{}]: Uncaught {}:{}\",\n-                        t.getName(),\n-                        e.getClass().getSimpleName(),\n-                        e.getMessage(),\n-                        e);\n-            }\n-        });\n-    }\n+        executor = serverContext.getExecutorService(Runtime.getRuntime().availableProcessors(),\n+                new ThreadFactory() {\n+\n+                    final AtomicInteger threadNumber = new AtomicInteger(0);\n \n-    public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n-                       @Nonnull ChannelHandlerContext ctx,\n-                       @Nonnull IServerRouter r) {\n+                    @Override\n+                    public Thread newThread(Runnable r) {\n+                        Thread thread = new Thread(r);\n+                        thread.setDaemon(true);\n+                        String threadName = serverContext.getThreadPrefix() + \"orchestrator-\"\n+                                + threadNumber.getAndIncrement();\n+                        thread.setName(threadName);\n+                        thread.setUncaughtExceptionHandler(this::handleUncaughtException);\n+                        return thread;\n+                    }\n+\n+                    void handleUncaughtException(Thread t, @Nonnull Throwable e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5MjU5NQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDM2ODg3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo0OTowOVrOH-yGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MToxNlrOH-4xUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NDU2Mw==", "bodyText": "Danger. Always use curly braces.\nhttps://www.imperialviolet.org/2014/02/22/applebug.html", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535594563", "createdAt": "2020-12-03T20:49:09Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -142,24 +151,22 @@ public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n      * Queries a workflow id and returns true if this orchestrator is still\n      * executing the workflow, otherwise return false.\n      *\n-     * @param msg corfu message containing the query request\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing the query request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    void query(CorfuPayloadMsg<OrchestratorMsg> msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        QueryRequest req = (QueryRequest) msg.getPayload().getRequest();\n+    void handleQuery(@Nonnull RequestMsg req, @Nonnull ChannelHandlerContext ctx, @Nonnull IServerRouter r) {\n+        final UUID workflowId = getUUID(req.getPayload().getOrchestratorRequest().getQuery().getWorkflowId());\n+        boolean isActive = false;\n \n-        Response resp;\n-        if (activeWorkflows.containsKey(req.getId())) {\n-            resp = new QueryResponse(true);\n-            log.trace(\"handleQuery: returning active for id {}\", req.getId());\n-        } else {\n-            resp = new QueryResponse(false);\n-            log.trace(\"handleQuery: returning not active for id {}\", req.getId());\n-        }\n+        if (activeWorkflows.containsKey(workflowId)) isActive = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwMzg4OA==", "bodyText": "Fixed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535703888", "createdAt": "2020-12-03T22:51:16Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/orchestrator/Orchestrator.java", "diffHunk": "@@ -142,24 +151,22 @@ public void handle(@Nonnull CorfuPayloadMsg<OrchestratorMsg> msg,\n      * Queries a workflow id and returns true if this orchestrator is still\n      * executing the workflow, otherwise return false.\n      *\n-     * @param msg corfu message containing the query request\n-     * @param ctx netty ChannelHandlerContext\n-     * @param r   server router\n+     * @param req  a message containing the query request\n+     * @param ctx  the netty ChannelHandlerContext\n+     * @param r    the server router\n      */\n-    void query(CorfuPayloadMsg<OrchestratorMsg> msg, ChannelHandlerContext ctx, IServerRouter r) {\n-        QueryRequest req = (QueryRequest) msg.getPayload().getRequest();\n+    void handleQuery(@Nonnull RequestMsg req, @Nonnull ChannelHandlerContext ctx, @Nonnull IServerRouter r) {\n+        final UUID workflowId = getUUID(req.getPayload().getOrchestratorRequest().getQuery().getWorkflowId());\n+        boolean isActive = false;\n \n-        Response resp;\n-        if (activeWorkflows.containsKey(req.getId())) {\n-            resp = new QueryResponse(true);\n-            log.trace(\"handleQuery: returning active for id {}\", req.getId());\n-        } else {\n-            resp = new QueryResponse(false);\n-            log.trace(\"handleQuery: returning not active for id {}\", req.getId());\n-        }\n+        if (activeWorkflows.containsKey(workflowId)) isActive = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5NDU2Mw=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDM5MjAwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuManagementServerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1MjoyNVrOH-yUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MTo1M1rOH-4zbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5ODI0MA==", "bodyText": "Can we drop the \"Corfu\" prefix from the naming convention here, I feel like its superfluous.  Why don't you just replace the tests in ManagementServerTest?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535598240", "createdAt": "2020-12-03T20:52:25Z", "author": {"login": "Maithem"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuManagementServerTest.java", "diffHunk": "@@ -0,0 +1,645 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDQzMQ==", "bodyText": "I removed the \"Corfu\" prefix from our tests, but prefer to also leave the old tests there for the time being.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535704431", "createdAt": "2020-12-03T22:51:53Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/test/java/org/corfudb/infrastructure/CorfuManagementServerTest.java", "diffHunk": "@@ -0,0 +1,645 @@\n+package org.corfudb.infrastructure;\n+\n+import com.google.common.util.concurrent.MoreExecutors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU5ODI0MA=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDQ1MTcxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/orchestrator/HealNodeRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDo1OToxN1rOH-y6eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MjowMVrOH-4z2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwNzkyOQ==", "bodyText": "Is it possible to collapse the CreateRequest and Request interfaces?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535607929", "createdAt": "2020-12-03T20:59:17Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/orchestrator/HealNodeRequest.java", "diffHunk": "@@ -1,14 +1,8 @@\n package org.corfudb.protocols.wireprotocol.orchestrator;\n \n-import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import lombok.Getter;\n \n-import org.corfudb.util.JsonUtils;\n+import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDUzOQ==", "bodyText": "Done!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535704539", "createdAt": "2020-12-03T22:52:01Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/protocols/wireprotocol/orchestrator/HealNodeRequest.java", "diffHunk": "@@ -1,14 +1,8 @@\n package org.corfudb.protocols.wireprotocol.orchestrator;\n \n-import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import lombok.Getter;\n \n-import org.corfudb.util.JsonUtils;\n+import static org.corfudb.protocols.wireprotocol.orchestrator.OrchestratorRequestType.HEAL_NODE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYwNzkyOQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDU5MTIxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/org/corfudb/runtime/clients/NettyClientRouter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMToxOTowNVrOH-0WMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1Mzo1NVrOH-45Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYzMTQwOQ==", "bodyText": "instead catching all exceptions can you just ignore unsupported operation and log it?\nAlso, why was this not an issue when we pushed in the new BaseServer changes?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535631409", "createdAt": "2020-12-03T21:19:05Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/NettyClientRouter.java", "diffHunk": "@@ -284,11 +284,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.trace(\"Registered {} to handle messages of type {}\", client, x);\n-                });\n+        try {\n+            client.getHandledTypes()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.trace(\"Registered {} to handle messages of type {}\", client, x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYzMzQ1NA==", "bodyText": "Will log and catch UnsupportedOperation. It was an issue for the BaseServer, but not for the BaseHandler because there were still some old CorfuMsg types that needed to be handled by it. Since it wasn't removed, no exception was thrown.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535633454", "createdAt": "2020-12-03T21:21:08Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/NettyClientRouter.java", "diffHunk": "@@ -284,11 +284,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.trace(\"Registered {} to handle messages of type {}\", client, x);\n-                });\n+        try {\n+            client.getHandledTypes()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.trace(\"Registered {} to handle messages of type {}\", client, x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYzMTQwOQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTg1OQ==", "bodyText": "Fixed. Only catching UnsupportedOperation and logging accordingly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535705859", "createdAt": "2020-12-03T22:53:55Z", "author": {"login": "zfrenette"}, "path": "runtime/src/main/java/org/corfudb/runtime/clients/NettyClientRouter.java", "diffHunk": "@@ -284,11 +284,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.trace(\"Registered {} to handle messages of type {}\", client, x);\n-                });\n+        try {\n+            client.getHandledTypes()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.trace(\"Registered {} to handle messages of type {}\", client, x);\n+                    });\n+        } catch (Exception ex) {\n+            // No Legacy getHandledTypes - Ignore\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYzMTQwOQ=="}, "originalCommit": {"oid": "9b57ee6e9db2e751de642d841c515dbcb12c0dc5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQ0MDAzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0MToyOFrOH_Ee0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1MzoyNVrOH_dsuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTc2MA==", "bodyText": "log.error() with the exception too? This might be one of the things we would need to handle for rolling upgrade in the future, if a client message arrives that does not have any registered handler right, so perhaps a comment or TODO for the same?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535895760", "createdAt": "2020-12-04T07:41:28Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (UnsupportedOperationException ex) {\n+            log.warn(\"No registered CorfuMsg handler for client {}\", client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMTgyMw==", "bodyText": "I have adjusted the logging as suggested, but I want to point out that this is for legacy CorfuMsg handlers. The default behavior of these legacy methods is to throw an exception when invoked but not implemented, and will be cleaned up in the last PR once all RPCs are done over Protobuf.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r536121823", "createdAt": "2020-12-04T14:04:19Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (UnsupportedOperationException ex) {\n+            log.warn(\"No registered CorfuMsg handler for client {}\", client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTc2MA=="}, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODkyMA==", "bodyText": "sounds good", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r536308920", "createdAt": "2020-12-04T18:53:25Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationClientRouter.java", "diffHunk": "@@ -144,11 +144,15 @@ public IClientRouter addClient(IClient client) {\n         client.setRouter(this);\n \n         // Iterate through all types of CorfuMsgType, registering the handler\n-        client.getHandledTypes().stream()\n-                .forEach(x -> {\n-                    handlerMap.put(x, client);\n-                    log.info(\"Registered client to handle messages of type {}\", x);\n-                });\n+        try {\n+            client.getHandledTypes().stream()\n+                    .forEach(x -> {\n+                        handlerMap.put(x, client);\n+                        log.info(\"Registered client to handle messages of type {}\", x);\n+                    });\n+        } catch (UnsupportedOperationException ex) {\n+            log.warn(\"No registered CorfuMsg handler for client {}\", client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTc2MA=="}, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQ0MTQ5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationServerRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo0MTo1MVrOH_EfkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNDowNDozNFrOH_SSvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTk1Mw==", "bodyText": "log.error with the exception perhaps?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r535895953", "createdAt": "2020-12-04T07:41:51Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationServerRouter.java", "diffHunk": "@@ -71,7 +71,7 @@ public LogReplicationServerRouter(List<AbstractServer> servers) {\n             try {\n                 server.getHandler().getHandledTypes().forEach(x -> handlerMap.put(x, server));\n             } catch (UnsupportedOperationException ex) {\n-                // Ignore\n+                log.warn(\"No registered CorfuMsg handler for server {}\", server);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMjA0Nw==", "bodyText": "Done!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2827#discussion_r536122047", "createdAt": "2020-12-04T14:04:34Z", "author": {"login": "zfrenette"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/runtime/LogReplicationServerRouter.java", "diffHunk": "@@ -71,7 +71,7 @@ public LogReplicationServerRouter(List<AbstractServer> servers) {\n             try {\n                 server.getHandler().getHandledTypes().forEach(x -> handlerMap.put(x, server));\n             } catch (UnsupportedOperationException ex) {\n-                // Ignore\n+                log.warn(\"No registered CorfuMsg handler for server {}\", server);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NTk1Mw=="}, "originalCommit": {"oid": "bf4eee30f4245b8005c018c733f126e482a074b7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1789, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}