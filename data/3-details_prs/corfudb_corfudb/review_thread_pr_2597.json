{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDQwMzg5", "number": 2597, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyODo1N1rOEL396A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTo0MjozMlrOENJXPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg2NzYwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyODo1N1rOGtqLzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzoyODo1N1rOGtqLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMDI1Mg==", "bodyText": "I think it is better to use 'standbyCluster' as the lambda parameter", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r450530252", "createdAt": "2020-07-06T23:28:57Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -1,91 +1,148 @@\n package org.corfudb.infrastructure.logreplication.infrastructure;\n \n import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterRole;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterConfigurationMsg;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n- * This class represents a view of a Multi-Cluster/Site Topology,\n- * where one cluster is the active/primary and n cluster's are standby's (backups).\n+ * This class represents a view of a Multi-Cluster Topology,\n+ *\n+ * Ideally, in a given topology, one cluster represents the active cluster (source of data)\n+ * while n others are standby clusters (backup's). However, because the topology info is provided by an\n+ * external adapter which can be specific to the use cases of the user, a topology might be initialized\n+ * with multiple active clusters and multiple standby clusters.\n+ *\n  */\n @Slf4j\n public class TopologyDescriptor {\n \n     // Represents a state of the topology configuration (a topology epoch)\n     @Getter\n+    @Setter\n     private long topologyConfigId;\n \n     @Getter\n-    private ClusterDescriptor activeCluster;\n+    private Map<String, ClusterDescriptor> activeClusters;\n \n     @Getter\n     private Map<String, ClusterDescriptor> standbyClusters;\n \n     /**\n-     * Constructor.\n+     * Constructor\n      *\n-     * @param topologyMessage\n+     * @param topologyMessage proto definition of the topology\n      */\n     public TopologyDescriptor(TopologyConfigurationMsg topologyMessage) {\n         this.topologyConfigId = topologyMessage.getTopologyConfigID();\n         this.standbyClusters = new HashMap<>();\n+        this.activeClusters = new HashMap<>();\n         for (ClusterConfigurationMsg clusterConfig : topologyMessage.getClustersList()) {\n             ClusterDescriptor cluster = new ClusterDescriptor(clusterConfig);\n             if (clusterConfig.getRole() == ClusterRole.ACTIVE) {\n-                activeCluster = cluster;\n+                activeClusters.put(cluster.getClusterId(), cluster);\n             } else if (clusterConfig.getRole() == ClusterRole.STANDBY) {\n                 addStandbyCluster(cluster);\n             }\n         }\n     }\n \n-    public TopologyDescriptor(long topologyConfigId, ClusterDescriptor activeCluster, Map<String, ClusterDescriptor> standbyClusters) {\n+    /**\n+     * Constructor\n+     *\n+     * @param topologyConfigId topology configuration identifier (epoch)\n+     * @param activeCluster active cluster\n+     * @param standbyClusters standby cluster's\n+     */\n+    public TopologyDescriptor(long topologyConfigId, @NonNull ClusterDescriptor activeCluster,\n+                              @NonNull List<ClusterDescriptor> standbyClusters) {\n+        this(topologyConfigId, Arrays.asList(activeCluster), standbyClusters);\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param topologyConfigId topology configuration identifier (epoch)\n+     * @param activeClusters active cluster's\n+     * @param standbyClusters standby cluster's\n+     */\n+    public TopologyDescriptor(long topologyConfigId, @NonNull List<ClusterDescriptor> activeClusters,\n+                              @NonNull List<ClusterDescriptor> standbyClusters) {\n         this.topologyConfigId = topologyConfigId;\n-        this.activeCluster = activeCluster;\n-        this.standbyClusters = standbyClusters;\n+        this.activeClusters = new HashMap<>();\n+        this.standbyClusters = new HashMap<>();\n+\n+        if(activeClusters != null) {\n+            activeClusters.forEach(activeCluster -> this.activeClusters.put(activeCluster.getClusterId(), activeCluster));\n+        }\n+\n+        if(standbyClusters != null) {\n+            standbyClusters.forEach(activeCluster -> this.standbyClusters.put(activeCluster.getClusterId(), activeCluster));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63c6aaff8662f80089fcca3bda242891d67a739"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODg4NDE1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzozNjo0NVrOGtqVQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzozNjo0NVrOGtqVQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzMjY3Mg==", "bodyText": "endpoint missing here.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r450532672", "createdAt": "2020-07-06T23:36:45Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -95,11 +152,12 @@ public ClusterDescriptor getClusterDescriptor(String endpoint) {\n             }\n         }\n \n+        log.warn(\"Endpoint {} does not belong to any cluster defined in {}\", clusters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63c6aaff8662f80089fcca3bda242891d67a739"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODkwNTI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMzo0ODoxNVrOGtqhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMDowNDowNFrOGtqy0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTg0OQ==", "bodyText": "Is this setter necessary? I think we should use a new object when we need to update config id...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r450535849", "createdAt": "2020-07-06T23:48:15Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -1,91 +1,148 @@\n package org.corfudb.infrastructure.logreplication.infrastructure;\n \n import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterRole;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterConfigurationMsg;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n- * This class represents a view of a Multi-Cluster/Site Topology,\n- * where one cluster is the active/primary and n cluster's are standby's (backups).\n+ * This class represents a view of a Multi-Cluster Topology,\n+ *\n+ * Ideally, in a given topology, one cluster represents the active cluster (source of data)\n+ * while n others are standby clusters (backup's). However, because the topology info is provided by an\n+ * external adapter which can be specific to the use cases of the user, a topology might be initialized\n+ * with multiple active clusters and multiple standby clusters.\n+ *\n  */\n @Slf4j\n public class TopologyDescriptor {\n \n     // Represents a state of the topology configuration (a topology epoch)\n     @Getter\n+    @Setter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63c6aaff8662f80089fcca3bda242891d67a739"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU0MDI0MQ==", "bodyText": "+1, changed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r450540241", "createdAt": "2020-07-07T00:04:04Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -1,91 +1,148 @@\n package org.corfudb.infrastructure.logreplication.infrastructure;\n \n import lombok.Getter;\n+import lombok.NonNull;\n+import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.TopologyConfigurationMsg;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterRole;\n import org.corfudb.infrastructure.logreplication.proto.LogReplicationClusterInfo.ClusterConfigurationMsg;\n \n-import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n- * This class represents a view of a Multi-Cluster/Site Topology,\n- * where one cluster is the active/primary and n cluster's are standby's (backups).\n+ * This class represents a view of a Multi-Cluster Topology,\n+ *\n+ * Ideally, in a given topology, one cluster represents the active cluster (source of data)\n+ * while n others are standby clusters (backup's). However, because the topology info is provided by an\n+ * external adapter which can be specific to the use cases of the user, a topology might be initialized\n+ * with multiple active clusters and multiple standby clusters.\n+ *\n  */\n @Slf4j\n public class TopologyDescriptor {\n \n     // Represents a state of the topology configuration (a topology epoch)\n     @Getter\n+    @Setter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUzNTg0OQ=="}, "originalCommit": {"oid": "c63c6aaff8662f80089fcca3bda242891d67a739"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE2NDM4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToyMDoxNlrOGvqLLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTo1Nzo1N1rOGvqx-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzI0Nw==", "bodyText": "should we add invalid as well?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r452627247", "createdAt": "2020-07-10T05:20:16Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -95,11 +160,12 @@ public ClusterDescriptor getClusterDescriptor(String endpoint) {\n             }\n         }\n \n+        log.warn(\"Endpoint {} does not belong to any cluster defined in {}\", endpoint, clusters);\n         return null;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Topology[%s] :: Active Cluster=%s :: Standby Clusters=%s\", topologyConfigId, activeCluster, standbyClusters);\n+        return String.format(\"Topology[%s] :: Active Cluster=%s :: Standby Clusters=%s\", topologyConfigId, activeClusters, standbyClusters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8918052093585b7fd192c5543de3143e49813f"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNzE3OQ==", "bodyText": "Yes we should! adding it!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r452637179", "createdAt": "2020-07-10T05:57:57Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/TopologyDescriptor.java", "diffHunk": "@@ -95,11 +160,12 @@ public ClusterDescriptor getClusterDescriptor(String endpoint) {\n             }\n         }\n \n+        log.warn(\"Endpoint {} does not belong to any cluster defined in {}\", endpoint, clusters);\n         return null;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Topology[%s] :: Active Cluster=%s :: Standby Clusters=%s\", topologyConfigId, activeCluster, standbyClusters);\n+        return String.format(\"Topology[%s] :: Active Cluster=%s :: Standby Clusters=%s\", topologyConfigId, activeClusters, standbyClusters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNzI0Nw=="}, "originalCommit": {"oid": "7e8918052093585b7fd192c5543de3143e49813f"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjIwMzQ4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTo0MjozMlrOGvqhtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTo1NzozMlrOGvqxoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzMzAxNQ==", "bodyText": "this is confusing.. The way I understand is that clusterManager=siteManager and clusterManagerAdapter=siteManagerAdapter(the plugin).  So how can we assign the adapter to the the clusterManager itself?  I think the variable names need to be changed..\nAlso, should the adapter be renamed to clusterManagerAdapter?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r452633015", "createdAt": "2020-07-10T05:42:32Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -182,55 +181,54 @@ public TopologyConfigurationMsg queryTopologyConfig(boolean useCached) {\n     }\n \n     /**\n-     * Change one of the standby as the primary and primary become the standby\n+     * Change one of the standby as the primary and primary becomes the standby\n      **/\n-    public static TopologyDescriptor changePrimary(TopologyConfigurationMsg topologyConfig) {\n-        TopologyDescriptor siteConfig = new TopologyDescriptor(topologyConfig);\n-        ClusterDescriptor oldPrimary = new ClusterDescriptor(siteConfig.getActiveCluster(),\n-                ClusterRole.STANDBY);\n-        Map<String, ClusterDescriptor> standbys = new HashMap<>();\n+    public static TopologyDescriptor changeActiveCluster(TopologyConfigurationMsg topologyConfig) {\n+        TopologyDescriptor topologyDescriptor = new TopologyDescriptor(topologyConfig);\n+\n+        // Convert the current active to standby\n+        ClusterDescriptor oldActive = topologyDescriptor.getActiveClusters().values().iterator().next();\n+        ClusterDescriptor newStandby = new ClusterDescriptor(oldActive, ClusterRole.STANDBY);\n+\n+        List<ClusterDescriptor> standbyClusters = Arrays.asList(newStandby);\n         ClusterDescriptor newPrimary = null;\n-        ClusterDescriptor standby;\n \n-        standbys.put(oldPrimary.getClusterId(), oldPrimary);\n-        for (String endpoint : siteConfig.getStandbyClusters().keySet()) {\n-            ClusterDescriptor info = siteConfig.getStandbyClusters().get(endpoint);\n+        for (ClusterDescriptor standbyCluster : topologyDescriptor.getStandbyClusters().values()) {\n             if (newPrimary == null) {\n-                newPrimary = new ClusterDescriptor(info, ClusterRole.ACTIVE);\n+                newPrimary = new ClusterDescriptor(standbyCluster, ClusterRole.ACTIVE);\n             } else {\n-                standby = new ClusterDescriptor(info, ClusterRole.STANDBY);\n-                standbys.put(standby.getClusterId(), standby);\n+                standbyClusters.add(standbyCluster);\n             }\n         }\n \n-        TopologyDescriptor newSiteConf = new TopologyDescriptor(1, newPrimary, standbys);\n+        TopologyDescriptor newSiteConf = new TopologyDescriptor(1L, Arrays.asList(newPrimary), standbyClusters);\n         return newSiteConf;\n     }\n \n     /**\n      * Testing purpose to generate cluster role change.\n      */\n     public static class SiteManagerCallback implements Runnable {\n-        public boolean siteFlip = false;\n-        DefaultClusterManager siteManager;\n+        public boolean clusterRoleChange = false;\n+        DefaultClusterManager clusterManager;\n \n         SiteManagerCallback(DefaultClusterManager siteManagerAdapter) {\n-            this.siteManager = siteManagerAdapter;\n+            this.clusterManager = siteManagerAdapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8918052093585b7fd192c5543de3143e49813f"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzNzA4OQ==", "bodyText": "its just the naming, I'll rename to make it clear!", "url": "https://github.com/CorfuDB/CorfuDB/pull/2597#discussion_r452637089", "createdAt": "2020-07-10T05:57:32Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -182,55 +181,54 @@ public TopologyConfigurationMsg queryTopologyConfig(boolean useCached) {\n     }\n \n     /**\n-     * Change one of the standby as the primary and primary become the standby\n+     * Change one of the standby as the primary and primary becomes the standby\n      **/\n-    public static TopologyDescriptor changePrimary(TopologyConfigurationMsg topologyConfig) {\n-        TopologyDescriptor siteConfig = new TopologyDescriptor(topologyConfig);\n-        ClusterDescriptor oldPrimary = new ClusterDescriptor(siteConfig.getActiveCluster(),\n-                ClusterRole.STANDBY);\n-        Map<String, ClusterDescriptor> standbys = new HashMap<>();\n+    public static TopologyDescriptor changeActiveCluster(TopologyConfigurationMsg topologyConfig) {\n+        TopologyDescriptor topologyDescriptor = new TopologyDescriptor(topologyConfig);\n+\n+        // Convert the current active to standby\n+        ClusterDescriptor oldActive = topologyDescriptor.getActiveClusters().values().iterator().next();\n+        ClusterDescriptor newStandby = new ClusterDescriptor(oldActive, ClusterRole.STANDBY);\n+\n+        List<ClusterDescriptor> standbyClusters = Arrays.asList(newStandby);\n         ClusterDescriptor newPrimary = null;\n-        ClusterDescriptor standby;\n \n-        standbys.put(oldPrimary.getClusterId(), oldPrimary);\n-        for (String endpoint : siteConfig.getStandbyClusters().keySet()) {\n-            ClusterDescriptor info = siteConfig.getStandbyClusters().get(endpoint);\n+        for (ClusterDescriptor standbyCluster : topologyDescriptor.getStandbyClusters().values()) {\n             if (newPrimary == null) {\n-                newPrimary = new ClusterDescriptor(info, ClusterRole.ACTIVE);\n+                newPrimary = new ClusterDescriptor(standbyCluster, ClusterRole.ACTIVE);\n             } else {\n-                standby = new ClusterDescriptor(info, ClusterRole.STANDBY);\n-                standbys.put(standby.getClusterId(), standby);\n+                standbyClusters.add(standbyCluster);\n             }\n         }\n \n-        TopologyDescriptor newSiteConf = new TopologyDescriptor(1, newPrimary, standbys);\n+        TopologyDescriptor newSiteConf = new TopologyDescriptor(1L, Arrays.asList(newPrimary), standbyClusters);\n         return newSiteConf;\n     }\n \n     /**\n      * Testing purpose to generate cluster role change.\n      */\n     public static class SiteManagerCallback implements Runnable {\n-        public boolean siteFlip = false;\n-        DefaultClusterManager siteManager;\n+        public boolean clusterRoleChange = false;\n+        DefaultClusterManager clusterManager;\n \n         SiteManagerCallback(DefaultClusterManager siteManagerAdapter) {\n-            this.siteManager = siteManagerAdapter;\n+            this.clusterManager = siteManagerAdapter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYzMzAxNQ=="}, "originalCommit": {"oid": "7e8918052093585b7fd192c5543de3143e49813f"}, "originalPosition": 161}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1823, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}