{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTE1MzEz", "number": 2591, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1OToyNVrOEKKofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMDowN1rOEKstuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDk1NDIwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1OToyNVrOGrDXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDozMDo0MVrOGrNVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzA2OQ==", "bodyText": "May add log.warn that this call should not be called on non active site. Also why replicationManager can be null?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r447797069", "createdAt": "2020-06-30T15:59:25Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -497,7 +514,9 @@ public void updateSiteConfig(LogReplicationClusterInfo.TopologyConfigurationMsg\n      */\n     @Override\n     public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MDQ4OA==", "bodyText": "Added. If the replication manager is not initialized yet, it will be null. It happens when the cluster role is standby.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r447960488", "createdAt": "2020-06-30T20:30:41Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -497,7 +514,9 @@ public void updateSiteConfig(LogReplicationClusterInfo.TopologyConfigurationMsg\n      */\n     @Override\n     public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzA2OQ=="}, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDk1NjM1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1OTo1NlrOGrDYkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzozMTo1OFrOGrR5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzM5NA==", "bodyText": "Add log.warn if the roletype is not active.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r447797394", "createdAt": "2020-06-30T15:59:56Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +525,15 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2MTkyOQ==", "bodyText": "Yeah, I think I need some clarifications for this function.\nCase 1: if the role is standby, what is the expected return value?\nCase 2: if the role is active, but somehow replication is not initialized, like have not got the lock. What is the expected value?\nWill add log.warn", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r447961929", "createdAt": "2020-06-30T20:33:35Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +525,15 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzM5NA=="}, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2NzUzNg==", "bodyText": "Case 1, this should not be called on the standby side. As standby side doesn't know the active log tail information.\nBut for snapshot sync scenario during applying phase, the active can query standby querySnapshotProcessStatus(), the standby side reply how much data has been appied. This can be done at phase II implementation.\nCase 2, do you mean the active is not the leader node? For now, we can consider it should be called on  the leader node only. We need to talk to the other group and get their finalized API and implement the complete solution.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r447967536", "createdAt": "2020-06-30T20:44:41Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +525,15 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzM5NA=="}, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzNTEyNw==", "bodyText": "Yeah, I understand both cases should not happen right now, and just to avoid NPE. I have added warning logs for both cases.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448035127", "createdAt": "2020-06-30T23:31:58Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +525,15 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NzM5NA=="}, "originalCommit": {"oid": "123615707a508a648d7c4ac4cfc8392c0a7f7166"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMwNTcwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNDoxM1rOGrQURg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNDoxM1rOGrQURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwOTI4Ng==", "bodyText": "Let's rename processSiteFlip -> processClusterRoleChange", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448009286", "createdAt": "2020-06-30T22:14:13Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -391,32 +390,50 @@ public void processLockRelease() {\n \n         interClusterReplicationService.getLogReplicationServer().setLeadership(false);\n \n-        if (localNodeDescriptor.isLeader()) {\n+        if (isLeader) {\n             stopLogReplication();\n-            localNodeDescriptor.setLeader(false);\n+            isLeader = false;\n         }\n     }\n \n     public void processSiteFlip(TopologyDescriptor newConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMwNzU1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNDo1OFrOGrQVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNDo1OFrOGrQVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwOTU1NQ==", "bodyText": "Same here -> processClusterRoleChangeNotification", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448009555", "createdAt": "2020-06-30T22:14:58Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -391,32 +390,50 @@ public void processLockRelease() {\n \n         interClusterReplicationService.getLogReplicationServer().setLeadership(false);\n \n-        if (localNodeDescriptor.isLeader()) {\n+        if (isLeader) {\n             stopLogReplication();\n-            localNodeDescriptor.setLeader(false);\n+            isLeader = false;\n         }\n     }\n \n     public void processSiteFlip(TopologyDescriptor newConfig) {\n-        // TODO(Nan): Check standby to active and active to standby...\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopologyDescriptor(newConfig);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update local topology descriptor\n+        topologyDescriptor = newConfig;\n+\n+        // update local cluster descriptor\n+        localClusterDescriptor = topologyDescriptor.getClusterDescriptor(localEndpoint);\n+\n+        // update local node descriptor\n+        localNodeDescriptor = localClusterDescriptor.getNode(localEndpoint);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());\n+        log.debug(\"Persist new topologyConfigId {}, status={}\", topologyDescriptor.getTopologyConfigId(),\n+                localClusterDescriptor.getRole());\n+\n+        logReplicationServerHandler.setActive(localClusterDescriptor.getRole().equals(ClusterRole.ACTIVE));\n+\n+        // we do not need to update replication manager's config, since it will be initialized again\n+\n         startLogReplication();\n     }\n \n     public void processSiteChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMxMzIzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationSourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNzowOVrOGrQYvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNzowOVrOGrQYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDQzMA==", "bodyText": "let's rename -> setTopologyConfigId", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448010430", "createdAt": "2020-06-30T22:17:09Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/LogReplicationSourceManager.java", "diffHunk": "@@ -173,6 +173,7 @@ public LogReplicationSourceManager(CorfuRuntime runtime,\n \n         this.logReplicationFSM = new LogReplicationFSM(this.runtime, config, params.getRemoteClusterDescriptor(),\n                 dataSender, readProcessor, logReplicationFSMWorkers);\n+        this.logReplicationFSM.setSiteConfigID(params.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMxNDM2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNzozNVrOGrQZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxNzozNVrOGrQZYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDU5NA==", "bodyText": "typo -> manage -> manager", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448010594", "createdAt": "2020-06-30T22:17:35Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -196,6 +196,8 @@ public LogReplicationEntry receive(LogReplicationEntry message) {\n          // It could be caused by an out-of-date sender or the local node hasn't done the site discovery yet.\n          // If there is a siteConfig change, the discovery service will detect it and reset the state.\n         if (message.getMetadata().getTopologyConfigId() != siteConfigID) {\n+            log.trace(\"Sink manage with config id {} ignored msg id {}\", siteConfigID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMxNjIyOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoxODoyN1rOGrQamA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxOTo1OVrOGrRrCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDkwNA==", "bodyText": "Is this required but still not working? or old code we can remove?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448010904", "createdAt": "2020-06-30T22:18:27Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -342,11 +343,11 @@ public void runSiteSwitch() throws Exception {\n             sleep(sleepInterval);\n \n             siteManager.prepareSiteRoleChange();\n-            while (replicationStatus != CorfuReplicationManager.PERCENTAGE_BASE) {\n-                replicationStatus = siteManager.queryReplicationStatus();\n-                System.out.print(\"\\nreplication percentage done \" + replicationStatus);\n-                sleep(sleepInterval);\n-            }\n+//            while (replicationStatus != CorfuReplicationManager.PERCENTAGE_BASE) {\n+//                replicationStatus = siteManager.queryReplicationStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTQ5OA==", "bodyText": "It's working. Brought back.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448031498", "createdAt": "2020-06-30T23:19:59Z", "author": {"login": "zhangn49"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -342,11 +343,11 @@ public void runSiteSwitch() throws Exception {\n             sleep(sleepInterval);\n \n             siteManager.prepareSiteRoleChange();\n-            while (replicationStatus != CorfuReplicationManager.PERCENTAGE_BASE) {\n-                replicationStatus = siteManager.queryReplicationStatus();\n-                System.out.print(\"\\nreplication percentage done \" + replicationStatus);\n-                sleep(sleepInterval);\n-            }\n+//            while (replicationStatus != CorfuReplicationManager.PERCENTAGE_BASE) {\n+//                replicationStatus = siteManager.queryReplicationStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMDkwNA=="}, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMyMDI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMDowOFrOGrQdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMDowOFrOGrQdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMTUyNw==", "bodyText": "Let's group these three into, updateTopology()", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448011527", "createdAt": "2020-06-30T22:20:08Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -391,32 +390,50 @@ public void processLockRelease() {\n \n         interClusterReplicationService.getLogReplicationServer().setLeadership(false);\n \n-        if (localNodeDescriptor.isLeader()) {\n+        if (isLeader) {\n             stopLogReplication();\n-            localNodeDescriptor.setLeader(false);\n+            isLeader = false;\n         }\n     }\n \n     public void processSiteFlip(TopologyDescriptor newConfig) {\n-        // TODO(Nan): Check standby to active and active to standby...\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopologyDescriptor(newConfig);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update local topology descriptor\n+        topologyDescriptor = newConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMyMzQzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMTozNlrOGrQe9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMTozNlrOGrQe9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjAyMA==", "bodyText": "Let's rename -> prepareClusterRoleChange", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448012020", "createdAt": "2020-06-30T22:21:36Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -497,7 +514,12 @@ public void updateSiteConfig(LogReplicationClusterInfo.TopologyConfigurationMsg\n      */\n     @Override\n     public void prepareSiteRoleChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMyNTc0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMjoyN1rOGrQgPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyMjoyN1rOGrQgPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxMjM0OA==", "bodyText": "same here... in ReplicationManager let's rename for consistency to prepareClusterRoleChange", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448012348", "createdAt": "2020-06-30T22:22:27Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -497,7 +514,12 @@ public void updateSiteConfig(LogReplicationClusterInfo.TopologyConfigurationMsg\n      */\n     @Override\n     public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareSiteRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMzNjQ4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyNzowM1rOGrQmxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMToxNlrOGr5BsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDAyMg==", "bodyText": "Does this calculate how much is pending or how much is done? Can we fix the method description and rename accordingly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448014022", "createdAt": "2020-06-30T22:27:03Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +528,17 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjY4OQ==", "bodyText": "I think it calculates how much is pending and have put some comments... I think it would be better to get addressed by another PR.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448032689", "createdAt": "2020-06-30T23:24:01Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +528,17 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDAyMg=="}, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjI3Mg==", "bodyText": "Can you add a TODO in the code please so we don't miss this whenever we decide to merge into master.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448676272", "createdAt": "2020-07-02T00:01:16Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +528,17 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDAyMg=="}, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjMzODE3OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyNzo0OVrOGrQn1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyNzo0OVrOGrQn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDI5NA==", "bodyText": "can we add some logging warning, before this return 0. Cause then we don't know if it means that 0 is pending as it all was transferred or the replication never started so 0 is pending.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448014294", "createdAt": "2020-06-30T22:27:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +528,17 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n+            // If not leader, replication manager might be null\n+            if (replicationManager != null) {\n+                return replicationManager.queryReplicationStatus();\n+            }\n+            return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM0MDI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyODozNlrOGrQpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyODozNlrOGrQpFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDYxMg==", "bodyText": "Can we make -1 a final static variable INVALID_REPLICATION_STATUS.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448014612", "createdAt": "2020-06-30T22:28:36Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -506,7 +528,17 @@ public void prepareSiteRoleChange() {\n      */\n     @Override\n     public int queryReplicationStatus() {\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n+            // If not leader, replication manager might be null\n+            if (replicationManager != null) {\n+                return replicationManager.queryReplicationStatus();\n+            }\n+            return 0;\n+        } else {\n+            log.warn(\"Illegal queryReplicationStatus when cluster{} with role {}\",\n+                    localClusterDescriptor.getClusterId(), localClusterDescriptor.getRole());\n+            return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM0MTMyOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOTowNVrOGrQpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOTowNVrOGrQpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDc4MA==", "bodyText": "Can we rename PRIMARY_SITE_NAME -> ACTIVE_CLUSTER_NAME", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448014780", "createdAt": "2020-06-30T22:29:05Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -134,7 +134,7 @@ public static TopologyDescriptor readConfig() throws IOException {\n         for (int i = 0; i < primaryNodeNames.size(); i++) {\n             log.info(\"Primary Site Name {}, IpAddress {}\", primaryNodeNames.get(i), primaryIpAddresses.get(i));\n             NodeDescriptor nodeInfo = new NodeDescriptor(primaryIpAddresses.get(i),\n-                    activeLogReplicationPort, ClusterRole.ACTIVE, PRIMARY_SITE_NAME, UUID.fromString(primaryNodeIds.get(i)));\n+                    activeLogReplicationPort, PRIMARY_SITE_NAME, UUID.fromString(primaryNodeIds.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM0MTY0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOToxNlrOGrQp_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOToxNlrOGrQp_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNDg0NA==", "bodyText": "site -> cluster", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448014844", "createdAt": "2020-06-30T22:29:16Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultClusterManager.java", "diffHunk": "@@ -145,7 +145,7 @@ public static TopologyDescriptor readConfig() throws IOException {\n         for (int i = 0; i < standbyNodeNames.size(); i++) {\n             log.info(\"Standby Site Name {}, IpAddress {}\", standbyNodeNames.get(i), standbyIpAddresses.get(i));\n             NodeDescriptor nodeInfo = new NodeDescriptor(standbyIpAddresses.get(i),\n-                    standbyLogReplicationPort, ClusterRole.STANDBY, STANDBY_SITE_NAME, UUID.fromString(standbyNodeIds.get(i)));\n+                    standbyLogReplicationPort, STANDBY_SITE_NAME, UUID.fromString(standbyNodeIds.get(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjM0MzEzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOTo1MVrOGrQq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjoyOTo1MVrOGrQq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAxNTA2Mw==", "bodyText": "siteConfigID -> topologyConfigId (in the argument)", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448015063", "createdAt": "2020-06-30T22:29:51Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -363,10 +365,9 @@ private boolean receivedValidMessage(LogReplicationEntry message) {\n      * 1. update the metadata store with the most recent topologyConfigId\n      * 2. reset snapshotWriter and logEntryWriter state\n      * 3. reset buffer logEntryBuffer state.\n-     * @param active\n      * @param siteConfigID\n      */\n-    public void updateTopologyConfigId(boolean active, long siteConfigID) {\n+    public void updateTopologyConfigId(long siteConfigID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d050e6debd7f26b0a5cfd9b7c7b3d7f9b1fe8748"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTczNjU4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODo0Mzo1NFrOGrxYnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjoxMjozM1rOGr2_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTA2OQ==", "bodyText": "I see the point that only the leader should do replication related jobs.\nBut discovery service does not only have topologyConfig, it also has cluster, node... etc.\nSo we need to make sure all fields get updated, and once any node gets a lock, it has updated configs...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448551069", "createdAt": "2020-07-01T18:43:54Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +445,51 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n         TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n \n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        // Note: should not update topology here. Otherwise, below check is always true.\n+        if (newConfig.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there are additional or\n+            // removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NzU2NA==", "bodyText": "Good catch! This bug is introduced by Anny's new change. The new topology information should be updated on all the nodes, not just the leader.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448557564", "createdAt": "2020-07-01T18:57:03Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +445,51 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n         TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n \n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        // Note: should not update topology here. Otherwise, below check is always true.\n+        if (newConfig.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there are additional or\n+            // removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTA2OQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2NTk5NA==", "bodyText": "Correct, so one question. When a DISCOVERED_TOPOLOGY comes in (change in the topology) we come in this method processTopologyChangeNotification, only if it is stale we can ignore that incoming topology, otherwise, shouldn't the first thing we do is call your updateLocalTopology() to update all local objects? and maybe you can store the old topology in a temp for the further comparisons.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448565994", "createdAt": "2020-07-01T19:15:14Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +445,51 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n         TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n \n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        // Note: should not update topology here. Otherwise, below check is always true.\n+        if (newConfig.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there are additional or\n+            // removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTA2OQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjgxNQ==", "bodyText": "Yeah, it is cleaner. Besides call updateLocalTopology(), I also need to update other components' config. Like logReplicationServerHandler.setActive", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448606815", "createdAt": "2020-07-01T20:45:19Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +445,51 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n         TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n \n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        // Note: should not update topology here. Otherwise, below check is always true.\n+        if (newConfig.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there are additional or\n+            // removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTA2OQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MjkwMQ==", "bodyText": "@annym  @xiaoqin2012  I realized that updateLocalTopology() is dependent on config id change.\n\n\nsame config id -> add/remove standby, no role change. Process standby first then update configs\n\n\nhigher config id -> might have a role change. Need to stop all replications, which will use current status(role, config)\nSo we can not pdateLocalTopology() until we stop all replications... Besides, notify the metadata manager that we have a higher config id, update sink manager, and update server's role.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448642901", "createdAt": "2020-07-01T22:12:33Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +445,51 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n         // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n         TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n \n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        // Note: should not update topology here. Otherwise, below check is always true.\n+        if (newConfig.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there are additional or\n+            // removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1MTA2OQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTc5NjE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTowMzo1NFrOGrx9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxOTo0MFrOGr5UXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw==", "bodyText": "I think updateTopologyConfigId is not the correct naming in the SinkManager, right? Cause that method has added functionality and is really doing much more than that... maybe processClusterRoleChange or resetOnClusterRoleChange?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448560637", "createdAt": "2020-07-01T19:03:54Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MTg5Ng==", "bodyText": "Also, similar to stop log replication isn't this dependent of the fact that you are currently a standby?... In such case, it might be a good idea to put this statement in the stopLogReplication method in the case STANDBY, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448561896", "createdAt": "2020-07-01T19:06:42Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NjEzMQ==", "bodyText": "The function of updateTopologyCongId will update the metadata and sinkManager related information. It should be called on all the type of nodes.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448596131", "createdAt": "2020-07-01T20:21:50Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0Mzc0OQ==", "bodyText": "But only the metadata, right? however, not the snapshotWriter/logEntryWriter.\nThose actually have logic that include calls to the database which are not required if you're not the lead standby, as a non-lead is not really doing anything. There is access to the logReplicationMedataManager at the DiscoveryService level, we can remove the updateTopologyConfigId on the logReplicationMetadata from the sink so it applies to all nodes, and the reset of the writers only if you're the leader, or is there something else that is generic to leaders and non-leaders?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448643749", "createdAt": "2020-07-01T22:15:05Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY1NTMzMQ==", "bodyText": "For all the nodes, it needs to update the metadata if config changes. As the metadata is protected by the transaction, at each site, only one node will succeed.\nThe related writer state should be updated too. As the configuration changes, a new full snapshot full sync will be needed. This is to reset the writer state. It is safer to reset writer state at all nodes as the leadership can change at anytime. In my local PR, I am trying to make the writer stateless and only using the persistent metadata.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448655331", "createdAt": "2020-07-01T22:49:54Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MzkxOQ==", "bodyText": "Questions:\n\nBut aren't they all writing to the same CorfuStore? the metadata is shared through the datastore.\nI do agree its needed for the node that is currently receiving data. But, those that are not should access it in a shared store as they are not really having activity. If you are pushing it as part of another PR that would address this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448673919", "createdAt": "2020-07-01T23:52:22Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3OTY1OQ==", "bodyText": "Assume the case that, there is a leadership change from node1 to node2. The leadership acquire event is on the queue for node2's discovery service to process, so node2 think it is not leader. Node1 has got the notification of leadership loss and has processed it and node1 think it is not leader either. There are some intermittent time, there is no node that consider it is the  leader and we don't want to lose the update of the metadata with the new config.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448679659", "createdAt": "2020-07-02T00:14:15Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTA1NQ==", "bodyText": "Ok ok, yes in that case even though it is redundant it will protect us in these cases.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448681055", "createdAt": "2020-07-02T00:19:40Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -419,11 +418,21 @@ public void processLockRelease() {\n      * @param newTopology new discovered topology\n      */\n     public void processClusterRoleChange(TopologyDescriptor newTopology) {\n+        // stop ongoing replication, stopLogReplication() checks leadership and active\n         stopLogReplication();\n+\n         //TODO pankti: read the configuration again and refresh the LogReplicationConfig object\n-        replicationManager.setTopology(newTopology);\n-        boolean activeCluster = localNodeDescriptor.getRoleType() == ClusterRole.ACTIVE;\n-        updateTopologyConfigId(activeCluster);\n+\n+        // update topology, cluster, and node configs\n+        updateLocalTopology(newTopology);\n+\n+        // update config id in metadata manager\n+        interClusterReplicationService.getLogReplicationServer().getSinkManager()\n+                .updateTopologyConfigId(topologyDescriptor.getTopologyConfigId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU2MDYzNw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg2NTI4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNzoxN1rOGryoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoyNDozN1rOGr0NJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTUzMQ==", "bodyText": "I see we have a processClusterRoleChange which comes as part of a DISCOVERED_TOPOLOGY event, but who can directly act upon the discovery service to forcefully prepare for Cluster Role Change? Is this some testing API? we should mark it as such and document it if it's the case.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448571531", "createdAt": "2020-07-01T19:27:17Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5NzI4NQ==", "bodyText": "This is an API we talked about that the upper layer like site manager can call us to prepare a site role change. Now seems that it may not be required. We can get rid of it or just keep it for our testing or warning purpose. The goal of this API is that after this call, the tables that should be replicated should not be changed any more. This hook can tell if the data has been changed or not.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448597285", "createdAt": "2020-07-01T20:24:37Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTUzMQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg2NjkzOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNzo1NlrOGryppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowNjoxMFrOGr5GnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTgxMw==", "bodyText": "prepareSiteRoleChange -> prepareClusterRoleChange in the log comment.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448571813", "createdAt": "2020-07-01T19:27:56Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MjA2Nw==", "bodyText": "Can't there be a role change from standby to active?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448572067", "createdAt": "2020-07-01T19:28:34Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTgxMw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxNjAxNA==", "bodyText": "Typo fixed.\nYeah, it can be a role change from standby to active. I think it depends on how the cluster manager uses it...\nI don't want to touch prepareClusterRoleChange() and queryReplicationStatus()'s functionality in this PR. I just added some logs and make it a little robust. It is better to have a new PR about those two functions.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448616014", "createdAt": "2020-07-01T21:06:03Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTgxMw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NzUzMg==", "bodyText": "ok, let's leave it for another PR, but we should revisit this.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448677532", "createdAt": "2020-07-02T00:06:10Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MTgxMw=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg5ODU0OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozOTowMFrOGry9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozOTowMFrOGry9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3Njg0Ng==", "bodyText": "You can remove the first TODO in this method as that you addressed.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448576846", "createdAt": "2020-07-01T19:39:00Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",\n+                    localClusterDescriptor.getClusterId(), localClusterDescriptor.getRole());\n+        }\n     }\n \n     /**\n-     * Query all replicated stream log tails and calculate the number of messages to be sent.\n-     * If the max tail has changed, return 0%.\n+     * Query the current all replication stream log tail and calculate the number of messages to be sent.\n+     * If the max tail has changed, give 0%.\n      */\n     @Override\n     public int queryReplicationStatus() {\n         // TODO (maxi): address Nan's comments\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkwNTc4OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MToyNVrOGrzBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowMjoxOVrOGr2xOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3Nzk4NQ==", "bodyText": "I think we should only reply if we are the leader. Cause from their point of view most likely we'll tell them to query all nodes in the cluster and they'll pick the max of these 3 values, otherwise, they won't know who is the leader right now as the lock is something internal.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448577985", "createdAt": "2020-07-01T19:41:25Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",\n+                    localClusterDescriptor.getClusterId(), localClusterDescriptor.getRole());\n+        }\n     }\n \n     /**\n-     * Query all replicated stream log tails and calculate the number of messages to be sent.\n-     * If the max tail has changed, return 0%.\n+     * Query the current all replication stream log tail and calculate the number of messages to be sent.\n+     * If the max tail has changed, give 0%.\n      */\n     @Override\n     public int queryReplicationStatus() {\n         // TODO (maxi): address Nan's comments\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n+            // If not leader, replication manager might be null\n+            if (replicationManager != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTI5MQ==", "bodyText": "Added check and logs", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448639291", "createdAt": "2020-07-01T22:02:19Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +537,35 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareSiteRoleChange when cluster{} with role {}\",\n+                    localClusterDescriptor.getClusterId(), localClusterDescriptor.getRole());\n+        }\n     }\n \n     /**\n-     * Query all replicated stream log tails and calculate the number of messages to be sent.\n-     * If the max tail has changed, return 0%.\n+     * Query the current all replication stream log tail and calculate the number of messages to be sent.\n+     * If the max tail has changed, give 0%.\n      */\n     @Override\n     public int queryReplicationStatus() {\n         // TODO (maxi): address Nan's comments\n-        return replicationManager.queryReplicationStatus();\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE) {\n+            // If not leader, replication manager might be null\n+            if (replicationManager != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3Nzk4NQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkxNzkwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NTo1N1rOGrzJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NTo1N1rOGrzJig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTk3OA==", "bodyText": "I think we have something loose in this API. It does not restrict ClusterRole change from standby -> active or active->standby however, our underlying only process one type. Maybe it's the naming? or revising the actual functionality?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448579978", "createdAt": "2020-07-01T19:45:57Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/CorfuReplicationClusterManagerAdapter.java", "diffHunk": "@@ -35,7 +35,7 @@ public synchronized void updateTopologyConfig(TopologyConfigurationMsg newTopolo\n     }\n \n     public void prepareSiteRoleChange() {\n-        corfuReplicationDiscoveryService.prepareSiteRoleChange();\n+        corfuReplicationDiscoveryService.prepareClusterRoleChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkyMzQxOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0Nzo0OVrOGrzM9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToxNDozN1rOGr1kkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDg1NQ==", "bodyText": "now that you are unifying the topologyConfigId, please change it also on. the snapshot and logEntry reader to setTopologyConfigId.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448580855", "createdAt": "2020-07-01T19:47:49Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -349,7 +349,7 @@ void transition(LogReplicationState from, LogReplicationState to) {\n         to.onEntry(from);\n     }\n \n-    public void setSiteConfigID(long siteConfigID) {\n+    public void setTopologyConfigId(long siteConfigID) {\n         this.siteConfigID = siteConfigID;\n         snapshotReader.setSiteEpoch(siteConfigID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTY2Nw==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448619667", "createdAt": "2020-07-01T21:14:37Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -349,7 +349,7 @@ void transition(LogReplicationState from, LogReplicationState to) {\n         to.onEntry(from);\n     }\n \n-    public void setSiteConfigID(long siteConfigID) {\n+    public void setTopologyConfigId(long siteConfigID) {\n         this.siteConfigID = siteConfigID;\n         snapshotReader.setSiteEpoch(siteConfigID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDg1NQ=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkyOTI5OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0OTo1M1rOGrzQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowMTo1M1rOGr2wtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTc3MA==", "bodyText": "this is the method I mentioned up in another comment that we might change the name as it is overloaded with other functionalities.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448581770", "createdAt": "2020-07-01T19:49:53Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -363,14 +365,13 @@ private boolean receivedValidMessage(LogReplicationEntry message) {\n      * 1. update the metadata store with the most recent topologyConfigId\n      * 2. reset snapshotWriter and logEntryWriter state\n      * 3. reset buffer logEntryBuffer state.\n-     * @param active\n-     * @param siteConfigID\n+     * @param topologyConfigId\n      */\n-    public void updateTopologyConfigId(boolean active, long siteConfigID) {\n-        this.siteConfigID = siteConfigID;\n+    public void updateTopologyConfigId(long topologyConfigId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTE1OA==", "bodyText": "Moved metadata manager update to discovery service.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448639158", "createdAt": "2020-07-01T22:01:53Z", "author": {"login": "zhangn49"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -363,14 +365,13 @@ private boolean receivedValidMessage(LogReplicationEntry message) {\n      * 1. update the metadata store with the most recent topologyConfigId\n      * 2. reset snapshotWriter and logEntryWriter state\n      * 3. reset buffer logEntryBuffer state.\n-     * @param active\n-     * @param siteConfigID\n+     * @param topologyConfigId\n      */\n-    public void updateTopologyConfigId(boolean active, long siteConfigID) {\n-        this.siteConfigID = siteConfigID;\n+    public void updateTopologyConfigId(long topologyConfigId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MTc3MA=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkzOTY0OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo1MzoyMlrOGrzW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowODozNFrOGr5JKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MzM4Ng==", "bodyText": "Nan would you mind adding a brief description on what this test does. So when someone wants to look at it they know in plain English what it is doing. Maybe something in the line: Bring up an active and standby Log Replication Server, start replication. Initiate a cluster role switch in the middle of (snapshot/log entry) sync, while data is still being persisted into the active datastore (or do you stop the writing before the switch).. is the replication still going on when asked to switch or did it finish already? something in that line so we can easily detect which tests we need to add.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448583386", "createdAt": "2020-07-01T19:53:22Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -18,6 +18,7 @@\n public class CorfuReplicationSiteConfigIT extends AbstractIT {\n     final static int MAX_RETRY = 10;\n     final static long sleepInterval = 10000;\n+    private final String pluginConfigFilePath = \"src/test/resources/transport/nettyConfig.properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxMTUwNA==", "bodyText": "Yeah, we definitely need a description. I will add descriptions for new tests.\nNow any IT run replication as a thread will fail in Travis CI, and the current default cluster manager is not able to change the topology config unless running as a thread.\nSo I am introducing a new test cluster manager that subscribes a stream and updates config onNext(). In this way, we can easily control config change in test, and new cluster config IT can run as a process and pass Travis build.\nI keep this one to verify config change logic, and will remove it after my new cluster config complete.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448611504", "createdAt": "2020-07-01T20:55:35Z", "author": {"login": "zhangn49"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -18,6 +18,7 @@\n public class CorfuReplicationSiteConfigIT extends AbstractIT {\n     final static int MAX_RETRY = 10;\n     final static long sleepInterval = 10000;\n+    private final String pluginConfigFilePath = \"src/test/resources/transport/nettyConfig.properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MzM4Ng=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3ODE4NQ==", "bodyText": "ok, yes I was thinking on this test and I have some thoughts on how to run it in processes. I'll share it with you offline I think it will let us model several scenarios very quickly.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448678185", "createdAt": "2020-07-02T00:08:34Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/CorfuReplicationSiteConfigIT.java", "diffHunk": "@@ -18,6 +18,7 @@\n public class CorfuReplicationSiteConfigIT extends AbstractIT {\n     final static int MAX_RETRY = 10;\n     final static long sleepInterval = 10000;\n+    private final String pluginConfigFilePath = \"src/test/resources/transport/nettyConfig.properties\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MzM4Ng=="}, "originalCommit": {"oid": "d22aecb8c791ebb9adafe10e354857e1a601e53a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjQ5MzM2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozNTo1MFrOGr4l8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozNTo1MFrOGr4l8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2OTE3MA==", "bodyText": "typo -> lof -> log", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448669170", "createdAt": "2020-07-01T23:35:50Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -358,35 +365,27 @@ private void onLeadershipAcquire() {\n                 break;\n             default:\n                 log.error(\"Log Replication not started on this cluster. Leader node {} belongs to cluster with {} role.\",\n-                            localEndpoint, localNodeDescriptor.getRoleType());\n+                            localEndpoint, localClusterDescriptor.getRole());\n                 break;\n         }\n     }\n \n-    private void updateTopologyConfigId(boolean active) {\n-        // Required only on topology changes\n-        interClusterReplicationService.getLogReplicationServer().getSinkManager().updateTopologyConfigId(active, topologyDescriptor.getTopologyConfigId());\n-\n-        log.debug(\"Persist new topologyConfigId {}, status={}\", topologyDescriptor.getTopologyConfigId(),\n-                localNodeDescriptor.getRoleType());\n-    }\n-\n     /**\n      * Stop Log Replication\n      */\n     private void stopLogReplication() {\n-        switch(localNodeDescriptor.getRoleType()) {\n+        switch(localClusterDescriptor.getRole()) {\n             case ACTIVE:\n-                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localNodeDescriptor.getRoleType());\n+                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localClusterDescriptor.getRole());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9d7d1f1d3419fbc200f50563b8e994d9aeb9e1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjQ5ODQ1OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozODozMVrOGr4pAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzozODozMVrOGr4pAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY2OTk1NA==", "bodyText": "typo -> lof -> log", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448669954", "createdAt": "2020-07-01T23:38:31Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -358,35 +365,27 @@ private void onLeadershipAcquire() {\n                 break;\n             default:\n                 log.error(\"Log Replication not started on this cluster. Leader node {} belongs to cluster with {} role.\",\n-                            localEndpoint, localNodeDescriptor.getRoleType());\n+                            localEndpoint, localClusterDescriptor.getRole());\n                 break;\n         }\n     }\n \n-    private void updateTopologyConfigId(boolean active) {\n-        // Required only on topology changes\n-        interClusterReplicationService.getLogReplicationServer().getSinkManager().updateTopologyConfigId(active, topologyDescriptor.getTopologyConfigId());\n-\n-        log.debug(\"Persist new topologyConfigId {}, status={}\", topologyDescriptor.getTopologyConfigId(),\n-                localNodeDescriptor.getRoleType());\n-    }\n-\n     /**\n      * Stop Log Replication\n      */\n     private void stopLogReplication() {\n-        switch(localNodeDescriptor.getRoleType()) {\n+        switch(localClusterDescriptor.getRole()) {\n             case ACTIVE:\n-                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localNodeDescriptor.getRoleType());\n+                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localClusterDescriptor.getRole());\n                 replicationManager.stop();\n                 break;\n             case STANDBY:\n-                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localNodeDescriptor.getRoleType());\n+                log.info(\"This cluster has lost leadership. Stopping lof replication, according to role {}\", localClusterDescriptor.getRole());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9d7d1f1d3419fbc200f50563b8e994d9aeb9e1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUzMzkwOnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1NzozOFrOGr495w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMzo1NzozOFrOGr495w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NTMwMw==", "bodyText": "Let's remove this TODO and please add a note that this is under the assumption that changes in the topology config Id imply a change of cluster role.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448675303", "createdAt": "2020-07-01T23:57:38Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -436,40 +450,58 @@ public void processClusterRoleChange(TopologyDescriptor newTopology) {\n      *\n      * @param event discovery event\n      */\n-    private void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n-        // Stale notification, skip\n-        if (event.getTopologyConfig().getTopologyConfigID() < getReplicationManager().getTopology().getTopologyConfigId()) {\n-            log.debug(\"Stale Topology Change Notification, current={}, received={}\", topologyDescriptor.getTopologyConfigId(),\n-                    event.getTopologyConfig());\n+    public void processTopologyChangeNotification(DiscoveryServiceEvent event) {\n+        // Skip stale notification\n+        if (event.getTopologyConfig().getTopologyConfigID() < topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Stale Topology Change Notification, current={}, received={}\",\n+                    topologyDescriptor.getTopologyConfigId(), event.getTopologyConfig());\n             return;\n         }\n \n-        TopologyDescriptor newConfig = new TopologyDescriptor(event.getTopologyConfig());\n-        topologyDescriptor = newConfig;\n-\n-        //On topology change notification, store latest topology and only process if current node is the leader\n-        if (isLeader) {\n-            if (newConfig.getTopologyConfigId() == getReplicationManager().getTopology().getTopologyConfigId()) {\n-                if (localNodeDescriptor.getRoleType() == ClusterRole.STANDBY) {\n-                    return;\n-                }\n+        TopologyDescriptor newTopology = new TopologyDescriptor(event.getTopologyConfig());\n+        // Process standby add/remove, which will not increment config id\n+        // We won't stop ongoing replications in this case\n+        if (newTopology.getTopologyConfigId() == topologyDescriptor.getTopologyConfigId()) {\n+            log.debug(\"Processing a new topology with the same config id, previous topology\" +\n+                    \" is {}, and new topology is {}\", topologyDescriptor, newTopology);\n+            if (localClusterDescriptor.getRole() == ClusterRole.STANDBY) {\n+                return;\n+            }\n \n-                // If the current node is active, compare with the current topologyConfig, see if there are additional or\n-                // removed standbys\n-                getReplicationManager().processStandbyChange(newConfig);\n-            } else {\n-                // TODO: Are we sure that when there is a topologyConfigId change it implies a role change\n-                //  and not a new standby added??\n-                processClusterRoleChange(newConfig);\n+            // If the current node is active, compare with the current topologyConfig, see if there\n+            // are additional or removed standbys\n+            if (replicationManager != null && isLeader) {\n+                replicationManager.processStandbyChange(newTopology);\n             }\n+\n+            // After processing standby change, update local topology\n+            updateLocalTopology(newTopology);\n+            return;\n         }\n+\n+        // TODO: Are we sure that when there is a topologyConfigId change it implies a role change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9d7d1f1d3419fbc200f50563b8e994d9aeb9e1"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjUzODE2OnYy", "diffSide": "RIGHT", "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMDowN1rOGr5Acg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDowMDowN1rOGr5Acg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NTk1NA==", "bodyText": "typo -> Query all current replication streams log tails ...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2591#discussion_r448675954", "createdAt": "2020-07-02T00:00:07Z", "author": {"login": "annym"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/CorfuReplicationDiscoveryService.java", "diffHunk": "@@ -517,18 +549,40 @@ public void updateTopology(LogReplicationClusterInfo.TopologyConfigurationMsg to\n      * msg needs to send out.\n      */\n     @Override\n-    public void prepareSiteRoleChange() {\n-        replicationManager.prepareSiteRoleChange();\n+    public void prepareClusterRoleChange() {\n+        if (localClusterDescriptor.getRole() == ClusterRole.ACTIVE && replicationManager != null) {\n+            replicationManager.prepareClusterRoleChange();\n+        } else {\n+            log.warn(\"Illegal prepareClusterRoleChange when cluster{} with role {}\",\n+                    localClusterDescriptor.getClusterId(), localClusterDescriptor.getRole());\n+        }\n     }\n \n     /**\n-     * Query all replicated stream log tails and calculate the number of messages to be sent.\n-     * If the max tail has changed, return 0%.\n+     * Query the current all replication stream log tail and calculate the number of messages to be sent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e9d7d1f1d3419fbc200f50563b8e994d9aeb9e1"}, "originalPosition": 223}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1996, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}