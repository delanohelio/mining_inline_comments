{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNTAzMzM3", "number": 2640, "title": "Handle Trim Exceptions on Shadow Streams", "bodyText": "Overview\nDescription:\n\nImplement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\nBug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\nTests to verify 1 and 2\n\nRelated issue(s) (if applicable): #2623", "createdAt": "2020-07-17T22:17:52Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640", "merged": true, "mergeCommit": {"oid": "780209029d1121959d0873c6213bf19a8a2af45f"}, "closed": true, "closedAt": "2020-07-25T01:23:27Z", "author": {"login": "annym"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc25qRMgBqjM1NjgxNjQ2OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4NdD8gBqjM1ODU4MTM2MTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "766ced48bf2a4a78aeee945d3235835fc39d129d", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/766ced48bf2a4a78aeee945d3235835fc39d129d", "committedDate": "2020-07-17T22:14:59Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2"}, "afterCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2ad463561e8b0379145f0ba3dac46932704fae1c", "committedDate": "2020-07-20T22:48:26Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDg5Njk1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-452089695", "createdAt": "2020-07-21T02:50:48Z", "commit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMjo1MDo0OFrOG0mL-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzoxODozMVrOG0mn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNDc5Mg==", "bodyText": "I think this was already merged?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457804792", "createdAt": "2020-07-21T02:50:48Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationMetadataManager.java", "diffHunk": "@@ -23,7 +23,7 @@\n @Slf4j\n public class LogReplicationMetadataManager {\n \n-    private static final String namespace = CORFU_SYSTEM_NAMESPACE;\n+    private static final String NAMESPACE = CORFU_SYSTEM_NAMESPACE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNTI5Ng==", "bodyText": "this will get updated on role change", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457805296", "createdAt": "2020-07-21T02:52:43Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -59,15 +67,12 @@\n     private LogReplicationMetadataManager logReplicationMetadataManager;\n     private RxState rxState;\n \n-    private LogReplicationConfig config;\n+    private final LogReplicationConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjQwNg==", "bodyText": "on receiving snapshot_end, applySnapshotSync applies the entries of the shadow streams.  We may want to move the callback to end there?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457806406", "createdAt": "2020-07-21T02:57:02Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -229,7 +258,13 @@ public LogReplicationEntry receive(LogReplicationEntry message) {\n         if (rxState.equals(RxState.LOG_ENTRY_SYNC)) {\n             return logEntrySinkBufferManager.processMsgAndBuffer(message);\n         } else {\n-            return snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            LogReplicationEntry ack = snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            if (message.getMetadata().getMessageMetadataType() == SNAPSHOT_END) {\n+                // Notify end of snapshot sync. This is a blocking call.\n+                snapshotSyncPlugin.onSnapshotSyncEnd();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjU4Ng==", "bodyText": "currentTs instead of buffer?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457806586", "createdAt": "2020-07-21T02:57:54Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SinkBufferManager.java", "diffHunk": "@@ -142,11 +142,13 @@ public LogReplicationEntry processMsgAndBuffer(LogReplicationEntry dataMessage)\n         long currentTs = getCurrentSeq(dataMessage);\n \n         if (preTs == lastProcessedSeq) {\n+            log.trace(\"Received in order message={}, lastProcessed={}\", currentTs, lastProcessedSeq);\n             sinkManager.processMessage(dataMessage);\n             ackCnt++;\n             lastProcessedSeq = getCurrentSeq(dataMessage);\n             processBuffer();\n         } else if (currentTs > lastProcessedSeq && buffer.size() < maxSize) {\n+            log.debug(\"Received unordered message, buffer={}, lastProcessed={}\", currentTs, lastProcessedSeq);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwNjgwNw==", "bodyText": "can it be made private?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457806807", "createdAt": "2020-07-21T02:58:57Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "diffHunk": "@@ -19,84 +19,107 @@\n \n import javax.annotation.concurrent.NotThreadSafe;\n import java.lang.reflect.Array;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.UUID;\n import java.util.stream.Stream;\n \n /**\n- * Writing a snapshot fullsync data\n- * Open streams interested and append all entries\n+ * This class represents the entity responsible of writing streams' snapshots into the standby cluster DB.\n+ *\n+ * Snapshot sync is the process of transferring a snapshot of the DB, for this reason, data is temporarily applied\n+ * to shadow streams in an effort to avoid inconsistent states. Once all the data is received, the shadow streams\n+ * are applied into the actual streams.\n  */\n \n @Slf4j\n @NotThreadSafe\n public class StreamsSnapshotWriter implements SnapshotWriter {\n-    final static String SHADOW_STREAM_NAME_SUFFIX = \"_shadow\";\n-    HashMap<UUID, String> streamViewMap; // It contains all the streams registered for write to.\n-    HashMap<UUID, String> shadowMap;\n-    CorfuRuntime rt;\n \n-    long siteConfigID;\n+    private static final UUID NIL_UUID = new UUID(0,0);\n+    final static String SHADOW_STREAM_SUFFIX = \"_SHADOW\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgwOTk4OA==", "bodyText": "does this only apply to logEntrySync?  because for snapshot sync we only ack after all entries are received...", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457809988", "createdAt": "2020-07-21T03:11:34Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/LogReplicationEventMetadata.java", "diffHunk": "@@ -20,12 +20,15 @@\n      */\n     private UUID requestId;\n \n-    /* Represents the last synced timestamp.\n-     *\n-     * For snapshot sync, it represents the base snapshot.\n-     * For log entry sync, it represents the last log entry synced.\n-    */\n-    private long syncTimestamp;\n+    /*\n+     * Represents the last log entry synced timestamp.\n+     */\n+    private long lastLogEntrySyncedTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgxMTU1NQ==", "bodyText": "remove?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457811555", "createdAt": "2020-07-21T03:17:04Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/AbstractIT.java", "diffHunk": "@@ -556,7 +561,8 @@ public String getOptionsString() {\n          * @throws IOException\n          */\n         public Process runServer() throws IOException {\n-            final String serverConsoleLogPath = CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";\n+            // final String serverConsoleLogPath = CORFU_LOG_PATH + File.separator + host + \"_\" + port + \"_consolelog\";\n+            final String serverConsoleLogPath = \"/Users/amartinezman/Desktop/gm\" + File.separator + host + \"_\" + port + \"_consolelog\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgxMTk1OQ==", "bodyText": "is this log message required?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r457811959", "createdAt": "2020-07-21T03:18:31Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/SnapshotSinkBufferManager.java", "diffHunk": "@@ -84,14 +84,8 @@ public LogReplicationEntryMetadata makeAckMessage(LogReplicationEntry entry) {\n      */\n     @Override\n     public boolean verifyMessageType(LogReplicationEntry entry) {\n-        switch (entry.getMetadata().getMessageMetadataType()) {\n-            case SNAPSHOT_MESSAGE:\n-            case SNAPSHOT_END:\n-                return true;\n-            default:\n-                log.error(\"wrong message type \", entry.getMetadata());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ad463561e8b0379145f0ba3dac46932704fae1c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTIzNzM0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-452923734", "createdAt": "2020-07-22T00:52:16Z", "commit": {"oid": "42785963621a5acf02111c8bebe0cde34406cc6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyOTI3Nzk0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-452927794", "createdAt": "2020-07-22T01:07:01Z", "commit": {"oid": "42785963621a5acf02111c8bebe0cde34406cc6f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowNzowMVrOG1PEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMTowNzowMVrOG1PEyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ3NDY5Ng==", "bodyText": "I had questions about it in PR, looks like now its fixed, cool", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r458474696", "createdAt": "2020-07-22T01:07:01Z", "author": {"login": "PavelZaytsev"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/fsm/LogReplicationFSM.java", "diffHunk": "@@ -290,26 +289,26 @@ private void consume() {\n             LogReplicationEvent event = eventQueue.take();\n \n             if (event.getType() == LogReplicationEventType.REPLICATION_START) {\n-                baseSnapshot = event.getMetadata().getSyncTimestamp();\n-                ackedTimestamp = baseSnapshot;\n+                baseSnapshot = event.getMetadata().getLastBaseSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42785963621a5acf02111c8bebe0cde34406cc6f"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42785963621a5acf02111c8bebe0cde34406cc6f", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/42785963621a5acf02111c8bebe0cde34406cc6f", "committedDate": "2020-07-21T18:31:29Z", "message": "Address Comments"}, "afterCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cd158f283997066598da3407d054407f7de10d01", "committedDate": "2020-07-22T15:53:23Z", "message": "Address Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzg0Mjg1", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-453784285", "createdAt": "2020-07-23T01:13:20Z", "commit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxMzoyMVrOG15XSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxMzoyMVrOG15XSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2NzU2Mg==", "bodyText": "streamViewMap should not change after initialized?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459167562", "createdAt": "2020-07-23T01:13:21Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "diffHunk": "@@ -19,84 +19,106 @@\n \n import javax.annotation.concurrent.NotThreadSafe;\n import java.lang.reflect.Array;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.UUID;\n import java.util.stream.Stream;\n \n /**\n- * Writing a snapshot fullsync data\n- * Open streams interested and append all entries\n+ * This class represents the entity responsible of writing streams' snapshots into the standby cluster DB.\n+ *\n+ * Snapshot sync is the process of transferring a snapshot of the DB, for this reason, data is temporarily applied\n+ * to shadow streams in an effort to avoid inconsistent states. Once all the data is received, the shadow streams\n+ * are applied into the actual streams.\n  */\n \n @Slf4j\n @NotThreadSafe\n public class StreamsSnapshotWriter implements SnapshotWriter {\n-    final static String SHADOW_STREAM_NAME_SUFFIX = \"_shadow\";\n-    HashMap<UUID, String> streamViewMap; // It contains all the streams registered for write to.\n-    HashMap<UUID, String> shadowMap;\n-    CorfuRuntime rt;\n \n-    long siteConfigID;\n+    private static final UUID NIL_UUID = new UUID(0,0);\n+    private final static String SHADOW_STREAM_SUFFIX = \"_SHADOW\";\n+\n+    // Mapping from regular stream Id to stream Name\n+    private HashMap<UUID, String> streamViewMap;\n+    private CorfuRuntime rt;\n+\n+    private long topologyConfigId;\n     private long srcGlobalSnapshot; // The source snapshot timestamp\n     private long recvSeq;\n     private long shadowStreamStartAddress;\n+\n     @Getter\n     private LogReplicationMetadataManager logReplicationMetadataManager;\n-    HashMap<UUID, UUID> uuidMap;\n-    Phase phase;\n-\n-\n-    // The sequence number of the message, it has received.\n-    // It is expecting the message in order of the sequence.\n+    private HashMap<UUID, UUID> uuidMap;\n+    private Phase phase;\n \n     public StreamsSnapshotWriter(CorfuRuntime rt, LogReplicationConfig config, LogReplicationMetadataManager logReplicationMetadataManager) {\n         this.rt = rt;\n         this.logReplicationMetadataManager = logReplicationMetadataManager;\n-        streamViewMap = new HashMap<>();\n-        uuidMap = new HashMap<>();\n-        shadowMap = new HashMap<>();\n-        phase = Phase.TransferPhase;\n-\n-        for (String stream : config.getStreamsToReplicate()) {\n-            String shadowStream = stream + SHADOW_STREAM_NAME_SUFFIX;\n-            UUID streamID = CorfuRuntime.getStreamID(stream);\n-            UUID shadowID = CorfuRuntime.getStreamID(shadowStream);\n-            uuidMap.put(streamID, shadowID);\n-            uuidMap.put(shadowID, streamID);\n-            streamViewMap.put(streamID, stream);\n-            shadowMap.put(shadowID, shadowStream);\n+        this.streamViewMap = new HashMap<>();\n+        this.uuidMap = new HashMap<>();\n+        this.phase = Phase.TRANSFER_PHASE;\n+\n+        initializeShadowStreams(config);\n+    }\n+\n+    /**\n+     * Create shadow streams.\n+     *\n+     * We create a shadow stream per stream to replicate. A shadow stream aims to accumulate updates\n+     * temporarily while the (full) snapshot sync completes. Shadow streams aim to avoid inconsistent\n+     * states while data is still being transferred from active to standby.\n+     *\n+     * We currently, wait for snapshot sync to complete before applying data in shadow streams\n+     * to the actual streams, this means that there is still a window of inconsistency as apply is not atomic,\n+     * but at least inconsistency is at a point where there is guarantee of all data being available on the receiver.\n+     * In the future, we will support Table Aliasing which will enable atomic flip from shadow to regular streams, avoiding\n+     * complete inconsistency.\n+     */\n+    private void initializeShadowStreams(LogReplicationConfig config) {\n+        // For every stream create a shadow stream which name is unique based\n+        // on the original stream and a suffix.\n+        for (String streamName : config.getStreamsToReplicate()) {\n+            String shadowStreamName = streamName + SHADOW_STREAM_SUFFIX;\n+            UUID streamId = CorfuRuntime.getStreamID(streamName);\n+            UUID shadowStreamId = CorfuRuntime.getStreamID(shadowStreamName);\n+            uuidMap.put(streamId, shadowStreamId);\n+            uuidMap.put(shadowStreamId, streamId);\n+            streamViewMap.put(streamId, streamName);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzg1MTUx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-453785151", "createdAt": "2020-07-23T01:17:05Z", "commit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxNzowNVrOG15a8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToxNzowNVrOG15a8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2ODQ5Ng==", "bodyText": "Is it necessary to set ignore the trim? How about there is a bug in the plugin?\nIf the plugin works correct, we should not get trimmed exception. If the plugin doesn't work properly, the working shadow stream can still be trimmed and we get a trim exception, right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459168496", "createdAt": "2020-07-23T01:17:05Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/StreamsSnapshotWriter.java", "diffHunk": "@@ -205,37 +227,43 @@ public void apply(List<LogReplicationEntry> messages) throws Exception {\n     }\n \n     /**\n-     * Read from the shadow table and write to the real table\n-     * @param uuid: the real table uuid\n+     * Read from the shadow table and write to the original stream\n+     *\n+     * @param streamId regular stream id\n+     * @param seqNum sequence number to apply\n+     * @param snapshot base snapshot timestamp\n      */\n-    public long applyShadowStream(UUID uuid, Long seqNum, long snapshot) {\n-        UUID shadowUUID = uuidMap.get(uuid);\n+    private long applyShadowStream(UUID streamId, long seqNum, long snapshot) {\n+        UUID shadowStreamId = uuidMap.get(streamId);\n+\n+        // We can safely ignore trims on the shadow stream, as our protocol guarantees\n+        // that the checkpointer/trimmer will not run during a snapshot sync. Therefore,\n+        // any observed TrimmedException belongs to different snapshot cycles, for which,\n+        // old data is guaranteed to be applied.\n         StreamOptions options = StreamOptions.builder()\n-                .ignoreTrimmed(false)\n+                .ignoreTrimmed(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzg2MTY2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-453786166", "createdAt": "2020-07-23T01:21:46Z", "commit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyMTo0NlrOG15e8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMToyMTo0NlrOG15e8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE2OTUyMQ==", "bodyText": "We better remove this constructor, or add setting the baseSnapshot.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459169521", "createdAt": "2020-07-23T01:21:46Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/send/LogReplicationEventMetadata.java", "diffHunk": "@@ -53,16 +56,31 @@ public LogReplicationEventMetadata(UUID requestId) {\n      */\n     public LogReplicationEventMetadata(UUID requestId, long syncTimestamp) {\n         this.requestId = requestId;\n-        this.syncTimestamp = syncTimestamp;\n+        this.lastLogEntrySyncedTimestamp = syncTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODA5OTA5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-453809909", "createdAt": "2020-07-23T02:59:16Z", "commit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1OToxNlrOG16xDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMjo1OTozNFrOG16xPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDU0Mg==", "bodyText": "Can this method take a CorfuRuntime as a parameter? Without that it's tricky to re-initialize a new runtime just for freezing checkpointing.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459190542", "createdAt": "2020-07-23T02:59:16Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultSnapshotSyncPlugin.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Default Snapshot Sync Plugin\n+ *\n+ * This implementation returns immediately for start and end of a snapshot sync.\n+ */\n+@Slf4j\n+public class DefaultSnapshotSyncPlugin implements ISnapshotSyncPlugin {\n+\n+    @Override\n+    public void onSnapshotSyncStart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDU4OQ==", "bodyText": "Can this method take a CorfuRuntime as a parameter? Without that it's tricky to re-initialize a new runtime just for unfreezing checkpointing.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459190589", "createdAt": "2020-07-23T02:59:34Z", "author": {"login": "hisundar"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/infrastructure/plugins/DefaultSnapshotSyncPlugin.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.corfudb.infrastructure.logreplication.infrastructure.plugins;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * Default Snapshot Sync Plugin\n+ *\n+ * This implementation returns immediately for start and end of a snapshot sync.\n+ */\n+@Slf4j\n+public class DefaultSnapshotSyncPlugin implements ISnapshotSyncPlugin {\n+\n+    @Override\n+    public void onSnapshotSyncStart() {\n+        log.debug(\"onSnapshotSyncStart :: OK\");\n+    }\n+\n+    @Override\n+    public void onSnapshotSyncEnd() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd158f283997066598da3407d054407f7de10d01", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/cd158f283997066598da3407d054407f7de10d01", "committedDate": "2020-07-22T15:53:23Z", "message": "Address Comments"}, "afterCommit": {"oid": "6ce65cc9f4d34954150393f2629ef79025b477bb", "author": {"user": {"login": "hisundar", "name": "Sundar Sridharan"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/6ce65cc9f4d34954150393f2629ef79025b477bb", "committedDate": "2020-07-23T03:23:49Z", "message": "pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDU5MjI3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-454459227", "createdAt": "2020-07-23T20:09:38Z", "commit": {"oid": "6ce65cc9f4d34954150393f2629ef79025b477bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjM4NTk3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-454638597", "createdAt": "2020-07-24T05:16:58Z", "commit": {"oid": "93049a8f6a828422a3c8eef481676a31f48e3e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNToxNjo1OFrOG2jXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNToxNjo1OFrOG2jXcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NTcyOA==", "bodyText": "While doing snapshot transfer, all message has the same snapshottimestamp. May check the metadata's seqNum + 1 = ack's seqNum.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459855728", "createdAt": "2020-07-24T05:16:58Z", "author": {"login": "xiaoqin2012"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -226,49 +256,89 @@ public LogReplicationEntry receive(LogReplicationEntry message) {\n             return null;\n         }\n \n+        return processReceivedMessage(message);\n+    }\n+\n+    /**\n+     * Process received (valid) message depending on the current rx state (LOG_ENTRY_SYNC or SNAPSHOT_SYNC)\n+     *\n+     * @param message received message\n+     * @return ack\n+     */\n+    private LogReplicationEntry processReceivedMessage(LogReplicationEntry message) {\n         if (rxState.equals(RxState.LOG_ENTRY_SYNC)) {\n             return logEntrySinkBufferManager.processMsgAndBuffer(message);\n         } else {\n-            return snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            LogReplicationEntry ack = snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            if (ack.getMetadata().getMessageMetadataType() == MessageType.SNAPSHOT_REPLICATED) {\n+                long lastStartedSnapshotSync = logReplicationMetadataManager.getLastSnapStartTimestamp();\n+                // Verify this snapshot ACK corresponds to the last initialized/valid snapshot sync\n+                // as a previous one could have been canceled but still processed due to messages being out of order\n+                if (ack.getMetadata().getSnapshotTimestamp() == lastStartedSnapshotSync) {\n+                    // Notify end of snapshot sync. This is a blocking call.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93049a8f6a828422a3c8eef481676a31f48e3e64"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjQzNDg5", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#pullrequestreview-454643489", "createdAt": "2020-07-24T05:37:30Z", "commit": {"oid": "93049a8f6a828422a3c8eef481676a31f48e3e64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozNzozMFrOG2jo3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozNzozMFrOG2jo3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg2MDE5MQ==", "bodyText": "ongoing snapshot sync is ack.getMetadata().getSnapshotTimestamp(), right?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2640#discussion_r459860191", "createdAt": "2020-07-24T05:37:30Z", "author": {"login": "pankti-m"}, "path": "infrastructure/src/main/java/org/corfudb/infrastructure/logreplication/replication/receive/LogReplicationSinkManager.java", "diffHunk": "@@ -226,49 +256,89 @@ public LogReplicationEntry receive(LogReplicationEntry message) {\n             return null;\n         }\n \n+        return processReceivedMessage(message);\n+    }\n+\n+    /**\n+     * Process received (valid) message depending on the current rx state (LOG_ENTRY_SYNC or SNAPSHOT_SYNC)\n+     *\n+     * @param message received message\n+     * @return ack\n+     */\n+    private LogReplicationEntry processReceivedMessage(LogReplicationEntry message) {\n         if (rxState.equals(RxState.LOG_ENTRY_SYNC)) {\n             return logEntrySinkBufferManager.processMsgAndBuffer(message);\n         } else {\n-            return snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            LogReplicationEntry ack = snapshotSinkBufferManager.processMsgAndBuffer(message);\n+            if (ack.getMetadata().getMessageMetadataType() == MessageType.SNAPSHOT_REPLICATED) {\n+                long lastStartedSnapshotSync = logReplicationMetadataManager.getLastSnapStartTimestamp();\n+                // Verify this snapshot ACK corresponds to the last initialized/valid snapshot sync\n+                // as a previous one could have been canceled but still processed due to messages being out of order\n+                if (ack.getMetadata().getSnapshotTimestamp() == lastStartedSnapshotSync) {\n+                    // Notify end of snapshot sync. This is a blocking call.\n+                    snapshotSyncPlugin.onSnapshotSyncEnd(runtime);\n+                } else {\n+                    log.warn(\"SNAPSHOT_SYNC has completed for {}, but new ongoing SNAPSHOT_SYNC is {}\",\n+                            ack.getMetadata().getSnapshotTimestamp(), lastStartedSnapshotSync);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93049a8f6a828422a3c8eef481676a31f48e3e64"}, "originalPosition": 177}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93049a8f6a828422a3c8eef481676a31f48e3e64", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/93049a8f6a828422a3c8eef481676a31f48e3e64", "committedDate": "2020-07-24T00:53:15Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "40de1c1a3a6b4105921622a3accd4f3f72845e0f", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/40de1c1a3a6b4105921622a3accd4f3f72845e0f", "committedDate": "2020-07-24T07:29:13Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40de1c1a3a6b4105921622a3accd4f3f72845e0f", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/40de1c1a3a6b4105921622a3accd4f3f72845e0f", "committedDate": "2020-07-24T07:29:13Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "2cbda2c20885ad2d931367ca306f47c2038379d5", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2cbda2c20885ad2d931367ca306f47c2038379d5", "committedDate": "2020-07-24T07:32:34Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cbda2c20885ad2d931367ca306f47c2038379d5", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/2cbda2c20885ad2d931367ca306f47c2038379d5", "committedDate": "2020-07-24T07:32:34Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "3341a11c1fb492ce1cb928210656087547ae8394", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3341a11c1fb492ce1cb928210656087547ae8394", "committedDate": "2020-07-24T07:38:23Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3341a11c1fb492ce1cb928210656087547ae8394", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/3341a11c1fb492ce1cb928210656087547ae8394", "committedDate": "2020-07-24T07:38:23Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "8aead984e253185a6e9ddf11e0750264df322bf1", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8aead984e253185a6e9ddf11e0750264df322bf1", "committedDate": "2020-07-24T19:37:31Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8aead984e253185a6e9ddf11e0750264df322bf1", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/8aead984e253185a6e9ddf11e0750264df322bf1", "committedDate": "2020-07-24T19:37:31Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "397e9687a34f03bf5baa5d7ebe681d5a18a114bc", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/397e9687a34f03bf5baa5d7ebe681d5a18a114bc", "committedDate": "2020-07-24T21:30:08Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "397e9687a34f03bf5baa5d7ebe681d5a18a114bc", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/397e9687a34f03bf5baa5d7ebe681d5a18a114bc", "committedDate": "2020-07-24T21:30:08Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "f802c42b293386166061ea0333128763263331df", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f802c42b293386166061ea0333128763263331df", "committedDate": "2020-07-24T22:46:51Z", "message": "Do not ignore trim on shadow stream"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f802c42b293386166061ea0333128763263331df", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f802c42b293386166061ea0333128763263331df", "committedDate": "2020-07-24T22:46:51Z", "message": "Do not ignore trim on shadow stream"}, "afterCommit": {"oid": "11986a4ccf6c9970dfc3fe88cbb0f1fc0affce0a", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/11986a4ccf6c9970dfc3fe88cbb0f1fc0affce0a", "committedDate": "2020-07-24T22:47:34Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11986a4ccf6c9970dfc3fe88cbb0f1fc0affce0a", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/11986a4ccf6c9970dfc3fe88cbb0f1fc0affce0a", "committedDate": "2020-07-24T22:47:34Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}, "afterCommit": {"oid": "6c70090d652dbfb50a4f1b8441a68639cc5cae8e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/6c70090d652dbfb50a4f1b8441a68639cc5cae8e", "committedDate": "2020-07-24T22:56:05Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c70090d652dbfb50a4f1b8441a68639cc5cae8e", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/6c70090d652dbfb50a4f1b8441a68639cc5cae8e", "committedDate": "2020-07-24T22:56:05Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}, "afterCommit": {"oid": "9a0bcacf20284c8c862b8ef58199fa1cf66fc948", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9a0bcacf20284c8c862b8ef58199fa1cf66fc948", "committedDate": "2020-07-24T23:00:13Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955129fc0f069d390aca86e87d03abb20c4948c2", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/955129fc0f069d390aca86e87d03abb20c4948c2", "committedDate": "2020-07-25T00:26:12Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a0bcacf20284c8c862b8ef58199fa1cf66fc948", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/9a0bcacf20284c8c862b8ef58199fa1cf66fc948", "committedDate": "2020-07-24T23:00:13Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}, "afterCommit": {"oid": "955129fc0f069d390aca86e87d03abb20c4948c2", "author": {"user": {"login": "annym", "name": "Anny Martinez"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/955129fc0f069d390aca86e87d03abb20c4948c2", "committedDate": "2020-07-25T00:26:12Z", "message": "Handle Trim Exceptions on Shadow Streams\n\n1. Implement a callback mechanism, where snapshot sync start/end is notified\nto a plugin, so checkpoint/trim is disabled for the duration of snapshot sync.\n2. Bug Fix: properly set base snapshot on renegotiation for two different log entry (delta) sync cycles\n3. Tests to verify 1 and 2\n4. Pass CorfuRuntime instance to the onSnapshotSyncStart/End() calls"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4273, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}