{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzU4Mjgx", "number": 2696, "title": "Measure Serialize/Deserialize/VLO_SYNC latency", "bodyText": "Overview\nDescription:\nMeasure Serialize/Deserialize/VLO_SYNC latency\nWhy should this be merged:\nRelated issue(s) (if applicable): #\nChecklist (Definition of Done):\n\n There are no TODOs left in the code\n Coding conventions (e.g. for logging, unit tests) have been followed\n Change is covered by automated tests\n Public API has Javadoc", "createdAt": "2020-08-10T22:15:04Z", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696", "merged": true, "mergeCommit": {"oid": "eb8bd5274619d55e29d3daf32684a6f752f1934f"}, "closed": true, "closedAt": "2020-08-14T23:43:26Z", "author": {"login": "zhangn49"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9reiSAFqTQ2NDY2ODAxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-7xooAFqTQ2Nzg5MjQwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjY4MDEx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-464668011", "createdAt": "2020-08-11T00:14:43Z", "commit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxNDo0NFrOG-j-Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDoxNDo0NFrOG-j-Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1NDI5OA==", "bodyText": "If you move this string concatenation outside, you don't have to do it on each access.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468254298", "createdAt": "2020-08-11T00:14:44Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +674,32 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n+        AtomicLong counter = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjczNjUx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-464673651", "createdAt": "2020-08-11T00:33:14Z", "commit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozMzoxNFrOG-kSlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozMzoxNFrOG-kSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1OTQ3Ng==", "bodyText": "This might produce a bimodal distribution. Since the optimistic sync is much faster (or should be) than the materialized stream sync.\nIs it necessary to split them?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468259476", "createdAt": "2020-08-11T00:33:14Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +674,32 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+        Timer timer = VloMetricsHelper.metrics.timer(VloMetricsHelper.VLO_SYNC_STREAM + stream.getID());\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(VloMetricsHelper.VLO_SYNC_COUNT + stream.getID());\n+        AtomicLong counter = new AtomicLong();\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(timer)) {\n+            stream.streamUpTo(syncTo)\n+                    .forEachOrdered(entry -> {\n+                        try {\n+                            counter.getAndIncrement();\n+                            Object res = applyUpdateUnsafe(entry, timestamp);\n+                            if (timestamp == Address.OPTIMISTIC) {\n+                                entry.setUpcallResult(res);\n+                            } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n+                                log.debug(\"Sync[{}] Upcall Result {}\",\n+                                        this, entry.getGlobalAddress());\n+                                upcallResults.put(entry.getGlobalAddress(), res == null\n+                                        ? NullValue.NULL_VALUE : res);\n+                                pendingUpcalls.remove(entry.getGlobalAddress());\n+                            }\n                             entry.setUpcallResult(res);\n-                        } else if (pendingUpcalls.contains(entry.getGlobalAddress())) {\n-                            log.debug(\"Sync[{}] Upcall Result {}\",\n-                                    this, entry.getGlobalAddress());\n-                            upcallResults.put(entry.getGlobalAddress(), res == null\n-                                    ? NullValue.NULL_VALUE : res);\n-                            pendingUpcalls.remove(entry.getGlobalAddress());\n+                        } catch (Exception e) {\n+                            log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n+                            throw new UnrecoverableCorfuError(e);\n                         }\n-                        entry.setUpcallResult(res);\n-                    } catch (Exception e) {\n-                        log.error(\"Sync[{}] Error: Couldn't execute upcall due to {}\", this, e);\n-                        throw new UnrecoverableCorfuError(e);\n-                    }\n-                });\n+                    });\n+        }\n+        histogram.update(counter.longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Njc0NTI0", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-464674524", "createdAt": "2020-08-11T00:36:08Z", "commit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozNjowOFrOG-kVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDozNjowOFrOG-kVwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MDI4OA==", "bodyText": "Shouldn't this include the VLO sync latency? Why is it necessary to have another latency histogram inside the VLO ?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468260288", "createdAt": "2020-08-11T00:36:08Z", "author": {"login": "Maithem"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/CorfuCompileProxy.java", "diffHunk": "@@ -164,7 +166,9 @@ public CorfuCompileProxy(CorfuRuntime rt, UUID streamID, Class<T> type, Object[]\n     public <R> R access(ICorfuSMRAccess<R, T> accessMethod,\n                         Object[] conflictObject) {\n         try (Timer.Context context = MetricsUtils.getConditionalContext(timerAccess)) {\n-            return accessInner(accessMethod, conflictObject);\n+            try (Timer.Context streamContext = MetricsUtils.getConditionalContext(timerAccessPerStream)) {\n+                return accessInner(accessMethod, conflictObject);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09758920eda129b1766e81c288d6d87cd5769a41"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13dddb698ed81dbbdd686580f2c7d9d6bcffc583", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/13dddb698ed81dbbdd686580f2c7d9d6bcffc583", "committedDate": "2020-08-11T02:02:04Z", "message": "Address comments"}, "afterCommit": {"oid": "f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "committedDate": "2020-08-11T02:12:16Z", "message": "Address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f1be6e38bd1afe9a1a4c5be20e16df3a083754f1", "committedDate": "2020-08-11T02:12:16Z", "message": "Address comments"}, "afterCommit": {"oid": "97a90bb68493580bb8dcbdbd50ab6962e867ed5c", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/97a90bb68493580bb8dcbdbd50ab6962e867ed5c", "committedDate": "2020-08-11T02:21:50Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDQ5Mzg2", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-465449386", "createdAt": "2020-08-11T21:42:27Z", "commit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0MjoyN1rOG_KQCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0MjoyN1rOG_KQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MTQxOA==", "bodyText": "why we need an array here?\nIt seems that we need AtomicLong, or (I prefer) just use a plain old 'for' cycle with a long variable", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468881418", "createdAt": "2020-08-11T21:42:27Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +678,34 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDUxOTAw", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-465451900", "createdAt": "2020-08-11T21:47:18Z", "commit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0NzoxOFrOG_KYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo0NzoxOFrOG_KYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4MzUzMA==", "bodyText": "BTW, can't we just use this:\nval stream = stream.streamUpTo(syncTo);\nval counter = stream.size();\n...\n\n?\nUPD: Oh I see, it is a stream, you can't do that", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r468883530", "createdAt": "2020-08-11T21:47:18Z", "author": {"login": "xnull"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -672,25 +678,34 @@ protected void syncStreamUnsafe(ISMRStream stream, long timestamp) {\n         log.trace(\"Sync[{}] {}\", this, (timestamp == Address.OPTIMISTIC)\n                 ? \"Optimistic\" : \"to \" + timestamp);\n         long syncTo = (timestamp == Address.OPTIMISTIC) ? Address.MAX : timestamp;\n-        stream.streamUpTo(syncTo)\n-                .forEachOrdered(entry -> {\n-                    try {\n-                        Object res = applyUpdateUnsafe(entry, timestamp);\n-                        if (timestamp == Address.OPTIMISTIC) {\n+\n+        Histogram histogram = VloMetricsHelper.metrics.histogram(syncStreamCount);\n+        final long[] counter = new long[1];\n+        try (Timer.Context context = getVloStreamSyncContext(timestamp, syncStreamTimer)) {\n+            stream.streamUpTo(syncTo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDU4MTA3", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-465458107", "createdAt": "2020-08-11T21:59:25Z", "commit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "committedDate": "2020-08-11T22:50:14Z", "message": "Measure Serialize/Deserialize/VLO_SYNC latency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f444e14123b55f82127a301c27fdd45cfad8fbcd", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/f444e14123b55f82127a301c27fdd45cfad8fbcd", "committedDate": "2020-08-11T05:50:59Z", "message": "Merge branch 'master' into gm_queue_metrics"}, "afterCommit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/7d7c26a6e015ac4108633fc9b46aeda7af0906b6", "committedDate": "2020-08-11T22:50:14Z", "message": "Measure Serialize/Deserialize/VLO_SYNC latency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTE2MDQz", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-465516043", "createdAt": "2020-08-12T00:32:54Z", "commit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjgyMjcx", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-466282271", "createdAt": "2020-08-12T21:14:18Z", "commit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxNDoxOFrOG_zG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxODoxOVrOG_zOKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MDgwNA==", "bodyText": "do you need to catch the exception and log it?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r469550804", "createdAt": "2020-08-12T21:14:18Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/MultiObjectSMREntry.java", "diffHunk": "@@ -87,34 +95,53 @@ public void mergeInto(MultiObjectSMREntry other) {\n      */\n     @Override\n     public void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n-        super.deserializeBuffer(b, rt);\n-        int numStreams = b.readInt();\n-        for (int i = 0; i < numStreams; i++) {\n-            UUID streamId = new UUID(b.readLong(), b.readLong());\n-\n-            // The MultiObjectSMREntry payload is structure as follows:\n-            // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n-            // Therefore we need to unpack the MultiSMREntry entries one-by-one\n-            int start = b.readerIndex();\n-            MultiSMREntry.seekToEnd(b);\n-            int multiSMRLen = b.readerIndex() - start;\n-            b.readerIndex(start);\n-            byte[] streamUpdates = new byte[multiSMRLen];\n-            b.readBytes(streamUpdates);\n-            streamBuffers.put(streamId, streamUpdates);\n+        Timer deserializeTimer = metricRegistry.timer(METRIC_PREFIX + \"deserialize\");\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(deserializeTimer)) {\n+            super.deserializeBuffer(b, rt);\n+            int numStreams = b.readInt();\n+            for (int i = 0; i < numStreams; i++) {\n+                UUID streamId = new UUID(b.readLong(), b.readLong());\n+\n+                Timer streamDeserializeTimer = metricRegistry.timer(\n+                        METRIC_PREFIX + \"deserialize-\" + streamId);\n+                // The MultiObjectSMREntry payload is structure as follows:\n+                // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n+                // Therefore we need to unpack the MultiSMREntry entries one-by-one\n+                try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamDeserializeTimer)) {\n+                    int start = b.readerIndex();\n+                    MultiSMREntry.seekToEnd(b);\n+                    int multiSMRLen = b.readerIndex() - start;\n+                    b.readerIndex(start);\n+                    byte[] streamUpdates = new byte[multiSMRLen];\n+                    b.readBytes(streamUpdates);\n+                    streamBuffers.put(streamId, streamUpdates);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MjY4MQ==", "bodyText": "catch required?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r469552681", "createdAt": "2020-08-12T21:18:19Z", "author": {"login": "pankti-m"}, "path": "runtime/src/main/java/org/corfudb/protocols/logprotocol/MultiObjectSMREntry.java", "diffHunk": "@@ -87,34 +95,53 @@ public void mergeInto(MultiObjectSMREntry other) {\n      */\n     @Override\n     public void deserializeBuffer(ByteBuf b, CorfuRuntime rt) {\n-        super.deserializeBuffer(b, rt);\n-        int numStreams = b.readInt();\n-        for (int i = 0; i < numStreams; i++) {\n-            UUID streamId = new UUID(b.readLong(), b.readLong());\n-\n-            // The MultiObjectSMREntry payload is structure as follows:\n-            // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n-            // Therefore we need to unpack the MultiSMREntry entries one-by-one\n-            int start = b.readerIndex();\n-            MultiSMREntry.seekToEnd(b);\n-            int multiSMRLen = b.readerIndex() - start;\n-            b.readerIndex(start);\n-            byte[] streamUpdates = new byte[multiSMRLen];\n-            b.readBytes(streamUpdates);\n-            streamBuffers.put(streamId, streamUpdates);\n+        Timer deserializeTimer = metricRegistry.timer(METRIC_PREFIX + \"deserialize\");\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(deserializeTimer)) {\n+            super.deserializeBuffer(b, rt);\n+            int numStreams = b.readInt();\n+            for (int i = 0; i < numStreams; i++) {\n+                UUID streamId = new UUID(b.readLong(), b.readLong());\n+\n+                Timer streamDeserializeTimer = metricRegistry.timer(\n+                        METRIC_PREFIX + \"deserialize-\" + streamId);\n+                // The MultiObjectSMREntry payload is structure as follows:\n+                // LogEntry Type | number of MultiSMREntry entries | MultiSMREntry id | serialized MultiSMREntry | ...\n+                // Therefore we need to unpack the MultiSMREntry entries one-by-one\n+                try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamDeserializeTimer)) {\n+                    int start = b.readerIndex();\n+                    MultiSMREntry.seekToEnd(b);\n+                    int multiSMRLen = b.readerIndex() - start;\n+                    b.readerIndex(start);\n+                    byte[] streamUpdates = new byte[multiSMRLen];\n+                    b.readBytes(streamUpdates);\n+                    streamBuffers.put(streamId, streamUpdates);\n+                }\n+            }\n         }\n     }\n \n     @Override\n     public void serialize(ByteBuf b) {\n-        super.serialize(b);\n-        b.writeInt(streamUpdates.size());\n-        streamUpdates.entrySet().stream()\n-                .forEach(x -> {\n-                    b.writeLong(x.getKey().getMostSignificantBits());\n-                    b.writeLong(x.getKey().getLeastSignificantBits());\n-                    Serializers.CORFU.serialize(x.getValue(), b);\n-                });\n+        Timer serializeTimer = metricRegistry.timer(METRIC_PREFIX + \"serialize\");\n+        Histogram sizeHistogram = metricRegistry.histogram(METRIC_PREFIX + \"serialize-size\");\n+        int startIdx = b.writerIndex();\n+        try (Timer.Context context = MetricsUtils.getConditionalContext(serializeTimer)) {\n+            super.serialize(b);\n+            b.writeInt(streamUpdates.size());\n+            streamUpdates.entrySet().stream()\n+                    .forEach(x -> {\n+                        Timer streamSerializeTimer = metricRegistry.timer(METRIC_PREFIX + \"serialize-\" + x.getKey());\n+                        Histogram streamSizeHistogram = metricRegistry.histogram(METRIC_PREFIX + \"serialize-size-\" + x.getKey());\n+                        int streamStart = b.writerIndex();\n+                        try (Timer.Context streamContext = MetricsUtils.getConditionalContext(streamSerializeTimer)) {\n+                            b.writeLong(x.getKey().getMostSignificantBits());\n+                            b.writeLong(x.getKey().getLeastSignificantBits());\n+                            Serializers.CORFU.serialize(x.getValue(), b);\n+                        }\n+                        streamSizeHistogram.update(b.writerIndex() - streamStart);\n+                    });\n+        }\n+        sizeHistogram.update(b.writerIndex() - startIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d7c26a6e015ac4108633fc9b46aeda7af0906b6"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "127de4f497aee9f61f01766b7f6a971b9b2ff311", "author": {"user": {"login": "zhangn49", "name": "Nan Zhang"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/127de4f497aee9f61f01766b7f6a971b9b2ff311", "committedDate": "2020-08-13T18:24:51Z", "message": "Merge branch 'master' into gm_queue_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596557b48fc3fbdca1574233685c787e2dc2dde7", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/596557b48fc3fbdca1574233685c787e2dc2dde7", "committedDate": "2020-08-13T19:29:47Z", "message": "Merge branch 'master' into gm_queue_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1171f04920508d520be3b69fb46adc10cc1295cb", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/1171f04920508d520be3b69fb46adc10cc1295cb", "committedDate": "2020-08-14T07:29:07Z", "message": "Merge branch 'master' into gm_queue_metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0729c317ebc1385e16a8f04ce2806a27393bef97", "author": {"user": {"login": "Maithem", "name": "Maithem"}}, "url": "https://github.com/CorfuDB/CorfuDB/commit/0729c317ebc1385e16a8f04ce2806a27393bef97", "committedDate": "2020-08-14T21:40:28Z", "message": "Merge branch 'master' into gm_queue_metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODkyNDAy", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#pullrequestreview-467892402", "createdAt": "2020-08-14T21:48:00Z", "commit": {"oid": "0729c317ebc1385e16a8f04ce2806a27393bef97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo0ODowMFrOHBEMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo0ODowMFrOHBEMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3OTM1OQ==", "bodyText": "Codacy found an issue: Use explicit scoping instead of the default package private level", "url": "https://github.com/CorfuDB/CorfuDB/pull/2696#discussion_r470879359", "createdAt": "2020-08-14T21:48:00Z", "author": {"login": "corfudb-bot"}, "path": "runtime/src/main/java/org/corfudb/runtime/object/VersionLockedObject.java", "diffHunk": "@@ -724,6 +739,15 @@ public ISMRStream getSmrStream() {\n         return smrStream;\n     }\n \n+    private static Timer.Context getVloStreamSyncContext(long timestamp, String syncStreamTimer) {\n+        Timer timer = VloMetricsHelper.metrics.timer(syncStreamTimer);\n+        return timestamp == Address.OPTIMISTIC ? null : MetricsUtils.getConditionalContext(timer);\n+    }\n+\n+    private static class Counter {\n+        long count;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0729c317ebc1385e16a8f04ce2806a27393bef97"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4380, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}