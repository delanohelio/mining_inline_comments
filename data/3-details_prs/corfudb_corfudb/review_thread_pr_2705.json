{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTE4MTM3", "number": 2705, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTowNzo1NVrOEXwl1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowNzoyMlrOEXzLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQ4ODIwOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTowNzo1NVrOG_uw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOToyNjoxNFrOG_vViQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3OTY2Ng==", "bodyText": "Shouldn't there be a sleep here?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469479666", "createdAt": "2020-08-12T19:07:55Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -153,13 +153,18 @@ public void testSingleLockClientMultipleLocks() throws Exception {\n             // Since this is the only client, ALL locks should've been acquired, verify, block until condition is met\n             waitCondition = WaitConditionType.LOCK_ACQUIRED;\n             for (int i=0; i<numLocks; i++) {\n-                log.debug(\"***** Wait until lock \" + i + \" is acquired\");\n+                log.debug(\"***** Wait until lock {} is acquired\", i);\n                 blockUntilWaitCondition.acquire();\n             }\n \n             assertThat(lockAcquiredObservables.get(clientId).getValue()).isEqualTo(numLocks);\n-            lockIds.forEach(lockId ->\n-                assertThat(client.getLocks().get(lockId).getState().getType()).isEqualTo(LockStateType.HAS_LEASE));\n+            lockIds.forEach(lockId -> {\n+                    while(client.getLocks().get(lockId).getState().getType() != LockStateType.HAS_LEASE) {\n+                        // Lock state might take longer to update as the listener is updated before the FSM transitions\n+                        // to the new state\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3OTk4MA==", "bodyText": "And a max timeout wait before the test fails so that it doesn't keep on spinning indefinitely.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469479980", "createdAt": "2020-08-12T19:08:35Z", "author": {"login": "Maithem"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -153,13 +153,18 @@ public void testSingleLockClientMultipleLocks() throws Exception {\n             // Since this is the only client, ALL locks should've been acquired, verify, block until condition is met\n             waitCondition = WaitConditionType.LOCK_ACQUIRED;\n             for (int i=0; i<numLocks; i++) {\n-                log.debug(\"***** Wait until lock \" + i + \" is acquired\");\n+                log.debug(\"***** Wait until lock {} is acquired\", i);\n                 blockUntilWaitCondition.acquire();\n             }\n \n             assertThat(lockAcquiredObservables.get(clientId).getValue()).isEqualTo(numLocks);\n-            lockIds.forEach(lockId ->\n-                assertThat(client.getLocks().get(lockId).getState().getType()).isEqualTo(LockStateType.HAS_LEASE));\n+            lockIds.forEach(lockId -> {\n+                    while(client.getLocks().get(lockId).getState().getType() != LockStateType.HAS_LEASE) {\n+                        // Lock state might take longer to update as the listener is updated before the FSM transitions\n+                        // to the new state\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3OTY2Ng=="}, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4OTAzMw==", "bodyText": "There could be a sleep. The thing is the transition happens in the line right after the listener is notified that the lock was acquired. So technically it shouldn't be spinning for too long. It's just the interleaving between threads...\nAlso, regarding the timeout. Isn't it covered by the max time of each test? otherwise it times out.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469489033", "createdAt": "2020-08-12T19:26:14Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -153,13 +153,18 @@ public void testSingleLockClientMultipleLocks() throws Exception {\n             // Since this is the only client, ALL locks should've been acquired, verify, block until condition is met\n             waitCondition = WaitConditionType.LOCK_ACQUIRED;\n             for (int i=0; i<numLocks; i++) {\n-                log.debug(\"***** Wait until lock \" + i + \" is acquired\");\n+                log.debug(\"***** Wait until lock {} is acquired\", i);\n                 blockUntilWaitCondition.acquire();\n             }\n \n             assertThat(lockAcquiredObservables.get(clientId).getValue()).isEqualTo(numLocks);\n-            lockIds.forEach(lockId ->\n-                assertThat(client.getLocks().get(lockId).getState().getType()).isEqualTo(LockStateType.HAS_LEASE));\n+            lockIds.forEach(lockId -> {\n+                    while(client.getLocks().get(lockId).getState().getType() != LockStateType.HAS_LEASE) {\n+                        // Lock state might take longer to update as the listener is updated before the FSM transitions\n+                        // to the new state\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3OTY2Ng=="}, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzkxMTIzOnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowNzowNVrOG_y5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMzoyNTozOVrOG_6pYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzMwNQ==", "bodyText": "can we add the comment from line 238 here as well?", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469547305", "createdAt": "2020-08-12T21:07:05Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -230,17 +235,25 @@ public void testMultipleLockClientsSameLock() throws Exception {\n             }\n \n             // Verify that only one client has acquired the lock\n-            List<LockClient> clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            // We might need to verify for several cycles as\n+            // the observable indicating the lock was acquired is\n+            // triggered before the state update\n+            List<LockClient> clientsWithLock;\n+            do {\n+                clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            } while (clientsWithLock == null || clientsWithLock.isEmpty());\n+\n             assertThat(clientsWithLock.size()).isEqualTo(1);\n             LockClient clientWithLock = clientsWithLock.get(0);\n \n-\n             // Verify for 5 cycles that the lock is renewed\n             for (int i=0; i < RENEW_CYCLES; i++) {\n                 log.debug(\"***** Wait until lock is renewed\");\n                 // Wait for the renewal cycle + 1, and verify that the lock is still acquired by the same client\n                 Sleep.sleepUninterruptibly(Duration.ofSeconds(LOCK_TIME_CONSTANT + 1));\n-                clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+                do {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3NDMzOQ==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469674339", "createdAt": "2020-08-13T03:25:39Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -230,17 +235,25 @@ public void testMultipleLockClientsSameLock() throws Exception {\n             }\n \n             // Verify that only one client has acquired the lock\n-            List<LockClient> clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            // We might need to verify for several cycles as\n+            // the observable indicating the lock was acquired is\n+            // triggered before the state update\n+            List<LockClient> clientsWithLock;\n+            do {\n+                clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            } while (clientsWithLock == null || clientsWithLock.isEmpty());\n+\n             assertThat(clientsWithLock.size()).isEqualTo(1);\n             LockClient clientWithLock = clientsWithLock.get(0);\n \n-\n             // Verify for 5 cycles that the lock is renewed\n             for (int i=0; i < RENEW_CYCLES; i++) {\n                 log.debug(\"***** Wait until lock is renewed\");\n                 // Wait for the renewal cycle + 1, and verify that the lock is still acquired by the same client\n                 Sleep.sleepUninterruptibly(Duration.ofSeconds(LOCK_TIME_CONSTANT + 1));\n-                clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+                do {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzMwNQ=="}, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzkxMjE4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowNzoyMlrOG_y5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMzoyNjozMFrOG_6qJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzQ0OQ==", "bodyText": "comment", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469547449", "createdAt": "2020-08-12T21:07:22Z", "author": {"login": "pankti-m"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -330,7 +350,10 @@ public void testMultipleLockClientsSameLockFailure() throws Exception {\n             }\n \n             // Verify that only one client has acquired the lock\n-            clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            do {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3NDUzMw==", "bodyText": "Done.", "url": "https://github.com/CorfuDB/CorfuDB/pull/2705#discussion_r469674533", "createdAt": "2020-08-13T03:26:30Z", "author": {"login": "annym"}, "path": "test/src/test/java/org/corfudb/integration/LockIT.java", "diffHunk": "@@ -330,7 +350,10 @@ public void testMultipleLockClientsSameLockFailure() throws Exception {\n             }\n \n             // Verify that only one client has acquired the lock\n-            clientsWithLock = getClientsThatAcquiredLock(lockId, clientIdToLockClient);\n+            do {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NzQ0OQ=="}, "originalCommit": {"oid": "284795a4b1864c4670a639c88fc3b6234fbabd73"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}