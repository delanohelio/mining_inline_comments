{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDIxNzkw", "number": 4095, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNzozMlrODkNkVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyODozNFrODkNy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk3NjIyOnYy", "diffSide": "RIGHT", "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNzozMlrOFwaKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NjowNFrOFwgAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDcxOA==", "bodyText": "I'd also check that the second rule here, and that they won't overlap?", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386304718", "createdAt": "2020-03-02T10:17:32Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDQ1MA==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386400450", "createdAt": "2020-03-02T13:46:04Z", "author": {"login": "taba90"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDcxOA=="}, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk3NjU3OnYy", "diffSide": "RIGHT", "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNzozOVrOFwaLAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTo1OVrOFwgAlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDc3MA==", "bodyText": "Same as above.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386304770", "createdAt": "2020-03-02T10:17:39Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDQwNg==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386400406", "createdAt": "2020-03-02T13:45:59Z", "author": {"login": "taba90"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDc3MA=="}, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAwNzYwOnYy", "diffSide": "RIGHT", "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyNjo0MVrOFwadag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTo1M1rOFwgAaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwOTQ4Mg==", "bodyText": "Name suggests a general non overlap test, but in fact it's pretty specific and does not test what happens in the first rule filter.\nSuggestion for a different approach:\nSimpleFeatureType ft = (SimpleFeatureType)= getCatalog().getFeatureTypeByName(\"ClassificationPoints2\").getFeatureType();\nSimpleFeature feature = DataUtilities.create(ft, \"=1|2.0|POINT(4 2.5)\");\nassertTrue(first.getFilter().evaluate(feature));\nassertFalse(second.getFilter().evaluate(feature));", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386309482", "createdAt": "2020-03-02T10:26:41Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesClosed() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesOpen() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=3&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 3);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=3&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    private void checkNotOverlappingRules(Rule first, Rule second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDM2MA==", "bodyText": "Thanks for the suggestion, applied.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386400360", "createdAt": "2020-03-02T13:45:53Z", "author": {"login": "taba90"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesClosed() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesOpen() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=3&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 3);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=3&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    private void checkNotOverlappingRules(Rule first, Rule second) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwOTQ4Mg=="}, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAxMzU2OnYy", "diffSide": "RIGHT", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyODozNFrOFwahBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTozNFrOFwf_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDQwNw==", "bodyText": "Isn't this redundant? If the prev min is the same as the current min, the previous filter must include the value... or not? Asking cause I'm not sure, but if it does, you could reduce the list of arguments of this method.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386310407", "createdAt": "2020-03-02T10:28:34Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -470,4 +476,29 @@ private Expression normalizeProperty(\n     private boolean isDuplicatedClass(List<Rule> rules, Filter f) {\n         return rules.stream().anyMatch(r -> r.getFilter().equals(f));\n     }\n+\n+    /**\n+     * Compares current min and previous min avoiding the production of overlapping Rules\n+     *\n+     * @param currentIdx\n+     * @param groups\n+     * @param att\n+     * @return\n+     */\n+    private Filter getNotOverlappingFilter(\n+            int currentIdx, RangedClassifier groups, Expression att, List<Rule> list) {\n+        Filter f;\n+        if (currentIdx > 0) {\n+            Rule prevRule = list.get(list.size() - 1);\n+            Object currMin = groups.getMin(currentIdx);\n+            Object prevMin = groups.getMin(currentIdx - 1);\n+            if (!prevMin.equals(currMin) || !(prevRule.getFilter() instanceof PropertyIsEqualTo))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDE4OA==", "bodyText": "Indeed it is, removed the check as well as the param.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386400188", "createdAt": "2020-03-02T13:45:34Z", "author": {"login": "taba90"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -470,4 +476,29 @@ private Expression normalizeProperty(\n     private boolean isDuplicatedClass(List<Rule> rules, Filter f) {\n         return rules.stream().anyMatch(r -> r.getFilter().equals(f));\n     }\n+\n+    /**\n+     * Compares current min and previous min avoiding the production of overlapping Rules\n+     *\n+     * @param currentIdx\n+     * @param groups\n+     * @param att\n+     * @return\n+     */\n+    private Filter getNotOverlappingFilter(\n+            int currentIdx, RangedClassifier groups, Expression att, List<Rule> list) {\n+        Filter f;\n+        if (currentIdx > 0) {\n+            Rule prevRule = list.get(list.size() - 1);\n+            Object currMin = groups.getMin(currentIdx);\n+            Object prevMin = groups.getMin(currentIdx - 1);\n+            if (!prevMin.equals(currMin) || !(prevRule.getFilter() instanceof PropertyIsEqualTo))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDQwNw=="}, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4000, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}