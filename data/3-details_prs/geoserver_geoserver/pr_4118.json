{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTUzNTM4", "number": 4118, "title": "[GEOS-9534] Add percentages to sldService classify output", "bodyText": "Checklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Committs changing the REST API, or any configuration object, should check it the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-03-09T12:27:41Z", "url": "https://github.com/geoserver/geoserver/pull/4118", "merged": true, "mergeCommit": {"oid": "3056c29766616cace79ef97a8456c7f3f8031d85"}, "closed": true, "closedAt": "2020-03-30T12:14:26Z", "author": {"login": "taba90"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMkdNyAFqTM3MTg2Mzc2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRjy6egBqjMxNzAzMDU3OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODYzNzYw", "url": "https://github.com/geoserver/geoserver/pull/4118#pullrequestreview-371863760", "createdAt": "2020-03-10T11:15:49Z", "commit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxNTo0OVrOF0KnsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxOToxN1rOF0wzmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NDI3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 - allows to obtain percentages of values in each class. For raster layers the percentages will be outputted in the label of the ColorMapEntry, \n          \n          \n            \n                 - allows to obtain percentages of values in each class. For raster layers the percentages will be included in the label of the ColorMapEntry,", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390244272", "createdAt": "2020-03-10T11:15:49Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/extensions/sldservice/index.rst", "diffHunk": "@@ -218,6 +218,11 @@ The parameters usable to customize the ColorMap are:\n      - used only for raster layers, if set to true will generate a raster pallette that interpolates linearly between classified values \n      - true|false\n      -\n+   * - percentages\n+     - allows to obtain percentages of values in each class. For raster layers the percentages will be outputted in the label of the ColorMapEntry, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NDgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   while for vector layer they will  be placed in the rule title; In both case the case they will be placed at then end of the text between parenthesis.\n          \n          \n            \n                   while for vector layer they will  be placed in the rule title; in both case the case they will be placed at then end of the text between parenthesis.\n          \n      \n    \n    \n  \n\nNo capital after semicolon, also see https://www.grammarly.com/blog/semicolon/", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390244820", "createdAt": "2020-03-10T11:17:06Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/extensions/sldservice/index.rst", "diffHunk": "@@ -218,6 +218,11 @@ The parameters usable to customize the ColorMap are:\n      - used only for raster layers, if set to true will generate a raster pallette that interpolates linearly between classified values \n      - true|false\n      -\n+   * - percentages\n+     - allows to obtain percentages of values in each class. For raster layers the percentages will be outputted in the label of the ColorMapEntry, \n+       while for vector layer they will  be placed in the rule title; In both case the case they will be placed at then end of the text between parenthesis.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NDkyMg==", "bodyText": "This assumes color map entries are aligned with the bins, but see above, if a bin is empty, it's going to get skipped and the two array will lose alignment. Probably best to include the percentage calculation in the above loop instead, while building the ColorMapEntry.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390254922", "createdAt": "2020-03-10T11:39:09Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -147,6 +153,21 @@ public ColorMap uniqueIntervalClassification(RenderedImage image, Integer maxInt\n                             + maxIntervals\n                             + \" was requested\");\n         }\n+        if (outputPercentages) {\n+            double total = IntStream.of(bins).sum();\n+            ColorMapEntry[] cEntries = colorMap.getColorMapEntries();\n+            for (int i = 0; i < cEntries.length; i++) {\n+                ColorMapEntry entry = cEntries[i];\n+                double classMembers = (double) bins[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDQ1Mg==", "bodyText": "If instructed to build percentages while doing a custom color map, they should show up. It's possible to calculate them using a histogram operation.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390860452", "createdAt": "2020-03-11T10:02:29Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -370,7 +424,7 @@ public ColorMap createCustomColorMap(\n             breaks[i + 1] = Converters.convert(classifier.getMax(i), Double.class);\n         }\n \n-        return getColorMapFromBreaks(breaks, open, continuous);\n+        return getColorMapFromBreaks(breaks, open, continuous, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDg4OQ==", "bodyText": "Overly complicated:\nif (percentages == null) return \"\";\nreturn \" (\" + percentages[i] + \")\";", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390860889", "createdAt": "2020-03-11T10:03:18Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -418,4 +472,12 @@ private NumberRange getOperationRange(ImageWorker iw) {\n             }\n         }\n     }\n+\n+    private String getPercentagesLabelPortion(double[] percentages, int i) {\n+        StringBuilder sb = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTU0Mw==", "bodyText": "Problematic with that function having two optional values at the end (see the GeoTools review)", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390861543", "createdAt": "2020-03-11T10:04:32Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -86,7 +92,11 @@ public void setIncludeStrokeForPoints(boolean includeStrokeForPoints) {\n             String functionName) {\n         try {\n             final Function classify =\n-                    FF.function(functionName, FF.property(property), FF.literal(classNumber));\n+                    FF.function(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MTk0OA==", "bodyText": "Why split declaration and assignment over two lines?", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390861948", "createdAt": "2020-03-11T10:05:12Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -315,7 +325,8 @@ public StyleFactory getStyleFactory() {\n         Filter f;\n         List<Rule> list = new ArrayList();\n         Expression att = normalizeProperty(FF.property(property), propertyType, normalize);\n-\n+        PercentagesManager percMan = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2Mzk4OA==", "bodyText": "By the way, the vector code states it's a percentage, e..g adds \" (x%)\" while this one just adds \" (x)\". I think it's best to have the % sign, the number per se means nothing to the ones just looking at the map without knowing how the the SLD classification service worked, but at the very least, they should be consistent.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390863988", "createdAt": "2020-03-11T10:08:44Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -418,4 +472,12 @@ private NumberRange getOperationRange(ImageWorker iw) {\n             }\n         }\n     }\n+\n+    private String getPercentagesLabelPortion(double[] percentages, int i) {\n+        StringBuilder sb = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2MDg4OQ=="}, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NDQ4NQ==", "bodyText": "Two nested if can be expressed as one if with and-ed conditions", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390864485", "createdAt": "2020-03-11T10:09:39Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -472,8 +496,16 @@ private Expression normalizeProperty(\n         return null;\n     }\n \n-    private boolean isDuplicatedClass(List<Rule> rules, Filter f) {\n-        return rules.stream().anyMatch(r -> r.getFilter().equals(f));\n+    private boolean isDuplicatedClass(\n+            List<Rule> rules, Filter f, PercentagesManager percMan, int currentIdx) {\n+        Optional<Rule> opRule = rules.stream().filter(r -> r.getFilter().equals(f)).findFirst();\n+        boolean result = opRule.isPresent();\n+        if (percMan != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjM5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n          \n          \n            \n                    public void collapseRulePercentage(List<Rule> rules, Rule current, int index) {", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866396", "createdAt": "2020-03-11T10:13:05Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void addPercentages(int currentIndex) {\n          \n          \n            \n                    public void collectRulePercentage(int currentIndex) {\n          \n      \n    \n    \n  \n\n(adding might seem a sum)", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866497", "createdAt": "2020-03-11T10:13:16Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2Njg4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void addPercentagesToLabel(List<Rule> rules) {\n          \n          \n            \n                    public void appendPercentagesToLabels(List<Rule> rules) {", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390866886", "createdAt": "2020-03-11T10:13:56Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {\n+            if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n+        }\n+\n+        public void addPercentagesToLabel(List<Rule> rules) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzkzNg==", "bodyText": "Java builds a StringBuffer every time you concatenate strings, avoid building it explicitly unless you're working on a loop/conditional where multiple string concatenations are split among different commands.\nFor this one using:\nString title = rule.getDescription().getTitle() + \" (\" + collapsedPercentanges.get(i) + \"%)\"\nis just as efficient, but more readable.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390867936", "createdAt": "2020-03-11T10:15:47Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -499,4 +531,45 @@ private Filter getNotOverlappingFilter(\n \n         return f;\n     }\n+\n+    private class PercentagesManager {\n+\n+        private double[] percentages;\n+        List<Double> collapsedPercentages;\n+        boolean collapsePercentages;\n+\n+        public PercentagesManager(double[] percentages) {\n+            this.percentages = percentages;\n+            this.collapsePercentages =\n+                    percentages != null && !(DoubleStream.of(percentages).sum() > 100.0);\n+            this.collapsedPercentages = new ArrayList<>();\n+        }\n+\n+        public void collapsePercentages(List<Rule> rules, Rule current, int index) {\n+            if (outputPercentages && collapsePercentages) {\n+                int ruleIdx = rules.indexOf(current);\n+                double toSumTo = percentages[index];\n+                double toBeSummed = collapsedPercentages.get(ruleIdx);\n+                collapsedPercentages.set(ruleIdx, toBeSummed + toSumTo);\n+            }\n+        }\n+\n+        public void addPercentages(int currentIndex) {\n+            if (outputPercentages) collapsedPercentages.add(percentages[currentIndex]);\n+        }\n+\n+        public void addPercentagesToLabel(List<Rule> rules) {\n+            if (outputPercentages) {\n+                for (int i = 0; i < rules.size(); i++) {\n+                    Rule rule = rules.get(i);\n+                    StringBuffer sb =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODgyNA==", "bodyText": "Please split the tests in one test method per check, and validate the computed percentage values too.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390868824", "createdAt": "2020-03-11T10:17:25Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -2128,4 +2130,195 @@ private void checkNotOverlappingRules(Rule first, Rule second) throws IOExceptio\n         assertTrue(first.getFilter().evaluate(feature));\n         assertFalse(second.getFilter().evaluate(feature));\n     }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsVectors() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODk3NA==", "bodyText": "Same as above.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390868974", "createdAt": "2020-03-11T10:17:43Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -2128,4 +2130,195 @@ private void checkNotOverlappingRules(Rule first, Rule second) throws IOExceptio\n         assertTrue(first.getFilter().evaluate(feature));\n         assertFalse(second.getFilter().evaluate(feature));\n     }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsVectors() throws Exception {\n+        String regex = \"\\\\d+(?:\\\\.\\\\d+)?%\";\n+        Pattern rgx = Pattern.compile(regex);\n+        final String restPathQuantile =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile\"\n+                        + \"&intervals=3&open=true&percentages=true\";\n+        Document domQuantile = getAsDOM(restPathQuantile, 200);\n+        print(domQuantile);\n+        ByteArrayOutputStream baosQuantile = new ByteArrayOutputStream();\n+        print(domQuantile, baosQuantile);\n+        String resultXml = baosQuantile.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesQuantile =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesQuantile.length == 3);\n+        for (Rule r : rulesQuantile) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+\n+        final String restPathArea =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=equalArea\"\n+                        + \"&intervals=2&percentages=true\";\n+        Document domArea = getAsDOM(restPathArea, 200);\n+        print(domArea);\n+        ByteArrayOutputStream baosArea = new ByteArrayOutputStream();\n+        print(domArea, baosArea);\n+        String resultArea = baosArea.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesArea =\n+                checkSLD(resultArea.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesArea.length == 2);\n+        for (Rule r : rulesArea) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=3&open=true\"\n+                        + \"&percentages=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 3);\n+        for (Rule r : rulesJenks) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+        final String restPathUnique =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=uniqueInterval&intervals=8&\"\n+                        + \"percentages=true\";\n+        Document domUnique = getAsDOM(restPathUnique, 200);\n+        print(domUnique);\n+        ByteArrayOutputStream baosUnique = new ByteArrayOutputStream();\n+        print(domUnique, baosUnique);\n+        String resultXmlUnique = baosUnique.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesUnique =\n+                checkSLD(\n+                        resultXmlUnique\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesUnique.length == 8);\n+        for (Rule r : rulesUnique) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+\n+        final String restPathEqual =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPolygons/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar\"\n+                        + \"&intervals=3&open=false&percentages=true\";\n+        Document domEqual = getAsDOM(restPathEqual);\n+        print(domEqual);\n+        ByteArrayOutputStream baosEqual = new ByteArrayOutputStream();\n+        print(domEqual, baosEqual);\n+        String resultXmlEqual = baosEqual.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesEqual =\n+                checkSLD(\n+                        resultXmlEqual\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesEqual.length == 3);\n+        for (Rule r : rulesEqual) {\n+            Matcher rgxMatcher = rgx.matcher(r.getDescription().getTitle());\n+            assertTrue(rgxMatcher.find());\n+        }\n+    }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsRaster() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2OTkxNA==", "bodyText": "Please add a test for user provided classes as well, both raster and vector cases.\nAlso, these are all \"happy paths\", can you consider tests where things go wrong (e.g., rules that need to be merged, think of more) and add those as well?", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r390869914", "createdAt": "2020-03-11T10:19:17Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -2128,4 +2130,195 @@ private void checkNotOverlappingRules(Rule first, Rule second) throws IOExceptio\n         assertTrue(first.getFilter().evaluate(feature));\n         assertFalse(second.getFilter().evaluate(feature));\n     }\n+\n+    @Test\n+    public void testPercentagesInRulesLabelsVectors() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2ODgyNA=="}, "originalCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9e62972e09edbd4a1e8c9c1876b73d11c76a9ab8", "committedDate": "2020-03-09T12:26:30Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "f403dce65882c7ae745902903c87a22eebd73833", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/f403dce65882c7ae745902903c87a22eebd73833", "committedDate": "2020-03-13T15:36:23Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f403dce65882c7ae745902903c87a22eebd73833", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/f403dce65882c7ae745902903c87a22eebd73833", "committedDate": "2020-03-13T15:36:23Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "committedDate": "2020-03-13T15:58:34Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/f1c7a0c47acce59bd4aaa4f55d3616c7467000fd", "committedDate": "2020-03-13T15:58:34Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/130b86a23bf183c44e92f05788e204269b4cb2b5", "committedDate": "2020-03-13T16:01:33Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTM3MzUx", "url": "https://github.com/geoserver/geoserver/pull/4118#pullrequestreview-375137351", "createdAt": "2020-03-16T11:51:56Z", "commit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MTo1NlrOF2whmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjowMzoyN1rOF2w3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjQ1Nw==", "bodyText": "What is the default value?", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392962457", "createdAt": "2020-03-16T11:51:56Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/extensions/sldservice/index.rst", "diffHunk": "@@ -218,6 +218,14 @@ The parameters usable to customize the ColorMap are:\n      - used only for raster layers, if set to true will generate a raster pallette that interpolates linearly between classified values \n      - true|false\n      -\n+   * - percentages\n+     - allows to obtain percentages of values in each class. For raster layers the percentages will be included in the label of the ColorMapEntry, \n+       while for vector layer they will  be placed in the rule title; in both the cases they will be placed at then end of the text between parenthesis.\n+     - true|false\n+     - \n+   * - percentagesScale\n+     - number of digits of percentages.\n+     -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MzM2OQ==", "bodyText": "Does not need to be public, right?", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392963369", "createdAt": "2020-03-16T11:53:44Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mzg5Nw==", "bodyText": "Please avoid the internal code duplication, make it so that either one of the \"roundPercetanges\" method calls the other by converting the data structure", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392963897", "createdAt": "2020-03-16T11:54:55Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {\n+\n+    private int scale;\n+\n+    public PercentagesRoundHandler(Integer scale) {\n+        this.scale = scale != null ? scale : 1;\n+    }\n+\n+    public PercentagesRoundHandler() {\n+        this.scale = 1;\n+    }\n+\n+    public List<Double> roundPercentages(List<Double> percentages) {\n+        if (percentages == null || percentages.size() == 0) return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2NTcyOQ==", "bodyText": "This accumulates the delta all on the last class, which could even make it reach a negative number in some unlucky cases (e.g., 10 classes, all happening to have a 0.6 decimal, accumulating a 3.6 error... what if the last class is lower than that?). The delta should be calculated step by step and accumulated onto the next value before rounding it.\nSee also: https://stackoverflow.com/questions/13483430/how-to-make-rounded-percentages-add-up-to-100", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392965729", "createdAt": "2020-03-16T11:58:41Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/PercentagesRoundHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/* (c) 2019 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.sldservice.utils.classifier;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+import java.util.stream.DoubleStream;\n+\n+public class PercentagesRoundHandler {\n+\n+    private int scale;\n+\n+    public PercentagesRoundHandler(Integer scale) {\n+        this.scale = scale != null ? scale : 1;\n+    }\n+\n+    public PercentagesRoundHandler() {\n+        this.scale = 1;\n+    }\n+\n+    public List<Double> roundPercentages(List<Double> percentages) {\n+        if (percentages == null || percentages.size() == 0) return null;\n+        int size = percentages.size();\n+        for (int i = 0; i < size; i++) {\n+            double percentage = percentages.get(i);\n+            double rounded = roundDouble(percentage);\n+            percentages.set(i, rounded);\n+        }\n+        double delta = 100.0 - percentages.stream().mapToDouble(d -> d).sum();\n+        if (delta > 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2ODA0NQ==", "bodyText": "This seems to assume an equal interval approach, but with the custom classification the client is passing in the break values instead, they can be distributed in whatever way. User provided breaks should be used, please add a test with custom values and a non uniformly distributed set of breaks.", "url": "https://github.com/geoserver/geoserver/pull/4118#discussion_r392968045", "createdAt": "2020-03-16T12:03:27Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RasterSymbolizerBuilder.java", "diffHunk": "@@ -418,4 +475,30 @@ private NumberRange getOperationRange(ImageWorker iw) {\n             }\n         }\n     }\n+\n+    private String getPercentagesLabelPortion(double[] percentages, int i) {\n+        if (percentages == null) return \"\";\n+        else return \" (\" + percentages[i] + \"%)\";\n+    }\n+\n+    private double[] getPercentagesForCustom(RenderedImage image, int intervals) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5"}, "originalPosition": 254}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "130b86a23bf183c44e92f05788e204269b4cb2b5", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/130b86a23bf183c44e92f05788e204269b4cb2b5", "committedDate": "2020-03-13T16:01:33Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/8f0ba4eea95c35ee41cec179a23265a49b23d19c", "committedDate": "2020-03-19T10:48:58Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f0ba4eea95c35ee41cec179a23265a49b23d19c", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/8f0ba4eea95c35ee41cec179a23265a49b23d19c", "committedDate": "2020-03-19T10:48:58Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "a570bf211033d429403f10a487e81f8d9a77d808", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/a570bf211033d429403f10a487e81f8d9a77d808", "committedDate": "2020-03-19T10:53:27Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a570bf211033d429403f10a487e81f8d9a77d808", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/a570bf211033d429403f10a487e81f8d9a77d808", "committedDate": "2020-03-19T10:53:27Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "85999cb005e8b2346e1691725dd92ac1d0e6861e", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/85999cb005e8b2346e1691725dd92ac1d0e6861e", "committedDate": "2020-03-19T13:14:50Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85999cb005e8b2346e1691725dd92ac1d0e6861e", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/85999cb005e8b2346e1691725dd92ac1d0e6861e", "committedDate": "2020-03-19T13:14:50Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}, "afterCommit": {"oid": "d232ee098edb4494731b95164f350786622cd42b", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/d232ee098edb4494731b95164f350786622cd42b", "committedDate": "2020-03-19T13:22:56Z", "message": "reviewer's feedback applied"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372f332f46d9c512f371fa5809f62d8d18e2d0fb", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/372f332f46d9c512f371fa5809f62d8d18e2d0fb", "committedDate": "2020-03-25T15:55:39Z", "message": "[GEOS-9534] Add percentages to sldService classify output"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d232ee098edb4494731b95164f350786622cd42b", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/d232ee098edb4494731b95164f350786622cd42b", "committedDate": "2020-03-19T13:22:56Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "85d212dd6896488a47cbfebe28b78592e97c7692", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/85d212dd6896488a47cbfebe28b78592e97c7692", "committedDate": "2020-03-26T08:49:34Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85d212dd6896488a47cbfebe28b78592e97c7692", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/85d212dd6896488a47cbfebe28b78592e97c7692", "committedDate": "2020-03-26T08:49:34Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "committedDate": "2020-03-26T16:08:54Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/1d3d6a8b2cd6c87bc2b27cc36f7dca591f340348", "committedDate": "2020-03-26T16:08:54Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "committedDate": "2020-03-26T17:13:20Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/bcb0fd0fec8711c452571bc5f8cb6fe5f3354a18", "committedDate": "2020-03-26T17:13:20Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "444cd1879aa4f79b45f45cd75c5e82839605dc57", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/444cd1879aa4f79b45f45cd75c5e82839605dc57", "committedDate": "2020-03-26T17:21:09Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "444cd1879aa4f79b45f45cd75c5e82839605dc57", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/444cd1879aa4f79b45f45cd75c5e82839605dc57", "committedDate": "2020-03-26T17:21:09Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "committedDate": "2020-03-26T17:46:26Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/e0cf0c3451f4963a94fc4d7e2eadc885a49a3144", "committedDate": "2020-03-26T17:46:26Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "committedDate": "2020-03-26T18:44:04Z", "message": "reviewer's feedback applied"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c806bfe27cedce80b3e42095a114cfb3d8484c08", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/c806bfe27cedce80b3e42095a114cfb3d8484c08", "committedDate": "2020-03-26T22:24:43Z", "message": "reviewer's feedback applied"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9f94db8ecc9e3d702274352a4ff4d66b4b98e95d", "committedDate": "2020-03-26T18:44:04Z", "message": "reviewer's feedback applied"}, "afterCommit": {"oid": "c806bfe27cedce80b3e42095a114cfb3d8484c08", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/c806bfe27cedce80b3e42095a114cfb3d8484c08", "committedDate": "2020-03-26T22:24:43Z", "message": "reviewer's feedback applied"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1461, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}