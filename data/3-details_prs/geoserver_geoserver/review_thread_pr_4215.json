{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMDg2Mzcy", "number": 4215, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMjo0OVrOD3yaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMzo0NFrOD3ybIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI0MTM0OnYy", "diffSide": "RIGHT", "path": "src/platform/src/test/java/org/geoserver/platform/GeoServerResourceLoaderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMjo0OVrOGOPjmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowNzoxNVrOGXJDCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODEyMw==", "bodyText": "I always get frustrated with special characters.\n@NielsCharlier can you add a test for the unicode precomposed characters which are known to cause problems on macOS.\n\nFor example, the character \"\u00fc\" can be encoded as the single code point U+00FC \"\u00fc\" or as the base character U+0075 \"u\" followed by the non-spacing character U+0308 \"\u00a8\"", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r417588123", "createdAt": "2020-04-29T20:22:49Z", "author": {"login": "jodygarnett"}, "path": "src/platform/src/test/java/org/geoserver/platform/GeoServerResourceLoaderTest.java", "diffHunk": "@@ -162,4 +166,22 @@ public void testSetBaseDirectory() throws IOException {\n         assertEquals(tempDir, loader.getBaseDirectory());\n         assertEquals(mockStore, loader.getResourceStore());\n     }\n+\n+    @Test\n+    public void fromRelativeURLTest() throws IOException {\n+        GeoServerResourceLoader loader = new GeoServerResourceLoader();\n+        tempFolder.create();\n+        File tempDir = tempFolder.getRoot();\n+        loader.setBaseDirectory(tempDir);\n+\n+        Resource res = loader.fromURL(\"file:relative/with/special+characters%23\");\n+        assertEquals(\"relative/with/special characters#\", res.path());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ2NjY2Nw==", "bodyText": "DOne.", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r418466667", "createdAt": "2020-05-01T08:50:11Z", "author": {"login": "NielsCharlier"}, "path": "src/platform/src/test/java/org/geoserver/platform/GeoServerResourceLoaderTest.java", "diffHunk": "@@ -162,4 +166,22 @@ public void testSetBaseDirectory() throws IOException {\n         assertEquals(tempDir, loader.getBaseDirectory());\n         assertEquals(mockStore, loader.getResourceStore());\n     }\n+\n+    @Test\n+    public void fromRelativeURLTest() throws IOException {\n+        GeoServerResourceLoader loader = new GeoServerResourceLoader();\n+        tempFolder.create();\n+        File tempDir = tempFolder.getRoot();\n+        loader.setBaseDirectory(tempDir);\n+\n+        Resource res = loader.fromURL(\"file:relative/with/special+characters%23\");\n+        assertEquals(\"relative/with/special characters#\", res.path());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODEyMw=="}, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODY2NQ==", "bodyText": "Thanks, now to check if the macOS build passes :)", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r426918665", "createdAt": "2020-05-18T22:07:15Z", "author": {"login": "jodygarnett"}, "path": "src/platform/src/test/java/org/geoserver/platform/GeoServerResourceLoaderTest.java", "diffHunk": "@@ -162,4 +166,22 @@ public void testSetBaseDirectory() throws IOException {\n         assertEquals(tempDir, loader.getBaseDirectory());\n         assertEquals(mockStore, loader.getResourceStore());\n     }\n+\n+    @Test\n+    public void fromRelativeURLTest() throws IOException {\n+        GeoServerResourceLoader loader = new GeoServerResourceLoader();\n+        tempFolder.create();\n+        File tempDir = tempFolder.getRoot();\n+        loader.setBaseDirectory(tempDir);\n+\n+        Resource res = loader.fromURL(\"file:relative/with/special+characters%23\");\n+        assertEquals(\"relative/with/special characters#\", res.path());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODEyMw=="}, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODI0NDE2OnYy", "diffSide": "RIGHT", "path": "src/platform/src/main/java/org/geoserver/platform/resource/Resources.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMzo0NFrOGOPlbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMToxMTozMVrOGO6frA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODU5MQ==", "bodyText": "Why is this exception being eaten? nom nom nom ...", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r417588591", "createdAt": "2020-04-29T20:23:44Z", "author": {"login": "jodygarnett"}, "path": "src/platform/src/main/java/org/geoserver/platform/resource/Resources.java", "diffHunk": "@@ -593,6 +595,12 @@ public static Resource fromURL(Resource baseDirectory, String url) {\n         if (url.startsWith(\"file:\")) {\n             url = url.substring(5); // remove 'file:' prefix\n \n+            // revert encoded special characters and spaces\n+            try {\n+                url = URLDecoder.decode(url, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTM1MA==", "bodyText": "Q: This is detecting for relative paths, but misses the absolute path thing above?\nQ: Does URLs.urlToFile need similar logic?", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r417589350", "createdAt": "2020-04-29T20:25:05Z", "author": {"login": "jodygarnett"}, "path": "src/platform/src/main/java/org/geoserver/platform/resource/Resources.java", "diffHunk": "@@ -593,6 +595,12 @@ public static Resource fromURL(Resource baseDirectory, String url) {\n         if (url.startsWith(\"file:\")) {\n             url = url.substring(5); // remove 'file:' prefix\n \n+            // revert encoded special characters and spaces\n+            try {\n+                url = URLDecoder.decode(url, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODU5MQ=="}, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MTYyOA==", "bodyText": "The exception is eaten, because it cannot occur.\nSee https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html\n\"Every implementation of the Java platform is required to support the following standard charsets. \"\nAs explained on the jira ticket, absolute paths already support special characters, and only relative ones fail. This is exactly because URLS.urlTOFile already has the logic, and it is being called for absolute paths.", "url": "https://github.com/geoserver/geoserver/pull/4215#discussion_r418291628", "createdAt": "2020-04-30T21:11:31Z", "author": {"login": "NielsCharlier"}, "path": "src/platform/src/main/java/org/geoserver/platform/resource/Resources.java", "diffHunk": "@@ -593,6 +595,12 @@ public static Resource fromURL(Resource baseDirectory, String url) {\n         if (url.startsWith(\"file:\")) {\n             url = url.substring(5); // remove 'file:' prefix\n \n+            // revert encoded special characters and spaces\n+            try {\n+                url = URLDecoder.decode(url, \"UTF-8\");\n+            } catch (UnsupportedEncodingException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODU5MQ=="}, "originalCommit": {"oid": "cc8ae457e474580ca22cfeff25c421413fb91776"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3970, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}