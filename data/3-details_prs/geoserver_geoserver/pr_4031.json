{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzg5MDY0", "number": 4031, "title": "[GEOS-9487] GSIP 187 - New extension point in ResourcePool for retyping feature types and features", "bodyText": "added interface and code pointers in gs-main\nadded unit tests\n\nGSIP : https://github.com/geoserver/geoserver/wiki/GSIP-187\nJIRA : https://osgeo-org.atlassian.net/browse/GEOS-9487\n\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira GEOS-9487\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Committs changing the REST API, or any configuration object, should check it the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-02-06T09:19:25Z", "url": "https://github.com/geoserver/geoserver/pull/4031", "merged": true, "mergeCommit": {"oid": "fec987ccf67d7f511a733a3a72c2ba909dd8a23b"}, "closed": true, "closedAt": "2020-03-03T06:30:59Z", "author": {"login": "imranrajjad"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC8okmgFqTM1NTkxMTQ1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ8Uw1gFqTM2NzcyNjU3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTExNDU0", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-355911454", "createdAt": "2020-02-10T12:52:33Z", "commit": {"oid": "21e4686cb42c1a67398fead3267e0542d00084ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo1MjozM1rOFnk7bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjo1MjozM1rOFnk7bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA0MzgyMw==", "bodyText": "This comment needs to be updated, a comments explaining a bit was going on would be welcome \ud83d\ude38.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r377043823", "createdAt": "2020-02-10T12:52:33Z", "author": {"login": "nmco"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1382,15 +1389,22 @@ else if (ppolicy == ProjectionPolicy.NONE && nativeCRS != null) {\n             }\n \n             // return a normal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21e4686cb42c1a67398fead3267e0542d00084ed"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a92ab148d11fd692088635a9ed35fd00ea8502c", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/7a92ab148d11fd692088635a9ed35fd00ea8502c", "committedDate": "2020-02-24T10:29:08Z", "message": "[GEOS-9487] GSIP 187 - New extension point in ResourcePool for retyping\nfeature types and features\n\n- added interface and code pointers in gs-main\n- added unit tests\n\nGSIP : https://github.com/geoserver/geoserver/wiki/GSIP-187"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/8b9ce7f4598d534cd8575d872f3e53986b116657", "committedDate": "2020-02-24T15:43:26Z", "message": "[GEOS-9487] added unit tests for Geoserver wrapper\n\n-unit tests : CQL and Re-projection"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21e4686cb42c1a67398fead3267e0542d00084ed", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/21e4686cb42c1a67398fead3267e0542d00084ed", "committedDate": "2020-02-06T09:18:04Z", "message": "[GEOS-9478] GSIP 187 - New extension point in ResourcePool for retyping\nfeature types and features\n\n- added interface and code pointers in gs-main\n- added unit tests\n\nGSIP : https://github.com/geoserver/geoserver/wiki/GSIP-187"}, "afterCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/8b9ce7f4598d534cd8575d872f3e53986b116657", "committedDate": "2020-02-24T15:43:26Z", "message": "[GEOS-9487] added unit tests for Geoserver wrapper\n\n-unit tests : CQL and Re-projection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU2MzEw", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363556310", "createdAt": "2020-02-24T17:11:07Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMTowOFrOFtosyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMTowOFrOFtosyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NzA2Nw==", "bodyText": "Please shorten this comment, if the class is moved or renamed this will be come just noise.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383397067", "createdAt": "2020-02-24T17:11:08Z", "author": {"login": "nmco"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1381,6 +1388,13 @@ else if (ppolicy == ProjectionPolicy.NONE && nativeCRS != null) {\n                 schema = typeBuilder.buildFeatureType();\n             }\n \n+            // applying wrappers using\n+            // implementations of org.geoserver.catalog.RetypeFeatureTypeCallback", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU4MDE3", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363558017", "createdAt": "2020-02-24T17:13:34Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMzozNFrOFtoyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxMzozNFrOFtoyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5ODQyNg==", "bodyText": "You should not assume this will always by a ``SimpleFeatureSource`, check this method returning type.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383398426", "createdAt": "2020-02-24T17:13:34Z", "author": {"login": "nmco"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1381,6 +1388,13 @@ else if (ppolicy == ProjectionPolicy.NONE && nativeCRS != null) {\n                 schema = typeBuilder.buildFeatureType();\n             }\n \n+            // applying wrappers using\n+            // implementations of org.geoserver.catalog.RetypeFeatureTypeCallback\n+            for (RetypeFeatureTypeCallback callback :\n+                    GeoServerExtensions.extensions(RetypeFeatureTypeCallback.class)) {\n+                fs = (SimpleFeatureSource) callback.wrapFeatureSource(info, fs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU5NzI4", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363559728", "createdAt": "2020-02-24T17:16:11Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjoxMVrOFto3ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjoxMVrOFto3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5OTc4Ng==", "bodyText": "Noisy JavaDoc, better no doc that noise, you can configure your IDE to not create this templates. Since there is not final dot in your sentence I'm not even sure you finished it ...", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383399786", "createdAt": "2020-02-24T17:16:11Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/MockRetypeFeatureTypeCallback.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import org.geoserver.catalog.retype.MockRetypedSource;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+\r\n+/**\r\n+ * This is a mock implementation\r\n+ *\r\n+ * @author ImranR\r\n+ */\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTU5ODcz", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363559873", "createdAt": "2020-02-24T17:16:25Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjoyNVrOFto34w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjoyNVrOFto34w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5OTkwNw==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383399907", "createdAt": "2020-02-24T17:16:25Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/MockRetypeFeatureTypeCallback.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import org.geoserver.catalog.retype.MockRetypedSource;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+\r\n+/**\r\n+ * This is a mock implementation\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class MockRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r\n+\r\n+    public static final String RETYPED = \"RETYPED\";\r\n+    public static final String RETYPED_GEOM_COLUMN = \"GENERATED_POINT\";\r\n+\r\n+    public static final String LONG_FIELD = \"lon\";\r\n+    public static final String LAT_FIELD = \"lat\";\r\n+    public static final int EPSG_CODE = 4326;\r\n+\r\n+    @Override\r\n+    public FeatureType retypeFeatureType(FeatureTypeInfo featureTypeInfo, FeatureType src) {\r\n+        // only work for the test file : test/resources/org/geoserver/catalog/longlat.properties\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYwMjAy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363560202", "createdAt": "2020-02-24T17:16:56Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjo1NlrOFto5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNjo1NlrOFto5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMDE5Ng==", "bodyText": "I don't think you want to swallow this exception, if that's the case please log it.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383400196", "createdAt": "2020-02-24T17:16:56Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/MockRetypeFeatureTypeCallback.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import org.geoserver.catalog.retype.MockRetypedSource;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+\r\n+/**\r\n+ * This is a mock implementation\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class MockRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r\n+\r\n+    public static final String RETYPED = \"RETYPED\";\r\n+    public static final String RETYPED_GEOM_COLUMN = \"GENERATED_POINT\";\r\n+\r\n+    public static final String LONG_FIELD = \"lon\";\r\n+    public static final String LAT_FIELD = \"lat\";\r\n+    public static final int EPSG_CODE = 4326;\r\n+\r\n+    @Override\r\n+    public FeatureType retypeFeatureType(FeatureTypeInfo featureTypeInfo, FeatureType src) {\r\n+        // only work for the test file : test/resources/org/geoserver/catalog/longlat.properties\r\n+        if (!RetypeFeatureTypeCallbackTest.LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER.equalsIgnoreCase(\r\n+                featureTypeInfo.getName())) return src;\r\n+        try {\r\n+            CoordinateReferenceSystem crs = CRS.decode(\"EPSG:\" + EPSG_CODE);\r\n+            SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+            builder.setName(src.getName());\r\n+            builder.setCRS(crs);\r\n+\r\n+            builder.add(RETYPED_GEOM_COLUMN, Point.class);\r\n+            for (PropertyDescriptor ad : src.getDescriptors()) {\r\n+                builder.add((AttributeDescriptor) ad);\r\n+            }\r\n+            FeatureType newType = builder.buildFeatureType();\r\n+            newType.getUserData().put(RETYPED, true);\r\n+            return newType;\r\n+\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYwMzU2", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363560356", "createdAt": "2020-02-24T17:17:09Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNzowOVrOFto5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxNzowOVrOFto5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMDMwOQ==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383400309", "createdAt": "2020-02-24T17:17:09Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/MockRetypeFeatureTypeCallback.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import org.geoserver.catalog.retype.MockRetypedSource;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+\r\n+/**\r\n+ * This is a mock implementation\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class MockRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r\n+\r\n+    public static final String RETYPED = \"RETYPED\";\r\n+    public static final String RETYPED_GEOM_COLUMN = \"GENERATED_POINT\";\r\n+\r\n+    public static final String LONG_FIELD = \"lon\";\r\n+    public static final String LAT_FIELD = \"lat\";\r\n+    public static final int EPSG_CODE = 4326;\r\n+\r\n+    @Override\r\n+    public FeatureType retypeFeatureType(FeatureTypeInfo featureTypeInfo, FeatureType src) {\r\n+        // only work for the test file : test/resources/org/geoserver/catalog/longlat.properties\r\n+        if (!RetypeFeatureTypeCallbackTest.LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER.equalsIgnoreCase(\r\n+                featureTypeInfo.getName())) return src;\r\n+        try {\r\n+            CoordinateReferenceSystem crs = CRS.decode(\"EPSG:\" + EPSG_CODE);\r\n+            SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+            builder.setName(src.getName());\r\n+            builder.setCRS(crs);\r\n+\r\n+            builder.add(RETYPED_GEOM_COLUMN, Point.class);\r\n+            for (PropertyDescriptor ad : src.getDescriptors()) {\r\n+                builder.add((AttributeDescriptor) ad);\r\n+            }\r\n+            FeatureType newType = builder.buildFeatureType();\r\n+            newType.getUserData().put(RETYPED, true);\r\n+            return newType;\r\n+\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r\n+        }\r\n+        return src;\r\n+    }\r\n+\r\n+    @Override\r\n+    public FeatureSource wrapFeatureSource(\r\n+            FeatureTypeInfo featureTypeInfo, FeatureSource featureSource) {\r\n+        // only work for the test file : test/resources/org/geoserver/catalog/longlat.properties\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYxNzcy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363561772", "createdAt": "2020-02-24T17:19:17Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOToxOFrOFto-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOToxOFrOFto-Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMTUyMg==", "bodyText": "The JavaDoc of this class shoulder really explain what's going on: it will generate a geometry attribute on the fly? If that's the case it could also use a more focused named than MockRetypeFeatureTypeCallback.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383401522", "createdAt": "2020-02-24T17:19:18Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/MockRetypeFeatureTypeCallback.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import org.geoserver.catalog.retype.MockRetypedSource;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+\r\n+/**\r\n+ * This is a mock implementation\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class MockRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYyMTEy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363562112", "createdAt": "2020-02-24T17:19:47Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOTo0OFrOFto_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOTo0OFrOFto_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMTgwOA==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383401808", "createdAt": "2020-02-24T17:19:48Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test makes use of mock RetypeFeatureTypeCallback implementation provided in\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYyMTgz", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363562183", "createdAt": "2020-02-24T17:19:55Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOTo1NVrOFto_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoxOTo1NVrOFto_kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMTg3NQ==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383401875", "createdAt": "2020-02-24T17:19:55Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test makes use of mock RetypeFeatureTypeCallback implementation provided in\r\n+ *\r\n+ * @author ImranR\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTYzODE5", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363563819", "createdAt": "2020-02-24T17:22:19Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyMjoxOVrOFtpFDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyMjoxOVrOFtpFDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMzI3OA==", "bodyText": "This is the basic layer for a specific test, the method name is too generic.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383403278", "createdAt": "2020-02-24T17:22:19Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test makes use of mock RetypeFeatureTypeCallback implementation provided in\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class RetypeFeatureTypeCallbackTest extends GeoServerSystemTestSupport {\r\n+\r\n+    public static final String LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER = \"longlat\";\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME =\r\n+            new QName(\r\n+                    MockData.DEFAULT_PREFIX,\r\n+                    LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER,\r\n+                    MockData.DEFAULT_PREFIX);\r\n+\r\n+    @Override\r\n+    protected void onSetUp(SystemTestData testData) throws Exception {\r\n+        super.onSetUp(testData);\r\n+        setupBasicLayer(testData);\r\n+    }\r\n+\r\n+    private void setupBasicLayer(SystemTestData testData) throws IOException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY1Njgy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363565682", "createdAt": "2020-02-24T17:25:00Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNTowMVrOFtpLDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNTowMVrOFtpLDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNDgxNA==", "bodyText": "This test performs at least three different tests:\n\nthat a geometry attribute will be generated on the fly, i.e. testing the extension points\nasserts that GeoServer re-projection still work, I would provide some context explained why we are explicitly tests this\nasserts that layer CQL filters are still working, same comment as for previous point\n\nPlease implemented different tests properly documented, this will make the tests easier to debug, understand and resilient.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383404814", "createdAt": "2020-02-24T17:25:01Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test makes use of mock RetypeFeatureTypeCallback implementation provided in\r\n+ *\r\n+ * @author ImranR\r\n+ */\r\n+public class RetypeFeatureTypeCallbackTest extends GeoServerSystemTestSupport {\r\n+\r\n+    public static final String LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER = \"longlat\";\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME =\r\n+            new QName(\r\n+                    MockData.DEFAULT_PREFIX,\r\n+                    LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER,\r\n+                    MockData.DEFAULT_PREFIX);\r\n+\r\n+    @Override\r\n+    protected void onSetUp(SystemTestData testData) throws Exception {\r\n+        super.onSetUp(testData);\r\n+        setupBasicLayer(testData);\r\n+    }\r\n+\r\n+    private void setupBasicLayer(SystemTestData testData) throws IOException {\r\n+        Map<LayerProperty, Object> props = new HashMap<LayerProperty, Object>();\r\n+        props.put(LayerProperty.PROJECTION_POLICY, ProjectionPolicy.REPROJECT_TO_DECLARED);\r\n+        props.put(LayerProperty.SRS, 3857);\r\n+        // Loading a layer with location given as latitude and longitude and no geometry\r\n+        testData.addVectorLayer(\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME,\r\n+                props,\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER + \".properties\",\r\n+                getClass(),\r\n+                getCatalog());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testResourcePoolOperations() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY1ODY5", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363565869", "createdAt": "2020-02-24T17:25:15Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNToxNlrOFtpLqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNToxNlrOFtpLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNDk3MQ==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383404971", "createdAt": "2020-02-24T17:25:16Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureCollection.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import java.util.NoSuchElementException;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geotools.data.simple.SimpleFeatureCollection;\r\n+import org.geotools.data.simple.SimpleFeatureIterator;\r\n+import org.geotools.feature.collection.DecoratingSimpleFeatureCollection;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+\r\n+/*\r\n+ * A Mock implementation of DecoratingSimpleFeatureCollection to handle features with geometries generated on the fly\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY2NjYx", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363566661", "createdAt": "2020-02-24T17:26:29Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNjozMFrOFtpOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNjozMFrOFtpOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNTY1NA==", "bodyText": "Looks like this is formatted like a poem, not even sure how this passed the auto formatting validation.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383405654", "createdAt": "2020-02-24T17:26:30Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureConverter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.catalog.MockRetypeFeatureTypeCallback;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+\r\n+/*\r\n+ * A Mock Converter Helper class to demonstrate how to\r\n+ * Retype Feature by generating Geometries on the fly\r\n+ * Defining Geomtry attribute on the fly\r\n+ * Query handling which ensure that dynamic field is not delegated to Data Store\r\n+ *\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY3NTMy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363567532", "createdAt": "2020-02-24T17:27:49Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNzo0OVrOFtpQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNzo0OVrOFtpQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjMyNQ==", "bodyText": "Why this generic ``Mock```names? This doesn't mock anything and its not generic no? This implements a concrete behavior to validate an extension point no? Why not put this class inside the test a private static inner classes?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383406325", "createdAt": "2020-02-24T17:27:49Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureConverter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.catalog.MockRetypeFeatureTypeCallback;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+\r\n+/*\r\n+ * A Mock Converter Helper class to demonstrate how to\r\n+ * Retype Feature by generating Geometries on the fly\r\n+ * Defining Geomtry attribute on the fly\r\n+ * Query handling which ensure that dynamic field is not delegated to Data Store\r\n+ *\r\n+ * **/\r\n+public class MockRetypedFeatureConverter {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY3NjE0", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363567614", "createdAt": "2020-02-24T17:27:57Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNzo1N1rOFtpRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyNzo1N1rOFtpRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjQxMQ==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383406411", "createdAt": "2020-02-24T17:27:57Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureConverter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.catalog.MockRetypeFeatureTypeCallback;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+\r\n+/*\r\n+ * A Mock Converter Helper class to demonstrate how to\r\n+ * Retype Feature by generating Geometries on the fly\r\n+ * Defining Geomtry attribute on the fly\r\n+ * Query handling which ensure that dynamic field is not delegated to Data Store\r\n+ *\r\n+ * **/\r\n+public class MockRetypedFeatureConverter {\r\n+    private final GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();\r\n+\r\n+    public SimpleFeature generateGeometry(\r\n+            FeatureTypeInfo info, SimpleFeatureType schema, SimpleFeature simpleFeature) {\r\n+        if (simpleFeature != null) {\r\n+            try {\r\n+                SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(schema);\r\n+                Double x =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LONG_FIELD));\r\n+                Double y =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LAT_FIELD));\r\n+\r\n+                Point point = geometryFactory.createPoint(new Coordinate(x, y));\r\n+                point.setSRID(MockRetypeFeatureTypeCallback.EPSG_CODE);\r\n+\r\n+                featureBuilder.add(point);\r\n+                for (Property prop : simpleFeature.getProperties()) {\r\n+                    featureBuilder.set(prop.getName(), prop.getValue());\r\n+                }\r\n+                simpleFeature = featureBuilder.buildFeature(simpleFeature.getID());\r\n+            } catch (Exception e) {\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY3NzIz", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363567723", "createdAt": "2020-02-24T17:28:07Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODowN1rOFtpRsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODowN1rOFtpRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjUxMw==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383406513", "createdAt": "2020-02-24T17:28:07Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureConverter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.catalog.MockRetypeFeatureTypeCallback;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+\r\n+/*\r\n+ * A Mock Converter Helper class to demonstrate how to\r\n+ * Retype Feature by generating Geometries on the fly\r\n+ * Defining Geomtry attribute on the fly\r\n+ * Query handling which ensure that dynamic field is not delegated to Data Store\r\n+ *\r\n+ * **/\r\n+public class MockRetypedFeatureConverter {\r\n+    private final GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();\r\n+\r\n+    public SimpleFeature generateGeometry(\r\n+            FeatureTypeInfo info, SimpleFeatureType schema, SimpleFeature simpleFeature) {\r\n+        if (simpleFeature != null) {\r\n+            try {\r\n+                SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(schema);\r\n+                Double x =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LONG_FIELD));\r\n+                Double y =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LAT_FIELD));\r\n+\r\n+                Point point = geometryFactory.createPoint(new Coordinate(x, y));\r\n+                point.setSRID(MockRetypeFeatureTypeCallback.EPSG_CODE);\r\n+\r\n+                featureBuilder.add(point);\r\n+                for (Property prop : simpleFeature.getProperties()) {\r\n+                    featureBuilder.set(prop.getName(), prop.getValue());\r\n+                }\r\n+                simpleFeature = featureBuilder.buildFeature(simpleFeature.getID());\r\n+            } catch (Exception e) {\r\n+\r\n+            }\r\n+        }\r\n+        return simpleFeature;\r\n+    }\r\n+\r\n+    private String getAsString(SimpleFeature simpleFeature, String name) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY3ODc3", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363567877", "createdAt": "2020-02-24T17:28:23Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODoyM1rOFtpSMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODoyM1rOFtpSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjY0Mg==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383406642", "createdAt": "2020-02-24T17:28:23Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedFeatureConverter.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.stream.Collectors;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.catalog.MockRetypeFeatureTypeCallback;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+\r\n+/*\r\n+ * A Mock Converter Helper class to demonstrate how to\r\n+ * Retype Feature by generating Geometries on the fly\r\n+ * Defining Geomtry attribute on the fly\r\n+ * Query handling which ensure that dynamic field is not delegated to Data Store\r\n+ *\r\n+ * **/\r\n+public class MockRetypedFeatureConverter {\r\n+    private final GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();\r\n+\r\n+    public SimpleFeature generateGeometry(\r\n+            FeatureTypeInfo info, SimpleFeatureType schema, SimpleFeature simpleFeature) {\r\n+        if (simpleFeature != null) {\r\n+            try {\r\n+                SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(schema);\r\n+                Double x =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LONG_FIELD));\r\n+                Double y =\r\n+                        Double.valueOf(\r\n+                                getAsString(\r\n+                                        simpleFeature, MockRetypeFeatureTypeCallback.LAT_FIELD));\r\n+\r\n+                Point point = geometryFactory.createPoint(new Coordinate(x, y));\r\n+                point.setSRID(MockRetypeFeatureTypeCallback.EPSG_CODE);\r\n+\r\n+                featureBuilder.add(point);\r\n+                for (Property prop : simpleFeature.getProperties()) {\r\n+                    featureBuilder.set(prop.getName(), prop.getValue());\r\n+                }\r\n+                simpleFeature = featureBuilder.buildFeature(simpleFeature.getID());\r\n+            } catch (Exception e) {\r\n+\r\n+            }\r\n+        }\r\n+        return simpleFeature;\r\n+    }\r\n+\r\n+    private String getAsString(SimpleFeature simpleFeature, String name) {\r\n+        return ofNullable(simpleFeature.getProperty(name))\r\n+                .flatMap(property -> ofNullable(property.getValue()))\r\n+                .map(Object::toString)\r\n+                .orElseThrow(\r\n+                        () ->\r\n+                                new IllegalArgumentException(\r\n+                                        String.format(\"cannot get value of property [%s]\", name)));\r\n+    }\r\n+\r\n+    public SimpleFeatureType defineGeometryAttributeFor(FeatureTypeInfo info, SimpleFeatureType src)\r\n+            throws Exception {\r\n+\r\n+        SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+        builder.setName(src.getName());\r\n+        builder.setCRS(CRS.decode(\"EPSG:\" + MockRetypeFeatureTypeCallback.EPSG_CODE));\r\n+\r\n+        builder.add(MockRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN, Point.class);\r\n+        for (AttributeDescriptor ad : src.getAttributeDescriptors()) {\r\n+            if (!ad.getLocalName()\r\n+                    .equalsIgnoreCase(MockRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN)) {\r\n+                builder.add(ad);\r\n+            }\r\n+        }\r\n+        SimpleFeatureType simpleFeatureType = builder.buildFeatureType();\r\n+\r\n+        return simpleFeatureType;\r\n+    }\r\n+\r\n+    public Query convertQuery(FeatureTypeInfo info, Query query) {\r\n+\r\n+        Query q = new Query(query);\r\n+        List<String> properties = new ArrayList<>();\r\n+        try {\r\n+            // no fields were sent, use all fields excluding geom field\r\n+            if (query.getPropertyNames() == null) {\r\n+                properties =\r\n+                        info.getFeatureType()\r\n+                                .getDescriptors()\r\n+                                .stream()\r\n+                                .filter(\r\n+                                        propertyDescriptor ->\r\n+                                                !propertyDescriptor\r\n+                                                        .getName()\r\n+                                                        .toString()\r\n+                                                        .equals(\r\n+                                                                MockRetypeFeatureTypeCallback\r\n+                                                                        .RETYPED_GEOM_COLUMN))\r\n+                                .map(propertyDescriptor -> propertyDescriptor.getName().toString())\r\n+                                .collect(Collectors.toList());\r\n+            } else {\r\n+                // else use the passed fields of this query\r\n+                // but make sure geom field is replaced with Long and Lat fields\r\n+                List<String> existingProperties =\r\n+                        new LinkedList<String>(Arrays.asList(query.getPropertyNames()));\r\n+                // remove geom column\r\n+                existingProperties.remove(MockRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN);\r\n+                // make sure longitude field is present\r\n+                if (!existingProperties.contains(MockRetypeFeatureTypeCallback.LONG_FIELD))\r\n+                    existingProperties.add(MockRetypeFeatureTypeCallback.LONG_FIELD);\r\n+                // make sure latitude field is present\r\n+                if (!existingProperties.contains(MockRetypeFeatureTypeCallback.LAT_FIELD))\r\n+                    existingProperties.add(MockRetypeFeatureTypeCallback.LAT_FIELD);\r\n+\r\n+                properties = new ArrayList<>(existingProperties);\r\n+            }\r\n+\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTY4MDQw", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-363568040", "createdAt": "2020-02-24T17:28:37Z", "commit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODozN1rOFtpSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzoyODozN1rOFtpSvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwNjc4MQ==", "bodyText": "Same comments above.", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r383406781", "createdAt": "2020-02-24T17:28:37Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/retype/MockRetypedSource.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog.retype;\r\n+\r\n+import java.io.IOException;\r\n+import org.geoserver.catalog.FeatureTypeInfo;\r\n+import org.geoserver.security.decorators.DecoratingSimpleFeatureSource;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.data.simple.SimpleFeatureCollection;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.filter.Filter;\r\n+\r\n+/*\r\n+ * A Mock Retyped Feature Source demonstrating how to handle dynamic dynamic Geometry generations\r\n+ * */\r\n+public class MockRetypedSource extends DecoratingSimpleFeatureSource {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9ce7f4598d534cd8575d872f3e53986b116657"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bf5b0e990fd0f3d0f07128da12cd8c58c7d2878", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/6bf5b0e990fd0f3d0f07128da12cd8c58c7d2878", "committedDate": "2020-02-25T06:54:17Z", "message": "[GEOS-9487] rev 2\n\n-fixed java docs\n-requested refactors\n-moved bean init to unit test from applicationContext.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDYzNDYy", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-367063462", "createdAt": "2020-03-02T09:45:54Z", "commit": {"oid": "6c80dab3840671f1103edeb718a2f4f6d94251b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0NTo1NFrOFwZG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0NTo1NFrOFwZG4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4NzMzMA==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r386287330", "createdAt": "2020-03-02T09:45:54Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.logging.Level;\r\n+import java.util.logging.Logger;\r\n+import java.util.stream.Collectors;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.platform.GeoServerExtensionsHelper;\r\n+import org.geoserver.security.decorators.DecoratingSimpleFeatureSource;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.data.simple.SimpleFeatureCollection;\r\n+import org.geotools.data.simple.SimpleFeatureIterator;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.feature.collection.DecoratingSimpleFeatureCollection;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.filter.Filter;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test asserts the an implementation of RetypeFeatureTypeCallback is integrated properly with\r\n+ * GeoServerFeatureSource wrapper. The test asserts that when a feature type is retyped through\r\n+ * RetypeFeatureTypeCallback implementation, it does not break or override the functionality\r\n+ * provided by GeoServerFeatureSource wrapper.\r\n+ */\r\n+public class RetypeFeatureTypeCallbackTest extends GeoServerSystemTestSupport {\r\n+\r\n+    public static final String LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE = \"longlat.properties\";\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME =\r\n+            new QName(MockData.DEFAULT_PREFIX, \"longlat\", MockData.DEFAULT_PREFIX);\r\n+\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED =\r\n+            new QName(MockData.DEFAULT_PREFIX, \"longlat_reprojected\", MockData.DEFAULT_PREFIX);\r\n+\r\n+    @Override\r\n+    protected void onSetUp(SystemTestData testData) throws Exception {\r\n+        // registering singleton for this test only\r\n+        TestRetypeFeatureTypeCallback o2 = new TestRetypeFeatureTypeCallback();\r\n+        GeoServerExtensionsHelper.singleton(\r\n+                \"retypeFeatureTypeCallbackTest\", o2, RetypeFeatureTypeCallback.class);\r\n+\r\n+        super.onSetUp(testData);\r\n+        setUpNonGeometryLayer(testData);\r\n+        setReprojectedUpNonGeometryLayer(testData);\r\n+    }\r\n+\r\n+    private void setUpNonGeometryLayer(SystemTestData testData) throws IOException {\r\n+        // Loading a vector layer with location given as latitude and longitude and no geometry\r\n+        Map<LayerProperty, Object> props = new HashMap<LayerProperty, Object>();\r\n+        testData.addVectorLayer(\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME,\r\n+                props,\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE,\r\n+                getClass(),\r\n+                getCatalog());\r\n+    }\r\n+\r\n+    private void setReprojectedUpNonGeometryLayer(SystemTestData testData) throws IOException {\r\n+        // Loading a vector layer with location given as latitude and longitude and no geometry\r\n+        Map<LayerProperty, Object> props = new HashMap<LayerProperty, Object>();\r\n+        // declaring a different CRS to test re-projection\r\n+        props.put(LayerProperty.PROJECTION_POLICY, ProjectionPolicy.REPROJECT_TO_DECLARED);\r\n+        props.put(LayerProperty.SRS, 900913);\r\n+        testData.addVectorLayer(\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED,\r\n+                props,\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE,\r\n+                getClass(),\r\n+                getCatalog());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testGeometryCreation() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getLocalPart());\r\n+        FeatureType ft1 = pool.getFeatureType(info);\r\n+\r\n+        // assert that feature type is returned with a point geometry\r\n+        assertTrue(ft1.getUserData().containsKey(TestRetypeFeatureTypeCallback.RETYPED));\r\n+        assertTrue(ft1.getGeometryDescriptor().getType().getBinding().equals(Point.class));\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+        // assert FeatureSource is nicely wrapped inside Geoserver wrapper\r\n+        assertTrue(retyped instanceof GeoServerFeatureSource);\r\n+        // assert FeatureSource has Geometry type set to Point\r\n+        assertTrue(\r\n+                retyped.getSchema()\r\n+                        .getGeometryDescriptor()\r\n+                        .getType()\r\n+                        .getBinding()\r\n+                        .equals(Point.class));\r\n+        AttributeDescriptor geomAttibute =\r\n+                (AttributeDescriptor) retyped.getSchema().getGeometryDescriptor().getDefaultValue();\r\n+        // Finally assert that each features has a valid geometry\r\n+        try (FeatureIterator iterator = retyped.getFeatures().features()) {\r\n+            while (iterator.hasNext()) {\r\n+                Feature feature = iterator.next();\r\n+                assertTrue(feature.getDefaultGeometryProperty().getValue() instanceof Point);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testReProjection() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED.getLocalPart());\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+        CoordinateReferenceSystem reprojected = CRS.decode(\"EPSG:\" + 900913);\r\n+\r\n+        // asserting re-projection occurred to the declared CRS\r\n+        try (FeatureIterator iterator = retyped.getFeatures().features()) {\r\n+            while (iterator.hasNext()) {\r\n+                Feature feature = iterator.next();\r\n+                // check if resulting feature are in correct CRS\r\n+                assertFalse(\r\n+                        CRS.isTransformationRequired(\r\n+                                reprojected, feature.getType().getCoordinateReferenceSystem()));\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testCQLFilter() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getLocalPart());\r\n+        FeatureType ft1 = pool.getFeatureType(info);\r\n+        // setting a feature type level CQL to allow only ONE feature\r\n+        info.setCqlFilter(\"data = 'd1'\");\r\n+        getCatalog().save(info);\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+\r\n+        try {\r\n+            int count = retyped.getFeatures().size();\r\n+            assertTrue(count == 1);\r\n+        } finally {\r\n+            // reset\r\n+            info.setCqlFilter(null);\r\n+            getCatalog().save(info);\r\n+        }\r\n+    }\r\n+\r\n+    // sample classes providing required implementations in context of the unit test\r\n+\r\n+    /* The main implementation for extension point  */\r\n+    public static class TestRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r\n+\r\n+        public static Logger LOGGER =\r\n+                Logger.getLogger(TestRetypeFeatureTypeCallback.class.getCanonicalName());\r\n+\r\n+        public static final String RETYPED = \"RETYPED\";\r\n+        public static final String RETYPED_GEOM_COLUMN = \"GENERATED_POINT\";\r\n+\r\n+        public static final String LONG_FIELD = \"lon\";\r\n+        public static final String LAT_FIELD = \"lat\";\r\n+        public static final int EPSG_CODE = 4326;\r\n+\r\n+        @Override\r\n+        public FeatureType retypeFeatureType(FeatureTypeInfo featureTypeInfo, FeatureType src) {\r\n+            try {\r\n+                CoordinateReferenceSystem crs = CRS.decode(\"EPSG:\" + EPSG_CODE);\r\n+                SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+                builder.setName(src.getName());\r\n+                builder.setCRS(crs);\r\n+\r\n+                builder.add(RETYPED_GEOM_COLUMN, Point.class);\r\n+                for (PropertyDescriptor ad : src.getDescriptors()) {\r\n+                    builder.add((AttributeDescriptor) ad);\r\n+                }\r\n+                FeatureType newType = builder.buildFeatureType();\r\n+                newType.getUserData().put(RETYPED, true);\r\n+                return newType;\r\n+\r\n+            } catch (Exception e) {\r\n+                LOGGER.log(\r\n+                        Level.SEVERE,\r\n+                        \"Error in TestRetypeFeatureTypeCallback:retypeFeatureType\",\r\n+                        e);\r\n+            }\r\n+            return src;\r\n+        }\r\n+\r\n+        @Override\r\n+        public FeatureSource wrapFeatureSource(\r\n+                FeatureTypeInfo featureTypeInfo, FeatureSource featureSource) {\r\n+            TestRetypedSource wrapped =\r\n+                    new TestRetypedSource(featureTypeInfo, (SimpleFeatureSource) featureSource);\r\n+\r\n+            return wrapped;\r\n+        }\r\n+    }\r\n+\r\n+    public static class TestRetypedSource extends DecoratingSimpleFeatureSource {\r\n+\r\n+        private final FeatureTypeInfo featureTypeInfo;\r\n+        private SimpleFeatureType cachedFeatureType;\r\n+        SimpleFeatureSource delegate;\r\n+\r\n+        RetypeHelper converter = new RetypeHelper();\r\n+\r\n+        public TestRetypedSource(FeatureTypeInfo featureTypeInfo, SimpleFeatureSource delegate) {\r\n+            super(delegate);\r\n+            this.featureTypeInfo = featureTypeInfo;\r\n+\r\n+            this.delegate = delegate;\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureType getSchema() {\r\n+\r\n+            SimpleFeatureType src = super.getSchema();\r\n+            try {\r\n+                return converter.defineGeometryAttributeFor(featureTypeInfo, src);\r\n+            } catch (Exception e) {\r\n+                e.printStackTrace();\r\n+            }\r\n+\r\n+            return src;\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureCollection getFeatures() throws IOException {\r\n+\r\n+            SimpleFeatureCollection features = getFeatures(Query.ALL);\r\n+            return new TestRetypedFeatureCollection(features, featureTypeInfo, getSchema());\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureCollection getFeatures(Filter srcFilter) throws IOException {\r\n+            Query query = new Query(Query.ALL);\r\n+            query.setFilter(srcFilter);\r\n+            Query newQuery = converter.convertQuery(featureTypeInfo, query);\r\n+            SimpleFeatureCollection features = super.getFeatures(newQuery);\r\n+            return new TestRetypedFeatureCollection(features, featureTypeInfo, getSchema());\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureCollection getFeatures(Query srcQuery) throws IOException {\r\n+            Query newQuery = converter.convertQuery(featureTypeInfo, srcQuery);\r\n+            SimpleFeatureCollection features = super.getFeatures(newQuery);\r\n+            return new TestRetypedFeatureCollection(features, featureTypeInfo, getSchema());\r\n+        }\r\n+\r\n+        @Override\r\n+        public int getCount(Query srcQuery) throws IOException {\r\n+            Query newQuery = converter.convertQuery(featureTypeInfo, srcQuery);\r\n+            return super.getCount(newQuery);\r\n+        }\r\n+    }\r\n+\r\n+    public static class TestRetypedFeatureCollection extends DecoratingSimpleFeatureCollection {\r\n+\r\n+        private final FeatureTypeInfo featureTypeInfo;\r\n+        private final SimpleFeatureType schema;\r\n+\r\n+        TestRetypedFeatureCollection(\r\n+                SimpleFeatureCollection delegate,\r\n+                FeatureTypeInfo featureTypeInfo,\r\n+                SimpleFeatureType schema) {\r\n+            super(delegate);\r\n+\r\n+            this.featureTypeInfo = featureTypeInfo;\r\n+            this.schema = schema;\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureType getSchema() {\r\n+            return this.schema;\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureIterator features() {\r\n+            return new GeometryGenerationCollectionIterator(super.features());\r\n+        }\r\n+\r\n+        private class GeometryGenerationCollectionIterator implements SimpleFeatureIterator {\r\n+\r\n+            private final SimpleFeatureIterator delegate;\r\n+\r\n+            RetypeHelper converter = new RetypeHelper();\r\n+\r\n+            private GeometryGenerationCollectionIterator(SimpleFeatureIterator delegate) {\r\n+                this.delegate = delegate;\r\n+            }\r\n+\r\n+            @Override\r\n+            public boolean hasNext() {\r\n+                return delegate.hasNext();\r\n+            }\r\n+\r\n+            @Override\r\n+            public SimpleFeature next() throws NoSuchElementException {\r\n+                SimpleFeature feature = delegate.next();\r\n+                return converter.generateGeometry(featureTypeInfo, schema, feature);\r\n+            }\r\n+\r\n+            @Override\r\n+            public void close() {\r\n+                delegate.close();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public static class RetypeHelper {\r\n+        public static Logger LOGGER = Logger.getLogger(RetypeHelper.class.getCanonicalName());\r\n+\r\n+        private final GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();\r\n+\r\n+        public SimpleFeature generateGeometry(\r\n+                FeatureTypeInfo info, SimpleFeatureType schema, SimpleFeature simpleFeature) {\r\n+            if (simpleFeature != null) {\r\n+                try {\r\n+                    SimpleFeatureBuilder featureBuilder = new SimpleFeatureBuilder(schema);\r\n+                    Double x =\r\n+                            Double.valueOf(\r\n+                                    getAsString(\r\n+                                            simpleFeature,\r\n+                                            TestRetypeFeatureTypeCallback.LONG_FIELD));\r\n+                    Double y =\r\n+                            Double.valueOf(\r\n+                                    getAsString(\r\n+                                            simpleFeature,\r\n+                                            TestRetypeFeatureTypeCallback.LAT_FIELD));\r\n+\r\n+                    Point point = geometryFactory.createPoint(new Coordinate(x, y));\r\n+                    point.setSRID(TestRetypeFeatureTypeCallback.EPSG_CODE);\r\n+\r\n+                    featureBuilder.add(point);\r\n+                    for (Property prop : simpleFeature.getProperties()) {\r\n+                        featureBuilder.set(prop.getName(), prop.getValue());\r\n+                    }\r\n+                    simpleFeature = featureBuilder.buildFeature(simpleFeature.getID());\r\n+                } catch (Exception e) {\r\n+                    LOGGER.log(Level.SEVERE, e.getMessage(), e);\r\n+                }\r\n+            }\r\n+            return simpleFeature;\r\n+        }\r\n+\r\n+        private String getAsString(SimpleFeature simpleFeature, String name) {\r\n+            return ofNullable(simpleFeature.getProperty(name))\r\n+                    .flatMap(property -> ofNullable(property.getValue()))\r\n+                    .map(Object::toString)\r\n+                    .orElseThrow(\r\n+                            () ->\r\n+                                    new IllegalArgumentException(\r\n+                                            String.format(\r\n+                                                    \"cannot get value of property [%s]\", name)));\r\n+        }\r\n+\r\n+        public SimpleFeatureType defineGeometryAttributeFor(\r\n+                FeatureTypeInfo info, SimpleFeatureType src) throws Exception {\r\n+\r\n+            SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+            builder.setName(src.getName());\r\n+            builder.setCRS(CRS.decode(\"EPSG:\" + TestRetypeFeatureTypeCallback.EPSG_CODE));\r\n+\r\n+            builder.add(TestRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN, Point.class);\r\n+            for (AttributeDescriptor ad : src.getAttributeDescriptors()) {\r\n+                if (!ad.getLocalName()\r\n+                        .equalsIgnoreCase(TestRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN)) {\r\n+                    builder.add(ad);\r\n+                }\r\n+            }\r\n+            SimpleFeatureType simpleFeatureType = builder.buildFeatureType();\r\n+\r\n+            return simpleFeatureType;\r\n+        }\r\n+\r\n+        public Query convertQuery(FeatureTypeInfo info, Query query) {\r\n+\r\n+            Query q = new Query(query);\r\n+            List<String> properties = new ArrayList<>();\r\n+            try {\r\n+                // no fields were sent, use all fields excluding geom field\r\n+                if (query.getPropertyNames() == null) {\r\n+                    properties =\r\n+                            info.getFeatureType()\r\n+                                    .getDescriptors()\r\n+                                    .stream()\r\n+                                    .filter(\r\n+                                            propertyDescriptor ->\r\n+                                                    !propertyDescriptor\r\n+                                                            .getName()\r\n+                                                            .toString()\r\n+                                                            .equals(\r\n+                                                                    TestRetypeFeatureTypeCallback\r\n+                                                                            .RETYPED_GEOM_COLUMN))\r\n+                                    .map(\r\n+                                            propertyDescriptor ->\r\n+                                                    propertyDescriptor.getName().toString())\r\n+                                    .collect(Collectors.toList());\r\n+                } else {\r\n+                    // else use the passed fields of this query\r\n+                    // but make sure geom field is replaced with Long and Lat fields\r\n+                    List<String> existingProperties =\r\n+                            new LinkedList<String>(Arrays.asList(query.getPropertyNames()));\r\n+                    // remove geom column\r\n+                    existingProperties.remove(TestRetypeFeatureTypeCallback.RETYPED_GEOM_COLUMN);\r\n+                    // make sure longitude field is present\r\n+                    if (!existingProperties.contains(TestRetypeFeatureTypeCallback.LONG_FIELD))\r\n+                        existingProperties.add(TestRetypeFeatureTypeCallback.LONG_FIELD);\r\n+                    // make sure latitude field is present\r\n+                    if (!existingProperties.contains(TestRetypeFeatureTypeCallback.LAT_FIELD))\r\n+                        existingProperties.add(TestRetypeFeatureTypeCallback.LAT_FIELD);\r\n+\r\n+                    properties = new ArrayList<>(existingProperties);\r\n+                }\r\n+\r\n+            } catch (Exception e) {\r\n+                e.printStackTrace();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c80dab3840671f1103edeb718a2f4f6d94251b1"}, "originalPosition": 461}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDYzNjA4", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-367063608", "createdAt": "2020-03-02T09:46:07Z", "commit": {"oid": "6c80dab3840671f1103edeb718a2f4f6d94251b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0NjowOFrOFwZHVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTo0NjowOFrOFwZHVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI4NzQ0NA==", "bodyText": "?", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r386287444", "createdAt": "2020-03-02T09:46:08Z", "author": {"login": "nmco"}, "path": "src/main/src/test/java/org/geoserver/catalog/RetypeFeatureTypeCallbackTest.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\r\n+ * This code is licensed under the GPL 2.0 license, available at the root\r\n+ * application directory.\r\n+ */\r\n+package org.geoserver.catalog;\r\n+\r\n+import static java.util.Optional.ofNullable;\r\n+import static org.junit.Assert.assertFalse;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.LinkedList;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.NoSuchElementException;\r\n+import java.util.logging.Level;\r\n+import java.util.logging.Logger;\r\n+import java.util.stream.Collectors;\r\n+import javax.xml.namespace.QName;\r\n+import org.geoserver.data.test.MockData;\r\n+import org.geoserver.data.test.SystemTestData;\r\n+import org.geoserver.data.test.SystemTestData.LayerProperty;\r\n+import org.geoserver.platform.GeoServerExtensionsHelper;\r\n+import org.geoserver.security.decorators.DecoratingSimpleFeatureSource;\r\n+import org.geoserver.test.GeoServerSystemTestSupport;\r\n+import org.geotools.data.FeatureSource;\r\n+import org.geotools.data.Query;\r\n+import org.geotools.data.simple.SimpleFeatureCollection;\r\n+import org.geotools.data.simple.SimpleFeatureIterator;\r\n+import org.geotools.data.simple.SimpleFeatureSource;\r\n+import org.geotools.feature.FeatureIterator;\r\n+import org.geotools.feature.collection.DecoratingSimpleFeatureCollection;\r\n+import org.geotools.feature.simple.SimpleFeatureBuilder;\r\n+import org.geotools.feature.simple.SimpleFeatureTypeBuilder;\r\n+import org.geotools.geometry.jts.JTSFactoryFinder;\r\n+import org.geotools.referencing.CRS;\r\n+import org.junit.Test;\r\n+import org.locationtech.jts.geom.Coordinate;\r\n+import org.locationtech.jts.geom.GeometryFactory;\r\n+import org.locationtech.jts.geom.Point;\r\n+import org.opengis.feature.Feature;\r\n+import org.opengis.feature.Property;\r\n+import org.opengis.feature.simple.SimpleFeature;\r\n+import org.opengis.feature.simple.SimpleFeatureType;\r\n+import org.opengis.feature.type.AttributeDescriptor;\r\n+import org.opengis.feature.type.FeatureType;\r\n+import org.opengis.feature.type.PropertyDescriptor;\r\n+import org.opengis.filter.Filter;\r\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\r\n+import org.vfny.geoserver.global.GeoServerFeatureSource;\r\n+\r\n+/**\r\n+ * This test asserts the an implementation of RetypeFeatureTypeCallback is integrated properly with\r\n+ * GeoServerFeatureSource wrapper. The test asserts that when a feature type is retyped through\r\n+ * RetypeFeatureTypeCallback implementation, it does not break or override the functionality\r\n+ * provided by GeoServerFeatureSource wrapper.\r\n+ */\r\n+public class RetypeFeatureTypeCallbackTest extends GeoServerSystemTestSupport {\r\n+\r\n+    public static final String LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE = \"longlat.properties\";\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME =\r\n+            new QName(MockData.DEFAULT_PREFIX, \"longlat\", MockData.DEFAULT_PREFIX);\r\n+\r\n+    public static final QName LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED =\r\n+            new QName(MockData.DEFAULT_PREFIX, \"longlat_reprojected\", MockData.DEFAULT_PREFIX);\r\n+\r\n+    @Override\r\n+    protected void onSetUp(SystemTestData testData) throws Exception {\r\n+        // registering singleton for this test only\r\n+        TestRetypeFeatureTypeCallback o2 = new TestRetypeFeatureTypeCallback();\r\n+        GeoServerExtensionsHelper.singleton(\r\n+                \"retypeFeatureTypeCallbackTest\", o2, RetypeFeatureTypeCallback.class);\r\n+\r\n+        super.onSetUp(testData);\r\n+        setUpNonGeometryLayer(testData);\r\n+        setReprojectedUpNonGeometryLayer(testData);\r\n+    }\r\n+\r\n+    private void setUpNonGeometryLayer(SystemTestData testData) throws IOException {\r\n+        // Loading a vector layer with location given as latitude and longitude and no geometry\r\n+        Map<LayerProperty, Object> props = new HashMap<LayerProperty, Object>();\r\n+        testData.addVectorLayer(\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME,\r\n+                props,\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE,\r\n+                getClass(),\r\n+                getCatalog());\r\n+    }\r\n+\r\n+    private void setReprojectedUpNonGeometryLayer(SystemTestData testData) throws IOException {\r\n+        // Loading a vector layer with location given as latitude and longitude and no geometry\r\n+        Map<LayerProperty, Object> props = new HashMap<LayerProperty, Object>();\r\n+        // declaring a different CRS to test re-projection\r\n+        props.put(LayerProperty.PROJECTION_POLICY, ProjectionPolicy.REPROJECT_TO_DECLARED);\r\n+        props.put(LayerProperty.SRS, 900913);\r\n+        testData.addVectorLayer(\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED,\r\n+                props,\r\n+                LONG_LAT_NO_GEOM_ON_THE_FLY_LAYER_FILE,\r\n+                getClass(),\r\n+                getCatalog());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testGeometryCreation() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getLocalPart());\r\n+        FeatureType ft1 = pool.getFeatureType(info);\r\n+\r\n+        // assert that feature type is returned with a point geometry\r\n+        assertTrue(ft1.getUserData().containsKey(TestRetypeFeatureTypeCallback.RETYPED));\r\n+        assertTrue(ft1.getGeometryDescriptor().getType().getBinding().equals(Point.class));\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+        // assert FeatureSource is nicely wrapped inside Geoserver wrapper\r\n+        assertTrue(retyped instanceof GeoServerFeatureSource);\r\n+        // assert FeatureSource has Geometry type set to Point\r\n+        assertTrue(\r\n+                retyped.getSchema()\r\n+                        .getGeometryDescriptor()\r\n+                        .getType()\r\n+                        .getBinding()\r\n+                        .equals(Point.class));\r\n+        AttributeDescriptor geomAttibute =\r\n+                (AttributeDescriptor) retyped.getSchema().getGeometryDescriptor().getDefaultValue();\r\n+        // Finally assert that each features has a valid geometry\r\n+        try (FeatureIterator iterator = retyped.getFeatures().features()) {\r\n+            while (iterator.hasNext()) {\r\n+                Feature feature = iterator.next();\r\n+                assertTrue(feature.getDefaultGeometryProperty().getValue() instanceof Point);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testReProjection() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME_REPROJECTED.getLocalPart());\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+        CoordinateReferenceSystem reprojected = CRS.decode(\"EPSG:\" + 900913);\r\n+\r\n+        // asserting re-projection occurred to the declared CRS\r\n+        try (FeatureIterator iterator = retyped.getFeatures().features()) {\r\n+            while (iterator.hasNext()) {\r\n+                Feature feature = iterator.next();\r\n+                // check if resulting feature are in correct CRS\r\n+                assertFalse(\r\n+                        CRS.isTransformationRequired(\r\n+                                reprojected, feature.getType().getCoordinateReferenceSystem()));\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Test\r\n+    public void testCQLFilter() throws Exception {\r\n+        ResourcePool pool = ResourcePool.create(getCatalog());\r\n+        FeatureTypeInfo info =\r\n+                getCatalog()\r\n+                        .getFeatureTypeByName(\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getNamespaceURI(),\r\n+                                LONG_LAT_NO_GEOM_ON_THE_FLY_QNAME.getLocalPart());\r\n+        FeatureType ft1 = pool.getFeatureType(info);\r\n+        // setting a feature type level CQL to allow only ONE feature\r\n+        info.setCqlFilter(\"data = 'd1'\");\r\n+        getCatalog().save(info);\r\n+\r\n+        FeatureSource retyped = pool.getFeatureSource(info, null);\r\n+\r\n+        try {\r\n+            int count = retyped.getFeatures().size();\r\n+            assertTrue(count == 1);\r\n+        } finally {\r\n+            // reset\r\n+            info.setCqlFilter(null);\r\n+            getCatalog().save(info);\r\n+        }\r\n+    }\r\n+\r\n+    // sample classes providing required implementations in context of the unit test\r\n+\r\n+    /* The main implementation for extension point  */\r\n+    public static class TestRetypeFeatureTypeCallback implements RetypeFeatureTypeCallback {\r\n+\r\n+        public static Logger LOGGER =\r\n+                Logger.getLogger(TestRetypeFeatureTypeCallback.class.getCanonicalName());\r\n+\r\n+        public static final String RETYPED = \"RETYPED\";\r\n+        public static final String RETYPED_GEOM_COLUMN = \"GENERATED_POINT\";\r\n+\r\n+        public static final String LONG_FIELD = \"lon\";\r\n+        public static final String LAT_FIELD = \"lat\";\r\n+        public static final int EPSG_CODE = 4326;\r\n+\r\n+        @Override\r\n+        public FeatureType retypeFeatureType(FeatureTypeInfo featureTypeInfo, FeatureType src) {\r\n+            try {\r\n+                CoordinateReferenceSystem crs = CRS.decode(\"EPSG:\" + EPSG_CODE);\r\n+                SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\r\n+\r\n+                builder.setName(src.getName());\r\n+                builder.setCRS(crs);\r\n+\r\n+                builder.add(RETYPED_GEOM_COLUMN, Point.class);\r\n+                for (PropertyDescriptor ad : src.getDescriptors()) {\r\n+                    builder.add((AttributeDescriptor) ad);\r\n+                }\r\n+                FeatureType newType = builder.buildFeatureType();\r\n+                newType.getUserData().put(RETYPED, true);\r\n+                return newType;\r\n+\r\n+            } catch (Exception e) {\r\n+                LOGGER.log(\r\n+                        Level.SEVERE,\r\n+                        \"Error in TestRetypeFeatureTypeCallback:retypeFeatureType\",\r\n+                        e);\r\n+            }\r\n+            return src;\r\n+        }\r\n+\r\n+        @Override\r\n+        public FeatureSource wrapFeatureSource(\r\n+                FeatureTypeInfo featureTypeInfo, FeatureSource featureSource) {\r\n+            TestRetypedSource wrapped =\r\n+                    new TestRetypedSource(featureTypeInfo, (SimpleFeatureSource) featureSource);\r\n+\r\n+            return wrapped;\r\n+        }\r\n+    }\r\n+\r\n+    public static class TestRetypedSource extends DecoratingSimpleFeatureSource {\r\n+\r\n+        private final FeatureTypeInfo featureTypeInfo;\r\n+        private SimpleFeatureType cachedFeatureType;\r\n+        SimpleFeatureSource delegate;\r\n+\r\n+        RetypeHelper converter = new RetypeHelper();\r\n+\r\n+        public TestRetypedSource(FeatureTypeInfo featureTypeInfo, SimpleFeatureSource delegate) {\r\n+            super(delegate);\r\n+            this.featureTypeInfo = featureTypeInfo;\r\n+\r\n+            this.delegate = delegate;\r\n+        }\r\n+\r\n+        @Override\r\n+        public SimpleFeatureType getSchema() {\r\n+\r\n+            SimpleFeatureType src = super.getSchema();\r\n+            try {\r\n+                return converter.defineGeometryAttributeFor(featureTypeInfo, src);\r\n+            } catch (Exception e) {\r\n+                e.printStackTrace();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c80dab3840671f1103edeb718a2f4f6d94251b1"}, "originalPosition": 264}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81030b41c2558927ccb536f075aba018789ac13", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/a81030b41c2558927ccb536f075aba018789ac13", "committedDate": "2020-03-02T10:25:26Z", "message": "[GEOS-9487] rev 3\n\n-moved test implemetnations inside unit test\n-broke unit tests into three unit test\n\t-test geom generation\n\t-test re-projection\n\t-test cql filter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c80dab3840671f1103edeb718a2f4f6d94251b1", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/6c80dab3840671f1103edeb718a2f4f6d94251b1", "committedDate": "2020-02-27T07:13:44Z", "message": "[GEOS-9487] rev 3\n\n-moved test implemetnations inside unit test\n-broke unit tests into three unit test\n\t-test geom generation\n\t-test re-projection\n\t-test cql filter"}, "afterCommit": {"oid": "a81030b41c2558927ccb536f075aba018789ac13", "author": {"user": {"login": "imranrajjad", "name": "Imran"}}, "url": "https://github.com/geoserver/geoserver/commit/a81030b41c2558927ccb536f075aba018789ac13", "committedDate": "2020-03-02T10:25:26Z", "message": "[GEOS-9487] rev 3\n\n-moved test implemetnations inside unit test\n-broke unit tests into three unit test\n\t-test geom generation\n\t-test re-projection\n\t-test cql filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NzI2NTc4", "url": "https://github.com/geoserver/geoserver/pull/4031#pullrequestreview-367726578", "createdAt": "2020-03-03T06:23:20Z", "commit": {"oid": "a81030b41c2558927ccb536f075aba018789ac13"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoyMzoyMFrOFw5liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNjoyNDoxNFrOFw5mdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTQ2Nw==", "bodyText": "protect yourself with a try catch here so you can clearly blame any implementation that causes problems", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r386819467", "createdAt": "2020-03-03T06:23:20Z", "author": {"login": "jodygarnett"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1111,7 +1111,13 @@ private FeatureType buildFeatureType(\n                 }\n             }\n             ft = tb.buildFeatureType();\n+            // extension point for retyping the feature type\n+            for (RetypeFeatureTypeCallback callback :\n+                    GeoServerExtensions.extensions(RetypeFeatureTypeCallback.class)) {\n+                ft = callback.retypeFeatureType(info, ft);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a81030b41c2558927ccb536f075aba018789ac13"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgxOTcwMA==", "bodyText": "Same advise on try / catch around to catch and report errors when calling any extension", "url": "https://github.com/geoserver/geoserver/pull/4031#discussion_r386819700", "createdAt": "2020-03-03T06:24:14Z", "author": {"login": "jodygarnett"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1381,6 +1387,13 @@ else if (ppolicy == ProjectionPolicy.NONE && nativeCRS != null) {\n                 schema = typeBuilder.buildFeatureType();\n             }\n \n+            // applying wrappers using implementations of RetypeFeatureTypeCallback\n+            for (RetypeFeatureTypeCallback callback :\n+                    GeoServerExtensions.extensions(RetypeFeatureTypeCallback.class)) {\n+                if (SimpleFeatureSource.class.isAssignableFrom(fs.getClass()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a81030b41c2558927ccb536f075aba018789ac13"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1480, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}