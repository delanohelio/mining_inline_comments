{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0Mzc4NTYy", "number": 4113, "title": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics", "bodyText": "Checklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Committs changing the REST API, or any configuration object, should check it the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-03-05T16:32:13Z", "url": "https://github.com/geoserver/geoserver/pull/4113", "merged": true, "mergeCommit": {"oid": "4c487120a550d21b2edb8037d1c5d47b5ae29d1f"}, "closed": true, "closedAt": "2020-03-09T14:32:05Z", "author": {"login": "dromagnoli"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKulLbABqjMxMDIwODI5Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL6j-LABqjMxMDk4MTYyMjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "026eaebff48e8e71e83934f1a683ca3ef98b66fd", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/026eaebff48e8e71e83934f1a683ca3ef98b66fd", "committedDate": "2020-03-05T16:03:43Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "2223050169ec16f0b2149953b146f3d0de5e62c2", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/2223050169ec16f0b2149953b146f3d0de5e62c2", "committedDate": "2020-03-05T17:01:17Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2223050169ec16f0b2149953b146f3d0de5e62c2", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/2223050169ec16f0b2149953b146f3d0de5e62c2", "committedDate": "2020-03-05T17:01:17Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "7f3cbeb5ab14e5861ceb9256e16c8e9e6caaad94", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/7f3cbeb5ab14e5861ceb9256e16c8e9e6caaad94", "committedDate": "2020-03-05T17:02:57Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f3cbeb5ab14e5861ceb9256e16c8e9e6caaad94", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/7f3cbeb5ab14e5861ceb9256e16c8e9e6caaad94", "committedDate": "2020-03-05T17:02:57Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "fef0faab9e17a19034693e9451b57ef16c0f25e3", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/fef0faab9e17a19034693e9451b57ef16c0f25e3", "committedDate": "2020-03-05T17:15:22Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fef0faab9e17a19034693e9451b57ef16c0f25e3", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/fef0faab9e17a19034693e9451b57ef16c0f25e3", "committedDate": "2020-03-05T17:15:22Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "df654e69fcfe43c920af5d9f4d405a6241076152", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/df654e69fcfe43c920af5d9f4d405a6241076152", "committedDate": "2020-03-06T08:52:15Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df654e69fcfe43c920af5d9f4d405a6241076152", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/df654e69fcfe43c920af5d9f4d405a6241076152", "committedDate": "2020-03-06T08:52:15Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "fb7fd4ac39813aac4e713c5bf0a824534b8b22b3", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/fb7fd4ac39813aac4e713c5bf0a824534b8b22b3", "committedDate": "2020-03-06T15:26:37Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb7fd4ac39813aac4e713c5bf0a824534b8b22b3", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/fb7fd4ac39813aac4e713c5bf0a824534b8b22b3", "committedDate": "2020-03-06T15:26:37Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "cd793848af82b5606251bc43356f998ac9396081", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/cd793848af82b5606251bc43356f998ac9396081", "committedDate": "2020-03-06T17:13:45Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTIwOTQz", "url": "https://github.com/geoserver/geoserver/pull/4113#pullrequestreview-370520943", "createdAt": "2020-03-06T18:05:02Z", "commit": {"oid": "cd793848af82b5606251bc43356f998ac9396081"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowNTowMlrOFzCPEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNDowNVrOFzCfCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1ODMyMA==", "bodyText": "and.. and? the suspence is killing me :-D", "url": "https://github.com/geoserver/geoserver/pull/4113#discussion_r389058320", "createdAt": "2020-03-06T18:05:02Z", "author": {"login": "aaime"}, "path": "src/community/wps-download/src/main/java/org/geoserver/wps/gs/download/CRSRequestHandler.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.wps.gs.download;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.catalog.Predicates;\n+import org.geotools.coverage.grid.io.DimensionDescriptor;\n+import org.geotools.coverage.grid.io.GranuleSource;\n+import org.geotools.coverage.grid.io.GridCoverage2DReader;\n+import org.geotools.coverage.grid.io.StructuredGridCoverage2DReader;\n+import org.geotools.coverage.util.FeatureUtilities;\n+import org.geotools.data.Query;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.gce.imagemosaic.Utils;\n+import org.geotools.geometry.jts.ReferencedEnvelope;\n+import org.geotools.referencing.CRS;\n+import org.geotools.util.logging.Logging;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.GeometryDescriptor;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.FilterFactory2;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+import org.opengis.referencing.operation.MathTransform;\n+import org.opengis.referencing.operation.TransformException;\n+\n+/**\n+ * Class to handle requested CRSs and ROI in order to determine if the request is involving any\n+ * granule with nativeCRS matching the targetCRS. Once the required flags and properties have been\n+ * set, it need to be initialized through the init method before any of its methods get used.\n+ */\n+class CRSRequestHandler {\n+    private static final Logger LOGGER = Logging.getLogger(CRSRequestHandler.class);\n+\n+    private static final FilterFactory2 FF = FeatureUtilities.DEFAULT_FILTER_FACTORY;\n+\n+    // ----------------\n+    // Input Parameters\n+    // ----------------\n+    private final GridCoverage2DReader reader;\n+\n+    private StructuredGridCoverage2DReader structuredReader;\n+    private final Geometry roi;\n+    private Filter filter;\n+    private CoordinateReferenceSystem originalTargetCRS;\n+    private CoordinateReferenceSystem originalNativeCRS;\n+    private Catalog catalog;\n+\n+    /**\n+     * Requested flag to use the best available resolution of granules in ROI, having their CRS\n+     * matching the targetCRS\n+     */\n+    private boolean useBestResolutionOnMatchingCRS;\n+\n+    /** Requested flag to minimizeReprojections on granules having CRS matching the Target one */\n+    private boolean minimizeReprojections;\n+\n+    // ------------------------------------------------\n+    // Computed parameters once initialization occurred\n+    // ------------------------------------------------\n+    private boolean initialized = false;\n+\n+    private boolean needsReprojection = false;\n+\n+    /** reporting if the request can actually use targetCRS as native */\n+    private boolean canUseTargetCrsAsNative = false;\n+\n+    /** The targetCRS actually selected for the processing. */\n+    private CoordinateReferenceSystem selectedTargetCRS;\n+\n+    private Map<String, DimensionDescriptor> descriptors = null;\n+\n+    private ROIManager roiManager;\n+\n+    /** The computed targetEnvelope after initialization */\n+    private ReferencedEnvelope targetEnvelope;\n+\n+    public CRSRequestHandler(\n+            GridCoverage2DReader reader,\n+            Catalog catalog,\n+            CoordinateReferenceSystem originalTargetCRS,\n+            Geometry roi) {\n+        this.reader = reader;\n+        this.catalog = catalog;\n+        this.originalTargetCRS = originalTargetCRS;\n+        this.selectedTargetCRS = originalTargetCRS;\n+        this.roi = roi;\n+        if (StructuredGridCoverage2DReader.class.isAssignableFrom(reader.getClass())) {\n+            structuredReader = (StructuredGridCoverage2DReader) reader;\n+        }\n+        originalNativeCRS = reader.getCoordinateReferenceSystem();\n+    }\n+\n+    public void setFilter(Filter filter) {\n+        this.filter = filter;\n+    }\n+\n+    public CoordinateReferenceSystem getSelectedNativeCRS() {\n+        return canUseTargetCrsAsNative ? originalTargetCRS : originalNativeCRS;\n+    }\n+\n+    public void setMinimizeReprojections(boolean minimizeReprojections) {\n+        this.minimizeReprojections = minimizeReprojections;\n+    }\n+\n+    public boolean canUseBestResolutionOnMatchingCRS() {\n+        return useBestResolutionOnMatchingCRS && canUseTargetCrsAsNative;\n+    }\n+\n+    public void setUseBestResolutionOnMatchingCRS(boolean bestResolutionOnMatchingCrs) {\n+        this.useBestResolutionOnMatchingCRS = bestResolutionOnMatchingCrs;\n+    }\n+\n+    public Map<String, DimensionDescriptor> getDescriptors() {\n+        return descriptors;\n+    }\n+\n+    public boolean needsReprojection() {\n+        return needsReprojection;\n+    }\n+\n+    public boolean hasStructuredReader() {\n+        return (structuredReader != null);\n+    }\n+\n+    public GridCoverage2DReader getReader() {\n+        return reader;\n+    }\n+\n+    public ROIManager getRoiManager() {\n+        return roiManager;\n+    }\n+\n+    public boolean canUseTargetCrsAsNative() {\n+        return canUseTargetCrsAsNative;\n+    }\n+\n+    public Filter getFilter() {\n+        return filter;\n+    }\n+\n+    public CoordinateReferenceSystem getSelectedTargetCRS() {\n+        return selectedTargetCRS;\n+    }\n+\n+    public ReferencedEnvelope getTargetEnvelope() {\n+        return targetEnvelope;\n+    }\n+\n+    public StructuredGridCoverage2DReader getStructuredReader() {\n+        return structuredReader;\n+    }\n+\n+    public void init() throws IOException, FactoryException, TransformException {\n+        if (initialized) return;\n+\n+        // Initialize dimension descriptors\n+        if (structuredReader != null) {\n+            String coverageName = structuredReader.getGridCoverageNames()[0];\n+            descriptors =\n+                    structuredReader\n+                            .getDimensionDescriptors(coverageName)\n+                            .stream()\n+                            .collect(Collectors.toMap(dd -> dd.getName(), dd -> dd));\n+        } else {\n+            descriptors = Collections.emptyMap();\n+        }\n+\n+        // Check if the request can actually use the TargetCRS as if it would be the\n+        // native one of the reader (so no reprojection in the mix).\n+        canUseTargetCrsAsNative =\n+                minimizeReprojections\n+                        && roi != null\n+                        && originalTargetCRS != null\n+                        && !CRS.equalsIgnoreMetadata(originalNativeCRS, originalTargetCRS)\n+                        && Utils.isSupportedCRS(reader, originalTargetCRS)\n+                        && descriptors.containsKey(DimensionDescriptor.CRS)\n+                        && haveGranulesMatchingTargetCRS(reader, originalTargetCRS, roi, filter);\n+\n+        MathTransform reprojectionTransform = null;\n+        CoordinateReferenceSystem nativeCRS = getSelectedNativeCRS();\n+\n+        if (LOGGER.isLoggable(Level.FINE)) {\n+            LOGGER.fine(\"Native CRS is \" + nativeCRS.toWKT());\n+        }\n+\n+        // Initialize reprojection flag and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd793848af82b5606251bc43356f998ac9396081"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MjQxMA==", "bodyText": "One \"Crs\" escaped the cleanup.", "url": "https://github.com/geoserver/geoserver/pull/4113#discussion_r389062410", "createdAt": "2020-03-06T18:14:05Z", "author": {"login": "aaime"}, "path": "src/community/wps-download/src/main/java/org/geoserver/wps/gs/download/CRSRequestHandler.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.wps.gs.download;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.catalog.Predicates;\n+import org.geotools.coverage.grid.io.DimensionDescriptor;\n+import org.geotools.coverage.grid.io.GranuleSource;\n+import org.geotools.coverage.grid.io.GridCoverage2DReader;\n+import org.geotools.coverage.grid.io.StructuredGridCoverage2DReader;\n+import org.geotools.coverage.util.FeatureUtilities;\n+import org.geotools.data.Query;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.gce.imagemosaic.Utils;\n+import org.geotools.geometry.jts.ReferencedEnvelope;\n+import org.geotools.referencing.CRS;\n+import org.geotools.util.logging.Logging;\n+import org.locationtech.jts.geom.Geometry;\n+import org.opengis.feature.type.GeometryDescriptor;\n+import org.opengis.filter.Filter;\n+import org.opengis.filter.FilterFactory2;\n+import org.opengis.filter.expression.PropertyName;\n+import org.opengis.referencing.FactoryException;\n+import org.opengis.referencing.crs.CoordinateReferenceSystem;\n+import org.opengis.referencing.operation.MathTransform;\n+import org.opengis.referencing.operation.TransformException;\n+\n+/**\n+ * Class to handle requested CRSs and ROI in order to determine if the request is involving any\n+ * granule with nativeCRS matching the targetCRS. Once the required flags and properties have been\n+ * set, it need to be initialized through the init method before any of its methods get used.\n+ */\n+class CRSRequestHandler {\n+    private static final Logger LOGGER = Logging.getLogger(CRSRequestHandler.class);\n+\n+    private static final FilterFactory2 FF = FeatureUtilities.DEFAULT_FILTER_FACTORY;\n+\n+    // ----------------\n+    // Input Parameters\n+    // ----------------\n+    private final GridCoverage2DReader reader;\n+\n+    private StructuredGridCoverage2DReader structuredReader;\n+    private final Geometry roi;\n+    private Filter filter;\n+    private CoordinateReferenceSystem originalTargetCRS;\n+    private CoordinateReferenceSystem originalNativeCRS;\n+    private Catalog catalog;\n+\n+    /**\n+     * Requested flag to use the best available resolution of granules in ROI, having their CRS\n+     * matching the targetCRS\n+     */\n+    private boolean useBestResolutionOnMatchingCRS;\n+\n+    /** Requested flag to minimizeReprojections on granules having CRS matching the Target one */\n+    private boolean minimizeReprojections;\n+\n+    // ------------------------------------------------\n+    // Computed parameters once initialization occurred\n+    // ------------------------------------------------\n+    private boolean initialized = false;\n+\n+    private boolean needsReprojection = false;\n+\n+    /** reporting if the request can actually use targetCRS as native */\n+    private boolean canUseTargetCrsAsNative = false;\n+\n+    /** The targetCRS actually selected for the processing. */\n+    private CoordinateReferenceSystem selectedTargetCRS;\n+\n+    private Map<String, DimensionDescriptor> descriptors = null;\n+\n+    private ROIManager roiManager;\n+\n+    /** The computed targetEnvelope after initialization */\n+    private ReferencedEnvelope targetEnvelope;\n+\n+    public CRSRequestHandler(\n+            GridCoverage2DReader reader,\n+            Catalog catalog,\n+            CoordinateReferenceSystem originalTargetCRS,\n+            Geometry roi) {\n+        this.reader = reader;\n+        this.catalog = catalog;\n+        this.originalTargetCRS = originalTargetCRS;\n+        this.selectedTargetCRS = originalTargetCRS;\n+        this.roi = roi;\n+        if (StructuredGridCoverage2DReader.class.isAssignableFrom(reader.getClass())) {\n+            structuredReader = (StructuredGridCoverage2DReader) reader;\n+        }\n+        originalNativeCRS = reader.getCoordinateReferenceSystem();\n+    }\n+\n+    public void setFilter(Filter filter) {\n+        this.filter = filter;\n+    }\n+\n+    public CoordinateReferenceSystem getSelectedNativeCRS() {\n+        return canUseTargetCrsAsNative ? originalTargetCRS : originalNativeCRS;\n+    }\n+\n+    public void setMinimizeReprojections(boolean minimizeReprojections) {\n+        this.minimizeReprojections = minimizeReprojections;\n+    }\n+\n+    public boolean canUseBestResolutionOnMatchingCRS() {\n+        return useBestResolutionOnMatchingCRS && canUseTargetCrsAsNative;\n+    }\n+\n+    public void setUseBestResolutionOnMatchingCRS(boolean bestResolutionOnMatchingCrs) {\n+        this.useBestResolutionOnMatchingCRS = bestResolutionOnMatchingCrs;\n+    }\n+\n+    public Map<String, DimensionDescriptor> getDescriptors() {\n+        return descriptors;\n+    }\n+\n+    public boolean needsReprojection() {\n+        return needsReprojection;\n+    }\n+\n+    public boolean hasStructuredReader() {\n+        return (structuredReader != null);\n+    }\n+\n+    public GridCoverage2DReader getReader() {\n+        return reader;\n+    }\n+\n+    public ROIManager getRoiManager() {\n+        return roiManager;\n+    }\n+\n+    public boolean canUseTargetCrsAsNative() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd793848af82b5606251bc43356f998ac9396081"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1621654ba19c4315fea692a0c1c553b381e22d17", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/1621654ba19c4315fea692a0c1c553b381e22d17", "committedDate": "2020-03-09T09:32:46Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd793848af82b5606251bc43356f998ac9396081", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/cd793848af82b5606251bc43356f998ac9396081", "committedDate": "2020-03-06T17:13:45Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}, "afterCommit": {"oid": "1621654ba19c4315fea692a0c1c553b381e22d17", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/1621654ba19c4315fea692a0c1c553b381e22d17", "committedDate": "2020-03-09T09:32:46Z", "message": "[GEOS-9512]: RasterDownload on Heterogeneous CRS ImageMosaics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1459, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}