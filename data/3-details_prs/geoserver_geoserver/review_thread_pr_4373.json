{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzUyODk2", "number": 4373, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowNzo0NFrOELE71g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjowMDo0NVrOELSfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUwNjQ2OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowNzo0NFrOGsfTeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMToxM1rOGsxmdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzQxOA==", "bodyText": "This code is almost a copy paste of the code above, but in one you check for a NULL value and here you checked for a NULL and emptiness. I would create an helper method and avoid the duplication.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449303418", "createdAt": "2020-07-02T23:07:44Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMzE5MA==", "bodyText": "Makes sense, adding it.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449603190", "createdAt": "2020-07-03T14:11:13Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzQxOA=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUwNzAyOnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzowODowNVrOGsfT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoyOToxNFrOGsyEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzUwNQ==", "bodyText": "Worth checking for emptiness like you do bellow?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449303505", "createdAt": "2020-07-02T23:08:05Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -164,6 +179,23 @@ public void handleServiceChange(\n                 (CacheConfiguration) wms.getRemoteResourcesCacheConfiguration().clone());\n     }\n \n+    private int getTimeoutMillis() {\n+        String timeoutStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        try {\n+            if (timeoutStr != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMDkyMQ==", "bodyText": "Replacing this with a common task method", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449610921", "createdAt": "2020-07-03T14:29:14Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -164,6 +179,23 @@ public void handleServiceChange(\n                 (CacheConfiguration) wms.getRemoteResourcesCacheConfiguration().clone());\n     }\n \n+    private int getTimeoutMillis() {\n+        String timeoutStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        try {\n+            if (timeoutStr != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwMzUwNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUxMjQzOnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxMTo0MVrOGsfXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozMDoxOFrOGsyGaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDM0Mw==", "bodyText": "Basically here you are swallowing the exception and use the default value:\n\nThis should be warning, not a debug log message.\nYou log message should be improved, it should log the value provided by the user and log the default value that will be used.\n3, Your log message should have a better context, onnection timeout is a bit too generic.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449304343", "createdAt": "2020-07-02T23:11:41Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -164,6 +179,23 @@ public void handleServiceChange(\n                 (CacheConfiguration) wms.getRemoteResourcesCacheConfiguration().clone());\n     }\n \n+    private int getTimeoutMillis() {\n+        String timeoutStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        try {\n+            if (timeoutStr != null) {\n+                int timeout = Integer.parseInt(timeoutStr);\n+                return timeout;\n+            }\n+        } catch (NumberFormatException ex) {\n+            LOGGER.log(\n+                    Level.FINE,\n+                    \"Number format exception trying to parse the connection timeout global variable\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMTM2OQ==", "bodyText": "Changed with better logging on a common task method", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449611369", "createdAt": "2020-07-03T14:30:18Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -164,6 +179,23 @@ public void handleServiceChange(\n                 (CacheConfiguration) wms.getRemoteResourcesCacheConfiguration().clone());\n     }\n \n+    private int getTimeoutMillis() {\n+        String timeoutStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        try {\n+            if (timeoutStr != null) {\n+                int timeout = Integer.parseInt(timeoutStr);\n+                return timeout;\n+            }\n+        } catch (NumberFormatException ex) {\n+            LOGGER.log(\n+                    Level.FINE,\n+                    \"Number format exception trying to parse the connection timeout global variable\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDM0Mw=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUxMzQ1OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxMjoyM1rOGsfXsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozMDozNVrOGsyG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDQ5Ng==", "bodyText": "Same comments as  above.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449304496", "createdAt": "2020-07-02T23:12:23Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMTQ4OA==", "bodyText": "Done", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449611488", "createdAt": "2020-07-03T14:30:35Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDQ5Ng=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUxNDk5OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxMzowOFrOGsfYiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo1NjoxMVrOGs0Fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDcxNQ==", "bodyText": "You should has some comment explaining what's going on here, I guess you use the time to implement the time-out?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449304715", "createdAt": "2020-07-02T23:13:08Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(\n+                        Level.FINE,\n+                        \"Bad number format on mas request time variable, proceeding to use the default.\",\n+                        ex);\n+            }\n+        }\n+        TimerTask task =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTE4Mw==", "bodyText": "Could this be a better option?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449305183", "createdAt": "2020-07-02T23:15:06Z", "author": {"login": "nmco"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(\n+                        Level.FINE,\n+                        \"Bad number format on mas request time variable, proceeding to use the default.\",\n+                        ex);\n+            }\n+        }\n+        TimerTask task =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDcxNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MzI0MQ==", "bodyText": "Yeah, the timeout should be defined at the http client level.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449463241", "createdAt": "2020-07-03T08:53:24Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(\n+                        Level.FINE,\n+                        \"Bad number format on mas request time variable, proceeding to use the default.\",\n+                        ex);\n+            }\n+        }\n+        TimerTask task =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDcxNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMTIwMg==", "bodyText": "The provided link is about the Connection Timeout.  This timer bound execution is for limiting the max whole-request time, for which there is not an available setting on HttpClient API. This approach follows a recommended strategy for aborting the request with a hard time limit from some technical articles about HttpClient usage.\nConnection and Socket data packet timeout configuration is provided on the GETMAPKVPREQUESTREADER_TIMEOUT global setting and sets the connection and socket timeout in the HttpClient API since it's available.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449601202", "createdAt": "2020-07-03T14:06:55Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(\n+                        Level.FINE,\n+                        \"Bad number format on mas request time variable, proceeding to use the default.\",\n+                        ex);\n+            }\n+        }\n+        TimerTask task =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDcxNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0MzkzNQ==", "bodyText": "Got it, it's similar to the WMS request limits. Good idea to have this one too, to avoid a variant of a slow DOS attack (the response is given, just to very slowly that the full SLD returns in hours or more, e.g., one char every few minutes)", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449643935", "createdAt": "2020-07-03T15:56:11Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/map/GetMapKvpRequestReader.java", "diffHunk": "@@ -764,6 +796,35 @@ private InputStream getHttpInputStream(URL styleUrl) throws IOException {\n         }\n     }\n \n+    /** Executes the HTTP request with the max request time settings. */\n+    private CloseableHttpResponse executeRequest(HttpCacheContext cacheContext, HttpGet httpget)\n+            throws IOException, ClientProtocolException {\n+        int hardTimeout = 60000;\n+        String maxTimeStr =\n+                GeoServerExtensions.getProperty(GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE);\n+        if (StringUtils.isNotEmpty(maxTimeStr)) {\n+            try {\n+                hardTimeout = Integer.parseInt(maxTimeStr);\n+            } catch (NumberFormatException ex) {\n+                LOGGER.log(\n+                        Level.FINE,\n+                        \"Bad number format on mas request time variable, proceeding to use the default.\",\n+                        ex);\n+            }\n+        }\n+        TimerTask task =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDcxNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUyMTAwOnYy", "diffSide": "RIGHT", "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxNjo1NVrOGsfcDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozMzowNFrOGsyLHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTYxMg==", "bodyText": "Left over?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449305612", "createdAt": "2020-07-02T23:16:55Z", "author": {"login": "nmco"}, "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "diffHunk": "@@ -1111,4 +1126,121 @@ public void testTransparencyValueInInspireGetMapRequest() throws Exception {\n         service.setCiteCompliant(false);\n         geoServer.save(service);\n     }\n+\n+    /** Tests the timeout parameter and the max execution time. */\n+    public void testSldTooLongLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(\n+                GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);\n+            }\n+            long millis = Instant.now().toEpochMilli() - startInstant.toEpochMilli();\n+            assertTrue(\"Max timeout should be 2 seconds\", millis < 2000);\n+        } finally {\n+            server.stop(0);\n+            System.clearProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        }\n+    }\n+\n+    /** Tests the timeout parameter. */\n+    public void testSldTimeoutLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);\n+            }\n+            long millis = Instant.now().toEpochMilli() - startInstant.toEpochMilli();\n+            assertTrue(\"Max timeout should be 2 seconds\", millis < 2000);\n+        } finally {\n+            server.stop(0);\n+            System.clearProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        }\n+    }\n+\n+    /** Creates a HTTP embedded server with a dynamic port for testing the configures timeout. */\n+    private HttpServer createServer() throws IOException {\n+        HttpServer server = HttpServer.create(new InetSocketAddress(\"localhost\", 0), 0);\n+        LOG.log(\n+                Level.INFO,\n+                \"Creating a mock http server at port: {0}\",\n+                server.getAddress().getPort());\n+        server.createContext(\"/sld\", createLongResponseHandler());\n+        ThreadPoolExecutor threadPoolExecutor =\n+                (ThreadPoolExecutor) Executors.newFixedThreadPool(2);\n+        server.setExecutor(threadPoolExecutor);\n+\n+        return server;\n+    }\n+\n+    private HttpHandler createLongResponseHandler() {\n+        HttpHandler handler =\n+                new HttpHandler() {\n+\n+                    @Override\n+                    public void handle(com.sun.net.httpserver.HttpExchange t) throws IOException {\n+                        try {\n+                            t.sendResponseHeaders(200, 5000000000l);\n+                            TimeUnit.SECONDS.sleep(4);\n+                            OutputStream outputStream = t.getResponseBody();\n+                            outputStream.write(\"This is a bad style\".getBytes());\n+                            outputStream.flush();\n+                            outputStream.close();\n+                        } catch (InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMjU3Mg==", "bodyText": "Yes, thanks, removing", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449612572", "createdAt": "2020-07-03T14:33:04Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "diffHunk": "@@ -1111,4 +1126,121 @@ public void testTransparencyValueInInspireGetMapRequest() throws Exception {\n         service.setCiteCompliant(false);\n         geoServer.save(service);\n     }\n+\n+    /** Tests the timeout parameter and the max execution time. */\n+    public void testSldTooLongLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(\n+                GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);\n+            }\n+            long millis = Instant.now().toEpochMilli() - startInstant.toEpochMilli();\n+            assertTrue(\"Max timeout should be 2 seconds\", millis < 2000);\n+        } finally {\n+            server.stop(0);\n+            System.clearProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        }\n+    }\n+\n+    /** Tests the timeout parameter. */\n+    public void testSldTimeoutLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);\n+            }\n+            long millis = Instant.now().toEpochMilli() - startInstant.toEpochMilli();\n+            assertTrue(\"Max timeout should be 2 seconds\", millis < 2000);\n+        } finally {\n+            server.stop(0);\n+            System.clearProperty(GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_TIMEOUT_VARIABLE);\n+        }\n+    }\n+\n+    /** Creates a HTTP embedded server with a dynamic port for testing the configures timeout. */\n+    private HttpServer createServer() throws IOException {\n+        HttpServer server = HttpServer.create(new InetSocketAddress(\"localhost\", 0), 0);\n+        LOG.log(\n+                Level.INFO,\n+                \"Creating a mock http server at port: {0}\",\n+                server.getAddress().getPort());\n+        server.createContext(\"/sld\", createLongResponseHandler());\n+        ThreadPoolExecutor threadPoolExecutor =\n+                (ThreadPoolExecutor) Executors.newFixedThreadPool(2);\n+        server.setExecutor(threadPoolExecutor);\n+\n+        return server;\n+    }\n+\n+    private HttpHandler createLongResponseHandler() {\n+        HttpHandler handler =\n+                new HttpHandler() {\n+\n+                    @Override\n+                    public void handle(com.sun.net.httpserver.HttpExchange t) throws IOException {\n+                        try {\n+                            t.sendResponseHeaders(200, 5000000000l);\n+                            TimeUnit.SECONDS.sleep(4);\n+                            OutputStream outputStream = t.getResponseBody();\n+                            outputStream.write(\"This is a bad style\".getBytes());\n+                            outputStream.flush();\n+                            outputStream.close();\n+                        } catch (InterruptedException e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTYxMg=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUyMTgzOnYy", "diffSide": "RIGHT", "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxNzoyM1rOGsfchw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDozNDo0MFrOGsyNsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTczNQ==", "bodyText": "Left over?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449305735", "createdAt": "2020-07-02T23:17:23Z", "author": {"login": "nmco"}, "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "diffHunk": "@@ -1111,4 +1126,121 @@ public void testTransparencyValueInInspireGetMapRequest() throws Exception {\n         service.setCiteCompliant(false);\n         geoServer.save(service);\n     }\n+\n+    /** Tests the timeout parameter and the max execution time. */\n+    public void testSldTooLongLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(\n+                GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYxMzIzMg==", "bodyText": "Yes, removing", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449613232", "createdAt": "2020-07-03T14:34:40Z", "author": {"login": "fernandor777"}, "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "diffHunk": "@@ -1111,4 +1126,121 @@ public void testTransparencyValueInInspireGetMapRequest() throws Exception {\n         service.setCiteCompliant(false);\n         geoServer.save(service);\n     }\n+\n+    /** Tests the timeout parameter and the max execution time. */\n+    public void testSldTooLongLookup() throws Exception {\n+        HttpServer server = createServer();\n+        System.setProperty(\n+                GetMapKvpRequestReader.GETMAPKVPREQUESTREADER_MAXREQUEST_TIME_VARIABLE, \"1000\");\n+        try {\n+            WMS wms = new WMS(getGeoServer());\n+            reader = new GetMapKvpRequestReader(wms);\n+            server.start();\n+            int port = server.getAddress().getPort();\n+\n+            // nothing matches the required style name\n+            HashMap kvp = new HashMap();\n+            URL url = new URL(\"http://localhost:\" + port + \"/sld/style.sld\");\n+            kvp.put(\"sld\", URLDecoder.decode(url.toExternalForm(), \"UTF-8\"));\n+            kvp.put(\n+                    \"layers\",\n+                    MockData.BASIC_POLYGONS.getPrefix()\n+                            + \":\"\n+                            + MockData.BASIC_POLYGONS.getLocalPart());\n+            kvp.put(\"styles\", \"ThisStyleDoesNotExists\");\n+\n+            GetMapRequest request = (GetMapRequest) reader.createRequest();\n+            Instant startInstant = Instant.now();\n+            try {\n+                reader.setLaxStyleMatchAllowed(false);\n+                request =\n+                        (GetMapRequest)\n+                                reader.read(request, parseKvp(kvp), caseInsensitiveKvp(kvp));\n+                fail(\"The style looked up, 'ThisStyleDoesNotExists', should not have been found\");\n+            } catch (ServiceException e) {\n+                // System.out.println(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNTczNQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUyNTIwOnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/services/wms/global.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxOTo0OFrOGsfepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo1MzoxMlrOGs0B0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjI3OA==", "bodyText": "I would try to improve the name, for example GET_MAP_KVP_REQUEST_READER_TIMEOUT_MS, anyway, the name seems to imply that is a time-out specific WMS GetMAP requests encoded as KVP, but no the description? What about WMS requests encoded as POST (GeoServer supports this although this is not standard).", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449306278", "createdAt": "2020-07-02T23:19:48Z", "author": {"login": "nmco"}, "path": "doc/en/user/source/services/wms/global.rst", "diffHunk": "@@ -25,3 +25,13 @@ ENABLE_JSONP\n \n Can be ``true`` or ``false`` (defaults to: ``false``).\n When ``true`` the JSONP (text/javascript) output format is enabled.\n+\n+GETMAPKVPREQUESTREADER_TIMEOUT\n+-------------\n+\n+Sets the max connection timeout time in milliseconds, to connect or await new socket packets in the KVP request reader.  The default is 30000.\n+\n+GETMAPKVPREQUESTREADER_MAX_REQUEST_TIME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0Mjk2MA==", "bodyText": "In the true POST case (XML) the SLD in included in the POST body itself, there is no extra remote call to make.\nThen there is the POST form case, which is just another KVP in a different sauce (the form params are in post body instead of the query part of the URL).\nHowever, the names still look bad to me, only a GeoServer dev knows what a KVP reader is. It should be something like REMOTE_STYLE_MAX_REQUEST_TIME instead.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449642960", "createdAt": "2020-07-03T15:53:12Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/services/wms/global.rst", "diffHunk": "@@ -25,3 +25,13 @@ ENABLE_JSONP\n \n Can be ``true`` or ``false`` (defaults to: ``false``).\n When ``true`` the JSONP (text/javascript) output format is enabled.\n+\n+GETMAPKVPREQUESTREADER_TIMEOUT\n+-------------\n+\n+Sets the max connection timeout time in milliseconds, to connect or await new socket packets in the KVP request reader.  The default is 30000.\n+\n+GETMAPKVPREQUESTREADER_MAX_REQUEST_TIME", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjI3OA=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUyNTM0OnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/services/wms/global.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoxOTo1N1rOGsfeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo1NDoyNFrOGs0DLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjI5OQ==", "bodyText": "Same as bellow.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449306299", "createdAt": "2020-07-02T23:19:57Z", "author": {"login": "nmco"}, "path": "doc/en/user/source/services/wms/global.rst", "diffHunk": "@@ -25,3 +25,13 @@ ENABLE_JSONP\n \n Can be ``true`` or ``false`` (defaults to: ``false``).\n When ``true`` the JSONP (text/javascript) output format is enabled.\n+\n+GETMAPKVPREQUESTREADER_TIMEOUT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjY0Nw==", "bodyText": "Would it be worth to allow this configuration \\ limits to be set on GeoServer UI? On the global configuration page or WMS service  since this looks specific?", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449306647", "createdAt": "2020-07-02T23:21:22Z", "author": {"login": "nmco"}, "path": "doc/en/user/source/services/wms/global.rst", "diffHunk": "@@ -25,3 +25,13 @@ ENABLE_JSONP\n \n Can be ``true`` or ``false`` (defaults to: ``false``).\n When ``true`` the JSONP (text/javascript) output format is enabled.\n+\n+GETMAPKVPREQUESTREADER_TIMEOUT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjI5OQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0MzMxMQ==", "bodyText": "Name should be something like REMOTE_STYLE_TIMEOUT. A GUI entry would find a good place among the WMS service limits IMHO.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449643311", "createdAt": "2020-07-03T15:54:24Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/services/wms/global.rst", "diffHunk": "@@ -25,3 +25,13 @@ ENABLE_JSONP\n \n Can be ``true`` or ``false`` (defaults to: ``false``).\n When ``true`` the JSONP (text/javascript) output format is enabled.\n+\n+GETMAPKVPREQUESTREADER_TIMEOUT", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNjI5OQ=="}, "originalCommit": {"oid": "35fe467eea32b0899d4fda836f01d1f3f4842c62"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjcyODI4OnYy", "diffSide": "RIGHT", "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjowMDo0NVrOGs0LYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjowMDo0NVrOGs0LYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0NTQxMQ==", "bodyText": "Hmmm... com.sun? This is not a public API... however, it does seem to work even in JDK 11, so I guess it won't be a problem short term.\nAs a possible alternative, see wiremock with random ports: http://wiremock.org/docs/getting-started/\nBut I would not get crazy about it, it's just a test after all, probably good as is.", "url": "https://github.com/geoserver/geoserver/pull/4373#discussion_r449645411", "createdAt": "2020-07-03T16:00:45Z", "author": {"login": "aaime"}, "path": "src/wms/src/test/java/org/geoserver/wms/map/GetMapKvpRequestReaderTest.java", "diffHunk": "@@ -9,20 +9,31 @@\n import static org.hamcrest.CoreMatchers.not;\n import static org.junit.Assert.assertThat;\n \n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ef3a4f2c60f4a84e7b27d1b51c5ecc5a850ba10"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3952, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}