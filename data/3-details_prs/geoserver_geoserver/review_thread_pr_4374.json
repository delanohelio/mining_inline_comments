{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzcxMDU3", "number": 4374, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoyNzo1MlrOELFICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoyOTowMVrOELFIoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUzNzY4OnYy", "diffSide": "RIGHT", "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoyNzo1MlrOGsfl_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDo1NTo1NFrOGsywFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODE1OQ==", "bodyText": "MonfoDB -> MongoDB", "url": "https://github.com/geoserver/geoserver/pull/4374#discussion_r449308159", "createdAt": "2020-07-02T23:27:52Z", "author": {"login": "nmco"}, "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.service;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.geoserver.rest.RestException;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.data.complex.FeatureTypeMapping;\n+import org.geotools.data.mongodb.MongoDataStore;\n+import org.opengis.feature.type.Name;\n+import org.springframework.http.HttpStatus;\n+\n+/** Util methods for AppSchema centric logic. */\n+class AppSchemaUtils {\n+\n+    /**\n+     * Returns the internal MonfoDB store from the AppSchema data store with the provided store ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad1afdf0a68975305ff4654972141e1075b8834"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODIzMw==", "bodyText": "AppSchema -> App-Schema", "url": "https://github.com/geoserver/geoserver/pull/4374#discussion_r449308233", "createdAt": "2020-07-02T23:28:15Z", "author": {"login": "nmco"}, "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.service;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.geoserver.rest.RestException;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.data.complex.FeatureTypeMapping;\n+import org.geotools.data.mongodb.MongoDataStore;\n+import org.opengis.feature.type.Name;\n+import org.springframework.http.HttpStatus;\n+\n+/** Util methods for AppSchema centric logic. */\n+class AppSchemaUtils {\n+\n+    /**\n+     * Returns the internal MonfoDB store from the AppSchema data store with the provided store ID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODE1OQ=="}, "originalCommit": {"oid": "3ad1afdf0a68975305ff4654972141e1075b8834"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyMjAzOA==", "bodyText": "Fixed, thanks", "url": "https://github.com/geoserver/geoserver/pull/4374#discussion_r449622038", "createdAt": "2020-07-03T14:55:54Z", "author": {"login": "fernandor777"}, "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.service;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.geoserver.rest.RestException;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.data.complex.FeatureTypeMapping;\n+import org.geotools.data.mongodb.MongoDataStore;\n+import org.opengis.feature.type.Name;\n+import org.springframework.http.HttpStatus;\n+\n+/** Util methods for AppSchema centric logic. */\n+class AppSchemaUtils {\n+\n+    /**\n+     * Returns the internal MonfoDB store from the AppSchema data store with the provided store ID.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODE1OQ=="}, "originalCommit": {"oid": "3ad1afdf0a68975305ff4654972141e1075b8834"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDUzOTIxOnYy", "diffSide": "RIGHT", "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQyMzoyOTowMVrOGsfm5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDo1NjowMlrOGsywRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODM4OQ==", "bodyText": "JavaDoc?", "url": "https://github.com/geoserver/geoserver/pull/4374#discussion_r449308389", "createdAt": "2020-07-02T23:29:01Z", "author": {"login": "nmco"}, "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.service;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.geoserver.rest.RestException;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.data.complex.FeatureTypeMapping;\n+import org.geotools.data.mongodb.MongoDataStore;\n+import org.opengis.feature.type.Name;\n+import org.springframework.http.HttpStatus;\n+\n+/** Util methods for AppSchema centric logic. */\n+class AppSchemaUtils {\n+\n+    /**\n+     * Returns the internal MonfoDB store from the AppSchema data store with the provided store ID.\n+     */\n+    static MongoDataStore getMongoStoreById(\n+            String storeId, final AppSchemaDataAccess appSchemaStore) throws IOException {\n+        MongoDataStore mongoStore = null;\n+        List<Name> names = appSchemaStore.getNames();\n+        for (Name ename : names) {\n+            FeatureTypeMapping mapping = appSchemaStore.getMappingByName(ename);\n+            if (mapping.getSourceDatastoreId().filter(id -> storeId.equals(id)).isPresent()) {\n+                DataAccess internalStore = mapping.getSource().getDataStore();\n+                if (!(internalStore instanceof MongoDataStore)) {\n+                    throw new RestException(\n+                            \"Internal Datastore is not a MongoDB one.\", HttpStatus.BAD_REQUEST);\n+                }\n+                mongoStore = (MongoDataStore) internalStore;\n+                break;\n+            }\n+        }\n+        if (mongoStore == null) {\n+            throw new RestException(\"Internal Datastore not found.\", HttpStatus.BAD_REQUEST);\n+        }\n+        return mongoStore;\n+    }\n+\n+    /** Returns the Mongo schemas in use based on the store id. */\n+    static Set<String> extractUsedSchemas(AppSchemaDataAccess appSchemaStore, String storeId)\n+            throws IOException {\n+        final List<Name> names = appSchemaStore.getNames();\n+        final Set<String> schemas = new HashSet<>();\n+        for (Name en : names) {\n+            FeatureTypeMapping mapping = appSchemaStore.getMappingByName(en);\n+            String eid = mapping.getSourceDatastoreId().orElse(null);\n+            if (Objects.equals(storeId, eid)) {\n+                Name schemaName = mapping.getSource().getSchema().getName();\n+                schemas.add(schemaName.getLocalPart());\n+            }\n+        }\n+        return Collections.unmodifiableSet(schemas);\n+    }\n+\n+    /** Returns the store ID for the MongoDataStore provided instance. */\n+    static String getStoreId(AppSchemaDataAccess appSchemaStore, MongoDataStore mongoStore)\n+            throws IOException {\n+        for (Name etn : appSchemaStore.getNames()) {\n+            FeatureTypeMapping featureTypeMapping = appSchemaStore.getMappingByName(etn);\n+            if (Objects.equals(mongoStore, featureTypeMapping.getSource().getDataStore()))\n+                return featureTypeMapping.getSourceDatastoreId().orElse(null);\n+        }\n+        return null;\n+    }\n+\n+    static void fillMongoStoresSet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad1afdf0a68975305ff4654972141e1075b8834"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyMjA4Ng==", "bodyText": "Added", "url": "https://github.com/geoserver/geoserver/pull/4374#discussion_r449622086", "createdAt": "2020-07-03T14:56:02Z", "author": {"login": "fernandor777"}, "path": "src/extension/mongodb/src/main/java/org/geoserver/rest/service/AppSchemaUtils.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.service;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.geoserver.rest.RestException;\n+import org.geotools.data.DataAccess;\n+import org.geotools.data.complex.AppSchemaDataAccess;\n+import org.geotools.data.complex.FeatureTypeMapping;\n+import org.geotools.data.mongodb.MongoDataStore;\n+import org.opengis.feature.type.Name;\n+import org.springframework.http.HttpStatus;\n+\n+/** Util methods for AppSchema centric logic. */\n+class AppSchemaUtils {\n+\n+    /**\n+     * Returns the internal MonfoDB store from the AppSchema data store with the provided store ID.\n+     */\n+    static MongoDataStore getMongoStoreById(\n+            String storeId, final AppSchemaDataAccess appSchemaStore) throws IOException {\n+        MongoDataStore mongoStore = null;\n+        List<Name> names = appSchemaStore.getNames();\n+        for (Name ename : names) {\n+            FeatureTypeMapping mapping = appSchemaStore.getMappingByName(ename);\n+            if (mapping.getSourceDatastoreId().filter(id -> storeId.equals(id)).isPresent()) {\n+                DataAccess internalStore = mapping.getSource().getDataStore();\n+                if (!(internalStore instanceof MongoDataStore)) {\n+                    throw new RestException(\n+                            \"Internal Datastore is not a MongoDB one.\", HttpStatus.BAD_REQUEST);\n+                }\n+                mongoStore = (MongoDataStore) internalStore;\n+                break;\n+            }\n+        }\n+        if (mongoStore == null) {\n+            throw new RestException(\"Internal Datastore not found.\", HttpStatus.BAD_REQUEST);\n+        }\n+        return mongoStore;\n+    }\n+\n+    /** Returns the Mongo schemas in use based on the store id. */\n+    static Set<String> extractUsedSchemas(AppSchemaDataAccess appSchemaStore, String storeId)\n+            throws IOException {\n+        final List<Name> names = appSchemaStore.getNames();\n+        final Set<String> schemas = new HashSet<>();\n+        for (Name en : names) {\n+            FeatureTypeMapping mapping = appSchemaStore.getMappingByName(en);\n+            String eid = mapping.getSourceDatastoreId().orElse(null);\n+            if (Objects.equals(storeId, eid)) {\n+                Name schemaName = mapping.getSource().getSchema().getName();\n+                schemas.add(schemaName.getLocalPart());\n+            }\n+        }\n+        return Collections.unmodifiableSet(schemas);\n+    }\n+\n+    /** Returns the store ID for the MongoDataStore provided instance. */\n+    static String getStoreId(AppSchemaDataAccess appSchemaStore, MongoDataStore mongoStore)\n+            throws IOException {\n+        for (Name etn : appSchemaStore.getNames()) {\n+            FeatureTypeMapping featureTypeMapping = appSchemaStore.getMappingByName(etn);\n+            if (Objects.equals(mongoStore, featureTypeMapping.getSource().getDataStore()))\n+                return featureTypeMapping.getSourceDatastoreId().orElse(null);\n+        }\n+        return null;\n+    }\n+\n+    static void fillMongoStoresSet(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwODM4OQ=="}, "originalCommit": {"oid": "3ad1afdf0a68975305ff4654972141e1075b8834"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}