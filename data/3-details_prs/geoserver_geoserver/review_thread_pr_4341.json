{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NzU2NDgw", "number": 4341, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0ODowNlrOEJqvdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MDozOVrOEJq0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTcyOTE5OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreeMarkerTemplateManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo0ODowNlrOGqRzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo1MDoxOFrOGre-rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NTAzNw==", "bodyText": "This call is made every time a wrapping happens, meaning:\n\nThe indications provided in system variables/env vars/context variables are processed over and over\nAll the warning message are repeated for each request\n\nSince the configuration is static by nature (should not change at runtime), all this should be processed once only in a static initializer that builds a map with the necessary configuration. This map is then going to be merged into the SimpleHash every time.\nI can see how that would make testing harder, I guess you can add a protected static method \"reset(String rulesSpec)\" that changes the contents of that map, which the test will use.", "url": "https://github.com/geoserver/geoserver/pull/4341#discussion_r446985037", "createdAt": "2020-06-29T13:48:06Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreeMarkerTemplateManager.java", "diffHunk": "@@ -66,11 +85,43 @@ public TemplateModel wrap(Object object) throws TemplateModelException {\n                                     \"geoJSON\",\n                                     getStaticModel(\n                                             \"org.geoserver.wms.featureinfo.GeoJSONTemplateManager\"));\n+                            addConfiguredStatics(map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac9373b2d61765d7a5235fa7a74f9a420861d45"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0OTUxOA==", "bodyText": "Yes, you are right, I will adjust it.", "url": "https://github.com/geoserver/geoserver/pull/4341#discussion_r448249518", "createdAt": "2020-07-01T09:50:18Z", "author": {"login": "awaterme"}, "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreeMarkerTemplateManager.java", "diffHunk": "@@ -66,11 +85,43 @@ public TemplateModel wrap(Object object) throws TemplateModelException {\n                                     \"geoJSON\",\n                                     getStaticModel(\n                                             \"org.geoserver.wms.featureinfo.GeoJSONTemplateManager\"));\n+                            addConfiguredStatics(map);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4NTAzNw=="}, "originalCommit": {"oid": "2ac9373b2d61765d7a5235fa7a74f9a420861d45"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTc0MDg5OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreemarkerStaticsAccessRule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzo1MDozOVrOGqR6fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo1MDozN1rOGre_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4Njg3OA==", "bodyText": "Having UNRESTRICTED and DISABLED be both using the default constructor is confusing. I see how it's working, checking an equality in Unrestricted, but it's quite odd. Please change it to have a constructor taking a boolean, the unrestricted flag, instead (so unrestricted would be new FreemarkerStaticsAccessRule(true) and disabled would be new FreemarkerStaticsAccessRule(false).", "url": "https://github.com/geoserver/geoserver/pull/4341#discussion_r446986878", "createdAt": "2020-06-29T13:50:39Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreemarkerStaticsAccessRule.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.wms.featureinfo;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+import javax.lang.model.SourceVersion;\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Represents the rules for accessing static members from within Freemarker templates.\n+ *\n+ * @author awaterme\n+ */\n+class FreemarkerStaticsAccessRule {\n+\n+    public static final class RuleItem {\n+        /** the class to allow access to */\n+        private Class<?> clazz;\n+        /** the alias (variable name) used to expose the statics of the class */\n+        private String alias;\n+        /**\n+         * true, in case an number prefix was appended to keep the names distinct. Unlikely to occur\n+         * in real world\n+         */\n+        private boolean numberedAlias;\n+\n+        public RuleItem(Class<?> clazz, String alias, boolean numberedAlias) {\n+            super();\n+            this.clazz = clazz;\n+            this.alias = alias;\n+            this.numberedAlias = numberedAlias;\n+        }\n+\n+        public String getClassName() {\n+            return clazz.getName();\n+        }\n+\n+        public String getAlias() {\n+            return alias;\n+        }\n+\n+        public boolean isNumberedAlias() {\n+            return numberedAlias;\n+        }\n+    }\n+\n+    /** Instance signals unrestricted access */\n+    private static final FreemarkerStaticsAccessRule UNRESTRICTED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac9373b2d61765d7a5235fa7a74f9a420861d45"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0OTcwOQ==", "bodyText": "Yes, you are right, I will adjust it.", "url": "https://github.com/geoserver/geoserver/pull/4341#discussion_r448249709", "createdAt": "2020-07-01T09:50:37Z", "author": {"login": "awaterme"}, "path": "src/wms/src/main/java/org/geoserver/wms/featureinfo/FreemarkerStaticsAccessRule.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.wms.featureinfo;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+import javax.lang.model.SourceVersion;\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Represents the rules for accessing static members from within Freemarker templates.\n+ *\n+ * @author awaterme\n+ */\n+class FreemarkerStaticsAccessRule {\n+\n+    public static final class RuleItem {\n+        /** the class to allow access to */\n+        private Class<?> clazz;\n+        /** the alias (variable name) used to expose the statics of the class */\n+        private String alias;\n+        /**\n+         * true, in case an number prefix was appended to keep the names distinct. Unlikely to occur\n+         * in real world\n+         */\n+        private boolean numberedAlias;\n+\n+        public RuleItem(Class<?> clazz, String alias, boolean numberedAlias) {\n+            super();\n+            this.clazz = clazz;\n+            this.alias = alias;\n+            this.numberedAlias = numberedAlias;\n+        }\n+\n+        public String getClassName() {\n+            return clazz.getName();\n+        }\n+\n+        public String getAlias() {\n+            return alias;\n+        }\n+\n+        public boolean isNumberedAlias() {\n+            return numberedAlias;\n+        }\n+    }\n+\n+    /** Instance signals unrestricted access */\n+    private static final FreemarkerStaticsAccessRule UNRESTRICTED =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4Njg3OA=="}, "originalCommit": {"oid": "2ac9373b2d61765d7a5235fa7a74f9a420861d45"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3942, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}