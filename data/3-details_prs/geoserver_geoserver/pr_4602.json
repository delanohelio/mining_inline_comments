{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzkzMTc0", "number": 4602, "title": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets", "bodyText": "Adding support for COG harvest on ImageMosaic using REST\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or not applicable.\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by Continuous Integration after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by Continuous Integration after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Commits changing the REST API, or any configuration object, should check if the REST API docs (Swagger YAML files and classic documentation) need to be updated.", "createdAt": "2020-12-14T11:51:40Z", "url": "https://github.com/geoserver/geoserver/pull/4602", "merged": true, "mergeCommit": {"oid": "b8440c3fcc7198264563ff88a253ad5017c3d385"}, "closed": true, "closedAt": "2020-12-21T12:31:41Z", "author": {"login": "dromagnoli"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmGQRvABqjQxMDkzODc5NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnVndHgBqjQxMjkxNjI1NzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c9fbfd636d5efeee0702beefa59893cd9d72111", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/3c9fbfd636d5efeee0702beefa59893cd9d72111", "committedDate": "2020-12-14T11:50:10Z", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets"}, "afterCommit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "committedDate": "2020-12-14T14:02:37Z", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzYyOTEz", "url": "https://github.com/geoserver/geoserver/pull/4602#pullrequestreview-554762913", "createdAt": "2020-12-17T16:18:14Z", "commit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjoxODoxNVrOIH9a6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjozNjo1NVrOIH-Scw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIxNzI1Nw==", "bodyText": "This test talks to a remote resource that might not be available (e.g., machine not connected to internet), or the image in question might be eventually removed, or moved. Is it possible to make it an online test, so that it runs only when a  given profile is used, or at least check if the remote file is there?\nCould be done with an Assume I suppose, and code similar to this to verify the remote file is at least reachable: https://github.com/geoserver/geoserver/blob/master/src/web/core/src/test/java/org/geoserver/web/GeoServerWicketOnlineTestSupport.java#L19\nI was also considering calling this \"CogRemoteHarvestOnlineTest\", but unlike GeoTools, GeoServer does not have online test skipping, AFAIK.", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545217257", "createdAt": "2020-12-17T16:18:15Z", "author": {"login": "aaime"}, "path": "src/community/cog/src/test/java/org/geoserver/rest/catalog/CogRemoteHarvestTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.rest.catalog;\n+\n+import static org.custommonkey.xmlunit.XMLAssert.assertXpathEvaluatesTo;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.custommonkey.xmlunit.SimpleNamespaceContext;\n+import org.custommonkey.xmlunit.XMLAssert;\n+import org.custommonkey.xmlunit.XMLUnit;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.rest.RestBaseController;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.w3c.dom.Document;\n+\n+public class CogRemoteHarvestTest extends CatalogRESTTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMDY5Nw==", "bodyText": "A bit dangerous, there is no indication of the charset that might have been used.\nBetter to get the reader from the request instead of the stream:\n   test = IOUtils.toString(request.getReader()); \n\nUsing commons-io IOUtils.", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545230697", "createdAt": "2020-12-17T16:35:57Z", "author": {"login": "aaime"}, "path": "src/restconfig/src/main/java/org/geoserver/rest/catalog/CoverageStoreFileController.java", "diffHunk": "@@ -453,4 +459,27 @@ protected Resource findPrimaryFile(Resource directory, String format) {\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);\n     }\n+\n+    /** Return the remote URL provided in the request. */\n+    protected URL handleRemoteUrl(HttpServletRequest request) {\n+\n+        try {\n+            // get the URL to be harvested\n+            final String stringURL;\n+            try (InputStream inStream = request.getInputStream()) {\n+                stringURL = IOUtils.getStringFromStream(inStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzMTQ3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                        if (t instanceof RestException) {\n          \n          \n            \n                            throw (RestException) t;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            throw new RestException(\n          \n          \n            \n                                    \"Error while retrieving the remote URL:\",\n          \n          \n            \n                                    HttpStatus.INTERNAL_SERVER_ERROR,\n          \n          \n            \n                                    t);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (RestException t) {\n          \n          \n            \n                       throw t;\n          \n          \n            \n                    } catch (Throwable t) {\n          \n          \n            \n                            throw new RestException(\n          \n          \n            \n                                    \"Error while retrieving the remote URL:\",\n          \n          \n            \n                                    HttpStatus.INTERNAL_SERVER_ERROR,\n          \n          \n            \n                                    t);\n          \n          \n            \n                    }", "url": "https://github.com/geoserver/geoserver/pull/4602#discussion_r545231475", "createdAt": "2020-12-17T16:36:55Z", "author": {"login": "aaime"}, "path": "src/restconfig/src/main/java/org/geoserver/rest/catalog/CoverageStoreFileController.java", "diffHunk": "@@ -453,4 +459,27 @@ protected Resource findPrimaryFile(Resource directory, String format) {\n         return handleFileUpload(\n                 storeName, workspaceName, filename, method, format, directory, request);\n     }\n+\n+    /** Return the remote URL provided in the request. */\n+    protected URL handleRemoteUrl(HttpServletRequest request) {\n+\n+        try {\n+            // get the URL to be harvested\n+            final String stringURL;\n+            try (InputStream inStream = request.getInputStream()) {\n+                stringURL = IOUtils.getStringFromStream(inStream);\n+                URL remoteUrl = new URL(stringURL);\n+                return remoteUrl;\n+            }\n+        } catch (Throwable t) {\n+            if (t instanceof RestException) {\n+                throw (RestException) t;\n+            } else {\n+                throw new RestException(\n+                        \"Error while retrieving the remote URL:\",\n+                        HttpStatus.INTERNAL_SERVER_ERROR,\n+                        t);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aa31463a3b3689b8e8d130b03d31db6bffb185f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/2aa31463a3b3689b8e8d130b03d31db6bffb185f", "committedDate": "2020-12-18T10:31:00Z", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/5850e130dc81d2aa2be0552f84ee4daf4eef4b14", "committedDate": "2020-12-14T14:02:37Z", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets"}, "afterCommit": {"oid": "2aa31463a3b3689b8e8d130b03d31db6bffb185f", "author": {"user": {"login": "dromagnoli", "name": "Daniele Romagnoli"}}, "url": "https://github.com/geoserver/geoserver/commit/2aa31463a3b3689b8e8d130b03d31db6bffb185f", "committedDate": "2020-12-18T10:31:00Z", "message": "[GEOS-9828]: REST support ImageMosaic Harvesting COG datasets"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1522, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}