{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODAzODMw", "number": 4417, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxOToyMVrOEQLIAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMjoyMFrOEQLO6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk0OTQ2OnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/data/database/postgis.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxOToyMVrOG0L7SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo1NjowM1rOG0yuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NDUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n          \n          \n            \n            GeoServer is able to translate the ``jsonPointer`` function to a query using PostgreSQL support for JSON types.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457374537", "createdAt": "2020-07-20T13:19:21Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxMDE4MQ==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r458010181", "createdAt": "2020-07-21T10:56:03Z", "author": {"login": "taba90"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NDUzNw=="}, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk1OTk4OnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/data/database/postgis.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMToxMVrOG0MBcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo1NjowOFrOG0yudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NjExMg==", "bodyText": "Bullet lists in english are different than in italian, you should start each sentence with a capital and complete the sentence with a period, not a semicolon.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457376112", "createdAt": "2020-07-20T13:21:11Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxMDIzMQ==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r458010231", "createdAt": "2020-07-21T10:56:08Z", "author": {"login": "taba90"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NjExMg=="}, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mzk2NzEzOnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/data/database/postgis.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMjoyMFrOG0MFkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo1NjoxNFrOG0yunw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Anyway it is worth mentioning that, according to the PostgreSQL documentation, jsonb is the recommended type to be used since it is faster to process. \n          \n          \n            \n            Anyways, the the PostgreSQL documentation recommends usage of jsonb, as it's is faster to process.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457377171", "createdAt": "2020-07-20T13:22:20Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;\n+\n+* the function is able to select attributes inside json arrays by specifying the index of the target element in the json path eg. ``'/path/to/array/element/0'``;\n+\n+* when accessing a JSON property it is implicitly assumed that the same property will have the same type on all features, otherwise a cast exception will be thrown by the database;\n+\n+* GeoServer will perform a cast automatically to the expect type from the evaluation; the cast is completely delegated to the database;\n+\n+* if the property doesn't exists no errors will be issued, but the features that have that property will be excluded; hence the property we whish to query is not mandatory in all features\n+\n+Examples\n+````````\n+\n+Having a json column storing jsonvalues like the following,\n+\n+.. code-block :: json\n+\n+  { \"name\": \"city name\", \n+    \"description\": \"the city description\",\n+    \"districts\": [\n+      {\n+       \"name\":\"district1\",\n+       \"population\": 2000\n+      },\n+      {\n+       \"name\":\"district2\",\n+       \"population\": 5000\n+      }\n+    ]\n+    \"population\":{\n+      \"average_age\": 35,\n+      \"toal\": 50000 \n+    }\n+  }\n+\n+and assuming an attribute name as ``city``, valid jsonPointer functions would be: \n+\n+* ``jsonPointer(city, '/name')``, \n+\n+* ``jsonPointer(city, '/population/average_age')``, \n+\n+* ``jsonPointer(city, '/districts/0/name')``.\n+\n+An example cql_filter would then be ``jsonPointer(city, '/population/average_age') > 30``.\n+\n+While an example rule in a sld style sheet could be:\n+\n+.. code-block:: xml \n+\n+   <Rule>\n+     <Name>Cities</Name>\n+        <ogc:Filter>\n+          <ogc:PropertyIsEqualTo>\n+            <ogc:Function name=\"jsonPointer\">\n+              <ogc:PropertyName>city</ogc:PropertyName>\n+              <ogc:Literal>/population/average_age</ogc:Literal>\n+            </ogc:Function>\n+            <ogc:Literal>35</ogc:Literal>\n+          </ogc:PropertyIsEqualTo>\n+          </ogc:Filter>          \n+        <PointSymbolizer>\n+          <Graphic>\n+            <Mark>\n+              <WellKnownName>square</WellKnownName>\n+                <Fill>\n+                  <CssParameter name=\"fill\">#FF0000</CssParameter>\n+                </Fill>\n+            </Mark>\n+            <Size>16</Size>\n+          </Graphic>\n+       </PointSymbolizer>\n+    </Rule>\n+\n+\n+DataTypes\n+`````````\n+\n+PostgreSQL defines two JSON datatypes: \n+\n+ * ``json`` that stores an exact copy of the input text;\n+\n+ * ``jsonb`` which store the value in a decomposed binary format.\n+\n+The jsonPointer function supports both, as well as the text format if it contains a valid json representation. \n+Anyway it is worth mentioning that, according to the PostgreSQL documentation, jsonb is the recommended type to be used since it is faster to process. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxMDI3MQ==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r458010271", "createdAt": "2020-07-21T10:56:14Z", "author": {"login": "taba90"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;\n+\n+* the function is able to select attributes inside json arrays by specifying the index of the target element in the json path eg. ``'/path/to/array/element/0'``;\n+\n+* when accessing a JSON property it is implicitly assumed that the same property will have the same type on all features, otherwise a cast exception will be thrown by the database;\n+\n+* GeoServer will perform a cast automatically to the expect type from the evaluation; the cast is completely delegated to the database;\n+\n+* if the property doesn't exists no errors will be issued, but the features that have that property will be excluded; hence the property we whish to query is not mandatory in all features\n+\n+Examples\n+````````\n+\n+Having a json column storing jsonvalues like the following,\n+\n+.. code-block :: json\n+\n+  { \"name\": \"city name\", \n+    \"description\": \"the city description\",\n+    \"districts\": [\n+      {\n+       \"name\":\"district1\",\n+       \"population\": 2000\n+      },\n+      {\n+       \"name\":\"district2\",\n+       \"population\": 5000\n+      }\n+    ]\n+    \"population\":{\n+      \"average_age\": 35,\n+      \"toal\": 50000 \n+    }\n+  }\n+\n+and assuming an attribute name as ``city``, valid jsonPointer functions would be: \n+\n+* ``jsonPointer(city, '/name')``, \n+\n+* ``jsonPointer(city, '/population/average_age')``, \n+\n+* ``jsonPointer(city, '/districts/0/name')``.\n+\n+An example cql_filter would then be ``jsonPointer(city, '/population/average_age') > 30``.\n+\n+While an example rule in a sld style sheet could be:\n+\n+.. code-block:: xml \n+\n+   <Rule>\n+     <Name>Cities</Name>\n+        <ogc:Filter>\n+          <ogc:PropertyIsEqualTo>\n+            <ogc:Function name=\"jsonPointer\">\n+              <ogc:PropertyName>city</ogc:PropertyName>\n+              <ogc:Literal>/population/average_age</ogc:Literal>\n+            </ogc:Function>\n+            <ogc:Literal>35</ogc:Literal>\n+          </ogc:PropertyIsEqualTo>\n+          </ogc:Filter>          \n+        <PointSymbolizer>\n+          <Graphic>\n+            <Mark>\n+              <WellKnownName>square</WellKnownName>\n+                <Fill>\n+                  <CssParameter name=\"fill\">#FF0000</CssParameter>\n+                </Fill>\n+            </Mark>\n+            <Size>16</Size>\n+          </Graphic>\n+       </PointSymbolizer>\n+    </Rule>\n+\n+\n+DataTypes\n+`````````\n+\n+PostgreSQL defines two JSON datatypes: \n+\n+ * ``json`` that stores an exact copy of the input text;\n+\n+ * ``jsonb`` which store the value in a decomposed binary format.\n+\n+The jsonPointer function supports both, as well as the text format if it contains a valid json representation. \n+Anyway it is worth mentioning that, according to the PostgreSQL documentation, jsonb is the recommended type to be used since it is faster to process. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzE3MQ=="}, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}