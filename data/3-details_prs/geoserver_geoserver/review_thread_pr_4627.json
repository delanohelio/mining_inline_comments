{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTU0NDQ2", "number": 4627, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNTowN1rOFMmrmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxMDo0NDowMVrOFSi4wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzYwOTg1OnYy", "diffSide": "RIGHT", "path": "src/main/src/main/java/org/geoserver/security/decorators/SecuredFeatureSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNTowN1rOIQatGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNTowN1rOIQatGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NTY1Nw==", "bodyText": "As noted in the GeoTools PR, this approach is inefficient. Better to check if there is a intersectFilter while working in getReadQuery and \"and\" an intersection filter there, so that it send down to the data source for efficient processing.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r554085657", "createdAt": "2021-01-08T17:25:07Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/security/decorators/SecuredFeatureSource.java", "diffHunk": "@@ -104,12 +105,37 @@ protected SecuredFeatureSource(FeatureSource<T, F> delegate, WrapperPolicy polic\n                                         + \"by security (because they are required by the schema). \"\n                                         + \"Either the security setup is broken or you have a security breach\");\n                     }\n-                    return SecuredObjects.secure(fc, policy);\n+                    result = SecuredObjects.secure(fc, policy);\n                 }\n             } else {\n-                return SecuredObjects.secure(fc, policy);\n+                result = SecuredObjects.secure(fc, policy);\n             }\n         }\n+        AccessLimits limits = policy.getLimits();\n+        if (limits instanceof VectorAccessLimits) {\n+            VectorAccessLimits vectorLimits = (VectorAccessLimits) limits;\n+            result = decoratesForClipping(vectorLimits, result);\n+        }\n+        return result;\n+    }\n+\n+    private FeatureCollection decoratesForClipping(\n+            VectorAccessLimits limits, FeatureCollection collection) {\n+        if (!(collection instanceof SimpleFeatureCollection))\n+            throw new RuntimeException(\"Cannot clip on Complex Features\");\n+        Geometry clipFilter = limits.getClipVectorFilter();\n+        Geometry intersectFilter = limits.getIntersectVectorFilter();\n+        if (clipFilter != null) {\n+            if (intersectFilter != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzYxMzQwOnYy", "diffSide": "RIGHT", "path": "src/main/src/main/java/org/geoserver/security/VectorAccessLimits.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNjowOFrOIQavXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNjowOFrOIQavXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NjIzNw==", "bodyText": "Actually, since there is read filter, wondering if GeoFence cannot just build the full read filter by itself, rather than adding this field. This would also simplify SecuredFeatureSource.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r554086237", "createdAt": "2021-01-08T17:26:08Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/security/VectorAccessLimits.java", "diffHunk": "@@ -166,6 +183,22 @@ private void writeProperties(List<PropertyName> attributes, ObjectOutputStream o\n         }\n     }\n \n+    public Geometry getClipVectorFilter() {\n+        return clipVectorFilter;\n+    }\n+\n+    public void setClipVectorFilter(Geometry clipVectorFilter) {\n+        this.clipVectorFilter = clipVectorFilter;\n+    }\n+\n+    public Geometry getIntersectVectorFilter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NzYxODc1OnYy", "diffSide": "RIGHT", "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxNzoyNzo0OFrOIQayoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxMDo0MDozOVrOIZgyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw==", "bodyText": "Ok so it seems to be already here. Why does it need to be added as a separate field too?", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r554087073", "createdAt": "2021-01-08T17:27:48Z", "author": {"login": "aaime"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDQ0NTc2OQ==", "bodyText": "thanks for your point @aaime :\nthe scenario that the usage of ClipIntersectionFeatureCollection and the new field try to handle is one where we have two spatial filter one per type and is needed to put them in \"OR\".\nThis happens when a user is inside two groups one with an intersects filter and the other with the clip. Geofence will return an accessInfo with both filter types. Simply delegating to the database the intersection and the applying the clip with the ClipFeatureCollection would return only the clipped geometries.\nIn this case the intersects filter is still delegated to the database but the intersection is performed again to check wheter or not return feature according to the two spatial filters.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r554445769", "createdAt": "2021-01-09T16:36:11Z", "author": {"login": "taba90"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw=="}, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE1Nzk3MQ==", "bodyText": "So in case you have both, you need to clip the geometry, but only if it does not also overlap with the intersect filter, in which case you return it fully?\nThat's bizzarre, but even if we wanted to have this functionality, it should be buried inside the GeoFence module, something like this does not belong in GeoTools.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r555157971", "createdAt": "2021-01-11T16:02:55Z", "author": {"login": "aaime"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw=="}, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE2OTM5MA==", "bodyText": "Actually scratch that, it woudl have to be in gs-main... do we really need that behavior though?\nIf really needed, then the odd feature collection wrapper should be a package private class somewhere in gs-main. I mean, it's even hard to explain, we don't want to expose it.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r555169390", "createdAt": "2021-01-11T16:18:44Z", "author": {"login": "aaime"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw=="}, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUzMTkxMg==", "bodyText": "Odd but... if a user belongs to two groups one with an intersects filter and the other with the clip filter and the two overlaps,  if the intersects doesn't win over the clip then we would have cases where the user is meant to have access to a geometry that he cannot actually sees.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r563531912", "createdAt": "2021-01-25T08:20:10Z", "author": {"login": "taba90"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw=="}, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYyMjU4Nw==", "bodyText": "Verified with Emanuele, its indeed the intended behavior", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r563622587", "createdAt": "2021-01-25T10:40:39Z", "author": {"login": "aaime"}, "path": "src/extension/geofence/src/main/java/org/geoserver/geofence/GeofenceAccessManager.java", "diffHunk": "@@ -580,8 +661,12 @@ AccessLimits buildResourceAccessLimits(\n         AccessLimits accessLimits = null;\n         if (info instanceof FeatureTypeInfo) {\n             // merge the area among the filters\n-            if (reprojArea != null) {\n-                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(reprojArea));\n+            if (intersectsArea != null) {\n+                Filter areaFilter = FF.intersects(FF.property(\"\"), FF.literal(intersectsArea));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzA3Mw=="}, "originalCommit": {"oid": "4c25e0340564f3c568f7c1896659e2adbd29eb39"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0OTkwMjc0OnYy", "diffSide": "RIGHT", "path": "src/main/src/main/java/org/geoserver/security/decorators/ClipIntersectsFeatureIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxMDo0NDowMVrOIZg6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNVQxNTo1NTo0OVrOIZtr-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYyNDY1NA==", "bodyText": "This bit seems weird too. A multi-geometry is still cosidered \"one\", while here it's taken apart in smaller bits?\nSay the geometry is Italy and all its big and small islands, if I undrestand correctly, only the bits of that large multipolygon intersecting the geometry filter would be returned? That's now how spatial databases work, it's surprising behavior to me.", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r563624654", "createdAt": "2021-01-25T10:44:01Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/security/decorators/ClipIntersectsFeatureIterator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geoserver.security.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.feature.collection.ClippedFeatureIterator;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.GeometryCollection;\n+import org.locationtech.jts.geom.GeometryFactory;\n+import org.locationtech.jts.geom.LineString;\n+import org.locationtech.jts.geom.MultiLineString;\n+import org.locationtech.jts.geom.MultiPoint;\n+import org.locationtech.jts.geom.MultiPolygon;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.feature.type.GeometryDescriptor;\n+import org.opengis.feature.type.Name;\n+\n+/**\n+ * A SimpleFeatureCollection that can filter features' geometries by a clip (crop) spatialFilter and\n+ * by an intersects spatialFilter. If a geometry is hit by both the result of the two filters is\n+ * merged.\n+ */\n+class ClipIntersectsFeatureIterator extends ClippedFeatureIterator {\n+    private Geometry intersects;\n+\n+    /**\n+     * @param delegate delegate Iterator to be used as a delegate.\n+     * @param clip the geometry to be used to clip (crop features).\n+     * @param intersects the geometry to be used to intersects features.\n+     * @param schema the featureType\n+     * @param preserveZ flag to set to true if the clipping process should preserve the z dimension\n+     */\n+    ClipIntersectsFeatureIterator(\n+            SimpleFeatureIterator delegate,\n+            Geometry clip,\n+            Geometry intersects,\n+            SimpleFeatureType schema,\n+            boolean preserveZ) {\n+        super(delegate, clip, schema, preserveZ);\n+        this.intersects = intersects;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+\n+        while (next == null && delegate.hasNext()) {\n+            // try building the clipped feature out of the original feature, if the\n+            // default geometry is clipped out, skip it\n+            SimpleFeature f = delegate.next();\n+\n+            boolean doTheClip = intersects == null ? true : false;\n+\n+            Map<Name, Geometry> intersectedGeometries = null;\n+            if (intersects != null) {\n+                Map<Name, Geometry> geometryAttributes = extractGeometryAttributes(f);\n+                intersectedGeometries =\n+                        getIntersectingGeometries(geometryAttributes, f.getFeatureType());\n+                // if there is at least one geometryCollection or not all the geometry\n+                // attributes were intersected performs also the clip\n+                if (intersectedGeometries != null)\n+                    doTheClip =\n+                            intersectedGeometries\n+                                            .values()\n+                                            .stream()\n+                                            .anyMatch(g -> g instanceof GeometryCollection)\n+                                    || geometryAttributes.size() > intersectedGeometries.size();\n+            }\n+\n+            boolean clippedOut = false;\n+            if (doTheClip) clippedOut = prepareBuilderForNextFeature(f);\n+\n+            if (!clippedOut) {\n+                // build the next feature\n+                next = fb.buildFeature(f.getID());\n+                unionWithIntersected(intersectedGeometries);\n+\n+            } else if (intersectedGeometries != null && !intersectedGeometries.isEmpty()) {\n+                next = fb.buildFeature(f.getID());\n+                for (Name name : intersectedGeometries.keySet()) {\n+                    next.setAttribute(name, intersectedGeometries.get(name));\n+                }\n+            }\n+\n+            fb.reset();\n+        }\n+\n+        return next != null;\n+    }\n+\n+    // union the clipped geometries with the intersected one\n+    private void unionWithIntersected(Map<Name, Geometry> intersectedGeometries) {\n+        for (Name name : intersectedGeometries.keySet()) {\n+            Geometry intersected = intersectedGeometries.get(name);\n+            if (intersected != null && !intersected.isEmpty())\n+                next.setAttribute(name, ((Geometry) next.getAttribute(name)).union(intersected));\n+        }\n+    }\n+\n+    private Map<Name, Geometry> getIntersectingGeometries(\n+            Map<Name, Geometry> geometryAttributes, SimpleFeatureType type) {\n+        Map<Name, Geometry> intersectedGeometries = new HashMap<>();\n+        for (Name name : geometryAttributes.keySet()) {\n+            Geometry geom = geometryAttributes.get(name);\n+            if (geom instanceof GeometryCollection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e31d062cfeb6c4292969418177006b09c58170da"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgzMzg0OQ==", "bodyText": "thanks for your point @aaime fixed", "url": "https://github.com/geoserver/geoserver/pull/4627#discussion_r563833849", "createdAt": "2021-01-25T15:55:49Z", "author": {"login": "taba90"}, "path": "src/main/src/main/java/org/geoserver/security/decorators/ClipIntersectsFeatureIterator.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geoserver.security.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.geotools.data.simple.SimpleFeatureIterator;\n+import org.geotools.feature.collection.ClippedFeatureIterator;\n+import org.locationtech.jts.geom.Geometry;\n+import org.locationtech.jts.geom.GeometryCollection;\n+import org.locationtech.jts.geom.GeometryFactory;\n+import org.locationtech.jts.geom.LineString;\n+import org.locationtech.jts.geom.MultiLineString;\n+import org.locationtech.jts.geom.MultiPoint;\n+import org.locationtech.jts.geom.MultiPolygon;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.geom.Polygon;\n+import org.opengis.feature.simple.SimpleFeature;\n+import org.opengis.feature.simple.SimpleFeatureType;\n+import org.opengis.feature.type.AttributeDescriptor;\n+import org.opengis.feature.type.GeometryDescriptor;\n+import org.opengis.feature.type.Name;\n+\n+/**\n+ * A SimpleFeatureCollection that can filter features' geometries by a clip (crop) spatialFilter and\n+ * by an intersects spatialFilter. If a geometry is hit by both the result of the two filters is\n+ * merged.\n+ */\n+class ClipIntersectsFeatureIterator extends ClippedFeatureIterator {\n+    private Geometry intersects;\n+\n+    /**\n+     * @param delegate delegate Iterator to be used as a delegate.\n+     * @param clip the geometry to be used to clip (crop features).\n+     * @param intersects the geometry to be used to intersects features.\n+     * @param schema the featureType\n+     * @param preserveZ flag to set to true if the clipping process should preserve the z dimension\n+     */\n+    ClipIntersectsFeatureIterator(\n+            SimpleFeatureIterator delegate,\n+            Geometry clip,\n+            Geometry intersects,\n+            SimpleFeatureType schema,\n+            boolean preserveZ) {\n+        super(delegate, clip, schema, preserveZ);\n+        this.intersects = intersects;\n+    }\n+\n+    @Override\n+    public boolean hasNext() {\n+\n+        while (next == null && delegate.hasNext()) {\n+            // try building the clipped feature out of the original feature, if the\n+            // default geometry is clipped out, skip it\n+            SimpleFeature f = delegate.next();\n+\n+            boolean doTheClip = intersects == null ? true : false;\n+\n+            Map<Name, Geometry> intersectedGeometries = null;\n+            if (intersects != null) {\n+                Map<Name, Geometry> geometryAttributes = extractGeometryAttributes(f);\n+                intersectedGeometries =\n+                        getIntersectingGeometries(geometryAttributes, f.getFeatureType());\n+                // if there is at least one geometryCollection or not all the geometry\n+                // attributes were intersected performs also the clip\n+                if (intersectedGeometries != null)\n+                    doTheClip =\n+                            intersectedGeometries\n+                                            .values()\n+                                            .stream()\n+                                            .anyMatch(g -> g instanceof GeometryCollection)\n+                                    || geometryAttributes.size() > intersectedGeometries.size();\n+            }\n+\n+            boolean clippedOut = false;\n+            if (doTheClip) clippedOut = prepareBuilderForNextFeature(f);\n+\n+            if (!clippedOut) {\n+                // build the next feature\n+                next = fb.buildFeature(f.getID());\n+                unionWithIntersected(intersectedGeometries);\n+\n+            } else if (intersectedGeometries != null && !intersectedGeometries.isEmpty()) {\n+                next = fb.buildFeature(f.getID());\n+                for (Name name : intersectedGeometries.keySet()) {\n+                    next.setAttribute(name, intersectedGeometries.get(name));\n+                }\n+            }\n+\n+            fb.reset();\n+        }\n+\n+        return next != null;\n+    }\n+\n+    // union the clipped geometries with the intersected one\n+    private void unionWithIntersected(Map<Name, Geometry> intersectedGeometries) {\n+        for (Name name : intersectedGeometries.keySet()) {\n+            Geometry intersected = intersectedGeometries.get(name);\n+            if (intersected != null && !intersected.isEmpty())\n+                next.setAttribute(name, ((Geometry) next.getAttribute(name)).union(intersected));\n+        }\n+    }\n+\n+    private Map<Name, Geometry> getIntersectingGeometries(\n+            Map<Name, Geometry> geometryAttributes, SimpleFeatureType type) {\n+        Map<Name, Geometry> intersectedGeometries = new HashMap<>();\n+        for (Name name : geometryAttributes.keySet()) {\n+            Geometry geom = geometryAttributes.get(name);\n+            if (geom instanceof GeometryCollection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzYyNDY1NA=="}, "originalCommit": {"oid": "e31d062cfeb6c4292969418177006b09c58170da"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3815, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}