{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzA2MDY1", "number": 4157, "title": "GSIP-188: Add extension point for ResourcePool to convert coverage in\u2026", "bodyText": "https://github.com/geoserver/geoserver/wiki/GSIP-188\nhttps://osgeo-org.atlassian.net/browse/GEOS-9563\n\u200b\nImageInputStreamSpi implementations advertise an inputClass. When utilities like GeoTools' ImageIOExt.getImageInputStreamSPI() are invoked, they try to match the provided input object class to the advertised inputClass of the ImageInputStreamSpi. When creating a GridCoverageReader in the ResourcePool, GeoServer only supplies the GridCoverageReaders with URLs in the form of Strings, with one exception. There is a single method to check if the input String represents a File URL, and if so, it converts the input String to a File.\u200b\nThis input object is eventually used by ImageIO to determine which ImageInputStream to use by comparing the input class to the advertised inputClass as previously mentioned. The power of being able to advertise an input class is severely crippled by GeoServer\u2019s inability to create readers with alternative input classes. Creating new reader implementations becomes difficult because there are already specific ImageInputStreamSpis to support String, URL, File, InputStream, etc. Ambiguity is introduced when more than one reader advertises the same inputClass. For example, S3ImageInputStreamImplSpi and StringImageInputStreamSpi both advertise the input class as String. This results in the ImageIO createImageInputStream method selecting the first SPI it comes across that supports String.\u200b\nThis proposal seeks to implement a new extension point that will allow the ResourcePool to supply configurable input objects that extend beyond String/File. This enhancement ensures the specific, desired ImageInputStreamSpi implementation is able to be identified and selected.\u200b\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n[n/a] Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n[n/a] Commits changing the REST API, or any configuration object, should check if the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-04-03T17:49:12Z", "url": "https://github.com/geoserver/geoserver/pull/4157", "merged": true, "mergeCommit": {"oid": "e1d27bf4ce4d20ab2e9e19115aecefcfc9cf3b6f"}, "closed": true, "closedAt": "2020-05-21T10:51:14Z", "author": {"login": "joshfix"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUD-3egH2gAyMzk4MzA2MDY1OjhiMjJlYjFlMWNkOTljOGZkNWM1ODUwYTY3NWQ3OTczNmU4YmUxZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcikXjcgH2gAyMzk4MzA2MDY1OmZiNmE3ZDNiOTQ0Zjc1NGRjOWExMDlhYTgyNGQ5NjZlN2EwM2UxZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9", "author": {"user": {"login": "joshfix", "name": "Josh Fix"}}, "url": "https://github.com/geoserver/geoserver/commit/8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9", "committedDate": "2020-04-03T17:02:57Z", "message": "GSIP-188: Add extension point for ResourcePool to convert coverage input objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjEzMDc3", "url": "https://github.com/geoserver/geoserver/pull/4157#pullrequestreview-388213077", "createdAt": "2020-04-06T12:46:32Z", "commit": {"oid": "8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0NjozMlrOGBWAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0NjozMlrOGBWAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjMwOQ==", "bodyText": "New files just need  (c) 2020 Open Source Geospatial Foundation - all rights reserved\nThere is no need to add the OpenPlans bit. Same for other files.", "url": "https://github.com/geoserver/geoserver/pull/4157#discussion_r404062309", "createdAt": "2020-04-06T12:46:32Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderFileConverter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/* (c) 2014 - 2020 Open Source Geospatial Foundation - all rights reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjE1MTE2", "url": "https://github.com/geoserver/geoserver/pull/4157#pullrequestreview-388215116", "createdAt": "2020-04-06T12:49:17Z", "commit": {"oid": "8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0OToxN1rOGBWGig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjo0OToxN1rOGBWGig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2Mzg4Mg==", "bodyText": "No requirement to update the dates anymore, we have determined it has no legal value.", "url": "https://github.com/geoserver/geoserver/pull/4157#discussion_r404063882", "createdAt": "2020-04-06T12:49:17Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/ResourcePool.java", "diffHunk": "@@ -1,4 +1,4 @@\n-/* (c) 2014 - 2017 Open Source Geospatial Foundation - all rights reserved\n+/* (c) 2014 - 2020 Open Source Geospatial Foundation - all rights reserved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b22eb1e1cd99c8fd5c5850a675d79736e8be1d9"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ddd3ba0a24a7bcc12fa4dd672e6737b18d13a8d", "author": {"user": {"login": "joshfix", "name": "Josh Fix"}}, "url": "https://github.com/geoserver/geoserver/commit/3ddd3ba0a24a7bcc12fa4dd672e6737b18d13a8d", "committedDate": "2020-04-29T12:23:31Z", "message": "[GSIP-188] Removed OpenPlans copyright headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69442b99faf4e048eb398f2c914487aa8d26a7af", "author": {"user": {"login": "joshfix", "name": "Josh Fix"}}, "url": "https://github.com/geoserver/geoserver/commit/69442b99faf4e048eb398f2c914487aa8d26a7af", "committedDate": "2020-04-29T15:41:20Z", "message": "[GSIP-188] Fixed formatting issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjE5Njgz", "url": "https://github.com/geoserver/geoserver/pull/4157#pullrequestreview-406619683", "createdAt": "2020-05-06T13:37:22Z", "commit": {"oid": "69442b99faf4e048eb398f2c914487aa8d26a7af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozNzoyMlrOGRTXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozNzoyMlrOGRTXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NjE2MQ==", "bodyText": "There is indeed a behavioral change, the previous code was trying to lookup the files using the resource loader even if the string representation had no scheme, this one does not. The following change fixes the specific build failure.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return uri.getScheme() != null && \"file\".equalsIgnoreCase(uri.getScheme());\n          \n          \n            \n                        return uri.getScheme() == null || \"file\".equalsIgnoreCase(uri.getScheme());\n          \n      \n    \n    \n  \n\nI've verified this change makes for a successful build (with all extensions included, -Prelease):\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  06:12 min (Wall Clock)\n[INFO] Finished at: 2020-05-06T15:36:28+02:00\n[INFO] ------------------------------------------------------------------------", "url": "https://github.com/geoserver/geoserver/pull/4157#discussion_r420796161", "createdAt": "2020-05-06T13:37:22Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderFileConverter.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/* (c) 2014 - 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.catalog;\n+\n+import java.io.File;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+import javax.annotation.Nullable;\n+import org.geoserver.platform.resource.Files;\n+import org.geoserver.platform.resource.Resource;\n+import org.geoserver.platform.resource.Resources;\n+import org.geotools.util.factory.Hints;\n+import org.opengis.coverage.grid.GridCoverageReader;\n+\n+/**\n+ * Attempts to convert the source input object for a {@link GridCoverageReader} to {@link File}.\n+ *\n+ * @author joshfix Created on 2/25/20\n+ */\n+public class CoverageReaderFileConverter implements CoverageReaderInputObjectConverter<File> {\n+\n+    private final Catalog catalog;\n+\n+    public CoverageReaderFileConverter(Catalog catalog) {\n+        this.catalog = catalog;\n+    }\n+\n+    /**\n+     * Performs the conversion of the input object to a file object. If this converter is not able\n+     * to convert the input to a File, an empty {@link Optional} will be returned.\n+     *\n+     * @param input The input object.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return\n+     */\n+    @Override\n+    public Optional<File> convert(\n+            Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints) {\n+        if (!(input instanceof String)) {\n+            return Optional.empty();\n+        }\n+        String urlString = (String) input;\n+        return canConvert(urlString) ? convertFile(urlString) : Optional.empty();\n+    }\n+\n+    /**\n+     * Checks to see if the input string is a file URI.\n+     *\n+     * @param input The input string.\n+     * @return Value representing whether or not this converter is able to convert the provided\n+     *     input to File.\n+     */\n+    protected boolean canConvert(String input) {\n+        // Check to see if our \"url\" points to a file or not, otherwise we use the string itself for\n+        // reading\n+        try {\n+            URI uri = new URI(input);\n+            return uri.getScheme() != null && \"file\".equalsIgnoreCase(uri.getScheme());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69442b99faf4e048eb398f2c914487aa8d26a7af"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb6a7d3b944f754dc9a109aa824d966e7a03e1ff", "author": {"user": {"login": "joshfix", "name": "Josh Fix"}}, "url": "https://github.com/geoserver/geoserver/commit/fb6a7d3b944f754dc9a109aa824d966e7a03e1ff", "committedDate": "2020-05-18T18:41:49Z", "message": "[GSIP-188] fix issue using resource loader input with no scheme"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1470, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}