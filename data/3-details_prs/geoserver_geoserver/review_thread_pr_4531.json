{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNTY2NDUz", "number": 4531, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODo1NzozMVrOEsiczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0NDo1MFrOEsnc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTM3MjI5OnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/community/cog/index.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODo1NzozMVrOHf1Yvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTowNTo1NlrOHhNw6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0MjU5MQ==", "bodyText": "Looking at this made me think about the GWC S3 support, and putting both toghether in the same GeoServer.\nThey are not using the same version of the libraries:\n\nhttps://github.com/geosolutions-it/imageio-ext/blob/master/plugin/cog/pom.xml#L18\nhttps://github.com/GeoWebCache/geowebcache/blob/master/geowebcache/s3storage/pom.xml#L22\n\nI know someone has looked into upgrading the AWS SDK in GWC, but v2 of the library has a signficantly different API, requiring deep changes in the module.\nI don't know if the two can stay in the same classpath (may be they are using different packages), but if they don't, there should be at least a warning here.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503142591", "createdAt": "2020-10-12T08:57:31Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2Njk4Ng==", "bodyText": "Thanks for spotting that.\nAs soon as I get the final zip with all the needed dependencies I'll try a local deploy of both pieces and check how it works.\nAs far as I can see they use different packages\n  <groupId>com.amazonaws</groupId>\n  <artifactId>aws-java-sdk-s3</artifactId>\n\nvs\n   <groupId>software.amazon.awssdk</groupId>\n   <artifactId>s3</artifactId>\n\nIt \"seems\" they can live together:\nhttps://docs.aws.amazon.com/sdk-for-java/v2/migration-guide/side-by-side.html\nAnyway, an actual-practical check will let us know :)\nI'll keep you updated on the findings.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503166986", "createdAt": "2020-10-12T09:35:47Z", "author": {"login": "dromagnoli"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0MjU5MQ=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDU3MQ==", "bodyText": "@aaime update:\nI managed to finalize the ext-cog.xml containing aaaaall the needed jars to build the zip file.\nI have also deployed both cog and gwc-s3 module and they works together.\nI have tested a new s3 blobstore and played a bit with tiled layer preview on a cog layer: the cog layer was rendering fine and the S3 bucket get populated with new JPEG tile files so I think we are good with this double check.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r504590571", "createdAt": "2020-10-14T11:05:56Z", "author": {"login": "dromagnoli"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0MjU5MQ=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYzMzAyOnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/community/cog/index.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMTozMFrOHf33CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTowNjowNlrOHhNxTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzExMw==", "bodyText": "Strange, why the mix of lowercase and uppercase chars? IIO_alias_AWS_CORE_POOL_SIZE \"alias\" is lowercase.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503183113", "createdAt": "2020-10-12T10:01:30Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client\n+   * - :guilabel:`User Name / Access Key ID`\n+     - Optional user name (HTTP) or Access Key ID (S3) in case the COG dataset requires basic authentication\n+   * - :guilabel:`Password / Secret Access Key`\n+     - Password (HTTP) or Secret Access Key (S3) for the previous credential\n+\n+COG ImageMosaic Configuration\n+-----------------------------\n+New configuration parameters are available to be specified in the imageMosaic indexer configuration, in order to properly configure a COG based ImageMosaic.\n+\n+:file:`indexer.properties`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. list-table::\n+   :widths: 15 5 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Parameter\n+     - Mandatory?\n+     - Description\n+   * - Cog\n+     - Y\n+     - A boolean flag (true/false) to be set (Cog=true) in order to signal that the ImageMosaic is a COG data mosaic.\n+   * - CogRangeReader\n+     - N\n+     - Specifies the desired RangeReader implementation performing the Range Reads requests. Currently supported values are ``it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader`` and ``it.geosolutions.imageioimpl.plugins.cog.S3RangeReader``, with the latter using an S3 Client to access S3 buckets. Default implementation uses HTTP.\n+   * - CogUser\n+     - N\n+     - Credential to be set whenever basic HTTP authentication is needed to access the COG Datasets or an S3 Access KeyID is required\n+   * - CogPassword\n+     - N\n+     - Password for the above user OR Secret Access Key for the above S3 KeyId.\n+\n+COG Global Settings\n+-------------------\n+The GeoServer Global Settings page contains the default COG settings presented when setting up a new COG GeoTIFF Store.\n+\n+\n+.. figure:: images/globalcogsettings.png\n+\n+   Default Global COG Settings\n+\n+\n+AWS S3 Client configuration System properties\n+---------------------------------------------\n+A single S3 Asynchronous Client will be used for the same region and alias (url schema, i.e. http , https). \n+The following System properies can be set to customize the pool for the asynchronous client\n+\n+.. list-table::\n+   :widths: 15 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - System property\n+     - Description\n+   * - IIO_alias_AWS_CORE_POOL_SIZE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4NzU1NA==", "bodyText": "I Need to provide some more explanation here.\nalias actually is a template to be replaced with the actual value. i.e. HTTPS", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503287554", "createdAt": "2020-10-12T13:14:13Z", "author": {"login": "dromagnoli"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client\n+   * - :guilabel:`User Name / Access Key ID`\n+     - Optional user name (HTTP) or Access Key ID (S3) in case the COG dataset requires basic authentication\n+   * - :guilabel:`Password / Secret Access Key`\n+     - Password (HTTP) or Secret Access Key (S3) for the previous credential\n+\n+COG ImageMosaic Configuration\n+-----------------------------\n+New configuration parameters are available to be specified in the imageMosaic indexer configuration, in order to properly configure a COG based ImageMosaic.\n+\n+:file:`indexer.properties`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. list-table::\n+   :widths: 15 5 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Parameter\n+     - Mandatory?\n+     - Description\n+   * - Cog\n+     - Y\n+     - A boolean flag (true/false) to be set (Cog=true) in order to signal that the ImageMosaic is a COG data mosaic.\n+   * - CogRangeReader\n+     - N\n+     - Specifies the desired RangeReader implementation performing the Range Reads requests. Currently supported values are ``it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader`` and ``it.geosolutions.imageioimpl.plugins.cog.S3RangeReader``, with the latter using an S3 Client to access S3 buckets. Default implementation uses HTTP.\n+   * - CogUser\n+     - N\n+     - Credential to be set whenever basic HTTP authentication is needed to access the COG Datasets or an S3 Access KeyID is required\n+   * - CogPassword\n+     - N\n+     - Password for the above user OR Secret Access Key for the above S3 KeyId.\n+\n+COG Global Settings\n+-------------------\n+The GeoServer Global Settings page contains the default COG settings presented when setting up a new COG GeoTIFF Store.\n+\n+\n+.. figure:: images/globalcogsettings.png\n+\n+   Default Global COG Settings\n+\n+\n+AWS S3 Client configuration System properties\n+---------------------------------------------\n+A single S3 Asynchronous Client will be used for the same region and alias (url schema, i.e. http , https). \n+The following System properies can be set to customize the pool for the asynchronous client\n+\n+.. list-table::\n+   :widths: 15 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - System property\n+     - Description\n+   * - IIO_alias_AWS_CORE_POOL_SIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzExMw=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDY3MA==", "bodyText": "doc updated", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r504590670", "createdAt": "2020-10-14T11:06:06Z", "author": {"login": "dromagnoli"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client\n+   * - :guilabel:`User Name / Access Key ID`\n+     - Optional user name (HTTP) or Access Key ID (S3) in case the COG dataset requires basic authentication\n+   * - :guilabel:`Password / Secret Access Key`\n+     - Password (HTTP) or Secret Access Key (S3) for the previous credential\n+\n+COG ImageMosaic Configuration\n+-----------------------------\n+New configuration parameters are available to be specified in the imageMosaic indexer configuration, in order to properly configure a COG based ImageMosaic.\n+\n+:file:`indexer.properties`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. list-table::\n+   :widths: 15 5 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Parameter\n+     - Mandatory?\n+     - Description\n+   * - Cog\n+     - Y\n+     - A boolean flag (true/false) to be set (Cog=true) in order to signal that the ImageMosaic is a COG data mosaic.\n+   * - CogRangeReader\n+     - N\n+     - Specifies the desired RangeReader implementation performing the Range Reads requests. Currently supported values are ``it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader`` and ``it.geosolutions.imageioimpl.plugins.cog.S3RangeReader``, with the latter using an S3 Client to access S3 buckets. Default implementation uses HTTP.\n+   * - CogUser\n+     - N\n+     - Credential to be set whenever basic HTTP authentication is needed to access the COG Datasets or an S3 Access KeyID is required\n+   * - CogPassword\n+     - N\n+     - Password for the above user OR Secret Access Key for the above S3 KeyId.\n+\n+COG Global Settings\n+-------------------\n+The GeoServer Global Settings page contains the default COG settings presented when setting up a new COG GeoTIFF Store.\n+\n+\n+.. figure:: images/globalcogsettings.png\n+\n+   Default Global COG Settings\n+\n+\n+AWS S3 Client configuration System properties\n+---------------------------------------------\n+A single S3 Asynchronous Client will be used for the same region and alias (url schema, i.e. http , https). \n+The following System properies can be set to customize the pool for the asynchronous client\n+\n+.. list-table::\n+   :widths: 15 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - System property\n+     - Description\n+   * - IIO_alias_AWS_CORE_POOL_SIZE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzExMw=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYzOTczOnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/community/cog/index.rst", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMzoxNlrOHf37Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDowMzozMVrOHgAH3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDE2Ng==", "bodyText": "This could use some work... I'm guess you want to say that, if reading large rasters, they will end up be held in memory right? With this in mind, I would also suggest either turning WCS off, or setting tight read limits for it.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503184166", "createdAt": "2020-10-12T10:03:16Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client\n+   * - :guilabel:`User Name / Access Key ID`\n+     - Optional user name (HTTP) or Access Key ID (S3) in case the COG dataset requires basic authentication\n+   * - :guilabel:`Password / Secret Access Key`\n+     - Password (HTTP) or Secret Access Key (S3) for the previous credential\n+\n+COG ImageMosaic Configuration\n+-----------------------------\n+New configuration parameters are available to be specified in the imageMosaic indexer configuration, in order to properly configure a COG based ImageMosaic.\n+\n+:file:`indexer.properties`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. list-table::\n+   :widths: 15 5 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Parameter\n+     - Mandatory?\n+     - Description\n+   * - Cog\n+     - Y\n+     - A boolean flag (true/false) to be set (Cog=true) in order to signal that the ImageMosaic is a COG data mosaic.\n+   * - CogRangeReader\n+     - N\n+     - Specifies the desired RangeReader implementation performing the Range Reads requests. Currently supported values are ``it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader`` and ``it.geosolutions.imageioimpl.plugins.cog.S3RangeReader``, with the latter using an S3 Client to access S3 buckets. Default implementation uses HTTP.\n+   * - CogUser\n+     - N\n+     - Credential to be set whenever basic HTTP authentication is needed to access the COG Datasets or an S3 Access KeyID is required\n+   * - CogPassword\n+     - N\n+     - Password for the above user OR Secret Access Key for the above S3 KeyId.\n+\n+COG Global Settings\n+-------------------\n+The GeoServer Global Settings page contains the default COG settings presented when setting up a new COG GeoTIFF Store.\n+\n+\n+.. figure:: images/globalcogsettings.png\n+\n+   Default Global COG Settings\n+\n+\n+AWS S3 Client configuration System properties\n+---------------------------------------------\n+A single S3 Asynchronous Client will be used for the same region and alias (url schema, i.e. http , https). \n+The following System properies can be set to customize the pool for the asynchronous client\n+\n+.. list-table::\n+   :widths: 15 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - System property\n+     - Description\n+   * - IIO_alias_AWS_CORE_POOL_SIZE\n+     - The core pool size for the S3 Client \n+   * - IIO_alias_AWS_MAX_POOL_SIZE\n+     - The maximum number of thread to allow in the pool for the S3 Client \n+   * - IIO_alias_AWS_KEEP_ALIVE_TIME\n+     - The Keep alive time (in seconds), representing maximum time that excess idle threads will wait for new tasks before terminating.\n+\n+Current Limitations\n+-------------------\n+\n+* At the moment, COG ImageMosaic doesn't support neither harvesting nor automatic index creation. Therefore, make sure to have an index already defined on a database, containing the COG granules URLs and set the ``UseExistingSchema=true`` flag on the mosaic/indexer.properties file. See :ref:`mosaic_datastore_properties` for details on index stored on a database.\n+\n+* At the moment, Ranges optimizations are made before reading the byte from the remote stream so that the needed data is read at once by multiple async call before being returned. It is discouraged to use huge COG datasets without overviews as well as request COG datasets through services streaming a huge amount of data at native resolution, such as WCS. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxODQ5Mg==", "bodyText": "Adjusting the wording, thanks", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503318492", "createdAt": "2020-10-12T14:03:31Z", "author": {"login": "dromagnoli"}, "path": "doc/en/user/source/community/cog/index.rst", "diffHunk": "@@ -0,0 +1,108 @@\n+.. _community_cog:\n+\n+COG (Cloud Optimized GeoTIFF) Support\n+=====================================\n+\n+`COG <https://github.com/cogeotiff/cog-spec/blob/master/spec.md>`_ (Cloud Optimized GeoTIFF) is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range requests. \n+The COG module allows to set configuration params to connect to a Cloud GeoTIFF as well as adding JARs to the classpath needed to support that.\n+\n+Installation\n+------------\n+\n+As a community module, the package needs to be downloaded from the `nightly builds <https://build.geoserver.org/geoserver/>`_,\n+picking the community folder of the corresponding GeoServer series (e.g. if working on the GeoServer main development branch nightly\n+builds, pick the zip file form ``master/community-latest``).\n+\n+To install the module, unpack the zip file contents into GeoServer own ``WEB-INF/lib`` directory and restart GeoServer.\n+\n+COG GeoTIFF Configuration Panel\n+-------------------------------\n+\n+When configuring a GeoTIFF store, a new checkbox is available: ``Cloud Optimized GeoTIFF (COG)``. Setting that will open a new section presenting the COG configuration parameters for this COG Store.\n+\n+.. figure:: images/cogparams.png\n+\n+   COG Connection params\n+\n+Checking the ``Cloud Optimized GeoTIFF (COG)`` checkbox will open \n+\n+.. list-table::\n+   :widths: 20 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Option\n+     - Description\n+   * - :guilabel:`URL`\n+     - (prefixed by ``cog://``) representing the connection URL to the COG Dataset.\n+   * - :guilabel:`Range Reader Settings`\n+     - Which type of Range Reader implementation. Values Currently supported are HTTP and S3, the latter using an S3 Client\n+   * - :guilabel:`User Name / Access Key ID`\n+     - Optional user name (HTTP) or Access Key ID (S3) in case the COG dataset requires basic authentication\n+   * - :guilabel:`Password / Secret Access Key`\n+     - Password (HTTP) or Secret Access Key (S3) for the previous credential\n+\n+COG ImageMosaic Configuration\n+-----------------------------\n+New configuration parameters are available to be specified in the imageMosaic indexer configuration, in order to properly configure a COG based ImageMosaic.\n+\n+:file:`indexer.properties`\n+~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+.. list-table::\n+   :widths: 15 5 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - Parameter\n+     - Mandatory?\n+     - Description\n+   * - Cog\n+     - Y\n+     - A boolean flag (true/false) to be set (Cog=true) in order to signal that the ImageMosaic is a COG data mosaic.\n+   * - CogRangeReader\n+     - N\n+     - Specifies the desired RangeReader implementation performing the Range Reads requests. Currently supported values are ``it.geosolutions.imageioimpl.plugins.cog.HttpRangeReader`` and ``it.geosolutions.imageioimpl.plugins.cog.S3RangeReader``, with the latter using an S3 Client to access S3 buckets. Default implementation uses HTTP.\n+   * - CogUser\n+     - N\n+     - Credential to be set whenever basic HTTP authentication is needed to access the COG Datasets or an S3 Access KeyID is required\n+   * - CogPassword\n+     - N\n+     - Password for the above user OR Secret Access Key for the above S3 KeyId.\n+\n+COG Global Settings\n+-------------------\n+The GeoServer Global Settings page contains the default COG settings presented when setting up a new COG GeoTIFF Store.\n+\n+\n+.. figure:: images/globalcogsettings.png\n+\n+   Default Global COG Settings\n+\n+\n+AWS S3 Client configuration System properties\n+---------------------------------------------\n+A single S3 Asynchronous Client will be used for the same region and alias (url schema, i.e. http , https). \n+The following System properies can be set to customize the pool for the asynchronous client\n+\n+.. list-table::\n+   :widths: 15 80\n+   :header-rows: 1\n+   :stub-columns: 1\n+\n+   * - System property\n+     - Description\n+   * - IIO_alias_AWS_CORE_POOL_SIZE\n+     - The core pool size for the S3 Client \n+   * - IIO_alias_AWS_MAX_POOL_SIZE\n+     - The maximum number of thread to allow in the pool for the S3 Client \n+   * - IIO_alias_AWS_KEEP_ALIVE_TIME\n+     - The Keep alive time (in seconds), representing maximum time that excess idle threads will wait for new tasks before terminating.\n+\n+Current Limitations\n+-------------------\n+\n+* At the moment, COG ImageMosaic doesn't support neither harvesting nor automatic index creation. Therefore, make sure to have an index already defined on a database, containing the COG granules URLs and set the ``UseExistingSchema=true`` flag on the mosaic/indexer.properties file. See :ref:`mosaic_datastore_properties` for details on index stored on a database.\n+\n+* At the moment, Ranges optimizations are made before reading the byte from the remote stream so that the needed data is read at once by multiple async call before being returned. It is discouraged to use huge COG datasets without overviews as well as request COG datasets through services streaming a huge amount of data at native resolution, such as WCS. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDE2Ng=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY0MTQ1OnYy", "diffSide": "RIGHT", "path": "src/community/cog/src/main/java/applicationContext.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMzo0NlrOHf38Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMzo0NlrOHf38Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDQ1MQ==", "bodyText": "Small mis-alignment in the POM file.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503184451", "createdAt": "2020-10-12T10:03:46Z", "author": {"login": "aaime"}, "path": "src/community/cog/src/main/java/applicationContext.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeff<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n+\n+<beans>\n+\n+    <bean id=\"coverageReaderInputObjectCogConverter\" class=\"org.geoserver.web.data.store.cog.CoverageReaderCogInputObjectConverter\">\n+         <constructor-arg ref=\"catalog\"/>\n+    </bean>\n+\n+  <bean id=\"COGGeoTIFFExclusionFilter\" class=\"org.geoserver.platform.NameExclusionFilter\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY5MTczOnYy", "diffSide": "RIGHT", "path": "src/community/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoxNzo1M1rOHf4bXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTowNjoxN1rOHhNxrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MjQxMw==", "bodyText": "Tab vs spaces?", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503192413", "createdAt": "2020-10-12T10:17:53Z", "author": {"login": "aaime"}, "path": "src/community/pom.xml", "diffHunk": "@@ -86,6 +86,7 @@\n           <descriptor>release/ext-taskmanager-core.xml</descriptor>\n           <descriptor>release/ext-taskmanager-s3.xml</descriptor>\n           <descriptor>release/ext-netcdf-ghrsst.xml</descriptor>\n+\t\t  <descriptor>release/ext-cog.xml</descriptor>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4Nzc5NA==", "bodyText": "going to check.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503287794", "createdAt": "2020-10-12T13:14:43Z", "author": {"login": "dromagnoli"}, "path": "src/community/pom.xml", "diffHunk": "@@ -86,6 +86,7 @@\n           <descriptor>release/ext-taskmanager-core.xml</descriptor>\n           <descriptor>release/ext-taskmanager-s3.xml</descriptor>\n           <descriptor>release/ext-netcdf-ghrsst.xml</descriptor>\n+\t\t  <descriptor>release/ext-cog.xml</descriptor>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MjQxMw=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MDc2NA==", "bodyText": "fixed", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r504590764", "createdAt": "2020-10-14T11:06:17Z", "author": {"login": "dromagnoli"}, "path": "src/community/pom.xml", "diffHunk": "@@ -86,6 +86,7 @@\n           <descriptor>release/ext-taskmanager-core.xml</descriptor>\n           <descriptor>release/ext-taskmanager-s3.xml</descriptor>\n           <descriptor>release/ext-netcdf-ghrsst.xml</descriptor>\n+\t\t  <descriptor>release/ext-cog.xml</descriptor>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MjQxMw=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY5OTUyOnYy", "diffSide": "RIGHT", "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMDowOFrOHf4gDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyODoyNVrOHmWZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA==", "bodyText": "Confused, why do you need the store too? coverageInfo.getStore() should provide it already. Mind, this is not just a formal question, the structure you create here ends up showing in the REST representation of the resources, which is directly in the REST API user's face. It should be the least surprising possible. I'm not 100% sure, but if you need to reuse the CogSettings, they may also be placed among the store parameters (maybe with some effort in the XStreamPersister, unsure). If not, no big deal, CogSettings is just two values right now, could be stored as two independent params. Unless... do you see it growing much in the future?", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503193614", "createdAt": "2020-10-12T10:20:08Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4Mjc1MQ==", "bodyText": "Looking at the ImageMosaic CogConfiguration, which hosts basically a CogConfig + username/password, wondering if the username/pwd could also be shared in CogConfig... could one have default credentials stored just once? I believe the AWS client can also read env variables, in other words, the idea that one uses fixed credentials for the entire app is not so strange in the cloud. Mind, just thinking out loud... and going there would require to have the possibility to override.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503282751", "createdAt": "2020-10-12T13:05:59Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMTc5Ng==", "bodyText": "Right, for some reason I was getting a null storeInfo at the early stage of development... Updated.\nAbout CogSettings, it may end up having a couple of more parameters in the future.\nThe S3 RangeReader implementation actually can read credentials from those IIO_AWS_  System properties too.\nI'm going to update that section of the doc.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503321796", "createdAt": "2020-10-12T14:08:57Z", "author": {"login": "dromagnoli"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjczMw==", "bodyText": "With interactive testing, found out that the store is necessary, because the coveage info can be missing, while creating the coveage reader for the first one, while configuring the store from the UI (e.g, a time when the eventual CoverageInfo has not yet been created).", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r507812733", "createdAt": "2020-10-19T14:46:18Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3NDk5Nw==", "bodyText": "Restored.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r509974997", "createdAt": "2020-10-22T08:28:25Z", "author": {"login": "dromagnoli"}, "path": "src/main/src/main/java/org/geoserver/catalog/CoverageReaderInputObjectConverter.java", "diffHunk": "@@ -34,4 +33,22 @@\n      * @return an {@link Optional} containing the converted value.\n      */\n     Optional<T> convert(Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints);\n+\n+    /**\n+     * This method inspects the provided input object in an attempt to convert it to a custom class.\n+     * Any of the accompanying method parameters may optionally be used to better inform the\n+     * decision making logic. If an implementation does not support conversion for the given input\n+     * object, the method should return an empty {@link Optional}.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store metadata, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return an {@link Optional} containing the converted value.\n+     */\n+    Optional<T> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzYxNA=="}, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTcwMzA0OnYy", "diffSide": "RIGHT", "path": "src/main/src/main/java/org/geoserver/security/password/CustomEncryptedFieldsProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMToxMlrOHf4iSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMToxMlrOHf4iSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDE4NA==", "bodyText": "No need to call it \"custom\", EncryptedFieldsProvider should do.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503194184", "createdAt": "2020-10-12T10:21:12Z", "author": {"login": "aaime"}, "path": "src/main/src/main/java/org/geoserver/security/password/CustomEncryptedFieldsProvider.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.security.password;\n+\n+import java.util.Set;\n+import org.geoserver.catalog.StoreInfo;\n+\n+/** An interface returning a Set of custom fields needing Encryption */\n+public interface CustomEncryptedFieldsProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTcwNDIxOnYy", "diffSide": "RIGHT", "path": "src/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMTozNlrOHf4jDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMTozNlrOHf4jDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDM4MA==", "bodyText": "To be switched to a release version before commit, right?", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503194380", "createdAt": "2020-10-12T10:21:36Z", "author": {"login": "aaime"}, "path": "src/pom.xml", "diffHunk": "@@ -1957,7 +1957,7 @@\n   <poi.version>4.0.0</poi.version>\n   <wicket.version>7.6.0</wicket.version>\n   <ant.version>1.9.15</ant.version>\n-  <imageio-ext.version>1.3.2</imageio-ext.version>\n+  <imageio-ext.version>1.3-SNAPSHOT</imageio-ext.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd07796a86bfc5594f1c5b5d503a31a3a1046c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE3ODc2OnYy", "diffSide": "RIGHT", "path": "src/community/cog/src/main/java/applicationContext.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0MToxNlrOHf9DKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NDozN1rOHf_YMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2ODEzOQ==", "bodyText": "I cannot find this class?\nAlso, this is somethig working at the catalog level, the COG store could be configured via REST in a server that has no Wicket UI. Best to start putting it in its own package right away, in the future it might go in a separte gs-cog module, while the ui goes into gs-web-cog.\nI believe the same applies to CoverageReaderCogInputObjectConverter, CogSettingsInitializer, CogSettingsXStreamInitializerand CogSettings", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503268139", "createdAt": "2020-10-12T12:41:16Z", "author": {"login": "aaime"}, "path": "src/community/cog/src/main/java/applicationContext.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeff<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n+\n+<beans>\n+\n+    <bean id=\"coverageReaderInputObjectCogConverter\" class=\"org.geoserver.web.data.store.cog.CoverageReaderCogInputObjectConverter\">\n+         <constructor-arg ref=\"catalog\"/>\n+    </bean>\n+\n+  <bean id=\"COGGeoTIFFExclusionFilter\" class=\"org.geoserver.platform.NameExclusionFilter\">\n+    <property name=\"beanId\" value=\"geotiffStorePanel\" />\n+  </bean>\n+    <bean id=\"CogGeotiffStorePanel\" class=\"org.geoserver.web.data.resource.DataStorePanelInfo\">\n+        <property name=\"id\" value=\"geotiffRaster\" />\n+        <property name=\"factoryClass\" value=\"org.geotools.gce.geotiff.GeoTiffFormat\" />\n+        <property name=\"iconBase\" value=\"org.geoserver.web.GeoServerApplication\" />\n+        <property name=\"icon\" value=\"img/icons/geosilk/page_white_raster.png\" />\n+        <property name=\"componentClass\"\n+                  value=\"org.geoserver.web.data.store.cog.panel.CogRasterEditPanel\" />\n+    </bean>\n+    <bean id=\"CogSettingsPanel\" class=\"org.geoserver.web.data.settings.SettingsPluginPanelInfo\">\n+        <description>This bean adds the necessary form fields for COG Settings</description>\n+        <property name=\"id\" value=\"cogSettingsPanel\"/>\n+        <property name=\"titleKey\" value=\"CogSettings\"/>\n+        <property name=\"componentClass\" value=\"org.geoserver.web.data.store.cog.panel.CogSettingsPluginPanel\"/>\n+        <property name=\"priority\" value=\"100\"/>\n+    </bean>\n+\n+    <bean id=\"cogSettingsInitializer\" class=\"org.geoserver.web.data.store.cog.CogSettingsInitializer\"/>\n+\n+    <bean id=\"cogSettingsXStreamInitializer\" class=\"org.geoserver.web.data.store.cog.CogSettingsXStreamInitializer\" />\n+\n+    <bean id=\"cogEncryptedFieldsProvider\" class=\" org.geoserver.web.data.store.cog.CogEncryptedFieldsProvider\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjI5MQ==", "bodyText": "Forgot to commit. Committing it right now and also moved everything but panel to org.geoserver.cog package", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503306291", "createdAt": "2020-10-12T13:44:37Z", "author": {"login": "dromagnoli"}, "path": "src/community/cog/src/main/java/applicationContext.xml", "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeff<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n+\n+<beans>\n+\n+    <bean id=\"coverageReaderInputObjectCogConverter\" class=\"org.geoserver.web.data.store.cog.CoverageReaderCogInputObjectConverter\">\n+         <constructor-arg ref=\"catalog\"/>\n+    </bean>\n+\n+  <bean id=\"COGGeoTIFFExclusionFilter\" class=\"org.geoserver.platform.NameExclusionFilter\">\n+    <property name=\"beanId\" value=\"geotiffStorePanel\" />\n+  </bean>\n+    <bean id=\"CogGeotiffStorePanel\" class=\"org.geoserver.web.data.resource.DataStorePanelInfo\">\n+        <property name=\"id\" value=\"geotiffRaster\" />\n+        <property name=\"factoryClass\" value=\"org.geotools.gce.geotiff.GeoTiffFormat\" />\n+        <property name=\"iconBase\" value=\"org.geoserver.web.GeoServerApplication\" />\n+        <property name=\"icon\" value=\"img/icons/geosilk/page_white_raster.png\" />\n+        <property name=\"componentClass\"\n+                  value=\"org.geoserver.web.data.store.cog.panel.CogRasterEditPanel\" />\n+    </bean>\n+    <bean id=\"CogSettingsPanel\" class=\"org.geoserver.web.data.settings.SettingsPluginPanelInfo\">\n+        <description>This bean adds the necessary form fields for COG Settings</description>\n+        <property name=\"id\" value=\"cogSettingsPanel\"/>\n+        <property name=\"titleKey\" value=\"CogSettings\"/>\n+        <property name=\"componentClass\" value=\"org.geoserver.web.data.store.cog.panel.CogSettingsPluginPanel\"/>\n+        <property name=\"priority\" value=\"100\"/>\n+    </bean>\n+\n+    <bean id=\"cogSettingsInitializer\" class=\"org.geoserver.web.data.store.cog.CogSettingsInitializer\"/>\n+\n+    <bean id=\"cogSettingsXStreamInitializer\" class=\"org.geoserver.web.data.store.cog.CogSettingsXStreamInitializer\" />\n+\n+    <bean id=\"cogEncryptedFieldsProvider\" class=\" org.geoserver.web.data.store.cog.CogEncryptedFieldsProvider\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2ODEzOQ=="}, "originalCommit": {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE4NjQ1OnYy", "diffSide": "RIGHT", "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/CoverageReaderCogInputObjectConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0MzoxN1rOHf9H6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0OTo1OFrOHf_lUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTM1Mg==", "bodyText": "Confused as to why username/pwd are part of the connection parmaters, but the other cog settings are in a dedicated object stored in the metadata map instead.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503269352", "createdAt": "2020-10-12T12:43:17Z", "author": {"login": "aaime"}, "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/CoverageReaderCogInputObjectConverter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.cog;\n+\n+import it.geosolutions.imageio.core.BasicAuthURI;\n+import it.geosolutions.imageio.core.SourceSPIProvider;\n+import it.geosolutions.imageioimpl.plugins.cog.*;\n+import it.geosolutions.imageioimpl.plugins.cog.CogSourceSPIProvider;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import javax.imageio.spi.ImageInputStreamSpi;\n+import javax.imageio.spi.ImageReaderSpi;\n+import org.geoserver.catalog.*;\n+import org.geotools.util.factory.Hints;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.coverage.grid.GridCoverageReader;\n+\n+/**\n+ * Attempts to convert the source input object for a {@link GridCoverageReader} to a {@link\n+ * SourceSPIProvider}\n+ */\n+public class CoverageReaderCogInputObjectConverter\n+        implements CoverageReaderInputObjectConverter<SourceSPIProvider> {\n+\n+    static Logger LOGGER = Logging.getLogger(CoverageReaderCogInputObjectConverter.class);\n+\n+    private static final ImageInputStreamSpi COG_IMAGE_INPUT_STREAM_SPI =\n+            new CogImageInputStreamSpi();\n+\n+    private static final ImageReaderSpi COG_IMAGE_READER_SPI = new CogImageReaderSpi();\n+\n+    private final Catalog catalog;\n+\n+    public CoverageReaderCogInputObjectConverter(Catalog catalog) {\n+        this.catalog = catalog;\n+    }\n+\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints) {\n+        return convert(input, null, coverageInfo, hints);\n+    }\n+\n+    /**\n+     * Performs the conversion of the input object to a {@link SourceSPIProvider} object. If this\n+     * converter is not able to convert the input to that, an empty {@link Optional} will be\n+     * returned.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return\n+     */\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,\n+            @Nullable CoverageInfo coverageInfo,\n+            @Nullable Hints hints) {\n+        if (!(input instanceof String)) {\n+            return Optional.empty();\n+        }\n+        String urlString = (String) input;\n+        return canConvert(urlString)\n+                ? convertReaderInputObject(urlString, coverageStoreInfo, coverageInfo)\n+                : Optional.empty();\n+    }\n+\n+    /**\n+     * Checks to see if the input string is a COG URI.\n+     *\n+     * @param input The input string.\n+     * @return Value representing whether or not this converter is able to convert the provided\n+     *     input.\n+     */\n+    protected boolean canConvert(String input) {\n+        return input.startsWith(CogSettings.COG_URL_HEADER);\n+    }\n+\n+    /**\n+     * Performs the conversion to a {@link SourceSPIProvider} object\n+     *\n+     * @param input The input string.\n+     * @param coverageStoreInfo the input coverageStore info\n+     * @param coverageInfo the input coverage info\n+     * @return The Optional object containing the provider\n+     */\n+    protected Optional<SourceSPIProvider> convertReaderInputObject(\n+            String input, CoverageStoreInfo coverageStoreInfo, CoverageInfo coverageInfo) {\n+\n+        String realUrl = input;\n+        if (realUrl.startsWith(CogSettings.COG_URL_HEADER)) {\n+            realUrl = input.substring(CogSettings.COG_URL_HEADER.length());\n+        }\n+        MetadataMap metadata = coverageStoreInfo.getMetadata();\n+        CogSettings cogSettings = new CogSettings();\n+        if (metadata != null && metadata.containsKey(CogSettings.COG_SETTINGS_KEY)) {\n+            cogSettings = (CogSettings) metadata.get(CogSettings.COG_SETTINGS_KEY);\n+        }\n+\n+        Map<String, Serializable> connectionParameters =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwOTY0OQ==", "bodyText": "I have seen that all the other \"store\"s were putting user and pass in the connectionParameters so I have used the same approach. Whilst the CogSettings are more related to configuration/implementation (rangeReader implementation, caching to be used, even if actually disabled) details.", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503309649", "createdAt": "2020-10-12T13:49:58Z", "author": {"login": "dromagnoli"}, "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/CoverageReaderCogInputObjectConverter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.cog;\n+\n+import it.geosolutions.imageio.core.BasicAuthURI;\n+import it.geosolutions.imageio.core.SourceSPIProvider;\n+import it.geosolutions.imageioimpl.plugins.cog.*;\n+import it.geosolutions.imageioimpl.plugins.cog.CogSourceSPIProvider;\n+import java.io.Serializable;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.logging.Logger;\n+import javax.annotation.Nullable;\n+import javax.imageio.spi.ImageInputStreamSpi;\n+import javax.imageio.spi.ImageReaderSpi;\n+import org.geoserver.catalog.*;\n+import org.geotools.util.factory.Hints;\n+import org.geotools.util.logging.Logging;\n+import org.opengis.coverage.grid.GridCoverageReader;\n+\n+/**\n+ * Attempts to convert the source input object for a {@link GridCoverageReader} to a {@link\n+ * SourceSPIProvider}\n+ */\n+public class CoverageReaderCogInputObjectConverter\n+        implements CoverageReaderInputObjectConverter<SourceSPIProvider> {\n+\n+    static Logger LOGGER = Logging.getLogger(CoverageReaderCogInputObjectConverter.class);\n+\n+    private static final ImageInputStreamSpi COG_IMAGE_INPUT_STREAM_SPI =\n+            new CogImageInputStreamSpi();\n+\n+    private static final ImageReaderSpi COG_IMAGE_READER_SPI = new CogImageReaderSpi();\n+\n+    private final Catalog catalog;\n+\n+    public CoverageReaderCogInputObjectConverter(Catalog catalog) {\n+        this.catalog = catalog;\n+    }\n+\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input, @Nullable CoverageInfo coverageInfo, @Nullable Hints hints) {\n+        return convert(input, null, coverageInfo, hints);\n+    }\n+\n+    /**\n+     * Performs the conversion of the input object to a {@link SourceSPIProvider} object. If this\n+     * converter is not able to convert the input to that, an empty {@link Optional} will be\n+     * returned.\n+     *\n+     * @param input The input object.\n+     * @param coverageStoreInfo The coverage store, may be <code>null</code>.\n+     * @param coverageInfo The grid coverage metadata, may be <code>null</code>.\n+     * @param hints Hints to use when loading the coverage, may be <code>null</code>.\n+     * @return\n+     */\n+    @Override\n+    public Optional<SourceSPIProvider> convert(\n+            Object input,\n+            @Nullable CoverageStoreInfo coverageStoreInfo,\n+            @Nullable CoverageInfo coverageInfo,\n+            @Nullable Hints hints) {\n+        if (!(input instanceof String)) {\n+            return Optional.empty();\n+        }\n+        String urlString = (String) input;\n+        return canConvert(urlString)\n+                ? convertReaderInputObject(urlString, coverageStoreInfo, coverageInfo)\n+                : Optional.empty();\n+    }\n+\n+    /**\n+     * Checks to see if the input string is a COG URI.\n+     *\n+     * @param input The input string.\n+     * @return Value representing whether or not this converter is able to convert the provided\n+     *     input.\n+     */\n+    protected boolean canConvert(String input) {\n+        return input.startsWith(CogSettings.COG_URL_HEADER);\n+    }\n+\n+    /**\n+     * Performs the conversion to a {@link SourceSPIProvider} object\n+     *\n+     * @param input The input string.\n+     * @param coverageStoreInfo the input coverageStore info\n+     * @param coverageInfo the input coverage info\n+     * @return The Optional object containing the provider\n+     */\n+    protected Optional<SourceSPIProvider> convertReaderInputObject(\n+            String input, CoverageStoreInfo coverageStoreInfo, CoverageInfo coverageInfo) {\n+\n+        String realUrl = input;\n+        if (realUrl.startsWith(CogSettings.COG_URL_HEADER)) {\n+            realUrl = input.substring(CogSettings.COG_URL_HEADER.length());\n+        }\n+        MetadataMap metadata = coverageStoreInfo.getMetadata();\n+        CogSettings cogSettings = new CogSettings();\n+        if (metadata != null && metadata.containsKey(CogSettings.COG_SETTINGS_KEY)) {\n+            cogSettings = (CogSettings) metadata.get(CogSettings.COG_SETTINGS_KEY);\n+        }\n+\n+        Map<String, Serializable> connectionParameters =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI2OTM1Mg=="}, "originalCommit": {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjE5MTk3OnYy", "diffSide": "RIGHT", "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/panel/CogSettingsStorePanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0NDo1MFrOHf9LYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0NDo1MFrOHf9LYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MDI0MA==", "bodyText": "Unused private method?", "url": "https://github.com/geoserver/geoserver/pull/4531#discussion_r503270240", "createdAt": "2020-10-12T12:44:50Z", "author": {"login": "aaime"}, "path": "src/community/cog/src/main/java/org/geoserver/web/data/store/cog/panel/CogSettingsStorePanel.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+package org.geoserver.web.data.store.cog.panel;\n+\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.FormComponent;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.geoserver.web.data.store.cog.CogSettingsStore;\n+import org.geoserver.web.data.store.panel.PasswordParamPanel;\n+import org.geoserver.web.data.store.panel.TextParamPanel;\n+import org.geoserver.web.util.MapModel;\n+\n+/** Store specific CogSettings panel, containing therefore eventual authentication info */\n+public class CogSettingsStorePanel<T extends CogSettingsStore> extends CogSettingsPanel {\n+\n+    FormComponent user;\n+\n+    FormComponent password;\n+\n+    public CogSettingsStorePanel(String id, IModel settingsModel, Form storeEditForm) {\n+        super(id, settingsModel);\n+\n+        final IModel model = storeEditForm.getModel();\n+        final IModel paramsModel = new PropertyModel(model, \"connectionParameters\");\n+\n+        user = addTextPanel(paramsModel, \"user\", \"user\", \"CogSettings.userName\", false);\n+        password = addPasswordPanel(paramsModel, \"password\", \"CogSettings.password\", false);\n+\n+        user.setOutputMarkupId(true);\n+        password.setOutputMarkupId(true);\n+    }\n+\n+    private CogSettingsStore getSettings(IModel<T> model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7b3142cc10cca78ae8142e81d39d2e58ba80e5"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3822, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}