{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNDIxNzkw", "number": 4095, "title": "[GEOS-9522] SldService generate overlapping rules", "bodyText": "Checklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Committs changing the REST API, or any configuration object, should check it the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-02-28T14:33:52Z", "url": "https://github.com/geoserver/geoserver/pull/4095", "merged": true, "mergeCommit": {"oid": "419ac7b790f69fc3e38a5e30566724a2558b08a5"}, "closed": true, "closedAt": "2020-03-04T17:58:53Z", "author": {"login": "taba90"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJrLMsgFqTM2NzA4NDkyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJuBV7ABqjMwODgwMTI1MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDg0OTI0", "url": "https://github.com/geoserver/geoserver/pull/4095#pullrequestreview-367084924", "createdAt": "2020-03-02T10:17:32Z", "commit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxNzozMlrOFwaKzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoyODozNFrOFwahBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDcxOA==", "bodyText": "I'd also check that the second rule here, and that they won't overlap?", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386304718", "createdAt": "2020-03-02T10:17:32Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwNDc3MA==", "bodyText": "Same as above.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386304770", "createdAt": "2020-03-02T10:17:39Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwOTQ4Mg==", "bodyText": "Name suggests a general non overlap test, but in fact it's pretty specific and does not test what happens in the first rule filter.\nSuggestion for a different approach:\nSimpleFeatureType ft = (SimpleFeatureType)= getCatalog().getFeatureTypeByName(\"ClassificationPoints2\").getFeatureType();\nSimpleFeature feature = DataUtilities.create(ft, \"=1|2.0|POINT(4 2.5)\");\nassertTrue(first.getFilter().evaluate(feature));\nassertFalse(second.getFilter().evaluate(feature));", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386309482", "createdAt": "2020-03-02T10:26:41Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/test/java/org/geoserver/sldservice/rest/ClassifierTest.java", "diffHunk": "@@ -1987,4 +1992,134 @@ private void checkRuleLineSymbolizer(Rule rule, String color) {\n         assertNotNull(symbolizer.getStroke());\n         assertEquals(color, symbolizer.getStroke().getColor().toString());\n     }\n+\n+    @Test\n+    public void testOpenIntervalFirstRuleConsistency() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        assertTrue(rules[0].getFilter() instanceof PropertyIsEqualTo);\n+\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        assertTrue(rulesJenks[0].getFilter() instanceof PropertyIsEqualTo);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesClosed() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=2\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 2);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=2&\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    @Test\n+    public void testNotOverlappingRulesOpen() throws Exception {\n+        final String restPath =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=quantile&intervals=3&open=true\";\n+        Document dom = getAsDOM(restPath, 200);\n+        print(dom);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        print(dom, baos);\n+        String resultXml = baos.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rules =\n+                checkSLD(resultXml.replace(\"<Rules>\", sldPrefix).replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rules.length == 3);\n+        Rule first = rules[0];\n+        Rule second = rules[1];\n+        checkNotOverlappingRules(first, second);\n+        final String restPathJenks =\n+                RestBaseController.ROOT_PATH\n+                        + \"/sldservice/cite:ClassificationPoints2/\"\n+                        + getServiceUrl()\n+                        + \".xml?\"\n+                        + \"attribute=bar&ramp=red&method=jenks&intervals=3&open=true\";\n+        Document domJenks = getAsDOM(restPathJenks, 200);\n+        print(domJenks);\n+        ByteArrayOutputStream baosJenks = new ByteArrayOutputStream();\n+        print(domJenks, baosJenks);\n+        String resultXmlJenks = baosJenks.toString().replace(\"\\r\", \"\").replace(\"\\n\", \"\");\n+        Rule[] rulesJenks =\n+                checkSLD(\n+                        resultXmlJenks\n+                                .replace(\"<Rules>\", sldPrefix)\n+                                .replace(\"</Rules>\", sldPostfix));\n+        assertTrue(rulesJenks.length == 2);\n+        Rule firstJenks = rulesJenks[0];\n+        Rule secondJenks = rulesJenks[1];\n+        checkNotOverlappingRules(firstJenks, secondJenks);\n+    }\n+\n+    private void checkNotOverlappingRules(Rule first, Rule second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxMDQwNw==", "bodyText": "Isn't this redundant? If the prev min is the same as the current min, the previous filter must include the value... or not? Asking cause I'm not sure, but if it does, you could reduce the list of arguments of this method.", "url": "https://github.com/geoserver/geoserver/pull/4095#discussion_r386310407", "createdAt": "2020-03-02T10:28:34Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/utils/classifier/RulesBuilder.java", "diffHunk": "@@ -470,4 +476,29 @@ private Expression normalizeProperty(\n     private boolean isDuplicatedClass(List<Rule> rules, Filter f) {\n         return rules.stream().anyMatch(r -> r.getFilter().equals(f));\n     }\n+\n+    /**\n+     * Compares current min and previous min avoiding the production of overlapping Rules\n+     *\n+     * @param currentIdx\n+     * @param groups\n+     * @param att\n+     * @return\n+     */\n+    private Filter getNotOverlappingFilter(\n+            int currentIdx, RangedClassifier groups, Expression att, List<Rule> list) {\n+        Filter f;\n+        if (currentIdx > 0) {\n+            Rule prevRule = list.get(list.size() - 1);\n+            Object currMin = groups.getMin(currentIdx);\n+            Object prevMin = groups.getMin(currentIdx - 1);\n+            if (!prevMin.equals(currMin) || !(prevRule.getFilter() instanceof PropertyIsEqualTo))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca500b18f07d8e8f16493108dbabea4f36463c0e", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/ca500b18f07d8e8f16493108dbabea4f36463c0e", "committedDate": "2020-02-28T14:17:54Z", "message": "[GEOS-9522] SldService generate overlapping rules"}, "afterCommit": {"oid": "18c5e1084224e3e12d5f3f62854fd39e50a6cc99", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/18c5e1084224e3e12d5f3f62854fd39e50a6cc99", "committedDate": "2020-03-02T13:38:36Z", "message": "[GEOS-9522] SldService generate overlapping rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fe5533ba61652ada6cdec714125ff26036b6bd8", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/5fe5533ba61652ada6cdec714125ff26036b6bd8", "committedDate": "2020-03-02T13:47:55Z", "message": "[GEOS-9522] SldService generate overlapping rules"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18c5e1084224e3e12d5f3f62854fd39e50a6cc99", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/18c5e1084224e3e12d5f3f62854fd39e50a6cc99", "committedDate": "2020-03-02T13:38:36Z", "message": "[GEOS-9522] SldService generate overlapping rules"}, "afterCommit": {"oid": "5fe5533ba61652ada6cdec714125ff26036b6bd8", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/5fe5533ba61652ada6cdec714125ff26036b6bd8", "committedDate": "2020-03-02T13:47:55Z", "message": "[GEOS-9522] SldService generate overlapping rules"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}