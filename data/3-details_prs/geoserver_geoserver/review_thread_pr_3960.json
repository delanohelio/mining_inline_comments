{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNDU1ODI0", "number": 3960, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0OToxM1rODXfrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1MTo0OVrODXfuDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTYyODI3OnYy", "diffSide": "RIGHT", "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo0OToxM1rOFc0btA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1MzozOVrOFc0iPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MzUwOA==", "bodyText": "Typo here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    JavaSerializer javaSeializer =\n          \n          \n            \n                    JavaSerializer javaSerializer =", "url": "https://github.com/geoserver/geoserver/pull/3960#discussion_r365763508", "createdAt": "2020-01-13T11:49:13Z", "author": {"login": "aaime"}, "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "diffHunk": "@@ -52,4 +54,19 @@ public void testLoadAndSave() throws IOException {\n         assertEquals(2, newConfiguration.getMaxSynchronousImports());\n         assertEquals(1, newConfiguration.getMaxAsynchronousImports());\n     }\n+\n+    @Test\n+    public void testImporterConfigPageSerialization() {\n+        // acquire wicket serializer\n+        JavaSerializer javaSeializer =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d10e4aa01511d973a8db78bf475cb7bf9ba02901"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2NTE4Mg==", "bodyText": "will do", "url": "https://github.com/geoserver/geoserver/pull/3960#discussion_r365765182", "createdAt": "2020-01-13T11:53:39Z", "author": {"login": "imranrajjad"}, "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "diffHunk": "@@ -52,4 +54,19 @@ public void testLoadAndSave() throws IOException {\n         assertEquals(2, newConfiguration.getMaxSynchronousImports());\n         assertEquals(1, newConfiguration.getMaxAsynchronousImports());\n     }\n+\n+    @Test\n+    public void testImporterConfigPageSerialization() {\n+        // acquire wicket serializer\n+        JavaSerializer javaSeializer =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2MzUwOA=="}, "originalCommit": {"oid": "d10e4aa01511d973a8db78bf475cb7bf9ba02901"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1OTYzNTMzOnYy", "diffSide": "RIGHT", "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1MTo0OVrOFc0fng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxMTo1Mzo0NlrOFc0iXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2NDUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // serialize the page..should not turn null\n          \n          \n            \n                    // JavaSerializer logs an exception and returns null in case there are serialization errors", "url": "https://github.com/geoserver/geoserver/pull/3960#discussion_r365764510", "createdAt": "2020-01-13T11:51:49Z", "author": {"login": "aaime"}, "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "diffHunk": "@@ -52,4 +54,19 @@ public void testLoadAndSave() throws IOException {\n         assertEquals(2, newConfiguration.getMaxSynchronousImports());\n         assertEquals(1, newConfiguration.getMaxAsynchronousImports());\n     }\n+\n+    @Test\n+    public void testImporterConfigPageSerialization() {\n+        // acquire wicket serializer\n+        JavaSerializer javaSeializer =\n+                new JavaSerializer(getGeoServerApplication().getApplicationKey());\n+\n+        login();\n+        // int the page\n+        ImporterConfigPage page = tester.startPage(ImporterConfigPage.class);\n+\n+        // serialize the page..should not turn null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d10e4aa01511d973a8db78bf475cb7bf9ba02901"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2NTIxMg==", "bodyText": "will do", "url": "https://github.com/geoserver/geoserver/pull/3960#discussion_r365765212", "createdAt": "2020-01-13T11:53:46Z", "author": {"login": "imranrajjad"}, "path": "src/extension/importer/web/src/test/java/org/geoserver/importer/web/ImporterConfigPageTest.java", "diffHunk": "@@ -52,4 +54,19 @@ public void testLoadAndSave() throws IOException {\n         assertEquals(2, newConfiguration.getMaxSynchronousImports());\n         assertEquals(1, newConfiguration.getMaxAsynchronousImports());\n     }\n+\n+    @Test\n+    public void testImporterConfigPageSerialization() {\n+        // acquire wicket serializer\n+        JavaSerializer javaSeializer =\n+                new JavaSerializer(getGeoServerApplication().getApplicationKey());\n+\n+        login();\n+        // int the page\n+        ImporterConfigPage page = tester.startPage(ImporterConfigPage.class);\n+\n+        // serialize the page..should not turn null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc2NDUxMA=="}, "originalCommit": {"oid": "d10e4aa01511d973a8db78bf475cb7bf9ba02901"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4101, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}