{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzg3OTQ0", "number": 4462, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTowMDo1N1rOEdYuvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTowMDo1N1rOEdYuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjQ5MzQyOnYy", "diffSide": "RIGHT", "path": "src/extension/wps/wps-core/src/test/java/org/geoserver/wps/ppio/GeoJSONPPIOTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTowMDo1N1rOHIhG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMjoxNToyMFrOHIjF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MzA4Mw==", "bodyText": "I would usually handle this in a try/finally block for extra safety...", "url": "https://github.com/geoserver/geoserver/pull/4462#discussion_r478693083", "createdAt": "2020-08-27T21:00:57Z", "author": {"login": "jodygarnett"}, "path": "src/extension/wps/wps-core/src/test/java/org/geoserver/wps/ppio/GeoJSONPPIOTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geoserver.wps.ppio;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.*;\n+import java.util.List;\n+import org.geoserver.config.GeoServer;\n+import org.geoserver.config.GeoServerInfo;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.wps.WPSTestSupport;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.filter.text.cql2.CQL;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.io.WKTReader;\n+import org.opengis.filter.Filter;\n+\n+public class GeoJSONPPIOTest extends WPSTestSupport {\n+    private InputStream is;\n+\n+    @Override\n+    protected void setUpSpring(List<String> springContextLocations) {\n+        super.setUpSpring(springContextLocations);\n+        springContextLocations.add(\"classpath*:/applicationContext-noargs.xml\");\n+    }\n+\n+    @Before\n+    public void prepareInputStream() throws IOException {\n+        is = SystemTestData.class.getResourceAsStream(\"states.json\");\n+        assertNotNull(is);\n+    }\n+\n+    @After\n+    public void cleanup() throws IOException {\n+        if (is != null) {\n+            is.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testEncodeGeometries() throws Exception {\n+        WKTReader reader = new WKTReader();\n+        Point point = (Point) reader.read(\"POINT(1.123456789 2.0)\");\n+\n+        GeoServer gs = getGeoServer();\n+        GeoServerInfo global = gs.getGlobal();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os);\n+        String output = os.toString();\n+        assertEquals(output, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.12345679,2]}\");\n+\n+        int dec = global.getSettings().getNumDecimals();\n+        global.getSettings().setNumDecimals(4);\n+        getGeoServer().save(global);\n+\n+        ByteArrayOutputStream os2 = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os2);\n+        String output2 = os2.toString();\n+        assertEquals(output2, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.1235,2]}\");\n+\n+        global.getSettings().setNumDecimals(dec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce2c94a935b60aa347727d0ea05e028d9101aa2e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMjQyNw==", "bodyText": "Even in a unit test?", "url": "https://github.com/geoserver/geoserver/pull/4462#discussion_r478712427", "createdAt": "2020-08-27T21:43:08Z", "author": {"login": "jnh5y"}, "path": "src/extension/wps/wps-core/src/test/java/org/geoserver/wps/ppio/GeoJSONPPIOTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geoserver.wps.ppio;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.*;\n+import java.util.List;\n+import org.geoserver.config.GeoServer;\n+import org.geoserver.config.GeoServerInfo;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.wps.WPSTestSupport;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.filter.text.cql2.CQL;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.io.WKTReader;\n+import org.opengis.filter.Filter;\n+\n+public class GeoJSONPPIOTest extends WPSTestSupport {\n+    private InputStream is;\n+\n+    @Override\n+    protected void setUpSpring(List<String> springContextLocations) {\n+        super.setUpSpring(springContextLocations);\n+        springContextLocations.add(\"classpath*:/applicationContext-noargs.xml\");\n+    }\n+\n+    @Before\n+    public void prepareInputStream() throws IOException {\n+        is = SystemTestData.class.getResourceAsStream(\"states.json\");\n+        assertNotNull(is);\n+    }\n+\n+    @After\n+    public void cleanup() throws IOException {\n+        if (is != null) {\n+            is.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testEncodeGeometries() throws Exception {\n+        WKTReader reader = new WKTReader();\n+        Point point = (Point) reader.read(\"POINT(1.123456789 2.0)\");\n+\n+        GeoServer gs = getGeoServer();\n+        GeoServerInfo global = gs.getGlobal();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os);\n+        String output = os.toString();\n+        assertEquals(output, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.12345679,2]}\");\n+\n+        int dec = global.getSettings().getNumDecimals();\n+        global.getSettings().setNumDecimals(4);\n+        getGeoServer().save(global);\n+\n+        ByteArrayOutputStream os2 = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os2);\n+        String output2 = os2.toString();\n+        assertEquals(output2, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.1235,2]}\");\n+\n+        global.getSettings().setNumDecimals(dec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MzA4Mw=="}, "originalCommit": {"oid": "ce2c94a935b60aa347727d0ea05e028d9101aa2e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcyNTYwMA==", "bodyText": "yeah, this was based on testing changes coordinate reference system configuration (so any failure produced so many other failures it was hard to track down.)\nKeep in mind if you run into multi-threaded testing problems in the future.", "url": "https://github.com/geoserver/geoserver/pull/4462#discussion_r478725600", "createdAt": "2020-08-27T22:15:20Z", "author": {"login": "jodygarnett"}, "path": "src/extension/wps/wps-core/src/test/java/org/geoserver/wps/ppio/GeoJSONPPIOTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *    GeoTools - The Open Source Java GIS Toolkit\n+ *    http://geotools.org\n+ *\n+ *    (C) 2020, Open Source Geospatial Foundation (OSGeo)\n+ *\n+ *    This library is free software; you can redistribute it and/or\n+ *    modify it under the terms of the GNU Lesser General Public\n+ *    License as published by the Free Software Foundation;\n+ *    version 2.1 of the License.\n+ *\n+ *    This library is distributed in the hope that it will be useful,\n+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ *    Lesser General Public License for more details.\n+ */\n+package org.geoserver.wps.ppio;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.*;\n+import java.util.List;\n+import org.geoserver.config.GeoServer;\n+import org.geoserver.config.GeoServerInfo;\n+import org.geoserver.data.test.SystemTestData;\n+import org.geoserver.wps.WPSTestSupport;\n+import org.geotools.data.DataUtilities;\n+import org.geotools.data.simple.SimpleFeatureCollection;\n+import org.geotools.filter.text.cql2.CQL;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.locationtech.jts.geom.Point;\n+import org.locationtech.jts.io.WKTReader;\n+import org.opengis.filter.Filter;\n+\n+public class GeoJSONPPIOTest extends WPSTestSupport {\n+    private InputStream is;\n+\n+    @Override\n+    protected void setUpSpring(List<String> springContextLocations) {\n+        super.setUpSpring(springContextLocations);\n+        springContextLocations.add(\"classpath*:/applicationContext-noargs.xml\");\n+    }\n+\n+    @Before\n+    public void prepareInputStream() throws IOException {\n+        is = SystemTestData.class.getResourceAsStream(\"states.json\");\n+        assertNotNull(is);\n+    }\n+\n+    @After\n+    public void cleanup() throws IOException {\n+        if (is != null) {\n+            is.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testEncodeGeometries() throws Exception {\n+        WKTReader reader = new WKTReader();\n+        Point point = (Point) reader.read(\"POINT(1.123456789 2.0)\");\n+\n+        GeoServer gs = getGeoServer();\n+        GeoServerInfo global = gs.getGlobal();\n+        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os);\n+        String output = os.toString();\n+        assertEquals(output, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.12345679,2]}\");\n+\n+        int dec = global.getSettings().getNumDecimals();\n+        global.getSettings().setNumDecimals(4);\n+        getGeoServer().save(global);\n+\n+        ByteArrayOutputStream os2 = new ByteArrayOutputStream(1024);\n+        new GeoJSONPPIO.Geometries(gs).encode(point, os2);\n+        String output2 = os2.toString();\n+        assertEquals(output2, \"{\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[1.1235,2]}\");\n+\n+        global.getSettings().setNumDecimals(dec);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY5MzA4Mw=="}, "originalCommit": {"oid": "ce2c94a935b60aa347727d0ea05e028d9101aa2e"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3904, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}