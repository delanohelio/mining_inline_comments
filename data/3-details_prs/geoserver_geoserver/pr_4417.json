{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODAzODMw", "number": 4417, "title": "[GEOS-9696] Add documentation regarding JsonPointerFunction support", "bodyText": "Adds documentation regarding jsonPointer function encoding to postgreSQL query.\nJira ticket https://osgeo-org.atlassian.net/browse/GEOS-9696\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Commits changing the REST API, or any configuration object, should check if the REST API docs (Swagger YAML files and classic documentation) need to be updated.", "createdAt": "2020-07-14T10:50:40Z", "url": "https://github.com/geoserver/geoserver/pull/4417", "merged": true, "mergeCommit": {"oid": "bc7707ccce881b7eb61bf2612c03425c731ea10f"}, "closed": true, "closedAt": "2020-07-24T13:47:57Z", "author": {"login": "taba90"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0zxIZAH2gAyNDQ4ODAzODMwOmI1NDUxYTQ0ZDczNjczNGU3OWE2YzJkMzY0ODc4NjM5ZTE0MTQzYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3CV4xAH2gAyNDQ4ODAzODMwOjkzODEzMjdmMTQ4NDQ3OTJlMGQxYWIwMGM0NzAwYTY5ZGY4ZDExMTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/b5451a44d736734e79a6c2d364878639e14143c5", "committedDate": "2020-07-14T10:48:58Z", "message": "[GEOS-9696] Add documentation regarding JsonPointerFunction support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNTk2Njkw", "url": "https://github.com/geoserver/geoserver/pull/4417#pullrequestreview-451596690", "createdAt": "2020-07-20T13:19:21Z", "commit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoxOToyMVrOG0L7SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMzoyMjoyMFrOG0MFkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NDUzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n          \n          \n            \n            GeoServer is able to translate the ``jsonPointer`` function to a query using PostgreSQL support for JSON types.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457374537", "createdAt": "2020-07-20T13:19:21Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NjExMg==", "bodyText": "Bullet lists in english are different than in italian, you should start each sentence with a capital and complete the sentence with a period, not a semicolon.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457376112", "createdAt": "2020-07-20T13:21:11Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM3NzE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Anyway it is worth mentioning that, according to the PostgreSQL documentation, jsonb is the recommended type to be used since it is faster to process. \n          \n          \n            \n            Anyways, the the PostgreSQL documentation recommends usage of jsonb, as it's is faster to process.", "url": "https://github.com/geoserver/geoserver/pull/4417#discussion_r457377171", "createdAt": "2020-07-20T13:22:20Z", "author": {"login": "aaime"}, "path": "doc/en/user/source/data/database/postgis.rst", "diffHunk": "@@ -245,4 +245,106 @@ To insert multi-line text (for use with labeling) remember to use escaped text::\n    INSERT INTO place VALUES (ST_GeomFromText('POINT(-71.060316 48.432044)', 4326), E'Westfield\\nTower');\n \n \n+JsonPointer Function support\n+----------------------------\n+\n+GeoServer is able to translate a jsonPointer function to a query using PostgreSQL support for JSON types. \n+The following are the main characteristics of the implementation:\n+\n+* the jsonPointer function syntax is like the following: ``jsonPointer(attributeName,'/path/to/json/attribute')``;\n+\n+* the function is able to select attributes inside json arrays by specifying the index of the target element in the json path eg. ``'/path/to/array/element/0'``;\n+\n+* when accessing a JSON property it is implicitly assumed that the same property will have the same type on all features, otherwise a cast exception will be thrown by the database;\n+\n+* GeoServer will perform a cast automatically to the expect type from the evaluation; the cast is completely delegated to the database;\n+\n+* if the property doesn't exists no errors will be issued, but the features that have that property will be excluded; hence the property we whish to query is not mandatory in all features\n+\n+Examples\n+````````\n+\n+Having a json column storing jsonvalues like the following,\n+\n+.. code-block :: json\n+\n+  { \"name\": \"city name\", \n+    \"description\": \"the city description\",\n+    \"districts\": [\n+      {\n+       \"name\":\"district1\",\n+       \"population\": 2000\n+      },\n+      {\n+       \"name\":\"district2\",\n+       \"population\": 5000\n+      }\n+    ]\n+    \"population\":{\n+      \"average_age\": 35,\n+      \"toal\": 50000 \n+    }\n+  }\n+\n+and assuming an attribute name as ``city``, valid jsonPointer functions would be: \n+\n+* ``jsonPointer(city, '/name')``, \n+\n+* ``jsonPointer(city, '/population/average_age')``, \n+\n+* ``jsonPointer(city, '/districts/0/name')``.\n+\n+An example cql_filter would then be ``jsonPointer(city, '/population/average_age') > 30``.\n+\n+While an example rule in a sld style sheet could be:\n+\n+.. code-block:: xml \n+\n+   <Rule>\n+     <Name>Cities</Name>\n+        <ogc:Filter>\n+          <ogc:PropertyIsEqualTo>\n+            <ogc:Function name=\"jsonPointer\">\n+              <ogc:PropertyName>city</ogc:PropertyName>\n+              <ogc:Literal>/population/average_age</ogc:Literal>\n+            </ogc:Function>\n+            <ogc:Literal>35</ogc:Literal>\n+          </ogc:PropertyIsEqualTo>\n+          </ogc:Filter>          \n+        <PointSymbolizer>\n+          <Graphic>\n+            <Mark>\n+              <WellKnownName>square</WellKnownName>\n+                <Fill>\n+                  <CssParameter name=\"fill\">#FF0000</CssParameter>\n+                </Fill>\n+            </Mark>\n+            <Size>16</Size>\n+          </Graphic>\n+       </PointSymbolizer>\n+    </Rule>\n+\n+\n+DataTypes\n+`````````\n+\n+PostgreSQL defines two JSON datatypes: \n+\n+ * ``json`` that stores an exact copy of the input text;\n+\n+ * ``jsonb`` which store the value in a decomposed binary format.\n+\n+The jsonPointer function supports both, as well as the text format if it contains a valid json representation. \n+Anyway it is worth mentioning that, according to the PostgreSQL documentation, jsonb is the recommended type to be used since it is faster to process. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5451a44d736734e79a6c2d364878639e14143c5"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9381327f14844792e0d1ab00c4700a69df8d1111", "author": {"user": {"login": "taba90", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9381327f14844792e0d1ab00c4700a69df8d1111", "committedDate": "2020-07-21T08:55:38Z", "message": "reviewer's feedback applied"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1527, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}