{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjk4ODg1", "number": 4426, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1M1rOEVErbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1M1rOEVErbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTMyMjA3OnYy", "diffSide": "RIGHT", "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/rest/CapabilitiesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxOTo1M1rOG7n1dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1OToxOFrOG78vDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTgyOA==", "bodyText": "It's a bit odd to see a custom converter being used, normally one would just let XStream handle the writing, aliasing classes and fields as necessary to get nicer names in output. It's not wrong though. Just wondering why you went down this road?", "url": "https://github.com/geoserver/geoserver/pull/4426#discussion_r465171828", "createdAt": "2020-08-04T16:19:53Z", "author": {"login": "aaime"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/rest/CapabilitiesController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+\n+package org.geoserver.sldservice.rest;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.converters.Converter;\n+import com.thoughtworks.xstream.converters.MarshallingContext;\n+import com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import java.util.List;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.config.util.XStreamPersister;\n+import org.geoserver.rest.RestBaseController;\n+import org.geoserver.rest.converters.XStreamMessageConverter;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/** CapabilitiesController. */\n+@RestController\n+@ControllerAdvice\n+@RequestMapping(path = RestBaseController.ROOT_PATH + \"/sldservice\")\n+public class CapabilitiesController extends BaseSLDServiceController {\n+\n+    public CapabilitiesController(Catalog catalog) {\n+        super(catalog);\n+    }\n+\n+    @GetMapping(\n+        path = \"/capabilities\",\n+        produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n+    )\n+    public Object classificationCapabilities() {\n+        return wrapObject(new SldServiceCapabilities(), SldServiceCapabilities.class);\n+    }\n+\n+    @Override\n+    public void configurePersister(XStreamPersister persister, XStreamMessageConverter converter) {\n+        XStream xstream = persister.getXStream();\n+        xstream.alias(\"capabilities\", SldServiceCapabilities.class);\n+        xstream.registerConverter(new CapabilitiesConverter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83790fd14fcac29690d2cde061fad14f7445b967"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxNDI1Mw==", "bodyText": "thanks for your review @aaime. I tried by simply aliasing on fields but I wasn't able to get rid of @Class attributeName. Also to have the array with methods named as \"classifications\" I would have needed to aliasing on type String, but this would have likely caused some issues if in the future more attribute would have been added to the SldServiceCapabilities class. I'm putting here the result obtained without the custom converter for clarity:\n{\n\"capabilities\": {\n\"vectorClassifications\": {\n\"@Class\": \"java.util.Arrays$ArrayList\",\n\"string\": [\n\"quantile\",\n\"jenks\",\n\"equalArea\",\n\"equalInterval\",\n\"uniqueInterval\",\n\"standardDeviation\"\n]\n},\n\"rasterClassifications\": {\n\"@Class\": \"java.util.Arrays$ArrayList\",\n\"string\": [\n\"quantile\",\n\"jenks\",\n\"equalArea\",\n\"equalInterval\",\n\"uniqueInterval\"\n]\n}\n}\n}", "url": "https://github.com/geoserver/geoserver/pull/4426#discussion_r465514253", "createdAt": "2020-08-05T06:59:18Z", "author": {"login": "taba90"}, "path": "src/extension/sldService/src/main/java/org/geoserver/sldservice/rest/CapabilitiesController.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/* (c) 2020 Open Source Geospatial Foundation - all rights reserved\n+ * This code is licensed under the GPL 2.0 license, available at the root\n+ * application directory.\n+ */\n+\n+package org.geoserver.sldservice.rest;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.converters.Converter;\n+import com.thoughtworks.xstream.converters.MarshallingContext;\n+import com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import java.util.List;\n+import org.geoserver.catalog.Catalog;\n+import org.geoserver.config.util.XStreamPersister;\n+import org.geoserver.rest.RestBaseController;\n+import org.geoserver.rest.converters.XStreamMessageConverter;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/** CapabilitiesController. */\n+@RestController\n+@ControllerAdvice\n+@RequestMapping(path = RestBaseController.ROOT_PATH + \"/sldservice\")\n+public class CapabilitiesController extends BaseSLDServiceController {\n+\n+    public CapabilitiesController(Catalog catalog) {\n+        super(catalog);\n+    }\n+\n+    @GetMapping(\n+        path = \"/capabilities\",\n+        produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE}\n+    )\n+    public Object classificationCapabilities() {\n+        return wrapObject(new SldServiceCapabilities(), SldServiceCapabilities.class);\n+    }\n+\n+    @Override\n+    public void configurePersister(XStreamPersister persister, XStreamMessageConverter converter) {\n+        XStream xstream = persister.getXStream();\n+        xstream.alias(\"capabilities\", SldServiceCapabilities.class);\n+        xstream.registerConverter(new CapabilitiesConverter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE3MTgyOA=="}, "originalCommit": {"oid": "83790fd14fcac29690d2cde061fad14f7445b967"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3880, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}