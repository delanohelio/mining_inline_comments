{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDcwOTM4", "number": 4055, "title": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array", "bodyText": "When using App-Schema JDBC multivalue 1..n cardinality, GeoJSON output produces repeated keys instead locate the objects inside a json array. This PR introduces a fix for this issue.\nJIRA issue:\nhttps://osgeo-org.atlassian.net/browse/GEOS-9501\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Committs changing the REST API, or any configuration object, should check it the REST API docs (Swagger YAML files and classic documentation) need to be updated.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.", "createdAt": "2020-02-13T20:24:28Z", "url": "https://github.com/geoserver/geoserver/pull/4055", "merged": true, "mergeCommit": {"oid": "8e70b3782e5acbb7b5465026e574cbb9ab6eccf9"}, "closed": true, "closedAt": "2020-02-14T13:55:44Z", "author": {"login": "fernandor777"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcECrshgFqTM1ODU5MDQxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcED1LpgBqjMwMzY5NDIxNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTkwNDE0", "url": "https://github.com/geoserver/geoserver/pull/4055#pullrequestreview-358590414", "createdAt": "2020-02-13T22:13:44Z", "commit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoxMzo0NVrOFplbWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyODo0OVrOFplz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTE0Ng==", "bodyText": "Looks something is strange here whit the formatting, could you double check @fernandor777?", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379149146", "createdAt": "2020-02-13T22:13:45Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-oracle-test/pom.xml", "diffHunk": "@@ -157,6 +157,21 @@\n             <version>2.0.0-1</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+\t     \t<groupId>com.fasterxml.jackson.core</groupId>\n+\t     \t<artifactId>jackson-core</artifactId>\n+\t     \t<scope>test</scope>\n+\t   \t</dependency>\n+\t   \t<dependency>\n+\t\t    <groupId>com.fasterxml.jackson.core</groupId>\n+\t\t    <artifactId>jackson-annotations</artifactId>\n+\t\t    <scope>test</scope>\n+\t    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTMwMw==", "bodyText": "Same here \ud83d\ude31.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379149303", "createdAt": "2020-02-13T22:14:06Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-postgis-test/pom.xml", "diffHunk": "@@ -157,6 +157,21 @@\n             <version>2.0.0-1</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+\t     \t<groupId>com.fasterxml.jackson.core</groupId>\n+\t     \t<artifactId>jackson-core</artifactId>\n+\t     \t<scope>test</scope>\n+\t   \t</dependency>\n+\t   \t<dependency>\n+\t\t    <groupId>com.fasterxml.jackson.core</groupId>\n+\t\t    <artifactId>jackson-annotations</artifactId>\n+\t\t    <scope>test</scope>\n+\t    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTQwNw==", "bodyText": "Same here \ud83d\ude40.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379149407", "createdAt": "2020-02-13T22:14:20Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-test/pom.xml", "diffHunk": "@@ -163,6 +163,21 @@\n             <version>2.0.0-1</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+\t     \t<groupId>com.fasterxml.jackson.core</groupId>\n+\t     \t<artifactId>jackson-core</artifactId>\n+\t     \t<scope>test</scope>\n+\t   \t</dependency>\n+\t   \t<dependency>\n+\t\t    <groupId>com.fasterxml.jackson.core</groupId>\n+\t\t    <artifactId>jackson-annotations</artifactId>\n+\t\t    <scope>test</scope>\n+\t    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTcyNw==", "bodyText": "Looks like this is the last one, good I run out of screaming icons \ud83d\ude0c.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379149727", "createdAt": "2020-02-13T22:15:05Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-test/pom.xml", "diffHunk": "@@ -163,6 +163,21 @@\n             <version>2.0.0-1</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+\t     \t<groupId>com.fasterxml.jackson.core</groupId>\n+\t     \t<artifactId>jackson-core</artifactId>\n+\t     \t<scope>test</scope>\n+\t   \t</dependency>\n+\t   \t<dependency>\n+\t\t    <groupId>com.fasterxml.jackson.core</groupId>\n+\t\t    <artifactId>jackson-annotations</artifactId>\n+\t\t    <scope>test</scope>\n+\t    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0OTQwNw=="}, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MDI2Nw==", "bodyText": "Multi-values is only support with JDBC right?", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379150267", "createdAt": "2020-02-13T22:16:21Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-test/src/test/java/org/geoserver/test/NormalizedMultiValuesTest.java", "diffHunk": "@@ -258,14 +270,44 @@ public void testGetAllNormalizedMultiValuesWfsJson20() throws Exception {\n                         + \"&outputFormat=application/json\";\n         JSONObject json = (JSONObject) getAsJSON(request);\n         JSONArray features = json.getJSONArray(\"features\");\n-        assertEquals(2, features.size());\n+        assertEquals(3, features.size());\n         // check stations json content\n         JSONObject station = getStationById(features, \"st.1\");\n         assertNotNull(station);\n         checkStationJson1(station);\n         station = getStationById(features, \"st.2\");\n         assertNotNull(station);\n         checkStationJson2(station);\n+        station = getStationById(features, \"st.3\");\n+        assertNotNull(station);\n+        checkStationJson3(station);\n+    }\n+\n+    @Test\n+    public void testGetAllNormalizedMultiValuesWfsJsonFormat20() throws Exception {\n+        // check if this is an online test with a JDBC based data store\n+        if (notJdbcBased()) {\n+            // not a JDBC online test\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MTI5Ng==", "bodyText": "I see so you parse the JSON, since no repeated keys are allowed if the parsing passes it means that the repeat keys were encoded as arrays. But still I will add an explicit check validating that we an array with the expected entities inside it.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379151296", "createdAt": "2020-02-13T22:18:54Z", "author": {"login": "nmco"}, "path": "src/extension/app-schema/app-schema-test/src/test/java/org/geoserver/test/NormalizedMultiValuesTest.java", "diffHunk": "@@ -258,14 +270,44 @@ public void testGetAllNormalizedMultiValuesWfsJson20() throws Exception {\n                         + \"&outputFormat=application/json\";\n         JSONObject json = (JSONObject) getAsJSON(request);\n         JSONArray features = json.getJSONArray(\"features\");\n-        assertEquals(2, features.size());\n+        assertEquals(3, features.size());\n         // check stations json content\n         JSONObject station = getStationById(features, \"st.1\");\n         assertNotNull(station);\n         checkStationJson1(station);\n         station = getStationById(features, \"st.2\");\n         assertNotNull(station);\n         checkStationJson2(station);\n+        station = getStationById(features, \"st.3\");\n+        assertNotNull(station);\n+        checkStationJson3(station);\n+    }\n+\n+    @Test\n+    public void testGetAllNormalizedMultiValuesWfsJsonFormat20() throws Exception {\n+        // check if this is an online test with a JDBC based data store\n+        if (notJdbcBased()) {\n+            // not a JDBC online test\n+            return;\n+        }\n+        // execute the WFS 2.0 request\n+        String request =\n+                \"wfs?request=GetFeature&version=2.0&typename=st_gml32:Station_gml32\"\n+                        + \"&outputFormat=application/json\";\n+        MockHttpServletResponse response = getAsServletResponse(request);\n+\n+        String content = response.getContentAsString();\n+        validateJsonOutput(content);\n+    }\n+\n+    private void validateJsonOutput(String jsonString) {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        try {\n+            objectMapper.readTree(jsonString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MzUxMQ==", "bodyText": "@fernandor777 look at he rest of the code and try to apply the same patterns :black_flag, more precisely in this case it means:\n\nisolate this behavior in an helper method, this else shoudl be a single line\ndocument properly, the comment above doesn't seem to match what you are doing\nif possible avoid this psychedelic Java 8 streams usage, it has performance personalities and it's not clear at all", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379153511", "createdAt": "2020-02-13T22:24:27Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -244,7 +246,24 @@ private void encodePropertiesByType(\n                 encodeLinkedFeatures(descriptor, linkedFeatures);\n             } else {\n                 // no chained or linked features just encode each property\n-                properties.forEach(this::encodeProperty);\n+                String attributeName = descriptor.getName().getLocalPart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1MzY4Nw==", "bodyText": "Is this second else needed waht's going on here?", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379153687", "createdAt": "2020-02-13T22:24:50Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -244,7 +246,24 @@ private void encodePropertiesByType(\n                 encodeLinkedFeatures(descriptor, linkedFeatures);\n             } else {\n                 // no chained or linked features just encode each property\n-                properties.forEach(this::encodeProperty);\n+                String attributeName = descriptor.getName().getLocalPart();\n+                if (properties.size() > 1\n+                        && properties\n+                                .stream()\n+                                .allMatch(\n+                                        prop ->\n+                                                Objects.equals(\n+                                                        attributeName,\n+                                                        prop.getName().getLocalPart()))) {\n+                    jsonWriter.key(attributeName).array();\n+                    properties.forEach(\n+                            prop ->\n+                                    encodeProperty(\n+                                            INSIDE_ARRAY_ATTRIBUTE, prop, getAttributes(prop)));\n+                    jsonWriter.endArray();\n+                } else {\n+                    properties.forEach(this::encodeProperty);\n+                }\n             }\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDAxMQ==", "bodyText": "What's this?", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379154011", "createdAt": "2020-02-13T22:25:39Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -45,6 +46,7 @@\n \n     private static Class NON_FEATURE_TYPE_PROXY;\n     private static final String DATATYPE = \"@dataType\";\n+    private static final String INSIDE_ARRAY_ATTRIBUTE = \"${inside-array}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDQyMA==", "bodyText": "I would have used an if with brackets and put a proper explaining what it means the branch being passed.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379154420", "createdAt": "2020-02-13T22:26:29Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -274,8 +293,8 @@ private void encodeLinkedFeatures(\n     /** Encodes a list of features (chained features) as a JSON array. */\n     private void encodeChainedFeatures(String attributeName, List<Feature> chainedFeatures) {\n         // start the JSON object\n-        jsonWriter.key(attributeName);\n-        jsonWriter.array();\n+        key(attributeName);\n+        if (!isInsideArrayAttributeName(attributeName)) jsonWriter.array();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDU3NQ==", "bodyText": "No idea what this is, could you add documentation?", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379154575", "createdAt": "2020-02-13T22:26:48Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -288,7 +307,11 @@ private void encodeChainedFeatures(String attributeName, List<Feature> chainedFe\n             }\n         }\n         // end the JSON chained features array\n-        jsonWriter.endArray();\n+        if (!isInsideArrayAttributeName(attributeName)) jsonWriter.endArray();\n+    }\n+\n+    private boolean isInsideArrayAttributeName(String attributeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDc1MA==", "bodyText": "Thx!", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379154750", "createdAt": "2020-02-13T22:27:14Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -374,17 +397,22 @@ static boolean checkIfFeatureIsLinked(Property property, Map<NameImpl, String> a\n \n     /**\n      * Encode a feature property, we only support complex attributes and simple attributes, if\n-     * another tye of attribute is used an exception will be throw.\n+     * another type of attribute is used an exception will be throw.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NDk1Mg==", "bodyText": "Please add Javadoc.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379154952", "createdAt": "2020-02-13T22:27:42Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -374,17 +397,22 @@ static boolean checkIfFeatureIsLinked(Property property, Map<NameImpl, String> a\n \n     /**\n      * Encode a feature property, we only support complex attributes and simple attributes, if\n-     * another tye of attribute is used an exception will be throw.\n+     * another type of attribute is used an exception will be throw.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     private void encodeProperty(Property property) {\n         // these extra attributes should be seen as XML attributes\n-        Map<NameImpl, Object> attributes =\n-                (Map<NameImpl, Object>) property.getUserData().get(Attributes.class);\n+        Map<NameImpl, Object> attributes = getAttributes(property);\n         String attributeName = property.getName().getLocalPart();\n         encodeProperty(attributeName, property, attributes);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private Map<NameImpl, Object> getAttributes(Property property) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NTQzNA==", "bodyText": "Please add documentation, this pattern is already strange enough \ud83d\ude0b.", "url": "https://github.com/geoserver/geoserver/pull/4055#discussion_r379155434", "createdAt": "2020-02-13T22:28:49Z", "author": {"login": "nmco"}, "path": "src/wfs/src/main/java/org/geoserver/wfs/json/ComplexGeoJsonWriter.java", "diffHunk": "@@ -618,6 +648,12 @@ private void encodeSimpleAttribute(\n         jsonWriter.endObject();\n     }\n \n+    private void key(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdf2b089ee22f338633f9fe1d926622f20465f9a", "author": {"user": {"login": "fernandor777", "name": "Fernando Mi\u00f1o"}}, "url": "https://github.com/geoserver/geoserver/commit/bdf2b089ee22f338633f9fe1d926622f20465f9a", "committedDate": "2020-02-13T20:22:19Z", "message": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array"}, "afterCommit": {"oid": "e899f8a896374e955bb479eae5564cce59452864", "author": {"user": {"login": "fernandor777", "name": "Fernando Mi\u00f1o"}}, "url": "https://github.com/geoserver/geoserver/commit/e899f8a896374e955bb479eae5564cce59452864", "committedDate": "2020-02-13T23:46:00Z", "message": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a880da98a8dfcb5a61f796217a7c0926435b676b", "author": {"user": {"login": "fernandor777", "name": "Fernando Mi\u00f1o"}}, "url": "https://github.com/geoserver/geoserver/commit/a880da98a8dfcb5a61f796217a7c0926435b676b", "committedDate": "2020-02-13T23:47:12Z", "message": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e899f8a896374e955bb479eae5564cce59452864", "author": {"user": {"login": "fernandor777", "name": "Fernando Mi\u00f1o"}}, "url": "https://github.com/geoserver/geoserver/commit/e899f8a896374e955bb479eae5564cce59452864", "committedDate": "2020-02-13T23:46:00Z", "message": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array"}, "afterCommit": {"oid": "a880da98a8dfcb5a61f796217a7c0926435b676b", "author": {"user": {"login": "fernandor777", "name": "Fernando Mi\u00f1o"}}, "url": "https://github.com/geoserver/geoserver/commit/a880da98a8dfcb5a61f796217a7c0926435b676b", "committedDate": "2020-02-13T23:47:12Z", "message": "[GEOS-9501] WFS GeoJSON complex features output returns duplicated key names instead a JSON array"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1488, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}