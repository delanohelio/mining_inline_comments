{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTE5MzMx", "number": 4291, "title": "[GEOS-9594] CSW: performance issue: every page loads entire catalog", "bodyText": "This change changes performances, and does not resolve a bug or add new functionality. That is why there is no new unit test. However, the existing unit tests are there to prove that this new implementation preserves functionality.\nThe change also simplifies the code.\nChecklist\n\nReviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.\n\nSubmitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.\nFor all pull requests:\n\n Confirm you have read the contribution guidelines\n You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)\n Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.\n\nThe following are required only for core and extension modules (they are welcomed, but not required, for community modules):\n\n There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)\n PR for bug fixes and small new features are presented as a single commit\n Commit message must be in the form \"[GEOS-XYZW] Title of the Jira ticket\" (export to XML in Jira generates the message in this exact form)\n The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.\n New unit tests have been added covering the changes\n This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)\n This PR passes the QA checks (QA checks results will be reported by travis-ci after opening this PR)\n Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)\n Commits changing the REST API, or any configuration object, should check if the REST API docs (Swagger YAML files and classic documentation) need to be updated.", "createdAt": "2020-06-08T13:01:51Z", "url": "https://github.com/geoserver/geoserver/pull/4291", "merged": true, "mergeCommit": {"oid": "93abe99811f9208e8848995543a1347bf4be1b94"}, "closed": true, "closedAt": "2020-06-29T12:50:01Z", "author": {"login": "NielsCharlier"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpRxfMgBqjM0MjA1MTY0Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuCpTDgBqjM0NzIyMDM0NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db7c878ff44b3c442113efd36a1140aaa9fae327", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/db7c878ff44b3c442113efd36a1140aaa9fae327", "committedDate": "2020-06-08T13:01:27Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}, "afterCommit": {"oid": "9d05636b9fc2a9bc1175907c4de18dcbaf158cc5", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9d05636b9fc2a9bc1175907c4de18dcbaf158cc5", "committedDate": "2020-06-08T14:50:51Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d05636b9fc2a9bc1175907c4de18dcbaf158cc5", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/9d05636b9fc2a9bc1175907c4de18dcbaf158cc5", "committedDate": "2020-06-08T14:50:51Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}, "afterCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/1f9038903c42868bfbe86759a573803b334b6f42", "committedDate": "2020-06-08T17:08:13Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjI5OTQy", "url": "https://github.com/geoserver/geoserver/pull/4291#pullrequestreview-430629942", "createdAt": "2020-06-15T13:13:32Z", "commit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzozMlrOGjxktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxMzozMlrOGjxktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NTU1OQ==", "bodyText": "Please comment again.", "url": "https://github.com/geoserver/geoserver/pull/4291#discussion_r440165559", "createdAt": "2020-06-15T13:13:32Z", "author": {"login": "aaime"}, "path": "src/extension/csw/core/src/test/java/org/geoserver/csw/store/internal/LayerGroupTest.java", "diffHunk": "@@ -55,7 +55,7 @@ public void testRecords() throws Exception {\n                 \"csw?service=CSW&version=2.0.2&request=GetRecords&typeNames=csw:Record\"\n                         + \"&resultType=results&elementSetName=full&maxRecords=100\";\n         Document d = getAsDOM(request);\n-        // print(d);\n+        print(d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjMxMjU3", "url": "https://github.com/geoserver/geoserver/pull/4291#pullrequestreview-430631257", "createdAt": "2020-06-15T13:15:05Z", "commit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNTowNVrOGjxoUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyMzowN1rOGjx78A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjQ4MQ==", "bodyText": "Can you split this code a bit, so that it does not end up being nested so much? Creating a separate inner class would probably do the trick", "url": "https://github.com/geoserver/geoserver/pull/4291#discussion_r440166481", "createdAt": "2020-06-15T13:15:05Z", "author": {"login": "aaime"}, "path": "src/extension/csw/core/src/main/java/org/geoserver/csw/store/internal/CatalogStoreFeatureCollection.java", "diffHunk": "@@ -90,4 +105,55 @@ protected void closeIterator(Iterator<Feature> close) {}\n         MemoryFeatureCollection memory = new MemoryFeatureCollection(getSchema(), features);\n         return memory.sort(order);\n     }\n+\n+    private Filter catalogFilter() {\n+\n+        // ignore catalog info's without id\n+        Filter result =\n+                ff.and(filter, ff.not(ff.isNull(mapping.getIdentifierElement().getContent())));\n+\n+        // build filter compatible with layergroups and resources\n+        result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjY3MA==", "bodyText": "Same as above, split code a bit.", "url": "https://github.com/geoserver/geoserver/pull/4291#discussion_r440166670", "createdAt": "2020-06-15T13:15:24Z", "author": {"login": "aaime"}, "path": "src/extension/csw/core/src/main/java/org/geoserver/csw/store/internal/CatalogStoreFeatureCollection.java", "diffHunk": "@@ -90,4 +105,55 @@ protected void closeIterator(Iterator<Feature> close) {}\n         MemoryFeatureCollection memory = new MemoryFeatureCollection(getSchema(), features);\n         return memory.sort(order);\n     }\n+\n+    private Filter catalogFilter() {\n+\n+        // ignore catalog info's without id\n+        Filter result =\n+                ff.and(filter, ff.not(ff.isNull(mapping.getIdentifierElement().getContent())));\n+\n+        // build filter compatible with layergroups and resources\n+        result =\n+                ff.and(\n+                        ff.equals(ff.property(\"advertised\"), ff.literal(true)),\n+                        ff.or(\n+                                /* Layergroup Filter */\n+                                ff.and(\n+                                        ff.equals(\n+                                                ff.property(\"type\"),\n+                                                ff.literal(PublishedType.GROUP)),\n+                                        result),\n+                                /* Resource Filter */\n+                                ff.and(\n+                                        ff.notEqual(\n+                                                ff.property(\"type\"),\n+                                                ff.literal(PublishedType.GROUP)),\n+                                        (Filter)\n+                                                result.accept(\n+                                                        new DuplicatingFilterVisitor() {\n+\n+                                                            public Object visit(\n+                                                                    PropertyName expression,\n+                                                                    Object extraData) {\n+                                                                return getFactory(extraData)\n+                                                                        .property(\n+                                                                                \"resource.\"\n+                                                                                        + expression\n+                                                                                                .getPropertyName(),\n+                                                                                expression\n+                                                                                        .getNamespaceContext());\n+                                                            }\n+                                                        },\n+                                                        null))));\n+        return result;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return Math.min(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MTUwNA==", "bodyText": "I know it was already using the CatalogFacade but, this seems like a grave issue... dodging the catalog means no security is applied, anyone can see every layer regardless of what the security subsystem says?\nThe catalog offers a similar list method, it's the one that should be used instead (and I believe that would also account for \"advertised\", along with workspace specific services and the like).", "url": "https://github.com/geoserver/geoserver/pull/4291#discussion_r440171504", "createdAt": "2020-06-15T13:23:07Z", "author": {"login": "aaime"}, "path": "src/extension/csw/core/src/main/java/org/geoserver/csw/store/internal/CatalogStoreFeatureIterator.java", "diffHunk": "@@ -94,107 +79,46 @@ public CatalogStoreFeatureIterator(\n             RecordDescriptor outputRecordDescriptor,\n             Map<String, String> interpolationProperties) {\n         this.interpolationProperties = interpolationProperties;\n-        this.offset = offset;\n-        this.count = count;\n         this.sortOrder = sortOrder;\n         this.filter = filter;\n         catalogFacade = catalog.getFacade();\n         this.mapping = mapping;\n \n-        Filter advertised = ff.equals(ff.property(\"advertised\"), ff.literal(true));\n-\n-        layerIt =\n-                catalogFacade.list(\n-                        ResourceInfo.class, ff.and(filter, advertised), null, null, sortOrder);\n+        it = catalogFacade.list(PublishedInfo.class, filter, offset, count, sortOrder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657c3fd9aa18c35b91aa7afedbdf9000be5e474b", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/657c3fd9aa18c35b91aa7afedbdf9000be5e474b", "committedDate": "2020-06-23T10:11:20Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f9038903c42868bfbe86759a573803b334b6f42", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/1f9038903c42868bfbe86759a573803b334b6f42", "committedDate": "2020-06-08T17:08:13Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}, "afterCommit": {"oid": "657c3fd9aa18c35b91aa7afedbdf9000be5e474b", "author": {"user": {"login": "NielsCharlier", "name": null}}, "url": "https://github.com/geoserver/geoserver/commit/657c3fd9aa18c35b91aa7afedbdf9000be5e474b", "committedDate": "2020-06-23T10:11:20Z", "message": "[GEOS-9594] CSW: performance issue: every page loads entire catalog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1451, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}