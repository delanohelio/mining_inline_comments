{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMjQ2NzU0", "number": 4033, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNTozNzoxMlrODeOVkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTo1NToxNVrODgoT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE4NzY4OnYy", "diffSide": "RIGHT", "path": "doc/en/user/source/styling/webadmin/index.rst", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNTozNzoxMlrOFnQ9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowNjoxMFrOFnjqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjU4OA==", "bodyText": "I don't get it, why a URI?", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376716588", "createdAt": "2020-02-08T15:37:12Z", "author": {"login": "jodygarnett"}, "path": "doc/en/user/source/styling/webadmin/index.rst", "diffHunk": "@@ -228,7 +228,7 @@ The :guilabel:`Legend` area allows you to add, modify, or delete a custom style,\n    * - :guilabel:`Add legend`\r\n      - Allows you to use a custom legend\r\n    * - :guilabel:`Online Resource`\r\n-     - Path to the custom legend graphic to use. Can be a URL or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r\n+     - Path to the custom legend graphic to use. Can be a URL, URI or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDAwNg==", "bodyText": "so that user can enter something like file:///some/path/image.png", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376894006", "createdAt": "2020-02-10T07:06:23Z", "author": {"login": "imranrajjad"}, "path": "doc/en/user/source/styling/webadmin/index.rst", "diffHunk": "@@ -228,7 +228,7 @@ The :guilabel:`Legend` area allows you to add, modify, or delete a custom style,\n    * - :guilabel:`Add legend`\r\n      - Allows you to use a custom legend\r\n    * - :guilabel:`Online Resource`\r\n-     - Path to the custom legend graphic to use. Can be a URL or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r\n+     - Path to the custom legend graphic to use. Can be a URL, URI or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjU4OA=="}, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMTMzMw==", "bodyText": "All URL's are URI's, here we only support URL's, wih three different schemas: HTTP, HTTPs and FILE, and the the styles directory relative location, so I agree with @jodygarnett URI should not be there \ud83d\udee9\ufe0f.", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r377021333", "createdAt": "2020-02-10T12:01:28Z", "author": {"login": "nmco"}, "path": "doc/en/user/source/styling/webadmin/index.rst", "diffHunk": "@@ -228,7 +228,7 @@ The :guilabel:`Legend` area allows you to add, modify, or delete a custom style,\n    * - :guilabel:`Add legend`\r\n      - Allows you to use a custom legend\r\n    * - :guilabel:`Online Resource`\r\n-     - Path to the custom legend graphic to use. Can be a URL or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r\n+     - Path to the custom legend graphic to use. Can be a URL, URI or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjU4OA=="}, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMzE3OA==", "bodyText": "@nmco understood will remove", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r377023178", "createdAt": "2020-02-10T12:06:10Z", "author": {"login": "imranrajjad"}, "path": "doc/en/user/source/styling/webadmin/index.rst", "diffHunk": "@@ -228,7 +228,7 @@ The :guilabel:`Legend` area allows you to add, modify, or delete a custom style,\n    * - :guilabel:`Add legend`\r\n      - Allows you to use a custom legend\r\n    * - :guilabel:`Online Resource`\r\n-     - Path to the custom legend graphic to use. Can be a URL or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r\n+     - Path to the custom legend graphic to use. Can be a URL, URI or a local path (relative to the style file path). See :ref:`datadir_structure` for a description of the styles directory.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjU4OA=="}, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE5NzI0OnYy", "diffSide": "RIGHT", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNjowMzoyM1rOFnRCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzowNzoyNVrOFnbzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNzg3Mw==", "bodyText": "Not looking for a file here, this is not used to access any file on the file system - instead only used to access a resource in the styles folder (ideally via Resource API.)", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376717873", "createdAt": "2020-02-08T16:03:23Z", "author": {"login": "jodygarnett"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -64,6 +65,8 @@\n \n     private Model<String> showhideStyleModel = new Model<String>(\"\");\n \n+    private static String externalURIPattern = \"^(http|https|file)://.*$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDI0Mw==", "bodyText": "that functionality still holds and untouched, the unit tests assert that. This is for http, https and file:///", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376894243", "createdAt": "2020-02-10T07:07:25Z", "author": {"login": "imranrajjad"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -64,6 +65,8 @@\n \n     private Model<String> showhideStyleModel = new Model<String>(\"\");\n \n+    private static String externalURIPattern = \"^(http|https|file)://.*$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNzg3Mw=="}, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDE5ODM3OnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxNjowNjowOFrOFnRCyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwNzowNjo1MVrOFnbypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxODAyNQ==", "bodyText": "The logic is getting duplicated between transformers, may be worth some code reuse.", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376718025", "createdAt": "2020-02-08T16:06:08Z", "author": {"login": "jodygarnett"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java", "diffHunk": "@@ -1488,121 +1485,87 @@ protected void handleAttribution(PublishedInfo layer) {\n         protected void handleLegendURL(\n                 LayerInfo layer, LegendInfo legend, StyleInfo style, StyleInfo sampleStyle) {\n             // add CapabilityUtil.validateLegendInfo\n+            int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n+            int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+\n+            String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n+\n             if (validateLegendInfo(legend)) {\n                 if (LOGGER.isLoggable(Level.FINE)) {\n                     LOGGER.fine(\"using user supplied legend URL\");\n                 }\n+                // reading sizes of external graphics\n+                legendWidth = legend.getWidth();\n+                legendHeight = legend.getHeight();\n+                // remove any charset info\n+                defaultFormat = legend.getFormat().replaceFirst(\";charset=utf-8\", \"\");\n+\n+            } else if (sampleStyle != null) {\n+                // delegate to legendSample the calculus of proper legend size for\n+                // the given style\n+                Dimension dimension;\n+                try {\n+                    dimension = legendSample.getLegendURLSize(sampleStyle);\n+                    if (dimension != null) {\n+                        legendWidth = (int) dimension.getWidth();\n+                        legendHeight = (int) dimension.getHeight();\n+                    }\n+                } catch (Exception e) {\n+                    LOGGER.log(Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n+                }\n+            }\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legend.getWidth()));\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legend.getHeight()));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", legend.getFormat());\n-                attrs.clear();\n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                WorkspaceInfo styleWs = sampleStyle.getWorkspace();\n-                String legendUrl;\n-\n-                if (layer.getResource() instanceof WMSLayerInfo)\n-                    legendUrl = legend.getOnlineResource();\n-                else if (styleWs != null) {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\n-                                            \"styles\",\n-                                            styleWs.getName(),\n-                                            legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n-                } else {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\"styles\", legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n+            if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n+                if (LOGGER.isLoggable(Level.WARNING)) {\n+                    LOGGER.warning(\n+                            new StringBuffer(\"Default legend format (\")\n+                                    .append(defaultFormat)\n+                                    .append(\n+                                            \")is not supported (jai not available?), can't add LegendURL element\")\n+                                    .toString());\n                 }\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendUrl);\n-                element(\"OnlineResource\", null, attrs);\n \n-                end(\"LegendURL\");\n-            } else {\n-                int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n-                int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+                return;\n+            }\n \n-                if (sampleStyle != null) {\n-                    // delegate to legendSample the calculus of proper legend size for\n-                    // the given style\n-                    Dimension dimension;\n-                    try {\n-                        dimension = legendSample.getLegendURLSize(sampleStyle);\n-                        if (dimension != null) {\n-                            legendWidth = (int) dimension.getWidth();\n-                            legendHeight = (int) dimension.getHeight();\n-                        }\n-                    } catch (Exception e) {\n-                        LOGGER.log(\n-                                Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n-                    }\n-                }\n-                String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n-\n-                if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n-                    if (LOGGER.isLoggable(Level.WARNING)) {\n-                        LOGGER.warning(\n-                                new StringBuffer(\"Default legend format (\")\n-                                        .append(defaultFormat)\n-                                        .append(\n-                                                \")is not supported (jai not available?), can't add LegendURL element\")\n-                                        .toString());\n-                    }\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n+            }\n \n-                    return;\n-                }\n+            AttributesImpl attrs = new AttributesImpl();\n+            attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n-                }\n+            attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n-\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", defaultFormat);\n-                attrs.clear();\n-\n-                String layerName = layer.prefixedName();\n-                Map<String, String> params =\n-                        params(\n-                                \"request\",\n-                                \"GetLegendGraphic\",\n-                                \"format\",\n-                                defaultFormat,\n-                                \"width\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n-                                \"height\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n-                                \"layer\",\n-                                layerName);\n-                if (style != null) {\n-                    params.put(\"style\", style.getName());\n-                }\n-                String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+            start(\"LegendURL\", attrs);\n \n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n-                element(\"OnlineResource\", null, attrs);\n+            element(\"Format\", defaultFormat);\n+            attrs.clear();\n \n-                end(\"LegendURL\");\n+            String layerName = layer.prefixedName();\n+            Map<String, String> params =\n+                    params(\n+                            \"request\",\n+                            \"GetLegendGraphic\",\n+                            \"format\",\n+                            defaultFormat,\n+                            \"width\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n+                            \"height\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n+                            \"layer\",\n+                            layerName);\n+            if (style != null) {\n+                params.put(\"style\", style.getName());\n             }\n+            String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+\n+            attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n+            attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n+            attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n+            element(\"OnlineResource\", null, attrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njg5NDExOA==", "bodyText": "understood, will change", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r376894118", "createdAt": "2020-02-10T07:06:51Z", "author": {"login": "imranrajjad"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/GetCapabilitiesTransformer.java", "diffHunk": "@@ -1488,121 +1485,87 @@ protected void handleAttribution(PublishedInfo layer) {\n         protected void handleLegendURL(\n                 LayerInfo layer, LegendInfo legend, StyleInfo style, StyleInfo sampleStyle) {\n             // add CapabilityUtil.validateLegendInfo\n+            int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n+            int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+\n+            String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n+\n             if (validateLegendInfo(legend)) {\n                 if (LOGGER.isLoggable(Level.FINE)) {\n                     LOGGER.fine(\"using user supplied legend URL\");\n                 }\n+                // reading sizes of external graphics\n+                legendWidth = legend.getWidth();\n+                legendHeight = legend.getHeight();\n+                // remove any charset info\n+                defaultFormat = legend.getFormat().replaceFirst(\";charset=utf-8\", \"\");\n+\n+            } else if (sampleStyle != null) {\n+                // delegate to legendSample the calculus of proper legend size for\n+                // the given style\n+                Dimension dimension;\n+                try {\n+                    dimension = legendSample.getLegendURLSize(sampleStyle);\n+                    if (dimension != null) {\n+                        legendWidth = (int) dimension.getWidth();\n+                        legendHeight = (int) dimension.getHeight();\n+                    }\n+                } catch (Exception e) {\n+                    LOGGER.log(Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n+                }\n+            }\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legend.getWidth()));\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legend.getHeight()));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", legend.getFormat());\n-                attrs.clear();\n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                WorkspaceInfo styleWs = sampleStyle.getWorkspace();\n-                String legendUrl;\n-\n-                if (layer.getResource() instanceof WMSLayerInfo)\n-                    legendUrl = legend.getOnlineResource();\n-                else if (styleWs != null) {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\n-                                            \"styles\",\n-                                            styleWs.getName(),\n-                                            legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n-                } else {\n-                    legendUrl =\n-                            buildURL(\n-                                    request.getBaseUrl(),\n-                                    appendPath(\"styles\", legend.getOnlineResource()),\n-                                    null,\n-                                    URLType.RESOURCE);\n+            if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n+                if (LOGGER.isLoggable(Level.WARNING)) {\n+                    LOGGER.warning(\n+                            new StringBuffer(\"Default legend format (\")\n+                                    .append(defaultFormat)\n+                                    .append(\n+                                            \")is not supported (jai not available?), can't add LegendURL element\")\n+                                    .toString());\n                 }\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendUrl);\n-                element(\"OnlineResource\", null, attrs);\n \n-                end(\"LegendURL\");\n-            } else {\n-                int legendWidth = GetLegendGraphicRequest.DEFAULT_WIDTH;\n-                int legendHeight = GetLegendGraphicRequest.DEFAULT_HEIGHT;\n+                return;\n+            }\n \n-                if (sampleStyle != null) {\n-                    // delegate to legendSample the calculus of proper legend size for\n-                    // the given style\n-                    Dimension dimension;\n-                    try {\n-                        dimension = legendSample.getLegendURLSize(sampleStyle);\n-                        if (dimension != null) {\n-                            legendWidth = (int) dimension.getWidth();\n-                            legendHeight = (int) dimension.getHeight();\n-                        }\n-                    } catch (Exception e) {\n-                        LOGGER.log(\n-                                Level.WARNING, \"Error getting LegendURL dimensions from sample\", e);\n-                    }\n-                }\n-                String defaultFormat = GetLegendGraphicRequest.DEFAULT_FORMAT;\n-\n-                if (null == wmsConfig.getLegendGraphicOutputFormat(defaultFormat)) {\n-                    if (LOGGER.isLoggable(Level.WARNING)) {\n-                        LOGGER.warning(\n-                                new StringBuffer(\"Default legend format (\")\n-                                        .append(defaultFormat)\n-                                        .append(\n-                                                \")is not supported (jai not available?), can't add LegendURL element\")\n-                                        .toString());\n-                    }\n+            if (LOGGER.isLoggable(Level.FINE)) {\n+                LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n+            }\n \n-                    return;\n-                }\n+            AttributesImpl attrs = new AttributesImpl();\n+            attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n \n-                if (LOGGER.isLoggable(Level.FINE)) {\n-                    LOGGER.fine(\"Adding GetLegendGraphic call as LegendURL\");\n-                }\n+            attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n \n-                AttributesImpl attrs = new AttributesImpl();\n-                attrs.addAttribute(\"\", \"width\", \"width\", \"\", String.valueOf(legendWidth));\n-\n-                attrs.addAttribute(\"\", \"height\", \"height\", \"\", String.valueOf(legendHeight));\n-\n-                start(\"LegendURL\", attrs);\n-\n-                element(\"Format\", defaultFormat);\n-                attrs.clear();\n-\n-                String layerName = layer.prefixedName();\n-                Map<String, String> params =\n-                        params(\n-                                \"request\",\n-                                \"GetLegendGraphic\",\n-                                \"format\",\n-                                defaultFormat,\n-                                \"width\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n-                                \"height\",\n-                                String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n-                                \"layer\",\n-                                layerName);\n-                if (style != null) {\n-                    params.put(\"style\", style.getName());\n-                }\n-                String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+            start(\"LegendURL\", attrs);\n \n-                attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n-                attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n-                attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n-                element(\"OnlineResource\", null, attrs);\n+            element(\"Format\", defaultFormat);\n+            attrs.clear();\n \n-                end(\"LegendURL\");\n+            String layerName = layer.prefixedName();\n+            Map<String, String> params =\n+                    params(\n+                            \"request\",\n+                            \"GetLegendGraphic\",\n+                            \"format\",\n+                            defaultFormat,\n+                            \"width\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_WIDTH),\n+                            \"height\",\n+                            String.valueOf(GetLegendGraphicRequest.DEFAULT_HEIGHT),\n+                            \"layer\",\n+                            layerName);\n+            if (style != null) {\n+                params.put(\"style\", style.getName());\n             }\n+            String legendURL = buildURL(request.getBaseUrl(), \"wms\", params, URLType.SERVICE);\n+\n+            attrs.addAttribute(\"\", \"xmlns:xlink\", \"xmlns:xlink\", \"\", XLINK_NS);\n+            attrs.addAttribute(XLINK_NS, \"type\", \"xlink:type\", \"\", \"simple\");\n+            attrs.addAttribute(XLINK_NS, \"href\", \"xlink:href\", \"\", legendURL);\n+            element(\"OnlineResource\", null, attrs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxODAyNQ=="}, "originalCommit": {"oid": "02a9c3e344818bd029c637e3c2247cad127c8e67"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTA0MTQxOnYy", "diffSide": "RIGHT", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzoxNToxMFrOFojxZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNzo0Nzo1MFrOFokbWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MzQ0NA==", "bodyText": "This method is not needed, the logic is already provided in the GeoServerDataDirectory class:\nA couple things - we don't want a File, we just want to check if a file exists.\nThe class GeoServerDataDirectory already has tested methods for these checks:\nResource icon = geoServerDataDirectory.getStylesget(value );\nreturn icon.getType() == Resource.Type.RESOURCE;", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r378073444", "createdAt": "2020-02-12T07:15:10Z", "author": {"login": "jodygarnett"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -350,7 +330,28 @@ private void updateVisibility(boolean b) {\n         show.setVisible(!b);\n     }\n \n-    private boolean isUrlOrFile(final String uri) {\n-        return externalURIPattern.matches(uri);\n+    private boolean isUrl(final String uri) {\n+        return uri.startsWith(\"http\");\n+    }\n+\n+    private File findResourceinStylesDirectory(WorkspaceInfo wsInfo, String value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e89970519f119350682a5fd7a17e6aeb8a7c75"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA4NDE4NQ==", "bodyText": "@jodygarnett this method is basically wrapping the re-usable code, which is currently duplicated, perhaps the name of the method is misleading. It is being used in multiple scenarios. It was the same code doing same thing, but the file was only being used once, as you can observe the placed where its being called. I will be glad to implement your recommendations", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r378084185", "createdAt": "2020-02-12T07:47:50Z", "author": {"login": "imranrajjad"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -350,7 +330,28 @@ private void updateVisibility(boolean b) {\n         show.setVisible(!b);\n     }\n \n-    private boolean isUrlOrFile(final String uri) {\n-        return externalURIPattern.matches(uri);\n+    private boolean isUrl(final String uri) {\n+        return uri.startsWith(\"http\");\n+    }\n+\n+    private File findResourceinStylesDirectory(WorkspaceInfo wsInfo, String value)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA3MzQ0NA=="}, "originalCommit": {"oid": "b6e89970519f119350682a5fd7a17e6aeb8a7c75"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzA4MjY3OnYy", "diffSide": "RIGHT", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyNDowOFrOFqmL2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDo1NTozOFrOFq1ILA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDEzNg==", "bodyText": "Commented out code?", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380210136", "createdAt": "2020-02-17T14:24:08Z", "author": {"login": "aaime"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -304,25 +280,20 @@ protected URLConnection getExternalGraphic(AjaxRequestTarget target, Form<?> for\n         if (onlineResource.getModelObject() != null) {\n             URL url = null;\n             try {\n-                String baseUrl = baseURL(form);\n+                // String baseUrl = baseURL(form);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDk1Ng==", "bodyText": "will remove", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454956", "createdAt": "2020-02-18T04:55:38Z", "author": {"login": "imranrajjad"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -304,25 +280,20 @@ protected URLConnection getExternalGraphic(AjaxRequestTarget target, Form<?> for\n         if (onlineResource.getModelObject() != null) {\n             URL url = null;\n             try {\n-                String baseUrl = baseURL(form);\n+                // String baseUrl = baseURL(form);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDEzNg=="}, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzA4NzAyOnYy", "diffSide": "RIGHT", "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyNToyOFrOFqmOiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDo1NTozM1rOFq1IGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDgyNQ==", "bodyText": "Potentially inconsistent logic... here is uri.isAbsolute() && isUrl(value) but below in the class (getExternalGraphic) there is a uri.isAbsolute() || isUrl(value).", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380210825", "createdAt": "2020-02-17T14:25:28Z", "author": {"login": "aaime"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -101,13 +100,8 @@ public void validate(IValidatable<String> input) {\n                         } catch (URISyntaxException e1) {\n                             // Unable to check if absolute\n                         }\n-                        if (uri != null && uri.isAbsolute()) {\n+                        if (uri != null && uri.isAbsolute() && isUrl(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDkzOQ==", "bodyText": "will fix", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454939", "createdAt": "2020-02-18T04:55:33Z", "author": {"login": "imranrajjad"}, "path": "src/web/wms/src/main/java/org/geoserver/wms/web/data/ExternalGraphicPanel.java", "diffHunk": "@@ -101,13 +100,8 @@ public void validate(IValidatable<String> input) {\n                         } catch (URISyntaxException e1) {\n                             // Unable to check if absolute\n                         }\n-                        if (uri != null && uri.isAbsolute()) {\n+                        if (uri != null && uri.isAbsolute() && isUrl(value)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMDgyNQ=="}, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzA5NjcyOnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODoxNFrOFqmUZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDo1NTo0OVrOFq1ISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjMyNg==", "bodyText": "New public method, no javadoc.", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380212326", "createdAt": "2020-02-17T14:28:14Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -186,4 +187,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getHeight() > 0\n                 && legend.getWidth() > 0;\n     }\n+\n+    public static AttributesImpl addGetLegendAttributes(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NDk4NA==", "bodyText": "will add javadoc", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380454984", "createdAt": "2020-02-18T04:55:49Z", "author": {"login": "imranrajjad"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -186,4 +187,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getHeight() > 0\n                 && legend.getWidth() > 0;\n     }\n+\n+    public static AttributesImpl addGetLegendAttributes(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjMyNg=="}, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzEwNjUwOnYy", "diffSide": "RIGHT", "path": "src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDozMDo0N1rOFqmaDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDo1NTo1NFrOFq1IbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMzc3Mg==", "bodyText": "HTP_LEGND? HTTP_LEGEND was not that much longer (other instance in this file)", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380213772", "createdAt": "2020-02-17T14:30:47Z", "author": {"login": "aaime"}, "path": "src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java", "diffHunk": "@@ -31,16 +33,22 @@\n     // Reusing layer and SLD files from another test; their content doesn't really matter.\n     // What is important for this test is the legend info we are adding.\n     private static final String LAYER_NAME = \"watertemp\";\n+    private static final String LAYER_NAME_HTP_LEGND = \"watertemp_http_legend\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1NTAyMQ==", "bodyText": "will rename", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380455021", "createdAt": "2020-02-18T04:55:54Z", "author": {"login": "imranrajjad"}, "path": "src/wms/src/test/java/org/geoserver/wms/wms_1_1_1/LegendCapabilitiesTest.java", "diffHunk": "@@ -31,16 +33,22 @@\n     // Reusing layer and SLD files from another test; their content doesn't really matter.\n     // What is important for this test is the legend info we are adding.\n     private static final String LAYER_NAME = \"watertemp\";\n+    private static final String LAYER_NAME_HTP_LEGND = \"watertemp_http_legend\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMzc3Mg=="}, "originalCommit": {"oid": "b390d4d0d049dc6fce5d8c96f946c2e52fe38f3a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTQxNDgyOnYy", "diffSide": "RIGHT", "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTo1NToxNVrOFq76pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDowNzowNFrOFq8VpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw==", "bodyText": "A check that we are about to include with the checkstyle upgrade will fail on undocumented params... either a param is there and documented, or it can be removed (won't complain for missing docs), but cannot be declared and undocumented.", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380566183", "createdAt": "2020-02-18T09:55:15Z", "author": {"login": "aaime"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -188,6 +188,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getWidth() > 0;\n     }\n \n+    /**\n+     * A Utility method to populate legend url href attribute\n+     *\n+     * @param attrs AttributesImpl to be poplated with Legend URL href\n+     * @param legendURL URL String\n+     * @param XLINK_NS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e7a8b0b1a64830cea8f115da49fccc4aa986b70"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2ODQyMA==", "bodyText": "understood, will document it", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380568420", "createdAt": "2020-02-18T09:58:54Z", "author": {"login": "imranrajjad"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -188,6 +188,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getWidth() > 0;\n     }\n \n+    /**\n+     * A Utility method to populate legend url href attribute\n+     *\n+     * @param attrs AttributesImpl to be poplated with Legend URL href\n+     * @param legendURL URL String\n+     * @param XLINK_NS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw=="}, "originalCommit": {"oid": "3e7a8b0b1a64830cea8f115da49fccc4aa986b70"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3MzA5Mg==", "bodyText": "@aaime its done", "url": "https://github.com/geoserver/geoserver/pull/4033#discussion_r380573092", "createdAt": "2020-02-18T10:07:04Z", "author": {"login": "imranrajjad"}, "path": "src/wms/src/main/java/org/geoserver/wms/capabilities/CapabilityUtil.java", "diffHunk": "@@ -188,6 +188,14 @@ public static boolean validateLegendInfo(LegendInfo legend) {\n                 && legend.getWidth() > 0;\n     }\n \n+    /**\n+     * A Utility method to populate legend url href attribute\n+     *\n+     * @param attrs AttributesImpl to be poplated with Legend URL href\n+     * @param legendURL URL String\n+     * @param XLINK_NS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NjE4Mw=="}, "originalCommit": {"oid": "3e7a8b0b1a64830cea8f115da49fccc4aa986b70"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4074, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}