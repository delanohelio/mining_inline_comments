{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjc4MDEz", "number": 409, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjowNzo0M1rOEsHNeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoxOToyN1rOExOfXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjkwOTM3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjowNzo0M1rOHfQKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjowNzo0M1rOHfQKoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzMjc2OQ==", "bodyText": "There is no need to make this method public", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502532769", "createdAt": "2020-10-09T16:07:43Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not\n+     */\n+    public boolean isCustomShortChannelUrl(String[] splitPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e04991762a6c3d2aa4fce126e8ef141a6bb0fce"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Njk1MTc0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxOTo1OVrOHfQkrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwOTo1ODoxMVrOHfmK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzOTQzNw==", "bodyText": "http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare is a stream URL, but is accepted by your regex.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502539437", "createdAt": "2020-10-09T16:19:59Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not\n+     */\n+    public boolean isCustomShortChannelUrl(String[] splitPath) {\n+        return splitPath.length == 1 && !splitPath[0].matches(\"playlist|watch\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e04991762a6c3d2aa4fce126e8ef141a6bb0fce"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NjM5OA==", "bodyText": "Hi. Thank you for review. Do you think that simply adding \"attribution_link\" to exlude those links with regex would be sufficent solution ? I couldn't come up with something better that that.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502566398", "createdAt": "2020-10-09T17:11:57Z", "author": {"login": "Bartoshr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not\n+     */\n+    public boolean isCustomShortChannelUrl(String[] splitPath) {\n+        return splitPath.length == 1 && !splitPath[0].matches(\"playlist|watch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzOTQzNw=="}, "originalCommit": {"oid": "4e04991762a6c3d2aa4fce126e8ef141a6bb0fce"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MjEyNQ==", "bodyText": "Mmmh, probably a list of all pages not pointing to a channel should be added to that regex", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502892125", "createdAt": "2020-10-11T09:46:56Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not\n+     */\n+    public boolean isCustomShortChannelUrl(String[] splitPath) {\n+        return splitPath.length == 1 && !splitPath[0].matches(\"playlist|watch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzOTQzNw=="}, "originalCommit": {"oid": "4e04991762a6c3d2aa4fce126e8ef141a6bb0fce"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MzMwOQ==", "bodyText": "Other YouTube URLs:\n\n\nhttps://m.youtube.com/select_site\n\n\nhttps://www.youtube.com/?app=desktop&persist_app=1\n\n\n@Stypox what do you mean exactly?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502893309", "createdAt": "2020-10-11T09:58:11Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,17 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not\n+     */\n+    public boolean isCustomShortChannelUrl(String[] splitPath) {\n+        return splitPath.length == 1 && !splitPath[0].matches(\"playlist|watch\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzOTQzNw=="}, "originalCommit": {"oid": "4e04991762a6c3d2aa4fce126e8ef141a6bb0fce"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTEzMzY2OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeChannelLinkHandlerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzowODo0NFrOHfjDXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxMDowOToxMlrOHfmPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjIwNQ==", "bodyText": "I think, we can improve the test cases here (and should also improve the ones for playlists, streams and feeds in an additional PR).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare\"));\n          \n          \n            \n                    // do not accept URLs which are not channels\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"https://www.youtube.com/watch?v=jZViOEv90dI&t=100\"));\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/watch_popup?v=uEJuoEs1UxY\"));\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare\"));\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"https://www.youtube.com/playlist?list=PLW5y1tjAOzI3orQNF1yGGVL5x-pR2K1d\"));\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"https://www.youtube.com/embed/jZViOEv90dI\"));\n          \n          \n            \n                    assertFalse(linkHandler.acceptUrl(\"https://www.youtube.com/feed/subscriptions?list=PLz8YL4HVC87WJQDzVoY943URKQCsHS9XV\"));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502842205", "createdAt": "2020-10-10T23:08:44Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -44,6 +47,8 @@ public void acceptUrlTest() throws ParsingException {\n \n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA\"));\n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA/videos?disable_polymer=1\"));\n+\n+        assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c38a5509efad0ed4f2a4d84089ef3a74e113d1a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5MzQ1MA==", "bodyText": "// do not accept URLs which are *not channels", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502893450", "createdAt": "2020-10-11T09:59:28Z", "author": {"login": "opusforlife2"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -44,6 +47,8 @@ public void acceptUrlTest() throws ParsingException {\n \n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA\"));\n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA/videos?disable_polymer=1\"));\n+\n+        assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjIwNQ=="}, "originalCommit": {"oid": "8c38a5509efad0ed4f2a4d84089ef3a74e113d1a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg5NDQzMQ==", "bodyText": "fixed", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502894431", "createdAt": "2020-10-11T10:09:12Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeChannelLinkHandlerFactoryTest.java", "diffHunk": "@@ -44,6 +47,8 @@ public void acceptUrlTest() throws ParsingException {\n \n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA\"));\n         assertTrue(linkHandler.acceptUrl(\"https://invidio.us/channel/UClq42foiSgl7sSpLupnugGA/videos?disable_polymer=1\"));\n+\n+        assertFalse(linkHandler.acceptUrl(\"http://www.youtube.com/attribution_link?a=JdfC0C9V6ZI&u=%2Fwatch%3Fv%3DEhxJLojIE_o%26feature%3Dshare\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjIwNQ=="}, "originalCommit": {"oid": "8c38a5509efad0ed4f2a4d84089ef3a74e113d1a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTEzOTE1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxNjo1OVrOHfjF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxNjo1OVrOHfjF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MjgzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Handle custom short channel urls like youtube.com/yourcustomname\n          \n          \n            \n                        // Handle custom short channel URLs like youtube.com/yourcustomname", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502842833", "createdAt": "2020-10-10T23:16:59Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -60,14 +72,20 @@ public String getId(String url) throws ParsingException {\n                 throw new ParsingException(\"the URL given is not a Youtube-URL\");\n             }\n \n-            if (!path.startsWith(\"/user/\") && !path.startsWith(\"/channel/\") && !path.startsWith(\"/c/\")) {\n-                throw new ParsingException(\"the URL given is neither a channel nor an user\");\n-            }\n-\n             // remove leading \"/\"\n             path = path.substring(1);\n-\n             String[] splitPath = path.split(\"/\");\n+\n+            // Handle custom short channel urls like youtube.com/yourcustomname", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c38a5509efad0ed4f2a4d84089ef3a74e113d1a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTEzOTM0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxNzozMFrOHfjF6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzoxNzozMFrOHfjF6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0Mjg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * custom short channel urls like youtube.com/yourcustomname\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param splitPath path segments array\n          \n          \n            \n                 * @return true - if value conform to short channel url, false - not\n          \n          \n            \n                 * custom short channel URLs like youtube.com/yourcustomname\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param splitPath path segments array\n          \n          \n            \n                 * @return true - if value conform to short channel URL, false - not", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r502842858", "createdAt": "2020-10-10T23:17:30Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,18 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel urls like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel url, false - not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c38a5509efad0ed4f2a4d84089ef3a74e113d1a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDI5OTc3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoyNzoyOVrOHmUHBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzoyNzoyOVrOHmUHBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTkzNzQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isCustomShortChannelUrl(String[] splitPath) {\n          \n          \n            \n                private boolean isCustomShortChannelUrl(final String[] splitPath) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r509937413", "createdAt": "2020-10-22T07:27:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,18 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel URLs like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel URL, false - not\n+     */\n+    private boolean isCustomShortChannelUrl(String[] splitPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f80d1538286434c32fa3d2cfe7a8fe987c09a6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDMzNTI3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzozNzoxMlrOHmUcKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNzozNzoxMlrOHmUcKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk0MjgyNQ==", "bodyText": "Please compile this regex as a static variable in the class, otherwise it will be compiled every time", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r509942825", "createdAt": "2020-10-22T07:37:12Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,6 +49,18 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+    /**\n+     * Returns true if path conform to\n+     * custom short channel URLs like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel URL, false - not\n+     */\n+    private boolean isCustomShortChannelUrl(String[] splitPath) {\n+        return splitPath.length == 1 &&\n+          !splitPath[0].matches(\"playlist|watch|attribution_link|watch_popup|embed|feed|select_site\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f80d1538286434c32fa3d2cfe7a8fe987c09a6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDUzMDg3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoxOToyN1rOHnP6PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoxOToyN1rOHnP6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkxNzE4MA==", "bodyText": "Please move this up to the other class attribute", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/409#discussion_r510917180", "createdAt": "2020-10-23T14:19:27Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeChannelLinkHandlerFactory.java", "diffHunk": "@@ -49,26 +50,47 @@ public String getUrl(String id, List<String> contentFilters, String searchFilter\n         return \"https://www.youtube.com/\" + id;\n     }\n \n+\n+    /**\n+     * Returns true if path conform to\n+     * custom short channel URLs like youtube.com/yourcustomname\n+     *\n+     * @param splitPath path segments array\n+     * @return true - if value conform to short channel URL, false - not\n+     */\n+    private boolean isCustomShortChannelUrl(final String[] splitPath) {\n+        return splitPath.length == 1 && !excludedSegments.matcher(splitPath[0]).matches();\n+    }\n+\n+  private static final Pattern excludedSegments =\n+    Pattern.compile(\"playlist|watch|attribution_link|watch_popup|embed|feed|select_site\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e67d820bcbe65d1c7de0e8d4cbf607b13317fa5"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2759, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}