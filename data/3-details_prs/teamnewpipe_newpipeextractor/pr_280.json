{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTU0MjU0", "number": 280, "title": "Extractor for youtube mix (auto-generated playlist)", "bodyText": "I carefully read the contribution guidelines and agree to them.\n I did test the API against NewPipe.\n I agree to ASAP create a PULL request for NewPipe for making in compatible when I changed the api.\n\ncloses  TeamNewPipe/NewPipe#2895\nProblem\nAs describes in the issue in the NewPipe repo, when sharing a youtube mix to newpipe, it crashes. Reason for that is that the linkhandler receives (1) https://www.youtube.com/watch?v=QXCE3Betyug&list=RDQXCE3Betyug and converts it to (2) https://www.youtube.com/playlist?list=RDQXCE3Betyug , which loads a basicly empty page.\nChanges\n\nThe LinkHandler doesn't convert mix urls.\nNew PlaylistExtractor to extract playlist information from the url (1).\nThe YoutubeService uses the new extractor if it is a mix.\n\nTesting\nI tested the changes on my android 10 and 7.1 devices and a 5.0 emulator, by:\n\nsharing a link from my browser to NewPipe\nsaving the playlist and opening it from the bookmarks fragment\nplayling the playlist (didn't play on 5.0 emulator, but i can't play ANY video here)\n\n@Iamdeadlyz could you test the apk.\napp-debug.zip\nWhat's missing\n\nMixes are generated based on the user. Meaning if I open the site once while logged in and once while in incognito mode, it gives me different playlists.\n The size of a mix is infinity, but getStreamCount returns a long. So i don't really know how to handle that. I would let that method return -1 and let the frontend interpret that as infinity.\n Check if \"My Mix\" is getting handled correctly. Here the list id starts with \"RDMM\".\n\nNotes\n\nIn the mix url (1) above you can see the playlist id is just the video id with \"RD\" at the start.\nAll mix urls that i found so far are like that, where the playlist id is \"RD\" + video id of the first video. I assume RD stands for radio (Playlist ids start with \"PL\" instead)\nSince i can't reopen PR (#253) because i force pushed, i'll add the comments from @B0pol here:\n\n\nUploader name should be YouTube\nUploader avatar url should point to the YouTube logo\n\n\nI noticed that there are quite a few duplicates if you continue scrolling down in a mix, especially the first video of the mix is repeated often.\n\nRelated PR: #276\nDepends on: TeamNewPipe/NewPipe#3243", "createdAt": "2020-03-07T15:16:34Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280", "merged": true, "mergeCommit": {"oid": "85fa006214b003f21eacb76c445a167732f19981"}, "closed": true, "closedAt": "2020-12-14T17:11:08Z", "author": {"login": "XiangRongLin"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOgInuAFqTM3NTgyODg5Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdlh4dRABqjQxMDQ3NTU5ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODI4ODkz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-375828893", "createdAt": "2020-03-17T08:36:56Z", "commit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozNjo1N1rOF3ST8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowMDozNVrOF3VOCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjAxOQ==", "bodyText": "Why is this piece of code exactly the same as above? Also, you could add a test for a mix where the videoId is not part of the mix id (i.e. the current video is not the first one, so videoId is different from the video id in the mix id, as in YoutubePlaylistLinkHandlerFactoryTest.fromUrlIsMixVideo)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393516019", "createdAt": "2020-03-17T08:36:57Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,24 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";\n+        PlaylistExtractor extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);\n+\n+        extractor = YouTube.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+        assertTrue(extractor instanceof YoutubeMixPlaylistExtractor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzI4NQ==", "bodyText": "Undo this whitespace change", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393527285", "createdAt": "2020-03-17T08:57:43Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTQ5Nw==", "bodyText": "Rename, just to keep it the same as the string it is referring to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n          \n          \n            \n                private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393529497", "createdAt": "2020-03-17T09:01:52Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMTg3NQ==", "bodyText": "this should be indented one tab more\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throws ExtractionException, IOException {\n          \n          \n            \n                        throws ExtractionException, IOException {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393531875", "createdAt": "2020-03-17T09:06:07Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMjIyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                    @Nullable JsonArray streams) {\n          \n          \n            \n                        @Nonnull StreamInfoItemsCollector collector,\n          \n          \n            \n                        @Nullable JsonArray streams) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393532223", "createdAt": "2020-03-17T09:06:37Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }\n+            return getThumbnailUrlFromId(videoId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return 25;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+        throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+        @Nonnull StreamInfoItemsCollector collector,\n+        @Nullable JsonArray streams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzNzcwMA==", "bodyText": "You should throw the same ParsingException if the name could not be extracted. I don't think \"\" would be handled correctly by the client, i.e. considering that the title could not be extracted", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393537700", "createdAt": "2020-03-17T09:16:33Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzOTM3NA==", "bodyText": "How can the thumbnail url be always the same if \"My Mix\" is different for everyone?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393539374", "createdAt": "2020-03-17T09:19:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void getPageEmptyUrl() throws Exception {\n+            extractor.getPage(\"\");\n+        }\n+\n+        @Test(expected = ExtractionException.class)\n+        public void invalidVideoId() throws Exception {\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + \"abcde\" + \"&list=RD\" + \"ancde\");\n+            extractor.fetchPage();\n+        }\n+    }\n+\n+    public static class MixWithIndex {\n+\n+        public static String index = \"&index=13\";\n+        public static String videoIdNumber13 = \"qHtzO49SDmk\";\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoIdNumber13 + \"&list=RD\" + videoId\n+                        + index);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));\n+                streams = extractor.getPage(streams.getNextPageUrl());\n+            }\n+        }\n+    }\n+\n+    public static class MyMix {\n+\n+        @Before\n+        public void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RDMM\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertEquals(\"My Mix\", name);\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, startsWith(\"https://i.ytimg.com/vi/_AzeUSL9lZc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1MzQzNA==", "bodyText": "Why throwing another exception from this one? I would let it throw a NullPointerException, it shouldn't be problematic and it would be shown correctly in the app error report page", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393553434", "createdAt": "2020-03-17T09:43:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MzY1Nw==", "bodyText": "I would move this piece of code into getThumbnailUrlFromId, and maybe throw a ParsingException with a description like \"videoId is empty\".", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393563657", "createdAt": "2020-03-17T10:00:35Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMNS_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        try {\n+            playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMNS_WATCH_NEXT_RESULTS)\n+                .getObject(PLAYLIST).getObject(PLAYLIST);\n+        } catch (NullPointerException e) {\n+            throw new ExtractionException(e);\n+        }\n+\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        try {\n+            final String name = playlistData.getString(\"title\");\n+            if (name != null) {\n+                return name;\n+            } else {\n+                return \"\";\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist name\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            final String videoId;\n+            if (playlistId.startsWith(\"RDMM\")) {\n+                videoId = playlistId.substring(4);\n+            } else {\n+                videoId = playlistId.substring(2);\n+            }\n+            if (videoId.isEmpty()) {\n+                throw new ParsingException(\"\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2754133a8c7e3df041c11153c0f8c9f50b0465cd"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDE5NDIw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-376019420", "createdAt": "2020-03-17T13:13:31Z", "commit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxMzozMVrOF3bmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoxNTozN1rOF3breA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2ODI0Nw==", "bodyText": "Why are you using Long instead of long?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393668247", "createdAt": "2020-03-17T13:13:31Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2OTQ5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393669496", "createdAt": "2020-03-17T13:15:37Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static Long MORE_THAN_100 = -2L;\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec2b0e840adbcc8ae8c5fa25ac5a3420bc818e7"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTMyMDUz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-376132053", "createdAt": "2020-03-17T15:15:38Z", "commit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNTozOFrOF3g42A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNToxNzo0NlrOF3g-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NDg0MA==", "bodyText": "One more tab ;-)\nWraps should be indented with two more steps, otherwise they can be confused with the content below", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393754840", "createdAt": "2020-03-17T15:15:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeService.java", "diffHunk": "@@ -111,7 +115,7 @@ public KioskList getKioskList() throws ExtractionException {\n                 public KioskExtractor createNewKiosk(StreamingService streamingService,\n                                                      String url,\n                                                      String id)\n-                        throws ExtractionException {\n+                    throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc1NjM3Mw==", "bodyText": "This would go in the base playlist extractor, so that it can be used by every service. Also, I just realized maybe a better name is MORE_THAN_100_ITEMS.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393756373", "createdAt": "2020-03-17T15:17:46Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    public final static long MORE_THAN_100 = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59e1398b6e61b4df49af3bfcf738b8d0c0a422ba"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2Mjc1MTY5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-376275169", "createdAt": "2020-03-17T17:56:45Z", "commit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzI5MjIw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-376329220", "createdAt": "2020-03-17T19:11:03Z", "commit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTowM1rOF3qWAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxMTozMFrOF3qW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTc2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -2L;\n          \n          \n            \n                public final static long INFINITE_ITEMS = -2L;\n          \n          \n            \n                public final static long MORE_THAN_100_ITEMS = -3L;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909763", "createdAt": "2020-03-17T19:11:03Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/playlist/PlaylistExtractor.java", "diffHunk": "@@ -8,6 +8,8 @@\n \n public abstract class PlaylistExtractor extends ListExtractor<StreamInfoItem> {\n \n+    public final static long MORE_THAN_100_ITEMS = -2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwOTk4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return MORE_THAN_100_ITEMS;\n          \n          \n            \n                    return INFINITE_ITEMS;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r393909980", "createdAt": "2020-03-17T19:11:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return MORE_THAN_100_ITEMS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b9682f93d7dbb94a387b55095ace3e7b1f40ad"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzgyMDEy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-376382012", "createdAt": "2020-03-17T20:30:38Z", "commit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjU2MzA0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-377256304", "createdAt": "2020-03-18T21:42:49Z", "commit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0Mjo0OVrOF4X61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0Mjo0OVrOF4X61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA==", "bodyText": "When using YouTube's logo here, we can also use in other places. We should check legal stuff first. CC @TheAssassin", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394656470", "createdAt": "2020-03-18T21:42:49Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjYxOTE3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-377261917", "createdAt": "2020-03-18T21:53:06Z", "commit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1MzowNlrOF4YMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1MzowNlrOF4YMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTAxOQ==", "bodyText": "IANAL. However, using any brand icons is a bad idea, and might get us into trouble. I don't think it's worth the effort. I haven't had a look whether the linked file would be fine copyright wise either.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r394661019", "createdAt": "2020-03-18T21:53:06Z", "author": {"login": "TheAssassin"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjQ3MA=="}, "originalCommit": {"oid": "6a23efa8d41a05f37b8f523aa08af7e0a9d6c4e1"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODA2OTgz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378806983", "createdAt": "2020-03-20T20:56:38Z", "commit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NjozOFrOF5i98A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMDo1NjozOFrOF5i98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg4NjA2NA==", "bodyText": "These should be @BeforeClass, otherwise the testing time skyrockets (it just took me 2 minutes just to run this class).", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r395886064", "createdAt": "2020-03-20T20:56:38Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9a084f8f9611a87d0f8d6f309a40429304b2ac9"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMwNzk5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378930799", "createdAt": "2020-03-21T16:24:56Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjoyNDo1NlrOF5qTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjoyNDo1NlrOF5qTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNjE3Mg==", "bodyText": "&& !playlistId.startsWith(\"RDAMVM\"), so that it won't accept YouTube Music mixes. You'll also need to do that in the LinkHandler, so that NewPipe will open those as just a video until we implement YouTube Music mixes.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396006172", "createdAt": "2020-03-21T16:24:56Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubeParsingHelper.java", "diffHunk": "@@ -163,6 +163,16 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a mix (auto-generated playlist)\n+     * Ids from a mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMxNjE5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378931619", "createdAt": "2020-03-21T16:35:22Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNToyMlrOF5qWkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNToyMlrOF5qWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzA1Ng==", "bodyText": "Why are you storing those as constants here? We don't do that anywhere else either\u2026", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007056", "createdAt": "2020-03-21T16:35:22Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMxODAz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378931803", "createdAt": "2020-03-21T16:37:48Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNzo0OFrOF5qXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjozNzo0OFrOF5qXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzI1Ng==", "bodyText": "You don't need to call collector.reset() here as every time you call it, you already have a new empty collector.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007256", "createdAt": "2020-03-21T16:37:48Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =\n+            ajaxJson.getObject(3).getObject(RESPONSE).getObject(CONTENTS)\n+                .getObject(TWO_COLUMN_WATCH_NEXT_RESULTS).getObject(PLAYLIST)\n+                .getObject(PLAYLIST);\n+        final JsonArray streams = playlistData.getArray(CONTENTS);\n+        //Because continuation requests are created with the last video of previous request as start\n+        streams.remove(0);\n+        collectStreamsFrom(collector, streams);\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull StreamInfoItemsCollector collector,\n+            @Nullable JsonArray streams) {\n+        collector.reset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMyMDgz", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378932083", "createdAt": "2020-03-21T16:41:45Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0MTo0NVrOF5qYnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0MTo0NVrOF5qYnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzU4MQ==", "bodyText": "Why are you assigning playlistData again here? If you call getInitialPage() after that, it won't return the initial page.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007581", "createdAt": "2020-03-21T16:41:45Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final String pageUrl)\n+            throws ExtractionException, IOException {\n+        if (pageUrl == null || pageUrl.isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        final JsonArray ajaxJson = getJsonResponse(pageUrl, getExtractorLocalization());\n+        playlistData =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMyMzg4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378932388", "createdAt": "2020-03-21T16:45:42Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0NTo0M1rOF5qZ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNjo0NTo0M1rOF5qZ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwNzkxNQ==", "bodyText": "You should call getUrlFromNavigationEndpoint() and just append &pbj=1. You'll first need to modify getUrlFromNavigationEndpoint() so that it handles the index parameter.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396007915", "createdAt": "2020-03-21T16:45:43Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+\n+    private final static String CONTENTS = \"contents\";\n+    private final static String RESPONSE = \"response\";\n+    private final static String PLAYLIST = \"playlist\";\n+    private final static String TWO_COLUMN_WATCH_NEXT_RESULTS = \"twoColumnWatchNextResults\";\n+    private final static String PLAYLIST_PANEL_VIDEO_RENDERER = \"playlistPanelVideoRenderer\";\n+\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        JsonObject initialData = ajaxJson.getObject(3).getObject(RESPONSE);\n+        playlistData = initialData.getObject(CONTENTS).getObject(TWO_COLUMN_WATCH_NEXT_RESULTS)\n+            .getObject(PLAYLIST).getObject(PLAYLIST);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            return getThumbnailUrlFromId(playlistId);\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(CONTENTS));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(CONTENTS)\n+            .get(playlistData.getArray(CONTENTS).size() - 1));\n+        if (lastStream == null || lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER) == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        return \"https://youtube.com\" + lastStream.getObject(PLAYLIST_PANEL_VIDEO_RENDERER)\n+            .getObject(\"navigationEndpoint\").getObject(\"commandMetadata\")\n+            .getObject(\"webCommandMetadata\").getString(\"url\") + \"&pbj=1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTMyNzYw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378932760", "createdAt": "2020-03-21T16:50:30Z", "commit": {"oid": "30b182516b4fff0d3b6986172ecfcd7ce34221c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTk5NTM0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-378999534", "createdAt": "2020-03-22T12:21:32Z", "commit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjoyMTozMlrOF5vQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjoyODowN1rOF5vSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4NzMyMg==", "bodyText": "Use assertTrue and assertFalse", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087322", "createdAt": "2020-03-22T12:21:32Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,325 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.*;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.DefaultTests;\n+import org.schabi.newpipe.extractor.stream.Stream;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+    private static String videoId = \"_AzeUSL9lZc\";\n+    private static String videoTitle = \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                .getPlaylistExtractor(\n+                    \"https://www.youtube.com/watch?v=\" + videoId + \"&list=RD\" + videoId);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(videoTitle));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(videoId));\n+        }\n+\n+        @Test\n+        public void getNextPageUrl() throws Exception {\n+            final String nextPageUrl = extractor.getNextPageUrl();\n+            assertIsSecureUrl(nextPageUrl);\n+            assertThat(nextPageUrl, containsString(\"list=RD\" + videoId));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+            assertThat(streams.getItems().isEmpty(), is(false));\n+            assertThat(streams.hasNextPage(), is(true));\n+        }\n+\n+        @Test\n+        public void getPageMultipleTimes() throws Exception {\n+            InfoItemsPage<StreamInfoItem> streams = extractor.getPage(extractor.getNextPageUrl());\n+\n+            //Should work infinitely, but for testing purposes only 3 times\n+            for (int i = 0; i < 3; i++) {\n+                assertThat(streams.hasNextPage(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4Nzg3NQ==", "bodyText": "I still think getUrlFromNavigationEndpoint needs to put the index in the URL. You actually don't need to track it, you just need to do navigationEndpoint.getObject(\"watchEndpoint\").getInt(\"index\") + 1.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r396087875", "createdAt": "2020-03-22T12:28:07Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.linkHandler.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+import java.io.IOException;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+\n+    public YoutubeMixPlaylistExtractor(StreamingService service, ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull Downloader downloader)\n+        throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final JsonArray ajaxJson = getJsonResponse(url, getExtractorLocalization());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+            .getObject(\"playlist\").getObject(\"playlist\");\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/YouTube_full-color_icon_(2017).svg/320px-YouTube_full-color_icon_(2017).svg.png\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector, getNextPageUrl());\n+    }\n+\n+    @Override\n+    public String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(JsonObject playlistData) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistData.getArray(\"contents\")\n+            .get(playlistData.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+        //Index of video in mix is missing, but adding it doesn't appear to have any effect.\n+        //And since the index needs to be tracked by us, it is left out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ef3a27161170ca465012c61f782952e51b970be"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODE5NDc5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-379819479", "createdAt": "2020-03-23T21:02:09Z", "commit": {"oid": "829fc3a3f6f1c5d0373e21a54d3df90b73decdff"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f5624d4da87520d17971ff3b30ab66b0e5b7e32", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3f5624d4da87520d17971ff3b30ab66b0e5b7e32", "committedDate": "2020-03-24T21:09:42Z", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1"}, "afterCommit": {"oid": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "committedDate": "2020-03-24T21:14:26Z", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4a76a163dfef8a918d69ff11e5cd8ef70cc06faf", "committedDate": "2020-03-24T21:14:26Z", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1"}, "afterCommit": {"oid": "9d3abf7883650a70b422dedec9449250981460c6", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9d3abf7883650a70b422dedec9449250981460c6", "committedDate": "2020-05-21T11:57:41Z", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d3abf7883650a70b422dedec9449250981460c6", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9d3abf7883650a70b422dedec9449250981460c6", "committedDate": "2020-05-21T11:57:41Z", "message": "Use ITEM_COUNT_UNKNOWN everywhere instead of -1"}, "afterCommit": {"oid": "5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "committedDate": "2020-05-21T12:19:10Z", "message": "[Youtube mix] apply wb9688 suggestion\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5b8ebee94e653d3ee8e910dd9f7dc63a5f5c76c4", "committedDate": "2020-05-21T12:19:10Z", "message": "[Youtube mix] apply wb9688 suggestion\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation"}, "afterCommit": {"oid": "928e674c25748b501e9e8dcb1a4752adeae1473a", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/928e674c25748b501e9e8dcb1a4752adeae1473a", "committedDate": "2020-05-21T12:40:41Z", "message": "[Youtube] apply wb9688 suggestion (mix)\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "928e674c25748b501e9e8dcb1a4752adeae1473a", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/928e674c25748b501e9e8dcb1a4752adeae1473a", "committedDate": "2020-05-21T12:40:41Z", "message": "[Youtube] apply wb9688 suggestion (mix)\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation"}, "afterCommit": {"oid": "5c87409b254e6707563557b7ebe7716c810b5382", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5c87409b254e6707563557b7ebe7716c810b5382", "committedDate": "2020-05-21T12:53:10Z", "message": "[Youtube] Add subchannel functions to mix and fix imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c87409b254e6707563557b7ebe7716c810b5382", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/5c87409b254e6707563557b7ebe7716c810b5382", "committedDate": "2020-05-21T12:53:10Z", "message": "[Youtube] Add subchannel functions to mix and fix imports"}, "afterCommit": {"oid": "706825327be15190ba3915d65ff227f422aa091e", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/706825327be15190ba3915d65ff227f422aa091e", "committedDate": "2020-07-08T12:44:27Z", "message": "[Youtube] Add subchannel functions to mix and fix imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "706825327be15190ba3915d65ff227f422aa091e", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/706825327be15190ba3915d65ff227f422aa091e", "committedDate": "2020-07-08T12:44:27Z", "message": "[Youtube] Add subchannel functions to mix and fix imports"}, "afterCommit": {"oid": "e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "committedDate": "2020-08-01T07:22:53Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e07dc1457875b2e82d13e0f4eefd702df8c30d2a", "committedDate": "2020-08-01T07:22:53Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "9e941385b3ef149d2fa095eec7280c52bcd7b063", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9e941385b3ef149d2fa095eec7280c52bcd7b063", "committedDate": "2020-08-01T07:27:13Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e941385b3ef149d2fa095eec7280c52bcd7b063", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9e941385b3ef149d2fa095eec7280c52bcd7b063", "committedDate": "2020-08-01T07:27:13Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "cab0ee86ae55bc07a4cdaec447995c315bb6e344", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cab0ee86ae55bc07a4cdaec447995c315bb6e344", "committedDate": "2020-08-01T07:37:45Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cab0ee86ae55bc07a4cdaec447995c315bb6e344", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/cab0ee86ae55bc07a4cdaec447995c315bb6e344", "committedDate": "2020-08-01T07:37:45Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "63b2feb0001826307744fd2881e7c77d92b8a165", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63b2feb0001826307744fd2881e7c77d92b8a165", "committedDate": "2020-08-01T07:48:43Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63b2feb0001826307744fd2881e7c77d92b8a165", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/63b2feb0001826307744fd2881e7c77d92b8a165", "committedDate": "2020-08-01T07:48:43Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f465837ec12a9b46fa41ff47881bc8936ff96892", "committedDate": "2020-08-01T08:01:03Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODkyNzQ3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-465892747", "createdAt": "2020-08-12T13:01:48Z", "commit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowMTo0OVrOG_gO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzowNFrOG_hEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Mix", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469241558", "createdAt": "2020-08-12T13:01:49Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a youtube music mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a youtube music mix\n          \n          \n            \n                 * Checks if the given playlist id is a YouTube Music Mix (auto-generated playlist)\n          \n          \n            \n                 * Ids from a YouTube Music Mix start with \"RD\"\n          \n          \n            \n                 * @param playlistId\n          \n          \n            \n                 * @return Whether given id belongs to a YouTube Music Mix", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469244539", "createdAt": "2020-08-12T13:06:37Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -195,6 +202,26 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         return uploadDate;\n     }\n \n+    /**\n+     * Checks if the given playlist id is a youtube mix (auto-generated playlist)\n+     * Ids from a youtube mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube mix\n+     */\n+    public static boolean isYoutubeMixId(String playlistId) {\n+        return playlistId.startsWith(\"RD\") && !isYoutubeMusicMixId(playlistId);\n+    }\n+\n+    /**\n+     * Checks if the given playlist id is a youtube music mix (auto-generated playlist)\n+     * Ids from a youtube music mix start with \"RD\"\n+     * @param playlistId\n+     * @return Whether given id belongs to a youtube music mix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODc1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n          \n          \n            \n                 * youtube.com/watch?v=videoId&list=playlistId\n          \n          \n            \n                 * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is like\n          \n          \n            \n                 * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469248753", "createdAt": "2020-08-12T13:13:13Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;\n          \n          \n            \n                            final String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250716", "createdAt": "2020-08-12T13:16:15Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);\n+                }\n+                String newUrl = \"https://www.youtube.com/watch?v=\" + videoID + \"&list=\" + listID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDk5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String listID = Utils.getQueryValue(urlObj, \"list\");\n          \n          \n            \n                        final String listID = Utils.getQueryValue(urlObj, \"list\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469250995", "createdAt": "2020-08-12T13:16:43Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,31 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * If it is a mix (auto-generated playlist) url, return a Linkhandler where the url is like.\n+     * youtube.com/watch?v=videoId&list=playlistId\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            URL urlObj = Utils.stringToURL(url);\n+            String listID = Utils.getQueryValue(urlObj, \"list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n          \n          \n            \n             * \"youtube.com/watch?v=videoId&list=playlistId\"\n          \n          \n            \n             * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469252099", "createdAt": "2020-08-12T13:18:26Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n+ * \"youtube.com/watch?v=videoId&list=playlistId\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTEwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String videoId = \"_AzeUSL9lZc\";\n          \n          \n            \n                    final String videoId = \"_AzeUSL9lZc\";", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255101", "createdAt": "2020-08-12T13:22:46Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(\n+            \"https://www.youtube.com/watch?v=JhqtYOnNrTs&list=PL-EkZZikQIQVqk9rBWzEo5b-2GeozElS\");\n+        assertTrue(extractor instanceof YoutubePlaylistExtractor);\n+    }\n+\n+    @Test\n+    public void getPlaylistExtractorIsMix() throws Exception {\n+        String videoId = \"_AzeUSL9lZc\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTI4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PlaylistExtractor extractor = service.getPlaylistExtractor(\n          \n          \n            \n                    final PlaylistExtractor extractor = service.getPlaylistExtractor(", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469255285", "createdAt": "2020-08-12T13:23:04Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeServiceTest.java", "diffHunk": "@@ -54,4 +58,30 @@ public void testGetKioskAvailableKiosks() throws Exception {\n     public void testGetDefaultKiosk() throws Exception {\n         assertEquals(kioskList.getDefaultKioskExtractor(null).getId(), \"Trending\");\n     }\n+\n+\n+    @Test\n+    public void getPlayListExtractorIsNormalPlaylist() throws Exception {\n+        PlaylistExtractor extractor = service.getPlaylistExtractor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f465837ec12a9b46fa41ff47881bc8936ff96892"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTE0MzIw", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-466114320", "createdAt": "2020-08-12T17:13:10Z", "commit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxMzoxMFrOG_qxHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoxMzoxMFrOG_qxHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNDE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n          \n          \n            \n             * <code>youtube.com/watch?v=videoId&list=playlistId</code>\n          \n      \n    \n    \n  \n\nLooks like I did not remove that in my suggestion.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469414173", "createdAt": "2020-08-12T17:13:10Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -30,8 +30,8 @@\n import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n \n /**\n- * A YoutubePlaylistExtractor for a mix (auto-generated playlist). It handles urls in the format of\n- * \"youtube.com/watch?v=videoId&list=playlistId\"\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTcwNDE3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-466170417", "createdAt": "2020-08-12T18:30:34Z", "commit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMDozNFrOG_tgFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozODoyOVrOG_txkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODk2Nw==", "bodyText": "Like above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getValidJsonResponseBody(response);\n          \n          \n            \n            \n          \n          \n            \n                    return toJsonArray(response.responseBody());\n          \n          \n            \n                    return toJsonArray(getValidJsonResponseBody(response));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469458967", "createdAt": "2020-08-12T18:30:34Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -504,22 +535,65 @@ public static String getValidJsonResponseBody(final Response response)\n         final String responseContentType = response.getHeader(\"Content-Type\");\n         if (responseContentType != null\n                 && responseContentType.toLowerCase().contains(\"text/html\")) {\n-            throw new ParsingException(\"Got HTML document, expected JSON response\" +\n-                    \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n+            throw new ParsingException(\"Got HTML document, expected JSON response\"\n+                    + \" (latest url was: \\\"\" + response.latestUrl() + \"\\\")\");\n         }\n \n         return responseBody;\n     }\n \n+    public static Response getResponse(final String url, final Localization localization)\n+            throws IOException, ExtractionException {\n+        Map<String, List<String>> headers = new HashMap<>();\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(url, headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return response;\n+    }\n+\n+    public static String extractCookieValue(final String cookieName, final Response response) {\n+        final List<String> cookies = response.responseHeaders().get(\"Set-Cookie\");\n+        int startIndex;\n+        String result = \"\";\n+        for (String cookie : cookies) {\n+            startIndex = cookie.indexOf(cookieName);\n+            if (startIndex != -1) {\n+                result = cookie.substring(startIndex + cookieName.length() + \"=\".length(),\n+                        cookie.indexOf(\";\", startIndex));\n+            }\n+        }\n+        return result;\n+    }\n+\n     public static JsonArray getJsonResponse(final String url, final Localization localization)\n             throws IOException, ExtractionException {\n         Map<String, List<String>> headers = new HashMap<>();\n         headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n         headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n         final Response response = getDownloader().get(url, headers, localization);\n \n-        final String responseBody = getValidJsonResponseBody(response);\n+        return toJsonArray(getValidJsonResponseBody(response));\n+    }\n+\n+    public static JsonArray getJsonResponse(final Page page, final Localization localization)\n+            throws IOException, ExtractionException {\n+        final Map<String, List<String>> headers = new HashMap<>();\n+        if (!isNullOrEmpty(page.getCookies())) {\n+            headers.put(\"Cookie\", Collections.singletonList(join(\";\", \"=\", page.getCookies())));\n+        }\n+        headers.put(\"X-YouTube-Client-Name\", Collections.singletonList(\"1\"));\n+        headers.put(\"X-YouTube-Client-Version\", Collections.singletonList(getClientVersion()));\n+\n+        final Response response = getDownloader().get(page.getUrl(), headers, localization);\n+        getValidJsonResponseBody(response);\n+\n+        return toJsonArray(response.responseBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTgzNQ==", "bodyText": "Do this, so that the original error is reported if even the fallback fails\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        final String playlistId = playlistData.getString(\"playlistId\");\n          \n          \n            \n                        try {\n          \n          \n            \n                            return getThumbnailUrlFromPlaylistId(playlistId);\n          \n          \n            \n                        } catch (ParsingException e) {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        }\n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }\n          \n          \n            \n                    try {\n          \n          \n            \n                        return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n          \n          \n            \n                    } catch (final Exception e) {\n          \n          \n            \n                        try {\n          \n          \n            \n                            //fallback to thumbnail of current video. Always the case for channel mix\n          \n          \n            \n                            return getThumbnailUrlFromVideoId(\n          \n          \n            \n                                initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n          \n          \n            \n                                    .getString(\"videoId\"));\n          \n          \n            \n                        } catch (final Exception ignored) {\n          \n          \n            \n                        }\n          \n          \n            \n                        throw new ParsingException(\"Could not get playlist thumbnail\", e);\n          \n          \n            \n                    }", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469461835", "createdAt": "2020-08-12T18:35:36Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI1OQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463259", "createdAt": "2020-08-12T18:38:07Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzI5Mg==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463292", "createdAt": "2020-08-12T18:38:11Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzM5MQ==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463391", "createdAt": "2020-08-12T18:38:23Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzQ0MA==", "bodyText": "final", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r469463440", "createdAt": "2020-08-12T18:38:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist). It handles URLs in the format of\n+ * <code>youtube.com/watch?v=videoId&list=playlistId\"</code>\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            final String playlistId = playlistData.getString(\"playlistId\");\n+            try {\n+                return getThumbnailUrlFromPlaylistId(playlistId);\n+            } catch (ParsingException e) {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            }\n+        } catch (Exception e) {\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {\n+            throw new ExtractionException(\n+                new IllegalArgumentException(\"Page url is empty or null\"));\n+        }\n+\n+        final JsonArray ajaxJson = getJsonResponse(page, getExtractorLocalization());\n+        final JsonObject playlistJson =\n+                ajaxJson.getObject(3).getObject(\"response\").getObject(\"contents\")\n+                        .getObject(\"twoColumnWatchNextResults\").getObject(\"playlist\")\n+                        .getObject(\"playlist\");\n+        final JsonArray allStreams = playlistJson.getArray(\"contents\");\n+        // Sublist because youtube returns up to 24 previous streams in the mix\n+        // +1 because the stream of \"currentIndex\" was already extracted in previous request\n+        List<Object> newStreams =\n+                allStreams.subList(playlistJson.getInt(\"currentIndex\") + 1, allStreams.size());\n+\n+        StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, newStreams);\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrlFrom(playlistJson), page.getCookies()));\n+    }\n+\n+    private void collectStreamsFrom(\n+            @Nonnull final StreamInfoItemsCollector collector,\n+            @Nullable final List<Object> streams) {\n+\n+        if (streams == null) {\n+            return;\n+        }\n+\n+        final TimeAgoParser timeAgoParser = getTimeAgoParser();\n+\n+        for (Object stream : streams) {\n+            if (stream instanceof JsonObject) {\n+                JsonObject streamInfo = ((JsonObject) stream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5733f6af5ca3ca4d081b8e22769e9822ba712514"}, "originalPosition": 183}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b967a70ac25963a68999b9b49d5ce342bc02ec1", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7b967a70ac25963a68999b9b49d5ce342bc02ec1", "committedDate": "2020-08-13T15:54:53Z", "message": "[Youtube] More checkstyle & suggestions, squash this afterwards"}, "afterCommit": {"oid": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/de84efe3a420ce7a367e4f5af0ac098f5ad07478", "committedDate": "2020-08-13T16:09:29Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de84efe3a420ce7a367e4f5af0ac098f5ad07478", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/de84efe3a420ce7a367e4f5af0ac098f5ad07478", "committedDate": "2020-08-13T16:09:29Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "committedDate": "2020-08-13T16:15:57Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/4ff19c854564ab8d8f91a6b5bf57f4cbc0e830ff", "committedDate": "2020-08-13T16:15:57Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}, "afterCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/e930ec1c5d615f47ee524377c1ba7222177f9bc1", "committedDate": "2020-08-16T12:06:54Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODc1NzQ2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-481875746", "createdAt": "2020-09-03T14:07:29Z", "commit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNzozMFrOHMoVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNzozMFrOHMoVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTcyNg==", "bodyText": "Maybe you could add a test for this to UtilsTest.testJoin(). But you can leave this to another PR, since the code looks correct ;-)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r483005726", "createdAt": "2020-09-03T14:07:30Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/Utils.java", "diffHunk": "@@ -235,4 +236,15 @@ public static String join(final CharSequence delimiter, final Iterable<? extends\n         }\n         return stringBuilder.toString();\n     }\n+\n+    public static String join(final String delimiter, final String mapJoin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNTQyMTAy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-492542102", "createdAt": "2020-09-21T12:24:12Z", "commit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyNDoxM1rOHVNYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjozMzoyMVrOHVNu5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMTI4Ng==", "bodyText": "Please don't do this, it will break NewPipe Legacy unfortunately", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492001286", "createdAt": "2020-09-21T12:24:13Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -330,7 +358,7 @@ public static boolean areHardcodedYoutubeMusicKeysValid() throws IOException, Re\n                 .end()\n                 .value(\"query\", \"test\")\n                 .value(\"params\", \"Eg-KAQwIARAAGAAgACgAMABqChAEEAUQAxAKEAk%3D\")\n-            .end().done().getBytes(\"UTF-8\");\n+            .end().done().getBytes(StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMzUxNg==", "bodyText": "This function is unnecessary imho", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492003516", "createdAt": "2020-09-21T12:28:08Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNTYxOA==", "bodyText": "This doesn't work properly for the Mix types having a prefix longer than 2 letters.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492005618", "createdAt": "2020-09-21T12:30:46Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/linkHandler/YoutubePlaylistLinkHandlerFactory.java", "diffHunk": "@@ -67,4 +74,33 @@ public boolean onAcceptUrl(final String url) {\n         }\n         return true;\n     }\n+\n+    /**\n+     * * If it is a mix (auto-generated playlist) URL, return a {@link LinkHandler} where the URL is\n+     * like\n+     * <code>https://youtube.com/watch?v=videoId&list=playlistId</code>.\n+     * <p>Otherwise use super</p>\n+     */\n+    @Override\n+    public ListLinkHandler fromUrl(final String url) throws ParsingException {\n+        try {\n+            final URL urlObj = Utils.stringToURL(url);\n+            final String listID = Utils.getQueryValue(urlObj, \"list\");\n+            if (listID != null && YoutubeParsingHelper.isYoutubeMixId(listID)) {\n+                String videoID = Utils.getQueryValue(urlObj, \"v\");\n+                if (videoID == null) {\n+                    videoID = listID.substring(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNjk0OQ==", "bodyText": "It should require the cookie.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492006949", "createdAt": "2020-09-21T12:33:02Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeMixPlaylistExtractor.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package org.schabi.newpipe.extractor.services.youtube.extractors;\n+\n+import com.grack.nanojson.JsonArray;\n+import com.grack.nanojson.JsonObject;\n+\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.StreamingService;\n+import org.schabi.newpipe.extractor.downloader.Downloader;\n+import org.schabi.newpipe.extractor.downloader.Response;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.exceptions.ParsingException;\n+import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n+import org.schabi.newpipe.extractor.localization.TimeAgoParser;\n+import org.schabi.newpipe.extractor.playlist.PlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItemsCollector;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.extractCookieValue;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getJsonResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getResponse;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.getUrlFromNavigationEndpoint;\n+import static org.schabi.newpipe.extractor.services.youtube.YoutubeParsingHelper.toJsonArray;\n+\n+/**\n+ * A {@link YoutubePlaylistExtractor} for a mix (auto-generated playlist).\n+ * It handles URLs in the format of\n+ * {@code youtube.com/watch?v=videoId&list=playlistId}\n+ */\n+public class YoutubeMixPlaylistExtractor extends PlaylistExtractor {\n+\n+    /**\n+     * YouTube identifies mixes based on this cookie. With this information it can generate\n+     * continuations without duplicates.\n+     */\n+    private static final String COOKIE_NAME = \"VISITOR_INFO1_LIVE\";\n+\n+    private JsonObject initialData;\n+    private JsonObject playlistData;\n+    private String cookieValue;\n+\n+    public YoutubeMixPlaylistExtractor(final StreamingService service,\n+                                       final ListLinkHandler linkHandler) {\n+        super(service, linkHandler);\n+    }\n+\n+    @Override\n+    public void onFetchPage(@Nonnull final Downloader downloader)\n+            throws IOException, ExtractionException {\n+        final String url = getUrl() + \"&pbj=1\";\n+        final Response response = getResponse(url, getExtractorLocalization());\n+        final JsonArray ajaxJson = toJsonArray(response.responseBody());\n+        initialData = ajaxJson.getObject(3).getObject(\"response\");\n+        playlistData = initialData.getObject(\"contents\").getObject(\"twoColumnWatchNextResults\")\n+                .getObject(\"playlist\").getObject(\"playlist\");\n+        cookieValue = extractCookieValue(COOKIE_NAME, response);\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public String getName() throws ParsingException {\n+        final String name = playlistData.getString(\"title\");\n+        if (name == null) {\n+            throw new ParsingException(\"Could not get playlist name\");\n+        }\n+        return name;\n+    }\n+\n+    @Override\n+    public String getThumbnailUrl() throws ParsingException {\n+        try {\n+            return getThumbnailUrlFromPlaylistId(playlistData.getString(\"playlistId\"));\n+        } catch (final Exception e) {\n+            try {\n+                //fallback to thumbnail of current video. Always the case for channel mix\n+                return getThumbnailUrlFromVideoId(\n+                    initialData.getObject(\"currentVideoEndpoint\").getObject(\"watchEndpoint\")\n+                        .getString(\"videoId\"));\n+            } catch (final Exception ignored) {\n+            }\n+            throw new ParsingException(\"Could not get playlist thumbnail\", e);\n+        }\n+    }\n+\n+    @Override\n+    public String getBannerUrl() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderUrl() {\n+        //Youtube mix are auto-generated\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String getUploaderName() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"YouTube\";\n+    }\n+\n+    @Override\n+    public String getUploaderAvatarUrl() {\n+        //Youtube mix are auto-generated by YouTube\n+        return \"\";\n+    }\n+\n+    @Override\n+    public long getStreamCount() {\n+        // Auto-generated playlist always start with 25 videos and are endless\n+        return ListExtractor.ITEM_COUNT_INFINITE;\n+    }\n+\n+    @Nonnull\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getInitialPage() throws ExtractionException {\n+        final StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n+        collectStreamsFrom(collector, playlistData.getArray(\"contents\"));\n+        return new InfoItemsPage<>(collector,\n+                new Page(getNextPageUrl(), Collections.singletonMap(COOKIE_NAME, cookieValue)));\n+    }\n+\n+    private String getNextPageUrl() throws ExtractionException {\n+        return getNextPageUrlFrom(playlistData);\n+    }\n+\n+    private String getNextPageUrlFrom(final JsonObject playlistJson) throws ExtractionException {\n+        final JsonObject lastStream = ((JsonObject) playlistJson.getArray(\"contents\")\n+                .get(playlistJson.getArray(\"contents\").size() - 1));\n+        if (lastStream == null || lastStream.getObject(\"playlistPanelVideoRenderer\") == null) {\n+            throw new ExtractionException(\"Could not extract next page url\");\n+        }\n+\n+        return getUrlFromNavigationEndpoint(\n+                lastStream.getObject(\"playlistPanelVideoRenderer\").getObject(\"navigationEndpoint\"))\n+                + \"&pbj=1\";\n+    }\n+\n+    @Override\n+    public InfoItemsPage<StreamInfoItem> getPage(final Page page)\n+            throws ExtractionException, IOException {\n+        if (page == null || page.getUrl().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwNzE0MA==", "bodyText": "When requiring the cookie, this won't work anymore.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#discussion_r492007140", "createdAt": "2020-09-21T12:33:21Z", "author": {"login": "wb9688"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/YoutubeMixPlaylistExtractorTest.java", "diffHunk": "@@ -0,0 +1,341 @@\n+package org.schabi.newpipe.extractor.services.youtube;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+import org.schabi.newpipe.DownloaderTestImpl;\n+import org.schabi.newpipe.extractor.ListExtractor;\n+import org.schabi.newpipe.extractor.ListExtractor.InfoItemsPage;\n+import org.schabi.newpipe.extractor.NewPipe;\n+import org.schabi.newpipe.extractor.Page;\n+import org.schabi.newpipe.extractor.exceptions.ExtractionException;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.ChannelMix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Invalid;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.Mix;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MixWithIndex;\n+import org.schabi.newpipe.extractor.services.youtube.YoutubeMixPlaylistExtractorTest.MyMix;\n+import org.schabi.newpipe.extractor.services.youtube.extractors.YoutubeMixPlaylistExtractor;\n+import org.schabi.newpipe.extractor.stream.StreamInfoItem;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({Mix.class, MixWithIndex.class, MyMix.class, Invalid.class, ChannelMix.class})\n+public class YoutubeMixPlaylistExtractorTest {\n+\n+    public static final String PBJ = \"&pbj=1\";\n+    private static final String VIDEO_ID = \"_AzeUSL9lZc\";\n+    private static final String VIDEO_TITLE =\n+            \"Most Beautiful And Emotional  Piano: Anime Music Shigatsu wa Kimi no Uso OST IMO\";\n+\n+    private static YoutubeMixPlaylistExtractor extractor;\n+\n+    public static class Mix {\n+\n+        @BeforeClass\n+        public static void setUp() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = (YoutubeMixPlaylistExtractor) YouTube\n+                    .getPlaylistExtractor(\n+                            \"https://www.youtube.com/watch?v=\" + VIDEO_ID + \"&list=RD\" + VIDEO_ID);\n+            extractor.fetchPage();\n+        }\n+\n+        @Test\n+        public void getServiceId() {\n+            assertEquals(YouTube.getServiceId(), extractor.getServiceId());\n+        }\n+\n+        @Test\n+        public void getName() throws Exception {\n+            final String name = extractor.getName();\n+            assertThat(name, startsWith(\"Mix\"));\n+            assertThat(name, containsString(VIDEO_TITLE));\n+        }\n+\n+        @Test\n+        public void getThumbnailUrl() throws Exception {\n+            final String thumbnailUrl = extractor.getThumbnailUrl();\n+            assertIsSecureUrl(thumbnailUrl);\n+            MatcherAssert.assertThat(thumbnailUrl, containsString(\"yt\"));\n+            assertThat(thumbnailUrl, containsString(VIDEO_ID));\n+        }\n+\n+        @Test\n+        public void getInitialPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getInitialPage();\n+            assertFalse(streams.getItems().isEmpty());\n+            assertTrue(streams.hasNextPage());\n+        }\n+\n+        @Test\n+        public void getPage() throws Exception {\n+            final InfoItemsPage<StreamInfoItem> streams = extractor.getPage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e930ec1c5d615f47ee524377c1ba7222177f9bc1"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b289db5f7e3fec045d9662a64e32834d635b971", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/7b289db5f7e3fec045d9662a64e32834d635b971", "committedDate": "2020-09-26T09:39:29Z", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case"}, "afterCommit": {"oid": "f9cf340ede6580ff20ba060096c3c1b826050d71", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f9cf340ede6580ff20ba060096c3c1b826050d71", "committedDate": "2020-09-26T09:45:31Z", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTY1MTI4", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/280#pullrequestreview-543965128", "createdAt": "2020-12-03T13:44:28Z", "commit": {"oid": "f9cf340ede6580ff20ba060096c3c1b826050d71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0efb854d27deeee0f9f85d6f5537aa137aeb07c0", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Implement mix extractor for auto-generated playlists.\n\n-New YoutubeMixPlaylistExtractor, that extracts from a mix (auto-generated playlist).\n-The url has the format of \"youtube.com/watch?v=videoID&playlistID\",\nwhere playlistID always starts with \"RD\" and usually followed by the videoID.\n-Change YoutubePlaylistLinkHandlerFactory to create a linkhandler with the given url if it is a mix.\n-Change YoutubeService to return YoutubeMixPlaylistExtractor if the url is a mix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d74265c846854263088ee69dfca551b2f70493d8", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d74265c846854263088ee69dfca551b2f70493d8", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Extract getThumbnailUrl into method and change getUploaderName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "327a5730a883aa6725a629763a3df0cebda30d03", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/327a5730a883aa6725a629763a3df0cebda30d03", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Add some comments to mix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a376792a5d557e4d0e9101147af6fe49e72d4c3f", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a376792a5d557e4d0e9101147af6fe49e72d4c3f", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Handle case where url is in \"youtube.com/playlist?list=listID\" format.\n\nThis occurs when sharing a mix from the official youtube app."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ff054acb440ff310c543f600b32b594338873c2", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0ff054acb440ff310c543f600b32b594338873c2", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Extract initial playlist info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec6b99c082267e2df609cac46144fc4f41109591", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/ec6b99c082267e2df609cac46144fc4f41109591", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Adjust mix extractor to new user agent\n\nAlso extract continuation now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a3948af6dbd5795c061ff874df67ed1d19cb78", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/68a3948af6dbd5795c061ff874df67ed1d19cb78", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Fix get banner url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df38b1926c8a5fb9fb510dd15ff75b5f13897877", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/df38b1926c8a5fb9fb510dd15ff75b5f13897877", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Add tests and take thumbnail image always from first video of mix\n\nAlso fix getThumbnailUrl for \"My Mix\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822cf307f723613baaaa2fde0bbb78aaa1d4082a", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/822cf307f723613baaaa2fde0bbb78aaa1d4082a", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Add _ITEMS constants and improve code style\n\nMove thumbnail id exctraction code to getThumbnailUrlFromId\nAdd test for \"My mix\" detection to service tests\nUse ITEM_COUNT_UNKNOWN everywhere instead of -1 and add some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff8619bcc703920705431e217d549726cefb830", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/3ff8619bcc703920705431e217d549726cefb830", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] apply wb9688 suggestion (mix)\n\nChannel mix adjusments and test\nDon't accept youtube music mix urls as playlist\nDon't override playlistData to keep getInitialPage()\nRemove json constants\nIndentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421935401f9c8fc45aed92742cb111f6b9e45193", "author": {"user": {"login": "Stypox", "name": "Stypox"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/421935401f9c8fc45aed92742cb111f6b9e45193", "committedDate": "2020-12-12T19:30:57Z", "message": "[Youtube] Add subchannel functions to mix and fix imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d2f7e4006036aab8ac63478b791c4ab3de1624", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/22d2f7e4006036aab8ac63478b791c4ab3de1624", "committedDate": "2020-12-12T19:32:40Z", "message": "[Youtube] Add cookies to youtube mix request\n\nThis way youtube wont return duplicates when getting more items of the mix (but youtube can also track us)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a338e4e08e385e741c18ce2d30ae1e5016599cf0", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a338e4e08e385e741c18ce2d30ae1e5016599cf0", "committedDate": "2020-12-12T19:32:43Z", "message": "[Youtube] Apply review suggestions and avoid channel mix edge case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90f6fcf92b355f668656e9e277bdb2086d11ab5", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f90f6fcf92b355f668656e9e277bdb2086d11ab5", "committedDate": "2020-12-12T19:40:13Z", "message": "[YouTube] Don't escape & in getUrlFromNavigationEndpoint for playlists"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2a1b880d988e4cd3057ae7b1ec680f4e3dc4e07", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a2a1b880d988e4cd3057ae7b1ec680f4e3dc4e07", "committedDate": "2020-12-12T19:25:38Z", "message": "Merge branch 'mixPL' into dev"}, "afterCommit": {"oid": "f90f6fcf92b355f668656e9e277bdb2086d11ab5", "author": {"user": {"login": "XiangRongLin", "name": null}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/f90f6fcf92b355f668656e9e277bdb2086d11ab5", "committedDate": "2020-12-12T19:40:13Z", "message": "[YouTube] Don't escape & in getUrlFromNavigationEndpoint for playlists"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3985, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}