{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzY3ODMx", "number": 254, "title": "Improve code formatting and optimize imports", "bodyText": "I ran IntelliJ's \"reformat code\" command, but didn't pick all changes.", "createdAt": "2020-02-08T23:01:29Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254", "merged": true, "mergeCommit": {"oid": "4bc5b8d33f4cf52925a02184870225fac490001a"}, "closed": true, "closedAt": "2020-02-17T07:38:02Z", "author": {"login": "TobiGr"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCvDyEAFqTM1NTYzMzM0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFIB1igFqTM1OTUyNTI0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjMzMzQ5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-355633349", "createdAt": "2020-02-09T21:03:36Z", "commit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowMzozNlrOFnW-Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTowMzozNlrOFnW-Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxNTE4Ng==", "bodyText": "below:\n// -2 because well the testing system will then know its the regex that failed :/\nwill consequently know that the regex failed", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376815186", "createdAt": "2020-02-09T21:03:36Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds\n      * @throws ParsingException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjMzNjY3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-355633667", "createdAt": "2020-02-09T21:08:34Z", "commit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjM2NDI0", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-355636424", "createdAt": "2020-02-09T21:52:23Z", "commit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMTo1MjoyM1rOFnXMnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjowMToxMFrOFnXPlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated constructor stub", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818845", "createdAt": "2020-02-09T21:52:23Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/comments/CommentsInfo.java", "diffHunk": "@@ -10,20 +8,22 @@\n import org.schabi.newpipe.extractor.linkhandler.ListLinkHandler;\n import org.schabi.newpipe.extractor.utils.ExtractorHelper;\n \n-public class CommentsInfo extends ListInfo<CommentsInfoItem>{\n+import java.io.IOException;\n+\n+public class CommentsInfo extends ListInfo<CommentsInfoItem> {\n+\n+    private CommentsInfo(int serviceId, ListLinkHandler listUrlIdHandler, String name) {\n+        super(serviceId, listUrlIdHandler, name);\n+        // TODO Auto-generated constructor stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODg5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,\n          \n          \n            \n                 * For making ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818891", "createdAt": "2020-02-09T21:53:01Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/ListLinkHandlerFactory.java", "diffHunk": "@@ -53,18 +59,19 @@ public ListLinkHandler fromQuery(String id,\n         final String url = getUrl(id, contentFilters, sortFilter);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n-    \n+\n     public ListLinkHandler fromQuery(String id,\n                                      List<String> contentFilters,\n                                      String sortFilter, String baseUrl) throws ParsingException {\n         final String url = getUrl(id, contentFilters, sortFilter, baseUrl);\n         return new ListLinkHandler(url, url, id, contentFilters, sortFilter);\n     }\n \n-    \n+\n     /**\n      * For makeing ListLinkHandlerFactory compatible with LinkHandlerFactory we need to override this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxODk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * It's not mandatorry for NewPipe to handle the Url\n          \n          \n            \n                 * It's not mandatory for NewPipe to handle the Url", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376818948", "createdAt": "2020-02-09T21:53:19Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/linkhandler/SearchQueryHandlerFactory.java", "diffHunk": "@@ -35,9 +40,12 @@ public SearchQueryHandler fromQuery(String querry) throws ParsingException {\n \n     /**\n      * It's not mandatorry for NewPipe to handle the Url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819052", "createdAt": "2020-02-09T21:54:12Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to extract peertube channel data\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819078", "createdAt": "2020-02-09T21:54:33Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -138,30 +137,30 @@ private String getNextPageUrl(String prevPageUrl) {\n         } catch (RegexException e) {\n             return \"\";\n         }\n-        if(StringUtil.isBlank(prevStart)) return \"\";\n+        if (StringUtil.isBlank(prevStart)) return \"\";\n         long nextStart = 0;\n         try {\n             nextStart = Long.valueOf(prevStart) + ITEMS_PER_PAGE;\n         } catch (NumberFormatException e) {\n             return \"\";\n         }\n-        \n-        if(nextStart >= total) {\n+\n+        if (nextStart >= total) {\n             return \"\";\n-        }else {\n+        } else {\n             return prevPageUrl.replace(START_KEY + \"=\" + prevStart, START_KEY + \"=\" + String.valueOf(nextStart));\n         }\n     }\n-    \n+\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         Response response = downloader.get(getUrl());\n-        if(null != response && null != response.responseBody()) {\n+        if (null != response && null != response.responseBody()) {\n             setInitialData(response.responseBody());\n-        }else {\n+        } else {\n             throw new ExtractionException(\"Unable to extract peertube channel data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTA5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExtractionException(\"Unable to get peertube kiosk info\");\n          \n          \n            \n                        throw new ExtractionException(\"Unable to get PeerTube kiosk info\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819096", "createdAt": "2020-02-09T21:54:49Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -110,26 +109,26 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     public InfoItemsPage<StreamInfoItem> getPage(String pageUrl) throws IOException, ExtractionException {\n         Response response = getDownloader().get(pageUrl);\n         JsonObject json = null;\n-        if(null != response && !StringUtil.isBlank(response.responseBody())) {\n+        if (null != response && !StringUtil.isBlank(response.responseBody())) {\n             try {\n                 json = JsonParser.object().from(response.responseBody());\n             } catch (Exception e) {\n                 throw new ParsingException(\"Could not parse json data for kiosk info\", e);\n             }\n         }\n-        \n+\n         StreamInfoItemsCollector collector = new StreamInfoItemsCollector(getServiceId());\n-        if(json != null) {\n+        if (json != null) {\n             PeertubeParsingHelper.validate(json);\n             Number number = JsonUtils.getNumber(json, \"total\");\n-            if(number != null) this.total = number.longValue();\n+            if (number != null) this.total = number.longValue();\n             collectStreamsFrom(collector, json, pageUrl);\n         } else {\n             throw new ExtractionException(\"Unable to get peertube kiosk info\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTEzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO Auto-generated method stub", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819132", "createdAt": "2020-02-09T21:55:22Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubePlaylistExtractor.java", "diffHunk": "@@ -74,7 +74,7 @@ public String getNextPageUrl() throws IOException, ExtractionException {\n     @Override\n     public void onFetchPage(Downloader downloader) throws IOException, ExtractionException {\n         // TODO Auto-generated method stub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTE5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ParsingException(\"unable to extract kiosk info\", e);\n          \n          \n            \n                        throw new ParsingException(\"Unable to extract kiosk info\", e);", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819191", "createdAt": "2020-02-09T21:55:57Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeTrendingExtractor.java", "diffHunk": "@@ -49,19 +48,19 @@ private void collectStreamsFrom(StreamInfoItemsCollector collector, JsonObject j\n         JsonArray contents;\n         try {\n             contents = (JsonArray) JsonUtils.getValue(json, \"data\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to extract kiosk info\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTI5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the fornt end\n          \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819294", "createdAt": "2020-02-09T21:57:09Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the fornt end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTM5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of likes a video/audio stream got.\n          \n          \n            \n                 * The amount of likes a video/audio stream got.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819396", "createdAt": "2020-02-09T21:58:28Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -125,6 +130,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of likes a video/audio stream got.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The Amount of dislikes a video/audio stream got.\n          \n          \n            \n                 * The amount of dislikes a video/audio stream got.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819446", "createdAt": "2020-02-09T21:59:15Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -133,6 +139,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * The Amount of dislikes a video/audio stream got.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTQ4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * should return the url of the next stream. NewPipe will automatically play\n          \n          \n            \n                 * Should return the url of the next stream. NewPipe will automatically play", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819487", "createdAt": "2020-02-09T21:59:42Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -259,6 +279,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * should return the url of the next stream. NewPipe will automatically play", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTUyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * If  is is not available simply return null\n          \n          \n            \n                 * If it is not available simply return null", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819520", "createdAt": "2020-02-09T22:00:11Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -271,6 +292,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n      * be disabled by the user later in the frontend.\n      * This list MUST NOT contain the next available video as this should be return through getNextStream()\n      * If  is is not available simply return null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTU3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Honestly I don't even know the time stamp fromat of youtube.\n          \n          \n            \n                 * Honestly I don't even know the time stamp format of YouTube.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819573", "createdAt": "2020-02-09T22:00:45Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTYwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return the sime stamp/seek for the video in seconds\n          \n          \n            \n                 * @return the time stamp/seek for the video in seconds", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819604", "createdAt": "2020-02-09T22:01:10Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -302,6 +325,7 @@ public StreamExtractor(StreamingService service, LinkHandler linkHandler) {\n     /**\n      * Override this function if the format of time stamp in the url is not the same format as that form youtube.\n      * Honestly I don't even know the time stamp fromat of youtube.\n+     *\n      * @param regexPattern\n      * @return the sime stamp/seek for the video in seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjM3MTQ2", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-355637146", "createdAt": "2020-02-09T22:03:37Z", "commit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjowMzozN1rOFnXQNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjowMzozN1rOFnXQNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxOTc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the media format by it's id.\n          \n          \n            \n                 * Get the media format by its id.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r376819766", "createdAt": "2020-02-09T22:03:37Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MediaFormat.java", "diffHunk": "@@ -116,25 +116,27 @@ public static MediaFormat getFromMimeType(String mimeType) {\n \n     /**\n      * Get the media format by it's id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c056ead321bd6b094ac44ed678286d05dbc95f9"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/030465b5d4d8c738a42cfc52bd1d78f54b0f6bd4", "committedDate": "2020-02-15T12:36:54Z", "message": "Improve code formatting and optimise imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6822574588cde36580cfd564363dc632e0f7446a", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6822574588cde36580cfd564363dc632e0f7446a", "committedDate": "2020-02-15T12:36:54Z", "message": "Fix typos\n\nCo-Authored-By: B0pol <bopol@e.email>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "committedDate": "2020-02-15T12:36:54Z", "message": "Apply one suggestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f5b1a76f4230834d08de0ca8f80235d0e1ab941", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/6f5b1a76f4230834d08de0ca8f80235d0e1ab941", "committedDate": "2020-02-15T11:52:29Z", "message": "Apply one suggestion"}, "afterCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a4115286b46356b34bbcb2308261f86acd380c8", "committedDate": "2020-02-15T12:36:54Z", "message": "Apply one suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MzU3MTA3", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-359357107", "createdAt": "2020-02-15T17:43:16Z", "commit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxNzo0MzoxN1rOFqP6ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxOToyNDowNlrOFqU4rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg0NTIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == llhf) {\n          \n          \n            \n                    if (llhf == null) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379845220", "createdAt": "2020-02-15T17:43:17Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/StreamingService.java", "diffHunk": "@@ -269,7 +263,7 @@ public StreamExtractor getStreamExtractor(String url) throws ExtractionException\n \n     public CommentsExtractor getCommentsExtractor(String url) throws ExtractionException {\n         ListLinkHandlerFactory llhf = getCommentsLHFactory();\n-        if(null == llhf) {\n+        if (null == llhf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == response || StringUtil.isBlank(response.responseBody())) {\n          \n          \n            \n                    if (response == null || StringUtil.isBlank(response.responseBody())) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926074", "createdAt": "2020-02-16T19:14:47Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeInstance.java", "diffHunk": "@@ -10,45 +11,43 @@\n import org.schabi.newpipe.extractor.exceptions.ReCaptchaException;\n import org.schabi.newpipe.extractor.utils.JsonUtils;\n \n-import com.grack.nanojson.JsonObject;\n-import com.grack.nanojson.JsonParser;\n-import com.grack.nanojson.JsonParserException;\n+import java.io.IOException;\n \n public class PeertubeInstance {\n-    \n+\n     private final String url;\n     private String name;\n     public static final PeertubeInstance defaultInstance = new PeertubeInstance(\"https://framatube.org\", \"FramaTube\");\n-    \n+\n     public PeertubeInstance(String url) {\n         this.url = url;\n         this.name = \"PeerTube\";\n     }\n-    \n-    public PeertubeInstance(String url , String name) {\n+\n+    public PeertubeInstance(String url, String name) {\n         this.url = url;\n         this.name = name;\n     }\n \n     public String getUrl() {\n         return url;\n     }\n-    \n+\n     public void fetchInstanceMetaData() throws Exception {\n         Downloader downloader = NewPipe.getDownloader();\n         Response response = null;\n-        \n+\n         try {\n             response = downloader.get(url + \"/api/v1/config\");\n         } catch (ReCaptchaException | IOException e) {\n             throw new Exception(\"unable to configure instance \" + url, e);\n         }\n-        \n-        if(null == response || StringUtil.isBlank(response.responseBody())) {\n+\n+        if (null == response || StringUtil.isBlank(response.responseBody())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");\n          \n          \n            \n                    if (json == null) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926084", "createdAt": "2020-02-16T19:15:04Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeChannelExtractor.java", "diffHunk": "@@ -172,14 +171,14 @@ private void setInitialData(String responseBody) throws ExtractionException {\n         } catch (JsonParserException e) {\n             throw new ExtractionException(\"Unable to extract peertube channel data\", e);\n         }\n-        if(null == json) throw new ExtractionException(\"Unable to extract peertube channel data\");\n+        if (null == json) throw new ExtractionException(\"Unable to extract PeerTube channel data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjA5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (null == title) {\n          \n          \n            \n                    if (title == null) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926097", "createdAt": "2020-02-16T19:15:22Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeCommentsExtractor.java", "diffHunk": "@@ -107,32 +108,32 @@ private String getNextPageUrl(String continuation) throws ParsingException {\n     }\n \n     private void collectCommentsFrom(CommentsInfoItemsCollector collector, JsonObject ajaxJson) throws ParsingException {\n-        \n+\n         JsonArray contents;\n         try {\n             contents = JsonUtils.getArray(ajaxJson, \"response.continuationContents.commentSectionContinuation.items\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             //no comments\n             return;\n         }\n         fetchTitle(contents);\n         List<Object> comments;\n         try {\n             comments = JsonUtils.getValues(contents, \"commentThreadRenderer.comment.commentRenderer\");\n-        }catch(Exception e) {\n+        } catch (Exception e) {\n             throw new ParsingException(\"unable to get parse youtube comments\", e);\n         }\n-        \n-        for(Object c: comments) {\n-            if(c instanceof JsonObject) {\n+\n+        for (Object c : comments) {\n+            if (c instanceof JsonObject) {\n                 CommentsInfoItemExtractor extractor = new YoutubeCommentsInfoItemExtractor((JsonObject) c, getUrl(), getTimeAgoParser());\n                 collector.commit(extractor);\n             }\n         }\n     }\n \n     private void fetchTitle(JsonArray contents) {\n-        if(null == title) {\n+        if (null == title) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjQ4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Whoever is willing to implement this should also implement this in the front end.\n          \n          \n            \n                    // Whoever is willing to implement this should also implement it in the frontend.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926484", "createdAt": "2020-02-16T19:21:11Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubePlaylistExtractor.java", "diffHunk": "@@ -68,7 +68,7 @@ public String getThumbnailUrl() throws ParsingException {\n     @Override\n     public String getBannerUrl() {\n         return \"\";      // Banner can't be handled by frontend right now.\n-                        // Whoever is willing to implement this should also implement this in the fornt end\n+        // Whoever is willing to implement this should also implement this in the front end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjY1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // not good i know\n          \n          \n            \n                        // not good, I know", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926659", "createdAt": "2020-02-16T19:23:27Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp\n \n-            // -2 because well the testing system will then know its the regex that failed :/\n+            // -2 because the testing system will consequently know that the regex failed\n             // not good i know", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyNjcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // catch this instantly since an url does not necessarily have to have a time stamp\n          \n          \n            \n                        // catch this instantly since a url does not necessarily have a timestamp", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#discussion_r379926703", "createdAt": "2020-02-16T19:24:06Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -313,7 +337,7 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n         } catch (Parser.RegexException e) {\n             // catch this instantly since an url does not necessarily have to have a time stamp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a4115286b46356b34bbcb2308261f86acd380c8"}, "originalPosition": 219}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a129c65c63ee95462239b9681bf14c1562abfe07", "author": {"user": {"login": "TobiGr", "name": "Tobi"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/a129c65c63ee95462239b9681bf14c1562abfe07", "committedDate": "2020-02-16T22:59:31Z", "message": "more improvements of comments\n\nCo-Authored-By: Stypox <stypox@pm.me>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTI1MjQy", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/254#pullrequestreview-359525242", "createdAt": "2020-02-17T07:16:57Z", "commit": {"oid": "a129c65c63ee95462239b9681bf14c1562abfe07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3975, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}