{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNjM1ODkx", "number": 451, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyODoxN1rOE0J75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDo1MFrOFHkiwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI0MTk5OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyODoxN1rOHrv5JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNTozNTo0N1rOHrv8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTQ5Mg==", "bodyText": "This will fail if there is no expected metadata info.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r515635492", "createdAt": "2020-11-01T15:28:17Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -382,4 +386,20 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    public void testMetadataInfo() throws Exception {\n+        final MetaInfo metaInfo = extractor().getMetaInfo().get(0);\n+        final MetaInfo expectedMetaInfo = expectedMetadataInfo().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05675c9a90215abc23fe2b0b6355b855b7ab3304"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNjM1NQ==", "bodyText": "i know. that's what i meant on irc :)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r515636355", "createdAt": "2020-11-01T15:35:47Z", "author": {"login": "TobiGr"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -382,4 +386,20 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    public void testMetadataInfo() throws Exception {\n+        final MetaInfo metaInfo = extractor().getMetaInfo().get(0);\n+        final MetaInfo expectedMetaInfo = expectedMetadataInfo().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTQ5Mg=="}, "originalCommit": {"oid": "05675c9a90215abc23fe2b0b6355b855b7ab3304"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU0MzA0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxMjoyNlrOIEfCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxNDowODo1M1rOIEfmOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Mzc3MQ==", "bodyText": "This code should only add <br> in between paragraphs, not also at the end, or shouldn't it?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n          \n          \n            \n                        if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!sb.isEmpty()) {\n          \n          \n            \n                            sb.append(\"<br>\");\n          \n          \n            \n                        }\n          \n          \n            \n                        sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541573771", "createdAt": "2020-12-12T13:12:26Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MjkwNA==", "bodyText": "Good idea. sb.isEmpty() does not exist, I'll use sb.length() != 0 instead", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541582904", "createdAt": "2020-12-12T14:08:53Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Mzc3MQ=="}, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU0NjgwOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNToyM1rOIEfEKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNToyM1rOIEfEKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDE4NA==", "bodyText": "This should be avove the @", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574184", "createdAt": "2020-12-12T13:15:23Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -41,4 +50,32 @@ public void testSearchSuggestion() throws Exception {\n     public void testSearchCorrected() throws Exception {\n         assertEquals(isCorrectedSearch(), extractor().isCorrectedSearch());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultStreamExtractorTest#testMetaInfo()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU0NzA1OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNTozNlrOIEfERg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoxNTozNlrOIEfERg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NDIxNA==", "bodyText": "Also here", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541574214", "createdAt": "2020-12-12T13:15:36Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -379,4 +384,33 @@ public void testTags() throws Exception {\n     public void testSupportInfo() throws Exception {\n         assertEquals(expectedSupportInfo(), extractor().getSupportInfo());\n     }\n+\n+    @Test\n+    /**\n+     * @see DefaultSearchExtractorTest#testMetaInfo()\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU2MDU2OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzoyNToxNFrOIEfKMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0MjoyOFrOIGU8wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA==", "bodyText": "This is not true, at least for me the secondary endpoint for e.g. covid 19 points to Learn about vaccine progress from the WHO. So I think you should add another url and another urlText. You could check with a rule of thumb if it is a google search or not (e.g. by looking for google inside the url), and only add it if it is not.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541575730", "createdAt": "2020-12-12T13:25:14Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU4MTA5Mg==", "bodyText": "I cannot reproduce that. Can you provide a JSON for me?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541581092", "createdAt": "2020-12-12T13:57:45Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI0Mzk2Ng==", "bodyText": "I opened YouTube in a Private Window and this is what I get.\n{\n\t\"clarificationRenderer\": {\n\t\t\"text\": {\n\t\t\t\"runs\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"Get the latest information from the WHO about coronavirus.\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"endpoint\": {\n\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"commandMetadata\": {\n\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"urlEndpoint\": {\n\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t}\n\t\t},\n\t\t\"menu\": {\n\t\t\t\"menuRenderer\": {\n\t\t\t\t\"items\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"menuNavigationItemRenderer\": {\n\t\t\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\t\t\"runs\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"text\": \"Why am I seeing this?\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"icon\": {\n\t\t\t\t\t\t\t\t\"iconType\": \"INFO\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"navigationEndpoint\": {\n\t\t\t\t\t\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\t\t\t\"url\": \"//support.google.com/youtube/answer/9004474?hl=en-GB\",\n\t\t\t\t\t\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"urlEndpoint\": {\n\t\t\t\t\t\t\t\t\t\"url\": \"//support.google.com/youtube/answer/9004474?hl=en-GB\",\n\t\t\t\t\t\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\t\t\t\"label\": \"Why am I seeing this?\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"menuNavigationItemRenderer\": {\n\t\t\t\t\t\t\t\"text\": {\n\t\t\t\t\t\t\t\t\"runs\": [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"text\": \"Send feedback\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"icon\": {\n\t\t\t\t\t\t\t\t\"iconType\": \"FEEDBACK\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"navigationEndpoint\": {\n\t\t\t\t\t\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\t\t\t\"ignoreNavigation\": true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"userFeedbackEndpoint\": {\n\t\t\t\t\t\t\t\t\t\"additionalDatas\": [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\"userFeedbackEndpointProductSpecificValueData\": {\n\t\t\t\t\t\t\t\t\t\t\t\t\"key\": \"clarify_id\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"value\": \"/g/11j2cc_qll\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\"bucketIdentifier\": \"clarify_box\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\t\t\t\"label\": \"Send feedback\",\n\t\t\t\t\t\t\t\t\t\"identifier\": {\n\t\t\t\t\t\t\t\t\t\t\"accessibilityIdType\": \"MENU_FEEDBACK\"\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\"accessibility\": {\n\t\t\t\t\t\"accessibilityData\": {\n\t\t\t\t\t\t\"label\": \"Action menu\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"source\": {\n\t\t\t\"simpleText\": \"Learn about vaccine progress from the WHO\"\n\t\t},\n\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\"style\": \"CLARIFICATION_RENDERER_STYLE_MEDIUM\",\n\t\t\"contentTitle\": {\n\t\t\t\"runs\": [\n\t\t\t\t{\n\t\t\t\t\t\"text\": \"COVID-19\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"secondaryEndpoint\": {\n\t\t\t\"clickTrackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"commandMetadata\": {\n\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/covid-19-vaccines\",\n\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"urlEndpoint\": {\n\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/covid-19-vaccines\",\n\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t}\n\t\t},\n\t\t\"actionButton\": {\n\t\t\t\"buttonRenderer\": {\n\t\t\t\t\"style\": \"STYLE_SUGGESTIVE\",\n\t\t\t\t\"size\": \"SIZE_DEFAULT\",\n\t\t\t\t\"isDisabled\": false,\n\t\t\t\t\"text\": {\n\t\t\t\t\t\"simpleText\": \"LEARN MORE\"\n\t\t\t\t},\n\t\t\t\t\"trackingParams\": \"CLoBEPBbIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\"command\": {\n\t\t\t\t\t\"clickTrackingParams\": \"CLoBEPBbIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\t\t\"commandMetadata\": {\n\t\t\t\t\t\t\"webCommandMetadata\": {\n\t\t\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\t\t\"webPageType\": \"WEB_PAGE_TYPE_UNKNOWN\",\n\t\t\t\t\t\t\t\"rootVe\": 83769\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"urlEndpoint\": {\n\t\t\t\t\t\t\"url\": \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\",\n\t\t\t\t\t\t\"target\": \"TARGET_NEW_WINDOW\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"background\": \"CLARIFICATION_RENDERER_BACKGROUND_INFO\",\n\t\t\"secondarySource\": {\n\t\t\t\"simpleText\": \"Learn about vaccine progress from the WHO\"\n\t\t},\n\t\t\"loggingDirectives\": {\n\t\t\t\"trackingParams\": \"CLkBEMChAhgAIhMImZiDhenP7QIVWoV8Ch2TvAxl\",\n\t\t\t\"visibility\": {\n\t\t\t\t\"types\": \"12\"\n\t\t\t},\n\t\t\t\"gestures\": {\n\t\t\t\t\"types\": \"4\"\n\t\t\t}\n\t\t}\n\t}\n}", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r543243966", "createdAt": "2020-12-15T10:55:53Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUwNTYwMg==", "bodyText": "thanks. Implemented", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r543505602", "createdAt": "2020-12-15T16:42:28Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/YoutubeParsingHelper.java", "diffHunk": "@@ -551,4 +548,116 @@ public static void defaultAlertsCheck(final JsonObject initialData) throws Parsi\n             }\n         }\n     }\n+\n+    @Nonnull\n+    public static List<MetaInfo> getMetaInfo(final JsonArray contents) throws ParsingException {\n+        final List<MetaInfo> metaInfo = new ArrayList<>();\n+        for (final Object content : contents) {\n+            final JsonObject resultObject = (JsonObject) content;\n+            if (resultObject.has(\"itemSectionRenderer\")) {\n+                for (final Object sectionContentObject :\n+                        resultObject.getObject(\"itemSectionRenderer\").getArray(\"contents\")) {\n+\n+                    final JsonObject sectionContent = (JsonObject) sectionContentObject;\n+                    if (sectionContent.has(\"infoPanelContentRenderer\")) {\n+                        metaInfo.add(getInfoPanelContent(sectionContent.getObject(\"infoPanelContentRenderer\")));\n+                    }\n+                    if (sectionContent.has(\"clarificationRenderer\")) {\n+                        metaInfo.add(getClarificationRendererContent(sectionContent.getObject(\"clarificationRenderer\")\n+                        ));\n+                    }\n+\n+                }\n+            }\n+        }\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getInfoPanelContent(final JsonObject infoPanelContentRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+        final StringBuilder sb = new StringBuilder();\n+        for (final Object paragraph : infoPanelContentRenderer.getArray(\"paragraphs\")) {\n+            sb.append(YoutubeParsingHelper.getTextFromObject((JsonObject) paragraph));\n+            if (infoPanelContentRenderer.getArray(\"paragraphs\").size() > 1) {\n+                sb.append(\"<br>\");\n+            }\n+        }\n+        metaInfo.setText(sb.toString());\n+        if (infoPanelContentRenderer.has(\"sourceEndpoint\")) {\n+            final String metaInfoLinkUrl = YoutubeParsingHelper.getUrlFromNavigationEndpoint(\n+                    infoPanelContentRenderer.getObject(\"sourceEndpoint\"));\n+            try {\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(metaInfoLinkUrl))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    infoPanelContentRenderer.getObject(\"inlineSource\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        return metaInfo;\n+    }\n+\n+    @Nonnull\n+    private static MetaInfo getClarificationRendererContent(final JsonObject clarificationRenderer)\n+            throws ParsingException {\n+        final MetaInfo metaInfo = new MetaInfo();\n+\n+        final String title = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"contentTitle\"));\n+        final String text = YoutubeParsingHelper.getTextFromObject(clarificationRenderer.getObject(\"text\"));\n+        if (title == null || text ==  null) {\n+            throw new ParsingException(\"Could not extract clarification renderer content\");\n+        }\n+        metaInfo.setTitle(title);\n+        metaInfo.setText(text);\n+\n+        if (clarificationRenderer.has(\"actionButton\")) {\n+            final JsonObject actionButton = clarificationRenderer.getObject(\"actionButton\")\n+                    .getObject(\"buttonRenderer\");\n+            try {\n+                final String url = YoutubeParsingHelper.getUrlFromNavigationEndpoint(actionButton.getObject(\"command\"));\n+                metaInfo.addUrl(new URL(Objects.requireNonNull(extractedCachedUrlIfNeeded(url))));\n+            } catch (final NullPointerException | MalformedURLException e) {\n+                throw new ParsingException(\"Could not get metadata info URL\", e);\n+            }\n+\n+            final String metaInfoLinkText = YoutubeParsingHelper.getTextFromObject(\n+                    actionButton.getObject(\"text\"));\n+            if (isNullOrEmpty(metaInfoLinkText)) {\n+                throw new ParsingException(\"Could not get metadata info link text.\");\n+            }\n+            metaInfo.addUrlText(metaInfoLinkText);\n+        }\n+\n+        if (clarificationRenderer.has(\"secondaryEndpoint\")) {\n+            // TODO: implement\n+            // These URLs point to a Google search of the topic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NTczMA=="}, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU2OTUyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozMTozNVrOIEfOLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozMTozNVrOIEfOLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njc1MQ==", "bodyText": "I think this Javadoc is outdated\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.\n          \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided. If the info contains a link, the String\n          \n          \n            \n                 *          is HTML formatted.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576751", "createdAt": "2020-12-12T13:31:35Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -476,4 +477,19 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract String getSupportInfo() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty String if not provided. If the info contains a link, the String\n+     *          is HTML formatted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU3MTU4OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MetaInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozMjoyOVrOIEfPDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozMjoyOVrOIEfPDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3Njk3NA==", "bodyText": "Maybe the format of the text should be pointed out (like with video description)", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541576974", "createdAt": "2020-12-12T13:32:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/MetaInfo.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.schabi.newpipe.extractor;\n+\n+import java.io.Serializable;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+public class MetaInfo implements Serializable {\n+\n+    private String title = \"\";\n+    private String text = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU3NDEwOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozNDoyMFrOIEfQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozNDoyMFrOIEfQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI1OA==", "bodyText": "Make this return an empty list by default, to prevent having to point it out manually every time, like with DefaultStreamExtractorTest", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577258", "createdAt": "2020-12-12T13:34:20Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultSearchExtractorTest.java", "diffHunk": "@@ -20,6 +27,8 @@ public boolean isCorrectedSearch() {\n         return false;\n     }\n \n+    public abstract List<MetaInfo> expectedMetaInfo() throws MalformedURLException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTU3NDMwOnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozNDoyOVrOIEfQQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQxMzozNDoyOVrOIEfQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTU3NzI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available\n          \n          \n            \n                public List<MetaInfo> expectedMetaInfo() throws MalformedURLException { return Collections.emptyList(); } // default: no metadata info available", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r541577281", "createdAt": "2020-12-12T13:34:29Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultStreamExtractorTest.java", "diffHunk": "@@ -66,6 +70,7 @@\n     public Locale expectedLanguageInfo() { return null; } // default: no language info available\n     public List<String> expectedTags() { return Collections.emptyList(); } // default: no tags\n     public String expectedSupportInfo() { return \"\"; } // default: no support info available\n+    public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {return Collections.emptyList(); } // default: no metadata info available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3764c5948cb731f5a674f714b302a52b66ebe68"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDgzMDI3OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDowNFrOIJEmWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDowNFrOIJEmWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzQ0OQ==", "bodyText": "These should also contain the other link", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383449", "createdAt": "2020-12-20T14:20:04Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/youtube/search/YoutubeSearchExtractorTest.java", "diffHunk": "@@ -211,4 +215,33 @@ public void duplicatedItemsCheck() throws Exception {\n             assertNoDuplicatedItems(YouTube, page1, page2);\n         }\n     }\n+\n+    public static class MetaInfoTest extends DefaultSearchExtractorTest {\n+        private static SearchExtractor extractor;\n+        private static final String QUERY = \"Covid\";\n+\n+        @Test\n+        public void clarificationTest() throws Exception {\n+            NewPipe.init(DownloaderTestImpl.getInstance());\n+            extractor = YouTube.getSearchExtractor(QUERY, singletonList(VIDEOS), \"\");\n+            extractor.fetchPage();\n+        }\n+\n+        @Override public String expectedSearchString() { return QUERY; }\n+        @Override public String expectedSearchSuggestion() { return null; }\n+        @Override public List<MetaInfo> expectedMetaInfo() throws MalformedURLException {\n+            return Collections.singletonList(new MetaInfo(\n+                    \"COVID-19\",\n+                    new Description(\"Get the latest information from the WHO about coronavirus.\", Description.PLAIN_TEXT),\n+                    Collections.singletonList(new URL(\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019\")),\n+                    Collections.singletonList(\"LEARN MORE\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNDgzMDc0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDo1MFrOIJEmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNDoyMDo1MFrOIJEmnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM4MzUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return  The meta info of the stream or an empty List if not provided.\n          \n          \n            \n                 * @return The meta info of the stream or an empty List if not provided.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/451#discussion_r546383517", "createdAt": "2020-12-20T14:20:50Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -486,4 +487,18 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n      */\n     @Nonnull\n     public abstract List<StreamSegment> getStreamSegments() throws ParsingException;\n+\n+    /**\n+     * Meta information about the stream.\n+     * <p>\n+     * This can be information about the stream creator (e.g. if the creator is a public broadcaster)\n+     * or further information on the topic (e.g. hints that the video might contain conspiracy theories\n+     * or contains information about a current health situation like the Covid-19 pandemic).\n+     * </p>\n+ *     The meta information often contains links to external sources like Wikipedia or the WHO.\n+     * @return  The meta info of the stream or an empty List if not provided.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31a6fe1b9016dc0d02dc48580464b5599708c1da"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}