{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0Nzg4NzM0", "number": 239, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozOTo0NFrODZMnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjo0NDoyMFrODd7PgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzQ3NjU1OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozOTo0NFrOFfdF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzozODo0M1rOFfemag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjg0NQ==", "bodyText": "We might want to check whether we have the full description before starting another download.\nI think it should be save to check whether the description ends with \"...\". I think the description's max length is 250 characters. But this should be validated.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r368526845", "createdAt": "2020-01-20T12:39:44Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -66,16 +65,25 @@ public DateWrapper getUploadDate() throws ParsingException {\n  \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        return baseUrl + JsonUtils.getString(json, \"thumbnailPath\");\n+        return baseUrl + JsonUtils.getString(json, \"previewPath\");\n     }\n \n     @Override\n     public String getDescription() throws ParsingException {\n+        String description = \"\";\n+        Downloader dl = NewPipe.getDownloader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a281519e771d139e7d6cd1b7f64dece92cbb5124"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1MTUzMA==", "bodyText": "Done.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r368551530", "createdAt": "2020-01-20T13:38:43Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -66,16 +65,25 @@ public DateWrapper getUploadDate() throws ParsingException {\n  \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        return baseUrl + JsonUtils.getString(json, \"thumbnailPath\");\n+        return baseUrl + JsonUtils.getString(json, \"previewPath\");\n     }\n \n     @Override\n     public String getDescription() throws ParsingException {\n+        String description = \"\";\n+        Downloader dl = NewPipe.getDownloader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNjg0NQ=="}, "originalCommit": {"oid": "a281519e771d139e7d6cd1b7f64dece92cbb5124"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzk0NjEyOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNToxNToxMVrOFfhetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNToxNToxMVrOFfhetw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5ODcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (desc.length() == 250 && desc.substring(desc.length() - 3).equals(\"...\")) {\n          \n          \n            \n                    if (desc.length() == 250 && desc.substring(247).equals(\"...\")) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r368598711", "createdAt": "2020-01-20T15:15:11Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -66,16 +65,29 @@ public DateWrapper getUploadDate() throws ParsingException {\n  \n     @Override\n     public String getThumbnailUrl() throws ParsingException {\n-        return baseUrl + JsonUtils.getString(json, \"thumbnailPath\");\n+        return baseUrl + JsonUtils.getString(json, \"previewPath\");\n     }\n \n     @Override\n     public String getDescription() throws ParsingException {\n+        String desc;\n         try {\n-            return JsonUtils.getString(json, \"description\");\n-        }catch(ParsingException e) {\n+            desc = JsonUtils.getString(json, \"description\");\n+        } catch (ParsingException e) {\n             return \"No description\";\n         }\n+        if (desc.length() == 250 && desc.substring(desc.length() - 3).equals(\"...\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad7f97ae836f89a0f555e1062e5cc3b5211b1dc3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk2Mjg3OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MToxMVrOFhKptg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MToxMVrOFhKptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMTg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(value instanceof Boolean) {\n          \n          \n            \n                    if (value instanceof Boolean) {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370321846", "createdAt": "2020-01-23T19:51:11Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "diffHunk": "@@ -37,6 +37,16 @@ public static String getString(@Nonnull JsonObject object, @Nonnull String path)\n             throw new ParsingException(\"Unable to get \" + path);\n         }\n     }\n+\n+    @Nonnull\n+    public static Boolean getBoolean(@Nonnull JsonObject object, @Nonnull String path) throws ParsingException{\n+        Object value = getValue(object, path);\n+        if(value instanceof Boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15c0e750dc95fa0a92cc1c988e781e66631fa7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk2NDkwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MTo0MFrOFhKq3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo1MTo0MFrOFhKq3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMjE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }else {\n          \n          \n            \n                    } else {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370322142", "createdAt": "2020-01-23T19:51:40Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/utils/JsonUtils.java", "diffHunk": "@@ -37,6 +37,16 @@ public static String getString(@Nonnull JsonObject object, @Nonnull String path)\n             throw new ParsingException(\"Unable to get \" + path);\n         }\n     }\n+\n+    @Nonnull\n+    public static Boolean getBoolean(@Nonnull JsonObject object, @Nonnull String path) throws ParsingException{\n+        Object value = getValue(object, path);\n+        if(value instanceof Boolean) {\n+            return (Boolean) value;\n+        }else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a15c0e750dc95fa0a92cc1c988e781e66631fa7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTkwMDI0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoyOTozNVrOFhmfRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoyOTozNVrOFhmfRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NzkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> getTags(){\n          \n          \n            \n                public List<String> getTags() {", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370777927", "createdAt": "2020-01-24T18:29:35Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/extractors/PeertubeStreamExtractor.java", "diffHunk": "@@ -224,15 +243,26 @@ public StreamInfoItemsCollector getRelatedStreams() throws IOException, Extracti\n         if(!StringUtil.isBlank(apiUrl)) getStreamsFromApi(collector, apiUrl);\n         return collector;\n     }\n-    \n-    private List<String> getTags(){\n+\n+    @Override\n+    public List<String> getTags(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTkxOTAzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODozNjozOVrOFhmq_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOToxMToxMFrOFhnnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDkyNw==", "bodyText": "I know, that PeerTube calls this privacy, but from my understanding, visibility or availability are better terms here, because both describe what impact the value of this method has.\n@Stypox @B0pol What do you think?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370780927", "createdAt": "2020-01-24T18:36:39Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NDY3NQ==", "bodyText": "Even YouTube calls it privacy Change video privacy settings \u2014 YouTube support\nI think if we should rename the method, it should be for availability.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370794675", "createdAt": "2020-01-24T19:07:12Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDkyNw=="}, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NjM2Mw==", "bodyText": "Oh. Ok. In this case, only the German translation is a bit different here. I am fine with privacy then \ud83d\udc4d", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370796363", "createdAt": "2020-01-24T19:11:10Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDkyNw=="}, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTkyODc5OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo0MDozNVrOFhmxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzo0MzoxMFrOFhtOLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MjUzNA==", "bodyText": "I think that theScrabi once tried to get this info from YouTube channels, too. Can you please look  whether there is a field in the channel extractor which provides support / donation info and alter the name if needed?", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370782534", "createdAt": "2020-01-24T18:40:35Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;\n+\n+    /**\n+     * The name of the category of the stream.\n+     * If the category is not available you can simply return an empty string.\n+     * @return the category of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getCategory() throws ParsingException;\n+\n+    /**\n+     * The name of the licence of the stream.\n+     * If the licence is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLicence() throws ParsingException;\n+\n+    /**\n+     * The language of the stream.\n+     * If the language is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLanguageInfo() throws ParsingException;\n+\n+    /**\n+     * The list of tags of the stream.\n+     * If the tag list is not available you can simply return an empty list.\n+     * @return the list of tags of the stream or an empty list.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract List<String> getTags() throws ParsingException;\n+\n+    /**\n+     * The support information of the stream.\n+     * see: https://framatube.org/videos/watch/ee408ec8-07cd-4e35-b884-fb681a4b9d37\n+     * (support button).\n+     * If the support information are not available,\n+     * you can simply return an empty String.\n+     * @return the support information of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getSupportInfo() throws ParsingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjc3Nw==", "bodyText": "The only thing I see is getDescription which provides channel's about page. YouTube doesn't have support info or whatever, people put in their video's description / tell about it in the video, outro\u2026\nNotice this method is in video Extractor, because on PeerTube donation button is on videos, and if a user decide to put the support button on a video, it doesn't mean it will be in all videos. See https://framatube.org/videos/watch/c07db2e9-6247-480f-a87e-3ec09e67596c and https://framatube.org/videos/watch/a791c2ff-7588-4ddf-905c-5b7dde051ae8 , same user, first video has donation button, second doesn't\nBTW, getDescription for YouTube is only giving first 160 characters.\nI don't really understand what you want.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370806777", "createdAt": "2020-01-24T19:34:26Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;\n+\n+    /**\n+     * The name of the category of the stream.\n+     * If the category is not available you can simply return an empty string.\n+     * @return the category of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getCategory() throws ParsingException;\n+\n+    /**\n+     * The name of the licence of the stream.\n+     * If the licence is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLicence() throws ParsingException;\n+\n+    /**\n+     * The language of the stream.\n+     * If the language is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLanguageInfo() throws ParsingException;\n+\n+    /**\n+     * The list of tags of the stream.\n+     * If the tag list is not available you can simply return an empty list.\n+     * @return the list of tags of the stream or an empty list.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract List<String> getTags() throws ParsingException;\n+\n+    /**\n+     * The support information of the stream.\n+     * see: https://framatube.org/videos/watch/ee408ec8-07cd-4e35-b884-fb681a4b9d37\n+     * (support button).\n+     * If the support information are not available,\n+     * you can simply return an empty String.\n+     * @return the support information of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getSupportInfo() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MjUzNA=="}, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4NDUyOQ==", "bodyText": "On channel pages, there was an attempt to extract the links and buttons in the green box, but it seems the change was not merged. So my review is pointless then.\n\n\nBTW, getDescription for YouTube is only giving first 160 characters.\n\nI could not reproduce this.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370884529", "createdAt": "2020-01-24T23:24:24Z", "author": {"login": "TobiGr"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;\n+\n+    /**\n+     * The name of the category of the stream.\n+     * If the category is not available you can simply return an empty string.\n+     * @return the category of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getCategory() throws ParsingException;\n+\n+    /**\n+     * The name of the licence of the stream.\n+     * If the licence is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLicence() throws ParsingException;\n+\n+    /**\n+     * The language of the stream.\n+     * If the language is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLanguageInfo() throws ParsingException;\n+\n+    /**\n+     * The list of tags of the stream.\n+     * If the tag list is not available you can simply return an empty list.\n+     * @return the list of tags of the stream or an empty list.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract List<String> getTags() throws ParsingException;\n+\n+    /**\n+     * The support information of the stream.\n+     * see: https://framatube.org/videos/watch/ee408ec8-07cd-4e35-b884-fb681a4b9d37\n+     * (support button).\n+     * If the support information are not available,\n+     * you can simply return an empty String.\n+     * @return the support information of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getSupportInfo() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MjUzNA=="}, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4ODIzNg==", "bodyText": "I could not reproduce this.\n\nI was talking about channel getDescription\nSteps to reproduce:\ngo in YoutubeChannelExtractorTest.java\nreplace any TestDescription() methods content by\nString desc = extractor.getDescription(); System.out.println(desc.length());\nrun TestDescription()\noutput is always 160\nBTW, line 281: //TODO: Description get cuts out, because the og:description is optimized and don't have all the content\nbut this is not related to the pr so i'm marking this conversation resolved", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r370888236", "createdAt": "2020-01-24T23:43:10Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/StreamExtractor.java", "diffHunk": "@@ -349,4 +350,72 @@ protected long getTimestampSeconds(String regexPattern) throws ParsingException\n             return 0;\n         }\n     }\n+\n+    /**\n+     * The host of the stream (Eg. peertube.cpy.re).\n+     * If the host is not available, or if the service doesn't use\n+     * a federated system, but a centralised system,\n+     * you can simply return an empty string.\n+     * @return the host of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getHost() throws ParsingException;\n+\n+    /**\n+     * The privacy of the stream (Eg. Public, Private, Unlisted\u2026).\n+     * If the privacy is not available you can simply return an empty string.\n+     * @return the privacy of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getPrivacy() throws ParsingException;\n+\n+    /**\n+     * The name of the category of the stream.\n+     * If the category is not available you can simply return an empty string.\n+     * @return the category of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getCategory() throws ParsingException;\n+\n+    /**\n+     * The name of the licence of the stream.\n+     * If the licence is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLicence() throws ParsingException;\n+\n+    /**\n+     * The language of the stream.\n+     * If the language is not available you can simply return an empty string.\n+     * @return the licence of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getLanguageInfo() throws ParsingException;\n+\n+    /**\n+     * The list of tags of the stream.\n+     * If the tag list is not available you can simply return an empty list.\n+     * @return the list of tags of the stream or an empty list.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract List<String> getTags() throws ParsingException;\n+\n+    /**\n+     * The support information of the stream.\n+     * see: https://framatube.org/videos/watch/ee408ec8-07cd-4e35-b884-fb681a4b9d37\n+     * (support button).\n+     * If the support information are not available,\n+     * you can simply return an empty String.\n+     * @return the support information of the stream or an empty String.\n+     * @throws ParsingException\n+     */\n+    @Nonnull\n+    public abstract String getSupportInfo() throws ParsingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MjUzNA=="}, "originalCommit": {"oid": "812c8e0ad25de2f1d3f5da16975cae1b145072f1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTk4NzE0OnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeParsingHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDo0MDoyMVrOFmpfKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTozNzoxM1rOFmrEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2OTkzMA==", "bodyText": "This is dependent on timezone of the user.\nSince PeerTube returns GMT  response sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\")) should do the trick.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r376069930", "createdAt": "2020-02-06T20:40:21Z", "author": {"login": "yausername"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeParsingHelper.java", "diffHunk": "@@ -27,6 +28,7 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         Date date;\n         try {\n             date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.S'Z'\").parse(textualUploadDate);\n+            date = new Date(date.getTime() + TimeUnit.HOURS.toMillis(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b671a4ba18611f6d0e76789ba1e07ecb4d8045e9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5NTc5NA==", "bodyText": "Makes sense as I'm GMT+1. Thanks for the help!", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r376095794", "createdAt": "2020-02-06T21:37:13Z", "author": {"login": "B0pol"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/peertube/PeertubeParsingHelper.java", "diffHunk": "@@ -27,6 +28,7 @@ public static Calendar parseDateFrom(String textualUploadDate) throws ParsingExc\n         Date date;\n         try {\n             date = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.S'Z'\").parse(textualUploadDate);\n+            date = new Date(date.getTime() + TimeUnit.HOURS.toMillis(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2OTkzMA=="}, "originalCommit": {"oid": "b671a4ba18611f6d0e76789ba1e07ecb4d8045e9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzA1OTIwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/Description.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjo0NDoyMFrOFmzmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjo0NDoyMFrOFmzmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzNTYzOQ==", "bodyText": "We don't need this constructor. Description(String content, int type) should be enough.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/239#discussion_r376235639", "createdAt": "2020-02-07T06:44:20Z", "author": {"login": "yausername"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/stream/Description.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.schabi.newpipe.extractor.stream;\n+\n+import static org.schabi.newpipe.extractor.ServiceList.PeerTube;\n+import static org.schabi.newpipe.extractor.ServiceList.YouTube;\n+\n+public class Description {\n+    private String content;\n+    private int type;\n+\n+    public static final int HTML = 1;\n+    public static final int MARKDOWN = 2;\n+    public static final int PLAIN_TEXT = 3;\n+    public static final Description emptyDescription = new Description(PLAIN_TEXT, \"\");\n+\n+    public Description(int serviceID, String content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c65b2948dcc58be4a004938f415bbd46380203"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2829, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}