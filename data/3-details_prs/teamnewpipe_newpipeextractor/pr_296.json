{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODk4NDI2", "number": 296, "title": "Fix search errors detection and refactor search tests", "bodyText": "There was an oversight in the search collector which resulted in some errors being lost, notice that errors from the child collectors are not being retrieved anywhere in this class.\nAlso, due to the high fragmentation of implementations of search tests (some tested their items, some not), I refactored all of them so they are more consistent with each other (only search tests for now).\nThese fixes/improvements revealed some bugs, so I fixed them as well.", "createdAt": "2020-03-21T19:06:19Z", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296", "merged": true, "mergeCommit": {"oid": "e4874d554e205f915e92f1ea192ced19379f86ea"}, "closed": true, "closedAt": "2020-03-24T20:53:33Z", "author": {"login": "mauriciocolli"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcP5zOOgH2gAyMzkxODk4NDI2OjBjMjcxOThiYTE3YmM4NzIxZmI3MTJmZDE4N2RhYjgxNTM3NDNmZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ5DRbAFqTM4MDY3Njg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0c27198ba17bc8721fb712fd187dab8153743fdb", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0c27198ba17bc8721fb712fd187dab8153743fdb", "committedDate": "2020-03-21T18:55:29Z", "message": "Include errors from child collectors in the search collector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d72130edae12ff4a85ad18b9957adb8bdef68930", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/d72130edae12ff4a85ad18b9957adb8bdef68930", "committedDate": "2020-03-21T18:55:34Z", "message": "Always return a new item collector in the search extractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9704fc99521959c7abea90d6600dfa1d40de3bca", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9704fc99521959c7abea90d6600dfa1d40de3bca", "committedDate": "2020-03-21T18:55:36Z", "message": "Improve search extractor tests for services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b7999fe54c30d77e710c38ca64cea80ba1cbf5c", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/9b7999fe54c30d77e710c38ca64cea80ba1cbf5c", "committedDate": "2020-03-21T18:55:37Z", "message": "[YouTube] Check if channel item has subscription count in search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f8001a49fd963d008a02e64f7bd8ff1239548b", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/b7f8001a49fd963d008a02e64f7bd8ff1239548b", "committedDate": "2020-03-21T18:55:38Z", "message": "[YouTube] Add check for channel items without description in search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "921bf30bb7eedbd0c92843d3471cb2c092ef4754", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/921bf30bb7eedbd0c92843d3471cb2c092ef4754", "committedDate": "2020-03-21T18:55:39Z", "message": "[YouTube] Add check for channel items with no video count in search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/04bfa0ec6a01228a6cb0f91177855e94a88f4981", "committedDate": "2020-03-21T18:55:40Z", "message": "[PeerTube] Update video used in age limit test (was 404 not found)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDAxNDQ1", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#pullrequestreview-379001445", "createdAt": "2020-03-22T12:45:41Z", "commit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0NTo0MVrOF5vY0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0NTo0MVrOF5vY0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTU1Mg==", "bodyText": "Do we really need a getInfoItemSearchCollector() function? We don't have one in the other kind of extractors either. Otherwise this PR looks good, however you'll need to do YouTube Music tests as well when that PR gets merged.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396089552", "createdAt": "2020-03-22T12:45:41Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java", "diffHunk": "@@ -31,7 +28,7 @@ public String getSearchString() {\n     public abstract String getSearchSuggestion() throws ParsingException;\n \n     protected InfoItemsSearchCollector getInfoItemSearchCollector() {\n-        return collector;\n+        return new InfoItemsSearchCollector(getService().getServiceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDE0MTI5", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#pullrequestreview-379014129", "createdAt": "2020-03-22T15:05:39Z", "commit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNTowNTozOVrOF5wQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToxMToxNFrOF5wSvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwMzc5MQ==", "bodyText": "Here you will need to return ListExtractor.ITEM_COUNT_UNKNOWN after #280 is merged", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396103791", "createdAt": "2020-03-22T15:05:39Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelInfoItemExtractor.java", "diffHunk": "@@ -80,7 +86,14 @@ public long getSubscriberCount() throws ParsingException {\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            return Long.parseLong(Utils.removeNonDigitCharacters(getTextFromObject(channelInfoItem.getObject(\"videoCountText\"))));\n+            final JsonObject videoCountObject = channelInfoItem.getObject(\"videoCountText\");\n+\n+            if (videoCountObject == null) {\n+                // Video count is not available, channel probably has no public uploads.\n+                return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDM4MQ==", "bodyText": "Use assertThat; maybe omit CoreMatchers. and import statically\nDo this everywhere you test if a string contains another.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), CoreMatchers.containsString(expectedUrlContains());\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), containsString(expectedUrlContains());", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396104381", "createdAt": "2020-03-22T15:11:14Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+\n+public abstract class DefaultExtractorTest<T extends Extractor> implements BaseExtractorTest {\n+    public abstract T extractor() throws Exception;\n+\n+    public abstract StreamingService expectedService() throws Exception;\n+    public abstract String expectedName() throws Exception;\n+    public abstract String expectedId() throws Exception;\n+    public abstract String expectedUrlContains() throws Exception;\n+    public abstract String expectedOriginalUrlContains() throws Exception;\n+\n+    @Test\n+    @Override\n+    public void testServiceId() throws Exception {\n+        assertEquals(expectedService().getServiceId(), extractor().getServiceId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testName() throws Exception {\n+        assertEquals(expectedName(), extractor().getName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testId() throws Exception {\n+        assertEquals(expectedId(), extractor().getId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUrl() throws Exception {\n+        final String url = extractor().getUrl();\n+        final String expectedContains = expectedUrlContains();\n+\n+        assertIsSecureUrl(url);\n+        assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n+                url.contains(expectedContains));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c921e5d6a5651186af57ac3bd645c1ee53a3d9f5", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/c921e5d6a5651186af57ac3bd645c1ee53a3d9f5", "committedDate": "2020-03-23T21:08:51Z", "message": "Remove unnecessary collector creation function from search extractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a20c53f1a5bad1c35686d19fabce855e4cd747b", "author": {"user": {"login": "mauriciocolli", "name": "Mauricio Colli"}}, "url": "https://github.com/TeamNewPipe/NewPipeExtractor/commit/0a20c53f1a5bad1c35686d19fabce855e4cd747b", "committedDate": "2020-03-23T21:08:59Z", "message": "Use easier-to-read asserts statements in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjc2ODcx", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#pullrequestreview-380676871", "createdAt": "2020-03-24T20:37:02Z", "commit": {"oid": "0a20c53f1a5bad1c35686d19fabce855e4cd747b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3989, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}