{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODk4NDI2", "number": 296, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0NTo0MVrODqJ2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToxMToxNFrODqKgjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTI4MTMzOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0NTo0MVrOF5vY0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMjo0NTo0MVrOF5vY0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4OTU1Mg==", "bodyText": "Do we really need a getInfoItemSearchCollector() function? We don't have one in the other kind of extractors either. Otherwise this PR looks good, however you'll need to do YouTube Music tests as well when that PR gets merged.", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396089552", "createdAt": "2020-03-22T12:45:41Z", "author": {"login": "wb9688"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/search/SearchExtractor.java", "diffHunk": "@@ -31,7 +28,7 @@ public String getSearchString() {\n     public abstract String getSearchSuggestion() throws ParsingException;\n \n     protected InfoItemsSearchCollector getInfoItemSearchCollector() {\n-        return collector;\n+        return new InfoItemsSearchCollector(getService().getServiceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTM4NTMwOnYy", "diffSide": "RIGHT", "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelInfoItemExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNTowNTozOVrOF5wQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNTowNTozOVrOF5wQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwMzc5MQ==", "bodyText": "Here you will need to return ListExtractor.ITEM_COUNT_UNKNOWN after #280 is merged", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396103791", "createdAt": "2020-03-22T15:05:39Z", "author": {"login": "Stypox"}, "path": "extractor/src/main/java/org/schabi/newpipe/extractor/services/youtube/extractors/YoutubeChannelInfoItemExtractor.java", "diffHunk": "@@ -80,7 +86,14 @@ public long getSubscriberCount() throws ParsingException {\n     @Override\n     public long getStreamCount() throws ParsingException {\n         try {\n-            return Long.parseLong(Utils.removeNonDigitCharacters(getTextFromObject(channelInfoItem.getObject(\"videoCountText\"))));\n+            final JsonObject videoCountObject = channelInfoItem.getObject(\"videoCountText\");\n+\n+            if (videoCountObject == null) {\n+                // Video count is not available, channel probably has no public uploads.\n+                return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NTM4OTU5OnYy", "diffSide": "RIGHT", "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToxMToxNFrOF5wSvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToxMDo1NlrOF6YPqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDM4MQ==", "bodyText": "Use assertThat; maybe omit CoreMatchers. and import statically\nDo this everywhere you test if a string contains another.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), CoreMatchers.containsString(expectedUrlContains());\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String url = extractor().getUrl();\n          \n          \n            \n                    final String expectedContains = expectedUrlContains();\n          \n          \n            \n            \n          \n          \n            \n                    assertIsSecureUrl(url);\n          \n          \n            \n                    assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n          \n          \n            \n                            url.contains(expectedContains));\n          \n          \n            \n                    assertThat(extractor().getUrl(), containsString(expectedUrlContains());", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396104381", "createdAt": "2020-03-22T15:11:14Z", "author": {"login": "Stypox"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+\n+public abstract class DefaultExtractorTest<T extends Extractor> implements BaseExtractorTest {\n+    public abstract T extractor() throws Exception;\n+\n+    public abstract StreamingService expectedService() throws Exception;\n+    public abstract String expectedName() throws Exception;\n+    public abstract String expectedId() throws Exception;\n+    public abstract String expectedUrlContains() throws Exception;\n+    public abstract String expectedOriginalUrlContains() throws Exception;\n+\n+    @Test\n+    @Override\n+    public void testServiceId() throws Exception {\n+        assertEquals(expectedService().getServiceId(), extractor().getServiceId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testName() throws Exception {\n+        assertEquals(expectedName(), extractor().getName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testId() throws Exception {\n+        assertEquals(expectedId(), extractor().getId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUrl() throws Exception {\n+        final String url = extractor().getUrl();\n+        final String expectedContains = expectedUrlContains();\n+\n+        assertIsSecureUrl(url);\n+        assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n+                url.contains(expectedContains));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc1ODk1NQ==", "bodyText": "Forgot about those, thanks for the reminder, much cleaner!", "url": "https://github.com/TeamNewPipe/NewPipeExtractor/pull/296#discussion_r396758955", "createdAt": "2020-03-23T21:10:56Z", "author": {"login": "mauriciocolli"}, "path": "extractor/src/test/java/org/schabi/newpipe/extractor/services/DefaultExtractorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.schabi.newpipe.extractor.services;\n+\n+import org.junit.Test;\n+import org.schabi.newpipe.extractor.Extractor;\n+import org.schabi.newpipe.extractor.StreamingService;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.schabi.newpipe.extractor.ExtractorAsserts.assertIsSecureUrl;\n+\n+public abstract class DefaultExtractorTest<T extends Extractor> implements BaseExtractorTest {\n+    public abstract T extractor() throws Exception;\n+\n+    public abstract StreamingService expectedService() throws Exception;\n+    public abstract String expectedName() throws Exception;\n+    public abstract String expectedId() throws Exception;\n+    public abstract String expectedUrlContains() throws Exception;\n+    public abstract String expectedOriginalUrlContains() throws Exception;\n+\n+    @Test\n+    @Override\n+    public void testServiceId() throws Exception {\n+        assertEquals(expectedService().getServiceId(), extractor().getServiceId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testName() throws Exception {\n+        assertEquals(expectedName(), extractor().getName());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testId() throws Exception {\n+        assertEquals(expectedId(), extractor().getId());\n+    }\n+\n+    @Test\n+    @Override\n+    public void testUrl() throws Exception {\n+        final String url = extractor().getUrl();\n+        final String expectedContains = expectedUrlContains();\n+\n+        assertIsSecureUrl(url);\n+        assertTrue(\"Url \\\"\" + url + \"\\\" doesn't contains \\\"\" + expectedContains + \"\\\"\",\n+                url.contains(expectedContains));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNDM4MQ=="}, "originalCommit": {"oid": "04bfa0ec6a01228a6cb0f91177855e94a88f4981"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2878, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}